"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i = decorators.length - 1, decorator; i >= 0; i--)
      if (decorator = decorators[i])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod = (obj, member, method) => {
    __accessCheck(obj, member, "access private method");
    return method;
  };

  // node_modules/howler/dist/howler.js
  var require_howler = __commonJS({
    "node_modules/howler/dist/howler.js"(exports) {
      (function() {
        "use strict";
        var HowlerGlobal2 = function() {
          this.init();
        };
        HowlerGlobal2.prototype = {
          /**
           * Initialize the global Howler object.
           * @return {Howler}
           */
          init: function() {
            var self2 = this || Howler2;
            self2._counter = 1e3;
            self2._html5AudioPool = [];
            self2.html5PoolSize = 10;
            self2._codecs = {};
            self2._howls = [];
            self2._muted = false;
            self2._volume = 1;
            self2._canPlayEvent = "canplaythrough";
            self2._navigator = typeof window !== "undefined" && window.navigator ? window.navigator : null;
            self2.masterGain = null;
            self2.noAudio = false;
            self2.usingWebAudio = true;
            self2.autoSuspend = true;
            self2.ctx = null;
            self2.autoUnlock = true;
            self2._setup();
            return self2;
          },
          /**
           * Get/set the global volume for all sounds.
           * @param  {Float} vol Volume from 0.0 to 1.0.
           * @return {Howler/Float}     Returns self or current volume.
           */
          volume: function(vol) {
            var self2 = this || Howler2;
            vol = parseFloat(vol);
            if (!self2.ctx) {
              setupAudioContext();
            }
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
              self2._volume = vol;
              if (self2._muted) {
                return self2;
              }
              if (self2.usingWebAudio) {
                self2.masterGain.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
              }
              for (var i = 0; i < self2._howls.length; i++) {
                if (!self2._howls[i]._webAudio) {
                  var ids = self2._howls[i]._getSoundIds();
                  for (var j = 0; j < ids.length; j++) {
                    var sound = self2._howls[i]._soundById(ids[j]);
                    if (sound && sound._node) {
                      sound._node.volume = sound._volume * vol;
                    }
                  }
                }
              }
              return self2;
            }
            return self2._volume;
          },
          /**
           * Handle muting and unmuting globally.
           * @param  {Boolean} muted Is muted or not.
           */
          mute: function(muted) {
            var self2 = this || Howler2;
            if (!self2.ctx) {
              setupAudioContext();
            }
            self2._muted = muted;
            if (self2.usingWebAudio) {
              self2.masterGain.gain.setValueAtTime(muted ? 0 : self2._volume, Howler2.ctx.currentTime);
            }
            for (var i = 0; i < self2._howls.length; i++) {
              if (!self2._howls[i]._webAudio) {
                var ids = self2._howls[i]._getSoundIds();
                for (var j = 0; j < ids.length; j++) {
                  var sound = self2._howls[i]._soundById(ids[j]);
                  if (sound && sound._node) {
                    sound._node.muted = muted ? true : sound._muted;
                  }
                }
              }
            }
            return self2;
          },
          /**
           * Handle stopping all sounds globally.
           */
          stop: function() {
            var self2 = this || Howler2;
            for (var i = 0; i < self2._howls.length; i++) {
              self2._howls[i].stop();
            }
            return self2;
          },
          /**
           * Unload and destroy all currently loaded Howl objects.
           * @return {Howler}
           */
          unload: function() {
            var self2 = this || Howler2;
            for (var i = self2._howls.length - 1; i >= 0; i--) {
              self2._howls[i].unload();
            }
            if (self2.usingWebAudio && self2.ctx && typeof self2.ctx.close !== "undefined") {
              self2.ctx.close();
              self2.ctx = null;
              setupAudioContext();
            }
            return self2;
          },
          /**
           * Check for codec support of specific extension.
           * @param  {String} ext Audio file extention.
           * @return {Boolean}
           */
          codecs: function(ext) {
            return (this || Howler2)._codecs[ext.replace(/^x-/, "")];
          },
          /**
           * Setup various state values for global tracking.
           * @return {Howler}
           */
          _setup: function() {
            var self2 = this || Howler2;
            self2.state = self2.ctx ? self2.ctx.state || "suspended" : "suspended";
            self2._autoSuspend();
            if (!self2.usingWebAudio) {
              if (typeof Audio !== "undefined") {
                try {
                  var test = new Audio();
                  if (typeof test.oncanplaythrough === "undefined") {
                    self2._canPlayEvent = "canplay";
                  }
                } catch (e) {
                  self2.noAudio = true;
                }
              } else {
                self2.noAudio = true;
              }
            }
            try {
              var test = new Audio();
              if (test.muted) {
                self2.noAudio = true;
              }
            } catch (e) {
            }
            if (!self2.noAudio) {
              self2._setupCodecs();
            }
            return self2;
          },
          /**
           * Check for browser support for various codecs and cache the results.
           * @return {Howler}
           */
          _setupCodecs: function() {
            var self2 = this || Howler2;
            var audioTest = null;
            try {
              audioTest = typeof Audio !== "undefined" ? new Audio() : null;
            } catch (err) {
              return self2;
            }
            if (!audioTest || typeof audioTest.canPlayType !== "function") {
              return self2;
            }
            var mpegTest = audioTest.canPlayType("audio/mpeg;").replace(/^no$/, "");
            var ua = self2._navigator ? self2._navigator.userAgent : "";
            var checkOpera = ua.match(/OPR\/([0-6].)/g);
            var isOldOpera = checkOpera && parseInt(checkOpera[0].split("/")[1], 10) < 33;
            var checkSafari = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
            var safariVersion = ua.match(/Version\/(.*?) /);
            var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;
            self2._codecs = {
              mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType("audio/mp3;").replace(/^no$/, ""))),
              mpeg: !!mpegTest,
              opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
              ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType("audio/wav")).replace(/^no$/, ""),
              aac: !!audioTest.canPlayType("audio/aac;").replace(/^no$/, ""),
              caf: !!audioTest.canPlayType("audio/x-caf;").replace(/^no$/, ""),
              m4a: !!(audioTest.canPlayType("audio/x-m4a;") || audioTest.canPlayType("audio/m4a;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              m4b: !!(audioTest.canPlayType("audio/x-m4b;") || audioTest.canPlayType("audio/m4b;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              mp4: !!(audioTest.canPlayType("audio/x-mp4;") || audioTest.canPlayType("audio/mp4;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
              flac: !!(audioTest.canPlayType("audio/x-flac;") || audioTest.canPlayType("audio/flac;")).replace(/^no$/, "")
            };
            return self2;
          },
          /**
           * Some browsers/devices will only allow audio to be played after a user interaction.
           * Attempt to automatically unlock audio on the first user interaction.
           * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
           * @return {Howler}
           */
          _unlockAudio: function() {
            var self2 = this || Howler2;
            if (self2._audioUnlocked || !self2.ctx) {
              return;
            }
            self2._audioUnlocked = false;
            self2.autoUnlock = false;
            if (!self2._mobileUnloaded && self2.ctx.sampleRate !== 44100) {
              self2._mobileUnloaded = true;
              self2.unload();
            }
            self2._scratchBuffer = self2.ctx.createBuffer(1, 1, 22050);
            var unlock = function(e) {
              while (self2._html5AudioPool.length < self2.html5PoolSize) {
                try {
                  var audioNode = new Audio();
                  audioNode._unlocked = true;
                  self2._releaseHtml5Audio(audioNode);
                } catch (e2) {
                  self2.noAudio = true;
                  break;
                }
              }
              for (var i = 0; i < self2._howls.length; i++) {
                if (!self2._howls[i]._webAudio) {
                  var ids = self2._howls[i]._getSoundIds();
                  for (var j = 0; j < ids.length; j++) {
                    var sound = self2._howls[i]._soundById(ids[j]);
                    if (sound && sound._node && !sound._node._unlocked) {
                      sound._node._unlocked = true;
                      sound._node.load();
                    }
                  }
                }
              }
              self2._autoResume();
              var source = self2.ctx.createBufferSource();
              source.buffer = self2._scratchBuffer;
              source.connect(self2.ctx.destination);
              if (typeof source.start === "undefined") {
                source.noteOn(0);
              } else {
                source.start(0);
              }
              if (typeof self2.ctx.resume === "function") {
                self2.ctx.resume();
              }
              source.onended = function() {
                source.disconnect(0);
                self2._audioUnlocked = true;
                document.removeEventListener("touchstart", unlock, true);
                document.removeEventListener("touchend", unlock, true);
                document.removeEventListener("click", unlock, true);
                document.removeEventListener("keydown", unlock, true);
                for (var i2 = 0; i2 < self2._howls.length; i2++) {
                  self2._howls[i2]._emit("unlock");
                }
              };
            };
            document.addEventListener("touchstart", unlock, true);
            document.addEventListener("touchend", unlock, true);
            document.addEventListener("click", unlock, true);
            document.addEventListener("keydown", unlock, true);
            return self2;
          },
          /**
           * Get an unlocked HTML5 Audio object from the pool. If none are left,
           * return a new Audio object and throw a warning.
           * @return {Audio} HTML5 Audio object.
           */
          _obtainHtml5Audio: function() {
            var self2 = this || Howler2;
            if (self2._html5AudioPool.length) {
              return self2._html5AudioPool.pop();
            }
            var testPlay = new Audio().play();
            if (testPlay && typeof Promise !== "undefined" && (testPlay instanceof Promise || typeof testPlay.then === "function")) {
              testPlay.catch(function() {
                console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
              });
            }
            return new Audio();
          },
          /**
           * Return an activated HTML5 Audio object to the pool.
           * @return {Howler}
           */
          _releaseHtml5Audio: function(audio) {
            var self2 = this || Howler2;
            if (audio._unlocked) {
              self2._html5AudioPool.push(audio);
            }
            return self2;
          },
          /**
           * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
           * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
           * @return {Howler}
           */
          _autoSuspend: function() {
            var self2 = this;
            if (!self2.autoSuspend || !self2.ctx || typeof self2.ctx.suspend === "undefined" || !Howler2.usingWebAudio) {
              return;
            }
            for (var i = 0; i < self2._howls.length; i++) {
              if (self2._howls[i]._webAudio) {
                for (var j = 0; j < self2._howls[i]._sounds.length; j++) {
                  if (!self2._howls[i]._sounds[j]._paused) {
                    return self2;
                  }
                }
              }
            }
            if (self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
            }
            self2._suspendTimer = setTimeout(function() {
              if (!self2.autoSuspend) {
                return;
              }
              self2._suspendTimer = null;
              self2.state = "suspending";
              var handleSuspension = function() {
                self2.state = "suspended";
                if (self2._resumeAfterSuspend) {
                  delete self2._resumeAfterSuspend;
                  self2._autoResume();
                }
              };
              self2.ctx.suspend().then(handleSuspension, handleSuspension);
            }, 3e4);
            return self2;
          },
          /**
           * Automatically resume the Web Audio AudioContext when a new sound is played.
           * @return {Howler}
           */
          _autoResume: function() {
            var self2 = this;
            if (!self2.ctx || typeof self2.ctx.resume === "undefined" || !Howler2.usingWebAudio) {
              return;
            }
            if (self2.state === "running" && self2.ctx.state !== "interrupted" && self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
              self2._suspendTimer = null;
            } else if (self2.state === "suspended" || self2.state === "running" && self2.ctx.state === "interrupted") {
              self2.ctx.resume().then(function() {
                self2.state = "running";
                for (var i = 0; i < self2._howls.length; i++) {
                  self2._howls[i]._emit("resume");
                }
              });
              if (self2._suspendTimer) {
                clearTimeout(self2._suspendTimer);
                self2._suspendTimer = null;
              }
            } else if (self2.state === "suspending") {
              self2._resumeAfterSuspend = true;
            }
            return self2;
          }
        };
        var Howler2 = new HowlerGlobal2();
        var Howl2 = function(o) {
          var self2 = this;
          if (!o.src || o.src.length === 0) {
            console.error("An array of source files must be passed with any new Howl.");
            return;
          }
          self2.init(o);
        };
        Howl2.prototype = {
          /**
           * Initialize a new Howl group object.
           * @param  {Object} o Passed in properties for this group.
           * @return {Howl}
           */
          init: function(o) {
            var self2 = this;
            if (!Howler2.ctx) {
              setupAudioContext();
            }
            self2._autoplay = o.autoplay || false;
            self2._format = typeof o.format !== "string" ? o.format : [o.format];
            self2._html5 = o.html5 || false;
            self2._muted = o.mute || false;
            self2._loop = o.loop || false;
            self2._pool = o.pool || 5;
            self2._preload = typeof o.preload === "boolean" || o.preload === "metadata" ? o.preload : true;
            self2._rate = o.rate || 1;
            self2._sprite = o.sprite || {};
            self2._src = typeof o.src !== "string" ? o.src : [o.src];
            self2._volume = o.volume !== void 0 ? o.volume : 1;
            self2._xhr = {
              method: o.xhr && o.xhr.method ? o.xhr.method : "GET",
              headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
              withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false
            };
            self2._duration = 0;
            self2._state = "unloaded";
            self2._sounds = [];
            self2._endTimers = {};
            self2._queue = [];
            self2._playLock = false;
            self2._onend = o.onend ? [{ fn: o.onend }] : [];
            self2._onfade = o.onfade ? [{ fn: o.onfade }] : [];
            self2._onload = o.onload ? [{ fn: o.onload }] : [];
            self2._onloaderror = o.onloaderror ? [{ fn: o.onloaderror }] : [];
            self2._onplayerror = o.onplayerror ? [{ fn: o.onplayerror }] : [];
            self2._onpause = o.onpause ? [{ fn: o.onpause }] : [];
            self2._onplay = o.onplay ? [{ fn: o.onplay }] : [];
            self2._onstop = o.onstop ? [{ fn: o.onstop }] : [];
            self2._onmute = o.onmute ? [{ fn: o.onmute }] : [];
            self2._onvolume = o.onvolume ? [{ fn: o.onvolume }] : [];
            self2._onrate = o.onrate ? [{ fn: o.onrate }] : [];
            self2._onseek = o.onseek ? [{ fn: o.onseek }] : [];
            self2._onunlock = o.onunlock ? [{ fn: o.onunlock }] : [];
            self2._onresume = [];
            self2._webAudio = Howler2.usingWebAudio && !self2._html5;
            if (typeof Howler2.ctx !== "undefined" && Howler2.ctx && Howler2.autoUnlock) {
              Howler2._unlockAudio();
            }
            Howler2._howls.push(self2);
            if (self2._autoplay) {
              self2._queue.push({
                event: "play",
                action: function() {
                  self2.play();
                }
              });
            }
            if (self2._preload && self2._preload !== "none") {
              self2.load();
            }
            return self2;
          },
          /**
           * Load the audio file.
           * @return {Howler}
           */
          load: function() {
            var self2 = this;
            var url = null;
            if (Howler2.noAudio) {
              self2._emit("loaderror", null, "No audio support.");
              return;
            }
            if (typeof self2._src === "string") {
              self2._src = [self2._src];
            }
            for (var i = 0; i < self2._src.length; i++) {
              var ext, str5;
              if (self2._format && self2._format[i]) {
                ext = self2._format[i];
              } else {
                str5 = self2._src[i];
                if (typeof str5 !== "string") {
                  self2._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                  continue;
                }
                ext = /^data:audio\/([^;,]+);/i.exec(str5);
                if (!ext) {
                  ext = /\.([^.]+)$/.exec(str5.split("?", 1)[0]);
                }
                if (ext) {
                  ext = ext[1].toLowerCase();
                }
              }
              if (!ext) {
                console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
              }
              if (ext && Howler2.codecs(ext)) {
                url = self2._src[i];
                break;
              }
            }
            if (!url) {
              self2._emit("loaderror", null, "No codec support for selected audio sources.");
              return;
            }
            self2._src = url;
            self2._state = "loading";
            if (window.location.protocol === "https:" && url.slice(0, 5) === "http:") {
              self2._html5 = true;
              self2._webAudio = false;
            }
            new Sound2(self2);
            if (self2._webAudio) {
              loadBuffer(self2);
            }
            return self2;
          },
          /**
           * Play a sound or resume previous playback.
           * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
           * @param  {Boolean} internal Internal Use: true prevents event firing.
           * @return {Number}          Sound ID.
           */
          play: function(sprite, internal) {
            var self2 = this;
            var id = null;
            if (typeof sprite === "number") {
              id = sprite;
              sprite = null;
            } else if (typeof sprite === "string" && self2._state === "loaded" && !self2._sprite[sprite]) {
              return null;
            } else if (typeof sprite === "undefined") {
              sprite = "__default";
              if (!self2._playLock) {
                var num = 0;
                for (var i = 0; i < self2._sounds.length; i++) {
                  if (self2._sounds[i]._paused && !self2._sounds[i]._ended) {
                    num++;
                    id = self2._sounds[i]._id;
                  }
                }
                if (num === 1) {
                  sprite = null;
                } else {
                  id = null;
                }
              }
            }
            var sound = id ? self2._soundById(id) : self2._inactiveSound();
            if (!sound) {
              return null;
            }
            if (id && !sprite) {
              sprite = sound._sprite || "__default";
            }
            if (self2._state !== "loaded") {
              sound._sprite = sprite;
              sound._ended = false;
              var soundId = sound._id;
              self2._queue.push({
                event: "play",
                action: function() {
                  self2.play(soundId);
                }
              });
              return soundId;
            }
            if (id && !sound._paused) {
              if (!internal) {
                self2._loadQueue("play");
              }
              return sound._id;
            }
            if (self2._webAudio) {
              Howler2._autoResume();
            }
            var seek = Math.max(0, sound._seek > 0 ? sound._seek : self2._sprite[sprite][0] / 1e3);
            var duration = Math.max(0, (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3 - seek);
            var timeout = duration * 1e3 / Math.abs(sound._rate);
            var start = self2._sprite[sprite][0] / 1e3;
            var stop = (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3;
            sound._sprite = sprite;
            sound._ended = false;
            var setParams = function() {
              sound._paused = false;
              sound._seek = seek;
              sound._start = start;
              sound._stop = stop;
              sound._loop = !!(sound._loop || self2._sprite[sprite][2]);
            };
            if (seek >= stop) {
              self2._ended(sound);
              return;
            }
            var node = sound._node;
            if (self2._webAudio) {
              var playWebAudio = function() {
                self2._playLock = false;
                setParams();
                self2._refreshBuffer(sound);
                var vol = sound._muted || self2._muted ? 0 : sound._volume;
                node.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
                sound._playStart = Howler2.ctx.currentTime;
                if (typeof node.bufferSource.start === "undefined") {
                  sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
                } else {
                  sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
                }
                if (timeout !== Infinity) {
                  self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                }
                if (!internal) {
                  setTimeout(function() {
                    self2._emit("play", sound._id);
                    self2._loadQueue();
                  }, 0);
                }
              };
              if (Howler2.state === "running" && Howler2.ctx.state !== "interrupted") {
                playWebAudio();
              } else {
                self2._playLock = true;
                self2.once("resume", playWebAudio);
                self2._clearTimer(sound._id);
              }
            } else {
              var playHtml5 = function() {
                node.currentTime = seek;
                node.muted = sound._muted || self2._muted || Howler2._muted || node.muted;
                node.volume = sound._volume * Howler2.volume();
                node.playbackRate = sound._rate;
                try {
                  var play = node.play();
                  if (play && typeof Promise !== "undefined" && (play instanceof Promise || typeof play.then === "function")) {
                    self2._playLock = true;
                    setParams();
                    play.then(function() {
                      self2._playLock = false;
                      node._unlocked = true;
                      if (!internal) {
                        self2._emit("play", sound._id);
                      } else {
                        self2._loadQueue();
                      }
                    }).catch(function() {
                      self2._playLock = false;
                      self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                      sound._ended = true;
                      sound._paused = true;
                    });
                  } else if (!internal) {
                    self2._playLock = false;
                    setParams();
                    self2._emit("play", sound._id);
                  }
                  node.playbackRate = sound._rate;
                  if (node.paused) {
                    self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                    return;
                  }
                  if (sprite !== "__default" || sound._loop) {
                    self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                  } else {
                    self2._endTimers[sound._id] = function() {
                      self2._ended(sound);
                      node.removeEventListener("ended", self2._endTimers[sound._id], false);
                    };
                    node.addEventListener("ended", self2._endTimers[sound._id], false);
                  }
                } catch (err) {
                  self2._emit("playerror", sound._id, err);
                }
              };
              if (node.src === "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA") {
                node.src = self2._src;
                node.load();
              }
              var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler2._navigator.isCocoonJS;
              if (node.readyState >= 3 || loadedNoReadyState) {
                playHtml5();
              } else {
                self2._playLock = true;
                self2._state = "loading";
                var listener = function() {
                  self2._state = "loaded";
                  playHtml5();
                  node.removeEventListener(Howler2._canPlayEvent, listener, false);
                };
                node.addEventListener(Howler2._canPlayEvent, listener, false);
                self2._clearTimer(sound._id);
              }
            }
            return sound._id;
          },
          /**
           * Pause playback and save current position.
           * @param  {Number} id The sound ID (empty to pause all in group).
           * @return {Howl}
           */
          pause: function(id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "pause",
                action: function() {
                  self2.pause(id);
                }
              });
              return self2;
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              self2._clearTimer(ids[i]);
              var sound = self2._soundById(ids[i]);
              if (sound && !sound._paused) {
                sound._seek = self2.seek(ids[i]);
                sound._rateSeek = 0;
                sound._paused = true;
                self2._stopFade(ids[i]);
                if (sound._node) {
                  if (self2._webAudio) {
                    if (!sound._node.bufferSource) {
                      continue;
                    }
                    if (typeof sound._node.bufferSource.stop === "undefined") {
                      sound._node.bufferSource.noteOff(0);
                    } else {
                      sound._node.bufferSource.stop(0);
                    }
                    self2._cleanBuffer(sound._node);
                  } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                    sound._node.pause();
                  }
                }
              }
              if (!arguments[1]) {
                self2._emit("pause", sound ? sound._id : null);
              }
            }
            return self2;
          },
          /**
           * Stop playback and reset to start.
           * @param  {Number} id The sound ID (empty to stop all in group).
           * @param  {Boolean} internal Internal Use: true prevents event firing.
           * @return {Howl}
           */
          stop: function(id, internal) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "stop",
                action: function() {
                  self2.stop(id);
                }
              });
              return self2;
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              self2._clearTimer(ids[i]);
              var sound = self2._soundById(ids[i]);
              if (sound) {
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                sound._paused = true;
                sound._ended = true;
                self2._stopFade(ids[i]);
                if (sound._node) {
                  if (self2._webAudio) {
                    if (sound._node.bufferSource) {
                      if (typeof sound._node.bufferSource.stop === "undefined") {
                        sound._node.bufferSource.noteOff(0);
                      } else {
                        sound._node.bufferSource.stop(0);
                      }
                      self2._cleanBuffer(sound._node);
                    }
                  } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                    sound._node.currentTime = sound._start || 0;
                    sound._node.pause();
                    if (sound._node.duration === Infinity) {
                      self2._clearSound(sound._node);
                    }
                  }
                }
                if (!internal) {
                  self2._emit("stop", sound._id);
                }
              }
            }
            return self2;
          },
          /**
           * Mute/unmute a single sound or all sounds in this Howl group.
           * @param  {Boolean} muted Set to true to mute and false to unmute.
           * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
           * @return {Howl}
           */
          mute: function(muted, id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "mute",
                action: function() {
                  self2.mute(muted, id);
                }
              });
              return self2;
            }
            if (typeof id === "undefined") {
              if (typeof muted === "boolean") {
                self2._muted = muted;
              } else {
                return self2._muted;
              }
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              var sound = self2._soundById(ids[i]);
              if (sound) {
                sound._muted = muted;
                if (sound._interval) {
                  self2._stopFade(sound._id);
                }
                if (self2._webAudio && sound._node) {
                  sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler2.ctx.currentTime);
                } else if (sound._node) {
                  sound._node.muted = Howler2._muted ? true : muted;
                }
                self2._emit("mute", sound._id);
              }
            }
            return self2;
          },
          /**
           * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
           *   volume() -> Returns the group's volume value.
           *   volume(id) -> Returns the sound id's current volume.
           *   volume(vol) -> Sets the volume of all sounds in this Howl group.
           *   volume(vol, id) -> Sets the volume of passed sound id.
           * @return {Howl/Number} Returns self or current volume.
           */
          volume: function() {
            var self2 = this;
            var args = arguments;
            var vol, id;
            if (args.length === 0) {
              return self2._volume;
            } else if (args.length === 1 || args.length === 2 && typeof args[1] === "undefined") {
              var ids = self2._getSoundIds();
              var index = ids.indexOf(args[0]);
              if (index >= 0) {
                id = parseInt(args[0], 10);
              } else {
                vol = parseFloat(args[0]);
              }
            } else if (args.length >= 2) {
              vol = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
              if (self2._state !== "loaded" || self2._playLock) {
                self2._queue.push({
                  event: "volume",
                  action: function() {
                    self2.volume.apply(self2, args);
                  }
                });
                return self2;
              }
              if (typeof id === "undefined") {
                self2._volume = vol;
              }
              id = self2._getSoundIds(id);
              for (var i = 0; i < id.length; i++) {
                sound = self2._soundById(id[i]);
                if (sound) {
                  sound._volume = vol;
                  if (!args[2]) {
                    self2._stopFade(id[i]);
                  }
                  if (self2._webAudio && sound._node && !sound._muted) {
                    sound._node.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
                  } else if (sound._node && !sound._muted) {
                    sound._node.volume = vol * Howler2.volume();
                  }
                  self2._emit("volume", sound._id);
                }
              }
            } else {
              sound = id ? self2._soundById(id) : self2._sounds[0];
              return sound ? sound._volume : 0;
            }
            return self2;
          },
          /**
           * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).
           * @param  {Number} from The value to fade from (0.0 to 1.0).
           * @param  {Number} to   The volume to fade to (0.0 to 1.0).
           * @param  {Number} len  Time in milliseconds to fade.
           * @param  {Number} id   The sound id (omit to fade all sounds).
           * @return {Howl}
           */
          fade: function(from, to, len4, id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "fade",
                action: function() {
                  self2.fade(from, to, len4, id);
                }
              });
              return self2;
            }
            from = Math.min(Math.max(0, parseFloat(from)), 1);
            to = Math.min(Math.max(0, parseFloat(to)), 1);
            len4 = parseFloat(len4);
            self2.volume(from, id);
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              var sound = self2._soundById(ids[i]);
              if (sound) {
                if (!id) {
                  self2._stopFade(ids[i]);
                }
                if (self2._webAudio && !sound._muted) {
                  var currentTime = Howler2.ctx.currentTime;
                  var end = currentTime + len4 / 1e3;
                  sound._volume = from;
                  sound._node.gain.setValueAtTime(from, currentTime);
                  sound._node.gain.linearRampToValueAtTime(to, end);
                }
                self2._startFadeInterval(sound, from, to, len4, ids[i], typeof id === "undefined");
              }
            }
            return self2;
          },
          /**
           * Starts the internal interval to fade a sound.
           * @param  {Object} sound Reference to sound to fade.
           * @param  {Number} from The value to fade from (0.0 to 1.0).
           * @param  {Number} to   The volume to fade to (0.0 to 1.0).
           * @param  {Number} len  Time in milliseconds to fade.
           * @param  {Number} id   The sound id to fade.
           * @param  {Boolean} isGroup   If true, set the volume on the group.
           */
          _startFadeInterval: function(sound, from, to, len4, id, isGroup) {
            var self2 = this;
            var vol = from;
            var diff = to - from;
            var steps = Math.abs(diff / 0.01);
            var stepLen = Math.max(4, steps > 0 ? len4 / steps : len4);
            var lastTick = Date.now();
            sound._fadeTo = to;
            sound._interval = setInterval(function() {
              var tick = (Date.now() - lastTick) / len4;
              lastTick = Date.now();
              vol += diff * tick;
              vol = Math.round(vol * 100) / 100;
              if (diff < 0) {
                vol = Math.max(to, vol);
              } else {
                vol = Math.min(to, vol);
              }
              if (self2._webAudio) {
                sound._volume = vol;
              } else {
                self2.volume(vol, sound._id, true);
              }
              if (isGroup) {
                self2._volume = vol;
              }
              if (to < from && vol <= to || to > from && vol >= to) {
                clearInterval(sound._interval);
                sound._interval = null;
                sound._fadeTo = null;
                self2.volume(to, sound._id);
                self2._emit("fade", sound._id);
              }
            }, stepLen);
          },
          /**
           * Internal method that stops the currently playing fade when
           * a new fade starts, volume is changed or the sound is stopped.
           * @param  {Number} id The sound id.
           * @return {Howl}
           */
          _stopFade: function(id) {
            var self2 = this;
            var sound = self2._soundById(id);
            if (sound && sound._interval) {
              if (self2._webAudio) {
                sound._node.gain.cancelScheduledValues(Howler2.ctx.currentTime);
              }
              clearInterval(sound._interval);
              sound._interval = null;
              self2.volume(sound._fadeTo, id);
              sound._fadeTo = null;
              self2._emit("fade", id);
            }
            return self2;
          },
          /**
           * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
           *   loop() -> Returns the group's loop value.
           *   loop(id) -> Returns the sound id's loop value.
           *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
           *   loop(loop, id) -> Sets the loop value of passed sound id.
           * @return {Howl/Boolean} Returns self or current loop value.
           */
          loop: function() {
            var self2 = this;
            var args = arguments;
            var loop, id, sound;
            if (args.length === 0) {
              return self2._loop;
            } else if (args.length === 1) {
              if (typeof args[0] === "boolean") {
                loop = args[0];
                self2._loop = loop;
              } else {
                sound = self2._soundById(parseInt(args[0], 10));
                return sound ? sound._loop : false;
              }
            } else if (args.length === 2) {
              loop = args[0];
              id = parseInt(args[1], 10);
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              sound = self2._soundById(ids[i]);
              if (sound) {
                sound._loop = loop;
                if (self2._webAudio && sound._node && sound._node.bufferSource) {
                  sound._node.bufferSource.loop = loop;
                  if (loop) {
                    sound._node.bufferSource.loopStart = sound._start || 0;
                    sound._node.bufferSource.loopEnd = sound._stop;
                    if (self2.playing(ids[i])) {
                      self2.pause(ids[i], true);
                      self2.play(ids[i], true);
                    }
                  }
                }
              }
            }
            return self2;
          },
          /**
           * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
           *   rate() -> Returns the first sound node's current playback rate.
           *   rate(id) -> Returns the sound id's current playback rate.
           *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
           *   rate(rate, id) -> Sets the playback rate of passed sound id.
           * @return {Howl/Number} Returns self or the current playback rate.
           */
          rate: function() {
            var self2 = this;
            var args = arguments;
            var rate, id;
            if (args.length === 0) {
              id = self2._sounds[0]._id;
            } else if (args.length === 1) {
              var ids = self2._getSoundIds();
              var index = ids.indexOf(args[0]);
              if (index >= 0) {
                id = parseInt(args[0], 10);
              } else {
                rate = parseFloat(args[0]);
              }
            } else if (args.length === 2) {
              rate = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof rate === "number") {
              if (self2._state !== "loaded" || self2._playLock) {
                self2._queue.push({
                  event: "rate",
                  action: function() {
                    self2.rate.apply(self2, args);
                  }
                });
                return self2;
              }
              if (typeof id === "undefined") {
                self2._rate = rate;
              }
              id = self2._getSoundIds(id);
              for (var i = 0; i < id.length; i++) {
                sound = self2._soundById(id[i]);
                if (sound) {
                  if (self2.playing(id[i])) {
                    sound._rateSeek = self2.seek(id[i]);
                    sound._playStart = self2._webAudio ? Howler2.ctx.currentTime : sound._playStart;
                  }
                  sound._rate = rate;
                  if (self2._webAudio && sound._node && sound._node.bufferSource) {
                    sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler2.ctx.currentTime);
                  } else if (sound._node) {
                    sound._node.playbackRate = rate;
                  }
                  var seek = self2.seek(id[i]);
                  var duration = (self2._sprite[sound._sprite][0] + self2._sprite[sound._sprite][1]) / 1e3 - seek;
                  var timeout = duration * 1e3 / Math.abs(sound._rate);
                  if (self2._endTimers[id[i]] || !sound._paused) {
                    self2._clearTimer(id[i]);
                    self2._endTimers[id[i]] = setTimeout(self2._ended.bind(self2, sound), timeout);
                  }
                  self2._emit("rate", sound._id);
                }
              }
            } else {
              sound = self2._soundById(id);
              return sound ? sound._rate : self2._rate;
            }
            return self2;
          },
          /**
           * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
           *   seek() -> Returns the first sound node's current seek position.
           *   seek(id) -> Returns the sound id's current seek position.
           *   seek(seek) -> Sets the seek position of the first sound node.
           *   seek(seek, id) -> Sets the seek position of passed sound id.
           * @return {Howl/Number} Returns self or the current seek position.
           */
          seek: function() {
            var self2 = this;
            var args = arguments;
            var seek, id;
            if (args.length === 0) {
              if (self2._sounds.length) {
                id = self2._sounds[0]._id;
              }
            } else if (args.length === 1) {
              var ids = self2._getSoundIds();
              var index = ids.indexOf(args[0]);
              if (index >= 0) {
                id = parseInt(args[0], 10);
              } else if (self2._sounds.length) {
                id = self2._sounds[0]._id;
                seek = parseFloat(args[0]);
              }
            } else if (args.length === 2) {
              seek = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            if (typeof id === "undefined") {
              return 0;
            }
            if (typeof seek === "number" && (self2._state !== "loaded" || self2._playLock)) {
              self2._queue.push({
                event: "seek",
                action: function() {
                  self2.seek.apply(self2, args);
                }
              });
              return self2;
            }
            var sound = self2._soundById(id);
            if (sound) {
              if (typeof seek === "number" && seek >= 0) {
                var playing = self2.playing(id);
                if (playing) {
                  self2.pause(id, true);
                }
                sound._seek = seek;
                sound._ended = false;
                self2._clearTimer(id);
                if (!self2._webAudio && sound._node && !isNaN(sound._node.duration)) {
                  sound._node.currentTime = seek;
                }
                var seekAndEmit = function() {
                  if (playing) {
                    self2.play(id, true);
                  }
                  self2._emit("seek", id);
                };
                if (playing && !self2._webAudio) {
                  var emitSeek = function() {
                    if (!self2._playLock) {
                      seekAndEmit();
                    } else {
                      setTimeout(emitSeek, 0);
                    }
                  };
                  setTimeout(emitSeek, 0);
                } else {
                  seekAndEmit();
                }
              } else {
                if (self2._webAudio) {
                  var realTime = self2.playing(id) ? Howler2.ctx.currentTime - sound._playStart : 0;
                  var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
                  return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
                } else {
                  return sound._node.currentTime;
                }
              }
            }
            return self2;
          },
          /**
           * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
           * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
           * @return {Boolean} True if playing and false if not.
           */
          playing: function(id) {
            var self2 = this;
            if (typeof id === "number") {
              var sound = self2._soundById(id);
              return sound ? !sound._paused : false;
            }
            for (var i = 0; i < self2._sounds.length; i++) {
              if (!self2._sounds[i]._paused) {
                return true;
              }
            }
            return false;
          },
          /**
           * Get the duration of this sound. Passing a sound id will return the sprite duration.
           * @param  {Number} id The sound id to check. If none is passed, return full source duration.
           * @return {Number} Audio duration in seconds.
           */
          duration: function(id) {
            var self2 = this;
            var duration = self2._duration;
            var sound = self2._soundById(id);
            if (sound) {
              duration = self2._sprite[sound._sprite][1] / 1e3;
            }
            return duration;
          },
          /**
           * Returns the current loaded state of this Howl.
           * @return {String} 'unloaded', 'loading', 'loaded'
           */
          state: function() {
            return this._state;
          },
          /**
           * Unload and destroy the current Howl object.
           * This will immediately stop all sound instances attached to this group.
           */
          unload: function() {
            var self2 = this;
            var sounds = self2._sounds;
            for (var i = 0; i < sounds.length; i++) {
              if (!sounds[i]._paused) {
                self2.stop(sounds[i]._id);
              }
              if (!self2._webAudio) {
                self2._clearSound(sounds[i]._node);
                sounds[i]._node.removeEventListener("error", sounds[i]._errorFn, false);
                sounds[i]._node.removeEventListener(Howler2._canPlayEvent, sounds[i]._loadFn, false);
                sounds[i]._node.removeEventListener("ended", sounds[i]._endFn, false);
                Howler2._releaseHtml5Audio(sounds[i]._node);
              }
              delete sounds[i]._node;
              self2._clearTimer(sounds[i]._id);
            }
            var index = Howler2._howls.indexOf(self2);
            if (index >= 0) {
              Howler2._howls.splice(index, 1);
            }
            var remCache = true;
            for (i = 0; i < Howler2._howls.length; i++) {
              if (Howler2._howls[i]._src === self2._src || self2._src.indexOf(Howler2._howls[i]._src) >= 0) {
                remCache = false;
                break;
              }
            }
            if (cache && remCache) {
              delete cache[self2._src];
            }
            Howler2.noAudio = false;
            self2._state = "unloaded";
            self2._sounds = [];
            self2 = null;
            return null;
          },
          /**
           * Listen to a custom event.
           * @param  {String}   event Event name.
           * @param  {Function} fn    Listener to call.
           * @param  {Number}   id    (optional) Only listen to events for this sound.
           * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
           * @return {Howl}
           */
          on: function(event, fn, id, once) {
            var self2 = this;
            var events = self2["_on" + event];
            if (typeof fn === "function") {
              events.push(once ? { id, fn, once } : { id, fn });
            }
            return self2;
          },
          /**
           * Remove a custom event. Call without parameters to remove all events.
           * @param  {String}   event Event name.
           * @param  {Function} fn    Listener to remove. Leave empty to remove all.
           * @param  {Number}   id    (optional) Only remove events for this sound.
           * @return {Howl}
           */
          off: function(event, fn, id) {
            var self2 = this;
            var events = self2["_on" + event];
            var i = 0;
            if (typeof fn === "number") {
              id = fn;
              fn = null;
            }
            if (fn || id) {
              for (i = 0; i < events.length; i++) {
                var isId = id === events[i].id;
                if (fn === events[i].fn && isId || !fn && isId) {
                  events.splice(i, 1);
                  break;
                }
              }
            } else if (event) {
              self2["_on" + event] = [];
            } else {
              var keys = Object.keys(self2);
              for (i = 0; i < keys.length; i++) {
                if (keys[i].indexOf("_on") === 0 && Array.isArray(self2[keys[i]])) {
                  self2[keys[i]] = [];
                }
              }
            }
            return self2;
          },
          /**
           * Listen to a custom event and remove it once fired.
           * @param  {String}   event Event name.
           * @param  {Function} fn    Listener to call.
           * @param  {Number}   id    (optional) Only listen to events for this sound.
           * @return {Howl}
           */
          once: function(event, fn, id) {
            var self2 = this;
            self2.on(event, fn, id, 1);
            return self2;
          },
          /**
           * Emit all events of a specific type and pass the sound id.
           * @param  {String} event Event name.
           * @param  {Number} id    Sound ID.
           * @param  {Number} msg   Message to go with event.
           * @return {Howl}
           */
          _emit: function(event, id, msg) {
            var self2 = this;
            var events = self2["_on" + event];
            for (var i = events.length - 1; i >= 0; i--) {
              if (!events[i].id || events[i].id === id || event === "load") {
                setTimeout(function(fn) {
                  fn.call(this, id, msg);
                }.bind(self2, events[i].fn), 0);
                if (events[i].once) {
                  self2.off(event, events[i].fn, events[i].id);
                }
              }
            }
            self2._loadQueue(event);
            return self2;
          },
          /**
           * Queue of actions initiated before the sound has loaded.
           * These will be called in sequence, with the next only firing
           * after the previous has finished executing (even if async like play).
           * @return {Howl}
           */
          _loadQueue: function(event) {
            var self2 = this;
            if (self2._queue.length > 0) {
              var task = self2._queue[0];
              if (task.event === event) {
                self2._queue.shift();
                self2._loadQueue();
              }
              if (!event) {
                task.action();
              }
            }
            return self2;
          },
          /**
           * Fired when playback ends at the end of the duration.
           * @param  {Sound} sound The sound object to work with.
           * @return {Howl}
           */
          _ended: function(sound) {
            var self2 = this;
            var sprite = sound._sprite;
            if (!self2._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
              setTimeout(self2._ended.bind(self2, sound), 100);
              return self2;
            }
            var loop = !!(sound._loop || self2._sprite[sprite][2]);
            self2._emit("end", sound._id);
            if (!self2._webAudio && loop) {
              self2.stop(sound._id, true).play(sound._id);
            }
            if (self2._webAudio && loop) {
              self2._emit("play", sound._id);
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              sound._playStart = Howler2.ctx.currentTime;
              var timeout = (sound._stop - sound._start) * 1e3 / Math.abs(sound._rate);
              self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
            }
            if (self2._webAudio && !loop) {
              sound._paused = true;
              sound._ended = true;
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              self2._clearTimer(sound._id);
              self2._cleanBuffer(sound._node);
              Howler2._autoSuspend();
            }
            if (!self2._webAudio && !loop) {
              self2.stop(sound._id, true);
            }
            return self2;
          },
          /**
           * Clear the end timer for a sound playback.
           * @param  {Number} id The sound ID.
           * @return {Howl}
           */
          _clearTimer: function(id) {
            var self2 = this;
            if (self2._endTimers[id]) {
              if (typeof self2._endTimers[id] !== "function") {
                clearTimeout(self2._endTimers[id]);
              } else {
                var sound = self2._soundById(id);
                if (sound && sound._node) {
                  sound._node.removeEventListener("ended", self2._endTimers[id], false);
                }
              }
              delete self2._endTimers[id];
            }
            return self2;
          },
          /**
           * Return the sound identified by this ID, or return null.
           * @param  {Number} id Sound ID
           * @return {Object}    Sound object or null.
           */
          _soundById: function(id) {
            var self2 = this;
            for (var i = 0; i < self2._sounds.length; i++) {
              if (id === self2._sounds[i]._id) {
                return self2._sounds[i];
              }
            }
            return null;
          },
          /**
           * Return an inactive sound from the pool or create a new one.
           * @return {Sound} Sound playback object.
           */
          _inactiveSound: function() {
            var self2 = this;
            self2._drain();
            for (var i = 0; i < self2._sounds.length; i++) {
              if (self2._sounds[i]._ended) {
                return self2._sounds[i].reset();
              }
            }
            return new Sound2(self2);
          },
          /**
           * Drain excess inactive sounds from the pool.
           */
          _drain: function() {
            var self2 = this;
            var limit = self2._pool;
            var cnt = 0;
            var i = 0;
            if (self2._sounds.length < limit) {
              return;
            }
            for (i = 0; i < self2._sounds.length; i++) {
              if (self2._sounds[i]._ended) {
                cnt++;
              }
            }
            for (i = self2._sounds.length - 1; i >= 0; i--) {
              if (cnt <= limit) {
                return;
              }
              if (self2._sounds[i]._ended) {
                if (self2._webAudio && self2._sounds[i]._node) {
                  self2._sounds[i]._node.disconnect(0);
                }
                self2._sounds.splice(i, 1);
                cnt--;
              }
            }
          },
          /**
           * Get all ID's from the sounds pool.
           * @param  {Number} id Only return one ID if one is passed.
           * @return {Array}    Array of IDs.
           */
          _getSoundIds: function(id) {
            var self2 = this;
            if (typeof id === "undefined") {
              var ids = [];
              for (var i = 0; i < self2._sounds.length; i++) {
                ids.push(self2._sounds[i]._id);
              }
              return ids;
            } else {
              return [id];
            }
          },
          /**
           * Load the sound back into the buffer source.
           * @param  {Sound} sound The sound object to work with.
           * @return {Howl}
           */
          _refreshBuffer: function(sound) {
            var self2 = this;
            sound._node.bufferSource = Howler2.ctx.createBufferSource();
            sound._node.bufferSource.buffer = cache[self2._src];
            if (sound._panner) {
              sound._node.bufferSource.connect(sound._panner);
            } else {
              sound._node.bufferSource.connect(sound._node);
            }
            sound._node.bufferSource.loop = sound._loop;
            if (sound._loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop || 0;
            }
            sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler2.ctx.currentTime);
            return self2;
          },
          /**
           * Prevent memory leaks by cleaning up the buffer source after playback.
           * @param  {Object} node Sound's audio node containing the buffer source.
           * @return {Howl}
           */
          _cleanBuffer: function(node) {
            var self2 = this;
            var isIOS = Howler2._navigator && Howler2._navigator.vendor.indexOf("Apple") >= 0;
            if (Howler2._scratchBuffer && node.bufferSource) {
              node.bufferSource.onended = null;
              node.bufferSource.disconnect(0);
              if (isIOS) {
                try {
                  node.bufferSource.buffer = Howler2._scratchBuffer;
                } catch (e) {
                }
              }
            }
            node.bufferSource = null;
            return self2;
          },
          /**
           * Set the source to a 0-second silence to stop any downloading (except in IE).
           * @param  {Object} node Audio node to clear.
           */
          _clearSound: function(node) {
            var checkIE = /MSIE |Trident\//.test(Howler2._navigator && Howler2._navigator.userAgent);
            if (!checkIE) {
              node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
          }
        };
        var Sound2 = function(howl) {
          this._parent = howl;
          this.init();
        };
        Sound2.prototype = {
          /**
           * Initialize a new Sound object.
           * @return {Sound}
           */
          init: function() {
            var self2 = this;
            var parent = self2._parent;
            self2._muted = parent._muted;
            self2._loop = parent._loop;
            self2._volume = parent._volume;
            self2._rate = parent._rate;
            self2._seek = 0;
            self2._paused = true;
            self2._ended = true;
            self2._sprite = "__default";
            self2._id = ++Howler2._counter;
            parent._sounds.push(self2);
            self2.create();
            return self2;
          },
          /**
           * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
           * @return {Sound}
           */
          create: function() {
            var self2 = this;
            var parent = self2._parent;
            var volume = Howler2._muted || self2._muted || self2._parent._muted ? 0 : self2._volume;
            if (parent._webAudio) {
              self2._node = typeof Howler2.ctx.createGain === "undefined" ? Howler2.ctx.createGainNode() : Howler2.ctx.createGain();
              self2._node.gain.setValueAtTime(volume, Howler2.ctx.currentTime);
              self2._node.paused = true;
              self2._node.connect(Howler2.masterGain);
            } else if (!Howler2.noAudio) {
              self2._node = Howler2._obtainHtml5Audio();
              self2._errorFn = self2._errorListener.bind(self2);
              self2._node.addEventListener("error", self2._errorFn, false);
              self2._loadFn = self2._loadListener.bind(self2);
              self2._node.addEventListener(Howler2._canPlayEvent, self2._loadFn, false);
              self2._endFn = self2._endListener.bind(self2);
              self2._node.addEventListener("ended", self2._endFn, false);
              self2._node.src = parent._src;
              self2._node.preload = parent._preload === true ? "auto" : parent._preload;
              self2._node.volume = volume * Howler2.volume();
              self2._node.load();
            }
            return self2;
          },
          /**
           * Reset the parameters of this sound to the original state (for recycle).
           * @return {Sound}
           */
          reset: function() {
            var self2 = this;
            var parent = self2._parent;
            self2._muted = parent._muted;
            self2._loop = parent._loop;
            self2._volume = parent._volume;
            self2._rate = parent._rate;
            self2._seek = 0;
            self2._rateSeek = 0;
            self2._paused = true;
            self2._ended = true;
            self2._sprite = "__default";
            self2._id = ++Howler2._counter;
            return self2;
          },
          /**
           * HTML5 Audio error listener callback.
           */
          _errorListener: function() {
            var self2 = this;
            self2._parent._emit("loaderror", self2._id, self2._node.error ? self2._node.error.code : 0);
            self2._node.removeEventListener("error", self2._errorFn, false);
          },
          /**
           * HTML5 Audio canplaythrough listener callback.
           */
          _loadListener: function() {
            var self2 = this;
            var parent = self2._parent;
            parent._duration = Math.ceil(self2._node.duration * 10) / 10;
            if (Object.keys(parent._sprite).length === 0) {
              parent._sprite = { __default: [0, parent._duration * 1e3] };
            }
            if (parent._state !== "loaded") {
              parent._state = "loaded";
              parent._emit("load");
              parent._loadQueue();
            }
            self2._node.removeEventListener(Howler2._canPlayEvent, self2._loadFn, false);
          },
          /**
           * HTML5 Audio ended listener callback.
           */
          _endListener: function() {
            var self2 = this;
            var parent = self2._parent;
            if (parent._duration === Infinity) {
              parent._duration = Math.ceil(self2._node.duration * 10) / 10;
              if (parent._sprite.__default[1] === Infinity) {
                parent._sprite.__default[1] = parent._duration * 1e3;
              }
              parent._ended(self2);
            }
            self2._node.removeEventListener("ended", self2._endFn, false);
          }
        };
        var cache = {};
        var loadBuffer = function(self2) {
          var url = self2._src;
          if (cache[url]) {
            self2._duration = cache[url].duration;
            loadSound(self2);
            return;
          }
          if (/^data:[^;]+;base64,/.test(url)) {
            var data = atob(url.split(",")[1]);
            var dataView = new Uint8Array(data.length);
            for (var i = 0; i < data.length; ++i) {
              dataView[i] = data.charCodeAt(i);
            }
            decodeAudioData(dataView.buffer, self2);
          } else {
            var xhr = new XMLHttpRequest();
            xhr.open(self2._xhr.method, url, true);
            xhr.withCredentials = self2._xhr.withCredentials;
            xhr.responseType = "arraybuffer";
            if (self2._xhr.headers) {
              Object.keys(self2._xhr.headers).forEach(function(key) {
                xhr.setRequestHeader(key, self2._xhr.headers[key]);
              });
            }
            xhr.onload = function() {
              var code = (xhr.status + "")[0];
              if (code !== "0" && code !== "2" && code !== "3") {
                self2._emit("loaderror", null, "Failed loading audio file with status: " + xhr.status + ".");
                return;
              }
              decodeAudioData(xhr.response, self2);
            };
            xhr.onerror = function() {
              if (self2._webAudio) {
                self2._html5 = true;
                self2._webAudio = false;
                self2._sounds = [];
                delete cache[url];
                self2.load();
              }
            };
            safeXhrSend(xhr);
          }
        };
        var safeXhrSend = function(xhr) {
          try {
            xhr.send();
          } catch (e) {
            xhr.onerror();
          }
        };
        var decodeAudioData = function(arraybuffer, self2) {
          var error = function() {
            self2._emit("loaderror", null, "Decoding audio data failed.");
          };
          var success = function(buffer) {
            if (buffer && self2._sounds.length > 0) {
              cache[self2._src] = buffer;
              loadSound(self2, buffer);
            } else {
              error();
            }
          };
          if (typeof Promise !== "undefined" && Howler2.ctx.decodeAudioData.length === 1) {
            Howler2.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
          } else {
            Howler2.ctx.decodeAudioData(arraybuffer, success, error);
          }
        };
        var loadSound = function(self2, buffer) {
          if (buffer && !self2._duration) {
            self2._duration = buffer.duration;
          }
          if (Object.keys(self2._sprite).length === 0) {
            self2._sprite = { __default: [0, self2._duration * 1e3] };
          }
          if (self2._state !== "loaded") {
            self2._state = "loaded";
            self2._emit("load");
            self2._loadQueue();
          }
        };
        var setupAudioContext = function() {
          if (!Howler2.usingWebAudio) {
            return;
          }
          try {
            if (typeof AudioContext !== "undefined") {
              Howler2.ctx = new AudioContext();
            } else if (typeof webkitAudioContext !== "undefined") {
              Howler2.ctx = new webkitAudioContext();
            } else {
              Howler2.usingWebAudio = false;
            }
          } catch (e) {
            Howler2.usingWebAudio = false;
          }
          if (!Howler2.ctx) {
            Howler2.usingWebAudio = false;
          }
          var iOS = /iP(hone|od|ad)/.test(Howler2._navigator && Howler2._navigator.platform);
          var appVersion = Howler2._navigator && Howler2._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
          var version = appVersion ? parseInt(appVersion[1], 10) : null;
          if (iOS && version && version < 9) {
            var safari = /safari/.test(Howler2._navigator && Howler2._navigator.userAgent.toLowerCase());
            if (Howler2._navigator && !safari) {
              Howler2.usingWebAudio = false;
            }
          }
          if (Howler2.usingWebAudio) {
            Howler2.masterGain = typeof Howler2.ctx.createGain === "undefined" ? Howler2.ctx.createGainNode() : Howler2.ctx.createGain();
            Howler2.masterGain.gain.setValueAtTime(Howler2._muted ? 0 : Howler2._volume, Howler2.ctx.currentTime);
            Howler2.masterGain.connect(Howler2.ctx.destination);
          }
          Howler2._setup();
        };
        if (typeof define === "function" && define.amd) {
          define([], function() {
            return {
              Howler: Howler2,
              Howl: Howl2
            };
          });
        }
        if (typeof exports !== "undefined") {
          exports.Howler = Howler2;
          exports.Howl = Howl2;
        }
        if (typeof global !== "undefined") {
          global.HowlerGlobal = HowlerGlobal2;
          global.Howler = Howler2;
          global.Howl = Howl2;
          global.Sound = Sound2;
        } else if (typeof window !== "undefined") {
          window.HowlerGlobal = HowlerGlobal2;
          window.Howler = Howler2;
          window.Howl = Howl2;
          window.Sound = Sound2;
        }
      })();
      (function() {
        "use strict";
        HowlerGlobal.prototype._pos = [0, 0, 0];
        HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
        HowlerGlobal.prototype.stereo = function(pan) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          for (var i = self2._howls.length - 1; i >= 0; i--) {
            self2._howls[i].stereo(pan);
          }
          return self2;
        };
        HowlerGlobal.prototype.pos = function(x, y, z) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          y = typeof y !== "number" ? self2._pos[1] : y;
          z = typeof z !== "number" ? self2._pos[2] : z;
          if (typeof x === "number") {
            self2._pos = [x, y, z];
            if (typeof self2.ctx.listener.positionX !== "undefined") {
              self2.ctx.listener.positionX.setTargetAtTime(self2._pos[0], Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.positionY.setTargetAtTime(self2._pos[1], Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.positionZ.setTargetAtTime(self2._pos[2], Howler.ctx.currentTime, 0.1);
            } else {
              self2.ctx.listener.setPosition(self2._pos[0], self2._pos[1], self2._pos[2]);
            }
          } else {
            return self2._pos;
          }
          return self2;
        };
        HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          var or = self2._orientation;
          y = typeof y !== "number" ? or[1] : y;
          z = typeof z !== "number" ? or[2] : z;
          xUp = typeof xUp !== "number" ? or[3] : xUp;
          yUp = typeof yUp !== "number" ? or[4] : yUp;
          zUp = typeof zUp !== "number" ? or[5] : zUp;
          if (typeof x === "number") {
            self2._orientation = [x, y, z, xUp, yUp, zUp];
            if (typeof self2.ctx.listener.forwardX !== "undefined") {
              self2.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
            } else {
              self2.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
            }
          } else {
            return or;
          }
          return self2;
        };
        Howl.prototype.init = function(_super) {
          return function(o) {
            var self2 = this;
            self2._orientation = o.orientation || [1, 0, 0];
            self2._stereo = o.stereo || null;
            self2._pos = o.pos || null;
            self2._pannerAttr = {
              coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : 360,
              coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : 360,
              coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : 0,
              distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : "inverse",
              maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : 1e4,
              panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : "HRTF",
              refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : 1,
              rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : 1
            };
            self2._onstereo = o.onstereo ? [{ fn: o.onstereo }] : [];
            self2._onpos = o.onpos ? [{ fn: o.onpos }] : [];
            self2._onorientation = o.onorientation ? [{ fn: o.onorientation }] : [];
            return _super.call(this, o);
          };
        }(Howl.prototype.init);
        Howl.prototype.stereo = function(pan, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "stereo",
              action: function() {
                self2.stereo(pan, id);
              }
            });
            return self2;
          }
          var pannerType = typeof Howler.ctx.createStereoPanner === "undefined" ? "spatial" : "stereo";
          if (typeof id === "undefined") {
            if (typeof pan === "number") {
              self2._stereo = pan;
              self2._pos = [pan, 0, 0];
            } else {
              return self2._stereo;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (typeof pan === "number") {
                sound._stereo = pan;
                sound._pos = [pan, 0, 0];
                if (sound._node) {
                  sound._pannerAttr.panningModel = "equalpower";
                  if (!sound._panner || !sound._panner.pan) {
                    setupPanner(sound, pannerType);
                  }
                  if (pannerType === "spatial") {
                    if (typeof sound._panner.positionX !== "undefined") {
                      sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                      sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                      sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
                    } else {
                      sound._panner.setPosition(pan, 0, 0);
                    }
                  } else {
                    sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
                  }
                }
                self2._emit("stereo", sound._id);
              } else {
                return sound._stereo;
              }
            }
          }
          return self2;
        };
        Howl.prototype.pos = function(x, y, z, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "pos",
              action: function() {
                self2.pos(x, y, z, id);
              }
            });
            return self2;
          }
          y = typeof y !== "number" ? 0 : y;
          z = typeof z !== "number" ? -0.5 : z;
          if (typeof id === "undefined") {
            if (typeof x === "number") {
              self2._pos = [x, y, z];
            } else {
              return self2._pos;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (typeof x === "number") {
                sound._pos = [x, y, z];
                if (sound._node) {
                  if (!sound._panner || sound._panner.pan) {
                    setupPanner(sound, "spatial");
                  }
                  if (typeof sound._panner.positionX !== "undefined") {
                    sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
                    sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
                    sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setPosition(x, y, z);
                  }
                }
                self2._emit("pos", sound._id);
              } else {
                return sound._pos;
              }
            }
          }
          return self2;
        };
        Howl.prototype.orientation = function(x, y, z, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "orientation",
              action: function() {
                self2.orientation(x, y, z, id);
              }
            });
            return self2;
          }
          y = typeof y !== "number" ? self2._orientation[1] : y;
          z = typeof z !== "number" ? self2._orientation[2] : z;
          if (typeof id === "undefined") {
            if (typeof x === "number") {
              self2._orientation = [x, y, z];
            } else {
              return self2._orientation;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (typeof x === "number") {
                sound._orientation = [x, y, z];
                if (sound._node) {
                  if (!sound._panner) {
                    if (!sound._pos) {
                      sound._pos = self2._pos || [0, 0, -0.5];
                    }
                    setupPanner(sound, "spatial");
                  }
                  if (typeof sound._panner.orientationX !== "undefined") {
                    sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
                    sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
                    sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setOrientation(x, y, z);
                  }
                }
                self2._emit("orientation", sound._id);
              } else {
                return sound._orientation;
              }
            }
          }
          return self2;
        };
        Howl.prototype.pannerAttr = function() {
          var self2 = this;
          var args = arguments;
          var o, id, sound;
          if (!self2._webAudio) {
            return self2;
          }
          if (args.length === 0) {
            return self2._pannerAttr;
          } else if (args.length === 1) {
            if (typeof args[0] === "object") {
              o = args[0];
              if (typeof id === "undefined") {
                if (!o.pannerAttr) {
                  o.pannerAttr = {
                    coneInnerAngle: o.coneInnerAngle,
                    coneOuterAngle: o.coneOuterAngle,
                    coneOuterGain: o.coneOuterGain,
                    distanceModel: o.distanceModel,
                    maxDistance: o.maxDistance,
                    refDistance: o.refDistance,
                    rolloffFactor: o.rolloffFactor,
                    panningModel: o.panningModel
                  };
                }
                self2._pannerAttr = {
                  coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== "undefined" ? o.pannerAttr.coneInnerAngle : self2._coneInnerAngle,
                  coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== "undefined" ? o.pannerAttr.coneOuterAngle : self2._coneOuterAngle,
                  coneOuterGain: typeof o.pannerAttr.coneOuterGain !== "undefined" ? o.pannerAttr.coneOuterGain : self2._coneOuterGain,
                  distanceModel: typeof o.pannerAttr.distanceModel !== "undefined" ? o.pannerAttr.distanceModel : self2._distanceModel,
                  maxDistance: typeof o.pannerAttr.maxDistance !== "undefined" ? o.pannerAttr.maxDistance : self2._maxDistance,
                  refDistance: typeof o.pannerAttr.refDistance !== "undefined" ? o.pannerAttr.refDistance : self2._refDistance,
                  rolloffFactor: typeof o.pannerAttr.rolloffFactor !== "undefined" ? o.pannerAttr.rolloffFactor : self2._rolloffFactor,
                  panningModel: typeof o.pannerAttr.panningModel !== "undefined" ? o.pannerAttr.panningModel : self2._panningModel
                };
              }
            } else {
              sound = self2._soundById(parseInt(args[0], 10));
              return sound ? sound._pannerAttr : self2._pannerAttr;
            }
          } else if (args.length === 2) {
            o = args[0];
            id = parseInt(args[1], 10);
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            sound = self2._soundById(ids[i]);
            if (sound) {
              var pa = sound._pannerAttr;
              pa = {
                coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : pa.coneInnerAngle,
                coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : pa.coneOuterAngle,
                coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : pa.coneOuterGain,
                distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : pa.distanceModel,
                maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : pa.maxDistance,
                refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : pa.refDistance,
                rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : pa.rolloffFactor,
                panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : pa.panningModel
              };
              var panner = sound._panner;
              if (panner) {
                panner.coneInnerAngle = pa.coneInnerAngle;
                panner.coneOuterAngle = pa.coneOuterAngle;
                panner.coneOuterGain = pa.coneOuterGain;
                panner.distanceModel = pa.distanceModel;
                panner.maxDistance = pa.maxDistance;
                panner.refDistance = pa.refDistance;
                panner.rolloffFactor = pa.rolloffFactor;
                panner.panningModel = pa.panningModel;
              } else {
                if (!sound._pos) {
                  sound._pos = self2._pos || [0, 0, -0.5];
                }
                setupPanner(sound, "spatial");
              }
            }
          }
          return self2;
        };
        Sound.prototype.init = function(_super) {
          return function() {
            var self2 = this;
            var parent = self2._parent;
            self2._orientation = parent._orientation;
            self2._stereo = parent._stereo;
            self2._pos = parent._pos;
            self2._pannerAttr = parent._pannerAttr;
            _super.call(this);
            if (self2._stereo) {
              parent.stereo(self2._stereo);
            } else if (self2._pos) {
              parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
            }
          };
        }(Sound.prototype.init);
        Sound.prototype.reset = function(_super) {
          return function() {
            var self2 = this;
            var parent = self2._parent;
            self2._orientation = parent._orientation;
            self2._stereo = parent._stereo;
            self2._pos = parent._pos;
            self2._pannerAttr = parent._pannerAttr;
            if (self2._stereo) {
              parent.stereo(self2._stereo);
            } else if (self2._pos) {
              parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
            } else if (self2._panner) {
              self2._panner.disconnect(0);
              self2._panner = void 0;
              parent._refreshBuffer(self2);
            }
            return _super.call(this);
          };
        }(Sound.prototype.reset);
        var setupPanner = function(sound, type) {
          type = type || "spatial";
          if (type === "spatial") {
            sound._panner = Howler.ctx.createPanner();
            sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
            sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
            sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
            sound._panner.distanceModel = sound._pannerAttr.distanceModel;
            sound._panner.maxDistance = sound._pannerAttr.maxDistance;
            sound._panner.refDistance = sound._pannerAttr.refDistance;
            sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
            sound._panner.panningModel = sound._pannerAttr.panningModel;
            if (typeof sound._panner.positionX !== "undefined") {
              sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
            } else {
              sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
            }
            if (typeof sound._panner.orientationX !== "undefined") {
              sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
              sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
              sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
            }
          } else {
            sound._panner = Howler.ctx.createStereoPanner();
            sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
          }
          sound._panner.connect(sound._node);
          if (!sound._paused) {
            sound._parent.pause(sound._id, true).play(sound._id, true);
          }
        };
      })();
    }
  });

  // node_modules/earcut/src/earcut.js
  var require_earcut = __commonJS({
    "node_modules/earcut/src/earcut.js"(exports, module) {
      "use strict";
      module.exports = earcut2;
      module.exports.default = earcut2;
      function earcut2(data, holeIndices, dim) {
        dim = dim || 2;
        var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev)
          return triangles;
        var minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles)
          outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];
          for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX)
              minX = x;
            if (y < minY)
              minY = y;
            if (x > maxX)
              maxX = x;
            if (y > maxY)
              maxY = y;
          }
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
      }
      function linkedList(data, start, end, dim, clockwise) {
        var i, last;
        if (clockwise === signedArea(data, start, end, dim) > 0) {
          for (i = start; i < end; i += dim)
            last = insertNode(i, data[i], data[i + 1], last);
        } else {
          for (i = end - dim; i >= start; i -= dim)
            last = insertNode(i, data[i], data[i + 1], last);
        }
        if (last && equals6(last, last.next)) {
          removeNode(last);
          last = last.next;
        }
        return last;
      }
      function filterPoints(start, end) {
        if (!start)
          return start;
        if (!end)
          end = start;
        var p = start, again;
        do {
          again = false;
          if (!p.steiner && (equals6(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next)
              break;
            again = true;
          } else {
            p = p.next;
          }
        } while (again || p !== end);
        return end;
      }
      function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear)
          return;
        if (!pass && invSize)
          indexCurve(ear, minX, minY, invSize);
        var stop = ear, prev, next;
        while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;
          if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode(ear);
            ear = next.next;
            stop = next.next;
            continue;
          }
          ear = next;
          if (ear === stop) {
            if (!pass) {
              earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            } else if (pass === 1) {
              ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
              earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            } else if (pass === 2) {
              splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }
            break;
          }
        }
      }
      function isEar(ear) {
        var a = ear.prev, b = ear, c = ear.next;
        if (area(a, b, c) >= 0)
          return false;
        var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var p = c.next;
        while (p !== a) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.next;
        }
        return true;
      }
      function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev, b = ear, c = ear.next;
        if (area(a, b, c) >= 0)
          return false;
        var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
        var p = ear.prevZ, n = ear.nextZ;
        while (p && p.z >= minZ && n && n.z <= maxZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.prevZ;
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
            return false;
          n = n.nextZ;
        }
        while (p && p.z >= minZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.prevZ;
        }
        while (n && n.z <= maxZ) {
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
            return false;
          n = n.nextZ;
        }
        return true;
      }
      function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
          var a = p.prev, b = p.next.next;
          if (!equals6(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            removeNode(p);
            removeNode(p.next);
            p = start = b;
          }
          p = p.next;
        } while (p !== start);
        return filterPoints(p);
      }
      function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        var a = start;
        do {
          var b = a.next.next;
          while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
              var c = splitPolygon(a, b);
              a = filterPoints(a, a.next);
              c = filterPoints(c, c.next);
              earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
              earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
              return;
            }
            b = b.next;
          }
          a = a.next;
        } while (a !== start);
      }
      function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [], i, len4, start, end, list;
        for (i = 0, len4 = holeIndices.length; i < len4; i++) {
          start = holeIndices[i] * dim;
          end = i < len4 - 1 ? holeIndices[i + 1] * dim : data.length;
          list = linkedList(data, start, end, dim, false);
          if (list === list.next)
            list.steiner = true;
          queue.push(getLeftmost(list));
        }
        queue.sort(compareX);
        for (i = 0; i < queue.length; i++) {
          outerNode = eliminateHole(queue[i], outerNode);
        }
        return outerNode;
      }
      function compareX(a, b) {
        return a.x - b.x;
      }
      function eliminateHole(hole, outerNode) {
        var bridge = findHoleBridge(hole, outerNode);
        if (!bridge) {
          return outerNode;
        }
        var bridgeReverse = splitPolygon(bridge, hole);
        filterPoints(bridgeReverse, bridgeReverse.next);
        return filterPoints(bridge, bridge.next);
      }
      function findHoleBridge(hole, outerNode) {
        var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;
        do {
          if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
              qx = x;
              m = p.x < p.next.x ? p : p.next;
              if (x === hx)
                return m;
            }
          }
          p = p.next;
        } while (p !== outerNode);
        if (!m)
          return null;
        var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;
        p = m;
        do {
          if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x);
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
              m = p;
              tanMin = tan;
            }
          }
          p = p.next;
        } while (p !== stop);
        return m;
      }
      function sectorContainsSector(m, p) {
        return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
      }
      function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
          if (p.z === 0)
            p.z = zOrder(p.x, p.y, minX, minY, invSize);
          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
        } while (p !== start);
        p.prevZ.nextZ = null;
        p.prevZ = null;
        sortLinked(p);
      }
      function sortLinked(list) {
        var i, p, q2, e, tail, numMerges, pSize, qSize, inSize = 1;
        do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;
          while (p) {
            numMerges++;
            q2 = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
              pSize++;
              q2 = q2.nextZ;
              if (!q2)
                break;
            }
            qSize = inSize;
            while (pSize > 0 || qSize > 0 && q2) {
              if (pSize !== 0 && (qSize === 0 || !q2 || p.z <= q2.z)) {
                e = p;
                p = p.nextZ;
                pSize--;
              } else {
                e = q2;
                q2 = q2.nextZ;
                qSize--;
              }
              if (tail)
                tail.nextZ = e;
              else
                list = e;
              e.prevZ = tail;
              tail = e;
            }
            p = q2;
          }
          tail.nextZ = null;
          inSize *= 2;
        } while (numMerges > 1);
        return list;
      }
      function zOrder(x, y, minX, minY, invSize) {
        x = (x - minX) * invSize | 0;
        y = (y - minY) * invSize | 0;
        x = (x | x << 8) & 16711935;
        x = (x | x << 4) & 252645135;
        x = (x | x << 2) & 858993459;
        x = (x | x << 1) & 1431655765;
        y = (y | y << 8) & 16711935;
        y = (y | y << 4) & 252645135;
        y = (y | y << 2) & 858993459;
        y = (y | y << 1) & 1431655765;
        return x | y << 1;
      }
      function getLeftmost(start) {
        var p = start, leftmost = start;
        do {
          if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
            leftmost = p;
          p = p.next;
        } while (p !== start);
        return leftmost;
      }
      function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
      }
      function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
        (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
        (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
        equals6(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
      }
      function area(p, q2, r) {
        return (q2.y - p.y) * (r.x - q2.x) - (q2.x - p.x) * (r.y - q2.y);
      }
      function equals6(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
      }
      function intersects(p1, q1, p2, q2) {
        var o1 = sign(area(p1, q1, p2));
        var o2 = sign(area(p1, q1, q2));
        var o3 = sign(area(p2, q2, p1));
        var o4 = sign(area(p2, q2, q1));
        if (o1 !== o2 && o3 !== o4)
          return true;
        if (o1 === 0 && onSegment(p1, p2, q1))
          return true;
        if (o2 === 0 && onSegment(p1, q2, q1))
          return true;
        if (o3 === 0 && onSegment(p2, p1, q2))
          return true;
        if (o4 === 0 && onSegment(p2, q1, q2))
          return true;
        return false;
      }
      function onSegment(p, q2, r) {
        return q2.x <= Math.max(p.x, r.x) && q2.x >= Math.min(p.x, r.x) && q2.y <= Math.max(p.y, r.y) && q2.y >= Math.min(p.y, r.y);
      }
      function sign(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
      }
      function intersectsPolygon(a, b) {
        var p = a;
        do {
          if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
            return true;
          p = p.next;
        } while (p !== a);
        return false;
      }
      function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
      }
      function middleInside(a, b) {
        var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
        do {
          if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)
            inside = !inside;
          p = p.next;
        } while (p !== a);
        return inside;
      }
      function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
        a.next = b;
        b.prev = a;
        a2.next = an;
        an.prev = a2;
        b2.next = a2;
        a2.prev = b2;
        bp.next = b2;
        b2.prev = bp;
        return b2;
      }
      function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);
        if (!last) {
          p.prev = p;
          p.next = p;
        } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
        }
        return p;
      }
      function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;
        if (p.prevZ)
          p.prevZ.nextZ = p.nextZ;
        if (p.nextZ)
          p.nextZ.prevZ = p.prevZ;
      }
      function Node(i, x, y) {
        this.i = i;
        this.x = x;
        this.y = y;
        this.prev = null;
        this.next = null;
        this.z = 0;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false;
      }
      earcut2.deviation = function(data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
          for (var i = 0, len4 = holeIndices.length; i < len4; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len4 - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
          }
        }
        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
          var a = triangles[i] * dim;
          var b = triangles[i + 1] * dim;
          var c = triangles[i + 2] * dim;
          trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1])
          );
        }
        return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
      };
      function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
          j = i;
        }
        return sum;
      }
      earcut2.flatten = function(data) {
        var dim = data[0][0].length, result = { vertices: [], holes: [], dimensions: dim }, holeIndex = 0;
        for (var i = 0; i < data.length; i++) {
          for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++)
              result.vertices.push(data[i][j][d]);
          }
          if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
          }
        }
        return result;
      };
    }
  });

  // node_modules/@sorskoot/wonderland-components/dist/index.js
  var dist_exports = {};
  __export(dist_exports, {
    Easing: () => Easing,
    Flipbook: () => Flipbook,
    ObjectCache: () => ObjectCache,
    Prefab: () => Prefab,
    PrefabStorage: () => PrefabStorage,
    Queue: () => Queue,
    RNG: () => RNG,
    ShootBase: () => ShootBase,
    SnapRotate: () => SnapRotate,
    SnowParticles: () => SnowParticles,
    Tags: () => Tags,
    clamp: () => clamp,
    cloneObject: () => cloneObject,
    lerp: () => lerp5,
    rng: () => rng,
    rngWithWeight: () => rngWithWeight,
    shuffleArray: () => shuffleArray,
    wlUtils: () => wlUtils
  });

  // node_modules/@wonderlandengine/api/dist/property.js
  var Type;
  (function(Type2) {
    Type2[Type2["Native"] = 1] = "Native";
    Type2[Type2["Bool"] = 2] = "Bool";
    Type2[Type2["Int"] = 4] = "Int";
    Type2[Type2["Float"] = 8] = "Float";
    Type2[Type2["String"] = 16] = "String";
    Type2[Type2["Enum"] = 32] = "Enum";
    Type2[Type2["Object"] = 64] = "Object";
    Type2[Type2["Mesh"] = 128] = "Mesh";
    Type2[Type2["Texture"] = 256] = "Texture";
    Type2[Type2["Material"] = 512] = "Material";
    Type2[Type2["Animation"] = 1024] = "Animation";
    Type2[Type2["Skin"] = 2048] = "Skin";
    Type2[Type2["Color"] = 4096] = "Color";
  })(Type || (Type = {}));
  var Property = {
    /**
     * Create an boolean property.
     *
     * @param defaultValue The default value. If not provided, defaults to `false`.
     */
    bool(defaultValue = false) {
      return { type: Type.Bool, default: defaultValue };
    },
    /**
     * Create an integer property.
     *
     * @param defaultValue The default value. If not provided, defaults to `0`.
     */
    int(defaultValue = 0) {
      return { type: Type.Int, default: defaultValue };
    },
    /**
     * Create an float property.
     *
     * @param defaultValue The default value. If not provided, defaults to `0.0`.
     */
    float(defaultValue = 0) {
      return { type: Type.Float, default: defaultValue };
    },
    /**
     * Create an string property.
     *
     * @param defaultValue The default value. If not provided, defaults to `''`.
     */
    string(defaultValue = "") {
      return { type: Type.String, default: defaultValue };
    },
    /**
     * Create an enumeration property.
     *
     * @param values The list of values.
     * @param defaultValue The default value. Can be a string or an index into
     *     `values`. If not provided, defaults to the first element.
     */
    enum(values, defaultValue) {
      return { type: Type.Enum, values, default: defaultValue };
    },
    /** Create an {@link Object3D} reference property. */
    object() {
      return { type: Type.Object, default: null };
    },
    /** Create a {@link Mesh} reference property. */
    mesh() {
      return { type: Type.Mesh, default: null };
    },
    /** Create a {@link Texture} reference property. */
    texture() {
      return { type: Type.Texture, default: null };
    },
    /** Create a {@link Material} reference property. */
    material() {
      return { type: Type.Material, default: null };
    },
    /** Create an {@link Animation} reference property. */
    animation() {
      return { type: Type.Animation, default: null };
    },
    /** Create a {@link Skin} reference property. */
    skin() {
      return { type: Type.Skin, default: null };
    },
    /**
     * Create a color property.
     *
     * @param r The red component, in the range [0; 1].
     * @param g The green component, in the range [0; 1].
     * @param b The blue component, in the range [0; 1].
     * @param a The alpha component, in the range [0; 1].
     */
    color(r = 0, g = 0, b = 0, a = 1) {
      return { type: Type.Color, default: [r, g, b, a] };
    }
  };

  // node_modules/@wonderlandengine/api/dist/decorators.js
  function propertyDecorator(data) {
    return function(target, propertyKey) {
      const ctor = target.constructor;
      ctor.Properties = ctor.Properties ?? {};
      ctor.Properties[propertyKey] = data;
    };
  }
  function enumerable() {
    return function(_, __, descriptor) {
      descriptor.enumerable = true;
    };
  }
  function nativeProperty() {
    return function(target, propertyKey, descriptor) {
      enumerable()(target, propertyKey, descriptor);
      propertyDecorator({ type: Type.Native })(target, propertyKey);
    };
  }
  var property = {};
  for (const name in Property) {
    property[name] = (...args) => {
      const functor = Property[name];
      return propertyDecorator(functor(...args));
    };
  }

  // node_modules/@wonderlandengine/api/dist/utils/object.js
  function isNumber(value) {
    if (value === null || value === void 0)
      return false;
    return typeof value === "number" || value.constructor === Number;
  }

  // node_modules/@wonderlandengine/api/dist/utils/event.js
  var Emitter = class {
    /**
     * List of listeners to trigger when `notify` is called.
     *
     * @hidden
     */
    _listeners = [];
    /**
     * Register a new listener to be triggered on {@link Emitter.notify}.
     *
     * Basic usage:
     *
     * ```js
     * emitter.add((data) => {
     *     console.log('event received!');
     *     console.log(data);
     * });
     * ```
     *
     * Automatically remove the listener when an event is received:
     *
     * ```js
     * emitter.add((data) => {
     *     console.log('event received!');
     *     console.log(data);
     * }, {once: true});
     * ```
     *
     * @param listener The callback to register.
     * @param opts The listener options. For more information, please have a look
     *     at the {@link ListenerOptions} interface.
     *
     * @returns Reference to self (for method chaining)
     */
    add(listener, opts = {}) {
      const { once = false, id = void 0 } = opts;
      this._listeners.push({ id, once, callback: listener });
      return this;
    }
    /**
     * Equivalent to {@link Emitter.add}.
     *
     * @param listeners The callback(s) to register.
     * @returns Reference to self (for method chaining).
     *
     * @deprecated Please use {@link Emitter.add} instead.
     */
    push(...listeners) {
      for (const cb of listeners)
        this.add(cb);
      return this;
    }
    /**
     * Register a new listener to be triggered on {@link Emitter.notify}.
     *
     * Once notified, the listener will be automatically removed.
     *
     * The method is equivalent to calling {@link Emitter.add} with:
     *
     * ```js
     * emitter.add(listener, {once: true});
     * ```
     *
     * @param listener The callback to register.
     *
     * @returns Reference to self (for method chaining).
     */
    once(listener) {
      return this.add(listener, { once: true });
    }
    /**
     * Remove a registered listener.
     *
     * Usage with a callback:
     *
     * ```js
     * const listener = (data) => console.log(data);
     * emitter.add(listener);
     *
     * // Remove using the callback reference:
     * emitter.remove(listener);
     * ```
     *
     * Usage with an id:
     *
     * ```js
     * emitter.add((data) => console.log(data), {id: 'my-callback'});
     *
     * // Remove using the id:
     * emitter.remove('my-callback');
     * ```
     *
     * Using identifiers, you will need to ensure your value is unique to avoid
     * removing listeners from other libraries, e.g.,:
     *
     * ```js
     * emitter.add((data) => console.log(data), {id: 'non-unique'});
     * // This second listener could be added by a third-party library.
     * emitter.add((data) => console.log('Hello From Library!'), {id: 'non-unique'});
     *
     * // Ho Snap! This also removed the library listener!
     * emitter.remove('non-unique');
     * ```
     *
     * The identifier can be any type. However, remember that the comparison will be
     * by-value for primitive types (string, number), but by reference for objects.
     *
     * Example:
     *
     * ```js
     * emitter.add(() => console.log('Hello'), {id: {value: 42}});
     * emitter.add(() => console.log('World!'), {id: {value: 42}});
     * emitter.remove({value: 42}); // None of the above listeners match!
     * emitter.notify(); // Prints 'Hello' and 'World!'.
     * ```
     *
     * Here, both emitters have id `{value: 42}`, but the comparison is made by reference. Thus,
     * the `remove()` call has no effect. We can make it work by doing:
     *
     * ```js
     * const id = {value: 42};
     * emitter.add(() => console.log('Hello'), {id});
     * emitter.add(() => console.log('World!'), {id});
     * emitter.remove(id); // Same reference, it works!
     * emitter.notify(); // Doesn't print.
     * ```
     *
     * @param listener The registered callback or a value representing the `id`.
     *
     * @returns Reference to self (for method chaining)
     */
    remove(listener) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const target = listeners[i];
        if (target.callback === listener || target.id === listener) {
          listeners.splice(i--, 1);
        }
      }
      return this;
    }
    /**
     * Check whether the listener is registered.
     *
     * @note This method performs a linear search.
     *
     * @param listener The registered callback or a value representing the `id`.
     * @returns `true` if the handle is found, `false` otherwise.
     */
    has(listener) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const target = listeners[i];
        if (target.callback === listener || target.id === listener)
          return true;
      }
      return false;
    }
    /**
     * Notify listeners with the given data object.
     *
     * @note This method ensures all listeners are called even if
     * an exception is thrown. For (possibly) faster notification,
     * please use {@link Emitter.notifyUnsafe}.
     *
     * @param data The data to pass to listener when invoked.
     */
    notify(...data) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const listener = listeners[i];
        if (listener.once)
          listeners.splice(i--, 1);
        try {
          listener.callback(...data);
        } catch (e) {
          console.error(e);
        }
      }
    }
    /**
     * Notify listeners with the given data object.
     *
     * @note Because this method doesn't catch exceptions, some listeners
     * will be skipped on a throw. Please use {@link Emitter.notify} for safe
     * notification.
     *
     * @param data The data to pass to listener when invoked.
     */
    notifyUnsafe(...data) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const listener = listeners[i];
        if (listener.once)
          listeners.splice(i--, 1);
        listener.callback(...data);
      }
    }
    /**
     * Return a promise that will resolve on the next event.
     *
     * @note The promise might never resolve if no event is sent.
     *
     * @returns A promise that resolves with the data passed to
     *     {@link Emitter.notify}.
     */
    promise() {
      return new Promise((res, _) => {
        this.once((...args) => {
          if (args.length > 1) {
            res(args);
          } else {
            res(args[0]);
          }
        });
      });
    }
    /** Number of listeners. */
    get listenerCount() {
      return this._listeners.length;
    }
    /** `true` if it has no listeners, `false` otherwise. */
    get isEmpty() {
      return this.listenerCount === 0;
    }
  };

  // node_modules/@wonderlandengine/api/dist/wonderland.js
  var __decorate = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var Collider;
  (function(Collider2) {
    Collider2[Collider2["Sphere"] = 0] = "Sphere";
    Collider2[Collider2["AxisAlignedBox"] = 1] = "AxisAlignedBox";
    Collider2[Collider2["Box"] = 2] = "Box";
  })(Collider || (Collider = {}));
  var Alignment;
  (function(Alignment2) {
    Alignment2[Alignment2["Left"] = 0] = "Left";
    Alignment2[Alignment2["Center"] = 1] = "Center";
    Alignment2[Alignment2["Right"] = 2] = "Right";
  })(Alignment || (Alignment = {}));
  var Justification;
  (function(Justification2) {
    Justification2[Justification2["Line"] = 0] = "Line";
    Justification2[Justification2["Middle"] = 1] = "Middle";
    Justification2[Justification2["Top"] = 2] = "Top";
    Justification2[Justification2["Bottom"] = 3] = "Bottom";
  })(Justification || (Justification = {}));
  var TextEffect;
  (function(TextEffect2) {
    TextEffect2[TextEffect2["None"] = 0] = "None";
    TextEffect2[TextEffect2["Outline"] = 1] = "Outline";
  })(TextEffect || (TextEffect = {}));
  var InputType;
  (function(InputType2) {
    InputType2[InputType2["Head"] = 0] = "Head";
    InputType2[InputType2["EyeLeft"] = 1] = "EyeLeft";
    InputType2[InputType2["EyeRight"] = 2] = "EyeRight";
    InputType2[InputType2["ControllerLeft"] = 3] = "ControllerLeft";
    InputType2[InputType2["ControllerRight"] = 4] = "ControllerRight";
    InputType2[InputType2["RayLeft"] = 5] = "RayLeft";
    InputType2[InputType2["RayRight"] = 6] = "RayRight";
  })(InputType || (InputType = {}));
  var LightType;
  (function(LightType2) {
    LightType2[LightType2["Point"] = 0] = "Point";
    LightType2[LightType2["Spot"] = 1] = "Spot";
    LightType2[LightType2["Sun"] = 2] = "Sun";
  })(LightType || (LightType = {}));
  var AnimationState;
  (function(AnimationState2) {
    AnimationState2[AnimationState2["Playing"] = 0] = "Playing";
    AnimationState2[AnimationState2["Paused"] = 1] = "Paused";
    AnimationState2[AnimationState2["Stopped"] = 2] = "Stopped";
  })(AnimationState || (AnimationState = {}));
  var ForceMode;
  (function(ForceMode2) {
    ForceMode2[ForceMode2["Force"] = 0] = "Force";
    ForceMode2[ForceMode2["Impulse"] = 1] = "Impulse";
    ForceMode2[ForceMode2["VelocityChange"] = 2] = "VelocityChange";
    ForceMode2[ForceMode2["Acceleration"] = 3] = "Acceleration";
  })(ForceMode || (ForceMode = {}));
  var CollisionEventType;
  (function(CollisionEventType2) {
    CollisionEventType2[CollisionEventType2["Touch"] = 0] = "Touch";
    CollisionEventType2[CollisionEventType2["TouchLost"] = 1] = "TouchLost";
    CollisionEventType2[CollisionEventType2["TriggerTouch"] = 2] = "TriggerTouch";
    CollisionEventType2[CollisionEventType2["TriggerTouchLost"] = 3] = "TriggerTouchLost";
  })(CollisionEventType || (CollisionEventType = {}));
  var Shape;
  (function(Shape2) {
    Shape2[Shape2["None"] = 0] = "None";
    Shape2[Shape2["Sphere"] = 1] = "Sphere";
    Shape2[Shape2["Capsule"] = 2] = "Capsule";
    Shape2[Shape2["Box"] = 3] = "Box";
    Shape2[Shape2["Plane"] = 4] = "Plane";
    Shape2[Shape2["ConvexMesh"] = 5] = "ConvexMesh";
    Shape2[Shape2["TriangleMesh"] = 6] = "TriangleMesh";
  })(Shape || (Shape = {}));
  var MeshAttribute;
  (function(MeshAttribute2) {
    MeshAttribute2[MeshAttribute2["Position"] = 0] = "Position";
    MeshAttribute2[MeshAttribute2["Tangent"] = 1] = "Tangent";
    MeshAttribute2[MeshAttribute2["Normal"] = 2] = "Normal";
    MeshAttribute2[MeshAttribute2["TextureCoordinate"] = 3] = "TextureCoordinate";
    MeshAttribute2[MeshAttribute2["Color"] = 4] = "Color";
    MeshAttribute2[MeshAttribute2["JointId"] = 5] = "JointId";
    MeshAttribute2[MeshAttribute2["JointWeight"] = 6] = "JointWeight";
  })(MeshAttribute || (MeshAttribute = {}));
  var MaterialParamType;
  (function(MaterialParamType2) {
    MaterialParamType2[MaterialParamType2["UnsignedInt"] = 0] = "UnsignedInt";
    MaterialParamType2[MaterialParamType2["Int"] = 1] = "Int";
    MaterialParamType2[MaterialParamType2["Float"] = 2] = "Float";
    MaterialParamType2[MaterialParamType2["Sampler"] = 3] = "Sampler";
    MaterialParamType2[MaterialParamType2["Font"] = 4] = "Font";
  })(MaterialParamType || (MaterialParamType = {}));
  function isMeshShape(shape) {
    return shape === Shape.ConvexMesh || shape === Shape.TriangleMesh;
  }
  var Component = class {
    /** Manager index. @hidden */
    _manager;
    /** Instance index. @hidden */
    _id;
    /**
     * Object containing this object.
     *
     * **Note**: This is cached for faster retrieval.
     *
     * @hidden
     */
    _object;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * Create a new instance
     *
     * @param engine The engine instance.
     * @param manager Index of the manager.
     * @param id WASM component instance index.
     *
     * @hidden
     */
    constructor(engine, manager = -1, id = -1) {
      this._engine = engine;
      this._manager = manager;
      this._id = id;
      this._object = null;
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /** The name of this component's type */
    get type() {
      const ctor = this.constructor;
      return ctor.TypeName ?? this._engine.wasm._typeNameFor(this._manager);
    }
    /** The object this component is attached to. */
    get object() {
      if (!this._object) {
        const objectId = this._engine.wasm._wl_component_get_object(this._manager, this._id);
        this._object = this._engine.wrapObject(objectId);
      }
      return this._object;
    }
    /**
     * Set whether this component is active.
     *
     * Activating/deactivating a component comes at a small cost of reordering
     * components in the respective component manager. This function therefore
     * is not a trivial assignment.
     *
     * Does nothing if the component is already activated/deactivated.
     *
     * @param active New active state.
     */
    set active(active) {
      this._engine.wasm._wl_component_setActive(this._manager, this._id, active);
    }
    /**
     * Whether this component is active
     */
    get active() {
      return this._engine.wasm._wl_component_isActive(this._manager, this._id) != 0;
    }
    /**
     * Remove this component from its objects and destroy it.
     *
     * It is best practice to set the component to `null` after,
     * to ensure it does not get used later.
     *
     * ```js
     *    c.destroy();
     *    c = null;
     * ```
     * @since 0.9.0
     */
    destroy() {
      this._engine.wasm._wl_component_remove(this._manager, this._id);
      this._manager = -1;
      this._id = -1;
    }
    /**
     * Checks equality by comparing whether the wrapped native component ids
     * and component manager types are equal.
     *
     * @param otherComponent Component to check equality with.
     * @returns Whether this component equals the given component.
     */
    equals(otherComponent) {
      if (!otherComponent)
        return false;
      return this._manager == otherComponent._manager && this._id == otherComponent._id;
    }
  };
  /**
   * Unique identifier for this component class.
   *
   * This is used to register, add, and retrieve components of a given type.
   */
  __publicField(Component, "TypeName");
  /**
   * Properties of this component class.
   *
   * Properties are public attributes that can be configured via the
   * Wonderland Editor.
   *
   * Example:
   *
   * ```js
   * import { Component, Type } from '@wonderlandengine/api';
   * class MyComponent extends Component {
   *     static TypeName = 'my-component';
   *     static Properties = {
   *         myBoolean: { type: Type.Boolean, default: false },
   *         myFloat: { type: Type.Float, default: false },
   *         myTexture: { type: Type.Texture, default: null },
   *     };
   * }
   * ```
   *
   * Properties are automatically added to each component instance, and are
   * accessible like any JS attribute:
   *
   * ```js
   * // Creates a new component and set each properties value:
   * const myComponent = object.addComponent(MyComponent, {
   *     myBoolean: true,
   *     myFloat: 42.0,
   *     myTexture: null
   * });
   *
   * // You can also override the properties on the instance:
   * myComponent.myBoolean = false;
   * myComponent.myFloat = -42.0;
   * ```
   */
  __publicField(Component, "Properties");
  /**
   * This was never released in an official version, we are keeping it
   * to easy transition to the new API.
   *
   * @deprecated Use {@link Component.onRegister} instead.
   * @hidden
   */
  __publicField(Component, "Dependencies");
  /**
   * Called when this component class is registered.
   *
   * @example
   *
   * This callback can be used to register dependencies of a component,
   * e.g., component classes that need to be registered in order to add
   * them at runtime with {@link Object3D.addComponent}, independent of whether
   * they are used in the editor.
   *
   * ```js
   * class Spawner extends Component {
   *     static TypeName = 'spawner';
   *
   *     static onRegister() {
   *         engine.registerComponent(SpawnedComponent);
   *     }
   *
   *     // You can now use addComponent with SpawnedComponent
   * }
   * ```
   *
   * @example
   *
   * This callback can be used to register different implementations of a
   * component depending on client features or API versions.
   *
   * ```js
   * // Properties need to be the same for all implementations!
   * const SharedProperties = {};
   *
   * class Anchor extends Component {
   *     static TypeName = 'spawner';
   *     static Properties = SharedProperties;
   *
   *     static onRegister() {
   *         if(navigator.xr === undefined) {
   *             /* WebXR unsupported, keep this dummy component *\/
   *             return;
   *         }
   *         /* WebXR supported! Override already registered dummy implementation
   *          * with one depending on hit-test API support *\/
   *         engine.registerComponent(window.HitTestSource === undefined ?
   *             AnchorWithoutHitTest : AnchorWithHitTest);
   *     }
   *
   *     // This one implements no functions
   * }
   * ```
   */
  __publicField(Component, "onRegister");
  var _CollisionComponent = class extends Component {
    /** Collision component collider */
    get collider() {
      return this._engine.wasm._wl_collision_component_get_collider(this._id);
    }
    /**
     * Set collision component collider.
     *
     * @param collider Collider of the collision component.
     */
    set collider(collider) {
      this._engine.wasm._wl_collision_component_set_collider(this._id, collider);
    }
    /**
     * Collision component extents.
     *
     * If {@link collider} returns {@link Collider.Sphere}, only the first
     * component of the returned vector is used.
     */
    get extents() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_collision_component_get_extents(this._id), 3);
    }
    /**
     * Set collision component extents.
     *
     * If {@link collider} returns {@link Collider.Sphere}, only the first
     * component of the passed vector is used.
     *
     * Example:
     *
     * ```js
     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.
     * collision.extent = [1, 2, 3];
     * ```
     *
     * @param extents Extents of the collision component, expects a
     *      3 component array.
     */
    set extents(extents) {
      this.extents.set(extents);
    }
    /**
     * Collision component group.
     *
     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}
     * or the group in {@link Scene#rayCast}.
     *
     * Colliders that have no common groups will not overlap with each other. If a collider
     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.
     *
     * Each bit represents belonging to a group, see example.
     *
     * ```js
     *    // c belongs to group 2
     *    c.group = (1 << 2);
     *
     *    // c belongs to group 0
     *    c.group = (1 << 0);
     *
     *    // c belongs to group 0 *and* 2
     *    c.group = (1 << 0) | (1 << 2);
     *
     *    (c.group & (1 << 2)) != 0; // true
     *    (c.group & (1 << 7)) != 0; // false
     * ```
     */
    get group() {
      return this._engine.wasm._wl_collision_component_get_group(this._id);
    }
    /**
     * Set collision component group.
     *
     * @param group Group mask of the collision component.
     */
    set group(group) {
      this._engine.wasm._wl_collision_component_set_group(this._id, group);
    }
    /**
     * Query overlapping objects.
     *
     * Usage:
     *
     * ```js
     * const collision = object.getComponent('collision');
     * const overlaps = collision.queryOverlaps();
     * for(const otherCollision of overlaps) {
     *     const otherObject = otherCollision.object;
     *     console.log(`Collision with object ${otherObject.objectId}`);
     * }
     * ```
     *
     * @returns Collision components overlapping this collider.
     */
    queryOverlaps() {
      const count = this._engine.wasm._wl_collision_component_query_overlaps(this._id, this._engine.wasm._tempMem, this._engine.wasm._tempMemSize >> 1);
      const overlaps = new Array(count);
      for (let i = 0; i < count; ++i) {
        overlaps[i] = new _CollisionComponent(this._engine, this._manager, this._engine.wasm._tempMemUint16[i]);
      }
      return overlaps;
    }
  };
  var CollisionComponent = _CollisionComponent;
  /** @override */
  __publicField(CollisionComponent, "TypeName", "collision");
  __decorate([
    nativeProperty()
  ], CollisionComponent.prototype, "collider", null);
  __decorate([
    nativeProperty()
  ], CollisionComponent.prototype, "extents", null);
  __decorate([
    nativeProperty()
  ], CollisionComponent.prototype, "group", null);
  var TextComponent = class extends Component {
    /** Text component alignment. */
    get alignment() {
      return this._engine.wasm._wl_text_component_get_horizontal_alignment(this._id);
    }
    /**
     * Set text component alignment.
     *
     * @param alignment Alignment for the text component.
     */
    set alignment(alignment) {
      this._engine.wasm._wl_text_component_set_horizontal_alignment(this._id, alignment);
    }
    /** Text component justification. */
    get justification() {
      return this._engine.wasm._wl_text_component_get_vertical_alignment(this._id);
    }
    /**
     * Set text component justification.
     *
     * @param justification Justification for the text component.
     */
    set justification(justification) {
      this._engine.wasm._wl_text_component_set_vertical_alignment(this._id, justification);
    }
    /** Text component character spacing. */
    get characterSpacing() {
      return this._engine.wasm._wl_text_component_get_character_spacing(this._id);
    }
    /**
     * Set text component character spacing.
     *
     * @param spacing Character spacing for the text component.
     */
    set characterSpacing(spacing) {
      this._engine.wasm._wl_text_component_set_character_spacing(this._id, spacing);
    }
    /** Text component line spacing. */
    get lineSpacing() {
      return this._engine.wasm._wl_text_component_get_line_spacing(this._id);
    }
    /**
     * Set text component line spacing
     *
     * @param spacing Line spacing for the text component
     */
    set lineSpacing(spacing) {
      this._engine.wasm._wl_text_component_set_line_spacing(this._id, spacing);
    }
    /** Text component effect. */
    get effect() {
      return this._engine.wasm._wl_text_component_get_effect(this._id);
    }
    /**
     * Set text component effect
     *
     * @param effect Effect for the text component
     */
    set effect(effect) {
      this._engine.wasm._wl_text_component_set_effect(this._id, effect);
    }
    /** Text component text. */
    get text() {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_text_component_get_text(this._id);
      return wasm.UTF8ToString(ptr);
    }
    /**
     * Set text component text.
     *
     * @param text Text of the text component.
     */
    set text(text) {
      const wasm = this._engine.wasm;
      wasm._wl_text_component_set_text(this._id, wasm.tempUTF8(text));
    }
    /**
     * Set material to render the text with.
     *
     * @param material New material.
     */
    set material(material) {
      const matIndex = material ? material._index : 0;
      this._engine.wasm._wl_text_component_set_material(this._id, matIndex);
    }
    /** Material used to render the text. */
    get material() {
      const id = this._engine.wasm._wl_text_component_get_material(this._id);
      return id > 0 ? new Material(this._engine, id) : null;
    }
  };
  /** @override */
  __publicField(TextComponent, "TypeName", "text");
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "alignment", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "justification", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "characterSpacing", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "lineSpacing", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "effect", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "text", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "material", null);
  var ViewComponent = class extends Component {
    /** Projection matrix. */
    get projectionMatrix() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_view_component_get_projection_matrix(this._id), 16);
    }
    /** ViewComponent near clipping plane value. */
    get near() {
      return this._engine.wasm._wl_view_component_get_near(this._id);
    }
    /**
     * Set near clipping plane distance for the view.
     *
     * If an XR session is active, the change will apply in the
     * following frame, otherwise the change is immediate.
     *
     * @param near Near depth value.
     */
    set near(near) {
      this._engine.wasm._wl_view_component_set_near(this._id, near);
    }
    /** Far clipping plane value. */
    get far() {
      return this._engine.wasm._wl_view_component_get_far(this._id);
    }
    /**
     * Set far clipping plane distance for the view.
     *
     * If an XR session is active, the change will apply in the
     * following frame, otherwise the change is immediate.
     *
     * @param far Near depth value.
     */
    set far(far) {
      this._engine.wasm._wl_view_component_set_far(this._id, far);
    }
    /**
     * Get the horizontal field of view for the view, **in degrees**.
     *
     * If an XR session is active, this returns the field of view reported by
     * the device, regardless of the fov that was set.
     */
    get fov() {
      return this._engine.wasm._wl_view_component_get_fov(this._id);
    }
    /**
     * Set the horizontal field of view for the view, **in degrees**.
     *
     * If an XR session is active, the field of view reported by the device is
     * used and this value is ignored. After the XR session ends, the new value
     * is applied.
     *
     * @param fov Horizontal field of view, **in degrees**.
     */
    set fov(fov) {
      this._engine.wasm._wl_view_component_set_fov(this._id, fov);
    }
  };
  /** @override */
  __publicField(ViewComponent, "TypeName", "view");
  __decorate([
    enumerable()
  ], ViewComponent.prototype, "projectionMatrix", null);
  __decorate([
    nativeProperty()
  ], ViewComponent.prototype, "near", null);
  __decorate([
    nativeProperty()
  ], ViewComponent.prototype, "far", null);
  __decorate([
    nativeProperty()
  ], ViewComponent.prototype, "fov", null);
  var InputComponent = class extends Component {
    /** Input component type */
    get inputType() {
      return this._engine.wasm._wl_input_component_get_type(this._id);
    }
    /**
     * Set input component type.
     *
     * @params New input component type.
     */
    set inputType(type) {
      this._engine.wasm._wl_input_component_set_type(this._id, type);
    }
    /**
     * WebXR Device API input source associated with this input component,
     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.
     */
    get xrInputSource() {
      const xrSession = this._engine.xrSession;
      if (xrSession) {
        for (let inputSource of xrSession.inputSources) {
          if (inputSource.handedness == this.handedness) {
            return inputSource;
          }
        }
      }
      return null;
    }
    /**
     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.
     */
    get handedness() {
      const inputType = this.inputType;
      if (inputType == InputType.ControllerRight || inputType == InputType.RayRight || inputType == InputType.EyeRight)
        return "right";
      if (inputType == InputType.ControllerLeft || inputType == InputType.RayLeft || inputType == InputType.EyeLeft)
        return "left";
      return null;
    }
  };
  /** @override */
  __publicField(InputComponent, "TypeName", "input");
  __decorate([
    nativeProperty()
  ], InputComponent.prototype, "inputType", null);
  __decorate([
    enumerable()
  ], InputComponent.prototype, "xrInputSource", null);
  __decorate([
    enumerable()
  ], InputComponent.prototype, "handedness", null);
  var LightComponent = class extends Component {
    getColor(out = new Float32Array(3)) {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_light_component_get_color(this._id) / 4;
      out[0] = wasm.HEAPF32[ptr];
      out[1] = wasm.HEAPF32[ptr + 1];
      out[2] = wasm.HEAPF32[ptr + 2];
      return out;
    }
    /**
     * Set light color.
     *
     * @param c New color array/vector, expected to have at least 3 elements.
     * @since 1.0.0
     */
    setColor(c) {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_light_component_get_color(this._id) / 4;
      wasm.HEAPF32[ptr] = c[0];
      wasm.HEAPF32[ptr + 1] = c[1];
      wasm.HEAPF32[ptr + 2] = c[2];
    }
    /**
     * View on the light color.
     *
     * @note Prefer to use {@link getColor} in performance-critical code.
     */
    get color() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_light_component_get_color(this._id), 3);
    }
    /**
     * Set light color.
     *
     * @param c Color of the light component.
     *
     * @note Prefer to use {@link setColor} in performance-critical code.
     */
    set color(c) {
      this.color.set(c);
    }
    /** Light type. */
    get lightType() {
      return this._engine.wasm._wl_light_component_get_type(this._id);
    }
    /**
     * Set light type.
     *
     * @param lightType Type of the light component.
     */
    set lightType(t) {
      this._engine.wasm._wl_light_component_set_type(this._id, t);
    }
    /**
     * Light intensity.
     * @since 1.0.0
     */
    get intensity() {
      return this._engine.wasm._wl_light_component_get_intensity(this._id);
    }
    /**
     * Set light intensity.
     *
     * @param intensity Intensity of the light component.
     * @since 1.0.0
     */
    set intensity(intensity) {
      this._engine.wasm._wl_light_component_set_intensity(this._id, intensity);
    }
    /**
     * Outer angle for spot lights, in degrees.
     * @since 1.0.0
     */
    get outerAngle() {
      return this._engine.wasm._wl_light_component_get_outerAngle(this._id);
    }
    /**
     * Set outer angle for spot lights.
     *
     * @param angle Outer angle, in degrees.
     * @since 1.0.0
     */
    set outerAngle(angle2) {
      this._engine.wasm._wl_light_component_set_outerAngle(this._id, angle2);
    }
    /**
     * Inner angle for spot lights, in degrees.
     * @since 1.0.0
     */
    get innerAngle() {
      return this._engine.wasm._wl_light_component_get_innerAngle(this._id);
    }
    /**
     * Set inner angle for spot lights.
     *
     * @param angle Inner angle, in degrees.
     * @since 1.0.0
     */
    set innerAngle(angle2) {
      this._engine.wasm._wl_light_component_set_innerAngle(this._id, angle2);
    }
    /**
     * Whether the light casts shadows.
     * @since 1.0.0
     */
    get shadows() {
      return !!this._engine.wasm._wl_light_component_get_shadows(this._id);
    }
    /**
     * Set whether the light casts shadows.
     *
     * @param b Whether the light casts shadows.
     * @since 1.0.0
     */
    set shadows(b) {
      this._engine.wasm._wl_light_component_set_shadows(this._id, b);
    }
    /**
     * Range for shadows.
     * @since 1.0.0
     */
    get shadowRange() {
      return this._engine.wasm._wl_light_component_get_shadowRange(this._id);
    }
    /**
     * Set range for shadows.
     *
     * @param range Range for shadows.
     * @since 1.0.0
     */
    set shadowRange(range) {
      this._engine.wasm._wl_light_component_set_shadowRange(this._id, range);
    }
    /**
     * Bias value for shadows.
     * @since 1.0.0
     */
    get shadowBias() {
      return this._engine.wasm._wl_light_component_get_shadowBias(this._id);
    }
    /**
     * Set bias value for shadows.
     *
     * @param bias Bias for shadows.
     * @since 1.0.0
     */
    set shadowBias(bias) {
      this._engine.wasm._wl_light_component_set_shadowBias(this._id, bias);
    }
    /**
     * Normal bias value for shadows.
     * @since 1.0.0
     */
    get shadowNormalBias() {
      return this._engine.wasm._wl_light_component_get_shadowNormalBias(this._id);
    }
    /**
     * Set normal bias value for shadows.
     *
     * @param bias Normal bias for shadows.
     * @since 1.0.0
     */
    set shadowNormalBias(bias) {
      this._engine.wasm._wl_light_component_set_shadowNormalBias(this._id, bias);
    }
    /**
     * Texel size for shadows.
     * @since 1.0.0
     */
    get shadowTexelSize() {
      return this._engine.wasm._wl_light_component_get_shadowTexelSize(this._id);
    }
    /**
     * Set texel size for shadows.
     *
     * @param size Texel size for shadows.
     * @since 1.0.0
     */
    set shadowTexelSize(size2) {
      this._engine.wasm._wl_light_component_set_shadowTexelSize(this._id, size2);
    }
    /**
     * Cascade count for {@link LightType.Sun} shadows.
     * @since 1.0.0
     */
    get cascadeCount() {
      return this._engine.wasm._wl_light_component_get_cascadeCount(this._id);
    }
    /**
     * Set cascade count for {@link LightType.Sun} shadows.
     *
     * @param count Cascade count.
     * @since 1.0.0
     */
    set cascadeCount(count) {
      this._engine.wasm._wl_light_component_set_cascadeCount(this._id, count);
    }
  };
  /** @override */
  __publicField(LightComponent, "TypeName", "light");
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "color", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "lightType", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "intensity", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "outerAngle", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "innerAngle", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadows", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowRange", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowBias", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowNormalBias", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowTexelSize", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "cascadeCount", null);
  var AnimationComponent = class extends Component {
    /**
     * Set animation to play.
     *
     * Make sure to {@link Animation#retarget} the animation to affect the
     * right objects.
     *
     * @param anim Animation to play.
     */
    set animation(anim) {
      this._engine.wasm._wl_animation_component_set_animation(this._id, anim ? anim._index : 0);
    }
    /** Animation set for this component */
    get animation() {
      const id = this._engine.wasm._wl_animation_component_get_animation(this._id);
      return id > 0 ? new Animation(this._engine, id) : null;
    }
    /**
     * Set play count. Set to `0` to loop indefinitely.
     *
     * @param playCount Number of times to repeat the animation.
     */
    set playCount(playCount) {
      this._engine.wasm._wl_animation_component_set_playCount(this._id, playCount);
    }
    /** Number of times the animation is played. */
    get playCount() {
      return this._engine.wasm._wl_animation_component_get_playCount(this._id);
    }
    /**
     * Set speed. Set to negative values to run the animation backwards.
     *
     * Setting speed has an immediate effect for the current frame's update
     * and will continue with the speed from the current point in the animation.
     *
     * @param speed New speed at which to play the animation.
     * @since 0.8.10
     */
    set speed(speed) {
      this._engine.wasm._wl_animation_component_set_speed(this._id, speed);
    }
    /**
     * Speed factor at which the animation is played.
     *
     * @since 0.8.10
     */
    get speed() {
      return this._engine.wasm._wl_animation_component_get_speed(this._id);
    }
    /** Current playing state of the animation */
    get state() {
      return this._engine.wasm._wl_animation_component_state(this._id);
    }
    /**
     * Play animation.
     *
     * If the animation is currently paused, resumes from that position. If the
     * animation is already playing, does nothing.
     *
     * To restart the animation, {@link AnimationComponent#stop} it first.
     */
    play() {
      this._engine.wasm._wl_animation_component_play(this._id);
    }
    /** Stop animation. */
    stop() {
      this._engine.wasm._wl_animation_component_stop(this._id);
    }
    /** Pause animation. */
    pause() {
      this._engine.wasm._wl_animation_component_pause(this._id);
    }
  };
  /** @override */
  __publicField(AnimationComponent, "TypeName", "animation");
  __decorate([
    nativeProperty()
  ], AnimationComponent.prototype, "animation", null);
  __decorate([
    nativeProperty()
  ], AnimationComponent.prototype, "playCount", null);
  __decorate([
    nativeProperty()
  ], AnimationComponent.prototype, "speed", null);
  __decorate([
    enumerable()
  ], AnimationComponent.prototype, "state", null);
  var MeshComponent = class extends Component {
    /**
     * Set material to render the mesh with.
     *
     * @param material Material to render the mesh with.
     */
    set material(material) {
      this._engine.wasm._wl_mesh_component_set_material(this._id, material ? material._index : 0);
    }
    /** Material used to render the mesh. */
    get material() {
      const id = this._engine.wasm._wl_mesh_component_get_material(this._id);
      return id > 0 ? new Material(this._engine, id) : null;
    }
    /** Mesh rendered by this component. */
    get mesh() {
      const id = this._engine.wasm._wl_mesh_component_get_mesh(this._id);
      return id > 0 ? new Mesh(this._engine, id) : null;
    }
    /**
     * Set mesh to rendered with this component.
     *
     * @param mesh Mesh rendered by this component.
     */
    set mesh(mesh) {
      this._engine.wasm._wl_mesh_component_set_mesh(this._id, mesh ? mesh._index : 0);
    }
    /** Skin for this mesh component. */
    get skin() {
      const id = this._engine.wasm._wl_mesh_component_get_skin(this._id);
      return id > 0 ? new Skin(this._engine, id) : null;
    }
    /**
     * Set skin to transform this mesh component.
     *
     * @param skin Skin to use for rendering skinned meshes.
     */
    set skin(skin) {
      this._engine.wasm._wl_mesh_component_set_skin(this._id, skin ? skin._index : 0);
    }
  };
  /** @override */
  __publicField(MeshComponent, "TypeName", "mesh");
  __decorate([
    nativeProperty()
  ], MeshComponent.prototype, "material", null);
  __decorate([
    nativeProperty()
  ], MeshComponent.prototype, "mesh", null);
  __decorate([
    nativeProperty()
  ], MeshComponent.prototype, "skin", null);
  var LockAxis;
  (function(LockAxis2) {
    LockAxis2[LockAxis2["None"] = 0] = "None";
    LockAxis2[LockAxis2["X"] = 1] = "X";
    LockAxis2[LockAxis2["Y"] = 2] = "Y";
    LockAxis2[LockAxis2["Z"] = 4] = "Z";
  })(LockAxis || (LockAxis = {}));
  var PhysXComponent = class extends Component {
    /**
     * Set whether this rigid body is static.
     *
     * Setting this property only takes effect once the component
     * switches from inactive to active.
     *
     * @param b Whether the rigid body should be static.
     */
    set static(b) {
      this._engine.wasm._wl_physx_component_set_static(this._id, b);
    }
    /**
     * Whether this rigid body is static.
     *
     * This property returns whether the rigid body is *effectively*
     * static. If static property was set while the rigid body was
     * active, it will not take effect until the rigid body is set
     * inactive and active again. Until the component is set inactive,
     * this getter will return whether the rigid body is actually
     * static.
     */
    get static() {
      return !!this._engine.wasm._wl_physx_component_get_static(this._id);
    }
    /**
     * Set whether this rigid body is kinematic.
     *
     * @param b Whether the rigid body should be kinematic.
     */
    set kinematic(b) {
      this._engine.wasm._wl_physx_component_set_kinematic(this._id, b);
    }
    /**
     * Whether this rigid body is kinematic.
     */
    get kinematic() {
      return !!this._engine.wasm._wl_physx_component_get_kinematic(this._id);
    }
    /**
     * Set whether this rigid body's gravity is enabled.
     *
     * @param b Whether the rigid body's gravity should be enabled.
     */
    set gravity(b) {
      this._engine.wasm._wl_physx_component_set_gravity(this._id, b);
    }
    /**
     * Whether this rigid body's gravity flag is enabled.
     */
    get gravity() {
      return !!this._engine.wasm._wl_physx_component_get_gravity(this._id);
    }
    /**
     * Set whether this rigid body's simulate flag is enabled.
     *
     * @param b Whether the rigid body's simulate flag should be enabled.
     */
    set simulate(b) {
      this._engine.wasm._wl_physx_component_set_simulate(this._id, b);
    }
    /**
     * Whether this rigid body's simulate flag is enabled.
     */
    get simulate() {
      return !!this._engine.wasm._wl_physx_component_get_simulate(this._id);
    }
    /**
     * Set whether to allow simulation of this rigid body.
     *
     * {@link allowSimulation} and {@link trigger} can not be enabled at the
     * same time. Enabling {@link allowSimulation} while {@link trigger} is enabled
     * will disable {@link trigger}.
     *
     * @param b Whether to allow simulation of this rigid body.
     */
    set allowSimulation(b) {
      this._engine.wasm._wl_physx_component_set_allowSimulation(this._id, b);
    }
    /**
     * Whether to allow simulation of this rigid body.
     */
    get allowSimulation() {
      return !!this._engine.wasm._wl_physx_component_get_allowSimulation(this._id);
    }
    /**
     * Set whether this rigid body may be queried in ray casts.
     *
     * @param b Whether this rigid body may be queried in ray casts.
     */
    set allowQuery(b) {
      this._engine.wasm._wl_physx_component_set_allowQuery(this._id, b);
    }
    /**
     * Whether this rigid body may be queried in ray casts.
     */
    get allowQuery() {
      return !!this._engine.wasm._wl_physx_component_get_allowQuery(this._id);
    }
    /**
     * Set whether this physics body is a trigger.
     *
     * {@link allowSimulation} and {@link trigger} can not be enabled at the
     * same time. Enabling trigger while {@link allowSimulation} is enabled,
     * will disable {@link allowSimulation}.
     *
     * @param b Whether this physics body is a trigger.
     */
    set trigger(b) {
      this._engine.wasm._wl_physx_component_set_trigger(this._id, b);
    }
    /**
     * Whether this physics body is a trigger.
     */
    get trigger() {
      return !!this._engine.wasm._wl_physx_component_get_trigger(this._id);
    }
    /**
     * Set the shape for collision detection.
     *
     * @param s New shape.
     * @since 0.8.5
     */
    set shape(s) {
      this._engine.wasm._wl_physx_component_set_shape(this._id, s);
    }
    /** The shape for collision detection. */
    get shape() {
      return this._engine.wasm._wl_physx_component_get_shape(this._id);
    }
    /**
     * Set additional data for the shape.
     *
     * Retrieved only from {@link PhysXComponent#shapeData}.
     * @since 0.8.10
     */
    set shapeData(d) {
      if (d == null || !isMeshShape(this.shape))
        return;
      this._engine.wasm._wl_physx_component_set_shape_data(this._id, d.index);
    }
    /**
     * Additional data for the shape.
     *
     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.
     * `{index: n}` for `TriangleMesh` and `ConvexHull`.
     *
     * This data is currently only for passing onto or creating other {@link PhysXComponent}.
     * @since 0.8.10
     */
    get shapeData() {
      if (!isMeshShape(this.shape))
        return null;
      return { index: this._engine.wasm._wl_physx_component_get_shape_data(this._id) };
    }
    /**
     * Set the shape extents for collision detection.
     *
     * @param e New extents for the shape.
     * @since 0.8.5
     */
    set extents(e) {
      this.extents.set(e);
    }
    /**
     * The shape extents for collision detection.
     */
    get extents() {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_physx_component_get_extents(this._id);
      return new Float32Array(wasm.HEAPF32.buffer, ptr, 3);
    }
    /**
     * Get staticFriction.
     */
    get staticFriction() {
      return this._engine.wasm._wl_physx_component_get_staticFriction(this._id);
    }
    /**
     * Set staticFriction.
     * @param v New staticFriction.
     */
    set staticFriction(v) {
      this._engine.wasm._wl_physx_component_set_staticFriction(this._id, v);
    }
    /**
     * Get dynamicFriction.
     */
    get dynamicFriction() {
      return this._engine.wasm._wl_physx_component_get_dynamicFriction(this._id);
    }
    /**
     * Set dynamicFriction
     * @param v New dynamicDamping.
     */
    set dynamicFriction(v) {
      this._engine.wasm._wl_physx_component_set_dynamicFriction(this._id, v);
    }
    /**
     * Get bounciness.
     * @since 0.9.0
     */
    get bounciness() {
      return this._engine.wasm._wl_physx_component_get_bounciness(this._id);
    }
    /**
     * Set bounciness.
     * @param v New bounciness.
     * @since 0.9.0
     */
    set bounciness(v) {
      this._engine.wasm._wl_physx_component_set_bounciness(this._id, v);
    }
    /**
     * Get linearDamping/
     */
    get linearDamping() {
      return this._engine.wasm._wl_physx_component_get_linearDamping(this._id);
    }
    /**
     * Set linearDamping.
     * @param v New linearDamping.
     */
    set linearDamping(v) {
      this._engine.wasm._wl_physx_component_set_linearDamping(this._id, v);
    }
    /** Get angularDamping. */
    get angularDamping() {
      return this._engine.wasm._wl_physx_component_get_angularDamping(this._id);
    }
    /**
     * Set angularDamping.
     * @param v New angularDamping.
     */
    set angularDamping(v) {
      this._engine.wasm._wl_physx_component_set_angularDamping(this._id, v);
    }
    /**
     * Set linear velocity.
     *
     * [PhysX Manual - "Velocity"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)
     *
     * Has no effect, if the component is not active.
     *
     * @param v New linear velocity.
     */
    set linearVelocity(v) {
      this._engine.wasm._wl_physx_component_set_linearVelocity(this._id, v[0], v[1], v[2]);
    }
    /** Linear velocity or `[0, 0, 0]` if the component is not active. */
    get linearVelocity() {
      const wasm = this._engine.wasm;
      wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem);
      return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);
    }
    /**
     * Set angular velocity
     *
     * [PhysX Manual - "Velocity"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)
     *
     * Has no effect, if the component is not active.
     *
     * @param v New angular velocity
     */
    set angularVelocity(v) {
      this._engine.wasm._wl_physx_component_set_angularVelocity(this._id, v[0], v[1], v[2]);
    }
    /** Angular velocity or `[0, 0, 0]` if the component is not active. */
    get angularVelocity() {
      const wasm = this._engine.wasm;
      wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem);
      return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);
    }
    /**
     * Set the components groups mask.
     *
     * @param flags New flags that need to be set.
     */
    set groupsMask(flags) {
      this._engine.wasm._wl_physx_component_set_groupsMask(this._id, flags);
    }
    /**
     * Get the components groups mask flags.
     *
     * Each bit represents membership to group, see example.
     *
     * ```js
     * // Assign c to group 2
     * c.groupsMask = (1 << 2);
     *
     * // Assign c to group 0
     * c.groupsMask  = (1 << 0);
     *
     * // Assign c to group 0 and 2
     * c.groupsMask = (1 << 0) | (1 << 2);
     *
     * (c.groupsMask & (1 << 2)) != 0; // true
     * (c.groupsMask & (1 << 7)) != 0; // false
     * ```
     */
    get groupsMask() {
      return this._engine.wasm._wl_physx_component_get_groupsMask(this._id);
    }
    /**
     * Set the components blocks mask.
     *
     * @param flags New flags that need to be set.
     */
    set blocksMask(flags) {
      this._engine.wasm._wl_physx_component_set_blocksMask(this._id, flags);
    }
    /**
     * Get the components blocks mask flags.
     *
     * Each bit represents membership to the block, see example.
     *
     * ```js
     * // Block overlap with any objects in group 2
     * c.blocksMask = (1 << 2);
     *
     * // Block overlap with any objects in group 0
     * c.blocksMask  = (1 << 0)
     *
     * // Block overlap with any objects in group 0 and 2
     * c.blocksMask = (1 << 0) | (1 << 2);
     *
     * (c.blocksMask & (1 << 2)) != 0; // true
     * (c.blocksMask & (1 << 7)) != 0; // false
     * ```
     */
    get blocksMask() {
      return this._engine.wasm._wl_physx_component_get_blocksMask(this._id);
    }
    /**
     * Set axes to lock for linear velocity.
     *
     * @param lock The Axis that needs to be set.
     *
     * Combine flags with Bitwise OR.
     * ```js
     * body.linearLockAxis = LockAxis.X | LockAxis.Y; // x and y set
     * body.linearLockAxis = LockAxis.X; // y unset
     * ```
     *
     * @note This has no effect if the component is static.
     */
    set linearLockAxis(lock) {
      this._engine.wasm._wl_physx_component_set_linearLockAxis(this._id, lock);
    }
    /**
     * Get the linear lock axes flags.
     *
     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.
     *
     * ```js
     * if(body.linearLockAxis & LockAxis.Y) {
     *     console.log("The Y flag was set!");
     * }
     * ```
     *
     * @return axes that are currently locked for linear movement.
     */
    get linearLockAxis() {
      return this._engine.wasm._wl_physx_component_get_linearLockAxis(this._id);
    }
    /**
     * Set axes to lock for angular velocity.
     *
     * @param lock The Axis that needs to be set.
     *
     * ```js
     * body.angularLockAxis = LockAxis.X | LockAxis.Y; // x and y set
     * body.angularLockAxis = LockAxis.X; // y unset
     * ```
     *
     * @note This has no effect if the component is static.
     */
    set angularLockAxis(lock) {
      this._engine.wasm._wl_physx_component_set_angularLockAxis(this._id, lock);
    }
    /**
     * Get the angular lock axes flags.
     *
     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.
     *
     * ```js
     * if(body.angularLockAxis & LockAxis.Y) {
     *     console.log("The Y flag was set!");
     * }
     * ```
     *
     * @return axes that are currently locked for angular movement.
     */
    get angularLockAxis() {
      return this._engine.wasm._wl_physx_component_get_angularLockAxis(this._id);
    }
    /**
     * Set mass.
     *
     * [PhysX Manual - "Mass Properties"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)
     *
     * @param m New mass.
     */
    set mass(m) {
      this._engine.wasm._wl_physx_component_set_mass(this._id, m);
    }
    /** Mass */
    get mass() {
      return this._engine.wasm._wl_physx_component_get_mass(this._id);
    }
    /**
     * Set mass space interia tensor.
     *
     * [PhysX Manual - "Mass Properties"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)
     *
     * Has no effect, if the component is not active.
     *
     * @param v New mass space interatia tensor.
     */
    set massSpaceInteriaTensor(v) {
      this._engine.wasm._wl_physx_component_set_massSpaceInertiaTensor(this._id, v[0], v[1], v[2]);
    }
    /**
     * Apply a force.
     *
     * [PhysX Manual - "Applying Forces and Torques"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)
     *
     * Has no effect, if the component is not active.
     *
     * @param f Force vector.
     * @param m Force mode, see {@link ForceMode}, default `Force`.
     * @param localForce Whether the force vector is in local space, default `false`.
     * @param p Position to apply force at, default is center of mass.
     * @param local Whether position is in local space, default `false`.
     */
    addForce(f2, m = ForceMode.Force, localForce = false, p, local = false) {
      const wasm = this._engine.wasm;
      if (!p) {
        wasm._wl_physx_component_addForce(this._id, f2[0], f2[1], f2[2], m, localForce);
        return;
      }
      wasm._wl_physx_component_addForceAt(this._id, f2[0], f2[1], f2[2], m, localForce, p[0], p[1], p[2], local);
    }
    /**
     * Apply torque.
     *
     * [PhysX Manual - "Applying Forces and Torques"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)
     *
     * Has no effect, if the component is not active.
     *
     * @param f Force vector.
     * @param m Force mode, see {@link ForceMode}, default `Force`.
     */
    addTorque(f2, m = ForceMode.Force) {
      this._engine.wasm._wl_physx_component_addTorque(this._id, f2[0], f2[1], f2[2], m);
    }
    /**
     * Add on collision callback.
     *
     * @param callback Function to call when this rigid body (un)collides with any other.
     *
     * ```js
     *  let rigidBody = this.object.getComponent('physx');
     *  rigidBody.onCollision(function(type, other) {
     *      // Ignore uncollides
     *      if(type == CollisionEventType.TouchLost) return;
     *
     *      // Take damage on collision with enemies
     *      if(other.object.name.startsWith('enemy-')) {
     *          this.applyDamage(10);
     *      }
     *  }.bind(this));
     * ```
     *
     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.
     */
    onCollision(callback) {
      return this.onCollisionWith(this, callback);
    }
    /**
     * Add filtered on collision callback.
     *
     * @param otherComp Component for which callbacks will
     *        be triggered. If you pass this component, the method is equivalent to.
     *        {@link PhysXComponent#onCollision}.
     * @param callback Function to call when this rigid body
     *        (un)collides with `otherComp`.
     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.
     */
    onCollisionWith(otherComp, callback) {
      const physics = this._engine.physics;
      physics._callbacks[this._id] = physics._callbacks[this._id] || [];
      physics._callbacks[this._id].push(callback);
      return this._engine.wasm._wl_physx_component_addCallback(this._id, otherComp._id || this._id);
    }
    /**
     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.
     *
     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.
     * @throws When the callback does not belong to the component.
     * @throws When the callback does not exist.
     */
    removeCollisionCallback(callbackId) {
      const physics = this._engine.physics;
      const r = this._engine.wasm._wl_physx_component_removeCallback(this._id, callbackId);
      if (r)
        physics._callbacks[this._id].splice(-r);
    }
  };
  /** @override */
  __publicField(PhysXComponent, "TypeName", "physx");
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "static", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "kinematic", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "gravity", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "simulate", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "allowSimulation", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "allowQuery", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "trigger", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "shape", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "shapeData", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "extents", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "staticFriction", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "dynamicFriction", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "bounciness", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "linearDamping", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "angularDamping", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "linearVelocity", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "angularVelocity", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "groupsMask", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "blocksMask", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "linearLockAxis", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "angularLockAxis", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "mass", null);
  var MeshIndexType;
  (function(MeshIndexType2) {
    MeshIndexType2[MeshIndexType2["UnsignedByte"] = 1] = "UnsignedByte";
    MeshIndexType2[MeshIndexType2["UnsignedShort"] = 2] = "UnsignedShort";
    MeshIndexType2[MeshIndexType2["UnsignedInt"] = 4] = "UnsignedInt";
  })(MeshIndexType || (MeshIndexType = {}));
  var MeshSkinningType;
  (function(MeshSkinningType2) {
    MeshSkinningType2[MeshSkinningType2["None"] = 0] = "None";
    MeshSkinningType2[MeshSkinningType2["FourJoints"] = 1] = "FourJoints";
    MeshSkinningType2[MeshSkinningType2["EightJoints"] = 2] = "EightJoints";
  })(MeshSkinningType || (MeshSkinningType = {}));
  var Mesh = class {
    /**
     * Index of the mesh in the manager.
     *
     * @hidden
     */
    _index = -1;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * Create a new instance.
     *
     * @param params Either a mesh index to wrap or set of parameters to create a new mesh.
     *    For more information, please have a look at the {@link MeshParameters} interface.
     */
    constructor(engine, params) {
      this._engine = engine ?? WL;
      this._index = -1;
      if (isNumber(params)) {
        this._index = params;
        return;
      }
      if (!params.vertexCount)
        throw new Error("Missing parameter 'vertexCount'");
      const wasm = this._engine.wasm;
      let indexData = 0;
      let indexType = 0;
      let indexDataSize = 0;
      if (params.indexData) {
        indexType = params.indexType || MeshIndexType.UnsignedShort;
        indexDataSize = params.indexData.length * indexType;
        indexData = wasm._malloc(indexDataSize);
        switch (indexType) {
          case MeshIndexType.UnsignedByte:
            wasm.HEAPU8.set(params.indexData, indexData);
            break;
          case MeshIndexType.UnsignedShort:
            wasm.HEAPU16.set(params.indexData, indexData >> 1);
            break;
          case MeshIndexType.UnsignedInt:
            wasm.HEAPU32.set(params.indexData, indexData >> 2);
            break;
        }
      }
      const { skinningType = MeshSkinningType.None } = params;
      this._index = wasm._wl_mesh_create(indexData, indexDataSize, indexType, params.vertexCount, skinningType);
    }
    /** Number of vertices in this mesh. */
    get vertexCount() {
      return this._engine.wasm._wl_mesh_get_vertexCount(this._index);
    }
    /** Index data (read-only) or `null` if the mesh is not indexed. */
    get indexData() {
      const wasm = this._engine.wasm;
      const tempMem = wasm._tempMem;
      const ptr = wasm._wl_mesh_get_indexData(this._index, tempMem, tempMem + 4);
      if (ptr === null)
        return null;
      const indexCount = wasm.HEAPU32[tempMem / 4];
      const indexSize = wasm.HEAPU32[tempMem / 4 + 1];
      switch (indexSize) {
        case MeshIndexType.UnsignedByte:
          return new Uint8Array(wasm.HEAPU8.buffer, ptr, indexCount);
        case MeshIndexType.UnsignedShort:
          return new Uint16Array(wasm.HEAPU16.buffer, ptr, indexCount);
        case MeshIndexType.UnsignedInt:
          return new Uint32Array(wasm.HEAPU32.buffer, ptr, indexCount);
      }
      return null;
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /**
     * Apply changes to {@link attribute | vertex attributes}.
     *
     * Uploads the updated vertex attributes to the GPU and updates the bounding
     * sphere to match the new vertex positions.
     *
     * Since this is an expensive operation, call it only once you have performed
     * all modifications on a mesh and avoid calling if you did not perform any
     * modifications at all.
     */
    update() {
      this._engine.wasm._wl_mesh_update(this._index);
    }
    getBoundingSphere(out = new Float32Array(4)) {
      const tempMemFloat = this._engine.wasm._tempMemFloat;
      this._engine.wasm._wl_mesh_get_boundingSphere(this._index, this._engine.wasm._tempMem);
      out[0] = tempMemFloat[0];
      out[1] = tempMemFloat[1];
      out[2] = tempMemFloat[2];
      out[3] = tempMemFloat[3];
      return out;
    }
    attribute(attr) {
      if (typeof attr != "number")
        throw new TypeError("Expected number, but got " + typeof attr);
      const tempMemUint32 = this._engine.wasm._tempMemUint32;
      this._engine.wasm._wl_mesh_get_attribute(this._index, attr, this._engine.wasm._tempMem);
      if (tempMemUint32[0] == 255)
        return null;
      const arraySize = tempMemUint32[5];
      return new MeshAttributeAccessor(this._engine, {
        attribute: tempMemUint32[0],
        offset: tempMemUint32[1],
        stride: tempMemUint32[2],
        formatSize: tempMemUint32[3],
        componentCount: tempMemUint32[4],
        /* The WASM API returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */
        arraySize: arraySize ? arraySize : 1,
        length: this.vertexCount,
        bufferType: attr !== MeshAttribute.JointId ? Float32Array : Uint16Array
      });
    }
    /**
     * Destroy and free the meshes memory.
     *
     * It is best practice to set the mesh variable to `null` after calling
     * destroy to prevent accidental use:
     *
     * ```js
     *   mesh.destroy();
     *   mesh = null;
     * ```
     *
     * Accessing the mesh after destruction behaves like accessing an empty
     * mesh.
     *
     * @since 0.9.0
     */
    destroy() {
      this._engine.wasm._wl_mesh_destroy(this._index);
    }
    /**
     * Checks equality by comparing whether the wrapped native mesh ids are
     * equal.
     *
     * @param otherMesh Mesh to check equality with.
     * @returns Whether this mesh equals the given mesh.
     *
     * @since 1.0.0
     */
    equals(otherMesh) {
      if (!otherMesh)
        return false;
      return this._index === otherMesh._index;
    }
  };
  var MeshAttributeAccessor = class {
    /** Max number of elements. */
    length = 0;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /** Attribute index. @hidden */
    _attribute = -1;
    /** Attribute offset. @hidden */
    _offset = 0;
    /** Attribute stride. @hidden */
    _stride = 0;
    /** Format size native enum. @hidden */
    _formatSize = 0;
    /** Number of components per vertex. @hidden */
    _componentCount = 0;
    /** Number of values per vertex. @hidden */
    _arraySize = 1;
    /**
     * Class to instantiate an ArrayBuffer to get/set values.
     */
    _bufferType;
    /**
     * Function to allocate temporary WASM memory. It is cached in the accessor to avoid
     * conditionals during get/set.
     */
    _tempBufferGetter;
    /**
     * Create a new instance.
     *
     * @note Please use {@link Mesh.attribute} to create a new instance.
     *
     * @param options Contains information about how to read the data.
     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.
     *
     * @hidden
     */
    constructor(engine, options) {
      this._engine = engine;
      const wasm = this._engine.wasm;
      this._attribute = options.attribute;
      this._offset = options.offset;
      this._stride = options.stride;
      this._formatSize = options.formatSize;
      this._componentCount = options.componentCount;
      this._arraySize = options.arraySize;
      this._bufferType = options.bufferType;
      this.length = options.length;
      this._tempBufferGetter = this._bufferType === Float32Array ? wasm.getTempBufferF32.bind(wasm) : wasm.getTempBufferU16.bind(wasm);
    }
    /**
     * Create a new TypedArray to hold this attribute's values.
     *
     * This method is useful to create a view to hold the data to
     * pass to {@link get} and {@link set}
     *
     * Example:
     *
     * ```js
     * const vertexCount = 4;
     * const positionAttribute = mesh.attribute(MeshAttributes.Position);
     *
     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.
     * const positions = positionAttribute.createArray(vertexCount);
     * ```
     *
     * @param count The number of **vertices** expected.
     * @returns A TypedArray with the appropriate format to access the data
     */
    createArray(count = 1) {
      count = count > this.length ? this.length : count;
      return new this._bufferType(count * this._componentCount * this._arraySize);
    }
    get(index, out = this.createArray()) {
      if (out.length % this._componentCount !== 0) {
        throw new Error(`out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`);
      }
      const dest = this._tempBufferGetter(out.length);
      const elementSize = this._bufferType.BYTES_PER_ELEMENT;
      const destSize = elementSize * out.length;
      const srcFormatSize = this._formatSize * this._arraySize;
      const destFormatSize = this._componentCount * elementSize * this._arraySize;
      this._engine.wasm._wl_mesh_get_attribute_values(this._attribute, srcFormatSize, this._offset + index * this._stride, this._stride, destFormatSize, dest.byteOffset, destSize);
      for (let i = 0; i < out.length; ++i)
        out[i] = dest[i];
      return out;
    }
    /**
     * Set attribute element.
     *
     * @param i Index
     * @param v Value to set the element to
     *
     * `v.length` needs to be a multiple of the attributes component count, see
     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be
     * filled with the next n attribute elements, which can reduce overhead
     * of this call.
     *
     * @returns Reference to self (for method chaining)
     */
    set(i, v) {
      if (v.length % this._componentCount !== 0)
        throw new Error(`out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`);
      const elementSize = this._bufferType.BYTES_PER_ELEMENT;
      const srcSize = elementSize * v.length;
      const srcFormatSize = this._componentCount * elementSize * this._arraySize;
      const destFormatSize = this._formatSize * this._arraySize;
      const wasm = this._engine.wasm;
      if (v.buffer != wasm.HEAPU8.buffer) {
        const dest = this._tempBufferGetter(v.length);
        dest.set(v);
        v = dest;
      }
      wasm._wl_mesh_set_attribute_values(this._attribute, srcFormatSize, v.byteOffset, srcSize, destFormatSize, this._offset + i * this._stride, this._stride);
      return this;
    }
  };
  var Material = class {
    /**
     * Index of this material in the manager.
     *
     * @hidden
     */
    _index;
    /**
     * Material definition index in the scene.
     *
     * @hidden
     */
    _definition;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * Create a new Material.
     *
     * @note Creating material is expensive. Please use {@link Material#clone} to clone a material.
     * @note Do not use this constructor directly with an index, this is reserved for internal purposes.
     */
    constructor(engine, params) {
      this._engine = engine;
      if (typeof params !== "number") {
        if (!params?.pipeline)
          throw new Error("Missing parameter 'pipeline'");
        const wasm = this._engine.wasm;
        const pipeline = params.pipeline;
        this._index = wasm._wl_material_create(wasm.tempUTF8(pipeline));
        if (this._index < 0)
          throw new Error(`No such pipeline '${pipeline}'`);
      } else {
        this._index = params;
      }
      this._definition = this._engine.wasm._wl_material_get_definition(this._index);
      if (!this._engine.wasm._materialDefinitions[this._definition])
        throw new Error(`Material Definition ${this._definition} not found for material with index ${this._index}`);
      return new Proxy(this, {
        get(target, prop) {
          const wasm = engine.wasm;
          const definition = wasm._materialDefinitions[target._definition];
          const param = definition.get(prop);
          if (!param)
            return target[prop];
          if (wasm._wl_material_get_param_value(target._index, param.index, wasm._tempMem)) {
            const type = param.type;
            switch (type.type) {
              case MaterialParamType.UnsignedInt:
                return type.componentCount == 1 ? wasm._tempMemUint32[0] : new Uint32Array(wasm.HEAPU32.buffer, wasm._tempMem, type.componentCount);
              case MaterialParamType.Int:
                return type.componentCount == 1 ? wasm._tempMemInt[0] : new Int32Array(wasm.HEAP32.buffer, wasm._tempMem, type.componentCount);
              case MaterialParamType.Float:
                return type.componentCount == 1 ? wasm._tempMemFloat[0] : new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, type.componentCount);
              case MaterialParamType.Sampler:
                return engine.textures.wrap(wasm._tempMemInt[0]);
              default:
                throw new Error(`Invalid type ${type.type} on parameter ${param.index} for material ${target._index}`);
            }
          }
        },
        set(target, prop, value) {
          const wasm = engine.wasm;
          const definition = wasm._materialDefinitions[target._definition];
          const param = definition.get(prop);
          if (!param) {
            target[prop] = value;
            return true;
          }
          const type = param.type;
          switch (type.type) {
            case MaterialParamType.UnsignedInt:
            case MaterialParamType.Int:
            case MaterialParamType.Sampler:
              const v = value.id ?? value;
              wasm._wl_material_set_param_value_uint(target._index, param.index, v);
              break;
            case MaterialParamType.Float:
              let count = 1;
              if (typeof value === "number") {
                wasm._tempMemFloat[0] = value;
              } else {
                count = value.length;
                for (let i = 0; i < count; ++i)
                  wasm._tempMemFloat[i] = value[i];
              }
              wasm._wl_material_set_param_value_float(target._index, param.index, wasm._tempMem, count);
              break;
            case MaterialParamType.Font:
              throw new Error("Setting font properties is currently unsupported.");
          }
          return true;
        }
      });
    }
    /** @deprecated Use {@link #pipeline} instead. */
    get shader() {
      return this.pipeline;
    }
    /** Name of the pipeline used by this material. */
    get pipeline() {
      const wasm = this._engine.wasm;
      return wasm.UTF8ToString(wasm._wl_material_get_pipeline(this._index));
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /**
     * Create a copy of the underlying native material.
     *
     * @returns Material clone.
     */
    clone() {
      const id = this._engine.wasm._wl_material_clone(this._index);
      return id > 0 ? new Material(this._engine, id) : null;
    }
    /**
     * Checks equality by comparing whether the wrapped native material ids are
     * equal.
     *
     * @param otherMaterial Material to check equality with.
     * @returns Whether this material equals the given material.
     *
     * @since 1.0.0
     */
    equals(otherMaterial) {
      if (!otherMaterial)
        return false;
      return this._index === otherMaterial._index;
    }
    /**
     * Wrap a native material index.
     *
     * @param engine Engine instance.
     * @param index The index.
     * @returns Material instance or `null` if index <= 0.
     *
     * @deprecated Please use `new Material()` instead.
     */
    static wrap(engine, index) {
      return index > 0 ? new Material(engine, index) : null;
    }
  };
  var temp2d = null;
  var Texture = class {
    /** Wonderland Engine instance. @hidden */
    _engine;
    /** Index in the manager. @hidden */
    _id = 0;
    /** HTML image index. @hidden */
    _imageIndex = null;
    /**
     * @param engine The engine instance
     * @param param HTML media element to create texture from or texture id to wrap.
     */
    constructor(engine, param) {
      this._engine = engine ?? WL;
      const wasm = engine.wasm;
      if (param instanceof HTMLImageElement || param instanceof HTMLVideoElement || param instanceof HTMLCanvasElement) {
        const index = wasm._images.length;
        wasm._images.push(param);
        this._imageIndex = index;
        this._id = this._engine.wasm._wl_renderer_addImage(index);
      } else {
        this._id = param;
      }
      this._engine.textures._set(this);
    }
    /** Whether this texture is valid. */
    get valid() {
      return this._id >= 0;
    }
    /** Index in this manager. */
    get id() {
      return this._id;
    }
    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */
    update() {
      if (!this.valid || this._imageIndex === null)
        return;
      this._engine.wasm._wl_renderer_updateImage(this._id, this._imageIndex);
    }
    /** Width of the texture. */
    get width() {
      return this._engine.wasm._wl_texture_width(this._id);
    }
    /** Height of the texture. */
    get height() {
      return this._engine.wasm._wl_texture_height(this._id);
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /**
     * Update a subrange on the texture to match the HTML element (e.g. reflect the current frame of a video).
     *
     * Usage:
     *
     * ```js
     * // Copies rectangle of pixel starting from (10, 20)
     * texture.updateSubImage(10, 20, 600, 400);
     * ```
     *
     * @param x x offset
     * @param y y offset
     * @param w width
     * @param h height
     */
    updateSubImage(x, y, w, h) {
      if (!this.valid || this._imageIndex === null)
        return;
      if (!temp2d) {
        const canvas2 = document.createElement("canvas");
        const ctx = canvas2.getContext("2d");
        if (!ctx) {
          throw new Error("Texture.updateSubImage(): Failed to obtain CanvasRenderingContext2D.");
        }
        temp2d = { canvas: canvas2, ctx };
      }
      const wasm = this._engine.wasm;
      const img = wasm._images[this._imageIndex];
      if (!img)
        return;
      temp2d.canvas.width = w;
      temp2d.canvas.height = h;
      temp2d.ctx.drawImage(img, x, y, w, h, 0, 0, w, h);
      const yOffset = (img.videoHeight ?? img.height) - y - h;
      wasm._images[this._imageIndex] = temp2d.canvas;
      wasm._wl_renderer_updateImage(this._id, this._imageIndex, x, yOffset);
      wasm._images[this._imageIndex] = img;
    }
    /**
     * Destroy and free the texture's texture altas space and memory.
     *
     * It is best practice to set the texture variable to `null` after calling
     * destroy to prevent accidental use of the invalid texture:
     *
     * ```js
     *   texture.destroy();
     *   texture = null;
     * ```
     *
     * @since 0.9.0
     */
    destroy() {
      this.engine.textures._destroy(this);
      this._id = -1;
      this._imageIndex = null;
    }
    /**
     * Checks equality by comparing whether the wrapped native texture ids are
     * equal.
     *
     * @param otherTexture Texture to check equality with.
     * @returns Whether this texture equals the given texture.
     *
     * @since 1.0.0
     */
    equals(otherTexture) {
      if (!otherTexture)
        return false;
      return this._id === otherTexture._id;
    }
  };
  var Animation = class {
    /** Index of the mesh in the manager. @hidden */
    _index;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * @param index Index in the manager
     */
    constructor(engine = WL, index) {
      this._engine = engine;
      this._index = index;
    }
    /** Duration of this animation. */
    get duration() {
      return this._engine.wasm._wl_animation_get_duration(this._index);
    }
    /** Number of tracks in this animation. */
    get trackCount() {
      return this._engine.wasm._wl_animation_get_trackCount(this._index);
    }
    /**
     * Clone this animation retargeted to a new set of objects.
     *
     * The clone shares most of the data with the original and is therefore
     * light-weight.
     *
     * **Experimental:** This API might change in upcoming versions.
     *
     * If retargeting to {@link Skin}, the join names will be used to determine a mapping
     * from the previous skin to the new skin. The source skin will be retrieved from
     * the first track in the animation that targets a joint.
     *
     * @param newTargets New targets per track. Expected to have
     *      {@link Animation#trackCount} elements or to be a {@link Skin}.
     * @returns The retargeted clone of this animation.
     */
    retarget(newTargets) {
      const wasm = this._engine.wasm;
      if (newTargets instanceof Skin) {
        const animId2 = wasm._wl_animation_retargetToSkin(this._index, newTargets._index);
        return new Animation(this._engine, animId2);
      }
      if (newTargets.length != this.trackCount) {
        throw Error("Expected " + this.trackCount.toString() + " targets, but got " + newTargets.length.toString());
      }
      const ptr = wasm._malloc(2 * newTargets.length);
      for (let i = 0; i < newTargets.length; ++i) {
        wasm.HEAPU16[ptr >> 1 + i] = newTargets[i].objectId;
      }
      const animId = wasm._wl_animation_retarget(this._index, ptr);
      wasm._free(ptr);
      return new Animation(this._engine, animId);
    }
    /**
     * Checks equality by comparing whether the wrapped native animation ids
     * are equal.
     *
     * @param otherAnimation Animation to check equality with.
     * @returns Whether this animation equals the given animation.
     *
     * @since 1.0.0
     */
    equals(otherAnimation) {
      if (!otherAnimation)
        return false;
      return this._index === otherAnimation._index;
    }
  };
  var Skin = class {
    /**
     * Index of the skin in the manager.
     * @hidden
     */
    _index;
    /** Wonderland Engine instance. @hidden */
    _engine;
    constructor(engine, index) {
      this._engine = engine;
      this._index = index;
    }
    /** Amount of joints in this skin. */
    get jointCount() {
      return this._engine.wasm._wl_skin_get_joint_count(this._index);
    }
    /** Joints object ids for this skin */
    get jointIds() {
      const wasm = this._engine.wasm;
      return new Uint16Array(wasm.HEAPU16.buffer, wasm._wl_skin_joint_ids(this._index), this.jointCount);
    }
    /**
     * Dual quaternions in a flat array of size 8 times {@link jointCount}.
     *
     * Inverse bind transforms of the skin.
     */
    get inverseBindTransforms() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_skin_inverse_bind_transforms(this._index), 8 * this.jointCount);
    }
    /**
     * Vectors in a flat array of size 3 times {@link jointCount}.
     *
     * Inverse bind scalings of the skin.
     */
    get inverseBindScalings() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_skin_inverse_bind_scalings(this._index), 3 * this.jointCount);
    }
    /**
     * Checks equality by comparing whether the wrapped native skin ids are
     * equal.
     *
     * @param otherSkin Skin to check equality with.
     * @returns Whether this skin equals the given skin.
     *
     * @since 1.0.0
     */
    equals(otherSkin) {
      if (!otherSkin)
        return false;
      return this._index === otherSkin._index;
    }
  };

  // node_modules/@wonderlandengine/api/dist/wasm.js
  var _componentDefaults = /* @__PURE__ */ new Map([
    [Type.Bool, false],
    [Type.Int, 0],
    [Type.Float, 0],
    [Type.String, ""],
    [Type.Enum, void 0],
    [Type.Object, null],
    [Type.Mesh, null],
    [Type.Texture, null],
    [Type.Material, null],
    [Type.Animation, null],
    [Type.Skin, null],
    [Type.Color, [0, 0, 0, 1]]
  ]);

  // node_modules/@sorskoot/wonderland-components/dist/components/flipbook.js
  var __decorate2 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var DynamicTextureCache = class {
    textures;
    engine;
    constructor(engine) {
      this.textures = {};
      this.engine = engine;
    }
    loadTextures(url, columns, rows) {
      if (!this.textures.hasOwnProperty(url)) {
        this.textures[url] = new Promise((resolve, reject) => {
          let image = new Image();
          let textures = [];
          image.src = url;
          image.onload = () => {
            let canvas2 = document.createElement("canvas");
            let context2 = canvas2.getContext("2d");
            if (context2 == null)
              reject("Could not get context");
            canvas2.width = image.width;
            canvas2.height = image.height;
            context2.drawImage(image, 0, 0);
            let spriteWidth = image.width / columns;
            let spriteHeight = image.height / rows;
            for (let y = 0; y < rows; y++) {
              for (let x = 0; x < columns; x++) {
                let pc = this.copyPartOfCanvas(canvas2, x * spriteWidth, y * spriteHeight, spriteWidth, spriteHeight);
                let texturePc = new Texture(this.engine, pc);
                textures.push(texturePc);
              }
            }
            resolve(textures);
          };
        });
      }
      return this.textures[url];
    }
    copyPartOfCanvas(canvas2, x, y, width, height) {
      let copy6 = document.createElement("canvas");
      copy6.width = width;
      copy6.height = height;
      let ctx2 = copy6.getContext("2d");
      ctx2.drawImage(canvas2, x, y, width, height, 0, 0, width, height);
      return copy6;
    }
  };
  var textureCache;
  var Flipbook = class extends Component {
    base;
    url = "";
    urlEmissive = "";
    columns = 4;
    rows = 4;
    speed = 8;
    textures = [];
    loaded = false;
    index = 0;
    init() {
      if (!textureCache) {
        textureCache = new DynamicTextureCache(this.engine);
      }
      let texturesPromises = [];
      texturesPromises.push(textureCache.loadTextures(this.url, this.columns, this.rows));
      if (this.urlEmissive) {
        texturesPromises.push(textureCache.loadTextures(this.urlEmissive, this.columns, this.rows));
      }
      Promise.all(texturesPromises).then((tex) => {
        this.textures = [];
        if (this.urlEmissive) {
          for (let i = 0; i < tex[0].length; i++) {
            this.textures.push(this.createMaterial(this.base, tex[0][i], tex[1][i]));
          }
        } else {
          for (let i = 0; i < tex[0].length; i++) {
            this.textures.push(this.createMaterial(this.base, tex[0][i]));
          }
        }
        this.loaded = true;
        this.index = Math.floor(Math.random() * this.textures.length);
      });
    }
    createMaterial(base, texture, emissiveTexture = null) {
      const mat = base.clone();
      if (!mat)
        throw new Error("Could not clone material");
      if (mat.pipeline == "Flat Opaque Textured" || mat.pipeline.startsWith("FlatSorskoot")) {
        const flatMat = mat;
        flatMat.flatTexture = texture;
        if (mat.pipeline == "FlatSorskoot Emissive") {
          flatMat.flatTexture = texture;
          if (emissiveTexture) {
            flatMat.emissiveTexture = emissiveTexture;
          }
        }
      } else {
        console.error(`Pipeline ${mat.pipeline} not supported by flipbook`);
      }
      return mat;
    }
    mat = null;
    t = 0;
    start() {
      this.mat = this.object.getComponent(MeshComponent);
      this.t = Math.random() * this.speed;
    }
    previousIndex = -1;
    update(dt) {
      if (!this.loaded)
        return;
      this.t += dt * this.speed;
      this.index = ~~this.t % this.textures.length;
      if (this.textures && this.textures.length && this.previousIndex != this.index && this.mat) {
        this.previousIndex = this.index;
        this.mat.material = this.textures[this.index];
      }
    }
  };
  __publicField(Flipbook, "TypeName", "flipbook");
  __decorate2([
    property.material()
  ], Flipbook.prototype, "base", void 0);
  __decorate2([
    property.string("")
  ], Flipbook.prototype, "url", void 0);
  __decorate2([
    property.string("")
  ], Flipbook.prototype, "urlEmissive", void 0);
  __decorate2([
    property.int(4)
  ], Flipbook.prototype, "columns", void 0);
  __decorate2([
    property.int(4)
  ], Flipbook.prototype, "rows", void 0);
  __decorate2([
    property.float(8)
  ], Flipbook.prototype, "speed", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/prefab.js
  var __decorate3 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var Prefab = class extends Component {
    name;
  };
  __publicField(Prefab, "TypeName", "prefab");
  __decorate3([
    property.string()
  ], Prefab.prototype, "name", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/prefab-storage.js
  var PrefabStorage = class extends Component {
    prefabs = {};
    start() {
      let children = this.object.children;
      for (let i = 0; i < children.length; i++) {
        let child = children[i];
        let childPrefab = child.getComponent(Prefab);
        if (childPrefab) {
          this.prefabs[childPrefab.name] = child;
          child.setPositionWorld([-1e3, -1e3, -1e3]);
        }
      }
    }
    /**
     * Instantiate a prefab.
     *
     * @param {string} prefabName Name of the prefab to instantiate.
     * @param {Object3D} parentObject The object to parent the prefab to after instantiation.
     * @returns {Object3D|undefined} The root of the instantiated prefab.
     */
    instantiate(prefabName, parentObject) {
      let prefab = this.prefabs[prefabName];
      if (!prefab) {
        console.error("trying to create " + prefabName + " but that is not a registerd prefab");
        return;
      }
      let obj = this.engine.scene.addObject(parentObject);
      obj.name = prefabName;
      obj.scaleLocal(prefab.getScalingLocal());
      obj.setTransformLocal(prefab.getTransformLocal());
      var prefabMesh = prefab.getComponent(MeshComponent);
      if (prefabMesh) {
        let newMesh = obj.addComponent(MeshComponent);
        if (!newMesh) {
          console.error("mesh component could not be added to object");
          return;
        }
        newMesh.mesh = prefabMesh.mesh;
        newMesh.material = prefabMesh.material;
      }
      var prefabCollision = prefab.getComponent(CollisionComponent);
      if (prefabCollision) {
        let newCollision = obj.addComponent(CollisionComponent);
        if (!newCollision) {
          console.error("collision component could not be added to object");
          return;
        }
        newCollision.collider = prefabCollision.collider;
        newCollision.extents = prefabCollision.extents;
        newCollision.group = prefabCollision.group;
      }
      obj.setDirty();
      return obj;
    }
  };
  __publicField(PrefabStorage, "TypeName", "prefab-storage");

  // node_modules/@sorskoot/wonderland-components/dist/components/shootBase.js
  var __decorate4 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var handedness = ["left", "right"];
  var ShootBase = class extends Component {
    haptics = true;
    handedness = 0;
    initialized = false;
    start() {
      this.initialized = false;
      this.engine.onXRSessionStart.add((session) => {
        if (this.initialized)
          return;
        session.addEventListener("select", (e) => {
          if (!this.active)
            return;
          if (e.inputSource.handedness === handedness[this.handedness]) {
            if (this.haptics) {
              this.pulse(e.inputSource.gamepad);
            }
            this.shoot(this.object.getPositionWorld(), this.object.getRotationWorld());
          }
        });
        this.initialized = true;
      });
    }
    pulse(gamepad) {
      var actuator;
      if (!gamepad || !gamepad.hapticActuators) {
        return;
      }
      actuator = gamepad.hapticActuators[0];
      if (!actuator)
        return;
      actuator.pulse(1, 100);
    }
    shoot(transform, rotation) {
    }
  };
  __publicField(ShootBase, "TypeName", "shoot-base");
  __decorate4([
    property.bool(true)
  ], ShootBase.prototype, "haptics", void 0);
  __decorate4([
    property.enum(["Left", "Right"])
  ], ShootBase.prototype, "handedness", void 0);

  // node_modules/gl-matrix/esm/common.js
  var EPSILON = 1e-6;
  var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var RANDOM = Math.random;
  var degree = Math.PI / 180;
  if (!Math.hypot)
    Math.hypot = function() {
      var y = 0, i = arguments.length;
      while (i--) {
        y += arguments[i] * arguments[i];
      }
      return Math.sqrt(y);
    };

  // node_modules/gl-matrix/esm/mat3.js
  function create() {
    var out = new ARRAY_TYPE(9);
    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }

  // node_modules/gl-matrix/esm/mat4.js
  var mat4_exports = {};
  __export(mat4_exports, {
    add: () => add,
    adjoint: () => adjoint,
    clone: () => clone,
    copy: () => copy,
    create: () => create2,
    determinant: () => determinant,
    equals: () => equals,
    exactEquals: () => exactEquals,
    frob: () => frob,
    fromQuat: () => fromQuat,
    fromQuat2: () => fromQuat2,
    fromRotation: () => fromRotation,
    fromRotationTranslation: () => fromRotationTranslation,
    fromRotationTranslationScale: () => fromRotationTranslationScale,
    fromRotationTranslationScaleOrigin: () => fromRotationTranslationScaleOrigin,
    fromScaling: () => fromScaling,
    fromTranslation: () => fromTranslation,
    fromValues: () => fromValues,
    fromXRotation: () => fromXRotation,
    fromYRotation: () => fromYRotation,
    fromZRotation: () => fromZRotation,
    frustum: () => frustum,
    getRotation: () => getRotation,
    getScaling: () => getScaling,
    getTranslation: () => getTranslation,
    identity: () => identity,
    invert: () => invert,
    lookAt: () => lookAt,
    mul: () => mul,
    multiply: () => multiply,
    multiplyScalar: () => multiplyScalar,
    multiplyScalarAndAdd: () => multiplyScalarAndAdd,
    ortho: () => ortho,
    orthoNO: () => orthoNO,
    orthoZO: () => orthoZO,
    perspective: () => perspective,
    perspectiveFromFieldOfView: () => perspectiveFromFieldOfView,
    perspectiveNO: () => perspectiveNO,
    perspectiveZO: () => perspectiveZO,
    rotate: () => rotate,
    rotateX: () => rotateX,
    rotateY: () => rotateY,
    rotateZ: () => rotateZ,
    scale: () => scale,
    set: () => set,
    str: () => str,
    sub: () => sub,
    subtract: () => subtract,
    targetTo: () => targetTo,
    translate: () => translate,
    transpose: () => transpose
  });
  function create2() {
    var out = new ARRAY_TYPE(16);
    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  function clone(a) {
    var out = new ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a01 = a[1], a02 = a[2], a03 = a[3];
      var a12 = a[6], a13 = a[7];
      var a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }
    return out;
  }
  function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
  }
  function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  }
  function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
  }
  function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len4 = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;
    if (len4 < EPSILON) {
      return null;
    }
    len4 = 1 / len4;
    x *= len4;
    y *= len4;
    z *= len4;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    return out;
  }
  function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  }
  function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  }
  function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    if (a !== out) {
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  }
  function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotation(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len4 = Math.hypot(x, y, z);
    var s, c, t;
    if (len4 < EPSILON) {
      return null;
    }
    len4 = 1 / len4;
    x *= len4;
    y *= len4;
    z *= len4;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotationTranslation(out, q2, v) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromQuat2(out, a) {
    var translation = new ARRAY_TYPE(3);
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw;
    if (magnitude > 0) {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
  }
  function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  function getRotation(out, mat) {
    var scaling = new ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;
    if (trace > 0) {
      S = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }
    return out;
  }
  function fromRotationTranslationScale(out, q2, v, s) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromRotationTranslationScaleOrigin(out, q2, v, s, o) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  function fromQuat(out, q2) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO(out, fovy, aspect, near, far) {
    var f2 = 1 / Math.tan(fovy / 2), nf;
    out[0] = f2 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f2;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective = perspectiveNO;
  function perspectiveZO(out, fovy, aspect, near, far) {
    var f2 = 1 / Math.tan(fovy / 2), nf;
    out[0] = f2 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f2;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = far * nf;
      out[14] = far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -near;
    }
    return out;
  }
  function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    var xScale = 2 / (leftTan + rightTan);
    var yScale = 2 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = yScale;
    out[6] = 0;
    out[7] = 0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near / (near - far);
    out[15] = 0;
    return out;
  }
  function orthoNO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho = orthoNO;
  function orthoZO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
  }
  function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len4;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];
    if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
      return identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len4 = 1 / Math.hypot(z0, z1, z2);
    z0 *= len4;
    z1 *= len4;
    z2 *= len4;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len4 = Math.hypot(x0, x1, x2);
    if (!len4) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len4 = 1 / len4;
      x0 *= len4;
      x1 *= len4;
      x2 *= len4;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len4 = Math.hypot(y0, y1, y2);
    if (!len4) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len4 = 1 / len4;
      y0 *= len4;
      y1 *= len4;
      y2 *= len4;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  }
  function targetTo(out, eye, target, up) {
    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
    var len4 = z0 * z0 + z1 * z1 + z2 * z2;
    if (len4 > 0) {
      len4 = 1 / Math.sqrt(len4);
      z0 *= len4;
      z1 *= len4;
      z2 *= len4;
    }
    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
    len4 = x0 * x0 + x1 * x1 + x2 * x2;
    if (len4 > 0) {
      len4 = 1 / Math.sqrt(len4);
      x0 *= len4;
      x1 *= len4;
      x2 *= len4;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale6) {
    out[0] = a[0] + b[0] * scale6;
    out[1] = a[1] + b[1] * scale6;
    out[2] = a[2] + b[2] * scale6;
    out[3] = a[3] + b[3] * scale6;
    out[4] = a[4] + b[4] * scale6;
    out[5] = a[5] + b[5] * scale6;
    out[6] = a[6] + b[6] * scale6;
    out[7] = a[7] + b[7] * scale6;
    out[8] = a[8] + b[8] * scale6;
    out[9] = a[9] + b[9] * scale6;
    out[10] = a[10] + b[10] * scale6;
    out[11] = a[11] + b[11] * scale6;
    out[12] = a[12] + b[12] * scale6;
    out[13] = a[13] + b[13] * scale6;
    out[14] = a[14] + b[14] * scale6;
    out[15] = a[15] + b[15] * scale6;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
  }
  var mul = multiply;
  var sub = subtract;

  // node_modules/gl-matrix/esm/quat.js
  var quat_exports = {};
  __export(quat_exports, {
    add: () => add4,
    calculateW: () => calculateW,
    clone: () => clone4,
    conjugate: () => conjugate,
    copy: () => copy4,
    create: () => create5,
    dot: () => dot3,
    equals: () => equals4,
    exactEquals: () => exactEquals4,
    exp: () => exp,
    fromEuler: () => fromEuler,
    fromMat3: () => fromMat3,
    fromValues: () => fromValues4,
    getAngle: () => getAngle,
    getAxisAngle: () => getAxisAngle,
    identity: () => identity2,
    invert: () => invert2,
    len: () => len2,
    length: () => length3,
    lerp: () => lerp3,
    ln: () => ln,
    mul: () => mul3,
    multiply: () => multiply3,
    normalize: () => normalize3,
    pow: () => pow,
    random: () => random2,
    rotateX: () => rotateX3,
    rotateY: () => rotateY3,
    rotateZ: () => rotateZ3,
    rotationTo: () => rotationTo,
    scale: () => scale4,
    set: () => set4,
    setAxes: () => setAxes,
    setAxisAngle: () => setAxisAngle,
    slerp: () => slerp,
    sqlerp: () => sqlerp,
    sqrLen: () => sqrLen2,
    squaredLength: () => squaredLength3,
    str: () => str3
  });

  // node_modules/gl-matrix/esm/vec3.js
  var vec3_exports = {};
  __export(vec3_exports, {
    add: () => add2,
    angle: () => angle,
    bezier: () => bezier,
    ceil: () => ceil,
    clone: () => clone2,
    copy: () => copy2,
    create: () => create3,
    cross: () => cross,
    dist: () => dist,
    distance: () => distance,
    div: () => div,
    divide: () => divide,
    dot: () => dot,
    equals: () => equals2,
    exactEquals: () => exactEquals2,
    floor: () => floor,
    forEach: () => forEach,
    fromValues: () => fromValues2,
    hermite: () => hermite,
    inverse: () => inverse,
    len: () => len,
    length: () => length,
    lerp: () => lerp,
    max: () => max,
    min: () => min,
    mul: () => mul2,
    multiply: () => multiply2,
    negate: () => negate,
    normalize: () => normalize,
    random: () => random,
    rotateX: () => rotateX2,
    rotateY: () => rotateY2,
    rotateZ: () => rotateZ2,
    round: () => round,
    scale: () => scale2,
    scaleAndAdd: () => scaleAndAdd,
    set: () => set2,
    sqrDist: () => sqrDist,
    sqrLen: () => sqrLen,
    squaredDistance: () => squaredDistance,
    squaredLength: () => squaredLength,
    str: () => str2,
    sub: () => sub2,
    subtract: () => subtract2,
    transformMat3: () => transformMat3,
    transformMat4: () => transformMat4,
    transformQuat: () => transformQuat,
    zero: () => zero
  });
  function create3() {
    var out = new ARRAY_TYPE(3);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone2(a) {
    var out = new ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
  }
  function fromValues2(x, y, z) {
    var out = new ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function copy2(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function set2(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function add2(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  function multiply2(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
  }
  function scale2(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale6) {
    out[0] = a[0] + b[0] * scale6;
    out[1] = a[1] + b[1] * scale6;
    out[2] = a[2] + b[2] * scale6;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return Math.hypot(x, y, z);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return x * x + y * y + z * z;
  }
  function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return x * x + y * y + z * z;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    out[2] = 1 / a[2];
    return out;
  }
  function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len4 = x * x + y * y + z * z;
    if (len4 > 0) {
      len4 = 1 / Math.sqrt(len4);
    }
    out[0] = a[0] * len4;
    out[1] = a[1] * len4;
    out[2] = a[2] * len4;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2];
    var bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  }
  function hermite(out, a, b, c, d, t) {
    var factorTimes2 = t * t;
    var factor1 = factorTimes2 * (2 * t - 3) + 1;
    var factor2 = factorTimes2 * (t - 2) + t;
    var factor3 = factorTimes2 * (t - 1);
    var factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function bezier(out, a, b, c, d, t) {
    var inverseFactor = 1 - t;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t * t;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function random(out, scale6) {
    scale6 = scale6 || 1;
    var r = RANDOM() * 2 * Math.PI;
    var z = RANDOM() * 2 - 1;
    var zScale = Math.sqrt(1 - z * z) * scale6;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale6;
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
  }
  function transformQuat(out, a, q2) {
    var qx = q2[0], qy = q2[1], qz = q2[2], qw = q2[3];
    var x = a[0], y = a[1], z = a[2];
    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
    var w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
  }
  function rotateX2(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateY2(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateZ2(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2];
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function angle(a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str2(a) {
    return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
  }
  function exactEquals2(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
  }
  function equals2(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
  }
  var sub2 = subtract2;
  var mul2 = multiply2;
  var div = divide;
  var dist = distance;
  var sqrDist = squaredDistance;
  var len = length;
  var sqrLen = squaredLength;
  var forEach = function() {
    var vec = create3();
    return function(a, stride, offset2, count, fn, arg) {
      var i, l2;
      if (!stride) {
        stride = 3;
      }
      if (!offset2) {
        offset2 = 0;
      }
      if (count) {
        l2 = Math.min(count * stride + offset2, a.length);
      } else {
        l2 = a.length;
      }
      for (i = offset2; i < l2; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }
      return a;
    };
  }();

  // node_modules/gl-matrix/esm/vec4.js
  function create4() {
    var out = new ARRAY_TYPE(4);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function clone3(a) {
    var out = new ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function fromValues3(x, y, z, w) {
    var out = new ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function copy3(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function set3(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function add3(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  }
  function scale3(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  }
  function length2(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return Math.hypot(x, y, z, w);
  }
  function squaredLength2(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return x * x + y * y + z * z + w * w;
  }
  function normalize2(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len4 = x * x + y * y + z * z + w * w;
    if (len4 > 0) {
      len4 = 1 / Math.sqrt(len4);
    }
    out[0] = x * len4;
    out[1] = y * len4;
    out[2] = z * len4;
    out[3] = w * len4;
    return out;
  }
  function dot2(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  function lerp2(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
  }
  function exactEquals3(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }
  function equals3(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
  }
  var forEach2 = function() {
    var vec = create4();
    return function(a, stride, offset2, count, fn, arg) {
      var i, l2;
      if (!stride) {
        stride = 4;
      }
      if (!offset2) {
        offset2 = 0;
      }
      if (count) {
        l2 = Math.min(count * stride + offset2, a.length);
      } else {
        l2 = a.length;
      }
      for (i = offset2; i < l2; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }
      return a;
    };
  }();

  // node_modules/gl-matrix/esm/quat.js
  function create5() {
    var out = new ARRAY_TYPE(4);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity2(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function getAxisAngle(out_axis, q2) {
    var rad = Math.acos(q2[3]) * 2;
    var s = Math.sin(rad / 2);
    if (s > EPSILON) {
      out_axis[0] = q2[0] / s;
      out_axis[1] = q2[1] / s;
      out_axis[2] = q2[2] / s;
    } else {
      out_axis[0] = 1;
      out_axis[1] = 0;
      out_axis[2] = 0;
    }
    return rad;
  }
  function getAngle(a, b) {
    var dotproduct = dot3(a, b);
    return Math.acos(2 * dotproduct * dotproduct - 1);
  }
  function multiply3(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX3(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY3(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ3(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW(out, a) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
    return out;
  }
  function exp(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var et = Math.exp(w);
    var s = r > 0 ? et * Math.sin(r) / r : 0;
    out[0] = x * s;
    out[1] = y * s;
    out[2] = z * s;
    out[3] = et * Math.cos(r);
    return out;
  }
  function ln(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var t = r > 0 ? Math.atan2(r, w) / r : 0;
    out[0] = x * t;
    out[1] = y * t;
    out[2] = z * t;
    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
    return out;
  }
  function pow(out, a, b) {
    ln(out, a);
    scale4(out, out, b);
    exp(out, out);
    return out;
  }
  function slerp(out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    var omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function random2(out) {
    var u1 = RANDOM();
    var u2 = RANDOM();
    var u3 = RANDOM();
    var sqrt1MinusU1 = Math.sqrt(1 - u1);
    var sqrtU1 = Math.sqrt(u1);
    out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u2);
    out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u2);
    out[2] = sqrtU1 * Math.sin(2 * Math.PI * u3);
    out[3] = sqrtU1 * Math.cos(2 * Math.PI * u3);
    return out;
  }
  function invert2(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var dot5 = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
    var invDot = dot5 ? 1 / dot5 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
  }
  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  }
  function fromMat3(out, m) {
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      var i = 0;
      if (m[4] > m[0])
        i = 1;
      if (m[8] > m[i * 3 + i])
        i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
  }
  function fromEuler(out, x, y, z) {
    var halfToRad = 0.5 * Math.PI / 180;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;
    var sx = Math.sin(x);
    var cx = Math.cos(x);
    var sy = Math.sin(y);
    var cy = Math.cos(y);
    var sz = Math.sin(z);
    var cz = Math.cos(z);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function str3(a) {
    return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  var clone4 = clone3;
  var fromValues4 = fromValues3;
  var copy4 = copy3;
  var set4 = set3;
  var add4 = add3;
  var mul3 = multiply3;
  var scale4 = scale3;
  var dot3 = dot2;
  var lerp3 = lerp2;
  var length3 = length2;
  var len2 = length3;
  var squaredLength3 = squaredLength2;
  var sqrLen2 = squaredLength3;
  var normalize3 = normalize2;
  var exactEquals4 = exactEquals3;
  var equals4 = equals3;
  var rotationTo = function() {
    var tmpvec3 = create3();
    var xUnitVec3 = fromValues2(1, 0, 0);
    var yUnitVec3 = fromValues2(0, 1, 0);
    return function(out, a, b) {
      var dot5 = dot(a, b);
      if (dot5 < -0.999999) {
        cross(tmpvec3, xUnitVec3, a);
        if (len(tmpvec3) < 1e-6)
          cross(tmpvec3, yUnitVec3, a);
        normalize(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot5 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot5;
        return normalize3(out, out);
      }
    };
  }();
  var sqlerp = function() {
    var temp1 = create5();
    var temp2 = create5();
    return function(out, a, b, c, d, t) {
      slerp(temp1, a, d, t);
      slerp(temp2, b, c, t);
      slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }();
  var setAxes = function() {
    var matr = create();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize3(out, fromMat3(out, matr));
    };
  }();

  // node_modules/gl-matrix/esm/quat2.js
  var quat2_exports = {};
  __export(quat2_exports, {
    add: () => add5,
    clone: () => clone5,
    conjugate: () => conjugate2,
    copy: () => copy5,
    create: () => create6,
    dot: () => dot4,
    equals: () => equals5,
    exactEquals: () => exactEquals5,
    fromMat4: () => fromMat4,
    fromRotation: () => fromRotation2,
    fromRotationTranslation: () => fromRotationTranslation2,
    fromRotationTranslationValues: () => fromRotationTranslationValues,
    fromTranslation: () => fromTranslation2,
    fromValues: () => fromValues5,
    getDual: () => getDual,
    getReal: () => getReal,
    getTranslation: () => getTranslation2,
    identity: () => identity3,
    invert: () => invert3,
    len: () => len3,
    length: () => length4,
    lerp: () => lerp4,
    mul: () => mul4,
    multiply: () => multiply4,
    normalize: () => normalize4,
    rotateAroundAxis: () => rotateAroundAxis,
    rotateByQuatAppend: () => rotateByQuatAppend,
    rotateByQuatPrepend: () => rotateByQuatPrepend,
    rotateX: () => rotateX4,
    rotateY: () => rotateY4,
    rotateZ: () => rotateZ4,
    scale: () => scale5,
    set: () => set5,
    setDual: () => setDual,
    setReal: () => setReal,
    sqrLen: () => sqrLen3,
    squaredLength: () => squaredLength4,
    str: () => str4,
    translate: () => translate2
  });
  function create6() {
    var dq = new ARRAY_TYPE(8);
    if (ARRAY_TYPE != Float32Array) {
      dq[0] = 0;
      dq[1] = 0;
      dq[2] = 0;
      dq[4] = 0;
      dq[5] = 0;
      dq[6] = 0;
      dq[7] = 0;
    }
    dq[3] = 1;
    return dq;
  }
  function clone5(a) {
    var dq = new ARRAY_TYPE(8);
    dq[0] = a[0];
    dq[1] = a[1];
    dq[2] = a[2];
    dq[3] = a[3];
    dq[4] = a[4];
    dq[5] = a[5];
    dq[6] = a[6];
    dq[7] = a[7];
    return dq;
  }
  function fromValues5(x1, y1, z1, w1, x2, y2, z2, w2) {
    var dq = new ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    dq[4] = x2;
    dq[5] = y2;
    dq[6] = z2;
    dq[7] = w2;
    return dq;
  }
  function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
    var dq = new ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
    dq[4] = ax * w1 + ay * z1 - az * y1;
    dq[5] = ay * w1 + az * x1 - ax * z1;
    dq[6] = az * w1 + ax * y1 - ay * x1;
    dq[7] = -ax * x1 - ay * y1 - az * z1;
    return dq;
  }
  function fromRotationTranslation2(out, q2, t) {
    var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q2[0], by = q2[1], bz = q2[2], bw = q2[3];
    out[0] = bx;
    out[1] = by;
    out[2] = bz;
    out[3] = bw;
    out[4] = ax * bw + ay * bz - az * by;
    out[5] = ay * bw + az * bx - ax * bz;
    out[6] = az * bw + ax * by - ay * bx;
    out[7] = -ax * bx - ay * by - az * bz;
    return out;
  }
  function fromTranslation2(out, t) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = t[0] * 0.5;
    out[5] = t[1] * 0.5;
    out[6] = t[2] * 0.5;
    out[7] = 0;
    return out;
  }
  function fromRotation2(out, q2) {
    out[0] = q2[0];
    out[1] = q2[1];
    out[2] = q2[2];
    out[3] = q2[3];
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function fromMat4(out, a) {
    var outer = create5();
    getRotation(outer, a);
    var t = new ARRAY_TYPE(3);
    getTranslation(t, a);
    fromRotationTranslation2(out, outer, t);
    return out;
  }
  function copy5(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    return out;
  }
  function identity3(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function set5(out, x1, y1, z1, w1, x2, y2, z2, w2) {
    out[0] = x1;
    out[1] = y1;
    out[2] = z1;
    out[3] = w1;
    out[4] = x2;
    out[5] = y2;
    out[6] = z2;
    out[7] = w2;
    return out;
  }
  var getReal = copy4;
  function getDual(out, a) {
    out[0] = a[4];
    out[1] = a[5];
    out[2] = a[6];
    out[3] = a[7];
    return out;
  }
  var setReal = copy4;
  function setDual(out, q2) {
    out[4] = q2[0];
    out[5] = q2[1];
    out[6] = q2[2];
    out[7] = q2[3];
    return out;
  }
  function getTranslation2(out, a) {
    var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    return out;
  }
  function translate2(out, a, v) {
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
    out[0] = ax1;
    out[1] = ay1;
    out[2] = az1;
    out[3] = aw1;
    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
    return out;
  }
  function rotateX4(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    rotateX3(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateY4(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    rotateY3(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateZ4(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    rotateZ3(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateByQuatAppend(out, a, q2) {
    var qx = q2[0], qy = q2[1], qz = q2[2], qw = q2[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
    out[0] = ax * qw + aw * qx + ay * qz - az * qy;
    out[1] = ay * qw + aw * qy + az * qx - ax * qz;
    out[2] = az * qw + aw * qz + ax * qy - ay * qx;
    out[3] = aw * qw - ax * qx - ay * qy - az * qz;
    ax = a[4];
    ay = a[5];
    az = a[6];
    aw = a[7];
    out[4] = ax * qw + aw * qx + ay * qz - az * qy;
    out[5] = ay * qw + aw * qy + az * qx - ax * qz;
    out[6] = az * qw + aw * qz + ax * qy - ay * qx;
    out[7] = aw * qw - ax * qx - ay * qy - az * qz;
    return out;
  }
  function rotateByQuatPrepend(out, q2, a) {
    var qx = q2[0], qy = q2[1], qz = q2[2], qw = q2[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
    out[0] = qx * bw + qw * bx + qy * bz - qz * by;
    out[1] = qy * bw + qw * by + qz * bx - qx * bz;
    out[2] = qz * bw + qw * bz + qx * by - qy * bx;
    out[3] = qw * bw - qx * bx - qy * by - qz * bz;
    bx = a[4];
    by = a[5];
    bz = a[6];
    bw = a[7];
    out[4] = qx * bw + qw * bx + qy * bz - qz * by;
    out[5] = qy * bw + qw * by + qz * bx - qx * bz;
    out[6] = qz * bw + qw * bz + qx * by - qy * bx;
    out[7] = qw * bw - qx * bx - qy * by - qz * bz;
    return out;
  }
  function rotateAroundAxis(out, a, axis, rad) {
    if (Math.abs(rad) < EPSILON) {
      return copy5(out, a);
    }
    var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
    rad = rad * 0.5;
    var s = Math.sin(rad);
    var bx = s * axis[0] / axisLength;
    var by = s * axis[1] / axisLength;
    var bz = s * axis[2] / axisLength;
    var bw = Math.cos(rad);
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    var ax = a[4], ay = a[5], az = a[6], aw = a[7];
    out[4] = ax * bw + aw * bx + ay * bz - az * by;
    out[5] = ay * bw + aw * by + az * bx - ax * bz;
    out[6] = az * bw + aw * bz + ax * by - ay * bx;
    out[7] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function add5(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    return out;
  }
  function multiply4(out, a, b) {
    var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
    out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
    out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
    out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
    out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
    return out;
  }
  var mul4 = multiply4;
  function scale5(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    return out;
  }
  var dot4 = dot3;
  function lerp4(out, a, b, t) {
    var mt2 = 1 - t;
    if (dot4(a, b) < 0)
      t = -t;
    out[0] = a[0] * mt2 + b[0] * t;
    out[1] = a[1] * mt2 + b[1] * t;
    out[2] = a[2] * mt2 + b[2] * t;
    out[3] = a[3] * mt2 + b[3] * t;
    out[4] = a[4] * mt2 + b[4] * t;
    out[5] = a[5] * mt2 + b[5] * t;
    out[6] = a[6] * mt2 + b[6] * t;
    out[7] = a[7] * mt2 + b[7] * t;
    return out;
  }
  function invert3(out, a) {
    var sqlen = squaredLength4(a);
    out[0] = -a[0] / sqlen;
    out[1] = -a[1] / sqlen;
    out[2] = -a[2] / sqlen;
    out[3] = a[3] / sqlen;
    out[4] = -a[4] / sqlen;
    out[5] = -a[5] / sqlen;
    out[6] = -a[6] / sqlen;
    out[7] = a[7] / sqlen;
    return out;
  }
  function conjugate2(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    out[4] = -a[4];
    out[5] = -a[5];
    out[6] = -a[6];
    out[7] = a[7];
    return out;
  }
  var length4 = length3;
  var len3 = length4;
  var squaredLength4 = squaredLength3;
  var sqrLen3 = squaredLength4;
  function normalize4(out, a) {
    var magnitude = squaredLength4(a);
    if (magnitude > 0) {
      magnitude = Math.sqrt(magnitude);
      var a0 = a[0] / magnitude;
      var a1 = a[1] / magnitude;
      var a2 = a[2] / magnitude;
      var a3 = a[3] / magnitude;
      var b0 = a[4];
      var b1 = a[5];
      var b2 = a[6];
      var b3 = a[7];
      var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
      out[0] = a0;
      out[1] = a1;
      out[2] = a2;
      out[3] = a3;
      out[4] = (b0 - a0 * a_dot_b) / magnitude;
      out[5] = (b1 - a1 * a_dot_b) / magnitude;
      out[6] = (b2 - a2 * a_dot_b) / magnitude;
      out[7] = (b3 - a3 * a_dot_b) / magnitude;
    }
    return out;
  }
  function str4(a) {
    return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
  }
  function exactEquals5(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
  }
  function equals5(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7));
  }

  // node_modules/@sorskoot/wonderland-components/dist/components/snap-rotate.js
  var __decorate5 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var SnapRotate = class extends Component {
    player;
    degrees;
    input = null;
    snapped = false;
    start() {
      this.input = this.object.getComponent(InputComponent);
      this.snapped = false;
    }
    update(dt) {
      if (!this.input || !this.input.xrInputSource) {
        return;
      }
      const currentAxis = this.input.xrInputSource.gamepad.axes[2];
      if (currentAxis > -0.2 && currentAxis < 0.2) {
        this.snapped = false;
        return;
      }
      if (Math.abs(currentAxis) < 0.8) {
        return;
      }
      let lastHeadPos = vec3_exports.fromValues(0, 0, 0);
      this.player.getPositionWorld(lastHeadPos);
      if (currentAxis < -0.8 && !this.snapped) {
        this.player.rotateAxisAngleDegLocal([0, 1, 0], this.degrees);
        this.snapped = true;
      }
      if (currentAxis > 0.8 && !this.snapped) {
        this.player.rotateAxisAngleDegLocal([0, 1, 0], -this.degrees);
        this.snapped = true;
      }
      let currentHeadPos = vec3_exports.fromValues(0, 0, 0);
      this.player.getPositionWorld(currentHeadPos);
      let newPos = vec3_exports.fromValues(0, 0, 0);
      vec3_exports.sub(newPos, lastHeadPos, currentHeadPos);
      this.player.translateLocal(newPos);
    }
  };
  __publicField(SnapRotate, "TypeName", "snap-rotate");
  __decorate5([
    property.object()
  ], SnapRotate.prototype, "player", void 0);
  __decorate5([
    property.int(30)
  ], SnapRotate.prototype, "degrees", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/snow-particles.js
  var __decorate6 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var _objects, _velocities, _speeds, _direction;
  var SnowParticles = class extends Component {
    constructor() {
      super(...arguments);
      __publicField(this, "mesh");
      __publicField(this, "material");
      __publicField(this, "delay");
      __publicField(this, "maxParticles");
      __publicField(this, "initialSpeed");
      __publicField(this, "particleScale");
      __publicField(this, "size");
      __publicField(this, "time", 0);
      __publicField(this, "count", 0);
      /**
       * @type {Object3D[]}
       */
      __privateAdd(this, _objects, []);
      /**
      * @type {number[][]}
      */
      __privateAdd(this, _velocities, []);
      __privateAdd(this, _speeds, []);
      __privateAdd(this, _direction, [0, 0, 0]);
    }
    start() {
      __privateSet(this, _objects, this.engine.scene.addObjects(this.maxParticles, null, this.maxParticles));
      for (let i = 0; i < this.maxParticles; ++i) {
        __privateGet(this, _velocities).push([Math.random() / 4 - 0.125, -Math.random() - 0.2, Math.random() / 4 - 0.125]);
        let obj = __privateGet(this, _objects)[i];
        obj.name = "particle" + this.count.toString();
        let mesh = obj.addComponent(MeshComponent);
        mesh.mesh = this.mesh;
        mesh.material = this.material;
        obj.scaleLocal([0, 0, 0]);
      }
      for (let i = 0; i < this.maxParticles; ++i) {
        this.spawn();
      }
    }
    update(dt) {
      let origin = vec3_exports.fromValues(0, 0, 0);
      let distance2 = vec3_exports.fromValues(0, 0, 0);
      for (let i = 0; i < Math.min(this.count, __privateGet(this, _objects).length); ++i) {
        quat2_exports.getTranslation(origin, __privateGet(this, _objects)[i].getTransformWorld());
        const vel = __privateGet(this, _velocities)[i];
        if (origin[0] + vel[0] * dt > 8)
          origin[0] -= 16;
        else if (origin[0] + vel[0] * dt <= -8)
          origin[0] += 16;
        if (origin[2] + vel[2] * dt > 8)
          origin[2] -= 16;
        else if (origin[2] + vel[2] * dt <= -8)
          origin[2] += 16;
        if (origin[1] + vel[1] * dt <= 0) {
          origin[1] = 5;
          __privateGet(this, _objects)[i].setPositionWorld(origin);
        }
      }
      for (let i = 0; i < Math.min(this.count, __privateGet(this, _objects).length); ++i) {
        vec3_exports.scale(distance2, __privateGet(this, _velocities)[i], dt);
        __privateGet(this, _objects)[i].translateWorld(distance2);
      }
    }
    /** Spawn a particle */
    spawn() {
      let index = this.count % this.maxParticles;
      let obj = __privateGet(this, _objects)[index];
      obj.resetTransform();
      obj.scaleLocal([this.particleScale, this.particleScale, this.particleScale]);
      obj.getComponent(MeshComponent).active = true;
      obj.translateWorld([Math.random() * this.size - this.size / 2, Math.random() * 5, Math.random() * this.size - this.size / 2]);
      this.count += 1;
    }
  };
  _objects = new WeakMap();
  _velocities = new WeakMap();
  _speeds = new WeakMap();
  _direction = new WeakMap();
  __publicField(SnowParticles, "TypeName", "snow-particles");
  __decorate6([
    property.mesh()
  ], SnowParticles.prototype, "mesh", void 0);
  __decorate6([
    property.material()
  ], SnowParticles.prototype, "material", void 0);
  __decorate6([
    property.float(0.1)
  ], SnowParticles.prototype, "delay", void 0);
  __decorate6([
    property.int(1500)
  ], SnowParticles.prototype, "maxParticles", void 0);
  __decorate6([
    property.float(15)
  ], SnowParticles.prototype, "initialSpeed", void 0);
  __decorate6([
    property.float(0.01)
  ], SnowParticles.prototype, "particleScale", void 0);
  __decorate6([
    property.int(16)
  ], SnowParticles.prototype, "size", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/tags.js
  var __decorate7 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var Tags = class extends Component {
    tags;
    /**
     * @param {string} tag the tag to test
     */
    hasTag(tag) {
      const tags = this.tags.split(/\W+/g);
      return !!~tags.indexOf(tag);
    }
  };
  __publicField(Tags, "TypeName", "tags");
  __decorate7([
    property.string()
  ], Tags.prototype, "tags", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/utils/rng.js
  var FRAC = 23283064365386963e-26;
  var RNG = class {
    _seed = 0;
    _s0 = 0;
    _s1 = 0;
    _s2 = 0;
    _c = 0;
    getSeed() {
      return this._seed;
    }
    /**
     * Seed the number generator
     * @type {number} seed - Seed value
     */
    setSeed(seed) {
      seed = seed < 1 ? 1 / seed : seed;
      this._seed = seed;
      this._s0 = (seed >>> 0) * FRAC;
      seed = seed * 69069 + 1 >>> 0;
      this._s1 = seed * FRAC;
      seed = seed * 69069 + 1 >>> 0;
      this._s2 = seed * FRAC;
      this._c = 1;
      return this;
    }
    /**
     * @returns Pseudorandom value [0,1), uniformly distributed
     */
    getUniform() {
      let t = 2091639 * this._s0 + this._c * FRAC;
      this._s0 = this._s1;
      this._s1 = this._s2;
      this._c = t | 0;
      this._s2 = t - this._c;
      return this._s2;
    }
    /**
     * @param {number} lowerBound The lower end of the range to return a value from, inclusive
     * @param {number} upperBound The upper end of the range to return a value from, inclusive
     * @returns Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value
     */
    getUniformInt(lowerBound, upperBound) {
      let max2 = Math.max(lowerBound, upperBound);
      let min2 = Math.min(lowerBound, upperBound);
      return Math.floor(this.getUniform() * (max2 - min2 + 1)) + min2;
    }
    /**
     * @param mean Mean value
     * @param stddev Standard deviation. ~95% of the absolute values will be lower than 2*stddev.
     * @returns A normally distributed pseudorandom value
     */
    getNormal(mean = 0, stddev = 1) {
      let u, v, r;
      do {
        u = 2 * this.getUniform() - 1;
        v = 2 * this.getUniform() - 1;
        r = u * u + v * v;
      } while (r > 1 || r == 0);
      let gauss = u * Math.sqrt(-2 * Math.log(r) / r);
      return mean + gauss * stddev;
    }
    /**
     * @returns Pseudorandom value [1,100] inclusive, uniformly distributed
     */
    getPercentage() {
      return 1 + Math.floor(this.getUniform() * 100);
    }
    /**
     * @param {Array} array Array to pick a random item from
     * @returns Randomly picked item, null when length=0
     */
    getItem(array) {
      if (!array.length) {
        return null;
      }
      return array[Math.floor(this.getUniform() * array.length)];
    }
    /**
     * @param {Array} array Array to randomize
     * @returns New array with randomized items
     */
    shuffle(array) {
      let result = [];
      let clone6 = array.slice();
      while (clone6.length) {
        let index = clone6.indexOf(this.getItem(clone6));
        result.push(clone6.splice(index, 1)[0]);
      }
      return result;
    }
    /**
     * @param {Object} data key = whatever, value=weight (relative probability)
     * @returns whatever
     */
    getWeightedValue(data) {
      let total = 0;
      for (let id2 in data) {
        total += data[id2];
      }
      let random3 = this.getUniform() * total;
      let id, part = 0;
      for (id in data) {
        part += data[id];
        if (random3 < part) {
          return id;
        }
      }
      return id;
    }
    /**
     * Get RNG state. Useful for storing the state and re-setting it via setState.
     * @returns Internal state
     */
    getState() {
      return [this._s0, this._s1, this._s2, this._c];
    }
    /**
     * Set a previously retrieved state.
     */
    setState(state) {
      this._s0 = state[0];
      this._s1 = state[1];
      this._s2 = state[2];
      this._c = state[3];
      return this;
    }
    /**
     * Returns a cloned RNG
     */
    clone() {
      let clone6 = new RNG();
      return clone6.setState(this.getState());
    }
  };
  var rng = new RNG().setSeed(Date.now());

  // node_modules/@sorskoot/wonderland-components/dist/utils/ObjectCache.js
  var ObjectCache = class {
    #objects;
    engine;
    name;
    cacheSize;
    index;
    /**
     *
     * @param {WonderlandEngine} engine
     * @param {string} name
     * @param {number} cacheSize
     * @param {Object3D} parent
     * @param {number} components
     */
    constructor(engine, name, cacheSize, parent, components) {
      this.engine = engine;
      this.name = name;
      console.log(`creating cache: ${name} with ${cacheSize} elements`);
      this.cacheSize = cacheSize;
      this.#objects = this.engine.scene.addObjects(cacheSize, parent, components);
      this.index = 0;
    }
    reset() {
      this.index = 0;
      this.#objects.forEach((obj) => {
        obj.getComponents().forEach((c) => {
          c.active = false;
        });
        obj.parent = null;
        obj.resetPositionRotation();
      });
    }
    getItem() {
      if (this.index >= this.cacheSize) {
        console.warn(`Cache ${this.name} ran out of space`);
        return;
      }
      let obj = this.#objects[this.index];
      this.index++;
      return obj;
    }
  };

  // node_modules/@sorskoot/wonderland-components/dist/utils/wlUtils.js
  function cloneObject(engine, object, cache) {
    if (!object || !object.parent) {
      console.log("can't clone undefined object");
      return;
    }
    let cloned;
    if (cache) {
      cloned = cache.getItem();
    }
    if (!cloned) {
      console.error("no cache available, cloning object");
      cloned = engine.scene.addObject(object.parent);
    }
    let components = object.getComponents();
    const comp = cloned.getComponents();
    for (let i = 0; i < components.length; i++) {
      if (components[i].type == "mesh") {
        const m = comp.find((c) => c.type == "mesh" && c.active == false);
        const original = components[i];
        if (m) {
          m.mesh = original.mesh;
          m.material = original.material;
          m.skin = original.skin;
          m.active = true;
        } else {
          cloned.addComponent("mesh", {
            mesh: original.mesh,
            material: original.material,
            skin: original.skin
          });
        }
      } else if (components[i].type == "collision") {
        const c = comp.find((c2) => c2.type == "collision" && c2.active == false);
        const original = components[i];
        if (c) {
          c.collider = original.collider;
          c.extents = original.extents;
          c.group = original.group;
          c.active = true;
        } else {
          cloned.addComponent("collision", {
            collider: original.collider,
            extents: original.extents,
            group: original.group
          });
        }
      } else if (components[i].type == "animation") {
        const c = comp.find((c2) => c2.type == "animation" && c2.active == false);
        const original = components[i];
        if (c) {
          c.animation = original.animation;
          c.playCount = original.playCount;
          c.active = true;
        } else
          cloned.addComponent("animation", {
            animation: original.animation,
            playCount: original.playCount
          });
      } else if (components[i].type == "tags") {
        const c = comp.find((c2) => c2.type == "tags" && c2.active == false);
        const original = components[i];
        if (c) {
          c.tags = original.tags;
          c.active = true;
        } else
          cloned.addComponent(Tags, {
            tags: original.tags
          });
      } else if (components[i].type == "flipbook") {
        const c = comp.find((c2) => c2.type == "flipbook" && c2.active == false);
        const original = components[i];
        if (c) {
          c.base = original.base;
          c.url = original.url;
          c.urlEmissive = original.urlEmissive;
          c.columns = original.columns;
          c.rows = original.rows;
          c.speed = original.speed;
          c.active = true;
        } else
          cloned.addComponent(Flipbook, {
            base: original.base,
            url: original.url,
            urlEmissive: original.urlEmissive,
            columns: original.columns,
            rows: original.rows,
            speed: original.speed
          });
      } else {
        const c = comp.find((c2) => c2.type == components[i].type && c2.active == false);
        if (c) {
          c.active = true;
        } else {
          cloned.addComponent(components[i].type, components[i]);
        }
      }
    }
    let pos = [];
    let rot = [];
    let scale6 = [];
    object.getPositionLocal(pos);
    object.getRotationLocal(rot);
    object.getScalingLocal(scale6);
    cloned.resetPositionRotation();
    cloned.setPositionLocal(pos);
    cloned.setRotationLocal(rot);
    cloned.setScalingLocal(scale6);
    cloned.name = object.name;
    if (object.children.length > 0) {
      for (let i = 0; i < object.children.length; i++) {
        let childClone = cloneObject(engine, object.children[i], cache);
        childClone.parent = cloned;
      }
    }
    cloned.setDirty();
    return cloned;
  }
  function findChild(object, childName) {
    return object.children.filter((o) => o.name == childName)[0];
  }
  function replaceAt(string, index, replacement) {
    return string.slice(0, index) + replacement + string.slice(index + replacement.length);
  }
  var wlUtils = {
    cloneObject,
    findChild,
    replaceAt
  };

  // node_modules/@sorskoot/wonderland-components/dist/utils/arrayHelpers.js
  function shuffleArray(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = rng.getUniformInt(0, i + 1);
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
  }

  // node_modules/@sorskoot/wonderland-components/dist/utils/lerp.js
  var Easing = {
    /**
     * Linear easing function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns The same value as `t`, providing a linear progression.
     */
    Linear: (t) => t,
    /**
     * Quadratic ease-in function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing an accelerated (quadratic) progression from 0 to 1.
     */
    InQuad: (t) => t * t,
    /**
     * Quadratic ease-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing a decelerated (quadratic) progression from 0 to 1.
     */
    OutQuad: (t) => 1 - (1 - t) * (1 - t),
    /**
     * Quadratic ease-in-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value that accelerates in, then decelerates out, providing a smooth transition between motion states.
     */
    InOutQuad: (t) => t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2,
    /**
     * Cubic ease-in function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing an accelerated (cubic) progression from 0 to 1.
     */
    InCubic: (t) => Math.pow(t, 3),
    /**
     * Cubic ease-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing an decelerated (cubic) progression from 0 to 1.
     */
    OutCubic: (t) => Math.pow(t - 1, 3) + 1,
    /**
     * Cubic ease-in-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value that accelerates in, then decelerates out, providing a smooth transition between motion states.
     */
    InOutCubic: (t) => {
      if (t < 0.5) {
        return Math.pow(2 * t, 3) / 2;
      } else {
        return (Math.pow(2 * t - 2, 3) + 2) / 2;
      }
    }
  };
  function lerp5(start, end, t, easing = Easing.Linear) {
    if (typeof easing === "function") {
      easing = getEasingFunction(easing);
    }
    return start * (1 - easing(t)) + end * easing(t);
  }
  function getEasingFunction(type) {
    return typeof type === "function" ? type : Easing.Linear;
  }
  function clamp(value, min2, max2) {
    return Math.min(Math.max(value, min2), max2);
  }

  // node_modules/@sorskoot/wonderland-components/dist/utils/queue.js
  var Queue = class {
    items = [];
    enqueue(item) {
      this.items.push(item);
    }
    dequeue() {
      return this.items.shift();
    }
    isEmpty() {
      return this.items.length === 0;
    }
  };

  // node_modules/@sorskoot/wonderland-components/dist/utils/rngWithWeight.js
  function rngWithWeight(array, itemsWithWeights) {
    let totalWeight = itemsWithWeights.reduce((total, itemWithWeight) => {
      return total + itemWithWeight;
    }, 0);
    let randomValue = rng.getUniformInt(0, totalWeight);
    for (let i = 0; i < itemsWithWeights.length; i++) {
      randomValue -= itemsWithWeights[i];
      if (randomValue <= 0) {
        return array[i];
      }
    }
    return null;
  }

  // node_modules/@wonderlandengine/components/dist/index.js
  var dist_exports2 = {};
  __export(dist_exports2, {
    ARCamera8thwall: () => ARCamera8thwall,
    Anchor: () => Anchor,
    Cursor: () => Cursor,
    CursorTarget: () => CursorTarget,
    DebugObject: () => DebugObject,
    DeviceOrientationLook: () => DeviceOrientationLook,
    FingerCursor: () => FingerCursor,
    FixedFoveation: () => FixedFoveation,
    HandTracking: () => HandTracking,
    HitTestLocation: () => HitTestLocation,
    HowlerAudioListener: () => HowlerAudioListener,
    HowlerAudioSource: () => HowlerAudioSource,
    ImageTexture: () => ImageTexture,
    MouseLookComponent: () => MouseLookComponent,
    PlaneDetection: () => PlaneDetection,
    PlayerHeight: () => PlayerHeight,
    TargetFramerate: () => TargetFramerate,
    TeleportComponent: () => TeleportComponent,
    Trail: () => Trail,
    TwoJointIkSolver: () => TwoJointIkSolver,
    VideoTexture: () => VideoTexture,
    VrModeActiveSwitch: () => VrModeActiveSwitch,
    Vrm: () => Vrm,
    WasdControlsComponent: () => WasdControlsComponent,
    isPointLocalOnXRPlanePolygon: () => isPointLocalOnXRPlanePolygon,
    isPointWorldOnXRPlanePolygon: () => isPointWorldOnXRPlanePolygon
  });

  // node_modules/@wonderlandengine/components/dist/8thwall-camera.js
  var ARCamera8thwall = class extends Component {
    /* 8thwall camera pipeline module name */
    name = "wonderland-engine-8thwall-camera";
    started = false;
    view = null;
    // cache camera
    position = [0, 0, 0];
    // cache 8thwall cam position
    rotation = [0, 0, 0, -1];
    // cache 8thwall cam rotation
    glTextureRenderer = null;
    // cache XR8.GlTextureRenderer.pipelineModule
    promptForDeviceMotion() {
      return new Promise(async (resolve, reject) => {
        window.dispatchEvent(new Event("8thwall-request-user-interaction"));
        window.addEventListener("8thwall-safe-to-request-permissions", async () => {
          try {
            const motionEvent = await DeviceMotionEvent.requestPermission();
            resolve(motionEvent);
          } catch (exception) {
            reject(exception);
          }
        });
      });
    }
    async getPermissions() {
      if (DeviceMotionEvent && DeviceMotionEvent.requestPermission) {
        try {
          const result = await DeviceMotionEvent.requestPermission();
          if (result !== "granted") {
            throw new Error("MotionEvent");
          }
        } catch (exception) {
          if (exception.name === "NotAllowedError") {
            const motionEvent = await this.promptForDeviceMotion();
            if (motionEvent !== "granted") {
              throw new Error("MotionEvent");
            }
          } else {
            throw new Error("MotionEvent");
          }
        }
      }
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
        });
        stream.getTracks().forEach((track) => {
          track.stop();
        });
      } catch (exception) {
        throw new Error("Camera");
      }
    }
    init() {
      this.view = this.object.getComponent("view");
      this.onUpdate = this.onUpdate.bind(this);
      this.onAttach = this.onAttach.bind(this);
      this.onException = this.onException.bind(this);
      this.onCameraStatusChange = this.onCameraStatusChange.bind(this);
    }
    async start() {
      this.view = this.object.getComponent("view");
      if (!this.useCustomUIOverlays) {
        OverlaysHandler.init();
      }
      try {
        await this.getPermissions();
      } catch (error) {
        window.dispatchEvent(new CustomEvent("8thwall-permission-fail", { detail: error }));
        return;
      }
      await this.waitForXR8();
      XR8.XrController.configure({
        disableWorldTracking: false
      });
      this.glTextureRenderer = XR8.GlTextureRenderer.pipelineModule();
      XR8.addCameraPipelineModules([
        this.glTextureRenderer,
        XR8.XrController.pipelineModule(),
        this
      ]);
      const config2 = {
        cameraConfig: {
          direction: XR8.XrConfig.camera().BACK
        },
        canvas: Module.canvas,
        allowedDevices: XR8.XrConfig.device().ANY,
        ownRunLoop: false
      };
      XR8.run(config2);
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onAttach(params) {
      this.started = true;
      this.engine.scene.colorClearEnabled = false;
      const gl = Module.ctx;
      const rot = this.object.rotationWorld;
      const pos = this.object.getTranslationWorld([]);
      this.position = Array.from(pos);
      this.rotation = Array.from(rot);
      XR8.XrController.updateCameraProjectionMatrix({
        origin: { x: pos[0], y: pos[1], z: pos[2] },
        facing: { x: rot[0], y: rot[1], z: rot[2], w: rot[3] },
        cam: {
          pixelRectWidth: Module.canvas.width,
          pixelRectHeight: Module.canvas.height,
          nearClipPlane: this.view.near,
          farClipPlane: this.view.far
        }
      });
      this.engine.scene.onPreRender.push(() => {
        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
        XR8.runPreRender(Date.now());
        XR8.runRender();
      });
      this.engine.scene.onPostRender.push(() => {
        XR8.runPostRender(Date.now());
      });
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onCameraStatusChange(e) {
      if (e && e.status === "failed") {
        this.onException(new Error(`Camera failed with status: ${e.status}`));
      }
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onUpdate(e) {
      if (!e.processCpuResult.reality)
        return;
      const { rotation, position, intrinsics } = e.processCpuResult.reality;
      this.rotation[0] = rotation.x;
      this.rotation[1] = rotation.y;
      this.rotation[2] = rotation.z;
      this.rotation[3] = rotation.w;
      this.position[0] = position.x;
      this.position[1] = position.y;
      this.position[2] = position.z;
      if (intrinsics) {
        const projectionMatrix = this.view.projectionMatrix;
        for (let i = 0; i < 16; i++) {
          if (Number.isFinite(intrinsics[i])) {
            projectionMatrix[i] = intrinsics[i];
          }
        }
      }
      if (position && rotation) {
        this.object.rotationWorld = this.rotation;
        this.object.setTranslationWorld(this.position);
      }
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onException(error) {
      console.error("8thwall exception:", error);
      window.dispatchEvent(new CustomEvent("8thwall-error", { detail: error }));
    }
    waitForXR8() {
      return new Promise((resolve, _rej) => {
        if (window.XR8) {
          resolve();
        } else {
          window.addEventListener("xrloaded", () => resolve());
        }
      });
    }
  };
  __publicField(ARCamera8thwall, "TypeName", "8thwall-camera");
  __publicField(ARCamera8thwall, "Properties", {
    /** Override the WL html overlays for handling camera/motion permissions and error handling */
    useCustomUIOverlays: { type: Type.Bool, default: false }
  });
  var OverlaysHandler = {
    init: function() {
      this.handleRequestUserInteraction = this.handleRequestUserInteraction.bind(this);
      this.handlePermissionFail = this.handlePermissionFail.bind(this);
      this.handleError = this.handleError.bind(this);
      window.addEventListener("8thwall-request-user-interaction", this.handleRequestUserInteraction);
      window.addEventListener("8thwall-permission-fail", this.handlePermissionFail);
      window.addEventListener("8thwall-error", this.handleError);
    },
    handleRequestUserInteraction: function() {
      const overlay = this.showOverlay(requestPermissionOverlay);
      window.addEventListener("8thwall-safe-to-request-permissions", () => {
        overlay.remove();
      });
    },
    handlePermissionFail: function(_reason) {
      this.showOverlay(failedPermissionOverlay);
    },
    handleError: function(_error) {
      this.showOverlay(runtimeErrorOverlay);
    },
    showOverlay: function(htmlContent) {
      const overlay = document.createElement("div");
      overlay.innerHTML = htmlContent;
      document.body.appendChild(overlay);
      return overlay;
    }
  };
  var requestPermissionOverlay = `
<style>
  #request-permission-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.5);
    text-align: center;
    font-family: sans-serif;
  }

  .request-permission-overlay_title {
    margin: 30px;
    font-size: 32px;
  }

  .request-permission-overlay_button {
    background-color: #e80086;
    font-size: 22px;
    padding: 10px 30px;
    color: #fff;
    border-radius: 15px;
    border: none;
  }
</style>

<div id="request-permission-overlay">
  <div class="request-permission-overlay_title">This app requires to use your camera and motion sensors</div>

  <button class="request-permission-overlay_button" onclick="window.dispatchEvent(new Event('8thwall-safe-to-request-permissions'))">OK</button>
</div>`;
  var failedPermissionOverlay = `
<style>
  #failed-permission-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.5);
    text-align: center;
    font-family: sans-serif;
  }

  .failed-permission-overlay_title {
    margin: 30px;
    font-size: 32px;
  }

  .failed-permission-overlay_button {
    background-color: #e80086;
    font-size: 22px;
    padding: 10px 30px;
    color: #fff;
    border-radius: 15px;
    border: none;
  }
</style>

<div id="failed-permission-overlay">
  <div class="failed-permission-overlay_title">Failed to grant permissions. Reset the the permissions and refresh the page.</div>

  <button class="failed-permission-overlay_button" onclick="window.location.reload()">Refresh the page</button>
</div>`;
  var runtimeErrorOverlay = `
<style>
  #wall-error-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.5);
    text-align: center;
    font-family: sans-serif;
  }

  .wall-error-overlay_title {
    margin: 30px;
    font-size: 32px;
  }

  .wall-error-overlay_button {
    background-color: #e80086;
    font-size: 22px;
    padding: 10px 30px;
    color: #fff;
    border-radius: 15px;
    border: none;
  }
</style>

<div id="wall-error-overlay">
  <div class="wall-error-overlay_title">Error has occurred. Please reload the page</div>

  <button class="wall-error-overlay_button" onclick="window.location.reload()">Reload</button>
</div>`;

  // node_modules/@wonderlandengine/components/dist/utils/webxr.js
  var tempVec = new Float32Array(3);
  var tempQuat = new Float32Array(4);
  function setXRRigidTransformLocal(o, transform) {
    const r = transform.orientation;
    tempQuat[0] = r.x;
    tempQuat[1] = r.y;
    tempQuat[2] = r.z;
    tempQuat[3] = r.w;
    const t = transform.position;
    tempVec[0] = t.x;
    tempVec[1] = t.y;
    tempVec[2] = t.z;
    o.resetTranslationRotation();
    o.transformLocal.set(tempQuat);
    o.translate(tempVec);
  }

  // node_modules/@wonderlandengine/components/dist/anchor.js
  var __decorate8 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var tempVec3 = new Float32Array(3);
  var tempQuat2 = new Float32Array(4);
  var _anchors, _addAnchor, addAnchor_fn, _removeAnchor, removeAnchor_fn, _getFrame, getFrame_fn, _createAnchor, createAnchor_fn, _onAddAnchor, onAddAnchor_fn, _onRestoreAnchor, onRestoreAnchor_fn, _onCreate, onCreate_fn;
  var _Anchor = class extends Component {
    constructor() {
      super(...arguments);
      __privateAdd(this, _getFrame);
      __privateAdd(this, _createAnchor);
      __privateAdd(this, _onAddAnchor);
      __privateAdd(this, _onRestoreAnchor);
      __privateAdd(this, _onCreate);
      __publicField(this, "persist", false);
      /** Unique identifier to load a persistent anchor from, or empty/null if unknown */
      __publicField(this, "uuid", null);
      /** The xrAnchor, if created */
      __publicField(this, "xrAnchor", null);
      /** Emits events when the anchor is created either by being restored or newly created */
      __publicField(this, "onCreate", new Emitter());
      /** Whether the anchor is currently being tracked */
      __publicField(this, "visible", false);
      /** Emits an event when this anchor starts tracking */
      __publicField(this, "onTrackingFound", new Emitter());
      /** Emits an event when this anchor stops tracking */
      __publicField(this, "onTrackingLost", new Emitter());
      /** XRFrame to use for creating the anchor */
      __publicField(this, "xrFrame", null);
      /** XRHitTestResult to use for creating the anchor */
      __publicField(this, "xrHitResult", null);
    }
    /** Retrieve all anchors of the current scene */
    static getAllAnchors() {
      return __privateGet(_Anchor, _anchors);
    }
    /**
     * Create a new anchor
     *
     * @param o Object to attach the component to
     * @param params Parameters for the anchor component
     * @param frame XRFrame to use for anchor cration, if null, will use the current frame if available
     * @param hitResult Optional hit-test result to create the anchor with
     * @returns Promise for the newly created anchor component
     */
    static create(o, params, frame, hitResult) {
      const a = o.addComponent(_Anchor, { ...params, active: false });
      if (a === null)
        return null;
      a.xrHitResult = hitResult ?? null;
      a.xrFrame = frame ?? null;
      a.onCreate.once(() => (a.xrFrame = null, a.xrHitResult = null));
      a.active = true;
      return a.onCreate.promise();
    }
    start() {
      if (this.uuid && this.engine.xr) {
        this.persist = true;
        if (this.engine.xr.session.restorePersistentAnchor === void 0) {
          console.warn("anchor: Persistent anchors are not supported by your client. Ignoring persist property.");
        }
        this.engine.xr.session.restorePersistentAnchor(this.uuid).then(__privateMethod(this, _onRestoreAnchor, onRestoreAnchor_fn).bind(this));
      } else if (__privateMethod(this, _getFrame, getFrame_fn).call(this)) {
        __privateMethod(this, _createAnchor, createAnchor_fn).call(this).then(__privateMethod(this, _onAddAnchor, onAddAnchor_fn).bind(this));
      } else {
        throw new Error("Anchors can only be created during the XR frame in an active XR session");
      }
    }
    update() {
      if (!this.xrAnchor || !this.engine.xr)
        return;
      const pose = this.engine.xr.frame.getPose(this.xrAnchor.anchorSpace, this.engine.xr.currentReferenceSpace);
      const visible = !!pose;
      if (visible != this.visible) {
        this.visible = visible;
        (visible ? this.onTrackingFound : this.onTrackingLost).notify(this);
      }
      if (pose) {
        setXRRigidTransformLocal(this.object, pose.transform);
      }
    }
    onDestroy() {
      var _a;
      __privateMethod(_a = _Anchor, _removeAnchor, removeAnchor_fn).call(_a, this);
    }
  };
  var Anchor = _Anchor;
  _anchors = new WeakMap();
  _addAnchor = new WeakSet();
  addAnchor_fn = function(anchor) {
    __privateGet(_Anchor, _anchors).push(anchor);
  };
  _removeAnchor = new WeakSet();
  removeAnchor_fn = function(anchor) {
    const index = __privateGet(_Anchor, _anchors).indexOf(anchor);
    if (index < 0)
      return;
    __privateGet(_Anchor, _anchors).splice(index, 1);
  };
  _getFrame = new WeakSet();
  getFrame_fn = function() {
    return this.xrFrame || this.engine.xr.frame;
  };
  _createAnchor = new WeakSet();
  createAnchor_fn = async function() {
    if (!__privateMethod(this, _getFrame, getFrame_fn).call(this).createAnchor) {
      throw new Error("Cannot create anchor - anchors not supported, did you enable the 'anchors' WebXR feature?");
    }
    if (this.xrHitResult) {
      if (this.xrHitResult.createAnchor === void 0) {
        throw new Error("Requested anchor on XRHitTestResult, but WebXR hit-test feature is not available.");
      }
      return this.xrHitResult.createAnchor();
    } else {
      this.object.getTranslationWorld(tempVec3);
      tempQuat2.set(this.object.rotationWorld);
      const rotation = tempQuat2;
      const anchorPose = new XRRigidTransform({ x: tempVec3[0], y: tempVec3[1], z: tempVec3[2] }, { x: rotation[0], y: rotation[1], z: rotation[2], w: rotation[3] });
      return __privateMethod(this, _getFrame, getFrame_fn).call(this)?.createAnchor(anchorPose, this.engine.xr.currentReferenceSpace);
    }
  };
  _onAddAnchor = new WeakSet();
  onAddAnchor_fn = function(anchor) {
    if (!anchor)
      return;
    if (this.persist) {
      if (anchor.requestPersistentHandle !== void 0) {
        anchor.requestPersistentHandle().then((uuid) => {
          var _a;
          this.uuid = uuid;
          __privateMethod(this, _onCreate, onCreate_fn).call(this, anchor);
          __privateMethod(_a = _Anchor, _addAnchor, addAnchor_fn).call(_a, this);
        });
        return;
      } else {
        console.warn("anchor: Persistent anchors are not supported by your client. Ignoring persist property.");
      }
    }
    __privateMethod(this, _onCreate, onCreate_fn).call(this, anchor);
  };
  _onRestoreAnchor = new WeakSet();
  onRestoreAnchor_fn = function(anchor) {
    __privateMethod(this, _onCreate, onCreate_fn).call(this, anchor);
  };
  _onCreate = new WeakSet();
  onCreate_fn = function(anchor) {
    this.xrAnchor = anchor;
    this.onCreate.notify(this);
  };
  __privateAdd(Anchor, _addAnchor);
  __privateAdd(Anchor, _removeAnchor);
  __publicField(Anchor, "TypeName", "anchor");
  /* Static management of all anchors */
  __privateAdd(Anchor, _anchors, []);
  __decorate8([
    property.bool(false)
  ], Anchor.prototype, "persist", void 0);
  __decorate8([
    property.string()
  ], Anchor.prototype, "uuid", void 0);

  // node_modules/@wonderlandengine/components/dist/cursor-target.js
  var CursorTarget = class extends Component {
    /** Emitter for events when the target is hovered */
    onHover = new Emitter();
    /** Emitter for events when the target is unhovered */
    onUnhover = new Emitter();
    /** Emitter for events when the target is clicked */
    onClick = new Emitter();
    /** Emitter for events when the cursor moves on the target */
    onMove = new Emitter();
    /** Emitter for events when the user pressed the select button on the target */
    onDown = new Emitter();
    /** Emitter for events when the user unpressed the select button on the target */
    onUp = new Emitter();
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onHover.add(f);
     */
    addHoverFunction(f2) {
      this.onHover.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onHover.remove(f);
     */
    removeHoverFunction(f2) {
      this.onHover.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onUnhover.add(f);
     */
    addUnHoverFunction(f2) {
      this.onUnhover.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onUnhover.remove(f);
     */
    removeUnHoverFunction(f2) {
      this.onUnhover.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onClick.add(f);
     */
    addClickFunction(f2) {
      this.onClick.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onClick.remove(f);
     */
    removeClickFunction(f2) {
      this.onClick.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onMove.add(f);
     */
    addMoveFunction(f2) {
      this.onMove.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onMove.remove(f);
     */
    removeMoveFunction(f2) {
      this.onMove.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onDown.add(f);
     */
    addDownFunction(f2) {
      this.onDown.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onDown.remove(f);
     */
    removeDownFunction(f2) {
      this.onDown.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onUp.add(f);
     */
    addUpFunction(f2) {
      this.onUp.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onUp.remove(f);
     */
    removeUpFunction(f2) {
      this.onUp.remove(f2);
    }
  };
  __publicField(CursorTarget, "TypeName", "cursor-target");
  __publicField(CursorTarget, "Properties", {});

  // node_modules/@wonderlandengine/components/dist/hit-test-location.js
  var __decorate9 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var HitTestLocation = class extends Component {
    tempScaling = new Float32Array(3);
    visible = false;
    xrHitTestSource = null;
    /** Reference space for creating the hit test when the session starts */
    xrReferenceSpace = null;
    /**
     * For maintaining backwards compatibility: Whether to scale the object to 0 and back.
     * @deprecated Use onHitLost and onHitFound instead.
     */
    scaleObject = true;
    /** Emits an event when the hit test switches from visible to invisible */
    onHitLost = new Emitter();
    /** Emits an event when the hit test switches from invisible to visible */
    onHitFound = new Emitter();
    onSessionStartCallback = null;
    onSessionEndCallback = null;
    start() {
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
      if (this.scaleObject) {
        this.tempScaling.set(this.object.scalingLocal);
        this.object.scale([0, 0, 0]);
        this.onHitLost.add(() => {
          this.tempScaling.set(this.object.scalingLocal);
          this.object.scale([0, 0, 0]);
        });
        this.onHitFound.add(() => {
          this.object.scalingLocal.set(this.tempScaling);
          this.object.setDirty();
        });
      }
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    update() {
      const wasVisible = this.visible;
      if (this.xrHitTestSource) {
        const frame = this.engine.xrFrame;
        if (!frame)
          return;
        let hitTestResults = frame.getHitTestResults(this.xrHitTestSource);
        if (hitTestResults.length > 0) {
          let pose = hitTestResults[0].getPose(this.engine.xr.currentReferenceSpace);
          this.visible = !!pose;
          if (pose) {
            setXRRigidTransformLocal(this.object, pose.transform);
          }
        } else {
          this.visible = false;
        }
      }
      if (this.visible != wasVisible) {
        (this.visible ? this.onHitFound : this.onHitLost).notify(this);
      }
    }
    getHitTestResults(frame = this.engine.xr?.frame ?? null) {
      if (!frame)
        return [];
      if (!this.xrHitTestSource)
        return [];
      return frame.getHitTestResults(this.xrHitTestSource);
    }
    onXRSessionStart(session) {
      if (session.requestHitTestSource === void 0) {
        console.error("hit-test-location: hit test feature not available. Deactivating component.");
        this.active = false;
        return;
      }
      session.requestHitTestSource({
        space: this.xrReferenceSpace ?? this.engine.xr.referenceSpaceForType("viewer")
      }).then((hitTestSource) => {
        this.xrHitTestSource = hitTestSource;
      }).catch(console.error);
    }
    onXRSessionEnd() {
      if (!this.xrHitTestSource)
        return;
      this.xrHitTestSource.cancel();
      this.xrHitTestSource = null;
    }
  };
  __publicField(HitTestLocation, "TypeName", "hit-test-location");
  __decorate9([
    property.bool(true)
  ], HitTestLocation.prototype, "scaleObject", void 0);

  // node_modules/@wonderlandengine/components/dist/cursor.js
  var __decorate10 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var tempVec2 = new Float32Array(3);
  var CursorTargetEmitters = class {
    /** Emitter for events when the target is hovered */
    onHover = new Emitter();
    /** Emitter for events when the target is unhovered */
    onUnhover = new Emitter();
    /** Emitter for events when the target is clicked */
    onClick = new Emitter();
    /** Emitter for events when the cursor moves on the target */
    onMove = new Emitter();
    /** Emitter for events when the user pressed the select button on the target */
    onDown = new Emitter();
    /** Emitter for events when the user unpressed the select button on the target */
    onUp = new Emitter();
  };
  var Cursor = class extends Component {
    static onRegister(engine) {
      engine.registerComponent(HitTestLocation);
    }
    _collisionMask = 0;
    _onDeactivateCallbacks = [];
    _input = null;
    _origin = new Float32Array(3);
    _cursorObjScale = new Float32Array(3);
    _direction = new Float32Array(3);
    _projectionMatrix = new Float32Array(16);
    _viewComponent = null;
    _isDown = false;
    _lastIsDown = false;
    _arTouchDown = false;
    _lastPointerPos = new Float32Array(2);
    _lastCursorPosOnTarget = new Float32Array(3);
    _cursorRayScale = new Float32Array(3);
    _hitTestLocation = null;
    _hitTestObject = null;
    _onSessionStartCallback = null;
    /**
     * Whether the cursor (and cursorObject) is visible, i.e. pointing at an object
     * that matches the collision group
     */
    visible = true;
    /** Maximum distance for the cursor's ray cast */
    maxDistance = 100;
    /** Currently hovered object */
    hoveringObject = null;
    /** CursorTarget component of the currently hovered object */
    hoveringObjectTarget = null;
    /** Whether the cursor is hovering reality via hit-test */
    hoveringReality = false;
    /**
     * Global target lets you receive global cursor events on any object.
     */
    globalTarget = new CursorTargetEmitters();
    /**
     * Hit test target lets you receive cursor events for "reality", if
     * `useWebXRHitTest` is set to `true`.
     *
     * @example
     * ```js
     * cursor.hitTestTarget.onClick.add((hit, cursor) => {
     *     // User clicked on reality
     * });
     * ```
     */
    hitTestTarget = new CursorTargetEmitters();
    /** World position of the cursor */
    cursorPos = new Float32Array(3);
    /** Collision group for the ray cast. Only objects in this group will be affected by this cursor. */
    collisionGroup = 1;
    /** (optional) Object that visualizes the cursor's ray. */
    cursorRayObject = null;
    /** Axis along which to scale the `cursorRayObject`. */
    cursorRayScalingAxis = 2;
    /** (optional) Object that visualizes the cursor's hit location. */
    cursorObject = null;
    /** Handedness for VR cursors to accept trigger events only from respective controller. */
    handedness = 0;
    /** Mode for raycasting, whether to use PhysX or simple collision components */
    rayCastMode = 0;
    /** Whether to set the CSS style of the mouse cursor on desktop */
    styleCursor = true;
    /**
     * Use WebXR hit-test if available.
     *
     * Attaches a hit-test-location component to the cursorObject, which will be used
     * by the cursor to send events to the hitTestTarget with HitTestResult.
     */
    useWebXRHitTest = false;
    _onViewportResize = () => {
      if (!this._viewComponent)
        return;
      mat4_exports.invert(this._projectionMatrix, this._viewComponent.projectionMatrix);
    };
    start() {
      this._collisionMask = 1 << this.collisionGroup;
      if (this.handedness == 0) {
        const inputComp = this.object.getComponent("input");
        if (!inputComp) {
          console.warn("cursor component on object", this.object.name, 'was configured with handedness "input component", but object has no input component.');
        } else {
          this.handedness = inputComp.handedness || "none";
          this._input = inputComp;
        }
      } else {
        this.handedness = ["left", "right", "none"][this.handedness - 1];
      }
      this._viewComponent = this.object.getComponent(ViewComponent);
      if (this.useWebXRHitTest) {
        this._hitTestObject = this.engine.scene.addObject(this.object);
        this._hitTestLocation = this._hitTestObject.addComponent(HitTestLocation, {
          scaleObject: false
        }) ?? null;
      }
      this._onSessionStartCallback = this.setupVREvents.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this._onSessionStartCallback);
      this.engine.onResize.add(this._onViewportResize);
      this._setCursorVisibility(true);
      if (this._viewComponent != null) {
        const canvas2 = this.engine.canvas;
        const onClick = this.onClick.bind(this);
        const onPointerMove = this.onPointerMove.bind(this);
        const onPointerDown = this.onPointerDown.bind(this);
        const onPointerUp = this.onPointerUp.bind(this);
        canvas2.addEventListener("click", onClick);
        canvas2.addEventListener("pointermove", onPointerMove);
        canvas2.addEventListener("pointerdown", onPointerDown);
        canvas2.addEventListener("pointerup", onPointerUp);
        this._onDeactivateCallbacks.push(() => {
          canvas2.removeEventListener("click", onClick);
          canvas2.removeEventListener("pointermove", onPointerMove);
          canvas2.removeEventListener("pointerdown", onPointerDown);
          canvas2.removeEventListener("pointerup", onPointerUp);
        });
      }
      this._onViewportResize();
    }
    _setCursorRayTransform(hitPosition) {
      if (!this.cursorRayObject)
        return;
      const dist2 = vec3_exports.dist(this._origin, hitPosition);
      this.cursorRayObject.setTranslationLocal([0, 0, -dist2 / 2]);
      if (this.cursorRayScalingAxis != 4) {
        this.cursorRayObject.resetScaling();
        this._cursorRayScale[this.cursorRayScalingAxis] = dist2 / 2;
        this.cursorRayObject.scale(this._cursorRayScale);
      }
    }
    _setCursorVisibility(visible) {
      if (this.visible == visible)
        return;
      this.visible = visible;
      if (!this.cursorObject)
        return;
      if (visible) {
        this.cursorObject.setScalingWorld(this._cursorObjScale);
      } else {
        this.cursorObject.getScalingLocal(this._cursorObjScale);
        this.cursorObject.scale([0, 0, 0]);
      }
    }
    update() {
      if (this.engine.xr && this._arTouchDown && this._input && this.engine.xr.session.inputSources[0].handedness === "none" && this.engine.xr.session.inputSources[0].gamepad) {
        const p = this.engine.xr.session.inputSources[0].gamepad.axes;
        this._direction[0] = p[0];
        this._direction[1] = -p[1];
        this._direction[2] = -1;
        this.applyTransformAndProjectDirection();
      } else if (this.engine.xr && this._input && this._input.xrInputSource) {
        this._direction[0] = 0;
        this._direction[1] = 0;
        this._direction[2] = -1;
        this.applyTransformToDirection();
      } else if (this._viewComponent) {
        this.updateDirection();
      }
      this.rayCast(null, this.engine.xr?.frame);
      if (this.cursorObject) {
        if (this.hoveringObject && (this.cursorPos[0] != 0 || this.cursorPos[1] != 0 || this.cursorPos[2] != 0)) {
          this._setCursorVisibility(true);
          this.cursorObject.setTranslationWorld(this.cursorPos);
          this._setCursorRayTransform(this.cursorPos);
        } else {
          this._setCursorVisibility(false);
        }
      }
    }
    /* Returns the hovered cursor target, if available */
    notify(event, originalEvent) {
      const target = this.hoveringObject;
      if (target) {
        const cursorTarget = this.hoveringObjectTarget;
        if (cursorTarget)
          cursorTarget[event].notify(target, this, originalEvent ?? void 0);
        this.globalTarget[event].notify(target, this, originalEvent ?? void 0);
      }
    }
    hoverBehaviour(rayHit, hitTestResult, doClick, originalEvent) {
      const hit = !this.hoveringReality && rayHit.hitCount > 0 ? rayHit.objects[0] : null;
      if (hit) {
        if (!this.hoveringObject || !this.hoveringObject.equals(hit)) {
          if (this.hoveringObject) {
            this.notify("onUnhover", originalEvent);
          }
          this.hoveringObject = hit;
          this.hoveringObjectTarget = this.hoveringObject.getComponent(CursorTarget);
          if (this.styleCursor)
            this.engine.canvas.style.cursor = "pointer";
          this.notify("onHover", originalEvent);
        }
      } else if (this.hoveringObject) {
        this.notify("onUnhover", originalEvent);
        this.hoveringObject = null;
        this.hoveringObjectTarget = null;
        if (this.styleCursor)
          this.engine.canvas.style.cursor = "default";
      }
      if (this.hoveringObject) {
        if (this._isDown !== this._lastIsDown) {
          this.notify(this._isDown ? "onDown" : "onUp", originalEvent);
        }
        if (doClick)
          this.notify("onClick", originalEvent);
      } else if (this.hoveringReality) {
        if (this._isDown !== this._lastIsDown) {
          (this._isDown ? this.hitTestTarget.onDown : this.hitTestTarget.onUp).notify(hitTestResult, this, originalEvent ?? void 0);
        }
        if (doClick)
          this.hitTestTarget.onClick.notify(hitTestResult, this, originalEvent ?? void 0);
      }
      if (hit) {
        if (this.hoveringObject) {
          this.hoveringObject.transformPointInverseWorld(tempVec2, this.cursorPos);
        } else {
          tempVec2.set(this.cursorPos);
        }
        if (!vec3_exports.equals(this._lastCursorPosOnTarget, tempVec2)) {
          this.notify("onMove", originalEvent);
          this._lastCursorPosOnTarget.set(tempVec2);
        }
      } else if (this.hoveringReality) {
        if (!vec3_exports.equals(this._lastCursorPosOnTarget, this.cursorPos)) {
          this.hitTestTarget.onMove.notify(hitTestResult, this, originalEvent ?? void 0);
          this._lastCursorPosOnTarget.set(this.cursorPos);
        }
      } else {
        this._lastCursorPosOnTarget.set(this.cursorPos);
      }
      this._lastIsDown = this._isDown;
    }
    /**
     * Setup event listeners on session object
     * @param s WebXR session
     *
     * Sets up 'select' and 'end' events.
     */
    setupVREvents(s) {
      if (!s)
        console.error("setupVREvents called without a valid session");
      const onSelect = this.onSelect.bind(this);
      s.addEventListener("select", onSelect);
      const onSelectStart = this.onSelectStart.bind(this);
      s.addEventListener("selectstart", onSelectStart);
      const onSelectEnd = this.onSelectEnd.bind(this);
      s.addEventListener("selectend", onSelectEnd);
      this._onDeactivateCallbacks.push(() => {
        if (!this.engine.xrSession)
          return;
        s.removeEventListener("select", onSelect);
        s.removeEventListener("selectstart", onSelectStart);
        s.removeEventListener("selectend", onSelectEnd);
      });
      this._onViewportResize();
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this._onSessionStartCallback);
      this.engine.onResize.remove(this._onViewportResize);
      this._setCursorVisibility(false);
      if (this.hoveringObject)
        this.notify("onUnhover", null);
      if (this.cursorRayObject)
        this.cursorRayObject.scale([0, 0, 0]);
      for (const f2 of this._onDeactivateCallbacks)
        f2();
      this._onDeactivateCallbacks.length = 0;
    }
    onDestroy() {
      this._hitTestObject?.destroy();
    }
    /** 'select' event listener */
    onSelect(e) {
      if (e.inputSource.handedness != this.handedness)
        return;
      this.rayCast(e, e.frame, true);
    }
    /** 'selectstart' event listener */
    onSelectStart(e) {
      this._arTouchDown = true;
      if (e.inputSource.handedness == this.handedness) {
        this._isDown = true;
        this.rayCast(e, e.frame);
      }
    }
    /** 'selectend' event listener */
    onSelectEnd(e) {
      this._arTouchDown = false;
      if (e.inputSource.handedness == this.handedness) {
        this._isDown = false;
        this.rayCast(e, e.frame);
      }
    }
    /** 'pointermove' event listener */
    onPointerMove(e) {
      if (!e.isPrimary)
        return;
      this.updateMousePos(e);
      this.rayCast(e, null);
    }
    /** 'click' event listener */
    onClick(e) {
      this.updateMousePos(e);
      this.rayCast(e, null, true);
    }
    /** 'pointerdown' event listener */
    onPointerDown(e) {
      if (!e.isPrimary || e.button !== 0)
        return;
      this.updateMousePos(e);
      this._isDown = true;
      this.rayCast(e);
    }
    /** 'pointerup' event listener */
    onPointerUp(e) {
      if (!e.isPrimary || e.button !== 0)
        return;
      this.updateMousePos(e);
      this._isDown = false;
      this.rayCast(e);
    }
    /**
     * Update mouse position in non-VR mode and raycast for new position
     * @returns @ref WL.RayHit for new position.
     */
    updateMousePos(e) {
      this._lastPointerPos[0] = e.clientX;
      this._lastPointerPos[1] = e.clientY;
      this.updateDirection();
    }
    updateDirection() {
      const bounds = this.engine.canvas.getBoundingClientRect();
      const left = this._lastPointerPos[0] / bounds.width;
      const top = this._lastPointerPos[1] / bounds.height;
      this._direction[0] = left * 2 - 1;
      this._direction[1] = -top * 2 + 1;
      this._direction[2] = -1;
      this.applyTransformAndProjectDirection();
    }
    applyTransformAndProjectDirection() {
      vec3_exports.transformMat4(this._direction, this._direction, this._projectionMatrix);
      vec3_exports.normalize(this._direction, this._direction);
      this.applyTransformToDirection();
    }
    applyTransformToDirection() {
      vec3_exports.transformQuat(this._direction, this._direction, this.object.transformWorld);
      this.object.getTranslationWorld(this._origin);
    }
    rayCast(originalEvent, frame = null, doClick = false) {
      const rayHit = this.rayCastMode == 0 ? this.engine.scene.rayCast(this._origin, this._direction, this._collisionMask) : this.engine.physics.rayCast(this._origin, this._direction, this._collisionMask, this.maxDistance);
      let hitResultDistance = Infinity;
      let hitTestResult = null;
      if (this._hitTestLocation?.visible) {
        this._hitTestObject.getTranslationWorld(this.cursorPos);
        hitResultDistance = vec3_exports.distance(this.object.getTranslationWorld(tempVec2), this.cursorPos);
        hitTestResult = this._hitTestLocation?.getHitTestResults(frame)[0];
      }
      let hoveringReality = false;
      if (rayHit.hitCount > 0) {
        const d = rayHit.distances[0];
        if (hitResultDistance >= d) {
          this.cursorPos.set(rayHit.locations[0]);
        } else {
          hoveringReality = true;
        }
      } else if (hitResultDistance < Infinity) {
      } else {
        this.cursorPos.fill(0);
      }
      if (hoveringReality && !this.hoveringReality) {
        this.hitTestTarget.onHover.notify(hitTestResult, this);
      } else if (!hoveringReality && this.hoveringReality) {
        this.hitTestTarget.onUnhover.notify(hitTestResult, this);
      }
      this.hoveringReality = hoveringReality;
      this.hoverBehaviour(rayHit, hitTestResult, doClick, originalEvent);
      return rayHit;
    }
  };
  __publicField(Cursor, "TypeName", "cursor");
  /* Dependencies is deprecated, but we keep it here for compatibility
   * with 1.0.0-rc2 until 1.0.0 is released */
  __publicField(Cursor, "Dependencies", [HitTestLocation]);
  __decorate10([
    property.int(1)
  ], Cursor.prototype, "collisionGroup", void 0);
  __decorate10([
    property.object()
  ], Cursor.prototype, "cursorRayObject", void 0);
  __decorate10([
    property.enum(["x", "y", "z", "none"], "z")
  ], Cursor.prototype, "cursorRayScalingAxis", void 0);
  __decorate10([
    property.object()
  ], Cursor.prototype, "cursorObject", void 0);
  __decorate10([
    property.enum(["input component", "left", "right", "none"], "input component")
  ], Cursor.prototype, "handedness", void 0);
  __decorate10([
    property.enum(["collision", "physx"], "collision")
  ], Cursor.prototype, "rayCastMode", void 0);
  __decorate10([
    property.bool(true)
  ], Cursor.prototype, "styleCursor", void 0);
  __decorate10([
    property.bool(false)
  ], Cursor.prototype, "useWebXRHitTest", void 0);

  // node_modules/@wonderlandengine/components/dist/debug-object.js
  var __decorate11 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var DebugObject = class extends Component {
    /** A second object to print the name of */
    obj = null;
    start() {
      let origin = new Float32Array(3);
      quat2_exports.getTranslation(origin, this.object.transformWorld);
      console.log("Debug object:", this.object.name);
      console.log("Other object:", this.obj?.name);
      console.log("	translation", origin);
      console.log("	transformWorld", this.object.transformWorld);
      console.log("	transformLocal", this.object.transformLocal);
    }
  };
  __publicField(DebugObject, "TypeName", "debug-object");
  __decorate11([
    property.object()
  ], DebugObject.prototype, "obj", void 0);

  // node_modules/@wonderlandengine/components/dist/device-orientation-look.js
  function quatFromEulerYXZ(out, x, y, z) {
    const c1 = Math.cos(x / 2);
    const c2 = Math.cos(y / 2);
    const c3 = Math.cos(z / 2);
    const s1 = Math.sin(x / 2);
    const s2 = Math.sin(y / 2);
    const s3 = Math.sin(z / 2);
    out[0] = s1 * c2 * c3 + c1 * s2 * s3;
    out[1] = c1 * s2 * c3 - s1 * c2 * s3;
    out[2] = c1 * c2 * s3 - s1 * s2 * c3;
    out[3] = c1 * c2 * c3 + s1 * s2 * s3;
  }
  var DeviceOrientationLook = class extends Component {
    start() {
      this.rotationX = 0;
      this.rotationY = 0;
      this.lastClientX = -1;
      this.lastClientY = -1;
    }
    init() {
      this.deviceOrientation = [0, 0, 0, 1];
      this.screenOrientation = window.innerHeight > window.innerWidth ? 0 : 90;
      this._origin = [0, 0, 0];
      window.addEventListener("deviceorientation", function(e) {
        let alpha = e.alpha || 0;
        let beta = e.beta || 0;
        let gamma = e.gamma || 0;
        const toRad = Math.PI / 180;
        quatFromEulerYXZ(this.deviceOrientation, beta * toRad, alpha * toRad, -gamma * toRad);
      }.bind(this));
      window.addEventListener("orientationchange", function(e) {
        this.screenOrientation = window.orientation || 0;
      }.bind(this), false);
    }
    update() {
      if (this.engine.xr)
        return;
      this.object.getTranslationLocal(this._origin);
      this.object.resetTransform();
      if (this.screenOrientation != 0) {
        this.object.rotateAxisAngleDeg([0, 0, -1], this.screenOrientation);
      }
      this.object.rotate([-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)]);
      this.object.rotate(this.deviceOrientation);
      this.object.translate(this._origin);
    }
  };
  __publicField(DeviceOrientationLook, "TypeName", "device-orientation-look");
  __publicField(DeviceOrientationLook, "Properties", {});

  // node_modules/@wonderlandengine/components/dist/finger-cursor.js
  var FingerCursor = class extends Component {
    init() {
      this.lastTarget = null;
    }
    start() {
      this.tip = this.object.getComponent("collision");
    }
    update() {
      const overlaps = this.tip.queryOverlaps();
      let overlapFound = null;
      for (let i = 0; i < overlaps.length; ++i) {
        const o = overlaps[i].object;
        const target = o.getComponent("cursor-target");
        if (target) {
          if (!target.equals(this.lastTarget)) {
            target.onHover(o, this);
            target.onClick(o, this);
          }
          overlapFound = target;
          break;
        }
      }
      if (!overlapFound) {
        if (this.lastTarget)
          this.lastTarget.onUnhover(this.lastTarget.object, this);
        this.lastTarget = null;
        return;
      } else {
        this.lastTarget = overlapFound;
      }
    }
  };
  __publicField(FingerCursor, "TypeName", "finger-cursor");
  __publicField(FingerCursor, "Properties", {});

  // node_modules/@wonderlandengine/components/dist/fixed-foveation.js
  var FixedFoveation = class extends Component {
    start() {
      this.onSessionStartCallback = this.setFixedFoveation.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
    }
    setFixedFoveation() {
      this.engine.xr.baseLayer.fixedFoveation = this.fixedFoveation;
    }
  };
  __publicField(FixedFoveation, "TypeName", "fixed-foveation");
  __publicField(FixedFoveation, "Properties", {
    /** Amount to apply from 0 (none) to 1 (full) */
    fixedFoveation: { type: Type.Float, default: 0.5 }
  });

  // node_modules/@wonderlandengine/components/dist/hand-tracking.js
  var ORDERED_JOINTS = [
    "wrist",
    "thumb-metacarpal",
    "thumb-phalanx-proximal",
    "thumb-phalanx-distal",
    "thumb-tip",
    "index-finger-metacarpal",
    "index-finger-phalanx-proximal",
    "index-finger-phalanx-intermediate",
    "index-finger-phalanx-distal",
    "index-finger-tip",
    "middle-finger-metacarpal",
    "middle-finger-phalanx-proximal",
    "middle-finger-phalanx-intermediate",
    "middle-finger-phalanx-distal",
    "middle-finger-tip",
    "ring-finger-metacarpal",
    "ring-finger-phalanx-proximal",
    "ring-finger-phalanx-intermediate",
    "ring-finger-phalanx-distal",
    "ring-finger-tip",
    "pinky-finger-metacarpal",
    "pinky-finger-phalanx-proximal",
    "pinky-finger-phalanx-intermediate",
    "pinky-finger-phalanx-distal",
    "pinky-finger-tip"
  ];
  var invTranslation = new Float32Array(3);
  var invRotation = new Float32Array(4);
  var HandTracking = class extends Component {
    init() {
      this.handedness = ["left", "right"][this.handedness];
    }
    joints = {};
    session = null;
    /* Whether last update had a hand pose */
    hasPose = false;
    _childrenActive = true;
    start() {
      if (!("XRHand" in window)) {
        console.warn("WebXR Hand Tracking not supported by this browser.");
        this.active = false;
        return;
      }
      if (this.handSkin) {
        let skin = this.handSkin;
        let jointIds = skin.jointIds;
        this.joints[ORDERED_JOINTS[0]] = this.engine.wrapObject(jointIds[0]);
        for (let j = 0; j < jointIds.length; ++j) {
          let joint = this.engine.wrapObject(jointIds[j]);
          this.joints[joint.name] = joint;
        }
        return;
      }
      const jointObjects = this.engine.scene.addObjects(ORDERED_JOINTS.length, this.object.parent, ORDERED_JOINTS.length);
      for (let j = 0; j < ORDERED_JOINTS.length; ++j) {
        let joint = jointObjects[j];
        joint.addComponent(MeshComponent, {
          mesh: this.jointMesh,
          material: this.jointMaterial
        });
        this.joints[ORDERED_JOINTS[j]] = joint;
      }
    }
    update(dt) {
      if (!this.session) {
        if (this.engine.xr)
          this.setupVREvents(this.engine.xr.session);
      }
      if (!this.session)
        return;
      this.hasPose = false;
      if (this.session && this.session.inputSources) {
        for (let i = 0; i < this.session.inputSources.length; ++i) {
          const inputSource = this.session.inputSources[i];
          if (!inputSource || !inputSource.hand || inputSource.handedness != this.handedness)
            continue;
          this.hasPose = true;
          const wristSpace = inputSource.hand.get("wrist");
          if (wristSpace !== null) {
            const p = this.engine.xr.frame.getJointPose(wristSpace, this.engine.xr.currentReferenceSpace);
            if (p) {
              setXRRigidTransformLocal(this.object, p.transform);
            }
          }
          this.object.getRotationLocal(invRotation);
          quat_exports.conjugate(invRotation, invRotation);
          this.object.getTranslationLocal(invTranslation);
          for (let j = 0; j < ORDERED_JOINTS.length; ++j) {
            const jointName = ORDERED_JOINTS[j];
            const joint = this.joints[jointName];
            if (joint === null)
              continue;
            let jointPose = null;
            const jointSpace = inputSource.hand.get(jointName);
            if (jointSpace !== null) {
              jointPose = this.engine.xr.frame.getJointPose(jointSpace, this.engine.xr.currentReferenceSpace);
            }
            if (jointPose !== null) {
              if (this.handSkin) {
                joint.resetTranslationRotation();
                joint.translate([
                  jointPose.transform.position.x - invTranslation[0],
                  jointPose.transform.position.y - invTranslation[1],
                  jointPose.transform.position.z - invTranslation[2]
                ]);
                joint.rotate(invRotation);
                joint.rotateObject([
                  jointPose.transform.orientation.x,
                  jointPose.transform.orientation.y,
                  jointPose.transform.orientation.z,
                  jointPose.transform.orientation.w
                ]);
              } else {
                setXRRigidTransformLocal(joint, jointPose.transform);
                const r = jointPose.radius || 7e-3;
                joint.setScalingLocal([r, r, r]);
              }
            }
          }
        }
      }
      if (!this.hasPose && this._childrenActive) {
        this._childrenActive = false;
        if (this.deactivateChildrenWithoutPose) {
          this.setChildrenActive(false);
        }
        if (this.controllerToDeactivate) {
          this.controllerToDeactivate.active = true;
          this.setChildrenActive(true, this.controllerToDeactivate);
        }
      } else if (this.hasPose && !this._childrenActive) {
        this._childrenActive = true;
        if (this.deactivateChildrenWithoutPose) {
          this.setChildrenActive(true);
        }
        if (this.controllerToDeactivate) {
          this.controllerToDeactivate.active = false;
          this.setChildrenActive(false, this.controllerToDeactivate);
        }
      }
    }
    setChildrenActive(active, object) {
      object = object || this.object;
      const children = object.children;
      for (const o of children) {
        o.active = active;
        this.setChildrenActive(active, o);
      }
    }
    isGrabbing() {
      const indexTipPos = [0, 0, 0];
      quat2_exports.getTranslation(indexTipPos, this.joints["index-finger-tip"].transformLocal);
      const thumbTipPos = [0, 0, 0];
      quat2_exports.getTranslation(thumbTipPos, this.joints["thumb-tip"].transformLocal);
      return vec3_exports.sqrDist(thumbTipPos, indexTipPos) < 1e-3;
    }
    setupVREvents(s) {
      this.session = s;
    }
  };
  __publicField(HandTracking, "TypeName", "hand-tracking");
  __publicField(HandTracking, "Properties", {
    /** Handedness determining whether to receive tracking input from right or left hand */
    handedness: { type: Type.Enum, default: "left", values: ["left", "right"] },
    /** (optional) Mesh to use to visualize joints */
    jointMesh: { type: Type.Mesh, default: null },
    /** Material to use for display. Applied to either the spawned skinned mesh or the joint spheres. */
    jointMaterial: { type: Type.Material, default: null },
    /** (optional) Skin to apply tracked joint poses to. If not present, joint spheres will be used for display instead. */
    handSkin: { type: Type.Skin, default: null },
    /** Deactivate children if no pose was tracked */
    deactivateChildrenWithoutPose: { type: Type.Bool, default: true },
    /** Controller objects to activate including children if no pose is available */
    controllerToDeactivate: { type: Type.Object }
  });

  // node_modules/@wonderlandengine/components/dist/howler-audio-listener.js
  var import_howler = __toESM(require_howler(), 1);
  var HowlerAudioListener = class extends Component {
    init() {
      this.origin = new Float32Array(3);
      this.fwd = new Float32Array(3);
      this.up = new Float32Array(3);
    }
    update() {
      if (!this.spatial)
        return;
      this.object.getTranslationWorld(this.origin);
      this.object.getForward(this.fwd);
      this.object.getUp(this.up);
      Howler.pos(this.origin[0], this.origin[1], this.origin[2]);
      Howler.orientation(this.fwd[0], this.fwd[1], this.fwd[2], this.up[0], this.up[1], this.up[2]);
    }
  };
  __publicField(HowlerAudioListener, "TypeName", "howler-audio-listener");
  __publicField(HowlerAudioListener, "Properties", {
    /** Whether audio should be spatialized/positional. */
    spatial: { type: Type.Bool, default: true }
  });

  // node_modules/@wonderlandengine/components/dist/howler-audio-source.js
  var import_howler2 = __toESM(require_howler(), 1);
  var HowlerAudioSource = class extends Component {
    start() {
      this.audio = new Howl({
        src: [this.src],
        loop: this.loop,
        volume: this.volume,
        autoplay: this.autoplay
      });
      this.lastPlayedAudioId = null;
      this.origin = new Float32Array(3);
      this.lastOrigin = new Float32Array(3);
      if (this.spatial && this.autoplay) {
        this.updatePosition();
        this.play();
      }
    }
    update() {
      if (!this.spatial || !this.lastPlayedAudioId)
        return;
      this.object.getTranslationWorld(this.origin);
      if (Math.abs(this.lastOrigin[0] - this.origin[0]) > 5e-3 || Math.abs(this.lastOrigin[1] - this.origin[1]) > 5e-3 || Math.abs(this.lastOrigin[2] - this.origin[2]) > 5e-3) {
        this.updatePosition();
      }
    }
    updatePosition() {
      this.audio.pos(this.origin[0], this.origin[1], this.origin[2], this.lastPlayedAudioId);
      this.lastOrigin.set(this.origin);
    }
    play() {
      if (this.lastPlayedAudioId)
        this.audio.stop(this.lastPlayedAudioId);
      this.lastPlayedAudioId = this.audio.play();
      if (this.spatial)
        this.updatePosition();
    }
    stop() {
      if (!this.lastPlayedAudioId)
        return;
      this.audio.stop(this.lastPlayedAudioId);
      this.lastPlayedAudioId = null;
    }
    onDeactivate() {
      this.stop();
    }
  };
  __publicField(HowlerAudioSource, "TypeName", "howler-audio-source");
  __publicField(HowlerAudioSource, "Properties", {
    /** Volume */
    volume: { type: Type.Float, default: 1 },
    /** Whether audio should be spatialized/positional */
    spatial: { type: Type.Bool, default: true },
    /** Whether to loop the sound */
    loop: { type: Type.Bool, default: false },
    /** Whether to start playing automatically */
    autoplay: { type: Type.Bool, default: false },
    /** URL to a sound file to play */
    src: { type: Type.String, default: "" }
  });

  // node_modules/@wonderlandengine/components/dist/utils/utils.js
  function setFirstMaterialTexture(mat, texture, customTextureProperty) {
    if (customTextureProperty !== "auto") {
      mat[customTextureProperty] = texture;
      return true;
    }
    const shader = mat.shader;
    if (shader === "Flat Opaque Textured") {
      mat.flatTexture = texture;
      return true;
    } else if (shader === "Phong Opaque Textured" || shader === "Foliage" || shader === "Phong Normalmapped" || shader === "Phong Lightmapped") {
      mat.diffuseTexture = texture;
      return true;
    } else if (shader === "Particle") {
      mat.mainTexture = texture;
      return true;
    } else if (shader === "DistanceFieldVector") {
      mat.vectorTexture = texture;
      return true;
    } else if (shader === "Background" || shader === "Sky") {
      mat.texture = texture;
      return true;
    } else if (shader === "Physical Opaque Textured") {
      mat.albedoTexture = texture;
      return true;
    }
    return false;
  }

  // node_modules/@wonderlandengine/components/dist/image-texture.js
  var ImageTexture = class extends Component {
    start() {
      if (!this.material) {
        throw Error("image-texture: material property not set");
      }
      this.engine.textures.load(this.url, "anonymous").then((texture) => {
        const mat = this.material;
        if (!setFirstMaterialTexture(mat, texture, this.textureProperty)) {
          console.error("Shader", mat.shader, "not supported by image-texture");
        }
      }).catch(console.err);
    }
  };
  __publicField(ImageTexture, "TypeName", "image-texture");
  __publicField(ImageTexture, "Properties", {
    /** URL to download the image from */
    url: Property.string(),
    /** Material to apply the video texture to */
    material: Property.material(),
    /** Name of the texture property to set */
    textureProperty: Property.string("auto")
  });

  // node_modules/@wonderlandengine/components/dist/mouse-look.js
  var MouseLookComponent = class extends Component {
    init() {
      this.currentRotationY = 0;
      this.currentRotationX = 0;
      this.origin = new Float32Array(3);
      this.parentOrigin = new Float32Array(3);
      this.rotationX = 0;
      this.rotationY = 0;
    }
    start() {
      document.addEventListener("mousemove", (e) => {
        if (this.active && (this.mouseDown || !this.requireMouseDown)) {
          this.rotationY = -this.sensitity * e.movementX / 100;
          this.rotationX = -this.sensitity * e.movementY / 100;
          this.currentRotationX += this.rotationX;
          this.currentRotationY += this.rotationY;
          this.currentRotationX = Math.min(1.507, this.currentRotationX);
          this.currentRotationX = Math.max(-1.507, this.currentRotationX);
          this.object.getTranslationWorld(this.origin);
          const parent = this.object.parent;
          if (parent !== null) {
            parent.getTranslationWorld(this.parentOrigin);
            vec3_exports.sub(this.origin, this.origin, this.parentOrigin);
          }
          this.object.resetTranslationRotation();
          this.object.rotateAxisAngleRad([1, 0, 0], this.currentRotationX);
          this.object.rotateAxisAngleRad([0, 1, 0], this.currentRotationY);
          this.object.translate(this.origin);
        }
      });
      const canvas2 = this.engine.canvas;
      if (this.pointerLockOnClick) {
        canvas2.addEventListener("mousedown", () => {
          canvas2.requestPointerLock = canvas2.requestPointerLock || canvas2.mozRequestPointerLock || canvas2.webkitRequestPointerLock;
          canvas2.requestPointerLock();
        });
      }
      if (this.requireMouseDown) {
        if (this.mouseButtonIndex == 2) {
          canvas2.addEventListener("contextmenu", (e) => {
            e.preventDefault();
          }, false);
        }
        canvas2.addEventListener("mousedown", (e) => {
          if (e.button == this.mouseButtonIndex) {
            this.mouseDown = true;
            document.body.style.cursor = "grabbing";
            if (e.button == 1) {
              e.preventDefault();
              return false;
            }
          }
        });
        canvas2.addEventListener("mouseup", (e) => {
          if (e.button == this.mouseButtonIndex) {
            this.mouseDown = false;
            document.body.style.cursor = "initial";
          }
        });
      }
    }
  };
  __publicField(MouseLookComponent, "TypeName", "mouse-look");
  __publicField(MouseLookComponent, "Properties", {
    /** Mouse look sensitivity */
    sensitity: { type: Type.Float, default: 0.25 },
    /** Require a mouse button to be pressed to control view.
     * Otherwise view will allways follow mouse movement */
    requireMouseDown: { type: Type.Bool, default: true },
    /** If "moveOnClick" is enabled, mouse button which should
     * be held down to control view */
    mouseButtonIndex: { type: Type.Int },
    /** Enables pointer lock on "mousedown" event on canvas */
    pointerLockOnClick: { type: Type.Bool, default: false }
  });

  // node_modules/@wonderlandengine/components/dist/player-height.js
  var PlayerHeight = class extends Component {
    start() {
      this.object.resetTranslationRotation();
      this.object.translate([0, this.height, 0]);
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    onXRSessionStart() {
      if (!["local", "viewer"].includes(this.engine.xr.currentReferenceSpace)) {
        this.object.resetTranslationRotation();
      }
    }
    onXRSessionEnd() {
      if (!["local", "viewer"].includes(this.engine.xr.currentReferenceSpace)) {
        this.object.resetTranslationRotation();
        this.object.translate([0, this.height, 0]);
      }
    }
  };
  __publicField(PlayerHeight, "TypeName", "player-height");
  __publicField(PlayerHeight, "Properties", {
    height: { type: Type.Float, default: 1.75 }
  });

  // node_modules/@wonderlandengine/components/dist/target-framerate.js
  var TargetFramerate = class extends Component {
    start() {
      this.onSessionStartCallback = this.setTargetFramerate.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
    }
    setTargetFramerate(s) {
      if (s.supportedFrameRates && s.updateTargetFrameRate) {
        const a = this.engine.xr.session.supportedFrameRates;
        a.sort((a2, b) => Math.abs(a2 - this.framerate) - Math.abs(b - this.framerate));
        this.engine.xr.session.updateTargetFrameRate(a[0]);
      }
    }
  };
  __publicField(TargetFramerate, "TypeName", "target-framerate");
  __publicField(TargetFramerate, "Properties", {
    framerate: { type: Type.Float, default: 90 }
  });

  // node_modules/@wonderlandengine/components/dist/teleport.js
  var TeleportComponent = class extends Component {
    init() {
      this._prevThumbstickAxis = new Float32Array(2);
      this._tempVec = new Float32Array(3);
      this._tempVec0 = new Float32Array(3);
      this._currentIndicatorRotation = 0;
      this.input = this.object.getComponent("input");
      if (!this.input) {
        console.error(this.object.name, "generic-teleport-component.js: input component is required on the object");
        return;
      }
      if (!this.teleportIndicatorMeshObject) {
        console.error(this.object.name, "generic-teleport-component.js: Teleport indicator mesh is missing");
        return;
      }
      if (!this.camRoot) {
        console.error(this.object.name, "generic-teleport-component.js: camRoot not set");
        return;
      }
      this.isIndicating = false;
      this.indicatorHidden = true;
      this.hitSpot = new Float32Array(3);
      this._hasHit = false;
      this._extraRotation = 0;
      this._currentStickAxes = new Float32Array(2);
    }
    start() {
      if (this.cam) {
        this.isMouseIndicating = false;
        canvas.addEventListener("mousedown", this.onMouseDown.bind(this));
        canvas.addEventListener("mouseup", this.onMouseUp.bind(this));
      }
      if (this.handedness == 0) {
        const inputComp = this.object.getComponent("input");
        if (!inputComp) {
          console.warn("teleport component on object", this.object.name, 'was configured with handedness "input component", but object has no input component.');
        } else {
          this.handedness = inputComp.handedness;
          this.input = inputComp;
        }
      } else {
        this.handedness = ["left", "right"][this.handedness - 1];
      }
      this.onSessionStartCallback = this.setupVREvents.bind(this);
      this.teleportIndicatorMeshObject.active = false;
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
    }
    /* Get current camera Y rotation */
    _getCamRotation() {
      this.eyeLeft.getForward(this._tempVec);
      this._tempVec[1] = 0;
      vec3_exports.normalize(this._tempVec, this._tempVec);
      return Math.atan2(this._tempVec[0], this._tempVec[2]);
    }
    update() {
      let inputLength = 0;
      if (this.gamepad && this.gamepad.axes) {
        this._currentStickAxes[0] = this.gamepad.axes[2];
        this._currentStickAxes[1] = this.gamepad.axes[3];
        inputLength = Math.abs(this._currentStickAxes[0]) + Math.abs(this._currentStickAxes[1]);
      }
      if (!this.isIndicating && this._prevThumbstickAxis[1] >= this.thumbstickActivationThreshhold && this._currentStickAxes[1] < this.thumbstickActivationThreshhold) {
        this.isIndicating = true;
      } else if (this.isIndicating && inputLength < this.thumbstickDeactivationThreshhold) {
        this.isIndicating = false;
        this.teleportIndicatorMeshObject.active = false;
        if (this._hasHit) {
          this._teleportPlayer(this.hitSpot, this._extraRotation);
        }
      }
      if (this.isIndicating && this.teleportIndicatorMeshObject && this.input) {
        const origin = this._tempVec0;
        this.object.getPositionWorld(origin);
        const direction2 = this.object.getForwardWorld(this._tempVec);
        let rayHit = this.rayHit = this.rayCastMode == 0 ? this.engine.scene.rayCast(origin, direction2, 1 << this.floorGroup) : this.engine.physics.rayCast(origin, direction2, 1 << this.floorGroup, this.maxDistance);
        if (rayHit.hitCount > 0) {
          this.indicatorHidden = false;
          this._extraRotation = Math.PI + Math.atan2(this._currentStickAxes[0], this._currentStickAxes[1]);
          this._currentIndicatorRotation = this._getCamRotation() + (this._extraRotation - Math.PI);
          this.teleportIndicatorMeshObject.resetPositionRotation();
          this.teleportIndicatorMeshObject.rotateAxisAngleRad([0, 1, 0], this._currentIndicatorRotation);
          this.teleportIndicatorMeshObject.translate(rayHit.locations[0]);
          this.teleportIndicatorMeshObject.translate([
            0,
            this.indicatorYOffset,
            0
          ]);
          this.teleportIndicatorMeshObject.active = true;
          this.hitSpot.set(rayHit.locations[0]);
          this._hasHit = true;
        } else {
          if (!this.indicatorHidden) {
            this.teleportIndicatorMeshObject.active = false;
            this.indicatorHidden = true;
          }
          this._hasHit = false;
        }
      } else if (this.teleportIndicatorMeshObject && this.isMouseIndicating) {
        this.onMousePressed();
      }
      this._prevThumbstickAxis.set(this._currentStickAxes);
    }
    setupVREvents(s) {
      this.session = s;
      s.addEventListener("end", function() {
        this.gamepad = null;
        this.session = null;
      }.bind(this));
      if (s.inputSources && s.inputSources.length) {
        for (let i = 0; i < s.inputSources.length; i++) {
          let inputSource = s.inputSources[i];
          if (inputSource.handedness == this.handedness) {
            this.gamepad = inputSource.gamepad;
          }
        }
      }
      s.addEventListener("inputsourceschange", function(e) {
        if (e.added && e.added.length) {
          for (let i = 0; i < e.added.length; i++) {
            let inputSource = e.added[i];
            if (inputSource.handedness == this.handedness) {
              this.gamepad = inputSource.gamepad;
            }
          }
        }
      }.bind(this));
    }
    onMouseDown() {
      this.isMouseIndicating = true;
    }
    onMouseUp() {
      this.isMouseIndicating = false;
      this.teleportIndicatorMeshObject.active = false;
      if (this._hasHit) {
        this._teleportPlayer(this.hitSpot, 0);
      }
    }
    onMousePressed() {
      let origin = [0, 0, 0];
      this.cam.getPositionWorld(origin);
      const direction2 = this.cam.getForward(this._tempVec);
      let rayHit = this.rayHit = this.rayCastMode == 0 ? this.engine.scene.rayCast(origin, direction2, 1 << this.floorGroup) : this.engine.physics.rayCast(origin, direction2, 1 << this.floorGroup, this.maxDistance);
      if (rayHit.hitCount > 0) {
        this.indicatorHidden = false;
        direction2[1] = 0;
        vec3_exports.normalize(direction2, direction2);
        this._currentIndicatorRotation = -Math.sign(direction2[2]) * Math.acos(direction2[0]) - Math.PI * 0.5;
        this.teleportIndicatorMeshObject.resetPositionRotation();
        this.teleportIndicatorMeshObject.rotateAxisAngleRad([0, 1, 0], this._currentIndicatorRotation);
        this.teleportIndicatorMeshObject.translate(rayHit.locations[0]);
        this.teleportIndicatorMeshObject.active = true;
        this.hitSpot = rayHit.locations[0];
        this._hasHit = true;
      } else {
        if (!this.indicatorHidden) {
          this.teleportIndicatorMeshObject.active = false;
          this.indicatorHidden = true;
        }
        this._hasHit = false;
      }
    }
    _teleportPlayer(newPosition, rotationToAdd) {
      this.camRoot.rotateAxisAngleRad([0, 1, 0], rotationToAdd);
      const p = this._tempVec;
      const p1 = this._tempVec0;
      if (this.session) {
        this.eyeLeft.getPositionWorld(p);
        this.eyeRight.getPositionWorld(p1);
        vec3_exports.add(p, p, p1);
        vec3_exports.scale(p, p, 0.5);
      } else {
        this.cam.getPositionWorld(p);
      }
      this.camRoot.getPositionWorld(p1);
      vec3_exports.sub(p, p1, p);
      p[0] += newPosition[0];
      p[1] = newPosition[1];
      p[2] += newPosition[2];
      this.camRoot.setPositionWorld(p);
    }
  };
  __publicField(TeleportComponent, "TypeName", "teleport");
  __publicField(TeleportComponent, "Properties", {
    /** Object that will be placed as indiciation forwhere the player will teleport to. */
    teleportIndicatorMeshObject: { type: Type.Object },
    /** Root of the player, the object that will be positioned on teleportation. */
    camRoot: { type: Type.Object },
    /** Non-vr camera for use outside of VR */
    cam: { type: Type.Object },
    /** Left eye for use in VR*/
    eyeLeft: { type: Type.Object },
    /** Right eye for use in VR*/
    eyeRight: { type: Type.Object },
    /** Handedness for VR cursors to accept trigger events only from respective controller. */
    handedness: {
      type: Type.Enum,
      values: ["input component", "left", "right", "none"],
      default: "input component"
    },
    /** Collision group of valid "floor" objects that can be teleported on */
    floorGroup: { type: Type.Int, default: 1 },
    /** How far the thumbstick needs to be pushed to have the teleport target indicator show up */
    thumbstickActivationThreshhold: { type: Type.Float, default: -0.7 },
    /** How far the thumbstick needs to be released to execute the teleport */
    thumbstickDeactivationThreshhold: { type: Type.Float, default: 0.3 },
    /** Offset to apply to the indicator object, e.g. to avoid it from Z-fighting with the floor */
    indicatorYOffset: { type: Type.Float, default: 0.01 },
    /** Mode for raycasting, whether to use PhysX or simple collision components */
    rayCastMode: {
      type: Type.Enum,
      values: ["collision", "physx"],
      default: "collision"
    },
    /** Max distance for PhysX raycast */
    maxDistance: { type: Type.Float, default: 100 }
  });

  // node_modules/@wonderlandengine/components/dist/trail.js
  var direction = vec3_exports.create();
  var offset = vec3_exports.create();
  var normal = vec3_exports.create();
  var Trail = class extends Component {
    init() {
      this.points = new Array(this.segments + 1);
      for (let i = 0; i < this.points.length; ++i) {
        this.points[i] = vec3_exports.create();
      }
      this.currentPointOffset = 0;
      this.up = [0, 1, 0];
      this.timeTillNext = this.interval;
    }
    start() {
      this.trailContainer = this.engine.scene.addObject();
      this.meshComp = this.trailContainer.addComponent("mesh");
      this.meshComp.material = this.material;
      const vertexCount = 2 * this.points.length;
      this.indexData = new Uint32Array(6 * this.segments);
      for (let i = 0, v = 0; i < vertexCount - 2; i += 2, v += 6) {
        this.indexData.subarray(v, v + 6).set([i + 1, i + 0, i + 2, i + 2, i + 3, i + 1]);
      }
      this.mesh = new Mesh(this.engine, {
        vertexCount,
        indexData: this.indexData,
        indexType: MeshIndexType.UnsignedInt
      });
      this.meshComp.mesh = this.mesh;
    }
    updateVertices() {
      const positions = this.mesh.attribute(MeshAttribute.Position);
      const texCoords = this.mesh.attribute(MeshAttribute.TextureCoordinate);
      const normals = this.mesh.attribute(MeshAttribute.Normal);
      vec3_exports.set(direction, 0, 0, 0);
      for (let i = 0; i < this.points.length; ++i) {
        const curr = this.points[(this.currentPointIndex + i + 1) % this.points.length];
        const next = this.points[(this.currentPointIndex + i + 2) % this.points.length];
        if (i !== this.points.length - 1) {
          vec3_exports.sub(direction, next, curr);
        }
        vec3_exports.cross(offset, this.up, direction);
        vec3_exports.normalize(offset, offset);
        const timeFraction = 1 - this.timeTillNext / this.interval;
        const fraction = (i - timeFraction) / this.segments;
        vec3_exports.scale(offset, offset, (this.taper ? fraction : 1) * this.width / 2);
        positions.set(i * 2, [
          curr[0] - offset[0],
          curr[1] - offset[1],
          curr[2] - offset[2]
        ]);
        positions.set(i * 2 + 1, [
          curr[0] + offset[0],
          curr[1] + offset[1],
          curr[2] + offset[2]
        ]);
        if (normals) {
          vec3_exports.cross(normal, direction, offset);
          vec3_exports.normalize(normal, normal);
          normals.set(i * 2, normal);
          normals.set(i * 2 + 1, normal);
        }
        if (texCoords) {
          texCoords.set(i * 2, [0, fraction]);
          texCoords.set(i * 2 + 1, [1, fraction]);
        }
      }
      this.mesh.update();
    }
    resetTrail() {
      this.object.getTranslationWorld(this.points[0]);
      for (let i = 1; i < this.points.length; ++i) {
        vec3_exports.copy(this.points[i], this.points[0]);
      }
      this.currentPointIndex = 0;
      this.timeTillNext = this.interval;
    }
    update(dt) {
      this.timeTillNext -= dt;
      if (dt > this.resetThreshold) {
        this.resetTrail();
      }
      if (this.timeTillNext < 0) {
        this.currentPointIndex = (this.currentPointIndex + 1) % this.points.length;
        this.timeTillNext = this.timeTillNext % this.interval + this.interval;
      }
      this.object.getTranslationWorld(this.points[this.currentPointIndex]);
      this.updateVertices();
    }
    onActivate() {
      this.resetTrail();
    }
    onDestroy() {
      this.trailContainer.destroy();
      this.mesh.destroy();
    }
  };
  __publicField(Trail, "TypeName", "trail");
  __publicField(Trail, "Properties", {
    /** The material to apply to the trail mesh */
    material: { type: Type.Material },
    /** The number of segments in the trail mesh */
    segments: { type: Type.Int, default: 50 },
    /** The time interval before recording a new point */
    interval: { type: Type.Float, default: 0.1 },
    /** The width of the trail (in world space) */
    width: { type: Type.Float, default: 1 },
    /** Whether or not the trail should taper off */
    taper: { type: Type.Bool, default: true },
    /**
     * The maximum delta time in seconds, above which the trail resets.
     * This prevents the trail from jumping around when updates happen
     * infrequently (e.g. when the tab doesn't have focus).
     */
    resetThreshold: { type: Type.Float, default: 0.5 }
  });

  // node_modules/@wonderlandengine/components/dist/two-joint-ik-solver.js
  Math.clamp = function(v, a, b) {
    return Math.max(a, Math.min(v, b));
  };
  var twoJointIK = function() {
    let ta = new Float32Array(3);
    let ca = new Float32Array(3);
    let ba = new Float32Array(3);
    let ab = new Float32Array(3);
    let cb = new Float32Array(3);
    let axis0 = new Float32Array(3);
    let axis1 = new Float32Array(3);
    let temp = new Float32Array(4);
    let r0 = new Float32Array(4);
    let r1 = new Float32Array(4);
    let r2 = new Float32Array(4);
    return function(a_lr, b_lr, a, b, c, t, eps, a_gr, b_gr, helper) {
      vec3_exports.sub(ba, b, a);
      const lab = vec3_exports.length(ba);
      vec3_exports.sub(ta, b, c);
      const lcb = vec3_exports.length(ta);
      vec3_exports.sub(ta, t, a);
      const lat = Math.clamp(vec3_exports.length(ta), eps, lab + lcb - eps);
      vec3_exports.sub(ca, c, a);
      vec3_exports.sub(ab, a, b);
      vec3_exports.sub(cb, c, b);
      vec3_exports.normalize(ca, ca);
      vec3_exports.normalize(ba, ba);
      vec3_exports.normalize(ab, ab);
      vec3_exports.normalize(cb, cb);
      vec3_exports.normalize(ta, ta);
      const ac_ab_0 = Math.acos(Math.clamp(vec3_exports.dot(ca, ba), -1, 1));
      const ba_bc_0 = Math.acos(Math.clamp(vec3_exports.dot(ab, cb), -1, 1));
      const ac_at_0 = Math.acos(Math.clamp(vec3_exports.dot(ca, ta), -1, 1));
      const ac_ab_1 = Math.acos(Math.clamp((lcb * lcb - lab * lab - lat * lat) / (-2 * lab * lat), -1, 1));
      const ba_bc_1 = Math.acos(Math.clamp((lat * lat - lab * lab - lcb * lcb) / (-2 * lab * lcb), -1, 1));
      vec3_exports.sub(ca, c, a);
      vec3_exports.sub(ba, b, a);
      vec3_exports.sub(ta, t, a);
      vec3_exports.cross(axis0, ca, ba);
      vec3_exports.cross(axis1, ca, ta);
      if (helper) {
        vec3_exports.sub(ba, helper, b);
        vec3_exports.transformQuat(ba, [0, 0, -1], b_gr);
      } else {
        vec3_exports.sub(ba, b, a);
      }
      const l2 = vec3_exports.length(axis0);
      if (l2 == 0) {
        axis0.set([1, 0, 0]);
      } else {
        vec3_exports.scale(axis0, axis0, 1 / l2);
      }
      vec3_exports.normalize(axis1, axis1);
      quat_exports.conjugate(a_gr, a_gr);
      quat_exports.setAxisAngle(r0, vec3_exports.transformQuat(temp, axis0, a_gr), ac_ab_1 - ac_ab_0);
      quat_exports.setAxisAngle(r2, vec3_exports.transformQuat(temp, axis1, a_gr), ac_at_0);
      quat_exports.mul(a_lr, a_lr, quat_exports.mul(temp, r0, r2));
      quat_exports.normalize(a_lr, a_lr);
      quat_exports.conjugate(b_gr, b_gr);
      quat_exports.setAxisAngle(r1, vec3_exports.transformQuat(temp, axis0, b_gr), ba_bc_1 - ba_bc_0);
      quat_exports.mul(b_lr, b_lr, r1);
      quat_exports.normalize(b_lr, b_lr);
    };
  }();
  var TwoJointIkSolver = class extends Component {
    init() {
      this.pos = new Float32Array(3 * 7);
      this.p = [
        this.pos.subarray(0, 3),
        this.pos.subarray(3, 6),
        this.pos.subarray(6, 9),
        this.pos.subarray(9, 12),
        this.pos.subarray(12, 15),
        this.pos.subarray(15, 18),
        this.pos.subarray(18, 21)
      ];
    }
    update() {
      const p = this.p;
      this.root.getTranslationWorld(p[0]);
      this.middle.getTranslationWorld(p[1]);
      this.end.getTranslationWorld(p[2]);
      this.target.getTranslationWorld(p[3]);
      const tla = p[4];
      const tlb = p[5];
      this.root.getTranslationLocal(tla);
      this.middle.getTranslationLocal(tlb);
      if (this.helper)
        this.helper.getTranslationWorld(p[6]);
      twoJointIK(this.root.transformLocal, this.middle.transformLocal, p[0], p[1], p[2], p[3], 0.01, this.root.transformWorld.subarray(0, 4), this.middle.transformWorld.subarray(0, 4), this.helper ? p[6] : null);
      this.root.setTranslationLocal(tla);
      this.middle.setTranslationLocal(tlb);
      this.root.setDirty();
      this.middle.setDirty();
    }
  };
  __publicField(TwoJointIkSolver, "TypeName", "two-joint-ik-solver");
  __publicField(TwoJointIkSolver, "Properties", {
    /** Root bone, never moves */
    root: { type: Type.Object },
    /** Bone attached to the root */
    middle: { type: Type.Object },
    /** Bone attached to the middle */
    end: { type: Type.Object },
    /** Target the joins should reach for */
    target: { type: Type.Object },
    /** Helper object to use to determine joint rotation axis */
    helper: { type: Type.Object }
  });

  // node_modules/@wonderlandengine/components/dist/video-texture.js
  var VideoTexture = class extends Component {
    init() {
      if (!this.material) {
        throw Error("video-texture: material property not set");
      }
      this.loaded = false;
      this.frameUpdateRequested = true;
    }
    start() {
      this.video = document.createElement("video");
      this.video.src = this.url;
      this.video.crossOrigin = "anonymous";
      this.video.playsInline = true;
      this.video.loop = this.loop;
      this.video.muted = this.muted;
      this.video.addEventListener("playing", () => {
        this.loaded = true;
      });
      if (this.autoplay) {
        const playAfterUserGesture = () => {
          this.video.play();
          window.removeEventListener("click", playAfterUserGesture);
          window.removeEventListener("touchstart", playAfterUserGesture);
        };
        window.addEventListener("click", playAfterUserGesture);
        window.addEventListener("touchstart", playAfterUserGesture);
      }
    }
    applyTexture() {
      const mat = this.material;
      const shader = mat.shader;
      const texture = this.texture = new Texture(this.engine, this.video);
      if (!setFirstMaterialTexture(mat, texture, this.textureProperty)) {
        console.error("Shader", shader, "not supported by video-texture");
      }
      if ("requestVideoFrameCallback" in this.video) {
        this.video.requestVideoFrameCallback(this.updateVideo.bind(this));
      } else {
        this.video.addEventListener("timeupdate", () => {
          this.frameUpdateRequested = true;
        });
      }
    }
    update(dt) {
      if (this.loaded && this.frameUpdateRequested) {
        if (this.texture) {
          this.texture.update();
        } else {
          this.applyTexture();
        }
        this.frameUpdateRequested = false;
      }
    }
    updateVideo() {
      this.frameUpdateRequested = true;
      this.video.requestVideoFrameCallback(this.updateVideo.bind(this));
    }
  };
  __publicField(VideoTexture, "TypeName", "video-texture");
  __publicField(VideoTexture, "Properties", {
    /** URL to download video from */
    url: Property.string(),
    /** Material to apply the video texture to */
    material: Property.material(),
    /** Whether to loop the video */
    loop: Property.bool(true),
    /** Whether to automatically start playing the video */
    autoplay: Property.bool(true),
    /** Whether to mute sound */
    muted: Property.bool(true),
    /** Name of the texture property to set */
    textureProperty: Property.string("auto")
  });

  // node_modules/@wonderlandengine/components/dist/vr-mode-active-switch.js
  var VrModeActiveSwitch = class extends Component {
    start() {
      this.components = [];
      this.getComponents(this.object);
      this.onXRSessionEnd();
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    getComponents(obj) {
      const comps = obj.getComponents().filter((c) => c.type !== "vr-mode-active-switch");
      this.components = this.components.concat(comps);
      if (this.affectChildren) {
        let children = obj.children;
        for (let i = 0; i < children.length; ++i) {
          this.getComponents(children[i]);
        }
      }
    }
    setComponentsActive(active) {
      const comps = this.components;
      for (let i = 0; i < comps.length; ++i) {
        comps[i].active = active;
      }
    }
    onXRSessionStart() {
      this.setComponentsActive(this.activateComponents == 0);
    }
    onXRSessionEnd() {
      this.setComponentsActive(this.activateComponents != 0);
    }
  };
  __publicField(VrModeActiveSwitch, "TypeName", "vr-mode-active-switch");
  __publicField(VrModeActiveSwitch, "Properties", {
    /** When components should be active: In VR or when not in VR */
    activateComponents: {
      type: Type.Enum,
      values: ["in VR", "in non-VR"],
      default: "in VR"
    },
    /** Whether child object's components should be affected */
    affectChildren: { type: Type.Bool, default: true }
  });

  // node_modules/@wonderlandengine/components/dist/plane-detection.js
  var import_earcut = __toESM(require_earcut(), 1);
  var __decorate12 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var tempVec32 = new Float32Array(3);
  function extentsFromContour(out, points) {
    if (points.length == 0)
      return out;
    let absMaxX = Math.abs(points[0].x);
    let absMaxZ = Math.abs(points[0].z);
    for (let i = 1; i < points.length; ++i) {
      absMaxX = Math.max(absMaxX, Math.abs(points[i].x));
      absMaxZ = Math.max(absMaxZ, Math.abs(points[i].z));
    }
    out[0] = absMaxX;
    out[1] = 0;
    out[2] = absMaxZ;
  }
  function within(x, a, b) {
    if (a > b)
      return x < a && x > b;
    return x > a && x < b;
  }
  function isPointLocalOnXRPlanePolygon(p, plane) {
    const points = plane.polygon;
    if (points.length < 3)
      return false;
    const pX = p[0];
    const pZ = p[2];
    let intersections = 0;
    for (let n = 0, l2 = points.length - 1; n < points.length; ++n) {
      const aX = points[l2].x;
      const aZ = points[l2].z;
      const s = (points[n].z - aZ) / (points[n].x - aX);
      const x = Math.abs((pZ - aZ) / s);
      if (x >= 0 && x <= 1 && within(x + pX, aX, points[n].x))
        ++intersections;
      l2 = n;
    }
    return (intersections & 1) == 0;
  }
  function isPointWorldOnXRPlanePolygon(object, p, plane) {
    if (plane.polygon.length < 3)
      return false;
    isPointLocalOnXRPlanePolygon(object.transformPointInverseWorld(tempVec32, p), plane);
  }
  function planeMeshFromContour(engine, points, meshToUpdate = null) {
    const vertexCount = points.length;
    const vertices = new Float32Array(vertexCount * 2);
    for (let i = 0, d = 0; i < vertexCount; ++i, d += 2) {
      vertices[d] = points[i].x;
      vertices[d + 1] = points[i].z;
    }
    const triangles = (0, import_earcut.default)(vertices);
    const mesh = meshToUpdate || new Mesh(engine, {
      vertexCount,
      /* Assumption here that we will never have more than 256 points
       * in the detected plane meshes! */
      indexType: MeshIndexType.UnsignedByte,
      indexData: triangles
    });
    if (mesh.vertexCount !== vertexCount) {
      console.warn("vertexCount of meshToUpdate did not match required vertexCount");
      return mesh;
    }
    const positions = mesh.attribute(MeshAttribute.Position);
    const textureCoords = mesh.attribute(MeshAttribute.TextureCoordinate);
    const normals = mesh.attribute(MeshAttribute.Normal);
    tempVec32[1] = 0;
    for (let i = 0, s = 0; i < vertexCount; ++i, s += 2) {
      tempVec32[0] = vertices[s];
      tempVec32[2] = vertices[s + 1];
      positions.set(i, tempVec32);
    }
    textureCoords?.set(0, vertices);
    if (normals) {
      tempVec32[0] = 0;
      tempVec32[1] = 1;
      tempVec32[2] = 0;
      for (let i = 0; i < vertexCount; ++i) {
        normals.set(i, tempVec32);
      }
    }
    if (meshToUpdate)
      mesh.update();
    return mesh;
  }
  var _planeLost, planeLost_fn, _planeFound, planeFound_fn, _planeUpdate, planeUpdate_fn, _planeUpdatePose, planeUpdatePose_fn;
  var PlaneDetection = class extends Component {
    constructor() {
      super(...arguments);
      __privateAdd(this, _planeLost);
      __privateAdd(this, _planeFound);
      __privateAdd(this, _planeUpdate);
      __privateAdd(this, _planeUpdatePose);
      /**
       * Material to assign to created plane meshes or `null` if meshes should not be created.
       */
      __publicField(this, "planeMaterial", null);
      /**
       * Collision mask to assign to newly created collision components or a negative value if
       * collision components should not be created.
       */
      __publicField(this, "collisionMask", -1);
      /** Map of all planes and their last updated timestamps */
      __publicField(this, "planes", /* @__PURE__ */ new Map());
      /** Objects generated for each XRPlane */
      __publicField(this, "planeObjects", /* @__PURE__ */ new Map());
      /** Called when a plane starts tracking */
      __publicField(this, "onPlaneFound", new Emitter());
      /** Called when a plane stops tracking */
      __publicField(this, "onPlaneLost", new Emitter());
    }
    update() {
      if (!this.engine.xr?.frame)
        return;
      if (this.engine.xr.frame.detectedPlanes === void 0) {
        console.error("plane-detection: WebXR feature not available.");
        this.active = false;
        return;
      }
      const detectedPlanes = this.engine.xr.frame.detectedPlanes;
      for (const [plane, _] of this.planes) {
        if (!detectedPlanes.has(plane)) {
          __privateMethod(this, _planeLost, planeLost_fn).call(this, plane);
        }
      }
      detectedPlanes.forEach((plane) => {
        if (this.planes.has(plane)) {
          if (plane.lastChangedTime > this.planes.get(plane)) {
            __privateMethod(this, _planeUpdate, planeUpdate_fn).call(this, plane);
          }
        } else {
          __privateMethod(this, _planeFound, planeFound_fn).call(this, plane);
        }
        __privateMethod(this, _planeUpdatePose, planeUpdatePose_fn).call(this, plane);
      });
    }
  };
  _planeLost = new WeakSet();
  planeLost_fn = function(plane) {
    this.planes.delete(plane);
    const o = this.planeObjects.get(plane);
    this.onPlaneLost.notify(plane, o);
    if (o.objectId > 0)
      o.destroy();
  };
  _planeFound = new WeakSet();
  planeFound_fn = function(plane) {
    this.planes.set(plane, plane.lastChangedTime);
    const o = this.engine.scene.addObject(this.object);
    this.planeObjects.set(plane, o);
    if (this.planeMaterial) {
      o.addComponent(MeshComponent, {
        mesh: planeMeshFromContour(this.engine, plane.polygon),
        material: this.planeMaterial
      });
    }
    if (this.collisionMask >= 0) {
      extentsFromContour(tempVec32, plane.polygon);
      tempVec32[1] = 0.025;
      o.addComponent(CollisionComponent, {
        group: this.collisionMask,
        collider: Collider.Box,
        extents: tempVec32
      });
    }
    this.onPlaneFound.notify(plane, o);
  };
  _planeUpdate = new WeakSet();
  planeUpdate_fn = function(plane) {
    this.planes.set(plane, plane.lastChangedTime);
    const planeMesh = this.planeObjects.get(plane).getComponent(MeshComponent);
    if (!planeMesh)
      return;
    planeMeshFromContour(this.engine, plane.polygon, planeMesh.mesh);
  };
  _planeUpdatePose = new WeakSet();
  planeUpdatePose_fn = function(plane) {
    const o = this.planeObjects.get(plane);
    const pose = this.engine.xr.frame.getPose(plane.planeSpace, this.engine.xr.currentReferenceSpace);
    if (!pose) {
      o.active = false;
      return;
    }
    setXRRigidTransformLocal(o, pose.transform);
  };
  __publicField(PlaneDetection, "TypeName", "plane-detection");
  __decorate12([
    property.material()
  ], PlaneDetection.prototype, "planeMaterial", void 0);
  __decorate12([
    property.int()
  ], PlaneDetection.prototype, "collisionMask", void 0);

  // node_modules/@wonderlandengine/components/dist/vrm.js
  var VRM_ROLL_AXES = {
    X: [1, 0, 0],
    Y: [0, 1, 0],
    Z: [0, 0, 1]
  };
  var VRM_AIM_AXES = {
    PositiveX: [1, 0, 0],
    NegativeX: [-1, 0, 0],
    PositiveY: [0, 1, 0],
    NegativeY: [0, -1, 0],
    PositiveZ: [0, 0, 1],
    NegativeZ: [0, 0, -1]
  };
  var Vrm = class extends Component {
    /** Meta information about the VRM model */
    meta = null;
    /** The humanoid bones of the VRM model */
    bones = {
      /* Torso */
      hips: null,
      spine: null,
      chest: null,
      upperChest: null,
      neck: null,
      /* Head */
      head: null,
      leftEye: null,
      rightEye: null,
      jaw: null,
      /* Legs */
      leftUpperLeg: null,
      leftLowerLeg: null,
      leftFoot: null,
      leftToes: null,
      rightUpperLeg: null,
      rightLowerLeg: null,
      rightFoot: null,
      rightToes: null,
      /* Arms */
      leftShoulder: null,
      leftUpperArm: null,
      leftLowerArm: null,
      leftHand: null,
      rightShoulder: null,
      rightUpperArm: null,
      rightLowerArm: null,
      rightHand: null,
      /* Fingers */
      leftThumbMetacarpal: null,
      leftThumbProximal: null,
      leftThumbDistal: null,
      leftIndexProximal: null,
      leftIndexIntermediate: null,
      leftIndexDistal: null,
      leftMiddleProximal: null,
      leftMiddleIntermediate: null,
      leftMiddleDistal: null,
      leftRingProximal: null,
      leftRingIntermediate: null,
      leftRingDistal: null,
      leftLittleProximal: null,
      leftLittleIntermediate: null,
      leftLittleDistal: null,
      rightThumbMetacarpal: null,
      rightThumbProximal: null,
      rightThumbDistal: null,
      rightIndexProximal: null,
      rightIndexIntermediate: null,
      rightIndexDistal: null,
      rightMiddleProximal: null,
      rightMiddleIntermediate: null,
      rightMiddleDistal: null,
      rightRingProximal: null,
      rightRingIntermediate: null,
      rightRingDistal: null,
      rightLittleProximal: null,
      rightLittleIntermediate: null,
      rightLittleDistal: null
    };
    /** Rotations of the bones in the rest pose (T-pose) */
    restPose = {};
    /* All node constraints, ordered to deal with dependencies */
    _nodeConstraints = [];
    /* VRMC_springBone chains */
    _springChains = [];
    /* Spherical colliders for spring bones */
    _sphereColliders = [];
    /* Capsule shaped colliders for spring bones */
    _capsuleColliders = [];
    /* Indicates which meshes are rendered in first/third person views */
    _firstPersonAnnotations = [];
    /* Contains details for (bone type) lookAt behaviour */
    _lookAt = null;
    /* Whether or not the VRM component has been initialized with `initializeVrm` */
    _initialized = false;
    init() {
      this._tempV3 = vec3_exports.create();
      this._tempV3A = vec3_exports.create();
      this._tempV3B = vec3_exports.create();
      this._tempQuat = quat_exports.create();
      this._tempQuatA = quat_exports.create();
      this._tempQuatB = quat_exports.create();
      this._tempMat4A = mat4_exports.create();
      this._tempQuat2 = quat2_exports.create();
      this._tailToShape = vec3_exports.create();
      this._headToTail = vec3_exports.create();
      this._inertia = vec3_exports.create();
      this._stiffness = vec3_exports.create();
      this._external = vec3_exports.create();
      this._rightVector = vec3_exports.set(vec3_exports.create(), 1, 0, 0);
      this._upVector = vec3_exports.set(vec3_exports.create(), 0, 1, 0);
      this._forwardVector = vec3_exports.set(vec3_exports.create(), 0, 0, 1);
      this._identityQuat = quat_exports.identity(quat_exports.create());
      this._rad2deg = 180 / Math.PI;
    }
    start() {
      if (!this.src) {
        console.error("vrm: src property not set");
        return;
      }
      this.engine.scene.append(this.src, { loadGltfExtensions: true }).then(({ root, extensions }) => {
        root.children.forEach((child) => child.parent = this.object);
        this._initializeVrm(extensions);
        root.destroy();
      });
    }
    /**
     * Parses the VRM glTF extensions and initializes the vrm component.
     * @param {GLTFExtensions} extensions The glTF extensions for the VRM model
     */
    _initializeVrm(extensions) {
      if (this._initialized) {
        throw Error("VRM component has already been initialized");
      }
      const VRMC_vrm = extensions.root["VRMC_vrm"];
      if (!VRMC_vrm) {
        throw Error("Missing VRM extensions");
      }
      if (VRMC_vrm.specVersion !== "1.0") {
        throw Error(`Unsupported VRM version, only 1.0 is supported, but encountered '${VRMC_vrm.specVersion}'`);
      }
      this.meta = VRMC_vrm.meta;
      this._parseHumanoid(VRMC_vrm.humanoid, extensions);
      if (VRMC_vrm.firstPerson) {
        this._parseFirstPerson(VRMC_vrm.firstPerson, extensions);
      }
      if (VRMC_vrm.lookAt) {
        this._parseLookAt(VRMC_vrm.lookAt);
      }
      this._findAndParseNodeConstraints(extensions);
      const springBone = extensions.root["VRMC_springBone"];
      if (springBone) {
        this._parseAndInitializeSpringBones(springBone, extensions);
      }
      this._initialized = true;
    }
    _parseHumanoid(humanoid, extensions) {
      for (const boneName in humanoid.humanBones) {
        if (!(boneName in this.bones)) {
          console.warn(`Unrecognized bone '${boneName}'`);
          continue;
        }
        const node = humanoid.humanBones[boneName].node;
        const objectId = extensions.idMapping[node];
        this.bones[boneName] = this.engine.wrapObject(objectId);
        this.restPose[boneName] = quat_exports.copy(quat_exports.create(), this.bones[boneName].rotationLocal);
      }
    }
    _parseFirstPerson(firstPerson, extensions) {
      for (const meshAnnotation of firstPerson.meshAnnotations) {
        const annotation = {
          node: this.engine.wrapObject(extensions.idMapping[meshAnnotation.node]),
          firstPerson: true,
          thirdPerson: true
        };
        switch (meshAnnotation.type) {
          case "firstPersonOnly":
            annotation.thirdPerson = false;
            break;
          case "thirdPersonOnly":
            annotation.firstPerson = false;
            break;
          case "both":
            break;
          case "auto":
            console.warn("First person mesh annotation type 'auto' is not supported, treating as 'both'!");
            break;
          default:
            console.error(`Invalid mesh annotation type '${meshAnnotation.type}'`);
            break;
        }
        this._firstPersonAnnotations.push(annotation);
      }
    }
    _parseLookAt(lookAt2) {
      if (lookAt2.type !== "bone") {
        console.warn(`Unsupported lookAt type '${lookAt2.type}', only 'bone' is supported`);
        return;
      }
      const parseRangeMap = (rangeMap) => {
        return {
          inputMaxValue: rangeMap.inputMaxValue,
          outputScale: rangeMap.outputScale
        };
      };
      this._lookAt = {
        offsetFromHeadBone: lookAt2.offsetFromHeadBone || [0, 0, 0],
        horizontalInner: parseRangeMap(lookAt2.rangeMapHorizontalInner),
        horizontalOuter: parseRangeMap(lookAt2.rangeMapHorizontalOuter),
        verticalDown: parseRangeMap(lookAt2.rangeMapVerticalDown),
        verticalUp: parseRangeMap(lookAt2.rangeMapVerticalUp)
      };
    }
    _findAndParseNodeConstraints(extensions) {
      const traverse = (object) => {
        const nodeExtensions = extensions.node[object.objectId];
        if (nodeExtensions && "VRMC_node_constraint" in nodeExtensions) {
          const nodeConstraintExtension = nodeExtensions["VRMC_node_constraint"];
          const constraint = nodeConstraintExtension.constraint;
          let type, axis;
          if ("roll" in constraint) {
            type = "roll";
            axis = VRM_ROLL_AXES[constraint.roll.rollAxis];
          } else if ("aim" in constraint) {
            type = "aim";
            axis = VRM_AIM_AXES[constraint.aim.aimAxis];
          } else if ("rotation" in constraint) {
            type = "rotation";
          }
          if (type) {
            const source = this.engine.wrapObject(extensions.idMapping[constraint[type].source]);
            this._nodeConstraints.push({
              type,
              source,
              destination: object,
              axis,
              weight: constraint[type].weight,
              /* Rest pose */
              destinationRestLocalRotation: quat_exports.copy(quat_exports.create(), object.rotationLocal),
              sourceRestLocalRotation: quat_exports.copy(quat_exports.create(), source.rotationLocal),
              sourceRestLocalRotationInv: quat_exports.invert(quat_exports.create(), source.rotationLocal)
            });
          } else {
            console.warn("Unrecognized or invalid VRMC_node_constraint, ignoring it");
          }
        }
        for (const child of object.children) {
          traverse(child);
        }
      };
      traverse(this.object);
    }
    _parseAndInitializeSpringBones(springBone, extensions) {
      const colliders = (springBone.colliders || []).map((collider, i) => {
        const shapeType = "capsule" in collider.shape ? "capsule" : "sphere";
        return {
          id: i,
          object: this.engine.wrapObject(extensions.idMapping[collider.node]),
          shape: {
            isCapsule: shapeType === "capsule",
            radius: collider.shape[shapeType].radius,
            offset: collider.shape[shapeType].offset,
            tail: collider.shape[shapeType].tail
          },
          cache: {
            head: vec3_exports.create(),
            tail: vec3_exports.create()
          }
        };
      });
      this._sphereColliders = colliders.filter((c) => !c.shape.isCapsule);
      this._capsuleColliders = colliders.filter((c) => c.shape.isCapsule);
      const colliderGroups = (springBone.colliderGroups || []).map((group) => ({
        name: group.name,
        colliders: group.colliders.map((c) => colliders[c])
      }));
      for (const spring of springBone.springs) {
        const joints = [];
        for (const joint of spring.joints) {
          const springJoint = {
            hitRadius: 0,
            stiffness: 1,
            gravityPower: 0,
            gravityDir: [0, -1, 0],
            dragForce: 0.5,
            node: null,
            state: null
          };
          Object.assign(springJoint, joint);
          springJoint.node = this.engine.wrapObject(extensions.idMapping[springJoint.node]);
          joints.push(springJoint);
        }
        const springChainColliders = (spring.colliderGroups || []).flatMap((cg) => colliderGroups[cg].colliders);
        this._springChains.push({
          name: spring.name,
          center: spring.center ? this.engine.wrapObject(extensions.idMapping[spring.center]) : null,
          joints,
          sphereColliders: springChainColliders.filter((c) => !c.shape.isCapsule),
          capsuleColliders: springChainColliders.filter((c) => c.shape.isCapsule)
        });
      }
      for (const springChain of this._springChains) {
        for (let i = 0; i < springChain.joints.length - 1; ++i) {
          const springBoneJoint = springChain.joints[i];
          const childSpringBoneJoint = springChain.joints[i + 1];
          const springBonePosition = springBoneJoint.node.getTranslationWorld(vec3_exports.create());
          const childSpringBonePosition = childSpringBoneJoint.node.getTranslationWorld(vec3_exports.create());
          const boneDirection = vec3_exports.subtract(this._tempV3A, springBonePosition, childSpringBonePosition);
          const state = {
            prevTail: childSpringBonePosition,
            currentTail: vec3_exports.copy(vec3_exports.create(), childSpringBonePosition),
            initialLocalRotation: quat_exports.copy(quat_exports.create(), springBoneJoint.node.rotationLocal),
            initialLocalTransformInvert: quat2_exports.invert(quat2_exports.create(), springBoneJoint.node.transformLocal),
            boneAxis: vec3_exports.normalize(vec3_exports.create(), childSpringBoneJoint.node.getTranslationLocal(this._tempV3)),
            /* Ensure bone length is at least 1cm to avoid jittery behaviour from zero-length bones */
            boneLength: Math.max(0.01, vec3_exports.length(boneDirection)),
            /* Tail positions in center space, if needed */
            prevTailCenter: null,
            currentTailCenter: null
          };
          if (springChain.center) {
            state.prevTailCenter = springChain.center.transformPointInverseWorld(vec3_exports.create(), childSpringBonePosition);
            state.currentTailCenter = vec3_exports.copy(vec3_exports.create(), childSpringBonePosition);
          }
          springBoneJoint.state = state;
        }
      }
    }
    update(dt) {
      if (!this._initialized) {
        return;
      }
      this._resolveLookAt();
      this._resolveConstraints();
      this._updateSpringBones(dt);
    }
    _rangeMap(rangeMap, input) {
      const maxValue = rangeMap.inputMaxValue;
      const outputScale = rangeMap.outputScale;
      return Math.min(input, maxValue) / maxValue * outputScale;
    }
    _resolveLookAt() {
      if (!this._lookAt || !this.lookAtTarget) {
        return;
      }
      const lookAtSource = this.bones.head.transformPointWorld(this._tempV3A, this._lookAt.offsetFromHeadBone);
      const lookAtTarget = this.lookAtTarget.getTranslationWorld(this._tempV3B);
      const lookAtDirection = vec3_exports.sub(this._tempV3A, lookAtTarget, lookAtSource);
      vec3_exports.normalize(lookAtDirection, lookAtDirection);
      this.bones.head.parent.transformVectorInverseWorld(lookAtDirection);
      const z = vec3_exports.dot(lookAtDirection, this._forwardVector);
      const x = vec3_exports.dot(lookAtDirection, this._rightVector);
      const yaw = Math.atan2(x, z) * this._rad2deg;
      const xz = Math.sqrt(x * x + z * z);
      const y = vec3_exports.dot(lookAtDirection, this._upVector);
      let pitch = Math.atan2(-y, xz) * this._rad2deg;
      if (pitch > 0) {
        pitch = this._rangeMap(this._lookAt.verticalDown, pitch);
      } else {
        pitch = -this._rangeMap(this._lookAt.verticalUp, -pitch);
      }
      if (this.bones.leftEye) {
        let yawLeft = yaw;
        if (yawLeft > 0) {
          yawLeft = this._rangeMap(this._lookAt.horizontalInner, yawLeft);
        } else {
          yawLeft = -this._rangeMap(this._lookAt.horizontalOuter, -yawLeft);
        }
        const eyeRotation = quat_exports.fromEuler(this._tempQuatA, pitch, yawLeft, 0);
        this.bones.leftEye.rotationLocal = quat_exports.multiply(eyeRotation, this.restPose.leftEye, eyeRotation);
      }
      if (this.bones.rightEye) {
        let yawRight = yaw;
        if (yawRight > 0) {
          yawRight = this._rangeMap(this._lookAt.horizontalOuter, yawRight);
        } else {
          yawRight = -this._rangeMap(this._lookAt.horizontalInner, -yawRight);
        }
        const eyeRotation = quat_exports.fromEuler(this._tempQuatA, pitch, yawRight, 0);
        this.bones.rightEye.rotationLocal = quat_exports.multiply(eyeRotation, this.restPose.rightEye, eyeRotation);
      }
    }
    _resolveConstraints() {
      for (const nodeConstraint of this._nodeConstraints) {
        this._resolveConstraint(nodeConstraint);
      }
    }
    _resolveConstraint(nodeConstraint) {
      const dstRestQuat = nodeConstraint.destinationRestLocalRotation;
      const srcRestQuatInv = nodeConstraint.sourceRestLocalRotationInv;
      const targetQuat = quat_exports.identity(this._tempQuatA);
      switch (nodeConstraint.type) {
        case "roll":
          {
            const deltaSrcQuat = quat_exports.multiply(this._tempQuatA, srcRestQuatInv, nodeConstraint.source.rotationLocal);
            const deltaSrcQuatInParent = quat_exports.multiply(this._tempQuatA, nodeConstraint.sourceRestLocalRotation, deltaSrcQuat);
            quat_exports.mul(deltaSrcQuatInParent, deltaSrcQuatInParent, srcRestQuatInv);
            const dstRestQuatInv = quat_exports.invert(this._tempQuatB, dstRestQuat);
            const deltaSrcQuatInDst = quat_exports.multiply(this._tempQuatB, dstRestQuatInv, deltaSrcQuatInParent);
            quat_exports.multiply(deltaSrcQuatInDst, deltaSrcQuatInDst, dstRestQuat);
            const toVec = vec3_exports.transformQuat(this._tempV3A, nodeConstraint.axis, deltaSrcQuatInDst);
            const fromToQuat = quat_exports.rotationTo(this._tempQuatA, nodeConstraint.axis, toVec);
            quat_exports.mul(targetQuat, dstRestQuat, quat_exports.invert(this._tempQuat, fromToQuat));
            quat_exports.mul(targetQuat, targetQuat, deltaSrcQuatInDst);
          }
          break;
        case "aim":
          {
            const dstParentWorldQuat = nodeConstraint.destination.parent.rotationWorld;
            const fromVec = vec3_exports.transformQuat(this._tempV3A, nodeConstraint.axis, dstRestQuat);
            vec3_exports.transformQuat(fromVec, fromVec, dstParentWorldQuat);
            const toVec = nodeConstraint.source.getTranslationWorld(this._tempV3B);
            vec3_exports.sub(toVec, toVec, nodeConstraint.destination.getTranslationWorld(this._tempV3));
            vec3_exports.normalize(toVec, toVec);
            const fromToQuat = quat_exports.rotationTo(this._tempQuatA, fromVec, toVec);
            quat_exports.mul(targetQuat, quat_exports.invert(this._tempQuat, dstParentWorldQuat), fromToQuat);
            quat_exports.mul(targetQuat, targetQuat, dstParentWorldQuat);
            quat_exports.mul(targetQuat, targetQuat, dstRestQuat);
          }
          break;
        case "rotation":
          {
            const srcDeltaQuat = quat_exports.mul(targetQuat, srcRestQuatInv, nodeConstraint.source.rotationLocal);
            quat_exports.mul(targetQuat, dstRestQuat, srcDeltaQuat);
          }
          break;
      }
      quat_exports.slerp(targetQuat, dstRestQuat, targetQuat, nodeConstraint.weight);
      nodeConstraint.destination.rotationLocal = targetQuat;
    }
    _updateSpringBones(dt) {
      this._sphereColliders.forEach(({ object, shape, cache }) => {
        const offset2 = vec3_exports.copy(cache.head, shape.offset);
        object.transformVectorWorld(offset2);
        vec3_exports.add(cache.head, object.getTranslationWorld(this._tempV3), offset2);
      });
      this._capsuleColliders.forEach(({ object, shape, cache }) => {
        const shapeCenter = object.getTranslationWorld(this._tempV3A);
        const headOffset = vec3_exports.copy(cache.head, shape.offset);
        object.transformVectorWorld(headOffset);
        vec3_exports.add(cache.head, shapeCenter, headOffset);
        const tailOffset = vec3_exports.copy(cache.tail, shape.tail);
        object.transformVectorWorld(tailOffset);
        vec3_exports.add(cache.tail, shapeCenter, tailOffset);
      });
      this._springChains.forEach((springChain) => {
        for (let i = 0; i < springChain.joints.length - 1; ++i) {
          const joint = springChain.joints[i];
          const parentWorldRotation = joint.node.parent ? joint.node.parent.rotationWorld : this._identityQuat;
          const inertia = this._inertia;
          if (springChain.center) {
            vec3_exports.sub(inertia, joint.state.currentTailCenter, joint.state.prevTailCenter);
            springChain.center.transformVectorWorld(inertia);
          } else {
            vec3_exports.sub(inertia, joint.state.currentTail, joint.state.prevTail);
          }
          vec3_exports.scale(inertia, inertia, 1 - joint.dragForce);
          const stiffness = vec3_exports.copy(this._stiffness, joint.state.boneAxis);
          vec3_exports.transformQuat(stiffness, stiffness, joint.state.initialLocalRotation);
          vec3_exports.transformQuat(stiffness, stiffness, parentWorldRotation);
          vec3_exports.scale(stiffness, stiffness, dt * joint.stiffness);
          const external = vec3_exports.scale(this._external, joint.gravityDir, dt * joint.gravityPower);
          const nextTail = vec3_exports.copy(this._tempV3A, joint.state.currentTail);
          vec3_exports.add(nextTail, nextTail, inertia);
          vec3_exports.add(nextTail, nextTail, stiffness);
          vec3_exports.add(nextTail, nextTail, external);
          const worldPosition = joint.node.getTranslationWorld(this._tempV3B);
          vec3_exports.sub(nextTail, nextTail, worldPosition);
          vec3_exports.normalize(nextTail, nextTail);
          vec3_exports.scaleAndAdd(nextTail, worldPosition, nextTail, joint.state.boneLength);
          for (const { shape, cache } of springChain.sphereColliders) {
            let tailToShape = this._tailToShape;
            const sphereCenter = cache.head;
            tailToShape = vec3_exports.sub(tailToShape, nextTail, sphereCenter);
            const radius = shape.radius + joint.hitRadius;
            const dist2 = vec3_exports.length(tailToShape) - radius;
            if (dist2 < 0) {
              vec3_exports.normalize(tailToShape, tailToShape);
              vec3_exports.scaleAndAdd(nextTail, nextTail, tailToShape, -dist2);
              vec3_exports.sub(nextTail, nextTail, worldPosition);
              vec3_exports.normalize(nextTail, nextTail);
              vec3_exports.scaleAndAdd(nextTail, worldPosition, nextTail, joint.state.boneLength);
            }
          }
          for (const { shape, cache } of springChain.capsuleColliders) {
            let tailToShape = this._tailToShape;
            const head = cache.head;
            const tail = cache.tail;
            tailToShape = vec3_exports.sub(tailToShape, nextTail, head);
            const headToTail = vec3_exports.sub(this._headToTail, tail, head);
            const dot5 = vec3_exports.dot(headToTail, tailToShape);
            if (vec3_exports.squaredLength(headToTail) <= dot5) {
              vec3_exports.sub(tailToShape, nextTail, tail);
            } else if (dot5 > 0) {
              vec3_exports.scale(headToTail, headToTail, dot5 / vec3_exports.squaredLength(headToTail));
              vec3_exports.sub(tailToShape, tailToShape, headToTail);
            }
            const radius = shape.radius + joint.hitRadius;
            const dist2 = vec3_exports.length(tailToShape) - radius;
            if (dist2 < 0) {
              vec3_exports.normalize(tailToShape, tailToShape);
              vec3_exports.scaleAndAdd(nextTail, nextTail, tailToShape, -dist2);
              vec3_exports.sub(nextTail, nextTail, worldPosition);
              vec3_exports.normalize(nextTail, nextTail);
              vec3_exports.scaleAndAdd(nextTail, worldPosition, nextTail, joint.state.boneLength);
            }
          }
          vec3_exports.copy(joint.state.prevTail, joint.state.currentTail);
          vec3_exports.copy(joint.state.currentTail, nextTail);
          if (springChain.center) {
            vec3_exports.copy(joint.state.prevTailCenter, joint.state.currentTailCenter);
            vec3_exports.copy(joint.state.currentTailCenter, nextTail);
            springChain.center.transformPointInverseWorld(joint.state.currentTailCenter);
          }
          joint.node.parent.transformPointInverseWorld(nextTail);
          const nextTailDualQuat = quat2_exports.fromTranslation(this._tempQuat2, nextTail);
          quat2_exports.multiply(nextTailDualQuat, joint.state.initialLocalTransformInvert, nextTailDualQuat);
          quat2_exports.getTranslation(nextTail, nextTailDualQuat);
          vec3_exports.normalize(nextTail, nextTail);
          const jointRotation = quat_exports.rotationTo(this._tempQuatA, joint.state.boneAxis, nextTail);
          joint.node.rotationLocal = quat_exports.mul(this._tempQuatA, joint.state.initialLocalRotation, jointRotation);
        }
      });
    }
    /**
     * @param {boolean} firstPerson Whether the model should render for first person or third person views
     */
    set firstPerson(firstPerson) {
      this._firstPersonAnnotations.forEach((annotation) => {
        const visible = firstPerson == annotation.firstPerson || firstPerson != annotation.thirdPerson;
        annotation.node.getComponents("mesh").forEach((mesh) => {
          mesh.active = visible;
        });
      });
    }
  };
  __publicField(Vrm, "TypeName", "vrm");
  __publicField(Vrm, "Properties", {
    /** URL to a VRM file to load */
    src: { type: Type.String },
    /** Object the VRM is looking at */
    lookAtTarget: { type: Type.Object }
  });

  // node_modules/@wonderlandengine/components/dist/wasd-controls.js
  var WasdControlsComponent = class extends Component {
    init() {
      this.up = false;
      this.right = false;
      this.down = false;
      this.left = false;
      window.addEventListener("keydown", this.press.bind(this));
      window.addEventListener("keyup", this.release.bind(this));
    }
    start() {
      this.headObject = this.headObject || this.object;
    }
    update() {
      let direction2 = [0, 0, 0];
      if (this.up)
        direction2[2] -= 1;
      if (this.down)
        direction2[2] += 1;
      if (this.left)
        direction2[0] -= 1;
      if (this.right)
        direction2[0] += 1;
      vec3_exports.normalize(direction2, direction2);
      direction2[0] *= this.speed;
      direction2[2] *= this.speed;
      vec3_exports.transformQuat(direction2, direction2, this.headObject.transformWorld);
      this.object.translate(direction2);
    }
    press(e) {
      if (e.keyCode === 38 || e.keyCode === 87 || e.keyCode === 90) {
        this.up = true;
      } else if (e.keyCode === 39 || e.keyCode === 68) {
        this.right = true;
      } else if (e.keyCode === 40 || e.keyCode === 83) {
        this.down = true;
      } else if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
        this.left = true;
      }
    }
    release(e) {
      if (e.keyCode === 38 || e.keyCode === 87 || e.keyCode === 90) {
        this.up = false;
      } else if (e.keyCode === 39 || e.keyCode === 68) {
        this.right = false;
      } else if (e.keyCode === 40 || e.keyCode === 83) {
        this.down = false;
      } else if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
        this.left = false;
      }
    }
  };
  __publicField(WasdControlsComponent, "TypeName", "wasd-controls");
  __publicField(WasdControlsComponent, "Properties", {
    /** Movement speed in m/s. */
    speed: { type: Type.Float, default: 0.1 },
    /** Object of which the orientation is used to determine forward direction */
    headObject: { type: Type.Object }
  });

  // node_modules/@zestymarket/wonderland-sdk/dist/zesty-wonderland-sdk.js
  var zesty_wonderland_sdk_exports = {};
  __export(zesty_wonderland_sdk_exports, {
    ZestyBanner: () => J
  });
  var Yt = Object.create;
  var X = Object.defineProperty;
  var Zt = Object.getOwnPropertyDescriptor;
  var er = Object.getOwnPropertyNames;
  var tr = Object.getPrototypeOf;
  var rr = Object.prototype.hasOwnProperty;
  var nr = (t, e, r) => e in t ? X(t, e, { enumerable: true, configurable: true, writable: true, value: r }) : t[e] = r;
  var l = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
  var ir = (t, e, r, i) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let n of er(e))
        !rr.call(t, n) && n !== r && X(t, n, { get: () => e[n], enumerable: !(i = Zt(e, n)) || i.enumerable });
    return t;
  };
  var Ae = (t, e, r) => (r = t != null ? Yt(tr(t)) : {}, ir(e || !t || !t.__esModule ? X(r, "default", { value: t, enumerable: true }) : r, t));
  var G = (t, e, r) => (nr(t, typeof e != "symbol" ? e + "" : e, r), r);
  var Q = l((vn, qe) => {
    "use strict";
    qe.exports = function(e, r) {
      return function() {
        for (var n = new Array(arguments.length), s = 0; s < n.length; s++)
          n[s] = arguments[s];
        return e.apply(r, n);
      };
    };
  });
  var f = l((wn, Ne) => {
    "use strict";
    var sr = Q(), Z = Object.prototype.toString, ee = function(t) {
      return function(e) {
        var r = Z.call(e);
        return t[r] || (t[r] = r.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function A(t) {
      return t = t.toLowerCase(), function(r) {
        return ee(r) === t;
      };
    }
    function te(t) {
      return Array.isArray(t);
    }
    function F(t) {
      return typeof t > "u";
    }
    function ar(t) {
      return t !== null && !F(t) && t.constructor !== null && !F(t.constructor) && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
    }
    var Te = A("ArrayBuffer");
    function or(t) {
      var e;
      return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? e = ArrayBuffer.isView(t) : e = t && t.buffer && Te(t.buffer), e;
    }
    function ur(t) {
      return typeof t == "string";
    }
    function cr(t) {
      return typeof t == "number";
    }
    function Se(t) {
      return t !== null && typeof t == "object";
    }
    function j(t) {
      if (ee(t) !== "object")
        return false;
      var e = Object.getPrototypeOf(t);
      return e === null || e === Object.prototype;
    }
    var lr = A("Date"), dr = A("File"), fr = A("Blob"), pr = A("FileList");
    function re(t) {
      return Z.call(t) === "[object Function]";
    }
    function hr(t) {
      return Se(t) && re(t.pipe);
    }
    function mr(t) {
      var e = "[object FormData]";
      return t && (typeof FormData == "function" && t instanceof FormData || Z.call(t) === e || re(t.toString) && t.toString() === e);
    }
    var yr = A("URLSearchParams");
    function vr(t) {
      return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
    }
    function wr() {
      return typeof navigator < "u" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS") ? false : typeof window < "u" && typeof document < "u";
    }
    function ne(t, e) {
      if (!(t === null || typeof t > "u"))
        if (typeof t != "object" && (t = [t]), te(t))
          for (var r = 0, i = t.length; r < i; r++)
            e.call(null, t[r], r, t);
        else
          for (var n in t)
            Object.prototype.hasOwnProperty.call(t, n) && e.call(null, t[n], n, t);
    }
    function Y() {
      var t = {};
      function e(n, s) {
        j(t[s]) && j(n) ? t[s] = Y(t[s], n) : j(n) ? t[s] = Y({}, n) : te(n) ? t[s] = n.slice() : t[s] = n;
      }
      for (var r = 0, i = arguments.length; r < i; r++)
        ne(arguments[r], e);
      return t;
    }
    function gr(t, e, r) {
      return ne(e, function(n, s) {
        r && typeof n == "function" ? t[s] = sr(n, r) : t[s] = n;
      }), t;
    }
    function br(t) {
      return t.charCodeAt(0) === 65279 && (t = t.slice(1)), t;
    }
    function Er(t, e, r, i) {
      t.prototype = Object.create(e.prototype, i), t.prototype.constructor = t, r && Object.assign(t.prototype, r);
    }
    function xr(t, e, r) {
      var i, n, s, a = {};
      e = e || {};
      do {
        for (i = Object.getOwnPropertyNames(t), n = i.length; n-- > 0; )
          s = i[n], a[s] || (e[s] = t[s], a[s] = true);
        t = Object.getPrototypeOf(t);
      } while (t && (!r || r(t, e)) && t !== Object.prototype);
      return e;
    }
    function Cr(t, e, r) {
      t = String(t), (r === void 0 || r > t.length) && (r = t.length), r -= e.length;
      var i = t.indexOf(e, r);
      return i !== -1 && i === r;
    }
    function Rr(t) {
      if (!t)
        return null;
      var e = t.length;
      if (F(e))
        return null;
      for (var r = new Array(e); e-- > 0; )
        r[e] = t[e];
      return r;
    }
    var Or = function(t) {
      return function(e) {
        return t && e instanceof t;
      };
    }(typeof Uint8Array < "u" && Object.getPrototypeOf(Uint8Array));
    Ne.exports = { isArray: te, isArrayBuffer: Te, isBuffer: ar, isFormData: mr, isArrayBufferView: or, isString: ur, isNumber: cr, isObject: Se, isPlainObject: j, isUndefined: F, isDate: lr, isFile: dr, isBlob: fr, isFunction: re, isStream: hr, isURLSearchParams: yr, isStandardBrowserEnv: wr, forEach: ne, merge: Y, extend: gr, trim: vr, stripBOM: br, inherits: Er, toFlatObject: xr, kindOf: ee, kindOfTest: A, endsWith: Cr, toArray: Rr, isTypedArray: Or, isFileList: pr };
  });
  var ie = l((gn, Pe) => {
    "use strict";
    var S = f();
    function ke(t) {
      return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    Pe.exports = function(e, r, i) {
      if (!r)
        return e;
      var n;
      if (i)
        n = i(r);
      else if (S.isURLSearchParams(r))
        n = r.toString();
      else {
        var s = [];
        S.forEach(r, function(c, h) {
          c === null || typeof c > "u" || (S.isArray(c) ? h = h + "[]" : c = [c], S.forEach(c, function(d) {
            S.isDate(d) ? d = d.toISOString() : S.isObject(d) && (d = JSON.stringify(d)), s.push(ke(h) + "=" + ke(d));
          }));
        }), n = s.join("&");
      }
      if (n) {
        var a = e.indexOf("#");
        a !== -1 && (e = e.slice(0, a)), e += (e.indexOf("?") === -1 ? "?" : "&") + n;
      }
      return e;
    };
  });
  var De = l((bn, _e) => {
    "use strict";
    var Ar = f();
    function I() {
      this.handlers = [];
    }
    I.prototype.use = function(e, r, i) {
      return this.handlers.push({ fulfilled: e, rejected: r, synchronous: i ? i.synchronous : false, runWhen: i ? i.runWhen : null }), this.handlers.length - 1;
    };
    I.prototype.eject = function(e) {
      this.handlers[e] && (this.handlers[e] = null);
    };
    I.prototype.forEach = function(e) {
      Ar.forEach(this.handlers, function(i) {
        i !== null && e(i);
      });
    };
    _e.exports = I;
  });
  var Be = l((En, Ue) => {
    "use strict";
    var qr = f();
    Ue.exports = function(e, r) {
      qr.forEach(e, function(n, s) {
        s !== r && s.toUpperCase() === r.toUpperCase() && (e[r] = n, delete e[s]);
      });
    };
  });
  var q = l((xn, Ie) => {
    "use strict";
    var Le = f();
    function N(t, e, r, i, n) {
      Error.call(this), this.message = t, this.name = "AxiosError", e && (this.code = e), r && (this.config = r), i && (this.request = i), n && (this.response = n);
    }
    Le.inherits(N, Error, { toJSON: function() {
      return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code, status: this.response && this.response.status ? this.response.status : null };
    } });
    var je = N.prototype, Fe = {};
    ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED"].forEach(function(t) {
      Fe[t] = { value: t };
    });
    Object.defineProperties(N, Fe);
    Object.defineProperty(je, "isAxiosError", { value: true });
    N.from = function(t, e, r, i, n, s) {
      var a = Object.create(je);
      return Le.toFlatObject(t, a, function(c) {
        return c !== Error.prototype;
      }), N.call(a, t.message, e, r, i, n), a.name = t.name, s && Object.assign(a, s), a;
    };
    Ie.exports = N;
  });
  var se = l((Cn, ze) => {
    "use strict";
    ze.exports = { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false };
  });
  var ae = l((Rn, Me) => {
    "use strict";
    var b = f();
    function Tr(t, e) {
      e = e || new FormData();
      var r = [];
      function i(s) {
        return s === null ? "" : b.isDate(s) ? s.toISOString() : b.isArrayBuffer(s) || b.isTypedArray(s) ? typeof Blob == "function" ? new Blob([s]) : Buffer.from(s) : s;
      }
      function n(s, a) {
        if (b.isPlainObject(s) || b.isArray(s)) {
          if (r.indexOf(s) !== -1)
            throw Error("Circular reference detected in " + a);
          r.push(s), b.forEach(s, function(c, h) {
            if (!b.isUndefined(c)) {
              var o = a ? a + "." + h : h, d;
              if (c && !a && typeof c == "object") {
                if (b.endsWith(h, "{}"))
                  c = JSON.stringify(c);
                else if (b.endsWith(h, "[]") && (d = b.toArray(c))) {
                  d.forEach(function(v) {
                    !b.isUndefined(v) && e.append(o, i(v));
                  });
                  return;
                }
              }
              n(c, o);
            }
          }), r.pop();
        } else
          e.append(a, i(s));
      }
      return n(t), e;
    }
    Me.exports = Tr;
  });
  var He = l((On, $e) => {
    "use strict";
    var oe = q();
    $e.exports = function(e, r, i) {
      var n = i.config.validateStatus;
      !i.status || !n || n(i.status) ? e(i) : r(new oe("Request failed with status code " + i.status, [oe.ERR_BAD_REQUEST, oe.ERR_BAD_RESPONSE][Math.floor(i.status / 100) - 4], i.config, i.request, i));
    };
  });
  var Je = l((An, We) => {
    "use strict";
    var z = f();
    We.exports = z.isStandardBrowserEnv() ? function() {
      return { write: function(r, i, n, s, a, u) {
        var c = [];
        c.push(r + "=" + encodeURIComponent(i)), z.isNumber(n) && c.push("expires=" + new Date(n).toGMTString()), z.isString(s) && c.push("path=" + s), z.isString(a) && c.push("domain=" + a), u === true && c.push("secure"), document.cookie = c.join("; ");
      }, read: function(r) {
        var i = document.cookie.match(new RegExp("(^|;\\s*)(" + r + ")=([^;]*)"));
        return i ? decodeURIComponent(i[3]) : null;
      }, remove: function(r) {
        this.write(r, "", Date.now() - 864e5);
      } };
    }() : function() {
      return { write: function() {
      }, read: function() {
        return null;
      }, remove: function() {
      } };
    }();
  });
  var Ke = l((qn, Ve) => {
    "use strict";
    Ve.exports = function(e) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
    };
  });
  var Ge = l((Tn, Xe) => {
    "use strict";
    Xe.exports = function(e, r) {
      return r ? e.replace(/\/+$/, "") + "/" + r.replace(/^\/+/, "") : e;
    };
  });
  var ue = l((Sn, Qe) => {
    "use strict";
    var Sr = Ke(), Nr = Ge();
    Qe.exports = function(e, r) {
      return e && !Sr(r) ? Nr(e, r) : r;
    };
  });
  var Ze = l((Nn, Ye) => {
    "use strict";
    var ce = f(), kr = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
    Ye.exports = function(e) {
      var r = {}, i, n, s;
      return e && ce.forEach(e.split(`
`), function(u) {
        if (s = u.indexOf(":"), i = ce.trim(u.substr(0, s)).toLowerCase(), n = ce.trim(u.substr(s + 1)), i) {
          if (r[i] && kr.indexOf(i) >= 0)
            return;
          i === "set-cookie" ? r[i] = (r[i] ? r[i] : []).concat([n]) : r[i] = r[i] ? r[i] + ", " + n : n;
        }
      }), r;
    };
  });
  var rt = l((kn, tt) => {
    "use strict";
    var et = f();
    tt.exports = et.isStandardBrowserEnv() ? function() {
      var e = /(msie|trident)/i.test(navigator.userAgent), r = document.createElement("a"), i;
      function n(s) {
        var a = s;
        return e && (r.setAttribute("href", a), a = r.href), r.setAttribute("href", a), { href: r.href, protocol: r.protocol ? r.protocol.replace(/:$/, "") : "", host: r.host, search: r.search ? r.search.replace(/^\?/, "") : "", hash: r.hash ? r.hash.replace(/^#/, "") : "", hostname: r.hostname, port: r.port, pathname: r.pathname.charAt(0) === "/" ? r.pathname : "/" + r.pathname };
      }
      return i = n(window.location.href), function(a) {
        var u = et.isString(a) ? n(a) : a;
        return u.protocol === i.protocol && u.host === i.host;
      };
    }() : function() {
      return function() {
        return true;
      };
    }();
  });
  var U = l((Pn, it) => {
    "use strict";
    var le = q(), Pr = f();
    function nt(t) {
      le.call(this, t ?? "canceled", le.ERR_CANCELED), this.name = "CanceledError";
    }
    Pr.inherits(nt, le, { __CANCEL__: true });
    it.exports = nt;
  });
  var at = l((_n, st) => {
    "use strict";
    st.exports = function(e) {
      var r = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
      return r && r[1] || "";
    };
  });
  var de = l((Dn, ot) => {
    "use strict";
    var B = f(), _r = He(), Dr = Je(), Ur = ie(), Br = ue(), Lr = Ze(), jr = rt(), Fr = se(), x = q(), Ir = U(), zr = at();
    ot.exports = function(e) {
      return new Promise(function(i, n) {
        var s = e.data, a = e.headers, u = e.responseType, c;
        function h() {
          e.cancelToken && e.cancelToken.unsubscribe(c), e.signal && e.signal.removeEventListener("abort", c);
        }
        B.isFormData(s) && B.isStandardBrowserEnv() && delete a["Content-Type"];
        var o = new XMLHttpRequest();
        if (e.auth) {
          var d = e.auth.username || "", v = e.auth.password ? unescape(encodeURIComponent(e.auth.password)) : "";
          a.Authorization = "Basic " + btoa(d + ":" + v);
        }
        var m = Br(e.baseURL, e.url);
        o.open(e.method.toUpperCase(), Ur(m, e.params, e.paramsSerializer), true), o.timeout = e.timeout;
        function Re() {
          if (o) {
            var g = "getAllResponseHeaders" in o ? Lr(o.getAllResponseHeaders()) : null, T = !u || u === "text" || u === "json" ? o.responseText : o.response, O = { data: T, status: o.status, statusText: o.statusText, headers: g, config: e, request: o };
            _r(function(K) {
              i(K), h();
            }, function(K) {
              n(K), h();
            }, O), o = null;
          }
        }
        if ("onloadend" in o ? o.onloadend = Re : o.onreadystatechange = function() {
          !o || o.readyState !== 4 || o.status === 0 && !(o.responseURL && o.responseURL.indexOf("file:") === 0) || setTimeout(Re);
        }, o.onabort = function() {
          o && (n(new x("Request aborted", x.ECONNABORTED, e, o)), o = null);
        }, o.onerror = function() {
          n(new x("Network Error", x.ERR_NETWORK, e, o, o)), o = null;
        }, o.ontimeout = function() {
          var T = e.timeout ? "timeout of " + e.timeout + "ms exceeded" : "timeout exceeded", O = e.transitional || Fr;
          e.timeoutErrorMessage && (T = e.timeoutErrorMessage), n(new x(T, O.clarifyTimeoutError ? x.ETIMEDOUT : x.ECONNABORTED, e, o)), o = null;
        }, B.isStandardBrowserEnv()) {
          var Oe = (e.withCredentials || jr(m)) && e.xsrfCookieName ? Dr.read(e.xsrfCookieName) : void 0;
          Oe && (a[e.xsrfHeaderName] = Oe);
        }
        "setRequestHeader" in o && B.forEach(a, function(T, O) {
          typeof s > "u" && O.toLowerCase() === "content-type" ? delete a[O] : o.setRequestHeader(O, T);
        }), B.isUndefined(e.withCredentials) || (o.withCredentials = !!e.withCredentials), u && u !== "json" && (o.responseType = e.responseType), typeof e.onDownloadProgress == "function" && o.addEventListener("progress", e.onDownloadProgress), typeof e.onUploadProgress == "function" && o.upload && o.upload.addEventListener("progress", e.onUploadProgress), (e.cancelToken || e.signal) && (c = function(g) {
          o && (n(!g || g && g.type ? new Ir() : g), o.abort(), o = null);
        }, e.cancelToken && e.cancelToken.subscribe(c), e.signal && (e.signal.aborted ? c() : e.signal.addEventListener("abort", c))), s || (s = null);
        var V = zr(m);
        if (V && ["http", "https", "file"].indexOf(V) === -1) {
          n(new x("Unsupported protocol " + V + ":", x.ERR_BAD_REQUEST, e));
          return;
        }
        o.send(s);
      });
    };
  });
  var ct = l((Un, ut) => {
    ut.exports = null;
  });
  var $ = l((Bn, pt) => {
    "use strict";
    var p = f(), lt = Be(), dt = q(), Mr = se(), $r = ae(), Hr = { "Content-Type": "application/x-www-form-urlencoded" };
    function ft(t, e) {
      !p.isUndefined(t) && p.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e);
    }
    function Wr() {
      var t;
      return typeof XMLHttpRequest < "u" ? t = de() : typeof process < "u" && Object.prototype.toString.call(process) === "[object process]" && (t = de()), t;
    }
    function Jr(t, e, r) {
      if (p.isString(t))
        try {
          return (e || JSON.parse)(t), p.trim(t);
        } catch (i) {
          if (i.name !== "SyntaxError")
            throw i;
        }
      return (r || JSON.stringify)(t);
    }
    var M = { transitional: Mr, adapter: Wr(), transformRequest: [function(e, r) {
      if (lt(r, "Accept"), lt(r, "Content-Type"), p.isFormData(e) || p.isArrayBuffer(e) || p.isBuffer(e) || p.isStream(e) || p.isFile(e) || p.isBlob(e))
        return e;
      if (p.isArrayBufferView(e))
        return e.buffer;
      if (p.isURLSearchParams(e))
        return ft(r, "application/x-www-form-urlencoded;charset=utf-8"), e.toString();
      var i = p.isObject(e), n = r && r["Content-Type"], s;
      if ((s = p.isFileList(e)) || i && n === "multipart/form-data") {
        var a = this.env && this.env.FormData;
        return $r(s ? { "files[]": e } : e, a && new a());
      } else if (i || n === "application/json")
        return ft(r, "application/json"), Jr(e);
      return e;
    }], transformResponse: [function(e) {
      var r = this.transitional || M.transitional, i = r && r.silentJSONParsing, n = r && r.forcedJSONParsing, s = !i && this.responseType === "json";
      if (s || n && p.isString(e) && e.length)
        try {
          return JSON.parse(e);
        } catch (a) {
          if (s)
            throw a.name === "SyntaxError" ? dt.from(a, dt.ERR_BAD_RESPONSE, this, null, this.response) : a;
        }
      return e;
    }], timeout: 0, xsrfCookieName: "XSRF-TOKEN", xsrfHeaderName: "X-XSRF-TOKEN", maxContentLength: -1, maxBodyLength: -1, env: { FormData: ct() }, validateStatus: function(e) {
      return e >= 200 && e < 300;
    }, headers: { common: { Accept: "application/json, text/plain, */*" } } };
    p.forEach(["delete", "get", "head"], function(e) {
      M.headers[e] = {};
    });
    p.forEach(["post", "put", "patch"], function(e) {
      M.headers[e] = p.merge(Hr);
    });
    pt.exports = M;
  });
  var mt = l((Ln, ht) => {
    "use strict";
    var Vr = f(), Kr = $();
    ht.exports = function(e, r, i) {
      var n = this || Kr;
      return Vr.forEach(i, function(a) {
        e = a.call(n, e, r);
      }), e;
    };
  });
  var fe = l((jn, yt) => {
    "use strict";
    yt.exports = function(e) {
      return !!(e && e.__CANCEL__);
    };
  });
  var gt = l((Fn, wt) => {
    "use strict";
    var vt = f(), pe = mt(), Xr = fe(), Gr = $(), Qr = U();
    function he(t) {
      if (t.cancelToken && t.cancelToken.throwIfRequested(), t.signal && t.signal.aborted)
        throw new Qr();
    }
    wt.exports = function(e) {
      he(e), e.headers = e.headers || {}, e.data = pe.call(e, e.data, e.headers, e.transformRequest), e.headers = vt.merge(e.headers.common || {}, e.headers[e.method] || {}, e.headers), vt.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(n) {
        delete e.headers[n];
      });
      var r = e.adapter || Gr.adapter;
      return r(e).then(function(n) {
        return he(e), n.data = pe.call(e, n.data, n.headers, e.transformResponse), n;
      }, function(n) {
        return Xr(n) || (he(e), n && n.response && (n.response.data = pe.call(e, n.response.data, n.response.headers, e.transformResponse))), Promise.reject(n);
      });
    };
  });
  var me = l((In, bt) => {
    "use strict";
    var w = f();
    bt.exports = function(e, r) {
      r = r || {};
      var i = {};
      function n(o, d) {
        return w.isPlainObject(o) && w.isPlainObject(d) ? w.merge(o, d) : w.isPlainObject(d) ? w.merge({}, d) : w.isArray(d) ? d.slice() : d;
      }
      function s(o) {
        if (w.isUndefined(r[o])) {
          if (!w.isUndefined(e[o]))
            return n(void 0, e[o]);
        } else
          return n(e[o], r[o]);
      }
      function a(o) {
        if (!w.isUndefined(r[o]))
          return n(void 0, r[o]);
      }
      function u(o) {
        if (w.isUndefined(r[o])) {
          if (!w.isUndefined(e[o]))
            return n(void 0, e[o]);
        } else
          return n(void 0, r[o]);
      }
      function c(o) {
        if (o in r)
          return n(e[o], r[o]);
        if (o in e)
          return n(void 0, e[o]);
      }
      var h = { url: a, method: a, data: a, baseURL: u, transformRequest: u, transformResponse: u, paramsSerializer: u, timeout: u, timeoutMessage: u, withCredentials: u, adapter: u, responseType: u, xsrfCookieName: u, xsrfHeaderName: u, onUploadProgress: u, onDownloadProgress: u, decompress: u, maxContentLength: u, maxBodyLength: u, beforeRedirect: u, transport: u, httpAgent: u, httpsAgent: u, cancelToken: u, socketPath: u, responseEncoding: u, validateStatus: c };
      return w.forEach(Object.keys(e).concat(Object.keys(r)), function(d) {
        var v = h[d] || s, m = v(d);
        w.isUndefined(m) && v !== c || (i[d] = m);
      }), i;
    };
  });
  var ye = l((zn, Et) => {
    Et.exports = { version: "0.27.2" };
  });
  var Rt = l((Mn, Ct) => {
    "use strict";
    var Yr = ye().version, R = q(), ve = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(t, e) {
      ve[t] = function(i) {
        return typeof i === t || "a" + (e < 1 ? "n " : " ") + t;
      };
    });
    var xt = {};
    ve.transitional = function(e, r, i) {
      function n(s, a) {
        return "[Axios v" + Yr + "] Transitional option '" + s + "'" + a + (i ? ". " + i : "");
      }
      return function(s, a, u) {
        if (e === false)
          throw new R(n(a, " has been removed" + (r ? " in " + r : "")), R.ERR_DEPRECATED);
        return r && !xt[a] && (xt[a] = true, console.warn(n(a, " has been deprecated since v" + r + " and will be removed in the near future"))), e ? e(s, a, u) : true;
      };
    };
    function Zr(t, e, r) {
      if (typeof t != "object")
        throw new R("options must be an object", R.ERR_BAD_OPTION_VALUE);
      for (var i = Object.keys(t), n = i.length; n-- > 0; ) {
        var s = i[n], a = e[s];
        if (a) {
          var u = t[s], c = u === void 0 || a(u, s, t);
          if (c !== true)
            throw new R("option " + s + " must be " + c, R.ERR_BAD_OPTION_VALUE);
          continue;
        }
        if (r !== true)
          throw new R("Unknown option " + s, R.ERR_BAD_OPTION);
      }
    }
    Ct.exports = { assertOptions: Zr, validators: ve };
  });
  var Nt = l(($n, St) => {
    "use strict";
    var qt = f(), en = ie(), Ot = De(), At = gt(), H = me(), tn = ue(), Tt = Rt(), k = Tt.validators;
    function P(t) {
      this.defaults = t, this.interceptors = { request: new Ot(), response: new Ot() };
    }
    P.prototype.request = function(e, r) {
      typeof e == "string" ? (r = r || {}, r.url = e) : r = e || {}, r = H(this.defaults, r), r.method ? r.method = r.method.toLowerCase() : this.defaults.method ? r.method = this.defaults.method.toLowerCase() : r.method = "get";
      var i = r.transitional;
      i !== void 0 && Tt.assertOptions(i, { silentJSONParsing: k.transitional(k.boolean), forcedJSONParsing: k.transitional(k.boolean), clarifyTimeoutError: k.transitional(k.boolean) }, false);
      var n = [], s = true;
      this.interceptors.request.forEach(function(m) {
        typeof m.runWhen == "function" && m.runWhen(r) === false || (s = s && m.synchronous, n.unshift(m.fulfilled, m.rejected));
      });
      var a = [];
      this.interceptors.response.forEach(function(m) {
        a.push(m.fulfilled, m.rejected);
      });
      var u;
      if (!s) {
        var c = [At, void 0];
        for (Array.prototype.unshift.apply(c, n), c = c.concat(a), u = Promise.resolve(r); c.length; )
          u = u.then(c.shift(), c.shift());
        return u;
      }
      for (var h = r; n.length; ) {
        var o = n.shift(), d = n.shift();
        try {
          h = o(h);
        } catch (v) {
          d(v);
          break;
        }
      }
      try {
        u = At(h);
      } catch (v) {
        return Promise.reject(v);
      }
      for (; a.length; )
        u = u.then(a.shift(), a.shift());
      return u;
    };
    P.prototype.getUri = function(e) {
      e = H(this.defaults, e);
      var r = tn(e.baseURL, e.url);
      return en(r, e.params, e.paramsSerializer);
    };
    qt.forEach(["delete", "get", "head", "options"], function(e) {
      P.prototype[e] = function(r, i) {
        return this.request(H(i || {}, { method: e, url: r, data: (i || {}).data }));
      };
    });
    qt.forEach(["post", "put", "patch"], function(e) {
      function r(i) {
        return function(s, a, u) {
          return this.request(H(u || {}, { method: e, headers: i ? { "Content-Type": "multipart/form-data" } : {}, url: s, data: a }));
        };
      }
      P.prototype[e] = r(), P.prototype[e + "Form"] = r(true);
    });
    St.exports = P;
  });
  var Pt = l((Hn, kt) => {
    "use strict";
    var rn = U();
    function _(t) {
      if (typeof t != "function")
        throw new TypeError("executor must be a function.");
      var e;
      this.promise = new Promise(function(n) {
        e = n;
      });
      var r = this;
      this.promise.then(function(i) {
        if (r._listeners) {
          var n, s = r._listeners.length;
          for (n = 0; n < s; n++)
            r._listeners[n](i);
          r._listeners = null;
        }
      }), this.promise.then = function(i) {
        var n, s = new Promise(function(a) {
          r.subscribe(a), n = a;
        }).then(i);
        return s.cancel = function() {
          r.unsubscribe(n);
        }, s;
      }, t(function(n) {
        r.reason || (r.reason = new rn(n), e(r.reason));
      });
    }
    _.prototype.throwIfRequested = function() {
      if (this.reason)
        throw this.reason;
    };
    _.prototype.subscribe = function(e) {
      if (this.reason) {
        e(this.reason);
        return;
      }
      this._listeners ? this._listeners.push(e) : this._listeners = [e];
    };
    _.prototype.unsubscribe = function(e) {
      if (this._listeners) {
        var r = this._listeners.indexOf(e);
        r !== -1 && this._listeners.splice(r, 1);
      }
    };
    _.source = function() {
      var e, r = new _(function(n) {
        e = n;
      });
      return { token: r, cancel: e };
    };
    kt.exports = _;
  });
  var Dt = l((Wn, _t) => {
    "use strict";
    _t.exports = function(e) {
      return function(i) {
        return e.apply(null, i);
      };
    };
  });
  var Bt = l((Jn, Ut) => {
    "use strict";
    var nn = f();
    Ut.exports = function(e) {
      return nn.isObject(e) && e.isAxiosError === true;
    };
  });
  var Ft = l((Vn, we) => {
    "use strict";
    var Lt = f(), sn = Q(), W = Nt(), an = me(), on = $();
    function jt(t) {
      var e = new W(t), r = sn(W.prototype.request, e);
      return Lt.extend(r, W.prototype, e), Lt.extend(r, e), r.create = function(n) {
        return jt(an(t, n));
      }, r;
    }
    var y = jt(on);
    y.Axios = W;
    y.CanceledError = U();
    y.CancelToken = Pt();
    y.isCancel = fe();
    y.VERSION = ye().version;
    y.toFormData = ae();
    y.AxiosError = q();
    y.Cancel = y.CanceledError;
    y.all = function(e) {
      return Promise.all(e);
    };
    y.spread = Dt();
    y.isAxiosError = Bt();
    we.exports = y;
    we.exports.default = y;
  });
  var ge = l((Kn, It) => {
    It.exports = Ft();
  });
  var D = Ae(ge(), 1);
  var C = "https://zesty-storage-prod.s3.amazonaws.com/images/zesty";
  var L = { tall: { width: 0.75, height: 1, style: { standard: `${C}/zesty-banner-tall.png`, minimal: `${C}/zesty-banner-tall-minimal.png`, transparent: `${C}/zesty-banner-tall-transparent.png` } }, wide: { width: 4, height: 1, style: { standard: `${C}/zesty-banner-wide.png`, minimal: `${C}/zesty-banner-wide-minimal.png`, transparent: `${C}/zesty-banner-wide-transparent.png` } }, square: { width: 1, height: 1, style: { standard: `${C}/zesty-banner-square.png`, minimal: `${C}/zesty-banner-square-minimal.png`, transparent: `${C}/zesty-banner-square-transparent.png` } } };
  var un = Ae(ge(), 1);
  var be = () => {
    let t = window.XRHand != null && window.XRMediaBinding != null, e = navigator.userAgent.includes("OculusBrowser"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var Ee = () => {
    let t = window.mozInnerScreenX != null && window.speechSynthesis == null, e = navigator.userAgent.includes("Mobile VR") && !navigator.userAgent.includes("OculusBrowser"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var zt = async () => {
    let t = navigator.xr && await navigator.xr.isSessionSupported("immersive-vr") && await navigator.xr.isSessionSupported("immersive-ar"), e = navigator.userAgent.includes("Pico Neo 3 Link"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var Mt = () => {
    let t = navigator.maxTouchPoints === 0 || navigator.msMaxTouchPoints === 0, e = !navigator.userAgent.includes("Android") && !navigator.userAgent.includes("Mobile"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var xe = async () => {
    let t = { platform: "", confidence: "" };
    return be().match ? t = { platform: "Oculus", confidence: be().confidence } : Ee().match ? t = { platform: "Wolvic", confidence: Ee().confidence } : await zt().match ? t = { platform: "Pico", confidence: await zt().confidence } : Mt().match ? t = { platform: "Desktop", confidence: Mt().confidence } : t = { platform: "Unknown", confidence: "None" }, t;
  };
  var $t = (t) => {
    if (t) {
      if (be().match) {
        if (t.includes("https://www.oculus.com/experiences/quest/")) {
          setTimeout(() => {
            window.open(t, "_blank");
          }, 1e3);
          return;
        }
      } else if (Ee().match) {
        let e = document.createElement("div"), r = document.createElement("div"), i = document.createElement("p"), n = document.createElement("button"), s = document.createElement("button");
        e.style.backgroundColor = "rgb(0, 0, 0, 0.75)", e.style.color = "white", e.style.textAlign = "center", e.style.position = "fixed", e.style.top = "50%", e.style.left = "50%", e.style.padding = "5%", e.style.borderRadius = "5%", e.style.transform = "translate(-50%, -50%)", i.innerHTML = `<b>This billboard leads to ${t}. Continue?</b>`, n.innerText = "Move cursor back into window.", n.style.width = "100vw", n.style.height = "100vh", n.onmouseenter = () => {
          n.style.width = "auto", n.style.height = "auto", n.innerText = "Yes";
        }, n.onclick = () => {
          window.open(t, "_blank"), e.remove();
        }, s.innerText = "No", s.onclick = () => {
          e.remove();
        }, e.append(r), r.append(i), r.append(n), r.append(s), document.body.append(e);
        return;
      }
      window.open(t, "_blank");
    }
  };
  var Ht = "https://beacon.zesty.market";
  var Wt = "https://beacon2.zesty.market/zgraphql";
  var cn = "https://api.zesty.market/api";
  var Jt = async (t, e = "tall", r = "standard") => {
    try {
      let i = encodeURI(window.top.location.href).replace(/\/$/, "");
      return (await D.default.get(`${cn}/ad?ad_unit_id=${t}&url=${i}`)).data;
    } catch {
      return console.warn("No active campaign banner could be located. Displaying default banner."), { Ads: [{ asset_url: L[e].style[r], cta_url: "https://www.zesty.market" }], CampaignId: "TestCampaign" };
    }
  };
  var Vt = async (t, e = null) => {
    let { platform: r, confidence: i } = await xe();
    try {
      let n = Ht + `/api/v1/space/${t}`;
      await D.default.put(n), await D.default.post(Wt, { query: `mutation { increment(eventType: visits, spaceId: "${t}", campaignId: "${e}", platform: { name: ${r}, confidence: ${i} }) { message } }` }, { headers: { "Content-Type": "application/json" } });
    } catch (n) {
      console.log("Failed to emit onload event", n.message);
    }
  };
  var Kt = async (t, e = null) => {
    let { platform: r, confidence: i } = await xe();
    try {
      let n = Ht + `/api/v1/space/click/${t}`;
      await D.default.put(n), await D.default.post(Wt, { query: `mutation { increment(eventType: clicks, spaceId: "${t}", campaignId: "${e}", platform: { name: ${r}, confidence: ${i} }) { message } }` }, { headers: { "Content-Type": "application/json" } });
    } catch (n) {
      console.log("Failed to emit onclick event", n.message);
    }
  };
  var Xt = "2.0.5";
  console.log("Zesty SDK Version: ", Xt);
  var hn = "https://ipfs.io/ipns/libv2.zesty.market/zesty-formats.js";
  var mn = "https://ipfs.io/ipns/libv2.zesty.market/zesty-networking.js";
  var J = class extends Component {
    static onRegister(e) {
      e.registerComponent(CursorTarget);
    }
    init() {
      this.formats = Object.values(L), this.formatKeys = Object.keys(L), this.styleKeys = ["standard", "minimal", "transparent"];
    }
    start() {
      if (this.mesh = this.object.getComponent(MeshComponent), !this.mesh)
        throw new Error("'zesty-banner ' missing mesh component");
      if (this.createAutomaticCollision && (this.collision = this.object.getComponent(CollisionComponent) || this.object.addComponent(CollisionComponent, { collider: Collider.Box, group: 2 }), this.cursorTarget = this.object.getComponent(CursorTarget) || this.object.addComponent(CursorTarget), this.cursorTarget.onClick.add(this.onClick.bind(this))), this.dynamicFormats) {
        let e = document.createElement("script");
        e.onload = () => {
          this.formatsOverride = zestyFormats.formats;
        }, e.setAttribute("src", hn), e.setAttribute("crossorigin", "anonymous"), document.body.appendChild(e);
      }
      this.dynamicNetworking ? import(mn).then((e) => {
        this.zestyNetworking = Object.assign({}, e), this.startLoading();
      }) : this.startLoading();
    }
    startLoading() {
      this.loadBanner(this.adUnit, this.formatKeys[this.format], this.styleKeys[this.style]).then((e) => {
        this.banner = e, this.scaleToRatio && (this.height = this.object.scalingLocal[1], this.object.resetScaling(), this.createAutomaticCollision && (this.collision.extents = [this.formats[this.format].width * this.height, this.height, 0.1]), this.object.scale([this.formats[this.format].width * this.height, this.height, 1]));
        let r = this.mesh.material.clone();
        if (this.textureProperty === "auto") {
          let i = r.shader;
          if (i === "Phong Opaque Textured")
            r.diffuseTexture = e.texture, r.alphaMaskThreshold = 0.3;
          else if (i === "Flat Opaque Textured")
            r.flatTexture = e.texture, r.alphaMaskThreshold = 0.8;
          else
            throw Error("'zesty-banner' unable to apply banner texture: unsupported pipeline " + i);
          this.mesh.material = r, this.mesh.material.alphaMaskTexture = e.texture;
        } else
          this.mesh.material[this.textureProperty] = e.texture, this.mesh.material.alphaMaskTexture = e.texture;
        this.beacon && (this.dynamicNetworking ? this.zestyNetworking.sendOnLoadMetric(this.adUnit, this.banner.campaignId) : Vt(this.adUnit, this.banner.campaignId));
      });
    }
    onClick() {
      this.banner?.url && (this.engine.xr ? this.engine.xr.session.end().then(this.executeClick.bind(this)) : this.engine.xrSession ? this.engine.xrSession.end().then(this.executeClick.bind(this)) : this.executeClick());
    }
    executeClick() {
      $t(this.banner.url), this.beacon && (this.dynamicNetworking ? this.zestyNetworking.sendOnClickMetric(this.adUnit, this.banner.campaignId) : Kt(this.adUnit, this.banner.campaignId));
    }
    async loadBanner(e, r, i) {
      let n = this.dynamicNetworking ? await this.zestyNetworking.fetchCampaignAd(e, r, i) : await Jt(e, r, i), { asset_url: s, cta_url: a } = n.Ads[0];
      return this.campaignId = n.CampaignId, this.engine.textures.load(s, "").then((u) => ({ texture: u, imageSrc: s, url: a, campaignId: n.CampaignId }));
    }
  };
  G(J, "TypeName", "zesty-banner"), G(J, "Properties", { adUnit: Property.string(""), format: Property.enum(["tall", "wide", "square"], "square"), style: Property.enum(["standard", "minimal", "transparent"], "transparent"), scaleToRatio: Property.bool(true), textureProperty: Property.string("auto"), assignAlphaMaskTexture: Property.bool(true), beacon: Property.bool(true), dynamicFormats: Property.bool(true), createAutomaticCollision: Property.bool(true), dynamicNetworking: Property.bool(false) });

  // js/classes/gameState.ts
  var gameState_exports = {};
  __export(gameState_exports, {
    GameState: () => GameState,
    State: () => State
  });

  // node_modules/tslib/tslib.es6.mjs
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l2 = from.length, ar; i < l2; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  // node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction(value) {
    return typeof value === "function";
  }

  // node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function(instance) {
      Error.call(instance);
      instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }

  // node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError = createErrorClass(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
      _super(this);
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
        return i + 1 + ") " + err.toString();
      }).join("\n  ") : "";
      this.name = "UnsubscriptionError";
      this.errors = errors;
    };
  });

  // node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }

  // node_modules/rxjs/dist/esm5/internal/Subscription.js
  var Subscription = function() {
    function Subscription2(initialTeardown) {
      this.initialTeardown = initialTeardown;
      this.closed = false;
      this._parentage = null;
      this._finalizers = null;
    }
    Subscription2.prototype.unsubscribe = function() {
      var e_1, _a, e_2, _b;
      var errors;
      if (!this.closed) {
        this.closed = true;
        var _parentage = this._parentage;
        if (_parentage) {
          this._parentage = null;
          if (Array.isArray(_parentage)) {
            try {
              for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                var parent_1 = _parentage_1_1.value;
                parent_1.remove(this);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                  _a.call(_parentage_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          } else {
            _parentage.remove(this);
          }
        }
        var initialFinalizer = this.initialTeardown;
        if (isFunction(initialFinalizer)) {
          try {
            initialFinalizer();
          } catch (e) {
            errors = e instanceof UnsubscriptionError ? e.errors : [e];
          }
        }
        var _finalizers = this._finalizers;
        if (_finalizers) {
          this._finalizers = null;
          try {
            for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
              var finalizer = _finalizers_1_1.value;
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors = errors !== null && errors !== void 0 ? errors : [];
                if (err instanceof UnsubscriptionError) {
                  errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                } else {
                  errors.push(err);
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
                _b.call(_finalizers_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
        if (errors) {
          throw new UnsubscriptionError(errors);
        }
      }
    };
    Subscription2.prototype.add = function(teardown) {
      var _a;
      if (teardown && teardown !== this) {
        if (this.closed) {
          execFinalizer(teardown);
        } else {
          if (teardown instanceof Subscription2) {
            if (teardown.closed || teardown._hasParent(this)) {
              return;
            }
            teardown._addParent(this);
          }
          (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
        }
      }
    };
    Subscription2.prototype._hasParent = function(parent) {
      var _parentage = this._parentage;
      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription2.prototype._addParent = function(parent) {
      var _parentage = this._parentage;
      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription2.prototype._removeParent = function(parent) {
      var _parentage = this._parentage;
      if (_parentage === parent) {
        this._parentage = null;
      } else if (Array.isArray(_parentage)) {
        arrRemove(_parentage, parent);
      }
    };
    Subscription2.prototype.remove = function(teardown) {
      var _finalizers = this._finalizers;
      _finalizers && arrRemove(_finalizers, teardown);
      if (teardown instanceof Subscription2) {
        teardown._removeParent(this);
      }
    };
    Subscription2.EMPTY = function() {
      var empty = new Subscription2();
      empty.closed = true;
      return empty;
    }();
    return Subscription2;
  }();
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }

  // node_modules/rxjs/dist/esm5/internal/config.js
  var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: void 0,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
  };

  // node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider = {
    setTimeout: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = timeoutProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
        return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
      }
      return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function(handle) {
      var delegate = timeoutProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: void 0
  };

  // node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      var onUnhandledError = config.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err);
      } else {
        throw err;
      }
    });
  }

  // node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop() {
  }

  // node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  var COMPLETE_NOTIFICATION = function() {
    return createNotification("C", void 0, void 0);
  }();
  function errorNotification(error) {
    return createNotification("E", void 0, error);
  }
  function nextNotification(value) {
    return createNotification("N", value, void 0);
  }
  function createNotification(kind, value, error) {
    return {
      kind,
      value,
      error
    };
  }

  // node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  var context = null;
  function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a = context, errorThrown = _a.errorThrown, error = _a.error;
        context = null;
        if (errorThrown) {
          throw error;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err;
    }
  }

  // node_modules/rxjs/dist/esm5/internal/Subscriber.js
  var Subscriber = function(_super) {
    __extends(Subscriber2, _super);
    function Subscriber2(destination) {
      var _this = _super.call(this) || this;
      _this.isStopped = false;
      if (destination) {
        _this.destination = destination;
        if (isSubscription(destination)) {
          destination.add(_this);
        }
      } else {
        _this.destination = EMPTY_OBSERVER;
      }
      return _this;
    }
    Subscriber2.create = function(next, error, complete) {
      return new SafeSubscriber(next, error, complete);
    };
    Subscriber2.prototype.next = function(value) {
      if (this.isStopped) {
        handleStoppedNotification(nextNotification(value), this);
      } else {
        this._next(value);
      }
    };
    Subscriber2.prototype.error = function(err) {
      if (this.isStopped) {
        handleStoppedNotification(errorNotification(err), this);
      } else {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber2.prototype.complete = function() {
      if (this.isStopped) {
        handleStoppedNotification(COMPLETE_NOTIFICATION, this);
      } else {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber2.prototype.unsubscribe = function() {
      if (!this.closed) {
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
        this.destination = null;
      }
    };
    Subscriber2.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber2.prototype._error = function(err) {
      try {
        this.destination.error(err);
      } finally {
        this.unsubscribe();
      }
    };
    Subscriber2.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    };
    return Subscriber2;
  }(Subscription);
  var _bind = Function.prototype.bind;
  function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = function() {
    function ConsumerObserver2(partialObserver) {
      this.partialObserver = partialObserver;
    }
    ConsumerObserver2.prototype.next = function(value) {
      var partialObserver = this.partialObserver;
      if (partialObserver.next) {
        try {
          partialObserver.next(value);
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    ConsumerObserver2.prototype.error = function(err) {
      var partialObserver = this.partialObserver;
      if (partialObserver.error) {
        try {
          partialObserver.error(err);
        } catch (error) {
          handleUnhandledError(error);
        }
      } else {
        handleUnhandledError(err);
      }
    };
    ConsumerObserver2.prototype.complete = function() {
      var partialObserver = this.partialObserver;
      if (partialObserver.complete) {
        try {
          partialObserver.complete();
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    return ConsumerObserver2;
  }();
  var SafeSubscriber = function(_super) {
    __extends(SafeSubscriber2, _super);
    function SafeSubscriber2(observerOrNext, error, complete) {
      var _this = _super.call(this) || this;
      var partialObserver;
      if (isFunction(observerOrNext) || !observerOrNext) {
        partialObserver = {
          next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
          error: error !== null && error !== void 0 ? error : void 0,
          complete: complete !== null && complete !== void 0 ? complete : void 0
        };
      } else {
        var context_1;
        if (_this && config.useDeprecatedNextContext) {
          context_1 = Object.create(observerOrNext);
          context_1.unsubscribe = function() {
            return _this.unsubscribe();
          };
          partialObserver = {
            next: observerOrNext.next && bind(observerOrNext.next, context_1),
            error: observerOrNext.error && bind(observerOrNext.error, context_1),
            complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
          };
        } else {
          partialObserver = observerOrNext;
        }
      }
      _this.destination = new ConsumerObserver(partialObserver);
      return _this;
    }
    return SafeSubscriber2;
  }(Subscriber);
  function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      captureError(error);
    } else {
      reportUnhandledError(error);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function() {
      return onStoppedNotification(notification, subscriber);
    });
  }
  var EMPTY_OBSERVER = {
    closed: true,
    next: noop,
    error: defaultErrorHandler,
    complete: noop
  };

  // node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();

  // node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity4(x) {
    return x;
  }

  // node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity4;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev, fn) {
        return fn(prev);
      }, input);
    };
  }

  // node_modules/rxjs/dist/esm5/internal/Observable.js
  var Observable = function() {
    function Observable2(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable2.prototype.lift = function(operator) {
      var observable2 = new Observable2();
      observable2.source = this;
      observable2.operator = operator;
      return observable2;
    };
    Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
      var _this = this;
      var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
      errorContext(function() {
        var _a = _this, operator = _a.operator, source = _a.source;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
      });
      return subscriber;
    };
    Observable2.prototype._trySubscribe = function(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    };
    Observable2.prototype.forEach = function(next, promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var subscriber = new SafeSubscriber({
          next: function(value) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
        _this.subscribe(subscriber);
      });
    };
    Observable2.prototype._subscribe = function(subscriber) {
      var _a;
      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable2.prototype[observable] = function() {
      return this;
    };
    Observable2.prototype.pipe = function() {
      var operations = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }
      return pipeFromArray(operations)(this);
    };
    Observable2.prototype.toPromise = function(promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var value;
        _this.subscribe(function(x) {
          return value = x;
        }, function(err) {
          return reject(err);
        }, function() {
          return resolve(value);
        });
      });
    };
    Observable2.create = function(subscribe) {
      return new Observable2(subscribe);
    };
    return Observable2;
  }();
  function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }

  // node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  var ObjectUnsubscribedError = createErrorClass(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    };
  });

  // node_modules/rxjs/dist/esm5/internal/Subject.js
  var Subject = function(_super) {
    __extends(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this.closed = false;
      _this.currentObservers = null;
      _this.observers = [];
      _this.isStopped = false;
      _this.hasError = false;
      _this.thrownError = null;
      return _this;
    }
    Subject2.prototype.lift = function(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject2.prototype._throwIfClosed = function() {
      if (this.closed) {
        throw new ObjectUnsubscribedError();
      }
    };
    Subject2.prototype.next = function(value) {
      var _this = this;
      errorContext(function() {
        var e_1, _a;
        _this._throwIfClosed();
        if (!_this.isStopped) {
          if (!_this.currentObservers) {
            _this.currentObservers = Array.from(_this.observers);
          }
          try {
            for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      });
    };
    Subject2.prototype.error = function(err) {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.hasError = _this.isStopped = true;
          _this.thrownError = err;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    };
    Subject2.prototype.complete = function() {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.isStopped = true;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject2.prototype, "observed", {
      get: function() {
        var _a;
        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype._trySubscribe = function(subscriber) {
      this._throwIfClosed();
      return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._checkFinalizedStatuses(subscriber);
      return this._innerSubscribe(subscriber);
    };
    Subject2.prototype._innerSubscribe = function(subscriber) {
      var _this = this;
      var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
      if (hasError || isStopped) {
        return EMPTY_SUBSCRIPTION;
      }
      this.currentObservers = null;
      observers.push(subscriber);
      return new Subscription(function() {
        _this.currentObservers = null;
        arrRemove(observers, subscriber);
      });
    };
    Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    };
    Subject2.prototype.asObservable = function() {
      var observable2 = new Observable();
      observable2.source = this;
      return observable2;
    };
    Subject2.create = function(destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject2;
  }(Observable);
  var AnonymousSubject = function(_super) {
    __extends(AnonymousSubject2, _super);
    function AnonymousSubject2(destination, source) {
      var _this = _super.call(this) || this;
      _this.destination = destination;
      _this.source = source;
      return _this;
    }
    AnonymousSubject2.prototype.next = function(value) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject2.prototype.error = function(err) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject2.prototype.complete = function() {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject2.prototype._subscribe = function(subscriber) {
      var _a, _b;
      return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject2;
  }(Subject);

  // js/classes/levelState.ts
  var levelState_exports = {};
  __export(levelState_exports, {
    LevelState: () => LevelState
  });
  var LevelState = class {
    // constructor() {
    // }
    // #level = 0;
    // initLevelState(level) {
    //     this.#level = level;
    //     console.log('initLevelState');
    //     //this.currentLevelData = clone(LevelData[level]);
    //    // GameGlobals.particlePool.reset();
    // }
  };

  // js/classes/gameState.ts
  var State = {
    Init: -1,
    Title: 0,
    Pause: 1,
    Playing: 2,
    End: 3,
    Complete: 4
  };
  var GameState = class {
    constructor() {
      this.playerPositionSubject = new Subject();
      this.playerRotationSubject = new Subject();
      this.isInVRSubject = new Subject();
      this.levelSubject = new Subject();
      this.availableTargetsSubject = new Subject();
      this.levelState = new LevelState();
      this.currentRoomSubject = new Subject();
      this.levelSubject.subscribe((level) => {
      });
      this.stateSubject = new Subject();
    }
    levelState;
    stateSubject;
    _state = State.Init;
    set state(value) {
      this._state = value;
      this.stateSubject.next(value);
    }
    get state() {
      return this._state;
    }
    availableTargetsSubject;
    _availableTargets = 0;
    set availableTargets(value) {
      this._availableTargets = value;
      this.availableTargetsSubject.next(value);
    }
    get availableTargets() {
      return this._availableTargets;
    }
    levelSubject;
    _level = 0;
    set level(value) {
      this._level = value;
      this.levelSubject.next(value);
    }
    get level() {
      return this._level;
    }
    playerPositionSubject;
    _playerPosition = [0, 0, 0];
    set playerPosition(value) {
      this._previousPlayerPosition = this._playerPosition;
      this._playerPosition = value;
      this.playerPositionSubject.next(value);
    }
    get playerPosition() {
      return this._playerPosition;
    }
    _previousPlayerPosition = [0, 0, 0];
    get previousPlayerPosition() {
      return this._previousPlayerPosition;
    }
    playerRotationSubject;
    _playerRotation = 0;
    set playerRotation(value) {
      this._previousPlayerRotation = this._playerRotation;
      this._playerRotation = value;
      this.playerRotationSubject.next(value);
    }
    get playerRotation() {
      return this._playerRotation;
    }
    _previousPlayerRotation = 0;
    get previousPlayerRotation() {
      return this._previousPlayerRotation;
    }
    isInVRSubject;
    _isInVR = false;
    set isInVR(value) {
      this._isInVR = value;
      this.isInVRSubject.next(value);
    }
    get isInVR() {
      return this._isInVR;
    }
    currentRoomSubject;
    _currentRoom = [0, 0];
    set currentRoom(value) {
      this._currentRoom = value;
      this.currentRoomSubject.next(value);
    }
    get currentRoom() {
      return this._currentRoom;
    }
    offTarget() {
    }
    /**
     * Whether or not the player is currently navigating to a room
     */
    navigating = false;
    /**
     * The direction the player entered the room from
     */
    roomPreviousExitDirection = null;
    /**
     * Navigate to a room
     * @param {number} roomx the x position on the map of the room to navigate to
     * @param {number} roomy the y position on the map of the room to navigate to
     * @param {DirectionSymbol|null} direction the direction the player exited the room from, if null the player will be teleported to the center of the room (this should only happen at the start)
     */
    navigateToRoom(roomx, roomy, direction2 = null) {
      if (this.navigating) {
        return;
      }
      this.navigating = true;
      if (direction2) {
        this.roomPreviousExitDirection = direction2;
      } else {
        this.playerPosition = [3, 0, 7];
        this.playerRotation = 270;
      }
      this.currentRoom = [roomx, roomy];
      this.navigating = false;
    }
    /**
     * Is it possible to teleport to the given position?
     * @param x 
     * @param y 
     * @param z 
     * @returns true if it is possible to teleport to the given position
     */
    canTeleportToPosition(x, y, z) {
      return true;
    }
  };

  // js/components/door-handler.ts
  var door_handler_exports = {};
  __export(door_handler_exports, {
    DoorHandler: () => DoorHandler
  });

  // js/globals.ts
  var globals_exports = {};
  __export(globals_exports, {
    default: () => globals_default
  });

  // js/utils/soundfx-player.ts
  var soundfx_player_exports = {};
  __export(soundfx_player_exports, {
    SoundfxPlayer: () => SoundfxPlayer,
    Sounds: () => Sounds
  });
  var Sounds = {
    click: 0,
    movebox: 1,
    teleport: 2,
    boxstop: 3
  };
  var SoundfxPlayer = class {
    constructor() {
      this.initialized = false;
      this.currentSfxIndex = 0;
      this.audiopool = [];
      this.pannerNodes = [];
    }
    initAudio() {
      if (this.audioContext)
        return;
      this.initialized = true;
      this.sounds = [
        new Audio("sfx/click.mp3"),
        new Audio("sfx/movebox.mp3"),
        new Audio("sfx/teleport.mp3"),
        new Audio("sfx/boxstop.mp3")
      ];
      this.audioContext = new AudioContext();
      this.audioContext.listener.upY.value = 1;
      let gain = this.audioContext.createGain();
      gain.connect(this.audioContext.destination);
      for (let i = 0; i < 25; i++) {
        const audio = new Audio();
        this.audiopool.push(audio);
        const element = this.audioContext.createMediaElementSource(audio);
        const pn = new PannerNode(this.audioContext, {
          panningModel: "HRTF",
          distanceModel: "exponential"
        });
        element.connect(pn);
        pn.connect(gain);
        this.pannerNodes.push(pn);
      }
    }
    playSound(audioIndex, pos) {
      if (!this.audioContext)
        return;
      if (!pos || !pos[0] || isNaN(pos[0])) {
        pos = [0, 0, 0];
      }
      this.pannerNodes[this.currentSfxIndex].positionX.value = pos[0];
      this.pannerNodes[this.currentSfxIndex].positionY.value = pos[1];
      this.pannerNodes[this.currentSfxIndex].positionZ.value = pos[2];
      this.audiopool[this.currentSfxIndex].src = this.sounds[audioIndex].src;
      this.audiopool[this.currentSfxIndex].play();
      this.currentSfxIndex = (this.currentSfxIndex + 1) % 25;
    }
  };

  // js/utils/music-player.ts
  var Songs = {
    complete: 0,
    gameplay: 1,
    title: 2
  };
  var MusicPlayer = class {
    constructor() {
      this.initialized = false;
    }
    initAudio() {
      if (this.initialized)
        return;
      this.initialized = true;
      this.songs = [
        new Audio("Music/complete.mp3"),
        new Audio("Music/gameplay.mp3"),
        new Audio("Music/title.mp3")
      ];
      this.currentSong = new Audio();
      this.isPlaying = false;
      this.firstTime = true;
      globals_default.gameState.isInVRSubject.subscribe((isInVR) => {
        if (this.firstTime) {
          this.checkState();
          this.firstTime = false;
          return;
        }
        if (!this.isPlaying)
          return;
        if (isInVR) {
          this.currentSong.play();
        } else {
          this.currentSong.pause();
        }
      });
      globals_default.gameState.stateSubject.subscribe(() => {
        this.checkState();
      });
    }
    checkState() {
      switch (globals_default.gameState.state) {
        case State.Title:
          this.playMusic(Songs.title);
          break;
        case State.Playing:
          this.playMusic(Songs.gameplay);
          break;
        case State.Complete:
          this.playMusic(Songs.complete);
          break;
        default:
          this.currentSong.pause();
          this.isPlaying = false;
          break;
      }
    }
    playMusic(audioIndex) {
      if (!this.initialized)
        return;
      this.currentSong.src = this.songs[audioIndex].src;
      this.currentSong.loop = true;
      this.currentSong.volume = 0.25;
      this.currentSong.play();
      this.isPlaying = true;
    }
  };

  // js/globals.ts
  var _GameGlobals = class {
    gameState;
    soundFxPlayer;
    musicPlayer;
    // particlePool: null;
    globalObjectCache;
    constructor() {
      this.gameState = new GameState();
      this.soundFxPlayer = new SoundfxPlayer();
      this.musicPlayer = new MusicPlayer();
      this.globalObjectCache = null;
    }
    static get instance() {
      if (_GameGlobals._instance === null) {
        _GameGlobals._instance = new _GameGlobals();
      }
      return _GameGlobals._instance;
    }
  };
  var GameGlobals = _GameGlobals;
  __publicField(GameGlobals, "_instance", null);
  var globals_default = GameGlobals.instance;

  // js/components/door-handler.ts
  var DoorHandler = class extends Component {
    direction = "N";
    targetRoomX = 0;
    targetRoomY = 0;
    start() {
      const target = this.object.getComponent(CursorTarget);
      if (!target) {
        console.error("DoorHandler needs a CursorTarget component on the same object");
        return;
      }
      target.onClick.add(() => {
        globals_default.gameState.navigateToRoom(this.targetRoomX, this.targetRoomY, this.direction);
      });
    }
  };
  __publicField(DoorHandler, "TypeName", "door-handler");
  __decorateClass([
    property.string("N")
  ], DoorHandler.prototype, "direction", 2);
  __decorateClass([
    property.int(0)
  ], DoorHandler.prototype, "targetRoomX", 2);
  __decorateClass([
    property.int(0)
  ], DoorHandler.prototype, "targetRoomY", 2);

  // js/components/fadeScreen.ts
  var fadeScreen_exports = {};
  __export(fadeScreen_exports, {
    FadeScreen: () => FadeScreen
  });
  var _isRunning, _deltaTime, _isFadingIn, _isFadingOut;
  var FadeScreen = class extends Component {
    constructor() {
      super(...arguments);
      __publicField(this, "fadeInTime", 1);
      __publicField(this, "continuous", true);
      /**
       * Called when the fade in process is completed.
       * @type {Emitter}
       */
      __publicField(this, "FadeInCompleted");
      /**
       * Called when the fade out process is completed.
       * @type {Emitter}
       */
      __publicField(this, "FadeOutCompleted");
      /**
       * The mesh component of the object. This should be a black sphere around the head
       * of the player that fades in and out.
       * @type {MeshComponent}
       */
      __publicField(this, "mesh");
      __privateAdd(this, _isRunning, false);
      __privateAdd(this, _deltaTime, 0);
      __privateAdd(this, _isFadingIn, false);
      __privateAdd(this, _isFadingOut, false);
    }
    init() {
      this.FadeInCompleted = new Emitter();
      this.FadeOutCompleted = new Emitter();
    }
    start() {
      const mc = this.object.getComponent(MeshComponent);
      if (!mc)
        throw new Error("No mesh component found on object");
      this.mesh = mc;
      this.mesh.active = false;
    }
    fadeIn() {
      this.mesh.active = true;
      __privateSet(this, _isFadingIn, true);
      __privateSet(this, _isRunning, true);
    }
    fadeOut() {
      this.mesh.active = true;
      __privateSet(this, _isFadingOut, true);
      __privateSet(this, _isRunning, true);
    }
    update(delta) {
      if (__privateGet(this, _isRunning)) {
        let alpha = 0;
        if (__privateGet(this, _isFadingIn)) {
          __privateSet(this, _deltaTime, __privateGet(this, _deltaTime) - delta / this.fadeInTime);
          alpha = clamp(lerp5(0, 1, __privateGet(this, _deltaTime), Easing.InQuad), 0, 1);
        }
        if (__privateGet(this, _isFadingOut)) {
          __privateSet(this, _deltaTime, __privateGet(this, _deltaTime) + delta / this.fadeInTime);
          alpha = clamp(lerp5(0, 1, __privateGet(this, _deltaTime), Easing.OutQuad), 0, 1);
        }
        if (__privateGet(this, _deltaTime) >= 1 || __privateGet(this, _deltaTime) <= 0) {
          __privateSet(this, _isRunning, false);
          __privateSet(this, _isFadingIn, false);
          __privateSet(this, _isFadingOut, false);
          if (__privateGet(this, _deltaTime) >= 1) {
            __privateSet(this, _deltaTime, 1);
            this.FadeOutCompleted.notify();
            if (this.continuous) {
              this.fadeIn();
            }
          } else {
            const flatMaterial2 = this.mesh.material;
            if (flatMaterial2) {
              flatMaterial2.color = [0, 0, 0, 0];
            }
            __privateSet(this, _deltaTime, 0);
            this.FadeInCompleted.notify();
          }
        }
        const flatMaterial = this.mesh.material;
        if (flatMaterial) {
          flatMaterial.color = [0, 0, 0, alpha];
        }
      }
    }
  };
  _isRunning = new WeakMap();
  _deltaTime = new WeakMap();
  _isFadingIn = new WeakMap();
  _isFadingOut = new WeakMap();
  __publicField(FadeScreen, "TypeName", "fade-screen");
  __decorateClass([
    property.float(1)
  ], FadeScreen.prototype, "fadeInTime", 2);
  __decorateClass([
    property.bool(true)
  ], FadeScreen.prototype, "continuous", 2);

  // js/components/game.ts
  var game_exports = {};
  __export(game_exports, {
    Game: () => Game
  });

  // js/components/level-generator.ts
  var level_generator_exports = {};
  __export(level_generator_exports, {
    LevelGenerator: () => LevelGenerator
  });

  // js/data/level-data.ts
  var LevelData = [
    {
      width: 9,
      height: 3,
      depth: 7,
      data: [
        [
          [
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Door", door: 3 },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null
          ],
          [
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null
          ],
          [
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null
          ]
        ],
        [
          [
            { data: "Wall01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            null,
            null,
            null,
            null,
            null,
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            { data: "Wall01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Door", door: 0 }
          ],
          [{ data: "Wall01", door: null }, null, null, null, null, null, null],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            { data: "Wall01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            null,
            null,
            null,
            null,
            null,
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            { data: "Door", door: 2 },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Wall01", door: null }
          ],
          [null, null, null, null, null, null, { data: "Wall01", door: null }],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            { data: "Wall01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            null,
            null,
            null,
            null,
            null,
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            { data: "Wall01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            null,
            null,
            null,
            null,
            null,
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            { data: "Wall01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Floor01", door: null },
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            null,
            null,
            null,
            null,
            null,
            { data: "Wall01", door: null }
          ],
          [
            { data: "Wall01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Ceiling01", door: null },
            { data: "Wall01", door: null }
          ]
        ],
        [
          [
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Door", door: 1 },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null
          ],
          [
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null
          ],
          [
            null,
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            { data: "Wall01", door: null },
            null
          ]
        ]
      ],
      start: { X: 4, Y: 0, Z: 3, Rx: 0, Ry: 0, Rz: 0 }
    }
  ];

  // js/dungeongen/MazeGenerator.ts
  var MazeGenerator_exports = {};
  __export(MazeGenerator_exports, {
    MazeGenerator: () => MazeGenerator
  });

  // js/dungeongen/room.ts
  var room_exports = {};
  __export(room_exports, {
    Room: () => Room2
  });

  // js/forFramework/findCharInStringArray.ts
  function findCharInStringArray(grid, targetChar) {
    for (let y = 0; y < grid.length; y++) {
      for (let x = 0; x < grid[y].length; x++) {
        if (grid[y][x] === targetChar) {
          return { x, y };
        }
      }
    }
    return null;
  }

  // js/dungeongen/roomTemplates.ts
  var roomTemplates_exports = {};
  __export(roomTemplates_exports, {
    RoomTemplate: () => RoomTemplate,
    RoomTemplatePatternDefinitions: () => RoomTemplatePatternDefinitions,
    RoomTypes: () => RoomTypes,
    roomTemplates: () => roomTemplates
  });
  var RoomTypes = {
    Entrance: (
      /** @type {RoomType} */
      "entrance"
    ),
    Exit: (
      /** @type {RoomType} */
      "exit"
    ),
    Treasure: (
      /** @type {RoomType} */
      "treasure"
    ),
    Normal: (
      /** @type {RoomType} */
      "normal"
    )
  };
  var RoomTemplate = class {
    /**
     * @description the name of the room
     * @type {string | undefined} name
     */
    name;
    /**
     * @description the type of the room
     * @type {RoomType | undefined} type
     */
    type;
    /**
     * @description the pattern of the room
     * @type {string[] | undefined} pattern
     */
    pattern;
    /**
     * @description the height of the ceiling in tiles, randomly chosen from this array
     * @type {number[]} ceilingHeight
     */
    ceilingHeight = [2];
    /**
     * @description whether or not this room can be rotated
     * @type {boolean | undefined} canBeRotated
     */
    canBeRotated;
  };
  var roomTemplates = [
    {
      name: "entrance",
      type: RoomTypes.Entrance,
      ceilingHeight: [4],
      canBeRotated: false,
      pattern: [
        " #####N##### ",
        "#.C........C#",
        "#.........%.#",
        "#..........# ",
        "#..%.......# ",
        "W...........E",
        "#C........CC#",
        "#...........#",
        "##.....%....#",
        "  ##........#",
        "    #S###### "
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [3, 4],
      canBeRotated: true,
      pattern: [
        " #N#   ",
        " #..## ",
        "#X...X#",
        "W..%...E",
        "#....X#",
        " #S### "
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [3, 4],
      canBeRotated: true,
      pattern: [
        "#####    ",
        "#.X.#N###",
        "#.%.....E",
        "#.......#",
        "#.......#",
        "W.....%.#",
        "#.......#",
        "#S#######"
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [3, 4],
      canBeRotated: true,
      pattern: [
        "##N###    ",
        "#..%.#####",
        "#X.......E",
        "#........#",
        " #...#####",
        " W.%.# ",
        " #...# ",
        " ##S## "
      ]
    },
    {
      name: "Final room",
      type: RoomTypes.Exit,
      ceilingHeight: [4],
      canBeRotated: false,
      pattern: [
        "#N#########",
        "W..%......#",
        "#.........#",
        "#.........#",
        "#..%...%..#",
        "#.........#",
        "#.........#",
        "#......%..E",
        "#########S#"
      ]
    },
    {
      name: "Treasure Room",
      type: RoomTypes.Treasure,
      ceilingHeight: [3],
      canBeRotated: false,
      pattern: [
        "#N#########",
        "W..%..#...#",
        "#.....#...#",
        "#.....#...#",
        "#..%...%..#",
        "#...#.....#",
        "#...#.....#",
        "#...#..%..E",
        "#########S#"
      ]
    }
  ];
  var RoomTemplatePatternDefinitions = {
    N: {
      // Door to the north
    },
    E: {
      // Door to the east
    },
    S: {
      // Door to the south
    },
    W: {
      // Door to the west
    },
    C: {
      // Campfire( max 1 per room)
    },
    ".": {
      // Empty space
    },
    "#": {
      // Wall
    },
    "%": {
      // Torch (light)
    },
    X: {
      // Enemy
    },
    "!": {
      // Something special. Is decided based on the biome and the room type
    },
    P: {
      // Prop
    },
    O: {
      // Ore
    },
    G: {
      // Gem
    }
  };

  // js/dungeongen/room.ts
  var Room2 = class {
    /**
     * The rooms a door will take you to
     * @type {RoomDirections}
     */
    targetRooms;
    /**
     * The template used to generate this room  
     */
    #roomTemplate = null;
    /**
     * Does this room have a door in each direction?
     */
    doors;
    /**
     * Is this room the exit, the final room of the game?
     */
    isExit;
    /**
     * Is this room the entrance, the first room of the game? 
     */
    isEntrance;
    /**
     * Is this room a treasure room?
     */
    isTreasure;
    /**
     * The seed used to generate this room
     */
    seed;
    /**
     * The distance from the entrance
     */
    distanceFromEntrance;
    constructor() {
      this.doors = { north: false, west: false, south: false, east: false };
      this.targetRooms = { north: null, west: null, south: null, east: null };
      this.isExit = false;
      this.isEntrance = false;
      this.isTreasure = false;
      this.seed = 0;
      this.distanceFromEntrance = 0;
    }
    toKey() {
      let key = "";
      if (this.doors.north)
        key += "N";
      if (this.doors.east)
        key += "E";
      if (this.doors.south)
        key += "S";
      if (this.doors.west)
        key += "W";
      return key;
    }
    /**
     * Gets the room in a specific direction
     * @param {DirectionSymbol|string} direction 
     * @returns {{x:number, y:number}|null|undefined} the room in that direction; null if there is no room in that direction
     */
    getTargetRoom(direction2) {
      switch (direction2) {
        case "N":
          return this.targetRooms.north;
        case "E":
          return this.targetRooms.east;
        case "S":
          return this.targetRooms.south;
        case "W":
          return this.targetRooms.west;
      }
    }
    /**
     * 
     * @returns {RoomType} the type of the room
     */
    getRoomType() {
      if (this.isEntrance) {
        return RoomTypes.Entrance;
      }
      if (this.isExit) {
        return RoomTypes.Exit;
      }
      if (this.isTreasure) {
        return RoomTypes.Treasure;
      }
      return RoomTypes.Normal;
    }
    /**
     * 
     * @param {RoomTemplate} roomTemplate 
     */
    setRoomTemplate(roomTemplate) {
      if (this.#roomTemplate === null) {
        this.#roomTemplate = roomTemplate;
      } else {
        console.warn("RoomTemplate already set");
      }
    }
    getRoomTemplate() {
      return this.#roomTemplate;
    }
    /**
     * Gets the door in a specific direction from the template
     * @param {DirectionSymbol} direction 
     * @returns {{x:number, y:number}}|null} the X/Y coordinates of the door; or null if there is no door in that direction
     */
    getDoor(direction2) {
      let result = findCharInStringArray(this.#roomTemplate.pattern, direction2);
      return result;
    }
  };

  // js/dungeongen/MazeGenerator.ts
  var MazeGenerator = class {
    mazeWidth;
    mazeHeight;
    /**
     * The grid of rooms that make up the level.
     * @type {Room[][]}
     */
    maze = [[]];
    patterns;
    constraints;
    farthestRoom;
    constructor(sizeX, sizeY, tileSet = null, extractedPatterns = [], constraintMappingForAllKeySets = null) {
      this.mazeWidth = sizeX;
      this.mazeHeight = sizeY;
      this.patterns = extractedPatterns;
      this.constraints = constraintMappingForAllKeySets;
      this.#createGrid();
      this.farthestRoom = { x: 0, y: 0, distance: 0 };
    }
    #createGrid() {
      this.maze = new Array(this.mazeWidth);
      for (let x = 0; x < this.mazeWidth; x++) {
        this.maze[x] = new Array(this.mazeHeight);
        for (let y = 0; y < this.mazeHeight; y++) {
          this.maze[x][y] = new Room2();
        }
      }
      return this.maze;
    }
    /**
     * Gets a room from the grid at the given indices.
     * @param {number} x X-index of the room
     * @param {number} y Y-index of the room
     * @returns {Room} The room at the given indices
     */
    getRoom(x, y) {
      return this.maze[x][y];
    }
    /**
     * Gets the pattern at the given index from the list of patterns.
     * @param {number} index The index of the pattern to get.
     * @returns {Tile} The pattern at the given index.
     */
    getPattern(index) {
      return this.patterns[index];
    }
    enableDoors(x1, y1, x2, y2, direction2) {
      switch (direction2) {
        case "north":
          this.maze[x1][y1].doors.north = true;
          this.maze[x1][y1].targetRooms.north = { x: x2, y: y2 };
          this.maze[x2][y2].doors.south = true;
          this.maze[x2][y2].targetRooms.south = { x: x1, y: y1 };
          break;
        case "east":
          this.maze[x1][y1].doors.east = true;
          this.maze[x1][y1].targetRooms.east = { x: x2, y: y2 };
          this.maze[x2][y2].doors.west = true;
          this.maze[x2][y2].targetRooms.west = { x: x1, y: y1 };
          break;
        case "south":
          this.maze[x1][y1].doors.south = true;
          this.maze[x1][y1].targetRooms.south = { x: x2, y: y2 };
          this.maze[x2][y2].doors.north = true;
          this.maze[x2][y2].targetRooms.north = { x: x1, y: y1 };
          break;
        case "west":
          this.maze[x1][y1].doors.west = true;
          this.maze[x1][y1].targetRooms.west = { x: x2, y: y2 };
          this.maze[x2][y2].doors.east = true;
          this.maze[x2][y2].targetRooms.east = { x: x1, y: y1 };
          break;
      }
    }
    isValidCoordinates(x, y) {
      return x >= 0 && x < this.mazeWidth && y >= 0 && y < this.mazeHeight;
    }
    generate() {
      this.#generateMazeRecursively(0, 0);
      this.getRoom(this.farthestRoom.x, this.farthestRoom.y).isExit = true;
      this.getRoom(0, 0).isEntrance = true;
      console.log(`distance:${this.farthestRoom.distance}`);
    }
    /**
     * Generates a maze using the recursive backtracking algorithm.
     * @param {number} x Start X coordinate
     * @param {number} y Start Y coordinate
     * @param {string[]} visitedList The list of visited rooms, omit to start a new list.
     */
    #generateMazeRecursively(x, y, visitedList = [], distance2 = 0) {
      if (!visitedList) {
        visitedList = [];
      }
      visitedList.push(`${x},${y}`);
      const directions = [
        { dx: -1, dy: 0, direction: "north" },
        { dx: 1, dy: 0, direction: "south" },
        { dx: 0, dy: -1, direction: "west" },
        { dx: 0, dy: 1, direction: "east" }
      ];
      shuffleArray(directions);
      const currentRoom = this.getRoom(x, y);
      currentRoom.distanceFromEntrance = distance2;
      if (distance2 % 10 == 0) {
        currentRoom.isTreasure = true;
      }
      for (const dir of directions) {
        if (!dir)
          continue;
        const newX = x + dir.dx;
        const newY = y + dir.dy;
        if (this.isValidCoordinates(newX, newY) && !visitedList.includes(`${newX},${newY}`)) {
          this.enableDoors(x, y, newX, newY, dir.direction);
          if (distance2 > this.farthestRoom.distance) {
            this.farthestRoom.x = newX;
            this.farthestRoom.y = newY;
            this.farthestRoom.distance = distance2;
          }
          this.#generateMazeRecursively(newX, newY, visitedList, distance2 + 1);
        }
      }
    }
  };

  // js/dungeongen/tileset.ts
  var tileset_exports = {};
  __export(tileset_exports, {
    TileSet: () => TileSet
  });

  // js/dungeongen/tile.ts
  var tile_exports = {};
  __export(tile_exports, {
    Tile: () => Tile
  });
  var Tile = class {
    /**
     * name of the 3d object
     * @type {string}
     */
    name;
    /**
     * reference to the 3D object
     * @type {Object3D}
     */
    object;
    /**
     * Index in the tileset
     * @type {number}
     */
    index;
    /**
     * 
     * @param {string} name 
     * @param {Object3D|undefined} object 
     * @param {number} index 
     */
    constructor(name, object, index) {
      if (!object) {
        throw new Error("object is undefined");
      }
      this.name = name;
      this.object = object;
      this.index = index;
    }
  };

  // js/dungeongen/tileset.ts
  var TileSet = class {
    /**
     * The set of tiles.
     * @type {Set<Tile>}
     */
    #tiles;
    /**
     * Initializes a new instance of the TileSet class.
     * @param {Object3D[]} tileObjects The list of Wonderland objects that represent the tiles.
     */
    constructor(tileObjects) {
      this.#tiles = /* @__PURE__ */ new Set();
      this.#tiles.add(new Tile("Air", this.#findObject(tileObjects, "Air"), this.#tiles.size));
      this.#tiles.add(
        new Tile("Floor01", this.#findObject(tileObjects, "Floor01"), this.#tiles.size)
      );
      this.#tiles.add(
        new Tile("Floor02", this.#findObject(tileObjects, "Floor02"), this.#tiles.size)
      );
      this.#tiles.add(
        new Tile("Floor03", this.#findObject(tileObjects, "Floor03"), this.#tiles.size)
      );
      this.#tiles.add(
        new Tile("Floor04", this.#findObject(tileObjects, "Floor04"), this.#tiles.size)
      );
      this.#tiles.add(
        new Tile("Floor05", this.#findObject(tileObjects, "Floor05"), this.#tiles.size)
      );
      this.#tiles.add(new Tile("Wall01", this.#findObject(tileObjects, "Wall01"), this.#tiles.size));
      this.#tiles.add(new Tile("Wall02", this.#findObject(tileObjects, "Wall02"), this.#tiles.size));
      this.#tiles.add(new Tile("Door", this.#findObject(tileObjects, "Door"), this.#tiles.size));
      this.#tiles.add(
        new Tile("Ceiling01", this.#findObject(tileObjects, "Ceiling01"), this.#tiles.size)
      );
      this.#tiles.add(
        new Tile("Firepit", this.#findObject(tileObjects, "Firepit"), this.#tiles.size)
      );
      this.#tiles.add(
        new Tile("Gems", this.#findObject(tileObjects, "Gems"), this.#tiles.size)
      );
    }
    /**
     * Gets the tile at the given index.
     * @param {number} index The index of the tile to get.
     * @returns {Tile} The tile at the given index.
     */
    getTile(index) {
      return [...this.#tiles][index];
    }
    /**
     * Get a tile by its name.
     * @param {string} name
     * @returns {Tile|undefined} The tile with the given name.
     */
    getTileByName(name) {
      return [...this.#tiles].find((x) => x.name == name);
    }
    /**
     * Finds an object in the given list of objects with the given name.
     * @param {Object3D[]} objects list of objects to seach through
     * @param {string} name name of the object to find
     * @returns {Object3D|undefined} the object with the given name
     */
    #findObject(objects, name) {
      return objects.find((x) => x.name === name);
    }
  };

  // js/dungeongen/PatternSet.ts
  var PatternSet_exports = {};
  __export(PatternSet_exports, {
    PatternSet: () => PatternSet
  });

  // js/dungeongen/utils/extractor.ts
  var extractor_exports = {};
  __export(extractor_exports, {
    buildConstraintsMap: () => buildConstraintsMap,
    checkConstraints: () => checkConstraints,
    extractPatterns2D: () => extractPatterns2D,
    extractPatterns3D: () => extractPatterns3D,
    extractPatternsWrap: () => extractPatternsWrap,
    rotatePattern: () => rotatePattern
  });
  function rotatePattern(pattern, patternSize) {
    let rotatedPattern = [];
    for (let i = 0; i < patternSize; i++) {
      rotatedPattern.push([]);
      for (let j = patternSize - 1; j >= 0; j--) {
        rotatedPattern[i].push(pattern[j][i]);
      }
    }
    return rotatedPattern;
  }
  function extractPatterns2D(input, patternSize) {
    const width = input[0].length;
    const height = input.length;
    let patterns = /* @__PURE__ */ new Map();
    for (let y = 0; y <= height - patternSize; y++) {
      for (let x = 0; x <= width - patternSize; x++) {
        let basePattern = [];
        for (let i = 0; i < patternSize; i++) {
          let row = [];
          for (let j = 0; j < patternSize; j++) {
            row.push(input[y + i][x + j]);
          }
          basePattern.push(row);
        }
        let currentPattern = basePattern;
        let key = JSON.stringify(currentPattern);
        if (!patterns.has(key)) {
          patterns.set(key, { pattern: currentPattern, weight: 1 });
        } else {
          let value = patterns.get(key);
          value.weight += 1;
          patterns.set(key, value);
        }
      }
    }
    return Array.from(patterns.values());
  }
  function extractPatternsWrap(input, patternSize) {
    const width = input[0].length;
    const height = input.length;
    let patterns = /* @__PURE__ */ new Map();
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        let basePattern = [];
        for (let i = 0; i < patternSize; i++) {
          let row = [];
          for (let j = 0; j < patternSize; j++) {
            row.push(input[(x + i) % height][(y + j) % width]);
          }
          basePattern.push(row);
        }
        let currentPattern = basePattern;
        let key = JSON.stringify(currentPattern);
        if (!patterns.has(key)) {
          patterns.set(key, { pattern: currentPattern, weight: 1 });
        } else {
          let value = patterns.get(key);
          value.weight += 1;
          patterns.set(key, value);
        }
      }
    }
    return Array.from(patterns.values());
  }
  function extractPatterns3D(input, patternSize) {
    const width = input[0][0].length;
    const height = input[0].length;
    const depth = input.length;
    let patterns = /* @__PURE__ */ new Map();
    for (let z = 0; z <= depth - patternSize; z++) {
      for (let y = 0; y <= height - patternSize; y++) {
        for (let x = 0; x <= width - patternSize; x++) {
          let pattern = [];
          for (let i = 0; i < patternSize; i++) {
            let layer = [];
            for (let j = 0; j < patternSize; j++) {
              let row = [];
              for (let k = 0; k < patternSize; k++) {
                row.push(input[z + i][y + j][x + k]);
              }
              layer.push(row);
            }
            pattern.push(layer);
          }
          let key = JSON.stringify(pattern);
          if (!patterns.has(key)) {
            patterns.set(key, { pattern, count: 1 });
          } else {
            let value = patterns.get(key);
            value.count += 1;
            patterns.set(key, value);
          }
        }
      }
    }
  }
  function checkConstraints(patternA, patternB) {
    const size2 = patternA.length;
    let topMatch = true;
    for (let i = 0; i < size2; i++) {
      if (patternA[i][0] !== patternB[i][size2 - 1]) {
        topMatch = false;
        break;
      }
    }
    let bottomMatch = true;
    for (let i = 0; i < size2; i++) {
      if (patternA[i][size2 - 1] !== patternB[i][0]) {
        bottomMatch = false;
        break;
      }
    }
    let leftMatch = true;
    for (let j = 0; j < size2; j++) {
      if (patternA[0][j] !== patternB[size2 - 1][j]) {
        leftMatch = false;
        break;
      }
    }
    let rightMatch = true;
    for (let j = 0; j < size2; j++) {
      if (patternA[size2 - 1][j] !== patternB[0][j]) {
        rightMatch = false;
        break;
      }
    }
    return { north: topMatch, south: bottomMatch, west: leftMatch, east: rightMatch };
  }
  function buildConstraintsMap(patterns) {
    const constraintsMap = /* @__PURE__ */ new Map();
    patterns.forEach((patternDataA, keyA) => {
      let constraintsObjectPerPatternDirectionWise = {};
      patterns.forEach((patternDataB, keyB) => {
        const constraintsBetweenPatterns = checkConstraints(
          patternDataA.pattern,
          patternDataB.pattern
        );
        Object.keys(constraintsBetweenPatterns).forEach((direction2) => {
          if (constraintsBetweenPatterns[direction2]) {
            if (!constraintsObjectPerPatternDirectionWise[direction2])
              constraintsObjectPerPatternDirectionWise[direction2] = [keyB];
            else
              constraintsObjectPerPatternDirectionWise[direction2].push(keyB);
          }
        });
      });
      constraintsMap.set(keyA, constraintsObjectPerPatternDirectionWise);
    });
    return constraintsMap;
  }

  // js/dungeongen/PatternSet.ts
  var PatternSet = class {
    #patterns = /* @__PURE__ */ new Map();
    constructor() {
      this.#patterns.set("N", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 6, 6, 6, 6]
      ]);
      this.#patterns.set("E", rotatePattern(this.#patterns.get("N"), 5));
      this.#patterns.set("S", rotatePattern(this.#patterns.get("E"), 5));
      this.#patterns.set("W", rotatePattern(this.#patterns.get("S"), 5));
      this.#patterns.set("NE", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 1],
        [6, 1, 1, 1, 6],
        [6, 6, 6, 6, 6]
      ]);
      this.#patterns.set("ES", rotatePattern(this.#patterns.get("NE"), 5));
      this.#patterns.set("SW", rotatePattern(this.#patterns.get("ES"), 5));
      this.#patterns.set("NW", rotatePattern(this.#patterns.get("SW"), 5));
      this.#patterns.set("NS", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 6, 1, 6, 6]
      ]);
      this.#patterns.set("EW", rotatePattern(this.#patterns.get("NS"), 5));
      this.#patterns.set("NES", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 1],
        [6, 1, 1, 1, 6],
        [6, 6, 1, 6, 6]
      ]);
      this.#patterns.set("ESW", rotatePattern(this.#patterns.get("NES"), 5));
      this.#patterns.set("NSW", rotatePattern(this.#patterns.get("ESW"), 5));
      this.#patterns.set("NEW", rotatePattern(this.#patterns.get("NSW"), 5));
      this.#patterns.set("NESW", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [1, 1, 1, 1, 1],
        [6, 1, 1, 1, 6],
        [6, 6, 1, 6, 6]
      ]);
    }
    /**
     * get the pattern for the given key
     * @param {string} key 
     * @returns {number[][]} the pattern for the given key
     */
    get(key) {
      if (this.#patterns.has(key)) {
        return this.#patterns.get(key);
      } else {
        throw new Error(`PatternSet: No pattern for key ${key}`);
      }
    }
  };

  // js/dungeongen/RoomRenderer.ts
  var RoomRenderer_exports = {};
  __export(RoomRenderer_exports, {
    RoomRenderer: () => RoomRenderer
  });
  var RoomRenderer = class {
    /**
     * A reference to the Wonderland Engine
     * @type {WonderlandEngine}
     */
    #engine;
    /**
     * A reference to the parent of all objects in the room.
     * Generated objects will be a child of this object.
     * @type {Object3D}
     */
    #parent;
    /**
     * A reference to the tileset
     * @type {TileSet}
     */
    #tileset;
    /**
     * A reference to the lights objects that can be used in the room
     * @type {Object3D[]}
     */
    #lights;
    /**
     * A reference to the block cache
     * @type {ObjectCache}
     */
    #blockCache;
    /**
     * Instantiates a new RoomRenderer
     * @param {WonderlandEngine} engine
     * @param {Object3D} parent
     * @param {Object3D[]} lights
     * @param {TileSet} tileset
     * @param {ObjectCache} blockCache
     */
    constructor(engine, parent, tileset, lights, blockCache) {
      this.#engine = engine;
      this.#parent = parent;
      this.#tileset = tileset;
      this.#lights = lights;
      this.#blockCache = blockCache;
    }
    /**
     * Renders a room
     * @param {Room} room The room to render
     */
    render(room) {
      let template = room.getRoomTemplate();
      if (!template) {
        const possitbleTemplate = roomTemplates.filter((t) => t.type == room.getRoomType());
        template = rng.getItem(possitbleTemplate);
        room.setRoomTemplate(template);
      }
      let roomLights = [];
      if (!template) {
        throw new Error(`No template found for room type ${room.getRoomType()}`);
      }
      const roomdesign = template.pattern;
      if (!roomdesign) {
        throw new Error(`No room design found for room type ${room.getRoomType()}`);
      }
      for (let y = 0; y < roomdesign.length; y++) {
        for (let x = 0; x < roomdesign[y].length; x++) {
          for (let h = 0; h < template.ceilingHeight[0]; h++) {
            let tile;
            switch (roomdesign[y][x]) {
              case "#":
                tile = this.#tileset.getTileByName("Wall01");
                break;
              case "%":
                if (h == 0) {
                  roomLights.push([x, h, y]);
                }
              case "C":
              case "X":
              case ".":
                if (h == 0) {
                  tile = this.#tileset.getTileByName("Floor01");
                } else if (h == template.ceilingHeight[0] - 1) {
                  tile = this.#tileset.getTileByName("Ceiling01");
                } else {
                  continue;
                }
                break;
              case "N":
                tile = this.#renderDoorOrWall(h, room.doors.north);
                break;
              case "E":
                tile = this.#renderDoorOrWall(h, room.doors.east);
                break;
              case "S":
                tile = this.#renderDoorOrWall(h, room.doors.south);
                break;
              case "W":
                tile = this.#renderDoorOrWall(h, room.doors.west);
                break;
              default:
                continue;
            }
            if (tile) {
              let newObj = this.createTile(x, h, y, tile.object);
              let tags = newObj.getComponent(Tags);
              if (tags && tags.hasTag("Door")) {
                this.setupDoor(
                  newObj,
                  room.getTargetRoom(roomdesign[y][x]),
                  /** @type {DirectionSymbol} */
                  roomdesign[y][x]
                );
              }
            }
          }
        }
      }
      this.#setupLights(roomLights, room);
      this.createInterior(room, roomdesign);
    }
    /**
     * Setup the scripts for the door, adding a new one if needed.
     * @param {Object3D} newObj the newly created object (the door)
     * @param {*} room
     * @param {DirectionSymbol} direction
     */
    setupDoor(newObj, room, direction2) {
      let oldComp = newObj.getComponent(DoorHandler);
      if (oldComp) {
        oldComp.direction = direction2;
        oldComp.targetRoomX = room.x;
        oldComp.targetRoomY = room.y;
        oldComp.active = true;
      } else
        newObj.addComponent(DoorHandler, {
          direction: direction2,
          targetRoomX: room.x,
          targetRoomY: room.y
        });
    }
    /**
     * Renders a door or wall depending on the height and if it there's a door
     * @param {number} h
     * @param {boolean} hasDoor
     * @returns {Tile}
     */
    #renderDoorOrWall(h, hasDoor) {
      if (h === 0) {
        if (hasDoor) {
          return this.#tileset.getTileByName("Door");
        } else {
          return this.#tileset.getTileByName("Wall01");
        }
      } else if (h === 1 && !hasDoor) {
        return this.#tileset.getTileByName("Wall01");
      } else if (h > 1) {
        return this.#tileset.getTileByName("Wall01");
      }
    }
    /**
     * Sets up the lights in a room
     * @param {number[][]} roomLights
     * @param {*} room
     */
    #setupLights(roomLights, room) {
      for (let index = 0; index < this.#lights.length; index++) {
        const light = this.#lights[index];
        light.resetPositionRotation();
        if (roomLights[index]) {
          light.getComponent(LightComponent).active = true;
          light.setPositionWorld([roomLights[index][0], 2, roomLights[index][2]]);
        } else {
          light.getComponent(LightComponent).active = false;
        }
      }
      this.#lights;
    }
    /**
     * Creates the interior of a room
     * @param {Room} room
     * @param {*} roomdesign
     */
    createInterior(room, roomdesign) {
      const roomRNG = rng.clone().setSeed(room.seed);
      let hasFirepit = false;
      for (let y = 0; y < roomdesign.length; y++) {
        for (let x = 0; x < roomdesign[y].length; x++) {
          let tile;
          switch (roomdesign[y][x]) {
            case "C":
              if (!hasFirepit) {
                console.log("campfire");
                tile = this.#tileset.getTileByName("Firepit");
                hasFirepit = true;
              }
              break;
            default:
              continue;
          }
          if (tile) {
            let newObj = this.createTile(x, 0, y, tile.object);
          }
        }
      }
    }
    /**
     *
     * @param {*} x
     * @param {*} y
     * @param {*} z
     * @param {*} tile
     * @returns Object3D
     */
    createTile(x, y, z, tile) {
      let blockObj = tile;
      let obj = cloneObject(this.#engine, blockObj, this.#blockCache);
      obj.resetPositionRotation();
      obj.setPositionWorld([x, y, z]);
      return obj;
    }
  };

  // js/dungeongen/utils/gridHelpers.ts
  var gridHelpers_exports = {};
  __export(gridHelpers_exports, {
    getInvertedDirection: () => getInvertedDirection,
    getNeighbors: () => getNeighbors
  });
  var NEIGHBOR_OFFSETS = [
    { x: -1, y: 0, z: 0, name: "west" },
    { x: 1, y: 0, z: 0, name: "east" },
    { x: 0, y: -1, z: 0, name: "down" },
    { x: 0, y: 1, z: 0, name: "up" },
    { x: 0, y: 0, z: -1, name: "south" },
    { x: 0, y: 0, z: 1, name: "north" }
  ];
  function getNeighbors(grid, position) {
    const width = grid.sizeX;
    const height = grid.sizeY;
    const depth = grid.sizeZ;
    const neighbors = [];
    for (const offset2 of NEIGHBOR_OFFSETS) {
      const newX = position.x + offset2.x;
      const newY = position.y + offset2.y;
      const newZ = position.z + offset2.z;
      if (newX >= 0 && newX < width && newY >= 0 && newY < height && newZ >= 0 && newZ < depth) {
        neighbors.push({ x: newX, y: newY, z: newZ, name: offset2.name });
      }
    }
    return neighbors;
  }
  function getInvertedDirection(direction2) {
    switch (direction2) {
      case "N":
        return "S";
      case "S":
        return "N";
      case "E":
        return "W";
      case "W":
        return "E";
    }
  }

  // js/components/level-generator.ts
  var size = 9;
  var LevelGenerator = class extends Component {
    fadeScreenObject;
    levelRoot;
    /**
     * The root object of the lights. Available Lights are children of this.
     */
    lights;
    /**
     * The component that is used to fade the screen to black and back.
     */
    fadeScreenComponent;
    generator;
    levelParent;
    currentLd;
    tileset;
    patternSet;
    roomRenderer;
    blockCache;
    /**
     * overrides the init method of the component
     */
    init() {
      this.generator = new MazeGenerator(size, size);
    }
    /**
     * overrides the start method of the component
     */
    start() {
      const fsc = this.fadeScreenObject.getComponent(FadeScreen);
      if (!fsc) {
        throw new Error("No FadeScreen component found on fadeScreenObject");
      }
      this.fadeScreenComponent = fsc;
    }
    /**
     * Generates a level
     * @param {Number} level The level to generate
     * @returns {any}
     */
    generate(level = 0, parent = null) {
      this.currentLd = LevelData[level];
      this.levelParent = parent || this.levelRoot;
      this.tileset = new TileSet(this.object.children);
      this.patternSet = new PatternSet();
      this.generator.generate();
      this.levelParent.children.length = 0;
      if (!globals_default.globalObjectCache) {
        globals_default.globalObjectCache = new ObjectCache(
          this.engine,
          "blocks",
          2400,
          this.levelParent,
          24e3
        );
      } else {
        globals_default.globalObjectCache.reset();
      }
      this.roomRenderer = new RoomRenderer(
        this.engine,
        this.levelParent,
        this.tileset,
        this.lights.children,
        globals_default.globalObjectCache
      );
      this.blockCache = globals_default.globalObjectCache;
      globals_default.gameState.currentRoomSubject.subscribe((r) => {
        const currentRoom = this.generator.getRoom(r[0], r[1]);
        this.fadeScreenComponent.FadeOutCompleted.once(() => {
          this.blockCache.reset();
          this.roomRenderer.render(currentRoom);
          if (globals_default.gameState.roomPreviousExitDirection) {
            let enterDirection = getInvertedDirection(
              globals_default.gameState.roomPreviousExitDirection
            );
            let exit = currentRoom.getDoor(enterDirection);
            if (exit) {
              let rotation = 0;
              switch (enterDirection) {
                case "N":
                  exit.y += 1;
                  rotation = 180;
                  break;
                case "S":
                  exit.y -= 1;
                  rotation = 0;
                  break;
                case "E":
                  exit.x -= 1;
                  rotation = 90;
                  break;
                case "W":
                  exit.x += 1;
                  rotation = 270;
                  break;
              }
              globals_default.gameState.playerPosition = [exit.x, 0, exit.y];
              globals_default.gameState.playerRotation = rotation;
            }
          }
        });
        this.fadeScreenComponent.fadeOut();
      });
      this.renderDebug(this.generator);
    }
    /**
     * Creates a room in the scene that is rendered and where the player can do stuff
     * @param {Room} room The room to render
     */
    render(room) {
      const roomdesign = this.currentLd;
      for (let i = 0; i < roomdesign.width; i++) {
        for (let j = 0; j < roomdesign.height; j++) {
          for (let h = 0; h < roomdesign.depth; h++) {
            const tileIndex = roomdesign.data[i][j][h];
            if (tileIndex != null && tileIndex != void 0) {
              let tile = this.tileset.getTileByName(tileIndex.data);
              if (tile) {
                this.createTile(i, j, h, tile.object);
              } else {
                console.warn("Tile not found: " + tileIndex.data);
              }
            }
          }
        }
      }
    }
    /**
     * Renders a debug view of the map
     * @param {MazeGenerator} generator
     */
    renderDebug(generator) {
      const canvas2 = document.createElement("canvas");
      canvas2.style.position = "absolute";
      canvas2.style.top = "0px";
      canvas2.style.left = "0px";
      canvas2.style.zIndex = "100";
      canvas2.style.width = "256px";
      canvas2.style.imageRendering = "pixelated";
      canvas2.width = 100;
      canvas2.height = 100;
      const ctx = canvas2.getContext("2d");
      ctx.fillStyle = "black";
      ctx.fillRect(0, 0, canvas2.width, canvas2.height);
      for (let row = 0; row < size; row++) {
        for (let col = 0; col < size; col++) {
          const currentRoom = generator.getRoom(row, col);
          let ps = 5;
          const pattern = this.patternSet.get(currentRoom.toKey());
          for (let gridRow = 0; gridRow < ps; gridRow++) {
            for (let gridColumn = 0; gridColumn < ps; gridColumn++) {
              const newRowPos = row * ps + gridRow - size * ps / 2;
              const newColPos = col * ps + gridColumn - size * ps / 2;
              let tileIndex = pattern[gridRow][gridColumn];
              if (currentRoom.isEntrance) {
                tileIndex = 5;
              }
              if (currentRoom.isExit) {
                tileIndex = 4;
              }
              if (currentRoom.isTreasure && tileIndex == 6) {
                tileIndex = 7;
              }
              let tile = this.tileset.getTile(tileIndex);
              switch (tileIndex) {
                case 5:
                  ctx.fillStyle = "green";
                  break;
                case 4:
                  ctx.fillStyle = "red";
                  break;
                case 6:
                  ctx.fillStyle = "blue";
                  break;
                case 7:
                  ctx.fillStyle = "yellow";
                  break;
                default:
                  ctx.fillStyle = "gray";
                  break;
              }
              if (tileIndex >= 4)
                ctx.fillRect(
                  (newColPos + size * ps / 2) * 2,
                  (newRowPos + size * ps / 2) * 2,
                  2,
                  2
                );
            }
          }
        }
      }
      document.body.appendChild(canvas2);
    }
    createTile(x, y, z, tile) {
      let blockObj = tile;
      let obj = cloneObject(this.engine, blockObj, this.blockCache);
      if (!obj) {
        throw new Error("Could not clone object: " + blockObj.name);
      }
      obj.resetPositionRotation();
      obj.setPositionWorld([x, y, z]);
    }
  };
  __publicField(LevelGenerator, "TypeName", "level-generator");
  __publicField(LevelGenerator, "Properties", {
    levelRoot: Property.object(),
    fadeScreenObject: Property.object(),
    lights: Property.object()
    // Lights are the children of this object.
  });
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "fadeScreenObject", 2);
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "levelRoot", 2);

  // js/components/game.ts
  var _levelGen;
  var Game = class extends Component {
    constructor() {
      super(...arguments);
      __publicField(this, "levelGenObject");
      __publicField(this, "playerObject");
      __privateAdd(this, _levelGen, void 0);
    }
    init() {
      const lg = this.levelGenObject.getComponent(LevelGenerator);
      if (!lg) {
        throw new Error("LevelGenerator not found on levelGenObject");
      }
      __privateSet(this, _levelGen, lg);
      this.engine.onXRSessionStart.add(() => globals_default.gameState.isInVR = true);
      this.engine.onXRSessionEnd.add(() => globals_default.gameState.isInVR = false);
      this.engine.onXRSessionStart.add(() => {
      });
      globals_default.gameState.state = State.Playing;
    }
    start() {
      globals_default.gameState.levelSubject.subscribe((level) => {
        let result = __privateGet(this, _levelGen).generate(level);
        globals_default.gameState.navigateToRoom(0, 0);
      });
      setTimeout(() => {
        globals_default.gameState.level = 0;
      }, 1e3);
      window.addEventListener("keyup", (e) => {
        let p = globals_default.gameState.currentRoom;
        if (e.code == "Digit1") {
          p[0] += 1;
          globals_default.gameState.roomPreviousExitDirection = "S";
          globals_default.gameState.currentRoom = p;
        }
        if (e.code == "Digit2") {
          p[0] -= 1;
          globals_default.gameState.roomPreviousExitDirection = "N";
          globals_default.gameState.currentRoom = p;
        }
        if (e.code == "Digit3") {
          p[1] += 1;
          globals_default.gameState.roomPreviousExitDirection = "E";
          globals_default.gameState.currentRoom = p;
        }
        if (e.code == "Digit4") {
          p[1] -= 1;
          globals_default.gameState.roomPreviousExitDirection = "W";
          globals_default.gameState.currentRoom = p;
        }
      });
    }
  };
  _levelGen = new WeakMap();
  __publicField(Game, "TypeName", "game");
  __publicField(Game, "Properties", {
    levelGenObject: Property.object(),
    playerObject: Property.object()
  });
  __decorateClass([
    property.object()
  ], Game.prototype, "levelGenObject", 2);
  __decorateClass([
    property.object()
  ], Game.prototype, "playerObject", 2);

  // js/components/look-at.ts
  var look_at_exports = {};
  __export(look_at_exports, {
    LookAt: () => LookAt
  });
  var LookAt = class extends Component {
    target;
    update(dt) {
      if (this.target) {
        let pos = this.target.getPositionWorld();
        this.object.lookAt([pos[0], 0, pos[2]]);
        this.object.rotateAxisAngleDegObject([0, 1, 0], 180);
      }
    }
  };
  __publicField(LookAt, "TypeName", "look-at");
  __decorateClass([
    property.object()
  ], LookAt.prototype, "target", 2);

  // js/components/pick-target.ts
  var pick_target_exports = {};
  __export(pick_target_exports, {
    PickTarget: () => PickTarget
  });
  var _canTrigger, canTrigger_fn, _pickingAllowed, pickingAllowed_fn, _picked, picked_fn, _hideIndicators, hideIndicators_fn, _showIndicator, showIndicator_fn;
  var PickTarget = class extends Component {
    constructor() {
      super(...arguments);
      /**
       * Whether the picking is active or not
       * @returns {boolean}
       */
      __privateAdd(this, _canTrigger);
      /**
       * Validates whether the object can be picked or not
       * @param {Object3D} obj 
       * @param {Number} x 
       * @param {Number} y 
       * @param {Number} z 
       * @returns {boolean} Boolean indicating whether the object can be picked or not
       */
      __privateAdd(this, _pickingAllowed);
      /**
       * Handles the picking of an object
       * @param {Object3D} obj The object that is picked
       * @param {Number} x 
       * @param {Number} y 
       * @param {Number} z 
       */
      __privateAdd(this, _picked);
      /**
       * Hides the indicators
       */
      __privateAdd(this, _hideIndicators);
      /**
       * Shows the indicator for the object
       * @param {Object3D} obj the targeted object
       * @param {Number} x 
       * @param {Number} y 
       * @param {Number} z 
       */
      __privateAdd(this, _showIndicator);
      /**
       * @type {Object3D}
       */
      __publicField(this, "allowedPickerMeshObject");
      /**
       * @type {Object3D}
       */
      __publicField(this, "notAllowedPickerMeshObject");
      /**
       * @type {number}
       */
      __publicField(this, "floorGroup");
      /**
       * @type {Object3D}
       */
      __publicField(this, "player");
      /**
       * @type {Object3D}
       */
      __publicField(this, "navControllerObject");
    }
    start() {
      this.pickingActive = false;
      this.input = this.object.getComponent("input");
      if (!this.input) {
        console.error("No input component found on object with pick-target component");
      }
      __privateMethod(this, _hideIndicators, hideIndicators_fn).call(this);
      this.initialized = true;
    }
    update(dt) {
      let xrInputSource = this.input.xrInputSource;
      if (!this.initialized || !xrInputSource) {
        return;
      }
      const buttonPressed = xrInputSource.gamepad.buttons[0].pressed;
      if (buttonPressed && this.pickingActive === false && __privateMethod(this, _canTrigger, canTrigger_fn).call(this)) {
        this.pickingActive = true;
      }
      if (!buttonPressed && this.pickingActive === true) {
        this.pickingActive = false;
        if (this.hitSpot) {
          const hitPos = this.hitObject.getPositionWorld();
          const x = hitPos[0];
          const y = hitPos[2];
          if (__privateMethod(this, _pickingAllowed, pickingAllowed_fn).call(this, this.hitObject, x, 0, y)) {
            __privateMethod(this, _picked, picked_fn).call(this, this.hitObject, x, 0, y);
          }
          if (!this.indicatorHidden) {
            __privateMethod(this, _hideIndicators, hideIndicators_fn).call(this);
          }
          this.hitSpot = void 0;
        }
      }
      if (this.pickingActive) {
        const objectPosition = this.object.getPositionWorld();
        const objectRotation = this.object.getRotationWorld();
        let origin = vec3_exports.clone(objectPosition);
        let defaultForward = vec3_exports.fromValues(0, 0, -1);
        let forwardDirection = vec3_exports.create();
        vec3_exports.transformQuat(forwardDirection, defaultForward, objectRotation);
        let rayHit = this.engine.scene.rayCast(
          origin,
          forwardDirection,
          1 << this.floorGroup
        );
        if (rayHit.hitCount > 0) {
          if (this.indicatorHidden) {
            this.indicatorHidden = false;
          }
          this.hitSpot = rayHit.locations[0];
          this.hitObject = rayHit.objects[0];
          const hitPos = this.hitObject.getPositionWorld();
          const x = hitPos[0];
          const y = hitPos[2];
          __privateMethod(this, _showIndicator, showIndicator_fn).call(this, this.hitObject, x, 0, y);
        } else {
          if (!this.indicatorHidden) {
            __privateMethod(this, _hideIndicators, hideIndicators_fn).call(this);
          }
          this.hitSpot = void 0;
          this.hitObject = void 0;
        }
      }
    }
  };
  _canTrigger = new WeakSet();
  canTrigger_fn = function() {
    return true;
  };
  _pickingAllowed = new WeakSet();
  pickingAllowed_fn = function(obj, x, y, z) {
    let tags = obj.getComponent(Tags);
    if (!tags) {
      return false;
    }
    if (globals_default.gameState.state !== State.Playing) {
      if (tags.hasTag("button")) {
        return true;
      }
      return false;
    }
    if (tags.hasTag("floor")) {
      return globals_default.gameState.canTeleportToPosition(x, y, z);
    }
    return true;
  };
  _picked = new WeakSet();
  picked_fn = function(obj, x, y, z) {
    let tags = obj.getComponent(Tags);
    if (!tags)
      return;
    let position = globals_default.gameState.playerPosition;
    switch (true) {
      case tags.hasTag("floor"):
        globals_default.soundFxPlayer.playSound(Sounds.teleport);
        globals_default.gameState.playerPosition = [x, position[1], z];
        break;
      case tags.hasTag("button"):
        break;
      case tags.hasTag("door"):
        console.log("picking door not implemented yet");
        break;
    }
  };
  _hideIndicators = new WeakSet();
  hideIndicators_fn = function() {
    this.allowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
    this.notAllowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
    this.indicatorHidden = true;
  };
  _showIndicator = new WeakSet();
  showIndicator_fn = function(obj, x, y, z) {
    let tags = obj.getComponent(Tags);
    if (!tags)
      return;
    switch (true) {
      case tags.hasTag("floor"):
        if (__privateMethod(this, _pickingAllowed, pickingAllowed_fn).call(this, obj, x, y, z)) {
          this.notAllowedPickerMeshObject.setPositionWorld([
            1e3,
            -1e3,
            1e3
          ]);
          this.allowedPickerMeshObject.resetPositionRotation();
          this.allowedPickerMeshObject.setPositionWorld([x, 0.01, z]);
        } else {
          this.allowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
          this.notAllowedPickerMeshObject.resetPositionRotation();
          this.notAllowedPickerMeshObject.setPositionWorld([x, 0.01, z]);
        }
        break;
      case tags.hasTag("button"):
        break;
      case tags.hasTag("door"):
        break;
    }
  };
  __publicField(PickTarget, "TypeName", "pick-target");
  __publicField(PickTarget, "Properties", {
    allowedPickerMeshObject: Property.object(),
    notAllowedPickerMeshObject: Property.object(),
    floorGroup: Property.int(1),
    player: Property.object(),
    navControllerObject: Property.object()
  });

  // js/components/teleport.ts
  var teleport_exports = {};
  __export(teleport_exports, {
    SorskootTeleport: () => SorskootTeleport
  });
  var _teleportPlayer, teleportPlayer_fn, _rotatePlayer, rotatePlayer_fn;
  var SorskootTeleport = class extends Component {
    constructor() {
      super(...arguments);
      __privateAdd(this, _teleportPlayer);
      __privateAdd(this, _rotatePlayer);
      /**
       * Left eye for use in VR
       * @type {Object3D}
       */
      __publicField(this, "eyeLeft");
      /**
      * Right eye for use in VR
      * @type {Object3D}
      */
      __publicField(this, "eyeRight");
      /**
      * Non-vr camera for use outside of VR
      * @type {Object3D}
      */
      __publicField(this, "cam");
      /**
       * Root of the player, the object that will be positioned on teleportation
       * @type {Object3D}
       */
      __publicField(this, "camRoot");
    }
    init() {
      this._tempVec = new Float32Array(3);
      this._tempVec0 = new Float32Array(3);
      globals_default.gameState.playerPositionSubject.subscribe((pos) => {
        __privateMethod(this, _teleportPlayer, teleportPlayer_fn).call(this, pos);
      });
      globals_default.gameState.playerRotationSubject.subscribe((rotation) => {
        __privateMethod(this, _rotatePlayer, rotatePlayer_fn).call(this, rotation);
      });
    }
  };
  _teleportPlayer = new WeakSet();
  teleportPlayer_fn = function(newPosition) {
    const p = this._tempVec;
    const p1 = this._tempVec0;
    if (globals_default.gameState.isInVR) {
      this.eyeLeft.getPositionWorld(p);
      this.eyeRight.getPositionWorld(p1);
      vec3_exports.add(p, p, p1);
      vec3_exports.scale(p, p, 0.5);
    } else {
      this.cam.getPositionWorld(p);
    }
    this.camRoot.getPositionWorld(p1);
    vec3_exports.sub(p, p1, p);
    p[0] += newPosition[0];
    p[1] = newPosition[1];
    p[2] += newPosition[2];
    this.camRoot.setPositionWorld(p);
  };
  _rotatePlayer = new WeakSet();
  rotatePlayer_fn = function(rotationToAdd) {
    this.camRoot.resetRotation();
    this.camRoot.rotateAxisAngleDegObject([0, 1, 0], rotationToAdd);
  };
  __publicField(SorskootTeleport, "TypeName", "sorskoot-teleport");
  __publicField(SorskootTeleport, "Properties", {
    /** Root of the player, the object that will be positioned on teleportation. */
    camRoot: Property.object(),
    /** Non-vr camera for use outside of VR */
    cam: Property.object(),
    /** Left eye for use in VR*/
    eyeLeft: Property.object(),
    /** Right eye for use in VR*/
    eyeRight: Property.object()
  });

  // js/dungeongen/cell.ts
  var cell_exports = {};
  __export(cell_exports, {
    Cell: () => Cell
  });
  var Cell = class {
    isCollapsed = false;
    /**
     * The possible tiles. This array contains the index of the tile in the tileset that 
     * are still possible. The last remaining option will determain the tile that is rendered.
     * @type {numbers[]}
     */
    possiblePatterns;
    constructor(value) {
      if (value instanceof Array) {
        this.possiblePatterns = value;
      } else {
        this.possiblePatterns = [];
        for (let i = 0; i < value; i++) {
          this.possiblePatterns[i] = i;
        }
      }
    }
    /**
     * Collapse the cell to a single tile
     */
    collapse(allPatterns) {
      if (this.possiblePatterns.length === 0) {
        throw new Error("Cannot collapse a cell with no possible tiles.");
      }
      if (this.isCollapsed) {
        return;
      }
      const posibleWeights = allPatterns.filter((p, i) => this.possiblePatterns.includes(i)).map((p) => p.weight);
      this.possiblePatterns = [rngWithWeight(this.possiblePatterns, posibleWeights)];
      this.isCollapsed = true;
    }
    /**
     * Calculate the entropy of the cell. Currently this is the length of the possible tiles array.
     * But it might change in the future when weigth is added to the possible tiles.
     * @returns {number} The entropy of the cell
     */
    calculateEntropy(allPatterns) {
      if (this.isCollapsed) {
        return 0;
      } else {
        const posibleWeights = allPatterns.filter((p, i) => this.possiblePatterns.includes(i)).map((p) => p.weight);
        let totalWeight = posibleWeights.reduce((total, itemWithWeight) => {
          return total + itemWithWeight;
        }, 0);
        return totalWeight;
      }
    }
  };

  // js/dungeongen/components/tileComponent.ts
  var tileComponent_exports = {};
  __export(tileComponent_exports, {
    TileDescriptor: () => TileDescriptor
  });
  var TileDescriptor = class extends Component {
    init() {
    }
    start() {
    }
    update(dt) {
    }
  };
  __publicField(TileDescriptor, "TypeName", "tile-descriptor");
  __publicField(TileDescriptor, "Properties", {
    canRotate: { type: Type.Bool, default: true },
    canMirror: { type: Type.Bool, default: true }
  });

  // js/dungeongen/grid.ts
  var grid_exports = {};
  __export(grid_exports, {
    Grid: () => Grid
  });

  // js/dungeongen/utils/deepClone.ts
  var deepClone_exports = {};
  __export(deepClone_exports, {
    deepClone: () => deepClone
  });
  function deepClone(value) {
    if (Array.isArray(value)) {
      return value.map(deepClone);
    } else if (typeof value === "object" && value !== null) {
      const clonedObj = Object.create(Object.getPrototypeOf(value));
      for (const key in value) {
        clonedObj[key] = deepClone(value[key]);
      }
      return clonedObj;
    } else {
      return value;
    }
  }

  // js/dungeongen/grid.ts
  var DIRECTION_OFFSETS = {
    north: { x: 0, y: 1 },
    east: { x: 1, y: 0 },
    south: { x: 0, y: -1 },
    west: { x: -1, y: 0 }
  };
  var Grid = class {
    sizeX;
    sizeY;
    /**
     * The grid of cells that make up the level.
     * @type {Cell[][]}
     */
    #grid = [[]];
    patterns;
    constraints;
    constructor(sizeX, sizeY, tileSet, extractedPatterns, constraintMappingForAllKeySets) {
      this.sizeX = sizeX;
      this.sizeY = sizeY;
      this.patterns = extractedPatterns;
      this.constraints = constraintMappingForAllKeySets;
      this.#createGrid();
    }
    debug() {
      let grid2D = this.#grid.map((x) => x.map((y) => y.map((t) => t.possiblePatterns)));
    }
    #createGrid() {
      this.#grid = new Array(this.sizeX);
      for (let x = 0; x < this.sizeX; x++) {
        this.#grid[x] = new Array(this.sizeY);
        for (let y = 0; y < this.sizeY; y++) {
          this.#grid[x][y] = new Room();
        }
      }
      return this.#grid;
    }
    /**
     * Gets a cell from the grid at the given indices.
     * @param {number} x X-index of the cell
     * @param {number} y Y-index of the cell
     * @returns {Cell} The cell at the given indices
     */
    getCell(x, y) {
      return this.#grid[x][y];
    }
    /**
     * Gets the pattern at the given index from the list of patterns.
     * @param {number} index The index of the pattern to get.
     * @returns {Tile} The pattern at the given index.
     */
    getPattern(index) {
      return this.patterns[index];
    }
    collapse() {
      let entropyCells = this.#getLowestEntropyCells();
      if (!entropyCells.length) {
        return true;
      }
      let picked = rng.getItem(entropyCells);
      const cell = this.#grid[picked.x][picked.y];
      if (!cell.isCollapsed && cell.possiblePatterns.length === 0) {
        return true;
      }
      let done = false;
      let count = 0;
      do {
        count++;
        const backup = deepClone(this.#grid);
        cell.collapse(this.patterns);
        done = this.propagate(this.#grid, picked);
        if (!done) {
          console.log("Failed to propagate, reverting...");
          this.#grid = backup;
        }
      } while (!done && count < 25);
      for (let x = 0; x < this.#grid.length; x++) {
        for (let y = 0; y < this.#grid[x].length; y++) {
          const cell2 = this.#grid[x][y];
          if (cell2.calculateEntropy(this.patterns) === 1) {
            cell2.collapse(this.patterns);
          }
        }
      }
      return false;
    }
    #getLowestEntropyCells() {
      let minEntropy = Infinity;
      let lowestEntropyCells = [];
      for (let x = 0; x < this.#grid.length; x++) {
        for (let y = 0; y < this.#grid[x].length; y++) {
          const cell = this.#grid[x][y];
          if (cell.isCollapsed) {
            continue;
          }
          const entropy = cell.calculateEntropy(this.patterns);
          if (entropy < minEntropy) {
            minEntropy = entropy;
            lowestEntropyCells = [{ x, y, entropy }];
          } else if (entropy === minEntropy) {
            lowestEntropyCells.push({ x, y, entropy });
          }
        }
      }
      return lowestEntropyCells;
    }
    calculateConstrainedPatterns(current, neighbor) {
      const currentCell = this.getCell(current.x, current.y);
      const currentOptions = currentCell.possiblePatterns;
      const neighborCell = this.getCell(neighbor.x, neighbor.y);
      const neighborOptions = neighborCell.possiblePatterns;
      const constrainedPatternsSet = /* @__PURE__ */ new Set();
      for (let i = 0; i < currentOptions.length; i++) {
        const currentTileIndex = currentOptions[i];
        const currentTileConstraints = this.constraints.get(currentTileIndex);
        if (currentTileConstraints.hasOwnProperty(neighbor.name)) {
          for (let j = 0; j < neighborOptions.length; j++) {
            const neighborTileIndex = neighborOptions[j];
            if (currentTileConstraints[neighbor.name].includes(neighborTileIndex)) {
              constrainedPatternsSet.add(neighborOptions[j]);
            }
          }
        }
      }
      return Array.from(constrainedPatternsSet);
    }
    hasChangesInPossiblePatterns(neighbor, constrainedPatterns) {
      const neighborCell = this.getCell(neighbor.x, neighbor.y);
      const neighborOptions = neighborCell.possiblePatterns;
      const hasChanges = neighborOptions.length !== constrainedPatterns.length;
      return hasChanges;
    }
    updatePossiblePatterns(neighbor, constrainedPatterns) {
      const neighborCell = this.getCell(neighbor.x, neighbor.y);
      neighborCell.possiblePatterns = constrainedPatterns;
      if (constrainedPatterns.length === 1) {
        neighborCell.collapse(this.patterns);
      }
    }
    noValidOptionsLeft(neighbor) {
      const neighborCell = this.getCell(neighbor.x, neighbor.y);
      const neighborOptions = neighborCell.possiblePatterns;
      return neighborOptions.length === 0;
    }
    /**
     * propagates the constraints to the neighbors of the current cell
     * @param {*} grid
     * @param {*} currentPosition
     */
    propagate(grid, currentPosition) {
      const queue = new Queue();
      queue.enqueue(currentPosition);
      const patternSize = 3;
      let counter = 0;
      while (!queue.isEmpty()) {
        counter++;
        if (counter > 50) {
          return true;
        }
        const position = queue.dequeue();
        for (let directionOffset in DIRECTION_OFFSETS) {
          const offsetX = DIRECTION_OFFSETS[directionOffset].x;
          const offsetY = DIRECTION_OFFSETS[directionOffset].y;
          const neighborX = position.x + offsetX;
          const neighborY = position.y + offsetY;
          if (neighborX < 0 || neighborY < 0 || neighborY >= grid.length || neighborX >= grid.length) {
            continue;
          }
          let neighborPosition = { x: neighborX, y: neighborY, name: directionOffset };
          const constrainedPatterns = this.calculateConstrainedPatterns(position, neighborPosition);
          if (constrainedPatterns.length === 0) {
            console.log("Contradiction found, impossible constraint");
            return false;
          }
          if (this.hasChangesInPossiblePatterns(neighborPosition, constrainedPatterns)) {
            this.updatePossiblePatterns(neighborPosition, constrainedPatterns);
            const cellNeighbor = this.getCell(neighborPosition.x, neighborPosition.y);
            if (!cellNeighbor.isCollapsed) {
              if (this.noValidOptionsLeft(neighborPosition)) {
                console.log("Contradiction found");
              } else {
                queue.enqueue(neighborPosition);
              }
            }
          }
        }
      }
      return true;
    }
    getDirectionNameFromOffsets(offsetX, offsetY) {
      const absMaxOffset = Math.max(Math.abs(offsetX), Math.abs(offsetY));
      const normalizedOffsetX = offsetX / absMaxOffset;
      const normalizedOffsetY = offsetY / absMaxOffset;
      if (normalizedOffsetY === -1) {
        return "north";
      } else if (normalizedOffsetY === 1) {
        return "south";
      }
      if (normalizedOffsetX === -1) {
        return "west";
      } else if (normalizedOffsetX === 1) {
        return "east";
      }
      return directionName || null;
    }
    /**
     *
     * @param {{x:number, y:number}} position
     * @returns
     */
    findUncollapsedNeighbors(position) {
      let neighbors = getNeighbors(this, position);
      return neighbors.filter(
        (neighbor) => !this.getCell(neighbor.x, neighbor.y).isCollapsed
      );
    }
    generateMaze(width, height) {
      const maze = new Array(height).fill(null).map(() => new Array(width).fill(null).map(() => new Room()));
      function removeWall(x1, y1, x2, y2) {
        if (x1 === x2) {
          if (y1 > y2) {
            maze[y1][x1].doors.top = false;
            maze[y2][x2].doors.bottom = false;
          } else {
            maze[y1][x1].doors.bottom = false;
            maze[y2][x2].doors.top = false;
          }
        } else {
          if (x1 > x2) {
            maze[y1][x1].doors.left = false;
            maze[y2][x2].doors.right = false;
          } else {
            maze[y1][x1].doors.right = false;
            maze[y2][x2].doors.left = false;
          }
        }
      }
      function isValidCoordinates(x, y) {
        return x >= 0 && x < width && y >= 0 && y < height;
      }
      function shuffleArray2(arr) {
        for (let i = arr.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [arr[i], arr[j]] = [arr[j], arr[i]];
        }
      }
      function generateMazeRecursively(x, y, visitedList) {
        visitedList.push(`${x},${y}`);
        const directions = [
          { dx: -1, dy: 0 },
          { dx: 1, dy: 0 },
          { dx: 0, dy: -1 },
          { dx: 0, dy: 1 }
        ];
        shuffleArray2(directions);
        for (const dir of directions) {
          const newX = x + dir.dx;
          const newY = y + dir.dy;
          if (isValidCoordinates(newX, newY) && !visitedList.includes(`${newX},${newY}`)) {
            removeWall(x, y, newX, newY);
            generateMazeRecursively(newX, newY, visitedList);
          }
        }
      }
    }
  };

  // cache/js/_editor_index.js
  _registerEditor(dist_exports);
  _registerEditor(dist_exports2);
  _registerEditor(zesty_wonderland_sdk_exports);
  _registerEditor(gameState_exports);
  _registerEditor(levelState_exports);
  _registerEditor(door_handler_exports);
  _registerEditor(fadeScreen_exports);
  _registerEditor(game_exports);
  _registerEditor(level_generator_exports);
  _registerEditor(look_at_exports);
  _registerEditor(pick_target_exports);
  _registerEditor(teleport_exports);
  _registerEditor(MazeGenerator_exports);
  _registerEditor(PatternSet_exports);
  _registerEditor(RoomRenderer_exports);
  _registerEditor(cell_exports);
  _registerEditor(tileComponent_exports);
  _registerEditor(grid_exports);
  _registerEditor(room_exports);
  _registerEditor(roomTemplates_exports);
  _registerEditor(tile_exports);
  _registerEditor(tileset_exports);
  _registerEditor(deepClone_exports);
  _registerEditor(extractor_exports);
  _registerEditor(gridHelpers_exports);
  _registerEditor(globals_exports);
  _registerEditor(soundfx_player_exports);
})();
/*! Bundled license information:

howler/dist/howler.js:
  (*!
   *  howler.js v2.2.3
   *  howlerjs.com
   *
   *  (c) 2013-2020, James Simpson of GoldFire Studios
   *  goldfirestudios.com
   *
   *  MIT License
   *)
  (*!
   *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
   *  
   *  howler.js v2.2.3
   *  howlerjs.com
   *
   *  (c) 2013-2020, James Simpson of GoldFire Studios
   *  goldfirestudios.com
   *
   *  MIT License
   *)
*/
//# sourceMappingURL=data:application/json;base64,
