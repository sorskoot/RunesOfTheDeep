(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i = decorators.length - 1, decorator; i >= 0; i--)
      if (decorator = decorators[i])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };
  var __decorateParam = (index, decorator) => (target, key) => decorator(target, key, index);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, "read from private field");
    return getter ? getter.call(obj) : member.get(obj);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, "write to private field");
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
  };
  var __privateMethod = (obj, member, method) => {
    __accessCheck(obj, member, "access private method");
    return method;
  };

  // node_modules/howler/dist/howler.js
  var require_howler = __commonJS({
    "node_modules/howler/dist/howler.js"(exports) {
      (function() {
        "use strict";
        var HowlerGlobal2 = function() {
          this.init();
        };
        HowlerGlobal2.prototype = {
          /**
           * Initialize the global Howler object.
           * @return {Howler}
           */
          init: function() {
            var self2 = this || Howler2;
            self2._counter = 1e3;
            self2._html5AudioPool = [];
            self2.html5PoolSize = 10;
            self2._codecs = {};
            self2._howls = [];
            self2._muted = false;
            self2._volume = 1;
            self2._canPlayEvent = "canplaythrough";
            self2._navigator = typeof window !== "undefined" && window.navigator ? window.navigator : null;
            self2.masterGain = null;
            self2.noAudio = false;
            self2.usingWebAudio = true;
            self2.autoSuspend = true;
            self2.ctx = null;
            self2.autoUnlock = true;
            self2._setup();
            return self2;
          },
          /**
           * Get/set the global volume for all sounds.
           * @param  {Float} vol Volume from 0.0 to 1.0.
           * @return {Howler/Float}     Returns self or current volume.
           */
          volume: function(vol) {
            var self2 = this || Howler2;
            vol = parseFloat(vol);
            if (!self2.ctx) {
              setupAudioContext();
            }
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
              self2._volume = vol;
              if (self2._muted) {
                return self2;
              }
              if (self2.usingWebAudio) {
                self2.masterGain.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
              }
              for (var i = 0; i < self2._howls.length; i++) {
                if (!self2._howls[i]._webAudio) {
                  var ids = self2._howls[i]._getSoundIds();
                  for (var j = 0; j < ids.length; j++) {
                    var sound = self2._howls[i]._soundById(ids[j]);
                    if (sound && sound._node) {
                      sound._node.volume = sound._volume * vol;
                    }
                  }
                }
              }
              return self2;
            }
            return self2._volume;
          },
          /**
           * Handle muting and unmuting globally.
           * @param  {Boolean} muted Is muted or not.
           */
          mute: function(muted) {
            var self2 = this || Howler2;
            if (!self2.ctx) {
              setupAudioContext();
            }
            self2._muted = muted;
            if (self2.usingWebAudio) {
              self2.masterGain.gain.setValueAtTime(muted ? 0 : self2._volume, Howler2.ctx.currentTime);
            }
            for (var i = 0; i < self2._howls.length; i++) {
              if (!self2._howls[i]._webAudio) {
                var ids = self2._howls[i]._getSoundIds();
                for (var j = 0; j < ids.length; j++) {
                  var sound = self2._howls[i]._soundById(ids[j]);
                  if (sound && sound._node) {
                    sound._node.muted = muted ? true : sound._muted;
                  }
                }
              }
            }
            return self2;
          },
          /**
           * Handle stopping all sounds globally.
           */
          stop: function() {
            var self2 = this || Howler2;
            for (var i = 0; i < self2._howls.length; i++) {
              self2._howls[i].stop();
            }
            return self2;
          },
          /**
           * Unload and destroy all currently loaded Howl objects.
           * @return {Howler}
           */
          unload: function() {
            var self2 = this || Howler2;
            for (var i = self2._howls.length - 1; i >= 0; i--) {
              self2._howls[i].unload();
            }
            if (self2.usingWebAudio && self2.ctx && typeof self2.ctx.close !== "undefined") {
              self2.ctx.close();
              self2.ctx = null;
              setupAudioContext();
            }
            return self2;
          },
          /**
           * Check for codec support of specific extension.
           * @param  {String} ext Audio file extention.
           * @return {Boolean}
           */
          codecs: function(ext) {
            return (this || Howler2)._codecs[ext.replace(/^x-/, "")];
          },
          /**
           * Setup various state values for global tracking.
           * @return {Howler}
           */
          _setup: function() {
            var self2 = this || Howler2;
            self2.state = self2.ctx ? self2.ctx.state || "suspended" : "suspended";
            self2._autoSuspend();
            if (!self2.usingWebAudio) {
              if (typeof Audio !== "undefined") {
                try {
                  var test = new Audio();
                  if (typeof test.oncanplaythrough === "undefined") {
                    self2._canPlayEvent = "canplay";
                  }
                } catch (e) {
                  self2.noAudio = true;
                }
              } else {
                self2.noAudio = true;
              }
            }
            try {
              var test = new Audio();
              if (test.muted) {
                self2.noAudio = true;
              }
            } catch (e) {
            }
            if (!self2.noAudio) {
              self2._setupCodecs();
            }
            return self2;
          },
          /**
           * Check for browser support for various codecs and cache the results.
           * @return {Howler}
           */
          _setupCodecs: function() {
            var self2 = this || Howler2;
            var audioTest = null;
            try {
              audioTest = typeof Audio !== "undefined" ? new Audio() : null;
            } catch (err) {
              return self2;
            }
            if (!audioTest || typeof audioTest.canPlayType !== "function") {
              return self2;
            }
            var mpegTest = audioTest.canPlayType("audio/mpeg;").replace(/^no$/, "");
            var ua = self2._navigator ? self2._navigator.userAgent : "";
            var checkOpera = ua.match(/OPR\/([0-6].)/g);
            var isOldOpera = checkOpera && parseInt(checkOpera[0].split("/")[1], 10) < 33;
            var checkSafari = ua.indexOf("Safari") !== -1 && ua.indexOf("Chrome") === -1;
            var safariVersion = ua.match(/Version\/(.*?) /);
            var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;
            self2._codecs = {
              mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType("audio/mp3;").replace(/^no$/, ""))),
              mpeg: !!mpegTest,
              opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
              ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              oga: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
              wav: !!(audioTest.canPlayType('audio/wav; codecs="1"') || audioTest.canPlayType("audio/wav")).replace(/^no$/, ""),
              aac: !!audioTest.canPlayType("audio/aac;").replace(/^no$/, ""),
              caf: !!audioTest.canPlayType("audio/x-caf;").replace(/^no$/, ""),
              m4a: !!(audioTest.canPlayType("audio/x-m4a;") || audioTest.canPlayType("audio/m4a;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              m4b: !!(audioTest.canPlayType("audio/x-m4b;") || audioTest.canPlayType("audio/m4b;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              mp4: !!(audioTest.canPlayType("audio/x-mp4;") || audioTest.canPlayType("audio/mp4;") || audioTest.canPlayType("audio/aac;")).replace(/^no$/, ""),
              weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, "")),
              dolby: !!audioTest.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
              flac: !!(audioTest.canPlayType("audio/x-flac;") || audioTest.canPlayType("audio/flac;")).replace(/^no$/, "")
            };
            return self2;
          },
          /**
           * Some browsers/devices will only allow audio to be played after a user interaction.
           * Attempt to automatically unlock audio on the first user interaction.
           * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
           * @return {Howler}
           */
          _unlockAudio: function() {
            var self2 = this || Howler2;
            if (self2._audioUnlocked || !self2.ctx) {
              return;
            }
            self2._audioUnlocked = false;
            self2.autoUnlock = false;
            if (!self2._mobileUnloaded && self2.ctx.sampleRate !== 44100) {
              self2._mobileUnloaded = true;
              self2.unload();
            }
            self2._scratchBuffer = self2.ctx.createBuffer(1, 1, 22050);
            var unlock = function(e) {
              while (self2._html5AudioPool.length < self2.html5PoolSize) {
                try {
                  var audioNode = new Audio();
                  audioNode._unlocked = true;
                  self2._releaseHtml5Audio(audioNode);
                } catch (e2) {
                  self2.noAudio = true;
                  break;
                }
              }
              for (var i = 0; i < self2._howls.length; i++) {
                if (!self2._howls[i]._webAudio) {
                  var ids = self2._howls[i]._getSoundIds();
                  for (var j = 0; j < ids.length; j++) {
                    var sound = self2._howls[i]._soundById(ids[j]);
                    if (sound && sound._node && !sound._node._unlocked) {
                      sound._node._unlocked = true;
                      sound._node.load();
                    }
                  }
                }
              }
              self2._autoResume();
              var source = self2.ctx.createBufferSource();
              source.buffer = self2._scratchBuffer;
              source.connect(self2.ctx.destination);
              if (typeof source.start === "undefined") {
                source.noteOn(0);
              } else {
                source.start(0);
              }
              if (typeof self2.ctx.resume === "function") {
                self2.ctx.resume();
              }
              source.onended = function() {
                source.disconnect(0);
                self2._audioUnlocked = true;
                document.removeEventListener("touchstart", unlock, true);
                document.removeEventListener("touchend", unlock, true);
                document.removeEventListener("click", unlock, true);
                document.removeEventListener("keydown", unlock, true);
                for (var i2 = 0; i2 < self2._howls.length; i2++) {
                  self2._howls[i2]._emit("unlock");
                }
              };
            };
            document.addEventListener("touchstart", unlock, true);
            document.addEventListener("touchend", unlock, true);
            document.addEventListener("click", unlock, true);
            document.addEventListener("keydown", unlock, true);
            return self2;
          },
          /**
           * Get an unlocked HTML5 Audio object from the pool. If none are left,
           * return a new Audio object and throw a warning.
           * @return {Audio} HTML5 Audio object.
           */
          _obtainHtml5Audio: function() {
            var self2 = this || Howler2;
            if (self2._html5AudioPool.length) {
              return self2._html5AudioPool.pop();
            }
            var testPlay = new Audio().play();
            if (testPlay && typeof Promise !== "undefined" && (testPlay instanceof Promise || typeof testPlay.then === "function")) {
              testPlay.catch(function() {
                console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
              });
            }
            return new Audio();
          },
          /**
           * Return an activated HTML5 Audio object to the pool.
           * @return {Howler}
           */
          _releaseHtml5Audio: function(audio) {
            var self2 = this || Howler2;
            if (audio._unlocked) {
              self2._html5AudioPool.push(audio);
            }
            return self2;
          },
          /**
           * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.
           * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.
           * @return {Howler}
           */
          _autoSuspend: function() {
            var self2 = this;
            if (!self2.autoSuspend || !self2.ctx || typeof self2.ctx.suspend === "undefined" || !Howler2.usingWebAudio) {
              return;
            }
            for (var i = 0; i < self2._howls.length; i++) {
              if (self2._howls[i]._webAudio) {
                for (var j = 0; j < self2._howls[i]._sounds.length; j++) {
                  if (!self2._howls[i]._sounds[j]._paused) {
                    return self2;
                  }
                }
              }
            }
            if (self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
            }
            self2._suspendTimer = setTimeout(function() {
              if (!self2.autoSuspend) {
                return;
              }
              self2._suspendTimer = null;
              self2.state = "suspending";
              var handleSuspension = function() {
                self2.state = "suspended";
                if (self2._resumeAfterSuspend) {
                  delete self2._resumeAfterSuspend;
                  self2._autoResume();
                }
              };
              self2.ctx.suspend().then(handleSuspension, handleSuspension);
            }, 3e4);
            return self2;
          },
          /**
           * Automatically resume the Web Audio AudioContext when a new sound is played.
           * @return {Howler}
           */
          _autoResume: function() {
            var self2 = this;
            if (!self2.ctx || typeof self2.ctx.resume === "undefined" || !Howler2.usingWebAudio) {
              return;
            }
            if (self2.state === "running" && self2.ctx.state !== "interrupted" && self2._suspendTimer) {
              clearTimeout(self2._suspendTimer);
              self2._suspendTimer = null;
            } else if (self2.state === "suspended" || self2.state === "running" && self2.ctx.state === "interrupted") {
              self2.ctx.resume().then(function() {
                self2.state = "running";
                for (var i = 0; i < self2._howls.length; i++) {
                  self2._howls[i]._emit("resume");
                }
              });
              if (self2._suspendTimer) {
                clearTimeout(self2._suspendTimer);
                self2._suspendTimer = null;
              }
            } else if (self2.state === "suspending") {
              self2._resumeAfterSuspend = true;
            }
            return self2;
          }
        };
        var Howler2 = new HowlerGlobal2();
        var Howl2 = function(o) {
          var self2 = this;
          if (!o.src || o.src.length === 0) {
            console.error("An array of source files must be passed with any new Howl.");
            return;
          }
          self2.init(o);
        };
        Howl2.prototype = {
          /**
           * Initialize a new Howl group object.
           * @param  {Object} o Passed in properties for this group.
           * @return {Howl}
           */
          init: function(o) {
            var self2 = this;
            if (!Howler2.ctx) {
              setupAudioContext();
            }
            self2._autoplay = o.autoplay || false;
            self2._format = typeof o.format !== "string" ? o.format : [o.format];
            self2._html5 = o.html5 || false;
            self2._muted = o.mute || false;
            self2._loop = o.loop || false;
            self2._pool = o.pool || 5;
            self2._preload = typeof o.preload === "boolean" || o.preload === "metadata" ? o.preload : true;
            self2._rate = o.rate || 1;
            self2._sprite = o.sprite || {};
            self2._src = typeof o.src !== "string" ? o.src : [o.src];
            self2._volume = o.volume !== void 0 ? o.volume : 1;
            self2._xhr = {
              method: o.xhr && o.xhr.method ? o.xhr.method : "GET",
              headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,
              withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false
            };
            self2._duration = 0;
            self2._state = "unloaded";
            self2._sounds = [];
            self2._endTimers = {};
            self2._queue = [];
            self2._playLock = false;
            self2._onend = o.onend ? [{ fn: o.onend }] : [];
            self2._onfade = o.onfade ? [{ fn: o.onfade }] : [];
            self2._onload = o.onload ? [{ fn: o.onload }] : [];
            self2._onloaderror = o.onloaderror ? [{ fn: o.onloaderror }] : [];
            self2._onplayerror = o.onplayerror ? [{ fn: o.onplayerror }] : [];
            self2._onpause = o.onpause ? [{ fn: o.onpause }] : [];
            self2._onplay = o.onplay ? [{ fn: o.onplay }] : [];
            self2._onstop = o.onstop ? [{ fn: o.onstop }] : [];
            self2._onmute = o.onmute ? [{ fn: o.onmute }] : [];
            self2._onvolume = o.onvolume ? [{ fn: o.onvolume }] : [];
            self2._onrate = o.onrate ? [{ fn: o.onrate }] : [];
            self2._onseek = o.onseek ? [{ fn: o.onseek }] : [];
            self2._onunlock = o.onunlock ? [{ fn: o.onunlock }] : [];
            self2._onresume = [];
            self2._webAudio = Howler2.usingWebAudio && !self2._html5;
            if (typeof Howler2.ctx !== "undefined" && Howler2.ctx && Howler2.autoUnlock) {
              Howler2._unlockAudio();
            }
            Howler2._howls.push(self2);
            if (self2._autoplay) {
              self2._queue.push({
                event: "play",
                action: function() {
                  self2.play();
                }
              });
            }
            if (self2._preload && self2._preload !== "none") {
              self2.load();
            }
            return self2;
          },
          /**
           * Load the audio file.
           * @return {Howler}
           */
          load: function() {
            var self2 = this;
            var url = null;
            if (Howler2.noAudio) {
              self2._emit("loaderror", null, "No audio support.");
              return;
            }
            if (typeof self2._src === "string") {
              self2._src = [self2._src];
            }
            for (var i = 0; i < self2._src.length; i++) {
              var ext, str6;
              if (self2._format && self2._format[i]) {
                ext = self2._format[i];
              } else {
                str6 = self2._src[i];
                if (typeof str6 !== "string") {
                  self2._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                  continue;
                }
                ext = /^data:audio\/([^;,]+);/i.exec(str6);
                if (!ext) {
                  ext = /\.([^.]+)$/.exec(str6.split("?", 1)[0]);
                }
                if (ext) {
                  ext = ext[1].toLowerCase();
                }
              }
              if (!ext) {
                console.warn('No file extension was found. Consider using the "format" property or specify an extension.');
              }
              if (ext && Howler2.codecs(ext)) {
                url = self2._src[i];
                break;
              }
            }
            if (!url) {
              self2._emit("loaderror", null, "No codec support for selected audio sources.");
              return;
            }
            self2._src = url;
            self2._state = "loading";
            if (window.location.protocol === "https:" && url.slice(0, 5) === "http:") {
              self2._html5 = true;
              self2._webAudio = false;
            }
            new Sound2(self2);
            if (self2._webAudio) {
              loadBuffer(self2);
            }
            return self2;
          },
          /**
           * Play a sound or resume previous playback.
           * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.
           * @param  {Boolean} internal Internal Use: true prevents event firing.
           * @return {Number}          Sound ID.
           */
          play: function(sprite, internal) {
            var self2 = this;
            var id = null;
            if (typeof sprite === "number") {
              id = sprite;
              sprite = null;
            } else if (typeof sprite === "string" && self2._state === "loaded" && !self2._sprite[sprite]) {
              return null;
            } else if (typeof sprite === "undefined") {
              sprite = "__default";
              if (!self2._playLock) {
                var num = 0;
                for (var i = 0; i < self2._sounds.length; i++) {
                  if (self2._sounds[i]._paused && !self2._sounds[i]._ended) {
                    num++;
                    id = self2._sounds[i]._id;
                  }
                }
                if (num === 1) {
                  sprite = null;
                } else {
                  id = null;
                }
              }
            }
            var sound = id ? self2._soundById(id) : self2._inactiveSound();
            if (!sound) {
              return null;
            }
            if (id && !sprite) {
              sprite = sound._sprite || "__default";
            }
            if (self2._state !== "loaded") {
              sound._sprite = sprite;
              sound._ended = false;
              var soundId = sound._id;
              self2._queue.push({
                event: "play",
                action: function() {
                  self2.play(soundId);
                }
              });
              return soundId;
            }
            if (id && !sound._paused) {
              if (!internal) {
                self2._loadQueue("play");
              }
              return sound._id;
            }
            if (self2._webAudio) {
              Howler2._autoResume();
            }
            var seek = Math.max(0, sound._seek > 0 ? sound._seek : self2._sprite[sprite][0] / 1e3);
            var duration = Math.max(0, (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3 - seek);
            var timeout = duration * 1e3 / Math.abs(sound._rate);
            var start = self2._sprite[sprite][0] / 1e3;
            var stop = (self2._sprite[sprite][0] + self2._sprite[sprite][1]) / 1e3;
            sound._sprite = sprite;
            sound._ended = false;
            var setParams = function() {
              sound._paused = false;
              sound._seek = seek;
              sound._start = start;
              sound._stop = stop;
              sound._loop = !!(sound._loop || self2._sprite[sprite][2]);
            };
            if (seek >= stop) {
              self2._ended(sound);
              return;
            }
            var node = sound._node;
            if (self2._webAudio) {
              var playWebAudio = function() {
                self2._playLock = false;
                setParams();
                self2._refreshBuffer(sound);
                var vol = sound._muted || self2._muted ? 0 : sound._volume;
                node.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
                sound._playStart = Howler2.ctx.currentTime;
                if (typeof node.bufferSource.start === "undefined") {
                  sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);
                } else {
                  sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);
                }
                if (timeout !== Infinity) {
                  self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                }
                if (!internal) {
                  setTimeout(function() {
                    self2._emit("play", sound._id);
                    self2._loadQueue();
                  }, 0);
                }
              };
              if (Howler2.state === "running" && Howler2.ctx.state !== "interrupted") {
                playWebAudio();
              } else {
                self2._playLock = true;
                self2.once("resume", playWebAudio);
                self2._clearTimer(sound._id);
              }
            } else {
              var playHtml5 = function() {
                node.currentTime = seek;
                node.muted = sound._muted || self2._muted || Howler2._muted || node.muted;
                node.volume = sound._volume * Howler2.volume();
                node.playbackRate = sound._rate;
                try {
                  var play = node.play();
                  if (play && typeof Promise !== "undefined" && (play instanceof Promise || typeof play.then === "function")) {
                    self2._playLock = true;
                    setParams();
                    play.then(function() {
                      self2._playLock = false;
                      node._unlocked = true;
                      if (!internal) {
                        self2._emit("play", sound._id);
                      } else {
                        self2._loadQueue();
                      }
                    }).catch(function() {
                      self2._playLock = false;
                      self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                      sound._ended = true;
                      sound._paused = true;
                    });
                  } else if (!internal) {
                    self2._playLock = false;
                    setParams();
                    self2._emit("play", sound._id);
                  }
                  node.playbackRate = sound._rate;
                  if (node.paused) {
                    self2._emit("playerror", sound._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
                    return;
                  }
                  if (sprite !== "__default" || sound._loop) {
                    self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
                  } else {
                    self2._endTimers[sound._id] = function() {
                      self2._ended(sound);
                      node.removeEventListener("ended", self2._endTimers[sound._id], false);
                    };
                    node.addEventListener("ended", self2._endTimers[sound._id], false);
                  }
                } catch (err) {
                  self2._emit("playerror", sound._id, err);
                }
              };
              if (node.src === "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA") {
                node.src = self2._src;
                node.load();
              }
              var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler2._navigator.isCocoonJS;
              if (node.readyState >= 3 || loadedNoReadyState) {
                playHtml5();
              } else {
                self2._playLock = true;
                self2._state = "loading";
                var listener = function() {
                  self2._state = "loaded";
                  playHtml5();
                  node.removeEventListener(Howler2._canPlayEvent, listener, false);
                };
                node.addEventListener(Howler2._canPlayEvent, listener, false);
                self2._clearTimer(sound._id);
              }
            }
            return sound._id;
          },
          /**
           * Pause playback and save current position.
           * @param  {Number} id The sound ID (empty to pause all in group).
           * @return {Howl}
           */
          pause: function(id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "pause",
                action: function() {
                  self2.pause(id);
                }
              });
              return self2;
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              self2._clearTimer(ids[i]);
              var sound = self2._soundById(ids[i]);
              if (sound && !sound._paused) {
                sound._seek = self2.seek(ids[i]);
                sound._rateSeek = 0;
                sound._paused = true;
                self2._stopFade(ids[i]);
                if (sound._node) {
                  if (self2._webAudio) {
                    if (!sound._node.bufferSource) {
                      continue;
                    }
                    if (typeof sound._node.bufferSource.stop === "undefined") {
                      sound._node.bufferSource.noteOff(0);
                    } else {
                      sound._node.bufferSource.stop(0);
                    }
                    self2._cleanBuffer(sound._node);
                  } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                    sound._node.pause();
                  }
                }
              }
              if (!arguments[1]) {
                self2._emit("pause", sound ? sound._id : null);
              }
            }
            return self2;
          },
          /**
           * Stop playback and reset to start.
           * @param  {Number} id The sound ID (empty to stop all in group).
           * @param  {Boolean} internal Internal Use: true prevents event firing.
           * @return {Howl}
           */
          stop: function(id, internal) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "stop",
                action: function() {
                  self2.stop(id);
                }
              });
              return self2;
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              self2._clearTimer(ids[i]);
              var sound = self2._soundById(ids[i]);
              if (sound) {
                sound._seek = sound._start || 0;
                sound._rateSeek = 0;
                sound._paused = true;
                sound._ended = true;
                self2._stopFade(ids[i]);
                if (sound._node) {
                  if (self2._webAudio) {
                    if (sound._node.bufferSource) {
                      if (typeof sound._node.bufferSource.stop === "undefined") {
                        sound._node.bufferSource.noteOff(0);
                      } else {
                        sound._node.bufferSource.stop(0);
                      }
                      self2._cleanBuffer(sound._node);
                    }
                  } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {
                    sound._node.currentTime = sound._start || 0;
                    sound._node.pause();
                    if (sound._node.duration === Infinity) {
                      self2._clearSound(sound._node);
                    }
                  }
                }
                if (!internal) {
                  self2._emit("stop", sound._id);
                }
              }
            }
            return self2;
          },
          /**
           * Mute/unmute a single sound or all sounds in this Howl group.
           * @param  {Boolean} muted Set to true to mute and false to unmute.
           * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
           * @return {Howl}
           */
          mute: function(muted, id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "mute",
                action: function() {
                  self2.mute(muted, id);
                }
              });
              return self2;
            }
            if (typeof id === "undefined") {
              if (typeof muted === "boolean") {
                self2._muted = muted;
              } else {
                return self2._muted;
              }
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              var sound = self2._soundById(ids[i]);
              if (sound) {
                sound._muted = muted;
                if (sound._interval) {
                  self2._stopFade(sound._id);
                }
                if (self2._webAudio && sound._node) {
                  sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler2.ctx.currentTime);
                } else if (sound._node) {
                  sound._node.muted = Howler2._muted ? true : muted;
                }
                self2._emit("mute", sound._id);
              }
            }
            return self2;
          },
          /**
           * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
           *   volume() -> Returns the group's volume value.
           *   volume(id) -> Returns the sound id's current volume.
           *   volume(vol) -> Sets the volume of all sounds in this Howl group.
           *   volume(vol, id) -> Sets the volume of passed sound id.
           * @return {Howl/Number} Returns self or current volume.
           */
          volume: function() {
            var self2 = this;
            var args = arguments;
            var vol, id;
            if (args.length === 0) {
              return self2._volume;
            } else if (args.length === 1 || args.length === 2 && typeof args[1] === "undefined") {
              var ids = self2._getSoundIds();
              var index = ids.indexOf(args[0]);
              if (index >= 0) {
                id = parseInt(args[0], 10);
              } else {
                vol = parseFloat(args[0]);
              }
            } else if (args.length >= 2) {
              vol = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof vol !== "undefined" && vol >= 0 && vol <= 1) {
              if (self2._state !== "loaded" || self2._playLock) {
                self2._queue.push({
                  event: "volume",
                  action: function() {
                    self2.volume.apply(self2, args);
                  }
                });
                return self2;
              }
              if (typeof id === "undefined") {
                self2._volume = vol;
              }
              id = self2._getSoundIds(id);
              for (var i = 0; i < id.length; i++) {
                sound = self2._soundById(id[i]);
                if (sound) {
                  sound._volume = vol;
                  if (!args[2]) {
                    self2._stopFade(id[i]);
                  }
                  if (self2._webAudio && sound._node && !sound._muted) {
                    sound._node.gain.setValueAtTime(vol, Howler2.ctx.currentTime);
                  } else if (sound._node && !sound._muted) {
                    sound._node.volume = vol * Howler2.volume();
                  }
                  self2._emit("volume", sound._id);
                }
              }
            } else {
              sound = id ? self2._soundById(id) : self2._sounds[0];
              return sound ? sound._volume : 0;
            }
            return self2;
          },
          /**
           * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).
           * @param  {Number} from The value to fade from (0.0 to 1.0).
           * @param  {Number} to   The volume to fade to (0.0 to 1.0).
           * @param  {Number} len  Time in milliseconds to fade.
           * @param  {Number} id   The sound id (omit to fade all sounds).
           * @return {Howl}
           */
          fade: function(from, to, len5, id) {
            var self2 = this;
            if (self2._state !== "loaded" || self2._playLock) {
              self2._queue.push({
                event: "fade",
                action: function() {
                  self2.fade(from, to, len5, id);
                }
              });
              return self2;
            }
            from = Math.min(Math.max(0, parseFloat(from)), 1);
            to = Math.min(Math.max(0, parseFloat(to)), 1);
            len5 = parseFloat(len5);
            self2.volume(from, id);
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              var sound = self2._soundById(ids[i]);
              if (sound) {
                if (!id) {
                  self2._stopFade(ids[i]);
                }
                if (self2._webAudio && !sound._muted) {
                  var currentTime = Howler2.ctx.currentTime;
                  var end = currentTime + len5 / 1e3;
                  sound._volume = from;
                  sound._node.gain.setValueAtTime(from, currentTime);
                  sound._node.gain.linearRampToValueAtTime(to, end);
                }
                self2._startFadeInterval(sound, from, to, len5, ids[i], typeof id === "undefined");
              }
            }
            return self2;
          },
          /**
           * Starts the internal interval to fade a sound.
           * @param  {Object} sound Reference to sound to fade.
           * @param  {Number} from The value to fade from (0.0 to 1.0).
           * @param  {Number} to   The volume to fade to (0.0 to 1.0).
           * @param  {Number} len  Time in milliseconds to fade.
           * @param  {Number} id   The sound id to fade.
           * @param  {Boolean} isGroup   If true, set the volume on the group.
           */
          _startFadeInterval: function(sound, from, to, len5, id, isGroup) {
            var self2 = this;
            var vol = from;
            var diff = to - from;
            var steps = Math.abs(diff / 0.01);
            var stepLen = Math.max(4, steps > 0 ? len5 / steps : len5);
            var lastTick = Date.now();
            sound._fadeTo = to;
            sound._interval = setInterval(function() {
              var tick = (Date.now() - lastTick) / len5;
              lastTick = Date.now();
              vol += diff * tick;
              vol = Math.round(vol * 100) / 100;
              if (diff < 0) {
                vol = Math.max(to, vol);
              } else {
                vol = Math.min(to, vol);
              }
              if (self2._webAudio) {
                sound._volume = vol;
              } else {
                self2.volume(vol, sound._id, true);
              }
              if (isGroup) {
                self2._volume = vol;
              }
              if (to < from && vol <= to || to > from && vol >= to) {
                clearInterval(sound._interval);
                sound._interval = null;
                sound._fadeTo = null;
                self2.volume(to, sound._id);
                self2._emit("fade", sound._id);
              }
            }, stepLen);
          },
          /**
           * Internal method that stops the currently playing fade when
           * a new fade starts, volume is changed or the sound is stopped.
           * @param  {Number} id The sound id.
           * @return {Howl}
           */
          _stopFade: function(id) {
            var self2 = this;
            var sound = self2._soundById(id);
            if (sound && sound._interval) {
              if (self2._webAudio) {
                sound._node.gain.cancelScheduledValues(Howler2.ctx.currentTime);
              }
              clearInterval(sound._interval);
              sound._interval = null;
              self2.volume(sound._fadeTo, id);
              sound._fadeTo = null;
              self2._emit("fade", id);
            }
            return self2;
          },
          /**
           * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
           *   loop() -> Returns the group's loop value.
           *   loop(id) -> Returns the sound id's loop value.
           *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
           *   loop(loop, id) -> Sets the loop value of passed sound id.
           * @return {Howl/Boolean} Returns self or current loop value.
           */
          loop: function() {
            var self2 = this;
            var args = arguments;
            var loop, id, sound;
            if (args.length === 0) {
              return self2._loop;
            } else if (args.length === 1) {
              if (typeof args[0] === "boolean") {
                loop = args[0];
                self2._loop = loop;
              } else {
                sound = self2._soundById(parseInt(args[0], 10));
                return sound ? sound._loop : false;
              }
            } else if (args.length === 2) {
              loop = args[0];
              id = parseInt(args[1], 10);
            }
            var ids = self2._getSoundIds(id);
            for (var i = 0; i < ids.length; i++) {
              sound = self2._soundById(ids[i]);
              if (sound) {
                sound._loop = loop;
                if (self2._webAudio && sound._node && sound._node.bufferSource) {
                  sound._node.bufferSource.loop = loop;
                  if (loop) {
                    sound._node.bufferSource.loopStart = sound._start || 0;
                    sound._node.bufferSource.loopEnd = sound._stop;
                    if (self2.playing(ids[i])) {
                      self2.pause(ids[i], true);
                      self2.play(ids[i], true);
                    }
                  }
                }
              }
            }
            return self2;
          },
          /**
           * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.
           *   rate() -> Returns the first sound node's current playback rate.
           *   rate(id) -> Returns the sound id's current playback rate.
           *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.
           *   rate(rate, id) -> Sets the playback rate of passed sound id.
           * @return {Howl/Number} Returns self or the current playback rate.
           */
          rate: function() {
            var self2 = this;
            var args = arguments;
            var rate, id;
            if (args.length === 0) {
              id = self2._sounds[0]._id;
            } else if (args.length === 1) {
              var ids = self2._getSoundIds();
              var index = ids.indexOf(args[0]);
              if (index >= 0) {
                id = parseInt(args[0], 10);
              } else {
                rate = parseFloat(args[0]);
              }
            } else if (args.length === 2) {
              rate = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            var sound;
            if (typeof rate === "number") {
              if (self2._state !== "loaded" || self2._playLock) {
                self2._queue.push({
                  event: "rate",
                  action: function() {
                    self2.rate.apply(self2, args);
                  }
                });
                return self2;
              }
              if (typeof id === "undefined") {
                self2._rate = rate;
              }
              id = self2._getSoundIds(id);
              for (var i = 0; i < id.length; i++) {
                sound = self2._soundById(id[i]);
                if (sound) {
                  if (self2.playing(id[i])) {
                    sound._rateSeek = self2.seek(id[i]);
                    sound._playStart = self2._webAudio ? Howler2.ctx.currentTime : sound._playStart;
                  }
                  sound._rate = rate;
                  if (self2._webAudio && sound._node && sound._node.bufferSource) {
                    sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler2.ctx.currentTime);
                  } else if (sound._node) {
                    sound._node.playbackRate = rate;
                  }
                  var seek = self2.seek(id[i]);
                  var duration = (self2._sprite[sound._sprite][0] + self2._sprite[sound._sprite][1]) / 1e3 - seek;
                  var timeout = duration * 1e3 / Math.abs(sound._rate);
                  if (self2._endTimers[id[i]] || !sound._paused) {
                    self2._clearTimer(id[i]);
                    self2._endTimers[id[i]] = setTimeout(self2._ended.bind(self2, sound), timeout);
                  }
                  self2._emit("rate", sound._id);
                }
              }
            } else {
              sound = self2._soundById(id);
              return sound ? sound._rate : self2._rate;
            }
            return self2;
          },
          /**
           * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
           *   seek() -> Returns the first sound node's current seek position.
           *   seek(id) -> Returns the sound id's current seek position.
           *   seek(seek) -> Sets the seek position of the first sound node.
           *   seek(seek, id) -> Sets the seek position of passed sound id.
           * @return {Howl/Number} Returns self or the current seek position.
           */
          seek: function() {
            var self2 = this;
            var args = arguments;
            var seek, id;
            if (args.length === 0) {
              if (self2._sounds.length) {
                id = self2._sounds[0]._id;
              }
            } else if (args.length === 1) {
              var ids = self2._getSoundIds();
              var index = ids.indexOf(args[0]);
              if (index >= 0) {
                id = parseInt(args[0], 10);
              } else if (self2._sounds.length) {
                id = self2._sounds[0]._id;
                seek = parseFloat(args[0]);
              }
            } else if (args.length === 2) {
              seek = parseFloat(args[0]);
              id = parseInt(args[1], 10);
            }
            if (typeof id === "undefined") {
              return 0;
            }
            if (typeof seek === "number" && (self2._state !== "loaded" || self2._playLock)) {
              self2._queue.push({
                event: "seek",
                action: function() {
                  self2.seek.apply(self2, args);
                }
              });
              return self2;
            }
            var sound = self2._soundById(id);
            if (sound) {
              if (typeof seek === "number" && seek >= 0) {
                var playing = self2.playing(id);
                if (playing) {
                  self2.pause(id, true);
                }
                sound._seek = seek;
                sound._ended = false;
                self2._clearTimer(id);
                if (!self2._webAudio && sound._node && !isNaN(sound._node.duration)) {
                  sound._node.currentTime = seek;
                }
                var seekAndEmit = function() {
                  if (playing) {
                    self2.play(id, true);
                  }
                  self2._emit("seek", id);
                };
                if (playing && !self2._webAudio) {
                  var emitSeek = function() {
                    if (!self2._playLock) {
                      seekAndEmit();
                    } else {
                      setTimeout(emitSeek, 0);
                    }
                  };
                  setTimeout(emitSeek, 0);
                } else {
                  seekAndEmit();
                }
              } else {
                if (self2._webAudio) {
                  var realTime = self2.playing(id) ? Howler2.ctx.currentTime - sound._playStart : 0;
                  var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;
                  return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));
                } else {
                  return sound._node.currentTime;
                }
              }
            }
            return self2;
          },
          /**
           * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.
           * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.
           * @return {Boolean} True if playing and false if not.
           */
          playing: function(id) {
            var self2 = this;
            if (typeof id === "number") {
              var sound = self2._soundById(id);
              return sound ? !sound._paused : false;
            }
            for (var i = 0; i < self2._sounds.length; i++) {
              if (!self2._sounds[i]._paused) {
                return true;
              }
            }
            return false;
          },
          /**
           * Get the duration of this sound. Passing a sound id will return the sprite duration.
           * @param  {Number} id The sound id to check. If none is passed, return full source duration.
           * @return {Number} Audio duration in seconds.
           */
          duration: function(id) {
            var self2 = this;
            var duration = self2._duration;
            var sound = self2._soundById(id);
            if (sound) {
              duration = self2._sprite[sound._sprite][1] / 1e3;
            }
            return duration;
          },
          /**
           * Returns the current loaded state of this Howl.
           * @return {String} 'unloaded', 'loading', 'loaded'
           */
          state: function() {
            return this._state;
          },
          /**
           * Unload and destroy the current Howl object.
           * This will immediately stop all sound instances attached to this group.
           */
          unload: function() {
            var self2 = this;
            var sounds = self2._sounds;
            for (var i = 0; i < sounds.length; i++) {
              if (!sounds[i]._paused) {
                self2.stop(sounds[i]._id);
              }
              if (!self2._webAudio) {
                self2._clearSound(sounds[i]._node);
                sounds[i]._node.removeEventListener("error", sounds[i]._errorFn, false);
                sounds[i]._node.removeEventListener(Howler2._canPlayEvent, sounds[i]._loadFn, false);
                sounds[i]._node.removeEventListener("ended", sounds[i]._endFn, false);
                Howler2._releaseHtml5Audio(sounds[i]._node);
              }
              delete sounds[i]._node;
              self2._clearTimer(sounds[i]._id);
            }
            var index = Howler2._howls.indexOf(self2);
            if (index >= 0) {
              Howler2._howls.splice(index, 1);
            }
            var remCache = true;
            for (i = 0; i < Howler2._howls.length; i++) {
              if (Howler2._howls[i]._src === self2._src || self2._src.indexOf(Howler2._howls[i]._src) >= 0) {
                remCache = false;
                break;
              }
            }
            if (cache && remCache) {
              delete cache[self2._src];
            }
            Howler2.noAudio = false;
            self2._state = "unloaded";
            self2._sounds = [];
            self2 = null;
            return null;
          },
          /**
           * Listen to a custom event.
           * @param  {String}   event Event name.
           * @param  {Function} fn    Listener to call.
           * @param  {Number}   id    (optional) Only listen to events for this sound.
           * @param  {Number}   once  (INTERNAL) Marks event to fire only once.
           * @return {Howl}
           */
          on: function(event, fn, id, once) {
            var self2 = this;
            var events = self2["_on" + event];
            if (typeof fn === "function") {
              events.push(once ? { id, fn, once } : { id, fn });
            }
            return self2;
          },
          /**
           * Remove a custom event. Call without parameters to remove all events.
           * @param  {String}   event Event name.
           * @param  {Function} fn    Listener to remove. Leave empty to remove all.
           * @param  {Number}   id    (optional) Only remove events for this sound.
           * @return {Howl}
           */
          off: function(event, fn, id) {
            var self2 = this;
            var events = self2["_on" + event];
            var i = 0;
            if (typeof fn === "number") {
              id = fn;
              fn = null;
            }
            if (fn || id) {
              for (i = 0; i < events.length; i++) {
                var isId = id === events[i].id;
                if (fn === events[i].fn && isId || !fn && isId) {
                  events.splice(i, 1);
                  break;
                }
              }
            } else if (event) {
              self2["_on" + event] = [];
            } else {
              var keys = Object.keys(self2);
              for (i = 0; i < keys.length; i++) {
                if (keys[i].indexOf("_on") === 0 && Array.isArray(self2[keys[i]])) {
                  self2[keys[i]] = [];
                }
              }
            }
            return self2;
          },
          /**
           * Listen to a custom event and remove it once fired.
           * @param  {String}   event Event name.
           * @param  {Function} fn    Listener to call.
           * @param  {Number}   id    (optional) Only listen to events for this sound.
           * @return {Howl}
           */
          once: function(event, fn, id) {
            var self2 = this;
            self2.on(event, fn, id, 1);
            return self2;
          },
          /**
           * Emit all events of a specific type and pass the sound id.
           * @param  {String} event Event name.
           * @param  {Number} id    Sound ID.
           * @param  {Number} msg   Message to go with event.
           * @return {Howl}
           */
          _emit: function(event, id, msg) {
            var self2 = this;
            var events = self2["_on" + event];
            for (var i = events.length - 1; i >= 0; i--) {
              if (!events[i].id || events[i].id === id || event === "load") {
                setTimeout(function(fn) {
                  fn.call(this, id, msg);
                }.bind(self2, events[i].fn), 0);
                if (events[i].once) {
                  self2.off(event, events[i].fn, events[i].id);
                }
              }
            }
            self2._loadQueue(event);
            return self2;
          },
          /**
           * Queue of actions initiated before the sound has loaded.
           * These will be called in sequence, with the next only firing
           * after the previous has finished executing (even if async like play).
           * @return {Howl}
           */
          _loadQueue: function(event) {
            var self2 = this;
            if (self2._queue.length > 0) {
              var task = self2._queue[0];
              if (task.event === event) {
                self2._queue.shift();
                self2._loadQueue();
              }
              if (!event) {
                task.action();
              }
            }
            return self2;
          },
          /**
           * Fired when playback ends at the end of the duration.
           * @param  {Sound} sound The sound object to work with.
           * @return {Howl}
           */
          _ended: function(sound) {
            var self2 = this;
            var sprite = sound._sprite;
            if (!self2._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {
              setTimeout(self2._ended.bind(self2, sound), 100);
              return self2;
            }
            var loop = !!(sound._loop || self2._sprite[sprite][2]);
            self2._emit("end", sound._id);
            if (!self2._webAudio && loop) {
              self2.stop(sound._id, true).play(sound._id);
            }
            if (self2._webAudio && loop) {
              self2._emit("play", sound._id);
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              sound._playStart = Howler2.ctx.currentTime;
              var timeout = (sound._stop - sound._start) * 1e3 / Math.abs(sound._rate);
              self2._endTimers[sound._id] = setTimeout(self2._ended.bind(self2, sound), timeout);
            }
            if (self2._webAudio && !loop) {
              sound._paused = true;
              sound._ended = true;
              sound._seek = sound._start || 0;
              sound._rateSeek = 0;
              self2._clearTimer(sound._id);
              self2._cleanBuffer(sound._node);
              Howler2._autoSuspend();
            }
            if (!self2._webAudio && !loop) {
              self2.stop(sound._id, true);
            }
            return self2;
          },
          /**
           * Clear the end timer for a sound playback.
           * @param  {Number} id The sound ID.
           * @return {Howl}
           */
          _clearTimer: function(id) {
            var self2 = this;
            if (self2._endTimers[id]) {
              if (typeof self2._endTimers[id] !== "function") {
                clearTimeout(self2._endTimers[id]);
              } else {
                var sound = self2._soundById(id);
                if (sound && sound._node) {
                  sound._node.removeEventListener("ended", self2._endTimers[id], false);
                }
              }
              delete self2._endTimers[id];
            }
            return self2;
          },
          /**
           * Return the sound identified by this ID, or return null.
           * @param  {Number} id Sound ID
           * @return {Object}    Sound object or null.
           */
          _soundById: function(id) {
            var self2 = this;
            for (var i = 0; i < self2._sounds.length; i++) {
              if (id === self2._sounds[i]._id) {
                return self2._sounds[i];
              }
            }
            return null;
          },
          /**
           * Return an inactive sound from the pool or create a new one.
           * @return {Sound} Sound playback object.
           */
          _inactiveSound: function() {
            var self2 = this;
            self2._drain();
            for (var i = 0; i < self2._sounds.length; i++) {
              if (self2._sounds[i]._ended) {
                return self2._sounds[i].reset();
              }
            }
            return new Sound2(self2);
          },
          /**
           * Drain excess inactive sounds from the pool.
           */
          _drain: function() {
            var self2 = this;
            var limit = self2._pool;
            var cnt = 0;
            var i = 0;
            if (self2._sounds.length < limit) {
              return;
            }
            for (i = 0; i < self2._sounds.length; i++) {
              if (self2._sounds[i]._ended) {
                cnt++;
              }
            }
            for (i = self2._sounds.length - 1; i >= 0; i--) {
              if (cnt <= limit) {
                return;
              }
              if (self2._sounds[i]._ended) {
                if (self2._webAudio && self2._sounds[i]._node) {
                  self2._sounds[i]._node.disconnect(0);
                }
                self2._sounds.splice(i, 1);
                cnt--;
              }
            }
          },
          /**
           * Get all ID's from the sounds pool.
           * @param  {Number} id Only return one ID if one is passed.
           * @return {Array}    Array of IDs.
           */
          _getSoundIds: function(id) {
            var self2 = this;
            if (typeof id === "undefined") {
              var ids = [];
              for (var i = 0; i < self2._sounds.length; i++) {
                ids.push(self2._sounds[i]._id);
              }
              return ids;
            } else {
              return [id];
            }
          },
          /**
           * Load the sound back into the buffer source.
           * @param  {Sound} sound The sound object to work with.
           * @return {Howl}
           */
          _refreshBuffer: function(sound) {
            var self2 = this;
            sound._node.bufferSource = Howler2.ctx.createBufferSource();
            sound._node.bufferSource.buffer = cache[self2._src];
            if (sound._panner) {
              sound._node.bufferSource.connect(sound._panner);
            } else {
              sound._node.bufferSource.connect(sound._node);
            }
            sound._node.bufferSource.loop = sound._loop;
            if (sound._loop) {
              sound._node.bufferSource.loopStart = sound._start || 0;
              sound._node.bufferSource.loopEnd = sound._stop || 0;
            }
            sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler2.ctx.currentTime);
            return self2;
          },
          /**
           * Prevent memory leaks by cleaning up the buffer source after playback.
           * @param  {Object} node Sound's audio node containing the buffer source.
           * @return {Howl}
           */
          _cleanBuffer: function(node) {
            var self2 = this;
            var isIOS = Howler2._navigator && Howler2._navigator.vendor.indexOf("Apple") >= 0;
            if (Howler2._scratchBuffer && node.bufferSource) {
              node.bufferSource.onended = null;
              node.bufferSource.disconnect(0);
              if (isIOS) {
                try {
                  node.bufferSource.buffer = Howler2._scratchBuffer;
                } catch (e) {
                }
              }
            }
            node.bufferSource = null;
            return self2;
          },
          /**
           * Set the source to a 0-second silence to stop any downloading (except in IE).
           * @param  {Object} node Audio node to clear.
           */
          _clearSound: function(node) {
            var checkIE = /MSIE |Trident\//.test(Howler2._navigator && Howler2._navigator.userAgent);
            if (!checkIE) {
              node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
            }
          }
        };
        var Sound2 = function(howl) {
          this._parent = howl;
          this.init();
        };
        Sound2.prototype = {
          /**
           * Initialize a new Sound object.
           * @return {Sound}
           */
          init: function() {
            var self2 = this;
            var parent = self2._parent;
            self2._muted = parent._muted;
            self2._loop = parent._loop;
            self2._volume = parent._volume;
            self2._rate = parent._rate;
            self2._seek = 0;
            self2._paused = true;
            self2._ended = true;
            self2._sprite = "__default";
            self2._id = ++Howler2._counter;
            parent._sounds.push(self2);
            self2.create();
            return self2;
          },
          /**
           * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
           * @return {Sound}
           */
          create: function() {
            var self2 = this;
            var parent = self2._parent;
            var volume = Howler2._muted || self2._muted || self2._parent._muted ? 0 : self2._volume;
            if (parent._webAudio) {
              self2._node = typeof Howler2.ctx.createGain === "undefined" ? Howler2.ctx.createGainNode() : Howler2.ctx.createGain();
              self2._node.gain.setValueAtTime(volume, Howler2.ctx.currentTime);
              self2._node.paused = true;
              self2._node.connect(Howler2.masterGain);
            } else if (!Howler2.noAudio) {
              self2._node = Howler2._obtainHtml5Audio();
              self2._errorFn = self2._errorListener.bind(self2);
              self2._node.addEventListener("error", self2._errorFn, false);
              self2._loadFn = self2._loadListener.bind(self2);
              self2._node.addEventListener(Howler2._canPlayEvent, self2._loadFn, false);
              self2._endFn = self2._endListener.bind(self2);
              self2._node.addEventListener("ended", self2._endFn, false);
              self2._node.src = parent._src;
              self2._node.preload = parent._preload === true ? "auto" : parent._preload;
              self2._node.volume = volume * Howler2.volume();
              self2._node.load();
            }
            return self2;
          },
          /**
           * Reset the parameters of this sound to the original state (for recycle).
           * @return {Sound}
           */
          reset: function() {
            var self2 = this;
            var parent = self2._parent;
            self2._muted = parent._muted;
            self2._loop = parent._loop;
            self2._volume = parent._volume;
            self2._rate = parent._rate;
            self2._seek = 0;
            self2._rateSeek = 0;
            self2._paused = true;
            self2._ended = true;
            self2._sprite = "__default";
            self2._id = ++Howler2._counter;
            return self2;
          },
          /**
           * HTML5 Audio error listener callback.
           */
          _errorListener: function() {
            var self2 = this;
            self2._parent._emit("loaderror", self2._id, self2._node.error ? self2._node.error.code : 0);
            self2._node.removeEventListener("error", self2._errorFn, false);
          },
          /**
           * HTML5 Audio canplaythrough listener callback.
           */
          _loadListener: function() {
            var self2 = this;
            var parent = self2._parent;
            parent._duration = Math.ceil(self2._node.duration * 10) / 10;
            if (Object.keys(parent._sprite).length === 0) {
              parent._sprite = { __default: [0, parent._duration * 1e3] };
            }
            if (parent._state !== "loaded") {
              parent._state = "loaded";
              parent._emit("load");
              parent._loadQueue();
            }
            self2._node.removeEventListener(Howler2._canPlayEvent, self2._loadFn, false);
          },
          /**
           * HTML5 Audio ended listener callback.
           */
          _endListener: function() {
            var self2 = this;
            var parent = self2._parent;
            if (parent._duration === Infinity) {
              parent._duration = Math.ceil(self2._node.duration * 10) / 10;
              if (parent._sprite.__default[1] === Infinity) {
                parent._sprite.__default[1] = parent._duration * 1e3;
              }
              parent._ended(self2);
            }
            self2._node.removeEventListener("ended", self2._endFn, false);
          }
        };
        var cache = {};
        var loadBuffer = function(self2) {
          var url = self2._src;
          if (cache[url]) {
            self2._duration = cache[url].duration;
            loadSound(self2);
            return;
          }
          if (/^data:[^;]+;base64,/.test(url)) {
            var data = atob(url.split(",")[1]);
            var dataView = new Uint8Array(data.length);
            for (var i = 0; i < data.length; ++i) {
              dataView[i] = data.charCodeAt(i);
            }
            decodeAudioData(dataView.buffer, self2);
          } else {
            var xhr = new XMLHttpRequest();
            xhr.open(self2._xhr.method, url, true);
            xhr.withCredentials = self2._xhr.withCredentials;
            xhr.responseType = "arraybuffer";
            if (self2._xhr.headers) {
              Object.keys(self2._xhr.headers).forEach(function(key) {
                xhr.setRequestHeader(key, self2._xhr.headers[key]);
              });
            }
            xhr.onload = function() {
              var code = (xhr.status + "")[0];
              if (code !== "0" && code !== "2" && code !== "3") {
                self2._emit("loaderror", null, "Failed loading audio file with status: " + xhr.status + ".");
                return;
              }
              decodeAudioData(xhr.response, self2);
            };
            xhr.onerror = function() {
              if (self2._webAudio) {
                self2._html5 = true;
                self2._webAudio = false;
                self2._sounds = [];
                delete cache[url];
                self2.load();
              }
            };
            safeXhrSend(xhr);
          }
        };
        var safeXhrSend = function(xhr) {
          try {
            xhr.send();
          } catch (e) {
            xhr.onerror();
          }
        };
        var decodeAudioData = function(arraybuffer, self2) {
          var error = function() {
            self2._emit("loaderror", null, "Decoding audio data failed.");
          };
          var success = function(buffer) {
            if (buffer && self2._sounds.length > 0) {
              cache[self2._src] = buffer;
              loadSound(self2, buffer);
            } else {
              error();
            }
          };
          if (typeof Promise !== "undefined" && Howler2.ctx.decodeAudioData.length === 1) {
            Howler2.ctx.decodeAudioData(arraybuffer).then(success).catch(error);
          } else {
            Howler2.ctx.decodeAudioData(arraybuffer, success, error);
          }
        };
        var loadSound = function(self2, buffer) {
          if (buffer && !self2._duration) {
            self2._duration = buffer.duration;
          }
          if (Object.keys(self2._sprite).length === 0) {
            self2._sprite = { __default: [0, self2._duration * 1e3] };
          }
          if (self2._state !== "loaded") {
            self2._state = "loaded";
            self2._emit("load");
            self2._loadQueue();
          }
        };
        var setupAudioContext = function() {
          if (!Howler2.usingWebAudio) {
            return;
          }
          try {
            if (typeof AudioContext !== "undefined") {
              Howler2.ctx = new AudioContext();
            } else if (typeof webkitAudioContext !== "undefined") {
              Howler2.ctx = new webkitAudioContext();
            } else {
              Howler2.usingWebAudio = false;
            }
          } catch (e) {
            Howler2.usingWebAudio = false;
          }
          if (!Howler2.ctx) {
            Howler2.usingWebAudio = false;
          }
          var iOS = /iP(hone|od|ad)/.test(Howler2._navigator && Howler2._navigator.platform);
          var appVersion = Howler2._navigator && Howler2._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
          var version = appVersion ? parseInt(appVersion[1], 10) : null;
          if (iOS && version && version < 9) {
            var safari = /safari/.test(Howler2._navigator && Howler2._navigator.userAgent.toLowerCase());
            if (Howler2._navigator && !safari) {
              Howler2.usingWebAudio = false;
            }
          }
          if (Howler2.usingWebAudio) {
            Howler2.masterGain = typeof Howler2.ctx.createGain === "undefined" ? Howler2.ctx.createGainNode() : Howler2.ctx.createGain();
            Howler2.masterGain.gain.setValueAtTime(Howler2._muted ? 0 : Howler2._volume, Howler2.ctx.currentTime);
            Howler2.masterGain.connect(Howler2.ctx.destination);
          }
          Howler2._setup();
        };
        if (typeof define === "function" && define.amd) {
          define([], function() {
            return {
              Howler: Howler2,
              Howl: Howl2
            };
          });
        }
        if (typeof exports !== "undefined") {
          exports.Howler = Howler2;
          exports.Howl = Howl2;
        }
        if (typeof global !== "undefined") {
          global.HowlerGlobal = HowlerGlobal2;
          global.Howler = Howler2;
          global.Howl = Howl2;
          global.Sound = Sound2;
        } else if (typeof window !== "undefined") {
          window.HowlerGlobal = HowlerGlobal2;
          window.Howler = Howler2;
          window.Howl = Howl2;
          window.Sound = Sound2;
        }
      })();
      (function() {
        "use strict";
        HowlerGlobal.prototype._pos = [0, 0, 0];
        HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
        HowlerGlobal.prototype.stereo = function(pan) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          for (var i = self2._howls.length - 1; i >= 0; i--) {
            self2._howls[i].stereo(pan);
          }
          return self2;
        };
        HowlerGlobal.prototype.pos = function(x, y, z) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          y = typeof y !== "number" ? self2._pos[1] : y;
          z = typeof z !== "number" ? self2._pos[2] : z;
          if (typeof x === "number") {
            self2._pos = [x, y, z];
            if (typeof self2.ctx.listener.positionX !== "undefined") {
              self2.ctx.listener.positionX.setTargetAtTime(self2._pos[0], Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.positionY.setTargetAtTime(self2._pos[1], Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.positionZ.setTargetAtTime(self2._pos[2], Howler.ctx.currentTime, 0.1);
            } else {
              self2.ctx.listener.setPosition(self2._pos[0], self2._pos[1], self2._pos[2]);
            }
          } else {
            return self2._pos;
          }
          return self2;
        };
        HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {
          var self2 = this;
          if (!self2.ctx || !self2.ctx.listener) {
            return self2;
          }
          var or = self2._orientation;
          y = typeof y !== "number" ? or[1] : y;
          z = typeof z !== "number" ? or[2] : z;
          xUp = typeof xUp !== "number" ? or[3] : xUp;
          yUp = typeof yUp !== "number" ? or[4] : yUp;
          zUp = typeof zUp !== "number" ? or[5] : zUp;
          if (typeof x === "number") {
            self2._orientation = [x, y, z, xUp, yUp, zUp];
            if (typeof self2.ctx.listener.forwardX !== "undefined") {
              self2.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);
              self2.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);
            } else {
              self2.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);
            }
          } else {
            return or;
          }
          return self2;
        };
        Howl.prototype.init = function(_super) {
          return function(o) {
            var self2 = this;
            self2._orientation = o.orientation || [1, 0, 0];
            self2._stereo = o.stereo || null;
            self2._pos = o.pos || null;
            self2._pannerAttr = {
              coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : 360,
              coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : 360,
              coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : 0,
              distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : "inverse",
              maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : 1e4,
              panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : "HRTF",
              refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : 1,
              rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : 1
            };
            self2._onstereo = o.onstereo ? [{ fn: o.onstereo }] : [];
            self2._onpos = o.onpos ? [{ fn: o.onpos }] : [];
            self2._onorientation = o.onorientation ? [{ fn: o.onorientation }] : [];
            return _super.call(this, o);
          };
        }(Howl.prototype.init);
        Howl.prototype.stereo = function(pan, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "stereo",
              action: function() {
                self2.stereo(pan, id);
              }
            });
            return self2;
          }
          var pannerType = typeof Howler.ctx.createStereoPanner === "undefined" ? "spatial" : "stereo";
          if (typeof id === "undefined") {
            if (typeof pan === "number") {
              self2._stereo = pan;
              self2._pos = [pan, 0, 0];
            } else {
              return self2._stereo;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (typeof pan === "number") {
                sound._stereo = pan;
                sound._pos = [pan, 0, 0];
                if (sound._node) {
                  sound._pannerAttr.panningModel = "equalpower";
                  if (!sound._panner || !sound._panner.pan) {
                    setupPanner(sound, pannerType);
                  }
                  if (pannerType === "spatial") {
                    if (typeof sound._panner.positionX !== "undefined") {
                      sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);
                      sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);
                      sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);
                    } else {
                      sound._panner.setPosition(pan, 0, 0);
                    }
                  } else {
                    sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);
                  }
                }
                self2._emit("stereo", sound._id);
              } else {
                return sound._stereo;
              }
            }
          }
          return self2;
        };
        Howl.prototype.pos = function(x, y, z, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "pos",
              action: function() {
                self2.pos(x, y, z, id);
              }
            });
            return self2;
          }
          y = typeof y !== "number" ? 0 : y;
          z = typeof z !== "number" ? -0.5 : z;
          if (typeof id === "undefined") {
            if (typeof x === "number") {
              self2._pos = [x, y, z];
            } else {
              return self2._pos;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (typeof x === "number") {
                sound._pos = [x, y, z];
                if (sound._node) {
                  if (!sound._panner || sound._panner.pan) {
                    setupPanner(sound, "spatial");
                  }
                  if (typeof sound._panner.positionX !== "undefined") {
                    sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);
                    sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);
                    sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setPosition(x, y, z);
                  }
                }
                self2._emit("pos", sound._id);
              } else {
                return sound._pos;
              }
            }
          }
          return self2;
        };
        Howl.prototype.orientation = function(x, y, z, id) {
          var self2 = this;
          if (!self2._webAudio) {
            return self2;
          }
          if (self2._state !== "loaded") {
            self2._queue.push({
              event: "orientation",
              action: function() {
                self2.orientation(x, y, z, id);
              }
            });
            return self2;
          }
          y = typeof y !== "number" ? self2._orientation[1] : y;
          z = typeof z !== "number" ? self2._orientation[2] : z;
          if (typeof id === "undefined") {
            if (typeof x === "number") {
              self2._orientation = [x, y, z];
            } else {
              return self2._orientation;
            }
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            var sound = self2._soundById(ids[i]);
            if (sound) {
              if (typeof x === "number") {
                sound._orientation = [x, y, z];
                if (sound._node) {
                  if (!sound._panner) {
                    if (!sound._pos) {
                      sound._pos = self2._pos || [0, 0, -0.5];
                    }
                    setupPanner(sound, "spatial");
                  }
                  if (typeof sound._panner.orientationX !== "undefined") {
                    sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);
                    sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);
                    sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);
                  } else {
                    sound._panner.setOrientation(x, y, z);
                  }
                }
                self2._emit("orientation", sound._id);
              } else {
                return sound._orientation;
              }
            }
          }
          return self2;
        };
        Howl.prototype.pannerAttr = function() {
          var self2 = this;
          var args = arguments;
          var o, id, sound;
          if (!self2._webAudio) {
            return self2;
          }
          if (args.length === 0) {
            return self2._pannerAttr;
          } else if (args.length === 1) {
            if (typeof args[0] === "object") {
              o = args[0];
              if (typeof id === "undefined") {
                if (!o.pannerAttr) {
                  o.pannerAttr = {
                    coneInnerAngle: o.coneInnerAngle,
                    coneOuterAngle: o.coneOuterAngle,
                    coneOuterGain: o.coneOuterGain,
                    distanceModel: o.distanceModel,
                    maxDistance: o.maxDistance,
                    refDistance: o.refDistance,
                    rolloffFactor: o.rolloffFactor,
                    panningModel: o.panningModel
                  };
                }
                self2._pannerAttr = {
                  coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== "undefined" ? o.pannerAttr.coneInnerAngle : self2._coneInnerAngle,
                  coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== "undefined" ? o.pannerAttr.coneOuterAngle : self2._coneOuterAngle,
                  coneOuterGain: typeof o.pannerAttr.coneOuterGain !== "undefined" ? o.pannerAttr.coneOuterGain : self2._coneOuterGain,
                  distanceModel: typeof o.pannerAttr.distanceModel !== "undefined" ? o.pannerAttr.distanceModel : self2._distanceModel,
                  maxDistance: typeof o.pannerAttr.maxDistance !== "undefined" ? o.pannerAttr.maxDistance : self2._maxDistance,
                  refDistance: typeof o.pannerAttr.refDistance !== "undefined" ? o.pannerAttr.refDistance : self2._refDistance,
                  rolloffFactor: typeof o.pannerAttr.rolloffFactor !== "undefined" ? o.pannerAttr.rolloffFactor : self2._rolloffFactor,
                  panningModel: typeof o.pannerAttr.panningModel !== "undefined" ? o.pannerAttr.panningModel : self2._panningModel
                };
              }
            } else {
              sound = self2._soundById(parseInt(args[0], 10));
              return sound ? sound._pannerAttr : self2._pannerAttr;
            }
          } else if (args.length === 2) {
            o = args[0];
            id = parseInt(args[1], 10);
          }
          var ids = self2._getSoundIds(id);
          for (var i = 0; i < ids.length; i++) {
            sound = self2._soundById(ids[i]);
            if (sound) {
              var pa = sound._pannerAttr;
              pa = {
                coneInnerAngle: typeof o.coneInnerAngle !== "undefined" ? o.coneInnerAngle : pa.coneInnerAngle,
                coneOuterAngle: typeof o.coneOuterAngle !== "undefined" ? o.coneOuterAngle : pa.coneOuterAngle,
                coneOuterGain: typeof o.coneOuterGain !== "undefined" ? o.coneOuterGain : pa.coneOuterGain,
                distanceModel: typeof o.distanceModel !== "undefined" ? o.distanceModel : pa.distanceModel,
                maxDistance: typeof o.maxDistance !== "undefined" ? o.maxDistance : pa.maxDistance,
                refDistance: typeof o.refDistance !== "undefined" ? o.refDistance : pa.refDistance,
                rolloffFactor: typeof o.rolloffFactor !== "undefined" ? o.rolloffFactor : pa.rolloffFactor,
                panningModel: typeof o.panningModel !== "undefined" ? o.panningModel : pa.panningModel
              };
              var panner = sound._panner;
              if (panner) {
                panner.coneInnerAngle = pa.coneInnerAngle;
                panner.coneOuterAngle = pa.coneOuterAngle;
                panner.coneOuterGain = pa.coneOuterGain;
                panner.distanceModel = pa.distanceModel;
                panner.maxDistance = pa.maxDistance;
                panner.refDistance = pa.refDistance;
                panner.rolloffFactor = pa.rolloffFactor;
                panner.panningModel = pa.panningModel;
              } else {
                if (!sound._pos) {
                  sound._pos = self2._pos || [0, 0, -0.5];
                }
                setupPanner(sound, "spatial");
              }
            }
          }
          return self2;
        };
        Sound.prototype.init = function(_super) {
          return function() {
            var self2 = this;
            var parent = self2._parent;
            self2._orientation = parent._orientation;
            self2._stereo = parent._stereo;
            self2._pos = parent._pos;
            self2._pannerAttr = parent._pannerAttr;
            _super.call(this);
            if (self2._stereo) {
              parent.stereo(self2._stereo);
            } else if (self2._pos) {
              parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
            }
          };
        }(Sound.prototype.init);
        Sound.prototype.reset = function(_super) {
          return function() {
            var self2 = this;
            var parent = self2._parent;
            self2._orientation = parent._orientation;
            self2._stereo = parent._stereo;
            self2._pos = parent._pos;
            self2._pannerAttr = parent._pannerAttr;
            if (self2._stereo) {
              parent.stereo(self2._stereo);
            } else if (self2._pos) {
              parent.pos(self2._pos[0], self2._pos[1], self2._pos[2], self2._id);
            } else if (self2._panner) {
              self2._panner.disconnect(0);
              self2._panner = void 0;
              parent._refreshBuffer(self2);
            }
            return _super.call(this);
          };
        }(Sound.prototype.reset);
        var setupPanner = function(sound, type) {
          type = type || "spatial";
          if (type === "spatial") {
            sound._panner = Howler.ctx.createPanner();
            sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;
            sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;
            sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;
            sound._panner.distanceModel = sound._pannerAttr.distanceModel;
            sound._panner.maxDistance = sound._pannerAttr.maxDistance;
            sound._panner.refDistance = sound._pannerAttr.refDistance;
            sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;
            sound._panner.panningModel = sound._pannerAttr.panningModel;
            if (typeof sound._panner.positionX !== "undefined") {
              sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);
              sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);
              sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);
            } else {
              sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);
            }
            if (typeof sound._panner.orientationX !== "undefined") {
              sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);
              sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);
              sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);
            } else {
              sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);
            }
          } else {
            sound._panner = Howler.ctx.createStereoPanner();
            sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);
          }
          sound._panner.connect(sound._node);
          if (!sound._paused) {
            sound._parent.pause(sound._id, true).play(sound._id, true);
          }
        };
      })();
    }
  });

  // node_modules/earcut/src/earcut.js
  var require_earcut = __commonJS({
    "node_modules/earcut/src/earcut.js"(exports, module) {
      "use strict";
      module.exports = earcut2;
      module.exports.default = earcut2;
      function earcut2(data, holeIndices, dim) {
        dim = dim || 2;
        var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, true), triangles = [];
        if (!outerNode || outerNode.next === outerNode.prev)
          return triangles;
        var minX, minY, maxX, maxY, x, y, invSize;
        if (hasHoles)
          outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
        if (data.length > 80 * dim) {
          minX = maxX = data[0];
          minY = maxY = data[1];
          for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX)
              minX = x;
            if (y < minY)
              minY = y;
            if (x > maxX)
              maxX = x;
            if (y > maxY)
              maxY = y;
          }
          invSize = Math.max(maxX - minX, maxY - minY);
          invSize = invSize !== 0 ? 32767 / invSize : 0;
        }
        earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
        return triangles;
      }
      function linkedList(data, start, end, dim, clockwise) {
        var i, last;
        if (clockwise === signedArea(data, start, end, dim) > 0) {
          for (i = start; i < end; i += dim)
            last = insertNode(i, data[i], data[i + 1], last);
        } else {
          for (i = end - dim; i >= start; i -= dim)
            last = insertNode(i, data[i], data[i + 1], last);
        }
        if (last && equals7(last, last.next)) {
          removeNode(last);
          last = last.next;
        }
        return last;
      }
      function filterPoints(start, end) {
        if (!start)
          return start;
        if (!end)
          end = start;
        var p = start, again;
        do {
          again = false;
          if (!p.steiner && (equals7(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next)
              break;
            again = true;
          } else {
            p = p.next;
          }
        } while (again || p !== end);
        return end;
      }
      function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
        if (!ear)
          return;
        if (!pass && invSize)
          indexCurve(ear, minX, minY, invSize);
        var stop = ear, prev, next;
        while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;
          if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            triangles.push(prev.i / dim | 0);
            triangles.push(ear.i / dim | 0);
            triangles.push(next.i / dim | 0);
            removeNode(ear);
            ear = next.next;
            stop = next.next;
            continue;
          }
          ear = next;
          if (ear === stop) {
            if (!pass) {
              earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
            } else if (pass === 1) {
              ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
              earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
            } else if (pass === 2) {
              splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }
            break;
          }
        }
      }
      function isEar(ear) {
        var a = ear.prev, b = ear, c = ear.next;
        if (area(a, b, c) >= 0)
          return false;
        var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var p = c.next;
        while (p !== a) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.next;
        }
        return true;
      }
      function isEarHashed(ear, minX, minY, invSize) {
        var a = ear.prev, b = ear, c = ear.next;
        if (area(a, b, c) >= 0)
          return false;
        var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;
        var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
        var minZ = zOrder(x0, y0, minX, minY, invSize), maxZ = zOrder(x1, y1, minX, minY, invSize);
        var p = ear.prevZ, n = ear.nextZ;
        while (p && p.z >= minZ && n && n.z <= maxZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.prevZ;
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
            return false;
          n = n.nextZ;
        }
        while (p && p.z >= minZ) {
          if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0)
            return false;
          p = p.prevZ;
        }
        while (n && n.z <= maxZ) {
          if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0)
            return false;
          n = n.nextZ;
        }
        return true;
      }
      function cureLocalIntersections(start, triangles, dim) {
        var p = start;
        do {
          var a = p.prev, b = p.next.next;
          if (!equals7(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim | 0);
            triangles.push(p.i / dim | 0);
            triangles.push(b.i / dim | 0);
            removeNode(p);
            removeNode(p.next);
            p = start = b;
          }
          p = p.next;
        } while (p !== start);
        return filterPoints(p);
      }
      function splitEarcut(start, triangles, dim, minX, minY, invSize) {
        var a = start;
        do {
          var b = a.next.next;
          while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
              var c = splitPolygon(a, b);
              a = filterPoints(a, a.next);
              c = filterPoints(c, c.next);
              earcutLinked(a, triangles, dim, minX, minY, invSize, 0);
              earcutLinked(c, triangles, dim, minX, minY, invSize, 0);
              return;
            }
            b = b.next;
          }
          a = a.next;
        } while (a !== start);
      }
      function eliminateHoles(data, holeIndices, outerNode, dim) {
        var queue = [], i, len5, start, end, list;
        for (i = 0, len5 = holeIndices.length; i < len5; i++) {
          start = holeIndices[i] * dim;
          end = i < len5 - 1 ? holeIndices[i + 1] * dim : data.length;
          list = linkedList(data, start, end, dim, false);
          if (list === list.next)
            list.steiner = true;
          queue.push(getLeftmost(list));
        }
        queue.sort(compareX);
        for (i = 0; i < queue.length; i++) {
          outerNode = eliminateHole(queue[i], outerNode);
        }
        return outerNode;
      }
      function compareX(a, b) {
        return a.x - b.x;
      }
      function eliminateHole(hole, outerNode) {
        var bridge = findHoleBridge(hole, outerNode);
        if (!bridge) {
          return outerNode;
        }
        var bridgeReverse = splitPolygon(bridge, hole);
        filterPoints(bridgeReverse, bridgeReverse.next);
        return filterPoints(bridge, bridge.next);
      }
      function findHoleBridge(hole, outerNode) {
        var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;
        do {
          if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
              qx = x;
              m = p.x < p.next.x ? p : p.next;
              if (x === hx)
                return m;
            }
          }
          p = p.next;
        } while (p !== outerNode);
        if (!m)
          return null;
        var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;
        p = m;
        do {
          if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x);
            if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {
              m = p;
              tanMin = tan;
            }
          }
          p = p.next;
        } while (p !== stop);
        return m;
      }
      function sectorContainsSector(m, p) {
        return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;
      }
      function indexCurve(start, minX, minY, invSize) {
        var p = start;
        do {
          if (p.z === 0)
            p.z = zOrder(p.x, p.y, minX, minY, invSize);
          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
        } while (p !== start);
        p.prevZ.nextZ = null;
        p.prevZ = null;
        sortLinked(p);
      }
      function sortLinked(list) {
        var i, p, q2, e, tail, numMerges, pSize, qSize, inSize = 1;
        do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;
          while (p) {
            numMerges++;
            q2 = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
              pSize++;
              q2 = q2.nextZ;
              if (!q2)
                break;
            }
            qSize = inSize;
            while (pSize > 0 || qSize > 0 && q2) {
              if (pSize !== 0 && (qSize === 0 || !q2 || p.z <= q2.z)) {
                e = p;
                p = p.nextZ;
                pSize--;
              } else {
                e = q2;
                q2 = q2.nextZ;
                qSize--;
              }
              if (tail)
                tail.nextZ = e;
              else
                list = e;
              e.prevZ = tail;
              tail = e;
            }
            p = q2;
          }
          tail.nextZ = null;
          inSize *= 2;
        } while (numMerges > 1);
        return list;
      }
      function zOrder(x, y, minX, minY, invSize) {
        x = (x - minX) * invSize | 0;
        y = (y - minY) * invSize | 0;
        x = (x | x << 8) & 16711935;
        x = (x | x << 4) & 252645135;
        x = (x | x << 2) & 858993459;
        x = (x | x << 1) & 1431655765;
        y = (y | y << 8) & 16711935;
        y = (y | y << 4) & 252645135;
        y = (y | y << 2) & 858993459;
        y = (y | y << 1) & 1431655765;
        return x | y << 1;
      }
      function getLeftmost(start) {
        var p = start, leftmost = start;
        do {
          if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y)
            leftmost = p;
          p = p.next;
        } while (p !== start);
        return leftmost;
      }
      function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);
      }
      function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges
        (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
        (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
        equals7(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0);
      }
      function area(p, q2, r) {
        return (q2.y - p.y) * (r.x - q2.x) - (q2.x - p.x) * (r.y - q2.y);
      }
      function equals7(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
      }
      function intersects(p1, q1, p2, q2) {
        var o1 = sign(area(p1, q1, p2));
        var o2 = sign(area(p1, q1, q2));
        var o3 = sign(area(p2, q2, p1));
        var o4 = sign(area(p2, q2, q1));
        if (o1 !== o2 && o3 !== o4)
          return true;
        if (o1 === 0 && onSegment(p1, p2, q1))
          return true;
        if (o2 === 0 && onSegment(p1, q2, q1))
          return true;
        if (o3 === 0 && onSegment(p2, p1, q2))
          return true;
        if (o4 === 0 && onSegment(p2, q1, q2))
          return true;
        return false;
      }
      function onSegment(p, q2, r) {
        return q2.x <= Math.max(p.x, r.x) && q2.x >= Math.min(p.x, r.x) && q2.y <= Math.max(p.y, r.y) && q2.y >= Math.min(p.y, r.y);
      }
      function sign(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
      }
      function intersectsPolygon(a, b) {
        var p = a;
        do {
          if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b))
            return true;
          p = p.next;
        } while (p !== a);
        return false;
      }
      function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
      }
      function middleInside(a, b) {
        var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
        do {
          if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)
            inside = !inside;
          p = p.next;
        } while (p !== a);
        return inside;
      }
      function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
        a.next = b;
        b.prev = a;
        a2.next = an;
        an.prev = a2;
        b2.next = a2;
        a2.prev = b2;
        bp.next = b2;
        b2.prev = bp;
        return b2;
      }
      function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);
        if (!last) {
          p.prev = p;
          p.next = p;
        } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
        }
        return p;
      }
      function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;
        if (p.prevZ)
          p.prevZ.nextZ = p.nextZ;
        if (p.nextZ)
          p.nextZ.prevZ = p.prevZ;
      }
      function Node(i, x, y) {
        this.i = i;
        this.x = x;
        this.y = y;
        this.prev = null;
        this.next = null;
        this.z = 0;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false;
      }
      earcut2.deviation = function(data, holeIndices, dim, triangles) {
        var hasHoles = holeIndices && holeIndices.length;
        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;
        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
        if (hasHoles) {
          for (var i = 0, len5 = holeIndices.length; i < len5; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len5 - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
          }
        }
        var trianglesArea = 0;
        for (i = 0; i < triangles.length; i += 3) {
          var a = triangles[i] * dim;
          var b = triangles[i + 1] * dim;
          var c = triangles[i + 2] * dim;
          trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1])
          );
        }
        return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);
      };
      function signedArea(data, start, end, dim) {
        var sum = 0;
        for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
          j = i;
        }
        return sum;
      }
      earcut2.flatten = function(data) {
        var dim = data[0][0].length, result = { vertices: [], holes: [], dimensions: dim }, holeIndex = 0;
        for (var i = 0; i < data.length; i++) {
          for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++)
              result.vertices.push(data[i][j][d]);
          }
          if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
          }
        }
        return result;
      };
    }
  });

  // node_modules/@sorskoot/wonderland-components/dist/index.js
  var dist_exports = {};
  __export(dist_exports, {
    Easing: () => Easing,
    Flipbook: () => Flipbook,
    ObjectCache: () => ObjectCache,
    Prefab: () => Prefab,
    PrefabStorage: () => PrefabStorage,
    Queue: () => Queue,
    RNG: () => RNG,
    ShootBase: () => ShootBase,
    SnapRotate: () => SnapRotate,
    SnowParticles: () => SnowParticles,
    Tags: () => Tags,
    clamp: () => clamp,
    cloneObject: () => cloneObject,
    lerp: () => lerp6,
    rng: () => rng,
    rngWithWeight: () => rngWithWeight,
    shuffleArray: () => shuffleArray,
    wlUtils: () => wlUtils
  });

  // node_modules/@wonderlandengine/api/dist/property.js
  var Type;
  (function(Type2) {
    Type2[Type2["Native"] = 1] = "Native";
    Type2[Type2["Bool"] = 2] = "Bool";
    Type2[Type2["Int"] = 4] = "Int";
    Type2[Type2["Float"] = 8] = "Float";
    Type2[Type2["String"] = 16] = "String";
    Type2[Type2["Enum"] = 32] = "Enum";
    Type2[Type2["Object"] = 64] = "Object";
    Type2[Type2["Mesh"] = 128] = "Mesh";
    Type2[Type2["Texture"] = 256] = "Texture";
    Type2[Type2["Material"] = 512] = "Material";
    Type2[Type2["Animation"] = 1024] = "Animation";
    Type2[Type2["Skin"] = 2048] = "Skin";
    Type2[Type2["Color"] = 4096] = "Color";
  })(Type || (Type = {}));
  var Property = {
    /**
     * Create an boolean property.
     *
     * @param defaultValue The default value. If not provided, defaults to `false`.
     */
    bool(defaultValue = false) {
      return { type: Type.Bool, default: defaultValue };
    },
    /**
     * Create an integer property.
     *
     * @param defaultValue The default value. If not provided, defaults to `0`.
     */
    int(defaultValue = 0) {
      return { type: Type.Int, default: defaultValue };
    },
    /**
     * Create an float property.
     *
     * @param defaultValue The default value. If not provided, defaults to `0.0`.
     */
    float(defaultValue = 0) {
      return { type: Type.Float, default: defaultValue };
    },
    /**
     * Create an string property.
     *
     * @param defaultValue The default value. If not provided, defaults to `''`.
     */
    string(defaultValue = "") {
      return { type: Type.String, default: defaultValue };
    },
    /**
     * Create an enumeration property.
     *
     * @param values The list of values.
     * @param defaultValue The default value. Can be a string or an index into
     *     `values`. If not provided, defaults to the first element.
     */
    enum(values, defaultValue) {
      return { type: Type.Enum, values, default: defaultValue };
    },
    /** Create an {@link Object3D} reference property. */
    object() {
      return { type: Type.Object, default: null };
    },
    /** Create a {@link Mesh} reference property. */
    mesh() {
      return { type: Type.Mesh, default: null };
    },
    /** Create a {@link Texture} reference property. */
    texture() {
      return { type: Type.Texture, default: null };
    },
    /** Create a {@link Material} reference property. */
    material() {
      return { type: Type.Material, default: null };
    },
    /** Create an {@link Animation} reference property. */
    animation() {
      return { type: Type.Animation, default: null };
    },
    /** Create a {@link Skin} reference property. */
    skin() {
      return { type: Type.Skin, default: null };
    },
    /**
     * Create a color property.
     *
     * @param r The red component, in the range [0; 1].
     * @param g The green component, in the range [0; 1].
     * @param b The blue component, in the range [0; 1].
     * @param a The alpha component, in the range [0; 1].
     */
    color(r = 0, g = 0, b = 0, a = 1) {
      return { type: Type.Color, default: [r, g, b, a] };
    }
  };

  // node_modules/@wonderlandengine/api/dist/decorators.js
  function propertyDecorator(data) {
    return function(target, propertyKey) {
      const ctor = target.constructor;
      ctor.Properties = ctor.Properties ?? {};
      ctor.Properties[propertyKey] = data;
    };
  }
  function enumerable() {
    return function(_, __, descriptor) {
      descriptor.enumerable = true;
    };
  }
  function nativeProperty() {
    return function(target, propertyKey, descriptor) {
      enumerable()(target, propertyKey, descriptor);
      propertyDecorator({ type: Type.Native })(target, propertyKey);
    };
  }
  var property = {};
  for (const name in Property) {
    property[name] = (...args) => {
      const functor = Property[name];
      return propertyDecorator(functor(...args));
    };
  }

  // node_modules/@wonderlandengine/api/dist/utils/object.js
  function isNumber(value) {
    if (value === null || value === void 0)
      return false;
    return typeof value === "number" || value.constructor === Number;
  }

  // node_modules/@wonderlandengine/api/dist/utils/event.js
  var Emitter = class {
    /**
     * List of listeners to trigger when `notify` is called.
     *
     * @hidden
     */
    _listeners = [];
    /**
     * Register a new listener to be triggered on {@link Emitter.notify}.
     *
     * Basic usage:
     *
     * ```js
     * emitter.add((data) => {
     *     console.log('event received!');
     *     console.log(data);
     * });
     * ```
     *
     * Automatically remove the listener when an event is received:
     *
     * ```js
     * emitter.add((data) => {
     *     console.log('event received!');
     *     console.log(data);
     * }, {once: true});
     * ```
     *
     * @param listener The callback to register.
     * @param opts The listener options. For more information, please have a look
     *     at the {@link ListenerOptions} interface.
     *
     * @returns Reference to self (for method chaining)
     */
    add(listener, opts = {}) {
      const { once = false, id = void 0 } = opts;
      this._listeners.push({ id, once, callback: listener });
      return this;
    }
    /**
     * Equivalent to {@link Emitter.add}.
     *
     * @param listeners The callback(s) to register.
     * @returns Reference to self (for method chaining).
     *
     * @deprecated Please use {@link Emitter.add} instead.
     */
    push(...listeners) {
      for (const cb of listeners)
        this.add(cb);
      return this;
    }
    /**
     * Register a new listener to be triggered on {@link Emitter.notify}.
     *
     * Once notified, the listener will be automatically removed.
     *
     * The method is equivalent to calling {@link Emitter.add} with:
     *
     * ```js
     * emitter.add(listener, {once: true});
     * ```
     *
     * @param listener The callback to register.
     *
     * @returns Reference to self (for method chaining).
     */
    once(listener) {
      return this.add(listener, { once: true });
    }
    /**
     * Remove a registered listener.
     *
     * Usage with a callback:
     *
     * ```js
     * const listener = (data) => console.log(data);
     * emitter.add(listener);
     *
     * // Remove using the callback reference:
     * emitter.remove(listener);
     * ```
     *
     * Usage with an id:
     *
     * ```js
     * emitter.add((data) => console.log(data), {id: 'my-callback'});
     *
     * // Remove using the id:
     * emitter.remove('my-callback');
     * ```
     *
     * Using identifiers, you will need to ensure your value is unique to avoid
     * removing listeners from other libraries, e.g.,:
     *
     * ```js
     * emitter.add((data) => console.log(data), {id: 'non-unique'});
     * // This second listener could be added by a third-party library.
     * emitter.add((data) => console.log('Hello From Library!'), {id: 'non-unique'});
     *
     * // Ho Snap! This also removed the library listener!
     * emitter.remove('non-unique');
     * ```
     *
     * The identifier can be any type. However, remember that the comparison will be
     * by-value for primitive types (string, number), but by reference for objects.
     *
     * Example:
     *
     * ```js
     * emitter.add(() => console.log('Hello'), {id: {value: 42}});
     * emitter.add(() => console.log('World!'), {id: {value: 42}});
     * emitter.remove({value: 42}); // None of the above listeners match!
     * emitter.notify(); // Prints 'Hello' and 'World!'.
     * ```
     *
     * Here, both emitters have id `{value: 42}`, but the comparison is made by reference. Thus,
     * the `remove()` call has no effect. We can make it work by doing:
     *
     * ```js
     * const id = {value: 42};
     * emitter.add(() => console.log('Hello'), {id});
     * emitter.add(() => console.log('World!'), {id});
     * emitter.remove(id); // Same reference, it works!
     * emitter.notify(); // Doesn't print.
     * ```
     *
     * @param listener The registered callback or a value representing the `id`.
     *
     * @returns Reference to self (for method chaining)
     */
    remove(listener) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const target = listeners[i];
        if (target.callback === listener || target.id === listener) {
          listeners.splice(i--, 1);
        }
      }
      return this;
    }
    /**
     * Check whether the listener is registered.
     *
     * @note This method performs a linear search.
     *
     * @param listener The registered callback or a value representing the `id`.
     * @returns `true` if the handle is found, `false` otherwise.
     */
    has(listener) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const target = listeners[i];
        if (target.callback === listener || target.id === listener)
          return true;
      }
      return false;
    }
    /**
     * Notify listeners with the given data object.
     *
     * @note This method ensures all listeners are called even if
     * an exception is thrown. For (possibly) faster notification,
     * please use {@link Emitter.notifyUnsafe}.
     *
     * @param data The data to pass to listener when invoked.
     */
    notify(...data) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const listener = listeners[i];
        if (listener.once)
          listeners.splice(i--, 1);
        try {
          listener.callback(...data);
        } catch (e) {
          console.error(e);
        }
      }
    }
    /**
     * Notify listeners with the given data object.
     *
     * @note Because this method doesn't catch exceptions, some listeners
     * will be skipped on a throw. Please use {@link Emitter.notify} for safe
     * notification.
     *
     * @param data The data to pass to listener when invoked.
     */
    notifyUnsafe(...data) {
      const listeners = this._listeners;
      for (let i = 0; i < listeners.length; ++i) {
        const listener = listeners[i];
        if (listener.once)
          listeners.splice(i--, 1);
        listener.callback(...data);
      }
    }
    /**
     * Return a promise that will resolve on the next event.
     *
     * @note The promise might never resolve if no event is sent.
     *
     * @returns A promise that resolves with the data passed to
     *     {@link Emitter.notify}.
     */
    promise() {
      return new Promise((res, _) => {
        this.once((...args) => {
          if (args.length > 1) {
            res(args);
          } else {
            res(args[0]);
          }
        });
      });
    }
    /** Number of listeners. */
    get listenerCount() {
      return this._listeners.length;
    }
    /** `true` if it has no listeners, `false` otherwise. */
    get isEmpty() {
      return this.listenerCount === 0;
    }
  };

  // node_modules/@wonderlandengine/api/dist/wonderland.js
  var __decorate = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var Collider;
  (function(Collider2) {
    Collider2[Collider2["Sphere"] = 0] = "Sphere";
    Collider2[Collider2["AxisAlignedBox"] = 1] = "AxisAlignedBox";
    Collider2[Collider2["Box"] = 2] = "Box";
  })(Collider || (Collider = {}));
  var Alignment;
  (function(Alignment2) {
    Alignment2[Alignment2["Left"] = 0] = "Left";
    Alignment2[Alignment2["Center"] = 1] = "Center";
    Alignment2[Alignment2["Right"] = 2] = "Right";
  })(Alignment || (Alignment = {}));
  var Justification;
  (function(Justification2) {
    Justification2[Justification2["Line"] = 0] = "Line";
    Justification2[Justification2["Middle"] = 1] = "Middle";
    Justification2[Justification2["Top"] = 2] = "Top";
    Justification2[Justification2["Bottom"] = 3] = "Bottom";
  })(Justification || (Justification = {}));
  var TextEffect;
  (function(TextEffect2) {
    TextEffect2[TextEffect2["None"] = 0] = "None";
    TextEffect2[TextEffect2["Outline"] = 1] = "Outline";
  })(TextEffect || (TextEffect = {}));
  var InputType;
  (function(InputType2) {
    InputType2[InputType2["Head"] = 0] = "Head";
    InputType2[InputType2["EyeLeft"] = 1] = "EyeLeft";
    InputType2[InputType2["EyeRight"] = 2] = "EyeRight";
    InputType2[InputType2["ControllerLeft"] = 3] = "ControllerLeft";
    InputType2[InputType2["ControllerRight"] = 4] = "ControllerRight";
    InputType2[InputType2["RayLeft"] = 5] = "RayLeft";
    InputType2[InputType2["RayRight"] = 6] = "RayRight";
  })(InputType || (InputType = {}));
  var LightType;
  (function(LightType2) {
    LightType2[LightType2["Point"] = 0] = "Point";
    LightType2[LightType2["Spot"] = 1] = "Spot";
    LightType2[LightType2["Sun"] = 2] = "Sun";
  })(LightType || (LightType = {}));
  var AnimationState;
  (function(AnimationState2) {
    AnimationState2[AnimationState2["Playing"] = 0] = "Playing";
    AnimationState2[AnimationState2["Paused"] = 1] = "Paused";
    AnimationState2[AnimationState2["Stopped"] = 2] = "Stopped";
  })(AnimationState || (AnimationState = {}));
  var ForceMode;
  (function(ForceMode2) {
    ForceMode2[ForceMode2["Force"] = 0] = "Force";
    ForceMode2[ForceMode2["Impulse"] = 1] = "Impulse";
    ForceMode2[ForceMode2["VelocityChange"] = 2] = "VelocityChange";
    ForceMode2[ForceMode2["Acceleration"] = 3] = "Acceleration";
  })(ForceMode || (ForceMode = {}));
  var CollisionEventType;
  (function(CollisionEventType2) {
    CollisionEventType2[CollisionEventType2["Touch"] = 0] = "Touch";
    CollisionEventType2[CollisionEventType2["TouchLost"] = 1] = "TouchLost";
    CollisionEventType2[CollisionEventType2["TriggerTouch"] = 2] = "TriggerTouch";
    CollisionEventType2[CollisionEventType2["TriggerTouchLost"] = 3] = "TriggerTouchLost";
  })(CollisionEventType || (CollisionEventType = {}));
  var Shape;
  (function(Shape2) {
    Shape2[Shape2["None"] = 0] = "None";
    Shape2[Shape2["Sphere"] = 1] = "Sphere";
    Shape2[Shape2["Capsule"] = 2] = "Capsule";
    Shape2[Shape2["Box"] = 3] = "Box";
    Shape2[Shape2["Plane"] = 4] = "Plane";
    Shape2[Shape2["ConvexMesh"] = 5] = "ConvexMesh";
    Shape2[Shape2["TriangleMesh"] = 6] = "TriangleMesh";
  })(Shape || (Shape = {}));
  var MeshAttribute;
  (function(MeshAttribute2) {
    MeshAttribute2[MeshAttribute2["Position"] = 0] = "Position";
    MeshAttribute2[MeshAttribute2["Tangent"] = 1] = "Tangent";
    MeshAttribute2[MeshAttribute2["Normal"] = 2] = "Normal";
    MeshAttribute2[MeshAttribute2["TextureCoordinate"] = 3] = "TextureCoordinate";
    MeshAttribute2[MeshAttribute2["Color"] = 4] = "Color";
    MeshAttribute2[MeshAttribute2["JointId"] = 5] = "JointId";
    MeshAttribute2[MeshAttribute2["JointWeight"] = 6] = "JointWeight";
  })(MeshAttribute || (MeshAttribute = {}));
  var MaterialParamType;
  (function(MaterialParamType2) {
    MaterialParamType2[MaterialParamType2["UnsignedInt"] = 0] = "UnsignedInt";
    MaterialParamType2[MaterialParamType2["Int"] = 1] = "Int";
    MaterialParamType2[MaterialParamType2["Float"] = 2] = "Float";
    MaterialParamType2[MaterialParamType2["Sampler"] = 3] = "Sampler";
    MaterialParamType2[MaterialParamType2["Font"] = 4] = "Font";
  })(MaterialParamType || (MaterialParamType = {}));
  function isMeshShape(shape) {
    return shape === Shape.ConvexMesh || shape === Shape.TriangleMesh;
  }
  var Component = class {
    /** Manager index. @hidden */
    _manager;
    /** Instance index. @hidden */
    _id;
    /**
     * Object containing this object.
     *
     * **Note**: This is cached for faster retrieval.
     *
     * @hidden
     */
    _object;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * Create a new instance
     *
     * @param engine The engine instance.
     * @param manager Index of the manager.
     * @param id WASM component instance index.
     *
     * @hidden
     */
    constructor(engine, manager = -1, id = -1) {
      this._engine = engine;
      this._manager = manager;
      this._id = id;
      this._object = null;
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /** The name of this component's type */
    get type() {
      const ctor = this.constructor;
      return ctor.TypeName ?? this._engine.wasm._typeNameFor(this._manager);
    }
    /** The object this component is attached to. */
    get object() {
      if (!this._object) {
        const objectId = this._engine.wasm._wl_component_get_object(this._manager, this._id);
        this._object = this._engine.wrapObject(objectId);
      }
      return this._object;
    }
    /**
     * Set whether this component is active.
     *
     * Activating/deactivating a component comes at a small cost of reordering
     * components in the respective component manager. This function therefore
     * is not a trivial assignment.
     *
     * Does nothing if the component is already activated/deactivated.
     *
     * @param active New active state.
     */
    set active(active) {
      this._engine.wasm._wl_component_setActive(this._manager, this._id, active);
    }
    /**
     * Whether this component is active
     */
    get active() {
      return this._engine.wasm._wl_component_isActive(this._manager, this._id) != 0;
    }
    /**
     * Remove this component from its objects and destroy it.
     *
     * It is best practice to set the component to `null` after,
     * to ensure it does not get used later.
     *
     * ```js
     *    c.destroy();
     *    c = null;
     * ```
     * @since 0.9.0
     */
    destroy() {
      this._engine.wasm._wl_component_remove(this._manager, this._id);
      this._manager = -1;
      this._id = -1;
    }
    /**
     * Checks equality by comparing whether the wrapped native component ids
     * and component manager types are equal.
     *
     * @param otherComponent Component to check equality with.
     * @returns Whether this component equals the given component.
     */
    equals(otherComponent) {
      if (!otherComponent)
        return false;
      return this._manager == otherComponent._manager && this._id == otherComponent._id;
    }
    /**
     * Reset the component properties to default.
     *
     * @returns Reference to self (for method chaining).
     */
    reset() {
      const ctor = this.constructor;
      const properties = ctor.Properties;
      for (const name in properties) {
        this[name] = properties[name].default;
      }
      return this;
    }
    /**
     * Trigger the component {@link Component.init} method.
     *
     * @note Use this method instead of directly calling {@link Component.init},
     * because this method creates an handler for the {@link Component.start}.
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _triggerInit() {
      if (this.init) {
        try {
          this.init();
        } catch (e) {
          console.error(`Exception during ${this.type} init() on object ${this.object.name}`);
          console.error(e);
        }
      }
      if (!this.start)
        return;
      const oldActivate = this.onActivate;
      this.onActivate = function() {
        try {
          this.start?.();
        } catch (e) {
          console.error(`Exception during ${this.type} start() on object ${this.object.name}`);
          console.error(e);
        }
        this.onActivate = oldActivate;
        if (!this.onActivate)
          return;
        try {
          this.onActivate();
        } catch (e) {
          console.error(`Exception during ${this.type} onActivate() on object ${this.object.name}`);
          console.error(e);
        }
      };
    }
    /**
     * Trigger the component {@link Component.update} method.
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _triggerUpdate(dt) {
      if (!this.update)
        return;
      try {
        this.update(dt);
      } catch (e) {
        console.error(`Exception during ${this.type} update() on object ${this.object.name}`);
        console.error(e);
        if (this._engine.wasm._deactivate_component_on_error) {
          this.active = false;
        }
      }
    }
    /**
     * Trigger the component {@link Component.onActivate} method.
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _triggerOnActivate() {
      if (!this.onActivate)
        return;
      try {
        this.onActivate();
      } catch (e) {
        console.error(`Exception during ${this.type} onActivate() on object ${this.object.name}`);
        console.error(e);
      }
    }
    /**
     * Trigger the component {@link Component.onDeactivate} method.
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _triggerOnDeactivate() {
      if (!this.onDeactivate)
        return;
      try {
        this.onDeactivate();
      } catch (e) {
        console.error(`Exception during ${this.type} onDeactivate() on object ${this.object.name}`);
        console.error(e);
      }
    }
    /**
     * Trigger the component {@link Component.onDestroy} method.
     *
     * @note This api is meant to be used internally.
     *
     * @hidden
     */
    _triggerOnDestroy() {
      if (!this.onDestroy)
        return;
      try {
        this.onDestroy();
      } catch (e) {
        console.error(`Exception during ${this.type} onDestroy() on object ${this.object.name}`);
        console.error(e);
      }
    }
  };
  /**
   * Unique identifier for this component class.
   *
   * This is used to register, add, and retrieve components of a given type.
   */
  __publicField(Component, "TypeName");
  /**
   * Properties of this component class.
   *
   * Properties are public attributes that can be configured via the
   * Wonderland Editor.
   *
   * Example:
   *
   * ```js
   * import { Component, Type } from '@wonderlandengine/api';
   * class MyComponent extends Component {
   *     static TypeName = 'my-component';
   *     static Properties = {
   *         myBoolean: { type: Type.Boolean, default: false },
   *         myFloat: { type: Type.Float, default: false },
   *         myTexture: { type: Type.Texture, default: null },
   *     };
   * }
   * ```
   *
   * Properties are automatically added to each component instance, and are
   * accessible like any JS attribute:
   *
   * ```js
   * // Creates a new component and set each properties value:
   * const myComponent = object.addComponent(MyComponent, {
   *     myBoolean: true,
   *     myFloat: 42.0,
   *     myTexture: null
   * });
   *
   * // You can also override the properties on the instance:
   * myComponent.myBoolean = false;
   * myComponent.myFloat = -42.0;
   * ```
   */
  __publicField(Component, "Properties");
  /**
   * This was never released in an official version, we are keeping it
   * to easy transition to the new API.
   *
   * @deprecated Use {@link Component.onRegister} instead.
   * @hidden
   */
  __publicField(Component, "Dependencies");
  /**
   * Called when this component class is registered.
   *
   * @example
   *
   * This callback can be used to register dependencies of a component,
   * e.g., component classes that need to be registered in order to add
   * them at runtime with {@link Object3D.addComponent}, independent of whether
   * they are used in the editor.
   *
   * ```js
   * class Spawner extends Component {
   *     static TypeName = 'spawner';
   *
   *     static onRegister(engine) {
   *         engine.registerComponent(SpawnedComponent);
   *     }
   *
   *     // You can now use addComponent with SpawnedComponent
   * }
   * ```
   *
   * @example
   *
   * This callback can be used to register different implementations of a
   * component depending on client features or API versions.
   *
   * ```js
   * // Properties need to be the same for all implementations!
   * const SharedProperties = {};
   *
   * class Anchor extends Component {
   *     static TypeName = 'spawner';
   *     static Properties = SharedProperties;
   *
   *     static onRegister(engine) {
   *         if(navigator.xr === undefined) {
   *             /* WebXR unsupported, keep this dummy component *\/
   *             return;
   *         }
   *         /* WebXR supported! Override already registered dummy implementation
   *          * with one depending on hit-test API support *\/
   *         engine.registerComponent(window.HitTestSource === undefined ?
   *             AnchorWithoutHitTest : AnchorWithHitTest);
   *     }
   *
   *     // This one implements no functions
   * }
   * ```
   */
  __publicField(Component, "onRegister");
  var _CollisionComponent = class extends Component {
    /** Collision component collider */
    get collider() {
      return this._engine.wasm._wl_collision_component_get_collider(this._id);
    }
    /**
     * Set collision component collider.
     *
     * @param collider Collider of the collision component.
     */
    set collider(collider) {
      this._engine.wasm._wl_collision_component_set_collider(this._id, collider);
    }
    /**
     * Collision component extents.
     *
     * If {@link collider} returns {@link Collider.Sphere}, only the first
     * component of the returned vector is used.
     */
    get extents() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_collision_component_get_extents(this._id), 3);
    }
    /**
     * Set collision component extents.
     *
     * If {@link collider} returns {@link Collider.Sphere}, only the first
     * component of the passed vector is used.
     *
     * Example:
     *
     * ```js
     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.
     * collision.extent = [1, 2, 3];
     * ```
     *
     * @param extents Extents of the collision component, expects a
     *      3 component array.
     */
    set extents(extents) {
      this.extents.set(extents);
    }
    /**
     * Collision component group.
     *
     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}
     * or the group in {@link Scene#rayCast}.
     *
     * Colliders that have no common groups will not overlap with each other. If a collider
     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.
     *
     * Each bit represents belonging to a group, see example.
     *
     * ```js
     *    // c belongs to group 2
     *    c.group = (1 << 2);
     *
     *    // c belongs to group 0
     *    c.group = (1 << 0);
     *
     *    // c belongs to group 0 *and* 2
     *    c.group = (1 << 0) | (1 << 2);
     *
     *    (c.group & (1 << 2)) != 0; // true
     *    (c.group & (1 << 7)) != 0; // false
     * ```
     */
    get group() {
      return this._engine.wasm._wl_collision_component_get_group(this._id);
    }
    /**
     * Set collision component group.
     *
     * @param group Group mask of the collision component.
     */
    set group(group) {
      this._engine.wasm._wl_collision_component_set_group(this._id, group);
    }
    /**
     * Query overlapping objects.
     *
     * Usage:
     *
     * ```js
     * const collision = object.getComponent('collision');
     * const overlaps = collision.queryOverlaps();
     * for(const otherCollision of overlaps) {
     *     const otherObject = otherCollision.object;
     *     console.log(`Collision with object ${otherObject.objectId}`);
     * }
     * ```
     *
     * @returns Collision components overlapping this collider.
     */
    queryOverlaps() {
      const count = this._engine.wasm._wl_collision_component_query_overlaps(this._id, this._engine.wasm._tempMem, this._engine.wasm._tempMemSize >> 1);
      const overlaps = new Array(count);
      for (let i = 0; i < count; ++i) {
        overlaps[i] = new _CollisionComponent(this._engine, this._manager, this._engine.wasm._tempMemUint16[i]);
      }
      return overlaps;
    }
  };
  var CollisionComponent = _CollisionComponent;
  /** @override */
  __publicField(CollisionComponent, "TypeName", "collision");
  __decorate([
    nativeProperty()
  ], CollisionComponent.prototype, "collider", null);
  __decorate([
    nativeProperty()
  ], CollisionComponent.prototype, "extents", null);
  __decorate([
    nativeProperty()
  ], CollisionComponent.prototype, "group", null);
  var TextComponent = class extends Component {
    /** Text component alignment. */
    get alignment() {
      return this._engine.wasm._wl_text_component_get_horizontal_alignment(this._id);
    }
    /**
     * Set text component alignment.
     *
     * @param alignment Alignment for the text component.
     */
    set alignment(alignment) {
      this._engine.wasm._wl_text_component_set_horizontal_alignment(this._id, alignment);
    }
    /** Text component justification. */
    get justification() {
      return this._engine.wasm._wl_text_component_get_vertical_alignment(this._id);
    }
    /**
     * Set text component justification.
     *
     * @param justification Justification for the text component.
     */
    set justification(justification) {
      this._engine.wasm._wl_text_component_set_vertical_alignment(this._id, justification);
    }
    /** Text component character spacing. */
    get characterSpacing() {
      return this._engine.wasm._wl_text_component_get_character_spacing(this._id);
    }
    /**
     * Set text component character spacing.
     *
     * @param spacing Character spacing for the text component.
     */
    set characterSpacing(spacing) {
      this._engine.wasm._wl_text_component_set_character_spacing(this._id, spacing);
    }
    /** Text component line spacing. */
    get lineSpacing() {
      return this._engine.wasm._wl_text_component_get_line_spacing(this._id);
    }
    /**
     * Set text component line spacing
     *
     * @param spacing Line spacing for the text component
     */
    set lineSpacing(spacing) {
      this._engine.wasm._wl_text_component_set_line_spacing(this._id, spacing);
    }
    /** Text component effect. */
    get effect() {
      return this._engine.wasm._wl_text_component_get_effect(this._id);
    }
    /**
     * Set text component effect
     *
     * @param effect Effect for the text component
     */
    set effect(effect) {
      this._engine.wasm._wl_text_component_set_effect(this._id, effect);
    }
    /** Text component text. */
    get text() {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_text_component_get_text(this._id);
      return wasm.UTF8ToString(ptr);
    }
    /**
     * Set text component text.
     *
     * @param text Text of the text component.
     */
    set text(text) {
      const wasm = this._engine.wasm;
      wasm._wl_text_component_set_text(this._id, wasm.tempUTF8(text.toString()));
    }
    /**
     * Set material to render the text with.
     *
     * @param material New material.
     */
    set material(material) {
      const matIndex = material ? material._index : 0;
      this._engine.wasm._wl_text_component_set_material(this._id, matIndex);
    }
    /** Material used to render the text. */
    get material() {
      const id = this._engine.wasm._wl_text_component_get_material(this._id);
      return id > 0 ? new Material(this._engine, id) : null;
    }
  };
  /** @override */
  __publicField(TextComponent, "TypeName", "text");
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "alignment", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "justification", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "characterSpacing", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "lineSpacing", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "effect", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "text", null);
  __decorate([
    nativeProperty()
  ], TextComponent.prototype, "material", null);
  var ViewComponent = class extends Component {
    /** Projection matrix. */
    get projectionMatrix() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_view_component_get_projection_matrix(this._id), 16);
    }
    /** ViewComponent near clipping plane value. */
    get near() {
      return this._engine.wasm._wl_view_component_get_near(this._id);
    }
    /**
     * Set near clipping plane distance for the view.
     *
     * If an XR session is active, the change will apply in the
     * following frame, otherwise the change is immediate.
     *
     * @param near Near depth value.
     */
    set near(near) {
      this._engine.wasm._wl_view_component_set_near(this._id, near);
    }
    /** Far clipping plane value. */
    get far() {
      return this._engine.wasm._wl_view_component_get_far(this._id);
    }
    /**
     * Set far clipping plane distance for the view.
     *
     * If an XR session is active, the change will apply in the
     * following frame, otherwise the change is immediate.
     *
     * @param far Near depth value.
     */
    set far(far) {
      this._engine.wasm._wl_view_component_set_far(this._id, far);
    }
    /**
     * Get the horizontal field of view for the view, **in degrees**.
     *
     * If an XR session is active, this returns the field of view reported by
     * the device, regardless of the fov that was set.
     */
    get fov() {
      return this._engine.wasm._wl_view_component_get_fov(this._id);
    }
    /**
     * Set the horizontal field of view for the view, **in degrees**.
     *
     * If an XR session is active, the field of view reported by the device is
     * used and this value is ignored. After the XR session ends, the new value
     * is applied.
     *
     * @param fov Horizontal field of view, **in degrees**.
     */
    set fov(fov) {
      this._engine.wasm._wl_view_component_set_fov(this._id, fov);
    }
  };
  /** @override */
  __publicField(ViewComponent, "TypeName", "view");
  __decorate([
    enumerable()
  ], ViewComponent.prototype, "projectionMatrix", null);
  __decorate([
    nativeProperty()
  ], ViewComponent.prototype, "near", null);
  __decorate([
    nativeProperty()
  ], ViewComponent.prototype, "far", null);
  __decorate([
    nativeProperty()
  ], ViewComponent.prototype, "fov", null);
  var InputComponent = class extends Component {
    /** Input component type */
    get inputType() {
      return this._engine.wasm._wl_input_component_get_type(this._id);
    }
    /**
     * Set input component type.
     *
     * @params New input component type.
     */
    set inputType(type) {
      this._engine.wasm._wl_input_component_set_type(this._id, type);
    }
    /**
     * WebXR Device API input source associated with this input component,
     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.
     */
    get xrInputSource() {
      const xrSession = this._engine.xrSession;
      if (xrSession) {
        for (let inputSource of xrSession.inputSources) {
          if (inputSource.handedness == this.handedness) {
            return inputSource;
          }
        }
      }
      return null;
    }
    /**
     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.
     */
    get handedness() {
      const inputType = this.inputType;
      if (inputType == InputType.ControllerRight || inputType == InputType.RayRight || inputType == InputType.EyeRight)
        return "right";
      if (inputType == InputType.ControllerLeft || inputType == InputType.RayLeft || inputType == InputType.EyeLeft)
        return "left";
      return null;
    }
  };
  /** @override */
  __publicField(InputComponent, "TypeName", "input");
  __decorate([
    nativeProperty()
  ], InputComponent.prototype, "inputType", null);
  __decorate([
    enumerable()
  ], InputComponent.prototype, "xrInputSource", null);
  __decorate([
    enumerable()
  ], InputComponent.prototype, "handedness", null);
  var LightComponent = class extends Component {
    getColor(out = new Float32Array(3)) {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_light_component_get_color(this._id) / 4;
      out[0] = wasm.HEAPF32[ptr];
      out[1] = wasm.HEAPF32[ptr + 1];
      out[2] = wasm.HEAPF32[ptr + 2];
      return out;
    }
    /**
     * Set light color.
     *
     * @param c New color array/vector, expected to have at least 3 elements.
     * @since 1.0.0
     */
    setColor(c) {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_light_component_get_color(this._id) / 4;
      wasm.HEAPF32[ptr] = c[0];
      wasm.HEAPF32[ptr + 1] = c[1];
      wasm.HEAPF32[ptr + 2] = c[2];
    }
    /**
     * View on the light color.
     *
     * @note Prefer to use {@link getColor} in performance-critical code.
     */
    get color() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_light_component_get_color(this._id), 3);
    }
    /**
     * Set light color.
     *
     * @param c Color of the light component.
     *
     * @note Prefer to use {@link setColor} in performance-critical code.
     */
    set color(c) {
      this.color.set(c);
    }
    /** Light type. */
    get lightType() {
      return this._engine.wasm._wl_light_component_get_type(this._id);
    }
    /**
     * Set light type.
     *
     * @param lightType Type of the light component.
     */
    set lightType(t) {
      this._engine.wasm._wl_light_component_set_type(this._id, t);
    }
    /**
     * Light intensity.
     * @since 1.0.0
     */
    get intensity() {
      return this._engine.wasm._wl_light_component_get_intensity(this._id);
    }
    /**
     * Set light intensity.
     *
     * @param intensity Intensity of the light component.
     * @since 1.0.0
     */
    set intensity(intensity) {
      this._engine.wasm._wl_light_component_set_intensity(this._id, intensity);
    }
    /**
     * Outer angle for spot lights, in degrees.
     * @since 1.0.0
     */
    get outerAngle() {
      return this._engine.wasm._wl_light_component_get_outerAngle(this._id);
    }
    /**
     * Set outer angle for spot lights.
     *
     * @param angle Outer angle, in degrees.
     * @since 1.0.0
     */
    set outerAngle(angle3) {
      this._engine.wasm._wl_light_component_set_outerAngle(this._id, angle3);
    }
    /**
     * Inner angle for spot lights, in degrees.
     * @since 1.0.0
     */
    get innerAngle() {
      return this._engine.wasm._wl_light_component_get_innerAngle(this._id);
    }
    /**
     * Set inner angle for spot lights.
     *
     * @param angle Inner angle, in degrees.
     * @since 1.0.0
     */
    set innerAngle(angle3) {
      this._engine.wasm._wl_light_component_set_innerAngle(this._id, angle3);
    }
    /**
     * Whether the light casts shadows.
     * @since 1.0.0
     */
    get shadows() {
      return !!this._engine.wasm._wl_light_component_get_shadows(this._id);
    }
    /**
     * Set whether the light casts shadows.
     *
     * @param b Whether the light casts shadows.
     * @since 1.0.0
     */
    set shadows(b) {
      this._engine.wasm._wl_light_component_set_shadows(this._id, b);
    }
    /**
     * Range for shadows.
     * @since 1.0.0
     */
    get shadowRange() {
      return this._engine.wasm._wl_light_component_get_shadowRange(this._id);
    }
    /**
     * Set range for shadows.
     *
     * @param range Range for shadows.
     * @since 1.0.0
     */
    set shadowRange(range) {
      this._engine.wasm._wl_light_component_set_shadowRange(this._id, range);
    }
    /**
     * Bias value for shadows.
     * @since 1.0.0
     */
    get shadowBias() {
      return this._engine.wasm._wl_light_component_get_shadowBias(this._id);
    }
    /**
     * Set bias value for shadows.
     *
     * @param bias Bias for shadows.
     * @since 1.0.0
     */
    set shadowBias(bias) {
      this._engine.wasm._wl_light_component_set_shadowBias(this._id, bias);
    }
    /**
     * Normal bias value for shadows.
     * @since 1.0.0
     */
    get shadowNormalBias() {
      return this._engine.wasm._wl_light_component_get_shadowNormalBias(this._id);
    }
    /**
     * Set normal bias value for shadows.
     *
     * @param bias Normal bias for shadows.
     * @since 1.0.0
     */
    set shadowNormalBias(bias) {
      this._engine.wasm._wl_light_component_set_shadowNormalBias(this._id, bias);
    }
    /**
     * Texel size for shadows.
     * @since 1.0.0
     */
    get shadowTexelSize() {
      return this._engine.wasm._wl_light_component_get_shadowTexelSize(this._id);
    }
    /**
     * Set texel size for shadows.
     *
     * @param size Texel size for shadows.
     * @since 1.0.0
     */
    set shadowTexelSize(size2) {
      this._engine.wasm._wl_light_component_set_shadowTexelSize(this._id, size2);
    }
    /**
     * Cascade count for {@link LightType.Sun} shadows.
     * @since 1.0.0
     */
    get cascadeCount() {
      return this._engine.wasm._wl_light_component_get_cascadeCount(this._id);
    }
    /**
     * Set cascade count for {@link LightType.Sun} shadows.
     *
     * @param count Cascade count.
     * @since 1.0.0
     */
    set cascadeCount(count) {
      this._engine.wasm._wl_light_component_set_cascadeCount(this._id, count);
    }
  };
  /** @override */
  __publicField(LightComponent, "TypeName", "light");
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "color", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "lightType", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "intensity", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "outerAngle", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "innerAngle", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadows", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowRange", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowBias", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowNormalBias", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "shadowTexelSize", null);
  __decorate([
    nativeProperty()
  ], LightComponent.prototype, "cascadeCount", null);
  var AnimationComponent = class extends Component {
    /**
     * Set animation to play.
     *
     * Make sure to {@link Animation#retarget} the animation to affect the
     * right objects.
     *
     * @param anim Animation to play.
     */
    set animation(anim) {
      this._engine.wasm._wl_animation_component_set_animation(this._id, anim ? anim._index : 0);
    }
    /** Animation set for this component */
    get animation() {
      const id = this._engine.wasm._wl_animation_component_get_animation(this._id);
      return id > 0 ? new Animation(this._engine, id) : null;
    }
    /**
     * Set play count. Set to `0` to loop indefinitely.
     *
     * @param playCount Number of times to repeat the animation.
     */
    set playCount(playCount) {
      this._engine.wasm._wl_animation_component_set_playCount(this._id, playCount);
    }
    /** Number of times the animation is played. */
    get playCount() {
      return this._engine.wasm._wl_animation_component_get_playCount(this._id);
    }
    /**
     * Set speed. Set to negative values to run the animation backwards.
     *
     * Setting speed has an immediate effect for the current frame's update
     * and will continue with the speed from the current point in the animation.
     *
     * @param speed New speed at which to play the animation.
     * @since 0.8.10
     */
    set speed(speed) {
      this._engine.wasm._wl_animation_component_set_speed(this._id, speed);
    }
    /**
     * Speed factor at which the animation is played.
     *
     * @since 0.8.10
     */
    get speed() {
      return this._engine.wasm._wl_animation_component_get_speed(this._id);
    }
    /** Current playing state of the animation */
    get state() {
      return this._engine.wasm._wl_animation_component_state(this._id);
    }
    /**
     * Play animation.
     *
     * If the animation is currently paused, resumes from that position. If the
     * animation is already playing, does nothing.
     *
     * To restart the animation, {@link AnimationComponent#stop} it first.
     */
    play() {
      this._engine.wasm._wl_animation_component_play(this._id);
    }
    /** Stop animation. */
    stop() {
      this._engine.wasm._wl_animation_component_stop(this._id);
    }
    /** Pause animation. */
    pause() {
      this._engine.wasm._wl_animation_component_pause(this._id);
    }
  };
  /** @override */
  __publicField(AnimationComponent, "TypeName", "animation");
  __decorate([
    nativeProperty()
  ], AnimationComponent.prototype, "animation", null);
  __decorate([
    nativeProperty()
  ], AnimationComponent.prototype, "playCount", null);
  __decorate([
    nativeProperty()
  ], AnimationComponent.prototype, "speed", null);
  __decorate([
    enumerable()
  ], AnimationComponent.prototype, "state", null);
  var MeshComponent = class extends Component {
    /**
     * Set material to render the mesh with.
     *
     * @param material Material to render the mesh with.
     */
    set material(material) {
      this._engine.wasm._wl_mesh_component_set_material(this._id, material ? material._index : 0);
    }
    /** Material used to render the mesh. */
    get material() {
      const id = this._engine.wasm._wl_mesh_component_get_material(this._id);
      return id > 0 ? new Material(this._engine, id) : null;
    }
    /** Mesh rendered by this component. */
    get mesh() {
      const id = this._engine.wasm._wl_mesh_component_get_mesh(this._id);
      return id > 0 ? new Mesh(this._engine, id) : null;
    }
    /**
     * Set mesh to rendered with this component.
     *
     * @param mesh Mesh rendered by this component.
     */
    set mesh(mesh) {
      this._engine.wasm._wl_mesh_component_set_mesh(this._id, mesh ? mesh._index : 0);
    }
    /** Skin for this mesh component. */
    get skin() {
      const id = this._engine.wasm._wl_mesh_component_get_skin(this._id);
      return id > 0 ? new Skin(this._engine, id) : null;
    }
    /**
     * Set skin to transform this mesh component.
     *
     * @param skin Skin to use for rendering skinned meshes.
     */
    set skin(skin) {
      this._engine.wasm._wl_mesh_component_set_skin(this._id, skin ? skin._index : 0);
    }
  };
  /** @override */
  __publicField(MeshComponent, "TypeName", "mesh");
  __decorate([
    nativeProperty()
  ], MeshComponent.prototype, "material", null);
  __decorate([
    nativeProperty()
  ], MeshComponent.prototype, "mesh", null);
  __decorate([
    nativeProperty()
  ], MeshComponent.prototype, "skin", null);
  var LockAxis;
  (function(LockAxis2) {
    LockAxis2[LockAxis2["None"] = 0] = "None";
    LockAxis2[LockAxis2["X"] = 1] = "X";
    LockAxis2[LockAxis2["Y"] = 2] = "Y";
    LockAxis2[LockAxis2["Z"] = 4] = "Z";
  })(LockAxis || (LockAxis = {}));
  var PhysXComponent = class extends Component {
    /**
     * Set whether this rigid body is static.
     *
     * Setting this property only takes effect once the component
     * switches from inactive to active.
     *
     * @param b Whether the rigid body should be static.
     */
    set static(b) {
      this._engine.wasm._wl_physx_component_set_static(this._id, b);
    }
    /**
     * Whether this rigid body is static.
     *
     * This property returns whether the rigid body is *effectively*
     * static. If static property was set while the rigid body was
     * active, it will not take effect until the rigid body is set
     * inactive and active again. Until the component is set inactive,
     * this getter will return whether the rigid body is actually
     * static.
     */
    get static() {
      return !!this._engine.wasm._wl_physx_component_get_static(this._id);
    }
    /**
     * Set whether this rigid body is kinematic.
     *
     * @param b Whether the rigid body should be kinematic.
     */
    set kinematic(b) {
      this._engine.wasm._wl_physx_component_set_kinematic(this._id, b);
    }
    /**
     * Whether this rigid body is kinematic.
     */
    get kinematic() {
      return !!this._engine.wasm._wl_physx_component_get_kinematic(this._id);
    }
    /**
     * Set whether this rigid body's gravity is enabled.
     *
     * @param b Whether the rigid body's gravity should be enabled.
     */
    set gravity(b) {
      this._engine.wasm._wl_physx_component_set_gravity(this._id, b);
    }
    /**
     * Whether this rigid body's gravity flag is enabled.
     */
    get gravity() {
      return !!this._engine.wasm._wl_physx_component_get_gravity(this._id);
    }
    /**
     * Set whether this rigid body's simulate flag is enabled.
     *
     * @param b Whether the rigid body's simulate flag should be enabled.
     */
    set simulate(b) {
      this._engine.wasm._wl_physx_component_set_simulate(this._id, b);
    }
    /**
     * Whether this rigid body's simulate flag is enabled.
     */
    get simulate() {
      return !!this._engine.wasm._wl_physx_component_get_simulate(this._id);
    }
    /**
     * Set whether to allow simulation of this rigid body.
     *
     * {@link allowSimulation} and {@link trigger} can not be enabled at the
     * same time. Enabling {@link allowSimulation} while {@link trigger} is enabled
     * will disable {@link trigger}.
     *
     * @param b Whether to allow simulation of this rigid body.
     */
    set allowSimulation(b) {
      this._engine.wasm._wl_physx_component_set_allowSimulation(this._id, b);
    }
    /**
     * Whether to allow simulation of this rigid body.
     */
    get allowSimulation() {
      return !!this._engine.wasm._wl_physx_component_get_allowSimulation(this._id);
    }
    /**
     * Set whether this rigid body may be queried in ray casts.
     *
     * @param b Whether this rigid body may be queried in ray casts.
     */
    set allowQuery(b) {
      this._engine.wasm._wl_physx_component_set_allowQuery(this._id, b);
    }
    /**
     * Whether this rigid body may be queried in ray casts.
     */
    get allowQuery() {
      return !!this._engine.wasm._wl_physx_component_get_allowQuery(this._id);
    }
    /**
     * Set whether this physics body is a trigger.
     *
     * {@link allowSimulation} and {@link trigger} can not be enabled at the
     * same time. Enabling trigger while {@link allowSimulation} is enabled,
     * will disable {@link allowSimulation}.
     *
     * @param b Whether this physics body is a trigger.
     */
    set trigger(b) {
      this._engine.wasm._wl_physx_component_set_trigger(this._id, b);
    }
    /**
     * Whether this physics body is a trigger.
     */
    get trigger() {
      return !!this._engine.wasm._wl_physx_component_get_trigger(this._id);
    }
    /**
     * Set the shape for collision detection.
     *
     * @param s New shape.
     * @since 0.8.5
     */
    set shape(s) {
      this._engine.wasm._wl_physx_component_set_shape(this._id, s);
    }
    /** The shape for collision detection. */
    get shape() {
      return this._engine.wasm._wl_physx_component_get_shape(this._id);
    }
    /**
     * Set additional data for the shape.
     *
     * Retrieved only from {@link PhysXComponent#shapeData}.
     * @since 0.8.10
     */
    set shapeData(d) {
      if (d == null || !isMeshShape(this.shape))
        return;
      this._engine.wasm._wl_physx_component_set_shape_data(this._id, d.index);
    }
    /**
     * Additional data for the shape.
     *
     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.
     * `{index: n}` for `TriangleMesh` and `ConvexHull`.
     *
     * This data is currently only for passing onto or creating other {@link PhysXComponent}.
     * @since 0.8.10
     */
    get shapeData() {
      if (!isMeshShape(this.shape))
        return null;
      return { index: this._engine.wasm._wl_physx_component_get_shape_data(this._id) };
    }
    /**
     * Set the shape extents for collision detection.
     *
     * @param e New extents for the shape.
     * @since 0.8.5
     */
    set extents(e) {
      this.extents.set(e);
    }
    /**
     * The shape extents for collision detection.
     */
    get extents() {
      const wasm = this._engine.wasm;
      const ptr = wasm._wl_physx_component_get_extents(this._id);
      return new Float32Array(wasm.HEAPF32.buffer, ptr, 3);
    }
    /**
     * Get staticFriction.
     */
    get staticFriction() {
      return this._engine.wasm._wl_physx_component_get_staticFriction(this._id);
    }
    /**
     * Set staticFriction.
     * @param v New staticFriction.
     */
    set staticFriction(v) {
      this._engine.wasm._wl_physx_component_set_staticFriction(this._id, v);
    }
    /**
     * Get dynamicFriction.
     */
    get dynamicFriction() {
      return this._engine.wasm._wl_physx_component_get_dynamicFriction(this._id);
    }
    /**
     * Set dynamicFriction
     * @param v New dynamicDamping.
     */
    set dynamicFriction(v) {
      this._engine.wasm._wl_physx_component_set_dynamicFriction(this._id, v);
    }
    /**
     * Get bounciness.
     * @since 0.9.0
     */
    get bounciness() {
      return this._engine.wasm._wl_physx_component_get_bounciness(this._id);
    }
    /**
     * Set bounciness.
     * @param v New bounciness.
     * @since 0.9.0
     */
    set bounciness(v) {
      this._engine.wasm._wl_physx_component_set_bounciness(this._id, v);
    }
    /**
     * Get linearDamping/
     */
    get linearDamping() {
      return this._engine.wasm._wl_physx_component_get_linearDamping(this._id);
    }
    /**
     * Set linearDamping.
     * @param v New linearDamping.
     */
    set linearDamping(v) {
      this._engine.wasm._wl_physx_component_set_linearDamping(this._id, v);
    }
    /** Get angularDamping. */
    get angularDamping() {
      return this._engine.wasm._wl_physx_component_get_angularDamping(this._id);
    }
    /**
     * Set angularDamping.
     * @param v New angularDamping.
     */
    set angularDamping(v) {
      this._engine.wasm._wl_physx_component_set_angularDamping(this._id, v);
    }
    /**
     * Set linear velocity.
     *
     * [PhysX Manual - "Velocity"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)
     *
     * Has no effect, if the component is not active.
     *
     * @param v New linear velocity.
     */
    set linearVelocity(v) {
      this._engine.wasm._wl_physx_component_set_linearVelocity(this._id, v[0], v[1], v[2]);
    }
    /** Linear velocity or `[0, 0, 0]` if the component is not active. */
    get linearVelocity() {
      const wasm = this._engine.wasm;
      wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem);
      return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);
    }
    /**
     * Set angular velocity
     *
     * [PhysX Manual - "Velocity"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)
     *
     * Has no effect, if the component is not active.
     *
     * @param v New angular velocity
     */
    set angularVelocity(v) {
      this._engine.wasm._wl_physx_component_set_angularVelocity(this._id, v[0], v[1], v[2]);
    }
    /** Angular velocity or `[0, 0, 0]` if the component is not active. */
    get angularVelocity() {
      const wasm = this._engine.wasm;
      wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem);
      return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);
    }
    /**
     * Set the components groups mask.
     *
     * @param flags New flags that need to be set.
     */
    set groupsMask(flags) {
      this._engine.wasm._wl_physx_component_set_groupsMask(this._id, flags);
    }
    /**
     * Get the components groups mask flags.
     *
     * Each bit represents membership to group, see example.
     *
     * ```js
     * // Assign c to group 2
     * c.groupsMask = (1 << 2);
     *
     * // Assign c to group 0
     * c.groupsMask  = (1 << 0);
     *
     * // Assign c to group 0 and 2
     * c.groupsMask = (1 << 0) | (1 << 2);
     *
     * (c.groupsMask & (1 << 2)) != 0; // true
     * (c.groupsMask & (1 << 7)) != 0; // false
     * ```
     */
    get groupsMask() {
      return this._engine.wasm._wl_physx_component_get_groupsMask(this._id);
    }
    /**
     * Set the components blocks mask.
     *
     * @param flags New flags that need to be set.
     */
    set blocksMask(flags) {
      this._engine.wasm._wl_physx_component_set_blocksMask(this._id, flags);
    }
    /**
     * Get the components blocks mask flags.
     *
     * Each bit represents membership to the block, see example.
     *
     * ```js
     * // Block overlap with any objects in group 2
     * c.blocksMask = (1 << 2);
     *
     * // Block overlap with any objects in group 0
     * c.blocksMask  = (1 << 0)
     *
     * // Block overlap with any objects in group 0 and 2
     * c.blocksMask = (1 << 0) | (1 << 2);
     *
     * (c.blocksMask & (1 << 2)) != 0; // true
     * (c.blocksMask & (1 << 7)) != 0; // false
     * ```
     */
    get blocksMask() {
      return this._engine.wasm._wl_physx_component_get_blocksMask(this._id);
    }
    /**
     * Set axes to lock for linear velocity.
     *
     * @param lock The Axis that needs to be set.
     *
     * Combine flags with Bitwise OR.
     * ```js
     * body.linearLockAxis = LockAxis.X | LockAxis.Y; // x and y set
     * body.linearLockAxis = LockAxis.X; // y unset
     * ```
     *
     * @note This has no effect if the component is static.
     */
    set linearLockAxis(lock) {
      this._engine.wasm._wl_physx_component_set_linearLockAxis(this._id, lock);
    }
    /**
     * Get the linear lock axes flags.
     *
     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.
     *
     * ```js
     * if(body.linearLockAxis & LockAxis.Y) {
     *     console.log("The Y flag was set!");
     * }
     * ```
     *
     * @return axes that are currently locked for linear movement.
     */
    get linearLockAxis() {
      return this._engine.wasm._wl_physx_component_get_linearLockAxis(this._id);
    }
    /**
     * Set axes to lock for angular velocity.
     *
     * @param lock The Axis that needs to be set.
     *
     * ```js
     * body.angularLockAxis = LockAxis.X | LockAxis.Y; // x and y set
     * body.angularLockAxis = LockAxis.X; // y unset
     * ```
     *
     * @note This has no effect if the component is static.
     */
    set angularLockAxis(lock) {
      this._engine.wasm._wl_physx_component_set_angularLockAxis(this._id, lock);
    }
    /**
     * Get the angular lock axes flags.
     *
     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.
     *
     * ```js
     * if(body.angularLockAxis & LockAxis.Y) {
     *     console.log("The Y flag was set!");
     * }
     * ```
     *
     * @return axes that are currently locked for angular movement.
     */
    get angularLockAxis() {
      return this._engine.wasm._wl_physx_component_get_angularLockAxis(this._id);
    }
    /**
     * Set mass.
     *
     * [PhysX Manual - "Mass Properties"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)
     *
     * @param m New mass.
     */
    set mass(m) {
      this._engine.wasm._wl_physx_component_set_mass(this._id, m);
    }
    /** Mass */
    get mass() {
      return this._engine.wasm._wl_physx_component_get_mass(this._id);
    }
    /**
     * Set mass space interia tensor.
     *
     * [PhysX Manual - "Mass Properties"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)
     *
     * Has no effect, if the component is not active.
     *
     * @param v New mass space interatia tensor.
     */
    set massSpaceInteriaTensor(v) {
      this._engine.wasm._wl_physx_component_set_massSpaceInertiaTensor(this._id, v[0], v[1], v[2]);
    }
    /**
     * Apply a force.
     *
     * [PhysX Manual - "Applying Forces and Torques"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)
     *
     * Has no effect, if the component is not active.
     *
     * @param f Force vector.
     * @param m Force mode, see {@link ForceMode}, default `Force`.
     * @param localForce Whether the force vector is in local space, default `false`.
     * @param p Position to apply force at, default is center of mass.
     * @param local Whether position is in local space, default `false`.
     */
    addForce(f2, m = ForceMode.Force, localForce = false, p, local = false) {
      const wasm = this._engine.wasm;
      if (!p) {
        wasm._wl_physx_component_addForce(this._id, f2[0], f2[1], f2[2], m, localForce);
        return;
      }
      wasm._wl_physx_component_addForceAt(this._id, f2[0], f2[1], f2[2], m, localForce, p[0], p[1], p[2], local);
    }
    /**
     * Apply torque.
     *
     * [PhysX Manual - "Applying Forces and Torques"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)
     *
     * Has no effect, if the component is not active.
     *
     * @param f Force vector.
     * @param m Force mode, see {@link ForceMode}, default `Force`.
     */
    addTorque(f2, m = ForceMode.Force) {
      this._engine.wasm._wl_physx_component_addTorque(this._id, f2[0], f2[1], f2[2], m);
    }
    /**
     * Add on collision callback.
     *
     * @param callback Function to call when this rigid body (un)collides with any other.
     *
     * ```js
     *  let rigidBody = this.object.getComponent('physx');
     *  rigidBody.onCollision(function(type, other) {
     *      // Ignore uncollides
     *      if(type == CollisionEventType.TouchLost) return;
     *
     *      // Take damage on collision with enemies
     *      if(other.object.name.startsWith('enemy-')) {
     *          this.applyDamage(10);
     *      }
     *  }.bind(this));
     * ```
     *
     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.
     */
    onCollision(callback) {
      return this.onCollisionWith(this, callback);
    }
    /**
     * Add filtered on collision callback.
     *
     * @param otherComp Component for which callbacks will
     *        be triggered. If you pass this component, the method is equivalent to.
     *        {@link PhysXComponent#onCollision}.
     * @param callback Function to call when this rigid body
     *        (un)collides with `otherComp`.
     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.
     */
    onCollisionWith(otherComp, callback) {
      const physics = this._engine.physics;
      physics._callbacks[this._id] = physics._callbacks[this._id] || [];
      physics._callbacks[this._id].push(callback);
      return this._engine.wasm._wl_physx_component_addCallback(this._id, otherComp._id || this._id);
    }
    /**
     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.
     *
     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.
     * @throws When the callback does not belong to the component.
     * @throws When the callback does not exist.
     */
    removeCollisionCallback(callbackId) {
      const physics = this._engine.physics;
      const r = this._engine.wasm._wl_physx_component_removeCallback(this._id, callbackId);
      if (r)
        physics._callbacks[this._id].splice(-r);
    }
  };
  /** @override */
  __publicField(PhysXComponent, "TypeName", "physx");
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "static", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "kinematic", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "gravity", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "simulate", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "allowSimulation", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "allowQuery", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "trigger", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "shape", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "shapeData", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "extents", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "staticFriction", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "dynamicFriction", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "bounciness", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "linearDamping", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "angularDamping", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "linearVelocity", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "angularVelocity", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "groupsMask", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "blocksMask", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "linearLockAxis", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "angularLockAxis", null);
  __decorate([
    nativeProperty()
  ], PhysXComponent.prototype, "mass", null);
  var MeshIndexType;
  (function(MeshIndexType2) {
    MeshIndexType2[MeshIndexType2["UnsignedByte"] = 1] = "UnsignedByte";
    MeshIndexType2[MeshIndexType2["UnsignedShort"] = 2] = "UnsignedShort";
    MeshIndexType2[MeshIndexType2["UnsignedInt"] = 4] = "UnsignedInt";
  })(MeshIndexType || (MeshIndexType = {}));
  var MeshSkinningType;
  (function(MeshSkinningType2) {
    MeshSkinningType2[MeshSkinningType2["None"] = 0] = "None";
    MeshSkinningType2[MeshSkinningType2["FourJoints"] = 1] = "FourJoints";
    MeshSkinningType2[MeshSkinningType2["EightJoints"] = 2] = "EightJoints";
  })(MeshSkinningType || (MeshSkinningType = {}));
  var Mesh = class {
    /**
     * Index of the mesh in the manager.
     *
     * @hidden
     */
    _index = -1;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * Create a new instance.
     *
     * @param params Either a mesh index to wrap or set of parameters to create a new mesh.
     *    For more information, please have a look at the {@link MeshParameters} interface.
     */
    constructor(engine, params) {
      this._engine = engine ?? WL;
      this._index = -1;
      if (isNumber(params)) {
        this._index = params;
        return;
      }
      if (!params.vertexCount)
        throw new Error("Missing parameter 'vertexCount'");
      const wasm = this._engine.wasm;
      let indexData = 0;
      let indexType = 0;
      let indexDataSize = 0;
      if (params.indexData) {
        indexType = params.indexType || MeshIndexType.UnsignedShort;
        indexDataSize = params.indexData.length * indexType;
        indexData = wasm._malloc(indexDataSize);
        switch (indexType) {
          case MeshIndexType.UnsignedByte:
            wasm.HEAPU8.set(params.indexData, indexData);
            break;
          case MeshIndexType.UnsignedShort:
            wasm.HEAPU16.set(params.indexData, indexData >> 1);
            break;
          case MeshIndexType.UnsignedInt:
            wasm.HEAPU32.set(params.indexData, indexData >> 2);
            break;
        }
      }
      const { skinningType = MeshSkinningType.None } = params;
      this._index = wasm._wl_mesh_create(indexData, indexDataSize, indexType, params.vertexCount, skinningType);
    }
    /** Number of vertices in this mesh. */
    get vertexCount() {
      return this._engine.wasm._wl_mesh_get_vertexCount(this._index);
    }
    /** Index data (read-only) or `null` if the mesh is not indexed. */
    get indexData() {
      const wasm = this._engine.wasm;
      const tempMem = wasm._tempMem;
      const ptr = wasm._wl_mesh_get_indexData(this._index, tempMem, tempMem + 4);
      if (ptr === null)
        return null;
      const indexCount = wasm.HEAPU32[tempMem / 4];
      const indexSize = wasm.HEAPU32[tempMem / 4 + 1];
      switch (indexSize) {
        case MeshIndexType.UnsignedByte:
          return new Uint8Array(wasm.HEAPU8.buffer, ptr, indexCount);
        case MeshIndexType.UnsignedShort:
          return new Uint16Array(wasm.HEAPU16.buffer, ptr, indexCount);
        case MeshIndexType.UnsignedInt:
          return new Uint32Array(wasm.HEAPU32.buffer, ptr, indexCount);
      }
      return null;
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /**
     * Apply changes to {@link attribute | vertex attributes}.
     *
     * Uploads the updated vertex attributes to the GPU and updates the bounding
     * sphere to match the new vertex positions.
     *
     * Since this is an expensive operation, call it only once you have performed
     * all modifications on a mesh and avoid calling if you did not perform any
     * modifications at all.
     */
    update() {
      this._engine.wasm._wl_mesh_update(this._index);
    }
    getBoundingSphere(out = new Float32Array(4)) {
      const tempMemFloat = this._engine.wasm._tempMemFloat;
      this._engine.wasm._wl_mesh_get_boundingSphere(this._index, this._engine.wasm._tempMem);
      out[0] = tempMemFloat[0];
      out[1] = tempMemFloat[1];
      out[2] = tempMemFloat[2];
      out[3] = tempMemFloat[3];
      return out;
    }
    attribute(attr) {
      if (typeof attr != "number")
        throw new TypeError("Expected number, but got " + typeof attr);
      const tempMemUint32 = this._engine.wasm._tempMemUint32;
      this._engine.wasm._wl_mesh_get_attribute(this._index, attr, this._engine.wasm._tempMem);
      if (tempMemUint32[0] == 255)
        return null;
      const arraySize = tempMemUint32[5];
      return new MeshAttributeAccessor(this._engine, {
        attribute: tempMemUint32[0],
        offset: tempMemUint32[1],
        stride: tempMemUint32[2],
        formatSize: tempMemUint32[3],
        componentCount: tempMemUint32[4],
        /* The WASM API returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */
        arraySize: arraySize ? arraySize : 1,
        length: this.vertexCount,
        bufferType: attr !== MeshAttribute.JointId ? Float32Array : Uint16Array
      });
    }
    /**
     * Destroy and free the meshes memory.
     *
     * It is best practice to set the mesh variable to `null` after calling
     * destroy to prevent accidental use:
     *
     * ```js
     *   mesh.destroy();
     *   mesh = null;
     * ```
     *
     * Accessing the mesh after destruction behaves like accessing an empty
     * mesh.
     *
     * @since 0.9.0
     */
    destroy() {
      this._engine.wasm._wl_mesh_destroy(this._index);
    }
    /**
     * Checks equality by comparing whether the wrapped native mesh ids are
     * equal.
     *
     * @param otherMesh Mesh to check equality with.
     * @returns Whether this mesh equals the given mesh.
     *
     * @since 1.0.0
     */
    equals(otherMesh) {
      if (!otherMesh)
        return false;
      return this._index === otherMesh._index;
    }
  };
  var MeshAttributeAccessor = class {
    /** Max number of elements. */
    length = 0;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /** Attribute index. @hidden */
    _attribute = -1;
    /** Attribute offset. @hidden */
    _offset = 0;
    /** Attribute stride. @hidden */
    _stride = 0;
    /** Format size native enum. @hidden */
    _formatSize = 0;
    /** Number of components per vertex. @hidden */
    _componentCount = 0;
    /** Number of values per vertex. @hidden */
    _arraySize = 1;
    /**
     * Class to instantiate an ArrayBuffer to get/set values.
     */
    _bufferType;
    /**
     * Function to allocate temporary WASM memory. It is cached in the accessor to avoid
     * conditionals during get/set.
     */
    _tempBufferGetter;
    /**
     * Create a new instance.
     *
     * @note Please use {@link Mesh.attribute} to create a new instance.
     *
     * @param options Contains information about how to read the data.
     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.
     *
     * @hidden
     */
    constructor(engine, options) {
      this._engine = engine;
      const wasm = this._engine.wasm;
      this._attribute = options.attribute;
      this._offset = options.offset;
      this._stride = options.stride;
      this._formatSize = options.formatSize;
      this._componentCount = options.componentCount;
      this._arraySize = options.arraySize;
      this._bufferType = options.bufferType;
      this.length = options.length;
      this._tempBufferGetter = this._bufferType === Float32Array ? wasm.getTempBufferF32.bind(wasm) : wasm.getTempBufferU16.bind(wasm);
    }
    /**
     * Create a new TypedArray to hold this attribute's values.
     *
     * This method is useful to create a view to hold the data to
     * pass to {@link get} and {@link set}
     *
     * Example:
     *
     * ```js
     * const vertexCount = 4;
     * const positionAttribute = mesh.attribute(MeshAttributes.Position);
     *
     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.
     * const positions = positionAttribute.createArray(vertexCount);
     * ```
     *
     * @param count The number of **vertices** expected.
     * @returns A TypedArray with the appropriate format to access the data
     */
    createArray(count = 1) {
      count = count > this.length ? this.length : count;
      return new this._bufferType(count * this._componentCount * this._arraySize);
    }
    get(index, out = this.createArray()) {
      if (out.length % this._componentCount !== 0) {
        throw new Error(`out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`);
      }
      const dest = this._tempBufferGetter(out.length);
      const elementSize = this._bufferType.BYTES_PER_ELEMENT;
      const destSize = elementSize * out.length;
      const srcFormatSize = this._formatSize * this._arraySize;
      const destFormatSize = this._componentCount * elementSize * this._arraySize;
      this._engine.wasm._wl_mesh_get_attribute_values(this._attribute, srcFormatSize, this._offset + index * this._stride, this._stride, destFormatSize, dest.byteOffset, destSize);
      for (let i = 0; i < out.length; ++i)
        out[i] = dest[i];
      return out;
    }
    /**
     * Set attribute element.
     *
     * @param i Index
     * @param v Value to set the element to
     *
     * `v.length` needs to be a multiple of the attributes component count, see
     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be
     * filled with the next n attribute elements, which can reduce overhead
     * of this call.
     *
     * @returns Reference to self (for method chaining)
     */
    set(i, v) {
      if (v.length % this._componentCount !== 0)
        throw new Error(`out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`);
      const elementSize = this._bufferType.BYTES_PER_ELEMENT;
      const srcSize = elementSize * v.length;
      const srcFormatSize = this._componentCount * elementSize * this._arraySize;
      const destFormatSize = this._formatSize * this._arraySize;
      const wasm = this._engine.wasm;
      if (v.buffer != wasm.HEAPU8.buffer) {
        const dest = this._tempBufferGetter(v.length);
        dest.set(v);
        v = dest;
      }
      wasm._wl_mesh_set_attribute_values(this._attribute, srcFormatSize, v.byteOffset, srcSize, destFormatSize, this._offset + i * this._stride, this._stride);
      return this;
    }
  };
  var Material = class {
    /**
     * Index of this material in the manager.
     *
     * @hidden
     */
    _index;
    /**
     * Material definition index in the scene.
     *
     * @hidden
     */
    _definition;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * Create a new Material.
     *
     * @note Creating material is expensive. Please use {@link Material#clone} to clone a material.
     * @note Do not use this constructor directly with an index, this is reserved for internal purposes.
     */
    constructor(engine, params) {
      this._engine = engine;
      if (typeof params !== "number") {
        if (!params?.pipeline)
          throw new Error("Missing parameter 'pipeline'");
        const wasm = this._engine.wasm;
        const pipeline = params.pipeline;
        this._index = wasm._wl_material_create(wasm.tempUTF8(pipeline));
        if (this._index < 0)
          throw new Error(`No such pipeline '${pipeline}'`);
      } else {
        this._index = params;
      }
      this._definition = this._engine.wasm._wl_material_get_definition(this._index);
      if (!this._engine.wasm._materialDefinitions[this._definition])
        throw new Error(`Material Definition ${this._definition} not found for material with index ${this._index}`);
      return new Proxy(this, {
        get(target, prop) {
          const wasm = engine.wasm;
          const definition = wasm._materialDefinitions[target._definition];
          const param = definition.get(prop);
          if (!param)
            return target[prop];
          if (wasm._wl_material_get_param_value(target._index, param.index, wasm._tempMem)) {
            const type = param.type;
            switch (type.type) {
              case MaterialParamType.UnsignedInt:
                return type.componentCount == 1 ? wasm._tempMemUint32[0] : new Uint32Array(wasm.HEAPU32.buffer, wasm._tempMem, type.componentCount);
              case MaterialParamType.Int:
                return type.componentCount == 1 ? wasm._tempMemInt[0] : new Int32Array(wasm.HEAP32.buffer, wasm._tempMem, type.componentCount);
              case MaterialParamType.Float:
                return type.componentCount == 1 ? wasm._tempMemFloat[0] : new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, type.componentCount);
              case MaterialParamType.Sampler:
                return engine.textures.wrap(wasm._tempMemInt[0]);
              default:
                throw new Error(`Invalid type ${type.type} on parameter ${param.index} for material ${target._index}`);
            }
          }
        },
        set(target, prop, value) {
          const wasm = engine.wasm;
          const definition = wasm._materialDefinitions[target._definition];
          const param = definition.get(prop);
          if (!param) {
            target[prop] = value;
            return true;
          }
          const type = param.type;
          switch (type.type) {
            case MaterialParamType.UnsignedInt:
            case MaterialParamType.Int:
            case MaterialParamType.Sampler:
              const v = value.id ?? value;
              wasm._wl_material_set_param_value_uint(target._index, param.index, v);
              break;
            case MaterialParamType.Float:
              let count = 1;
              if (typeof value === "number") {
                wasm._tempMemFloat[0] = value;
              } else {
                count = value.length;
                for (let i = 0; i < count; ++i)
                  wasm._tempMemFloat[i] = value[i];
              }
              wasm._wl_material_set_param_value_float(target._index, param.index, wasm._tempMem, count);
              break;
            case MaterialParamType.Font:
              throw new Error("Setting font properties is currently unsupported.");
          }
          return true;
        }
      });
    }
    /** @deprecated Use {@link #pipeline} instead. */
    get shader() {
      return this.pipeline;
    }
    /** Name of the pipeline used by this material. */
    get pipeline() {
      const wasm = this._engine.wasm;
      return wasm.UTF8ToString(wasm._wl_material_get_pipeline(this._index));
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /**
     * Create a copy of the underlying native material.
     *
     * @returns Material clone.
     */
    clone() {
      const id = this._engine.wasm._wl_material_clone(this._index);
      return id > 0 ? new Material(this._engine, id) : null;
    }
    /**
     * Checks equality by comparing whether the wrapped native material ids are
     * equal.
     *
     * @param otherMaterial Material to check equality with.
     * @returns Whether this material equals the given material.
     *
     * @since 1.0.0
     */
    equals(otherMaterial) {
      if (!otherMaterial)
        return false;
      return this._index === otherMaterial._index;
    }
    /**
     * Wrap a native material index.
     *
     * @param engine Engine instance.
     * @param index The index.
     * @returns Material instance or `null` if index <= 0.
     *
     * @deprecated Please use `new Material()` instead.
     */
    static wrap(engine, index) {
      return index > 0 ? new Material(engine, index) : null;
    }
  };
  var temp2d = null;
  var Texture = class {
    /** Wonderland Engine instance. @hidden */
    _engine;
    /** Index in the manager. @hidden */
    _id = 0;
    /** HTML image index. @hidden */
    _imageIndex = null;
    /**
     * @param engine The engine instance
     * @param param HTML media element to create texture from or texture id to wrap.
     */
    constructor(engine, param) {
      this._engine = engine ?? WL;
      const wasm = engine.wasm;
      if (param instanceof HTMLImageElement || param instanceof HTMLVideoElement || param instanceof HTMLCanvasElement) {
        const index = wasm._images.length;
        wasm._images.push(param);
        this._imageIndex = index;
        this._id = this._engine.wasm._wl_renderer_addImage(index);
      } else {
        this._id = param;
      }
      this._engine.textures._set(this);
    }
    /** Whether this texture is valid. */
    get valid() {
      return this._id >= 0;
    }
    /** Index in this manager. */
    get id() {
      return this._id;
    }
    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */
    update() {
      if (!this.valid || this._imageIndex === null)
        return;
      this._engine.wasm._wl_renderer_updateImage(this._id, this._imageIndex);
    }
    /** Width of the texture. */
    get width() {
      return this._engine.wasm._wl_texture_width(this._id);
    }
    /** Height of the texture. */
    get height() {
      return this._engine.wasm._wl_texture_height(this._id);
    }
    /** Hosting engine instance. */
    get engine() {
      return this._engine;
    }
    /**
     * Update a subrange on the texture to match the HTML element (e.g. reflect the current frame of a video).
     *
     * Usage:
     *
     * ```js
     * // Copies rectangle of pixel starting from (10, 20)
     * texture.updateSubImage(10, 20, 600, 400);
     * ```
     *
     * @param x x offset
     * @param y y offset
     * @param w width
     * @param h height
     */
    updateSubImage(x, y, w, h) {
      if (!this.valid || this._imageIndex === null)
        return;
      if (!temp2d) {
        const canvas2 = document.createElement("canvas");
        const ctx = canvas2.getContext("2d");
        if (!ctx) {
          throw new Error("Texture.updateSubImage(): Failed to obtain CanvasRenderingContext2D.");
        }
        temp2d = { canvas: canvas2, ctx };
      }
      const wasm = this._engine.wasm;
      const img = wasm._images[this._imageIndex];
      if (!img)
        return;
      temp2d.canvas.width = w;
      temp2d.canvas.height = h;
      temp2d.ctx.drawImage(img, x, y, w, h, 0, 0, w, h);
      const yOffset = (img.videoHeight ?? img.height) - y - h;
      wasm._images[this._imageIndex] = temp2d.canvas;
      wasm._wl_renderer_updateImage(this._id, this._imageIndex, x, yOffset);
      wasm._images[this._imageIndex] = img;
    }
    /**
     * Destroy and free the texture's texture altas space and memory.
     *
     * It is best practice to set the texture variable to `null` after calling
     * destroy to prevent accidental use of the invalid texture:
     *
     * ```js
     *   texture.destroy();
     *   texture = null;
     * ```
     *
     * @since 0.9.0
     */
    destroy() {
      this.engine.textures._destroy(this);
      this._id = -1;
      this._imageIndex = null;
    }
    /**
     * Checks equality by comparing whether the wrapped native texture ids are
     * equal.
     *
     * @param otherTexture Texture to check equality with.
     * @returns Whether this texture equals the given texture.
     *
     * @since 1.0.0
     */
    equals(otherTexture) {
      if (!otherTexture)
        return false;
      return this._id === otherTexture._id;
    }
  };
  var Animation = class {
    /** Index of the mesh in the manager. @hidden */
    _index;
    /** Wonderland Engine instance. @hidden */
    _engine;
    /**
     * @param index Index in the manager
     */
    constructor(engine = WL, index) {
      this._engine = engine;
      this._index = index;
    }
    /** Duration of this animation. */
    get duration() {
      return this._engine.wasm._wl_animation_get_duration(this._index);
    }
    /** Number of tracks in this animation. */
    get trackCount() {
      return this._engine.wasm._wl_animation_get_trackCount(this._index);
    }
    /**
     * Clone this animation retargeted to a new set of objects.
     *
     * The clone shares most of the data with the original and is therefore
     * light-weight.
     *
     * **Experimental:** This API might change in upcoming versions.
     *
     * If retargeting to {@link Skin}, the join names will be used to determine a mapping
     * from the previous skin to the new skin. The source skin will be retrieved from
     * the first track in the animation that targets a joint.
     *
     * @param newTargets New targets per track. Expected to have
     *      {@link Animation#trackCount} elements or to be a {@link Skin}.
     * @returns The retargeted clone of this animation.
     */
    retarget(newTargets) {
      const wasm = this._engine.wasm;
      if (newTargets instanceof Skin) {
        const animId2 = wasm._wl_animation_retargetToSkin(this._index, newTargets._index);
        return new Animation(this._engine, animId2);
      }
      if (newTargets.length != this.trackCount) {
        throw Error("Expected " + this.trackCount.toString() + " targets, but got " + newTargets.length.toString());
      }
      const ptr = wasm._malloc(2 * newTargets.length);
      for (let i = 0; i < newTargets.length; ++i) {
        wasm.HEAPU16[ptr >> 1 + i] = newTargets[i].objectId;
      }
      const animId = wasm._wl_animation_retarget(this._index, ptr);
      wasm._free(ptr);
      return new Animation(this._engine, animId);
    }
    /**
     * Checks equality by comparing whether the wrapped native animation ids
     * are equal.
     *
     * @param otherAnimation Animation to check equality with.
     * @returns Whether this animation equals the given animation.
     *
     * @since 1.0.0
     */
    equals(otherAnimation) {
      if (!otherAnimation)
        return false;
      return this._index === otherAnimation._index;
    }
  };
  var Skin = class {
    /**
     * Index of the skin in the manager.
     * @hidden
     */
    _index;
    /** Wonderland Engine instance. @hidden */
    _engine;
    constructor(engine, index) {
      this._engine = engine;
      this._index = index;
    }
    /** Amount of joints in this skin. */
    get jointCount() {
      return this._engine.wasm._wl_skin_get_joint_count(this._index);
    }
    /** Joints object ids for this skin */
    get jointIds() {
      const wasm = this._engine.wasm;
      return new Uint16Array(wasm.HEAPU16.buffer, wasm._wl_skin_joint_ids(this._index), this.jointCount);
    }
    /**
     * Dual quaternions in a flat array of size 8 times {@link jointCount}.
     *
     * Inverse bind transforms of the skin.
     */
    get inverseBindTransforms() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_skin_inverse_bind_transforms(this._index), 8 * this.jointCount);
    }
    /**
     * Vectors in a flat array of size 3 times {@link jointCount}.
     *
     * Inverse bind scalings of the skin.
     */
    get inverseBindScalings() {
      const wasm = this._engine.wasm;
      return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_skin_inverse_bind_scalings(this._index), 3 * this.jointCount);
    }
    /**
     * Checks equality by comparing whether the wrapped native skin ids are
     * equal.
     *
     * @param otherSkin Skin to check equality with.
     * @returns Whether this skin equals the given skin.
     *
     * @since 1.0.0
     */
    equals(otherSkin) {
      if (!otherSkin)
        return false;
      return this._index === otherSkin._index;
    }
  };

  // node_modules/@wonderlandengine/api/dist/wasm.js
  var _componentDefaults = /* @__PURE__ */ new Map([
    [Type.Bool, false],
    [Type.Int, 0],
    [Type.Float, 0],
    [Type.String, ""],
    [Type.Enum, void 0],
    [Type.Object, null],
    [Type.Mesh, null],
    [Type.Texture, null],
    [Type.Material, null],
    [Type.Animation, null],
    [Type.Skin, null],
    [Type.Color, [0, 0, 0, 1]]
  ]);

  // node_modules/@sorskoot/wonderland-components/dist/components/flipbook.js
  var __decorate2 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var DynamicTextureCache = class {
    textures;
    engine;
    constructor(engine) {
      this.textures = {};
      this.engine = engine;
    }
    loadTextures(url, columns, rows) {
      if (!this.textures.hasOwnProperty(url)) {
        this.textures[url] = new Promise((resolve, reject) => {
          let image = new Image();
          let textures = [];
          image.src = url;
          image.onload = () => {
            let canvas2 = document.createElement("canvas");
            let context2 = canvas2.getContext("2d");
            if (context2 == null)
              reject("Could not get context");
            canvas2.width = image.width;
            canvas2.height = image.height;
            context2.drawImage(image, 0, 0);
            let spriteWidth = image.width / columns;
            let spriteHeight = image.height / rows;
            for (let y = 0; y < rows; y++) {
              for (let x = 0; x < columns; x++) {
                let pc = this.copyPartOfCanvas(canvas2, x * spriteWidth, y * spriteHeight, spriteWidth, spriteHeight);
                let texturePc = new Texture(this.engine, pc);
                textures.push(texturePc);
              }
            }
            resolve(textures);
          };
        });
      }
      return this.textures[url];
    }
    copyPartOfCanvas(canvas2, x, y, width, height) {
      let copy7 = document.createElement("canvas");
      copy7.width = width;
      copy7.height = height;
      let ctx2 = copy7.getContext("2d");
      ctx2.drawImage(canvas2, x, y, width, height, 0, 0, width, height);
      return copy7;
    }
  };
  var textureCache;
  var Flipbook = class extends Component {
    base;
    url = "";
    urlEmissive = "";
    columns = 4;
    rows = 4;
    speed = 8;
    textures = [];
    loaded = false;
    index = 0;
    init() {
      if (!textureCache) {
        textureCache = new DynamicTextureCache(this.engine);
      }
      let texturesPromises = [];
      texturesPromises.push(textureCache.loadTextures(this.url, this.columns, this.rows));
      if (this.urlEmissive) {
        texturesPromises.push(textureCache.loadTextures(this.urlEmissive, this.columns, this.rows));
      }
      Promise.all(texturesPromises).then((tex) => {
        this.textures = [];
        if (this.urlEmissive) {
          for (let i = 0; i < tex[0].length; i++) {
            this.textures.push(this.createMaterial(this.base, tex[0][i], tex[1][i]));
          }
        } else {
          for (let i = 0; i < tex[0].length; i++) {
            this.textures.push(this.createMaterial(this.base, tex[0][i]));
          }
        }
        this.loaded = true;
        this.index = Math.floor(Math.random() * this.textures.length);
      });
    }
    createMaterial(base, texture, emissiveTexture = null) {
      const mat = base.clone();
      if (!mat)
        throw new Error("Could not clone material");
      if (mat.pipeline == "Flat Opaque Textured" || mat.pipeline.startsWith("FlatSorskoot")) {
        const flatMat = mat;
        flatMat.flatTexture = texture;
        if (mat.pipeline == "FlatSorskoot Emissive") {
          flatMat.flatTexture = texture;
          if (emissiveTexture) {
            flatMat.emissiveTexture = emissiveTexture;
          }
        }
      } else {
        console.error(`Pipeline ${mat.pipeline} not supported by flipbook`);
      }
      return mat;
    }
    mat = null;
    t = 0;
    start() {
      this.mat = this.object.getComponent(MeshComponent);
      this.t = Math.random() * this.speed;
    }
    previousIndex = -1;
    update(dt) {
      if (!this.loaded)
        return;
      this.t += dt * this.speed;
      this.index = ~~this.t % this.textures.length;
      if (this.textures && this.textures.length && this.previousIndex != this.index && this.mat) {
        this.previousIndex = this.index;
        this.mat.material = this.textures[this.index];
      }
    }
  };
  __publicField(Flipbook, "TypeName", "flipbook");
  __decorate2([
    property.material()
  ], Flipbook.prototype, "base", void 0);
  __decorate2([
    property.string("")
  ], Flipbook.prototype, "url", void 0);
  __decorate2([
    property.string("")
  ], Flipbook.prototype, "urlEmissive", void 0);
  __decorate2([
    property.int(4)
  ], Flipbook.prototype, "columns", void 0);
  __decorate2([
    property.int(4)
  ], Flipbook.prototype, "rows", void 0);
  __decorate2([
    property.float(8)
  ], Flipbook.prototype, "speed", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/prefab.js
  var __decorate3 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var Prefab = class extends Component {
    name;
  };
  __publicField(Prefab, "TypeName", "prefab");
  __decorate3([
    property.string()
  ], Prefab.prototype, "name", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/prefab-storage.js
  var PrefabStorage = class extends Component {
    prefabs = {};
    start() {
      let children = this.object.children;
      for (let i = 0; i < children.length; i++) {
        let child = children[i];
        let childPrefab = child.getComponent(Prefab);
        if (childPrefab) {
          this.prefabs[childPrefab.name] = child;
          child.setPositionWorld([-1e3, -1e3, -1e3]);
        }
      }
    }
    /**
     * Instantiate a prefab.
     *
     * @param {string} prefabName Name of the prefab to instantiate.
     * @param {Object3D} parentObject The object to parent the prefab to after instantiation.
     * @returns {Object3D|undefined} The root of the instantiated prefab.
     */
    instantiate(prefabName, parentObject) {
      let prefab = this.prefabs[prefabName];
      if (!prefab) {
        console.error("trying to create " + prefabName + " but that is not a registerd prefab");
        return;
      }
      let obj = this.engine.scene.addObject(parentObject);
      obj.name = prefabName;
      obj.scaleLocal(prefab.getScalingLocal());
      obj.setTransformLocal(prefab.getTransformLocal());
      var prefabMesh = prefab.getComponent(MeshComponent);
      if (prefabMesh) {
        let newMesh = obj.addComponent(MeshComponent);
        if (!newMesh) {
          console.error("mesh component could not be added to object");
          return;
        }
        newMesh.mesh = prefabMesh.mesh;
        newMesh.material = prefabMesh.material;
      }
      var prefabCollision = prefab.getComponent(CollisionComponent);
      if (prefabCollision) {
        let newCollision = obj.addComponent(CollisionComponent);
        if (!newCollision) {
          console.error("collision component could not be added to object");
          return;
        }
        newCollision.collider = prefabCollision.collider;
        newCollision.extents = prefabCollision.extents;
        newCollision.group = prefabCollision.group;
      }
      obj.setDirty();
      return obj;
    }
  };
  __publicField(PrefabStorage, "TypeName", "prefab-storage");

  // node_modules/@sorskoot/wonderland-components/dist/components/shootBase.js
  var __decorate4 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var handedness = ["left", "right"];
  var ShootBase = class extends Component {
    haptics = true;
    handedness = 0;
    initialized = false;
    start() {
      this.initialized = false;
      this.engine.onXRSessionStart.add((session) => {
        if (this.initialized)
          return;
        session.addEventListener("select", (e) => {
          if (!this.active)
            return;
          if (e.inputSource.handedness === handedness[this.handedness]) {
            if (this.haptics) {
              this.pulse(e.inputSource.gamepad);
            }
            this.shoot(this.object.getPositionWorld(), this.object.getRotationWorld());
          }
        });
        this.initialized = true;
      });
    }
    pulse(gamepad) {
      var actuator;
      if (!gamepad || !gamepad.hapticActuators) {
        return;
      }
      actuator = gamepad.hapticActuators[0];
      if (!actuator)
        return;
      actuator.pulse(1, 100);
    }
    shoot(transform, rotation) {
    }
  };
  __publicField(ShootBase, "TypeName", "shoot-base");
  __decorate4([
    property.bool(true)
  ], ShootBase.prototype, "haptics", void 0);
  __decorate4([
    property.enum(["Left", "Right"])
  ], ShootBase.prototype, "handedness", void 0);

  // node_modules/gl-matrix/esm/common.js
  var EPSILON = 1e-6;
  var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
  var RANDOM = Math.random;
  var degree = Math.PI / 180;
  if (!Math.hypot)
    Math.hypot = function() {
      var y = 0, i = arguments.length;
      while (i--) {
        y += arguments[i] * arguments[i];
      }
      return Math.sqrt(y);
    };

  // node_modules/gl-matrix/esm/mat3.js
  function create() {
    var out = new ARRAY_TYPE(9);
    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }

  // node_modules/gl-matrix/esm/mat4.js
  var mat4_exports = {};
  __export(mat4_exports, {
    add: () => add,
    adjoint: () => adjoint,
    clone: () => clone,
    copy: () => copy,
    create: () => create2,
    determinant: () => determinant,
    equals: () => equals,
    exactEquals: () => exactEquals,
    frob: () => frob,
    fromQuat: () => fromQuat,
    fromQuat2: () => fromQuat2,
    fromRotation: () => fromRotation,
    fromRotationTranslation: () => fromRotationTranslation,
    fromRotationTranslationScale: () => fromRotationTranslationScale,
    fromRotationTranslationScaleOrigin: () => fromRotationTranslationScaleOrigin,
    fromScaling: () => fromScaling,
    fromTranslation: () => fromTranslation,
    fromValues: () => fromValues,
    fromXRotation: () => fromXRotation,
    fromYRotation: () => fromYRotation,
    fromZRotation: () => fromZRotation,
    frustum: () => frustum,
    getRotation: () => getRotation,
    getScaling: () => getScaling,
    getTranslation: () => getTranslation,
    identity: () => identity,
    invert: () => invert,
    lookAt: () => lookAt,
    mul: () => mul,
    multiply: () => multiply,
    multiplyScalar: () => multiplyScalar,
    multiplyScalarAndAdd: () => multiplyScalarAndAdd,
    ortho: () => ortho,
    orthoNO: () => orthoNO,
    orthoZO: () => orthoZO,
    perspective: () => perspective,
    perspectiveFromFieldOfView: () => perspectiveFromFieldOfView,
    perspectiveNO: () => perspectiveNO,
    perspectiveZO: () => perspectiveZO,
    rotate: () => rotate,
    rotateX: () => rotateX,
    rotateY: () => rotateY,
    rotateZ: () => rotateZ,
    scale: () => scale,
    set: () => set,
    str: () => str,
    sub: () => sub,
    subtract: () => subtract,
    targetTo: () => targetTo,
    translate: () => translate,
    transpose: () => transpose
  });
  function create2() {
    var out = new ARRAY_TYPE(16);
    if (ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  function clone(a) {
    var out = new ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a01 = a[1], a02 = a[2], a03 = a[3];
      var a12 = a[6], a13 = a[7];
      var a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }
    return out;
  }
  function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
  }
  function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  }
  function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  function translate(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
  }
  function scale(out, a, v) {
    var x = v[0], y = v[1], z = v[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len5 = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;
    if (len5 < EPSILON) {
      return null;
    }
    len5 = 1 / len5;
    x *= len5;
    y *= len5;
    z *= len5;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    return out;
  }
  function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  }
  function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  }
  function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    if (a !== out) {
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  }
  function fromTranslation(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromScaling(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotation(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len5 = Math.hypot(x, y, z);
    var s, c, t;
    if (len5 < EPSILON) {
      return null;
    }
    len5 = 1 / len5;
    x *= len5;
    y *= len5;
    z *= len5;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotationTranslation(out, q2, v) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromQuat2(out, a) {
    var translation = new ARRAY_TYPE(3);
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw;
    if (magnitude > 0) {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
  }
  function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  function getRotation(out, mat) {
    var scaling = new ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;
    if (trace > 0) {
      S = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }
    return out;
  }
  function fromRotationTranslationScale(out, q2, v, s) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
  }
  function fromRotationTranslationScaleOrigin(out, q2, v, s, o) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  function fromQuat(out, q2) {
    var x = q2[0], y = q2[1], z = q2[2], w = q2[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO(out, fovy, aspect, near, far) {
    var f2 = 1 / Math.tan(fovy / 2), nf;
    out[0] = f2 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f2;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective = perspectiveNO;
  function perspectiveZO(out, fovy, aspect, near, far) {
    var f2 = 1 / Math.tan(fovy / 2), nf;
    out[0] = f2 / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f2;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = far * nf;
      out[14] = far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -near;
    }
    return out;
  }
  function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    var xScale = 2 / (leftTan + rightTan);
    var yScale = 2 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = yScale;
    out[6] = 0;
    out[7] = 0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near / (near - far);
    out[15] = 0;
    return out;
  }
  function orthoNO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho = orthoNO;
  function orthoZO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
  }
  function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len5;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];
    if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
      return identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len5 = 1 / Math.hypot(z0, z1, z2);
    z0 *= len5;
    z1 *= len5;
    z2 *= len5;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len5 = Math.hypot(x0, x1, x2);
    if (!len5) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len5 = 1 / len5;
      x0 *= len5;
      x1 *= len5;
      x2 *= len5;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len5 = Math.hypot(y0, y1, y2);
    if (!len5) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len5 = 1 / len5;
      y0 *= len5;
      y1 *= len5;
      y2 *= len5;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  }
  function targetTo(out, eye, target, up) {
    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
    var len5 = z0 * z0 + z1 * z1 + z2 * z2;
    if (len5 > 0) {
      len5 = 1 / Math.sqrt(len5);
      z0 *= len5;
      z1 *= len5;
      z2 *= len5;
    }
    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
    len5 = x0 * x0 + x1 * x1 + x2 * x2;
    if (len5 > 0) {
      len5 = 1 / Math.sqrt(len5);
      x0 *= len5;
      x1 *= len5;
      x2 *= len5;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
  }
  function subtract(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale7) {
    out[0] = a[0] + b[0] * scale7;
    out[1] = a[1] + b[1] * scale7;
    out[2] = a[2] + b[2] * scale7;
    out[3] = a[3] + b[3] * scale7;
    out[4] = a[4] + b[4] * scale7;
    out[5] = a[5] + b[5] * scale7;
    out[6] = a[6] + b[6] * scale7;
    out[7] = a[7] + b[7] * scale7;
    out[8] = a[8] + b[8] * scale7;
    out[9] = a[9] + b[9] * scale7;
    out[10] = a[10] + b[10] * scale7;
    out[11] = a[11] + b[11] * scale7;
    out[12] = a[12] + b[12] * scale7;
    out[13] = a[13] + b[13] * scale7;
    out[14] = a[14] + b[14] * scale7;
    out[15] = a[15] + b[15] * scale7;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
  }
  var mul = multiply;
  var sub = subtract;

  // node_modules/gl-matrix/esm/quat.js
  var quat_exports = {};
  __export(quat_exports, {
    add: () => add4,
    calculateW: () => calculateW,
    clone: () => clone4,
    conjugate: () => conjugate,
    copy: () => copy4,
    create: () => create5,
    dot: () => dot3,
    equals: () => equals4,
    exactEquals: () => exactEquals4,
    exp: () => exp,
    fromEuler: () => fromEuler,
    fromMat3: () => fromMat3,
    fromValues: () => fromValues4,
    getAngle: () => getAngle,
    getAxisAngle: () => getAxisAngle,
    identity: () => identity2,
    invert: () => invert2,
    len: () => len2,
    length: () => length3,
    lerp: () => lerp3,
    ln: () => ln,
    mul: () => mul3,
    multiply: () => multiply3,
    normalize: () => normalize3,
    pow: () => pow,
    random: () => random2,
    rotateX: () => rotateX3,
    rotateY: () => rotateY3,
    rotateZ: () => rotateZ3,
    rotationTo: () => rotationTo,
    scale: () => scale4,
    set: () => set4,
    setAxes: () => setAxes,
    setAxisAngle: () => setAxisAngle,
    slerp: () => slerp,
    sqlerp: () => sqlerp,
    sqrLen: () => sqrLen2,
    squaredLength: () => squaredLength3,
    str: () => str3
  });

  // node_modules/gl-matrix/esm/vec3.js
  var vec3_exports = {};
  __export(vec3_exports, {
    add: () => add2,
    angle: () => angle,
    bezier: () => bezier,
    ceil: () => ceil,
    clone: () => clone2,
    copy: () => copy2,
    create: () => create3,
    cross: () => cross,
    dist: () => dist,
    distance: () => distance,
    div: () => div,
    divide: () => divide,
    dot: () => dot,
    equals: () => equals2,
    exactEquals: () => exactEquals2,
    floor: () => floor,
    forEach: () => forEach,
    fromValues: () => fromValues2,
    hermite: () => hermite,
    inverse: () => inverse,
    len: () => len,
    length: () => length,
    lerp: () => lerp,
    max: () => max,
    min: () => min,
    mul: () => mul2,
    multiply: () => multiply2,
    negate: () => negate,
    normalize: () => normalize,
    random: () => random,
    rotateX: () => rotateX2,
    rotateY: () => rotateY2,
    rotateZ: () => rotateZ2,
    round: () => round,
    scale: () => scale2,
    scaleAndAdd: () => scaleAndAdd,
    set: () => set2,
    sqrDist: () => sqrDist,
    sqrLen: () => sqrLen,
    squaredDistance: () => squaredDistance,
    squaredLength: () => squaredLength,
    str: () => str2,
    sub: () => sub2,
    subtract: () => subtract2,
    transformMat3: () => transformMat3,
    transformMat4: () => transformMat4,
    transformQuat: () => transformQuat,
    zero: () => zero
  });
  function create3() {
    var out = new ARRAY_TYPE(3);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone2(a) {
    var out = new ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
  }
  function fromValues2(x, y, z) {
    var out = new ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function copy2(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function set2(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function add2(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  function multiply2(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
  }
  function scale2(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale7) {
    out[0] = a[0] + b[0] * scale7;
    out[1] = a[1] + b[1] * scale7;
    out[2] = a[2] + b[2] * scale7;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return Math.hypot(x, y, z);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return x * x + y * y + z * z;
  }
  function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return x * x + y * y + z * z;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    out[2] = 1 / a[2];
    return out;
  }
  function normalize(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len5 = x * x + y * y + z * z;
    if (len5 > 0) {
      len5 = 1 / Math.sqrt(len5);
    }
    out[0] = a[0] * len5;
    out[1] = a[1] * len5;
    out[2] = a[2] * len5;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cross(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2];
    var bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  }
  function hermite(out, a, b, c, d, t) {
    var factorTimes2 = t * t;
    var factor1 = factorTimes2 * (2 * t - 3) + 1;
    var factor2 = factorTimes2 * (t - 2) + t;
    var factor3 = factorTimes2 * (t - 1);
    var factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function bezier(out, a, b, c, d, t) {
    var inverseFactor = 1 - t;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t * t;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function random(out, scale7) {
    scale7 = scale7 || 1;
    var r = RANDOM() * 2 * Math.PI;
    var z = RANDOM() * 2 - 1;
    var zScale = Math.sqrt(1 - z * z) * scale7;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale7;
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
  }
  function transformQuat(out, a, q2) {
    var qx = q2[0], qy = q2[1], qz = q2[2], qw = q2[3];
    var x = a[0], y = a[1], z = a[2];
    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
    var w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
  }
  function rotateX2(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateY2(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateZ2(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2];
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function angle(a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str2(a) {
    return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
  }
  function exactEquals2(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
  }
  function equals2(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
  }
  var sub2 = subtract2;
  var mul2 = multiply2;
  var div = divide;
  var dist = distance;
  var sqrDist = squaredDistance;
  var len = length;
  var sqrLen = squaredLength;
  var forEach = function() {
    var vec = create3();
    return function(a, stride, offset2, count, fn, arg) {
      var i, l2;
      if (!stride) {
        stride = 3;
      }
      if (!offset2) {
        offset2 = 0;
      }
      if (count) {
        l2 = Math.min(count * stride + offset2, a.length);
      } else {
        l2 = a.length;
      }
      for (i = offset2; i < l2; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }
      return a;
    };
  }();

  // node_modules/gl-matrix/esm/vec4.js
  function create4() {
    var out = new ARRAY_TYPE(4);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function clone3(a) {
    var out = new ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function fromValues3(x, y, z, w) {
    var out = new ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function copy3(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function set3(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function add3(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  }
  function scale3(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  }
  function length2(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return Math.hypot(x, y, z, w);
  }
  function squaredLength2(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return x * x + y * y + z * z + w * w;
  }
  function normalize2(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len5 = x * x + y * y + z * z + w * w;
    if (len5 > 0) {
      len5 = 1 / Math.sqrt(len5);
    }
    out[0] = x * len5;
    out[1] = y * len5;
    out[2] = z * len5;
    out[3] = w * len5;
    return out;
  }
  function dot2(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  function lerp2(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
  }
  function exactEquals3(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }
  function equals3(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
  }
  var forEach2 = function() {
    var vec = create4();
    return function(a, stride, offset2, count, fn, arg) {
      var i, l2;
      if (!stride) {
        stride = 4;
      }
      if (!offset2) {
        offset2 = 0;
      }
      if (count) {
        l2 = Math.min(count * stride + offset2, a.length);
      } else {
        l2 = a.length;
      }
      for (i = offset2; i < l2; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }
      return a;
    };
  }();

  // node_modules/gl-matrix/esm/quat.js
  function create5() {
    var out = new ARRAY_TYPE(4);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity2(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function getAxisAngle(out_axis, q2) {
    var rad = Math.acos(q2[3]) * 2;
    var s = Math.sin(rad / 2);
    if (s > EPSILON) {
      out_axis[0] = q2[0] / s;
      out_axis[1] = q2[1] / s;
      out_axis[2] = q2[2] / s;
    } else {
      out_axis[0] = 1;
      out_axis[1] = 0;
      out_axis[2] = 0;
    }
    return rad;
  }
  function getAngle(a, b) {
    var dotproduct = dot3(a, b);
    return Math.acos(2 * dotproduct * dotproduct - 1);
  }
  function multiply3(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX3(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY3(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ3(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW(out, a) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
    return out;
  }
  function exp(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var et = Math.exp(w);
    var s = r > 0 ? et * Math.sin(r) / r : 0;
    out[0] = x * s;
    out[1] = y * s;
    out[2] = z * s;
    out[3] = et * Math.cos(r);
    return out;
  }
  function ln(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var t = r > 0 ? Math.atan2(r, w) / r : 0;
    out[0] = x * t;
    out[1] = y * t;
    out[2] = z * t;
    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
    return out;
  }
  function pow(out, a, b) {
    ln(out, a);
    scale4(out, out, b);
    exp(out, out);
    return out;
  }
  function slerp(out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    var omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function random2(out) {
    var u1 = RANDOM();
    var u2 = RANDOM();
    var u3 = RANDOM();
    var sqrt1MinusU1 = Math.sqrt(1 - u1);
    var sqrtU1 = Math.sqrt(u1);
    out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u2);
    out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u2);
    out[2] = sqrtU1 * Math.sin(2 * Math.PI * u3);
    out[3] = sqrtU1 * Math.cos(2 * Math.PI * u3);
    return out;
  }
  function invert2(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var dot6 = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
    var invDot = dot6 ? 1 / dot6 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
  }
  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  }
  function fromMat3(out, m) {
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      var i = 0;
      if (m[4] > m[0])
        i = 1;
      if (m[8] > m[i * 3 + i])
        i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
  }
  function fromEuler(out, x, y, z) {
    var halfToRad = 0.5 * Math.PI / 180;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;
    var sx = Math.sin(x);
    var cx = Math.cos(x);
    var sy = Math.sin(y);
    var cy = Math.cos(y);
    var sz = Math.sin(z);
    var cz = Math.cos(z);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function str3(a) {
    return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  var clone4 = clone3;
  var fromValues4 = fromValues3;
  var copy4 = copy3;
  var set4 = set3;
  var add4 = add3;
  var mul3 = multiply3;
  var scale4 = scale3;
  var dot3 = dot2;
  var lerp3 = lerp2;
  var length3 = length2;
  var len2 = length3;
  var squaredLength3 = squaredLength2;
  var sqrLen2 = squaredLength3;
  var normalize3 = normalize2;
  var exactEquals4 = exactEquals3;
  var equals4 = equals3;
  var rotationTo = function() {
    var tmpvec3 = create3();
    var xUnitVec3 = fromValues2(1, 0, 0);
    var yUnitVec3 = fromValues2(0, 1, 0);
    return function(out, a, b) {
      var dot6 = dot(a, b);
      if (dot6 < -0.999999) {
        cross(tmpvec3, xUnitVec3, a);
        if (len(tmpvec3) < 1e-6)
          cross(tmpvec3, yUnitVec3, a);
        normalize(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot6 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot6;
        return normalize3(out, out);
      }
    };
  }();
  var sqlerp = function() {
    var temp1 = create5();
    var temp2 = create5();
    return function(out, a, b, c, d, t) {
      slerp(temp1, a, d, t);
      slerp(temp2, b, c, t);
      slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }();
  var setAxes = function() {
    var matr = create();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize3(out, fromMat3(out, matr));
    };
  }();

  // node_modules/gl-matrix/esm/quat2.js
  var quat2_exports = {};
  __export(quat2_exports, {
    add: () => add5,
    clone: () => clone5,
    conjugate: () => conjugate2,
    copy: () => copy5,
    create: () => create6,
    dot: () => dot4,
    equals: () => equals5,
    exactEquals: () => exactEquals5,
    fromMat4: () => fromMat4,
    fromRotation: () => fromRotation2,
    fromRotationTranslation: () => fromRotationTranslation2,
    fromRotationTranslationValues: () => fromRotationTranslationValues,
    fromTranslation: () => fromTranslation2,
    fromValues: () => fromValues5,
    getDual: () => getDual,
    getReal: () => getReal,
    getTranslation: () => getTranslation2,
    identity: () => identity3,
    invert: () => invert3,
    len: () => len3,
    length: () => length4,
    lerp: () => lerp4,
    mul: () => mul4,
    multiply: () => multiply4,
    normalize: () => normalize4,
    rotateAroundAxis: () => rotateAroundAxis,
    rotateByQuatAppend: () => rotateByQuatAppend,
    rotateByQuatPrepend: () => rotateByQuatPrepend,
    rotateX: () => rotateX4,
    rotateY: () => rotateY4,
    rotateZ: () => rotateZ4,
    scale: () => scale5,
    set: () => set5,
    setDual: () => setDual,
    setReal: () => setReal,
    sqrLen: () => sqrLen3,
    squaredLength: () => squaredLength4,
    str: () => str4,
    translate: () => translate2
  });
  function create6() {
    var dq = new ARRAY_TYPE(8);
    if (ARRAY_TYPE != Float32Array) {
      dq[0] = 0;
      dq[1] = 0;
      dq[2] = 0;
      dq[4] = 0;
      dq[5] = 0;
      dq[6] = 0;
      dq[7] = 0;
    }
    dq[3] = 1;
    return dq;
  }
  function clone5(a) {
    var dq = new ARRAY_TYPE(8);
    dq[0] = a[0];
    dq[1] = a[1];
    dq[2] = a[2];
    dq[3] = a[3];
    dq[4] = a[4];
    dq[5] = a[5];
    dq[6] = a[6];
    dq[7] = a[7];
    return dq;
  }
  function fromValues5(x1, y1, z1, w1, x2, y2, z2, w2) {
    var dq = new ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    dq[4] = x2;
    dq[5] = y2;
    dq[6] = z2;
    dq[7] = w2;
    return dq;
  }
  function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
    var dq = new ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
    dq[4] = ax * w1 + ay * z1 - az * y1;
    dq[5] = ay * w1 + az * x1 - ax * z1;
    dq[6] = az * w1 + ax * y1 - ay * x1;
    dq[7] = -ax * x1 - ay * y1 - az * z1;
    return dq;
  }
  function fromRotationTranslation2(out, q2, t) {
    var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q2[0], by = q2[1], bz = q2[2], bw = q2[3];
    out[0] = bx;
    out[1] = by;
    out[2] = bz;
    out[3] = bw;
    out[4] = ax * bw + ay * bz - az * by;
    out[5] = ay * bw + az * bx - ax * bz;
    out[6] = az * bw + ax * by - ay * bx;
    out[7] = -ax * bx - ay * by - az * bz;
    return out;
  }
  function fromTranslation2(out, t) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = t[0] * 0.5;
    out[5] = t[1] * 0.5;
    out[6] = t[2] * 0.5;
    out[7] = 0;
    return out;
  }
  function fromRotation2(out, q2) {
    out[0] = q2[0];
    out[1] = q2[1];
    out[2] = q2[2];
    out[3] = q2[3];
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function fromMat4(out, a) {
    var outer = create5();
    getRotation(outer, a);
    var t = new ARRAY_TYPE(3);
    getTranslation(t, a);
    fromRotationTranslation2(out, outer, t);
    return out;
  }
  function copy5(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    return out;
  }
  function identity3(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function set5(out, x1, y1, z1, w1, x2, y2, z2, w2) {
    out[0] = x1;
    out[1] = y1;
    out[2] = z1;
    out[3] = w1;
    out[4] = x2;
    out[5] = y2;
    out[6] = z2;
    out[7] = w2;
    return out;
  }
  var getReal = copy4;
  function getDual(out, a) {
    out[0] = a[4];
    out[1] = a[5];
    out[2] = a[6];
    out[3] = a[7];
    return out;
  }
  var setReal = copy4;
  function setDual(out, q2) {
    out[4] = q2[0];
    out[5] = q2[1];
    out[6] = q2[2];
    out[7] = q2[3];
    return out;
  }
  function getTranslation2(out, a) {
    var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    return out;
  }
  function translate2(out, a, v) {
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
    out[0] = ax1;
    out[1] = ay1;
    out[2] = az1;
    out[3] = aw1;
    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
    return out;
  }
  function rotateX4(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    rotateX3(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateY4(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    rotateY3(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateZ4(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    rotateZ3(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateByQuatAppend(out, a, q2) {
    var qx = q2[0], qy = q2[1], qz = q2[2], qw = q2[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
    out[0] = ax * qw + aw * qx + ay * qz - az * qy;
    out[1] = ay * qw + aw * qy + az * qx - ax * qz;
    out[2] = az * qw + aw * qz + ax * qy - ay * qx;
    out[3] = aw * qw - ax * qx - ay * qy - az * qz;
    ax = a[4];
    ay = a[5];
    az = a[6];
    aw = a[7];
    out[4] = ax * qw + aw * qx + ay * qz - az * qy;
    out[5] = ay * qw + aw * qy + az * qx - ax * qz;
    out[6] = az * qw + aw * qz + ax * qy - ay * qx;
    out[7] = aw * qw - ax * qx - ay * qy - az * qz;
    return out;
  }
  function rotateByQuatPrepend(out, q2, a) {
    var qx = q2[0], qy = q2[1], qz = q2[2], qw = q2[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
    out[0] = qx * bw + qw * bx + qy * bz - qz * by;
    out[1] = qy * bw + qw * by + qz * bx - qx * bz;
    out[2] = qz * bw + qw * bz + qx * by - qy * bx;
    out[3] = qw * bw - qx * bx - qy * by - qz * bz;
    bx = a[4];
    by = a[5];
    bz = a[6];
    bw = a[7];
    out[4] = qx * bw + qw * bx + qy * bz - qz * by;
    out[5] = qy * bw + qw * by + qz * bx - qx * bz;
    out[6] = qz * bw + qw * bz + qx * by - qy * bx;
    out[7] = qw * bw - qx * bx - qy * by - qz * bz;
    return out;
  }
  function rotateAroundAxis(out, a, axis, rad) {
    if (Math.abs(rad) < EPSILON) {
      return copy5(out, a);
    }
    var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
    rad = rad * 0.5;
    var s = Math.sin(rad);
    var bx = s * axis[0] / axisLength;
    var by = s * axis[1] / axisLength;
    var bz = s * axis[2] / axisLength;
    var bw = Math.cos(rad);
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    var ax = a[4], ay = a[5], az = a[6], aw = a[7];
    out[4] = ax * bw + aw * bx + ay * bz - az * by;
    out[5] = ay * bw + aw * by + az * bx - ax * bz;
    out[6] = az * bw + aw * bz + ax * by - ay * bx;
    out[7] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function add5(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    return out;
  }
  function multiply4(out, a, b) {
    var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
    out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
    out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
    out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
    out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
    return out;
  }
  var mul4 = multiply4;
  function scale5(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    return out;
  }
  var dot4 = dot3;
  function lerp4(out, a, b, t) {
    var mt2 = 1 - t;
    if (dot4(a, b) < 0)
      t = -t;
    out[0] = a[0] * mt2 + b[0] * t;
    out[1] = a[1] * mt2 + b[1] * t;
    out[2] = a[2] * mt2 + b[2] * t;
    out[3] = a[3] * mt2 + b[3] * t;
    out[4] = a[4] * mt2 + b[4] * t;
    out[5] = a[5] * mt2 + b[5] * t;
    out[6] = a[6] * mt2 + b[6] * t;
    out[7] = a[7] * mt2 + b[7] * t;
    return out;
  }
  function invert3(out, a) {
    var sqlen = squaredLength4(a);
    out[0] = -a[0] / sqlen;
    out[1] = -a[1] / sqlen;
    out[2] = -a[2] / sqlen;
    out[3] = a[3] / sqlen;
    out[4] = -a[4] / sqlen;
    out[5] = -a[5] / sqlen;
    out[6] = -a[6] / sqlen;
    out[7] = a[7] / sqlen;
    return out;
  }
  function conjugate2(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    out[4] = -a[4];
    out[5] = -a[5];
    out[6] = -a[6];
    out[7] = a[7];
    return out;
  }
  var length4 = length3;
  var len3 = length4;
  var squaredLength4 = squaredLength3;
  var sqrLen3 = squaredLength4;
  function normalize4(out, a) {
    var magnitude = squaredLength4(a);
    if (magnitude > 0) {
      magnitude = Math.sqrt(magnitude);
      var a0 = a[0] / magnitude;
      var a1 = a[1] / magnitude;
      var a2 = a[2] / magnitude;
      var a3 = a[3] / magnitude;
      var b0 = a[4];
      var b1 = a[5];
      var b2 = a[6];
      var b3 = a[7];
      var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
      out[0] = a0;
      out[1] = a1;
      out[2] = a2;
      out[3] = a3;
      out[4] = (b0 - a0 * a_dot_b) / magnitude;
      out[5] = (b1 - a1 * a_dot_b) / magnitude;
      out[6] = (b2 - a2 * a_dot_b) / magnitude;
      out[7] = (b3 - a3 * a_dot_b) / magnitude;
    }
    return out;
  }
  function str4(a) {
    return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
  }
  function exactEquals5(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
  }
  function equals5(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7));
  }

  // node_modules/gl-matrix/esm/vec2.js
  var vec2_exports = {};
  __export(vec2_exports, {
    add: () => add6,
    angle: () => angle2,
    ceil: () => ceil2,
    clone: () => clone6,
    copy: () => copy6,
    create: () => create7,
    cross: () => cross2,
    dist: () => dist2,
    distance: () => distance2,
    div: () => div2,
    divide: () => divide2,
    dot: () => dot5,
    equals: () => equals6,
    exactEquals: () => exactEquals6,
    floor: () => floor2,
    forEach: () => forEach3,
    fromValues: () => fromValues6,
    inverse: () => inverse2,
    len: () => len4,
    length: () => length5,
    lerp: () => lerp5,
    max: () => max2,
    min: () => min2,
    mul: () => mul5,
    multiply: () => multiply5,
    negate: () => negate2,
    normalize: () => normalize5,
    random: () => random3,
    rotate: () => rotate2,
    round: () => round2,
    scale: () => scale6,
    scaleAndAdd: () => scaleAndAdd2,
    set: () => set6,
    sqrDist: () => sqrDist2,
    sqrLen: () => sqrLen4,
    squaredDistance: () => squaredDistance2,
    squaredLength: () => squaredLength5,
    str: () => str5,
    sub: () => sub3,
    subtract: () => subtract3,
    transformMat2: () => transformMat2,
    transformMat2d: () => transformMat2d,
    transformMat3: () => transformMat32,
    transformMat4: () => transformMat42,
    zero: () => zero2
  });
  function create7() {
    var out = new ARRAY_TYPE(2);
    if (ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function clone6(a) {
    var out = new ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
  }
  function fromValues6(x, y) {
    var out = new ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
  }
  function copy6(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
  }
  function set6(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
  }
  function add6(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
  }
  function subtract3(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
  }
  function multiply5(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
  }
  function divide2(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
  }
  function ceil2(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
  }
  function floor2(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
  }
  function min2(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
  }
  function max2(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
  }
  function round2(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
  }
  function scale6(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
  }
  function scaleAndAdd2(out, a, b, scale7) {
    out[0] = a[0] + b[0] * scale7;
    out[1] = a[1] + b[1] * scale7;
    return out;
  }
  function distance2(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return Math.hypot(x, y);
  }
  function squaredDistance2(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return x * x + y * y;
  }
  function length5(a) {
    var x = a[0], y = a[1];
    return Math.hypot(x, y);
  }
  function squaredLength5(a) {
    var x = a[0], y = a[1];
    return x * x + y * y;
  }
  function negate2(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
  }
  function inverse2(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    return out;
  }
  function normalize5(out, a) {
    var x = a[0], y = a[1];
    var len5 = x * x + y * y;
    if (len5 > 0) {
      len5 = 1 / Math.sqrt(len5);
    }
    out[0] = a[0] * len5;
    out[1] = a[1] * len5;
    return out;
  }
  function dot5(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function cross2(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
  }
  function lerp5(out, a, b, t) {
    var ax = a[0], ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
  }
  function random3(out, scale7) {
    scale7 = scale7 || 1;
    var r = RANDOM() * 2 * Math.PI;
    out[0] = Math.cos(r) * scale7;
    out[1] = Math.sin(r) * scale7;
    return out;
  }
  function transformMat2(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
  }
  function transformMat2d(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  }
  function transformMat32(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
  }
  function transformMat42(out, a, m) {
    var x = a[0];
    var y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
  }
  function rotate2(out, a, b, rad) {
    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
    out[0] = p0 * cosC - p1 * sinC + b[0];
    out[1] = p0 * sinC + p1 * cosC + b[1];
    return out;
  }
  function angle2(a, b) {
    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), cosine = mag && (x1 * x2 + y1 * y2) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero2(out) {
    out[0] = 0;
    out[1] = 0;
    return out;
  }
  function str5(a) {
    return "vec2(" + a[0] + ", " + a[1] + ")";
  }
  function exactEquals6(a, b) {
    return a[0] === b[0] && a[1] === b[1];
  }
  function equals6(a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
  }
  var len4 = length5;
  var sub3 = subtract3;
  var mul5 = multiply5;
  var div2 = divide2;
  var dist2 = distance2;
  var sqrDist2 = squaredDistance2;
  var sqrLen4 = squaredLength5;
  var forEach3 = function() {
    var vec = create7();
    return function(a, stride, offset2, count, fn, arg) {
      var i, l2;
      if (!stride) {
        stride = 2;
      }
      if (!offset2) {
        offset2 = 0;
      }
      if (count) {
        l2 = Math.min(count * stride + offset2, a.length);
      } else {
        l2 = a.length;
      }
      for (i = offset2; i < l2; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
      }
      return a;
    };
  }();

  // node_modules/@sorskoot/wonderland-components/dist/components/snap-rotate.js
  var __decorate5 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var SnapRotate = class extends Component {
    player;
    degrees;
    input = null;
    snapped = false;
    start() {
      this.input = this.object.getComponent(InputComponent);
      this.snapped = false;
    }
    update(dt) {
      if (!this.input || !this.input.xrInputSource || !this.input.xrInputSource.gamepad || !this.input.xrInputSource.gamepad.axes) {
        return;
      }
      const currentAxis = this.input.xrInputSource.gamepad.axes[2];
      if (currentAxis > -0.2 && currentAxis < 0.2) {
        this.snapped = false;
        return;
      }
      if (Math.abs(currentAxis) < 0.8) {
        return;
      }
      let lastHeadPos = vec3_exports.fromValues(0, 0, 0);
      this.player.getPositionWorld(lastHeadPos);
      if (currentAxis < -0.8 && !this.snapped) {
        this.player.rotateAxisAngleDegLocal([0, 1, 0], this.degrees);
        this.snapped = true;
      }
      if (currentAxis > 0.8 && !this.snapped) {
        this.player.rotateAxisAngleDegLocal([0, 1, 0], -this.degrees);
        this.snapped = true;
      }
      let currentHeadPos = vec3_exports.fromValues(0, 0, 0);
      this.player.getPositionWorld(currentHeadPos);
      let newPos = vec3_exports.fromValues(0, 0, 0);
      vec3_exports.sub(newPos, lastHeadPos, currentHeadPos);
      this.player.translateLocal(newPos);
    }
  };
  __publicField(SnapRotate, "TypeName", "snap-rotate");
  __decorate5([
    property.object()
  ], SnapRotate.prototype, "player", void 0);
  __decorate5([
    property.int(30)
  ], SnapRotate.prototype, "degrees", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/snow-particles.js
  var __decorate6 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var _objects, _velocities, _speeds, _direction;
  var SnowParticles = class extends Component {
    constructor() {
      super(...arguments);
      __publicField(this, "mesh");
      __publicField(this, "material");
      __publicField(this, "delay");
      __publicField(this, "maxParticles");
      __publicField(this, "initialSpeed");
      __publicField(this, "particleScale");
      __publicField(this, "size");
      __publicField(this, "time", 0);
      __publicField(this, "count", 0);
      /**
       * @type {Object3D[]}
       */
      __privateAdd(this, _objects, []);
      /**
      * @type {number[][]}
      */
      __privateAdd(this, _velocities, []);
      __privateAdd(this, _speeds, []);
      __privateAdd(this, _direction, [0, 0, 0]);
    }
    start() {
      __privateSet(this, _objects, this.engine.scene.addObjects(this.maxParticles, null, this.maxParticles));
      for (let i = 0; i < this.maxParticles; ++i) {
        __privateGet(this, _velocities).push([Math.random() / 4 - 0.125, -Math.random() - 0.2, Math.random() / 4 - 0.125]);
        let obj = __privateGet(this, _objects)[i];
        obj.name = "particle" + this.count.toString();
        let mesh = obj.addComponent(MeshComponent);
        mesh.mesh = this.mesh;
        mesh.material = this.material;
        obj.scaleLocal([0, 0, 0]);
      }
      for (let i = 0; i < this.maxParticles; ++i) {
        this.spawn();
      }
    }
    update(dt) {
      let origin = vec3_exports.fromValues(0, 0, 0);
      let distance3 = vec3_exports.fromValues(0, 0, 0);
      for (let i = 0; i < Math.min(this.count, __privateGet(this, _objects).length); ++i) {
        quat2_exports.getTranslation(origin, __privateGet(this, _objects)[i].getTransformWorld());
        const vel = __privateGet(this, _velocities)[i];
        if (origin[0] + vel[0] * dt > 8)
          origin[0] -= 16;
        else if (origin[0] + vel[0] * dt <= -8)
          origin[0] += 16;
        if (origin[2] + vel[2] * dt > 8)
          origin[2] -= 16;
        else if (origin[2] + vel[2] * dt <= -8)
          origin[2] += 16;
        if (origin[1] + vel[1] * dt <= 0) {
          origin[1] = 5;
          __privateGet(this, _objects)[i].setPositionWorld(origin);
        }
      }
      for (let i = 0; i < Math.min(this.count, __privateGet(this, _objects).length); ++i) {
        vec3_exports.scale(distance3, __privateGet(this, _velocities)[i], dt);
        __privateGet(this, _objects)[i].translateWorld(distance3);
      }
    }
    /** Spawn a particle */
    spawn() {
      let index = this.count % this.maxParticles;
      let obj = __privateGet(this, _objects)[index];
      obj.resetTransform();
      obj.scaleLocal([this.particleScale, this.particleScale, this.particleScale]);
      obj.getComponent(MeshComponent).active = true;
      obj.translateWorld([Math.random() * this.size - this.size / 2, Math.random() * 5, Math.random() * this.size - this.size / 2]);
      this.count += 1;
    }
  };
  _objects = new WeakMap();
  _velocities = new WeakMap();
  _speeds = new WeakMap();
  _direction = new WeakMap();
  __publicField(SnowParticles, "TypeName", "snow-particles");
  __decorate6([
    property.mesh()
  ], SnowParticles.prototype, "mesh", void 0);
  __decorate6([
    property.material()
  ], SnowParticles.prototype, "material", void 0);
  __decorate6([
    property.float(0.1)
  ], SnowParticles.prototype, "delay", void 0);
  __decorate6([
    property.int(1500)
  ], SnowParticles.prototype, "maxParticles", void 0);
  __decorate6([
    property.float(15)
  ], SnowParticles.prototype, "initialSpeed", void 0);
  __decorate6([
    property.float(0.01)
  ], SnowParticles.prototype, "particleScale", void 0);
  __decorate6([
    property.int(16)
  ], SnowParticles.prototype, "size", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/components/tags.js
  var __decorate7 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var Tags = class extends Component {
    tags;
    /**
     * @param {string} tag the tag to test
     */
    hasTag(tag) {
      const tags = this.tags.split(/\W+/g);
      return !!~tags.indexOf(tag);
    }
  };
  __publicField(Tags, "TypeName", "tags");
  __decorate7([
    property.string()
  ], Tags.prototype, "tags", void 0);

  // node_modules/@sorskoot/wonderland-components/dist/utils/rng.js
  var FRAC = 23283064365386963e-26;
  var RNG = class {
    _seed = 0;
    _s0 = 0;
    _s1 = 0;
    _s2 = 0;
    _c = 0;
    getSeed() {
      return this._seed;
    }
    /**
     * Seed the number generator
     * @type {number} seed - Seed value
     */
    setSeed(seed) {
      seed = seed < 1 ? 1 / seed : seed;
      this._seed = seed;
      this._s0 = (seed >>> 0) * FRAC;
      seed = seed * 69069 + 1 >>> 0;
      this._s1 = seed * FRAC;
      seed = seed * 69069 + 1 >>> 0;
      this._s2 = seed * FRAC;
      this._c = 1;
      return this;
    }
    /**
     * @returns Pseudorandom value [0,1), uniformly distributed
     */
    getUniform() {
      let t = 2091639 * this._s0 + this._c * FRAC;
      this._s0 = this._s1;
      this._s1 = this._s2;
      this._c = t | 0;
      this._s2 = t - this._c;
      return this._s2;
    }
    /**
     * @param {number} lowerBound The lower end of the range to return a value from, inclusive
     * @param {number} upperBound The upper end of the range to return a value from, inclusive
     * @returns Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value
     */
    getUniformInt(lowerBound, upperBound) {
      let max3 = Math.max(lowerBound, upperBound);
      let min3 = Math.min(lowerBound, upperBound);
      return Math.floor(this.getUniform() * (max3 - min3 + 1)) + min3;
    }
    /**
     * @param mean Mean value
     * @param stddev Standard deviation. ~95% of the absolute values will be lower than 2*stddev.
     * @returns A normally distributed pseudorandom value
     */
    getNormal(mean = 0, stddev = 1) {
      let u, v, r;
      do {
        u = 2 * this.getUniform() - 1;
        v = 2 * this.getUniform() - 1;
        r = u * u + v * v;
      } while (r > 1 || r == 0);
      let gauss = u * Math.sqrt(-2 * Math.log(r) / r);
      return mean + gauss * stddev;
    }
    /**
     * @returns Pseudorandom value [1,100] inclusive, uniformly distributed
     */
    getPercentage() {
      return 1 + Math.floor(this.getUniform() * 100);
    }
    /**
     * @param {Array} array Array to pick a random item from
     * @returns Randomly picked item, null when length=0
     */
    getItem(array) {
      if (!array.length) {
        return null;
      }
      return array[Math.floor(this.getUniform() * array.length)];
    }
    /**
     * @param {Array} array Array to randomize
     * @returns New array with randomized items
     */
    shuffle(array) {
      let result = [];
      let clone7 = array.slice();
      while (clone7.length) {
        let index = clone7.indexOf(this.getItem(clone7));
        result.push(clone7.splice(index, 1)[0]);
      }
      return result;
    }
    /**
     * @param {Object} data key = whatever, value=weight (relative probability)
     * @returns whatever
     */
    getWeightedValue(data) {
      let total = 0;
      for (let id2 in data) {
        total += data[id2];
      }
      let random4 = this.getUniform() * total;
      let id, part = 0;
      for (id in data) {
        part += data[id];
        if (random4 < part) {
          return id;
        }
      }
      return id;
    }
    /**
     * Get RNG state. Useful for storing the state and re-setting it via setState.
     * @returns Internal state
     */
    getState() {
      return [this._s0, this._s1, this._s2, this._c];
    }
    /**
     * Set a previously retrieved state.
     */
    setState(state) {
      this._s0 = state[0];
      this._s1 = state[1];
      this._s2 = state[2];
      this._c = state[3];
      return this;
    }
    /**
     * Returns a cloned RNG
     */
    clone() {
      let clone7 = new RNG();
      return clone7.setState(this.getState());
    }
  };
  var rng = new RNG().setSeed(Date.now());

  // node_modules/@sorskoot/wonderland-components/dist/utils/ObjectCache.js
  var ObjectCache = class {
    #objects;
    engine;
    name;
    cacheSize;
    index;
    /**
     *
     * @param {WonderlandEngine} engine
     * @param {string} name
     * @param {number} cacheSize
     * @param {Object3D} parent
     * @param {number} components
     */
    constructor(engine, name, cacheSize, parent, components) {
      this.engine = engine;
      this.name = name;
      console.log(`creating cache: ${name} with ${cacheSize} elements`);
      this.cacheSize = cacheSize;
      this.#objects = this.engine.scene.addObjects(cacheSize, parent, components);
      this.index = 0;
    }
    reset() {
      this.index = 0;
      this.#objects.forEach((obj) => {
        obj.getComponents().forEach((c) => {
          c.active = false;
        });
        obj.parent = null;
        obj.resetPositionRotation();
      });
    }
    getItem() {
      if (this.index >= this.cacheSize) {
        console.warn(`Cache ${this.name} ran out of space`);
        return;
      }
      let obj = this.#objects[this.index];
      this.index++;
      return obj;
    }
  };

  // node_modules/@sorskoot/wonderland-components/dist/utils/wlUtils.js
  function cloneObject(engine, object, cache) {
    if (!object || !object.parent) {
      console.log("can't clone undefined object");
      return;
    }
    let cloned;
    if (cache) {
      cloned = cache.getItem();
    }
    if (!cloned) {
      console.error("no cache available, cloning object");
      cloned = engine.scene.addObject(object.parent);
    }
    let components = object.getComponents();
    const comp = cloned.getComponents();
    for (let i = 0; i < components.length; i++) {
      if (components[i].type == "mesh") {
        const m = comp.find((c) => c.type == "mesh" && c.active == false);
        const original = components[i];
        if (m) {
          m.mesh = original.mesh;
          m.material = original.material;
          m.skin = original.skin;
          m.active = true;
        } else {
          cloned.addComponent("mesh", {
            mesh: original.mesh,
            material: original.material,
            skin: original.skin
          });
        }
      } else if (components[i].type == "collision") {
        const c = comp.find((c2) => c2.type == "collision" && c2.active == false);
        const original = components[i];
        if (c) {
          c.collider = original.collider;
          c.extents = original.extents;
          c.group = original.group;
          c.active = true;
        } else {
          cloned.addComponent("collision", {
            collider: original.collider,
            extents: original.extents,
            group: original.group
          });
        }
      } else if (components[i].type == "animation") {
        const c = comp.find((c2) => c2.type == "animation" && c2.active == false);
        const original = components[i];
        if (c) {
          c.animation = original.animation;
          c.playCount = original.playCount;
          c.active = true;
        } else
          cloned.addComponent("animation", {
            animation: original.animation,
            playCount: original.playCount
          });
      } else if (components[i].type == "tags") {
        const c = comp.find((c2) => c2.type == "tags" && c2.active == false);
        const original = components[i];
        if (c) {
          c.tags = original.tags;
          c.active = true;
        } else
          cloned.addComponent(Tags, {
            tags: original.tags
          });
      } else if (components[i].type == "flipbook") {
        const c = comp.find((c2) => c2.type == "flipbook" && c2.active == false);
        const original = components[i];
        if (c) {
          c.base = original.base;
          c.url = original.url;
          c.urlEmissive = original.urlEmissive;
          c.columns = original.columns;
          c.rows = original.rows;
          c.speed = original.speed;
          c.active = true;
        } else
          cloned.addComponent(Flipbook, {
            base: original.base,
            url: original.url,
            urlEmissive: original.urlEmissive,
            columns: original.columns,
            rows: original.rows,
            speed: original.speed
          });
      } else {
        const c = comp.find((c2) => c2.type == components[i].type && c2.active == false);
        if (c) {
          c.active = true;
        } else {
          cloned.addComponent(components[i].type, components[i]);
        }
      }
    }
    let pos = [];
    let rot = [];
    let scale7 = [];
    object.getPositionLocal(pos);
    object.getRotationLocal(rot);
    object.getScalingLocal(scale7);
    cloned.resetPositionRotation();
    cloned.setPositionLocal(pos);
    cloned.setRotationLocal(rot);
    cloned.setScalingLocal(scale7);
    cloned.name = object.name;
    if (object.children.length > 0) {
      for (let i = 0; i < object.children.length; i++) {
        let childClone = cloneObject(engine, object.children[i], cache);
        childClone.parent = cloned;
      }
    }
    cloned.setDirty();
    return cloned;
  }
  function findChild(object, childName) {
    return object.children.filter((o) => o.name == childName)[0];
  }
  function replaceAt(string, index, replacement) {
    return string.slice(0, index) + replacement + string.slice(index + replacement.length);
  }
  var wlUtils = {
    cloneObject,
    findChild,
    replaceAt
  };

  // node_modules/@sorskoot/wonderland-components/dist/utils/arrayHelpers.js
  function shuffleArray(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = rng.getUniformInt(0, i + 1);
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
  }

  // node_modules/@sorskoot/wonderland-components/dist/utils/lerp.js
  var Easing = {
    /**
     * Linear easing function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns The same value as `t`, providing a linear progression.
     */
    Linear: (t) => t,
    /**
     * Quadratic ease-in function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing an accelerated (quadratic) progression from 0 to 1.
     */
    InQuad: (t) => t * t,
    /**
     * Quadratic ease-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing a decelerated (quadratic) progression from 0 to 1.
     */
    OutQuad: (t) => 1 - (1 - t) * (1 - t),
    /**
     * Quadratic ease-in-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value that accelerates in, then decelerates out, providing a smooth transition between motion states.
     */
    InOutQuad: (t) => t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2,
    /**
     * Cubic ease-in function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing an accelerated (cubic) progression from 0 to 1.
     */
    InCubic: (t) => Math.pow(t, 3),
    /**
     * Cubic ease-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value representing an decelerated (cubic) progression from 0 to 1.
     */
    OutCubic: (t) => Math.pow(t - 1, 3) + 1,
    /**
     * Cubic ease-in-out function.
     * @param t A value between 0 and 1 representing the progress of the animation.
     * @returns A value that accelerates in, then decelerates out, providing a smooth transition between motion states.
     */
    InOutCubic: (t) => {
      if (t < 0.5) {
        return Math.pow(2 * t, 3) / 2;
      } else {
        return (Math.pow(2 * t - 2, 3) + 2) / 2;
      }
    }
  };
  function lerp6(start, end, t, easing = Easing.Linear) {
    if (typeof easing === "function") {
      easing = getEasingFunction(easing);
    }
    return start * (1 - easing(t)) + end * easing(t);
  }
  function getEasingFunction(type) {
    return typeof type === "function" ? type : Easing.Linear;
  }
  function clamp(value, min3, max3) {
    return Math.min(Math.max(value, min3), max3);
  }

  // node_modules/@sorskoot/wonderland-components/dist/utils/queue.js
  var Queue = class {
    items = [];
    enqueue(item) {
      this.items.push(item);
    }
    dequeue() {
      return this.items.shift();
    }
    isEmpty() {
      return this.items.length === 0;
    }
  };

  // node_modules/@sorskoot/wonderland-components/dist/utils/rngWithWeight.js
  function rngWithWeight(array, itemsWithWeights) {
    let totalWeight = itemsWithWeights.reduce((total, itemWithWeight) => {
      return total + itemWithWeight;
    }, 0);
    let randomValue = rng.getUniformInt(0, totalWeight);
    for (let i = 0; i < itemsWithWeights.length; i++) {
      randomValue -= itemsWithWeights[i];
      if (randomValue <= 0) {
        return array[i];
      }
    }
    return null;
  }

  // node_modules/@wonderlandengine/components/dist/index.js
  var dist_exports2 = {};
  __export(dist_exports2, {
    ARCamera8thwall: () => ARCamera8thwall,
    Anchor: () => Anchor,
    Cursor: () => Cursor,
    CursorTarget: () => CursorTarget,
    DebugObject: () => DebugObject,
    DeviceOrientationLook: () => DeviceOrientationLook,
    FingerCursor: () => FingerCursor,
    FixedFoveation: () => FixedFoveation,
    HandTracking: () => HandTracking,
    HitTestLocation: () => HitTestLocation,
    HowlerAudioListener: () => HowlerAudioListener,
    HowlerAudioSource: () => HowlerAudioSource,
    ImageTexture: () => ImageTexture,
    MouseLookComponent: () => MouseLookComponent,
    PlaneDetection: () => PlaneDetection,
    PlayerHeight: () => PlayerHeight,
    TargetFramerate: () => TargetFramerate,
    TeleportComponent: () => TeleportComponent,
    Trail: () => Trail,
    TwoJointIkSolver: () => TwoJointIkSolver,
    VideoTexture: () => VideoTexture,
    VrModeActiveSwitch: () => VrModeActiveSwitch,
    Vrm: () => Vrm,
    WasdControlsComponent: () => WasdControlsComponent,
    isPointLocalOnXRPlanePolygon: () => isPointLocalOnXRPlanePolygon,
    isPointWorldOnXRPlanePolygon: () => isPointWorldOnXRPlanePolygon
  });

  // node_modules/@wonderlandengine/components/dist/8thwall-camera.js
  var ARCamera8thwall = class extends Component {
    /* 8thwall camera pipeline module name */
    name = "wonderland-engine-8thwall-camera";
    started = false;
    view = null;
    // cache camera
    position = [0, 0, 0];
    // cache 8thwall cam position
    rotation = [0, 0, 0, -1];
    // cache 8thwall cam rotation
    glTextureRenderer = null;
    // cache XR8.GlTextureRenderer.pipelineModule
    promptForDeviceMotion() {
      return new Promise(async (resolve, reject) => {
        window.dispatchEvent(new Event("8thwall-request-user-interaction"));
        window.addEventListener("8thwall-safe-to-request-permissions", async () => {
          try {
            const motionEvent = await DeviceMotionEvent.requestPermission();
            resolve(motionEvent);
          } catch (exception) {
            reject(exception);
          }
        });
      });
    }
    async getPermissions() {
      if (DeviceMotionEvent && DeviceMotionEvent.requestPermission) {
        try {
          const result = await DeviceMotionEvent.requestPermission();
          if (result !== "granted") {
            throw new Error("MotionEvent");
          }
        } catch (exception) {
          if (exception.name === "NotAllowedError") {
            const motionEvent = await this.promptForDeviceMotion();
            if (motionEvent !== "granted") {
              throw new Error("MotionEvent");
            }
          } else {
            throw new Error("MotionEvent");
          }
        }
      }
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
        });
        stream.getTracks().forEach((track) => {
          track.stop();
        });
      } catch (exception) {
        throw new Error("Camera");
      }
    }
    init() {
      this.view = this.object.getComponent("view");
      this.onUpdate = this.onUpdate.bind(this);
      this.onAttach = this.onAttach.bind(this);
      this.onException = this.onException.bind(this);
      this.onCameraStatusChange = this.onCameraStatusChange.bind(this);
    }
    async start() {
      this.view = this.object.getComponent("view");
      if (!this.useCustomUIOverlays) {
        OverlaysHandler.init();
      }
      try {
        await this.getPermissions();
      } catch (error) {
        window.dispatchEvent(new CustomEvent("8thwall-permission-fail", { detail: error }));
        return;
      }
      await this.waitForXR8();
      XR8.XrController.configure({
        disableWorldTracking: false
      });
      this.glTextureRenderer = XR8.GlTextureRenderer.pipelineModule();
      XR8.addCameraPipelineModules([
        this.glTextureRenderer,
        XR8.XrController.pipelineModule(),
        this
      ]);
      const config2 = {
        cameraConfig: {
          direction: XR8.XrConfig.camera().BACK
        },
        canvas: Module.canvas,
        allowedDevices: XR8.XrConfig.device().ANY,
        ownRunLoop: false
      };
      XR8.run(config2);
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onAttach(params) {
      this.started = true;
      this.engine.scene.colorClearEnabled = false;
      const gl = Module.ctx;
      const rot = this.object.rotationWorld;
      const pos = this.object.getTranslationWorld([]);
      this.position = Array.from(pos);
      this.rotation = Array.from(rot);
      XR8.XrController.updateCameraProjectionMatrix({
        origin: { x: pos[0], y: pos[1], z: pos[2] },
        facing: { x: rot[0], y: rot[1], z: rot[2], w: rot[3] },
        cam: {
          pixelRectWidth: Module.canvas.width,
          pixelRectHeight: Module.canvas.height,
          nearClipPlane: this.view.near,
          farClipPlane: this.view.far
        }
      });
      this.engine.scene.onPreRender.push(() => {
        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
        XR8.runPreRender(Date.now());
        XR8.runRender();
      });
      this.engine.scene.onPostRender.push(() => {
        XR8.runPostRender(Date.now());
      });
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onCameraStatusChange(e) {
      if (e && e.status === "failed") {
        this.onException(new Error(`Camera failed with status: ${e.status}`));
      }
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onUpdate(e) {
      if (!e.processCpuResult.reality)
        return;
      const { rotation, position, intrinsics } = e.processCpuResult.reality;
      this.rotation[0] = rotation.x;
      this.rotation[1] = rotation.y;
      this.rotation[2] = rotation.z;
      this.rotation[3] = rotation.w;
      this.position[0] = position.x;
      this.position[1] = position.y;
      this.position[2] = position.z;
      if (intrinsics) {
        const projectionMatrix = this.view.projectionMatrix;
        for (let i = 0; i < 16; i++) {
          if (Number.isFinite(intrinsics[i])) {
            projectionMatrix[i] = intrinsics[i];
          }
        }
      }
      if (position && rotation) {
        this.object.rotationWorld = this.rotation;
        this.object.setTranslationWorld(this.position);
      }
    }
    /**
     * @private
     * 8thwall pipeline function
     */
    onException(error) {
      console.error("8thwall exception:", error);
      window.dispatchEvent(new CustomEvent("8thwall-error", { detail: error }));
    }
    waitForXR8() {
      return new Promise((resolve, _rej) => {
        if (window.XR8) {
          resolve();
        } else {
          window.addEventListener("xrloaded", () => resolve());
        }
      });
    }
  };
  __publicField(ARCamera8thwall, "TypeName", "8thwall-camera");
  __publicField(ARCamera8thwall, "Properties", {
    /** Override the WL html overlays for handling camera/motion permissions and error handling */
    useCustomUIOverlays: { type: Type.Bool, default: false }
  });
  var OverlaysHandler = {
    init: function() {
      this.handleRequestUserInteraction = this.handleRequestUserInteraction.bind(this);
      this.handlePermissionFail = this.handlePermissionFail.bind(this);
      this.handleError = this.handleError.bind(this);
      window.addEventListener("8thwall-request-user-interaction", this.handleRequestUserInteraction);
      window.addEventListener("8thwall-permission-fail", this.handlePermissionFail);
      window.addEventListener("8thwall-error", this.handleError);
    },
    handleRequestUserInteraction: function() {
      const overlay = this.showOverlay(requestPermissionOverlay);
      window.addEventListener("8thwall-safe-to-request-permissions", () => {
        overlay.remove();
      });
    },
    handlePermissionFail: function(_reason) {
      this.showOverlay(failedPermissionOverlay);
    },
    handleError: function(_error) {
      this.showOverlay(runtimeErrorOverlay);
    },
    showOverlay: function(htmlContent) {
      const overlay = document.createElement("div");
      overlay.innerHTML = htmlContent;
      document.body.appendChild(overlay);
      return overlay;
    }
  };
  var requestPermissionOverlay = `
<style>
  #request-permission-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.5);
    text-align: center;
    font-family: sans-serif;
  }

  .request-permission-overlay_title {
    margin: 30px;
    font-size: 32px;
  }

  .request-permission-overlay_button {
    background-color: #e80086;
    font-size: 22px;
    padding: 10px 30px;
    color: #fff;
    border-radius: 15px;
    border: none;
  }
</style>

<div id="request-permission-overlay">
  <div class="request-permission-overlay_title">This app requires to use your camera and motion sensors</div>

  <button class="request-permission-overlay_button" onclick="window.dispatchEvent(new Event('8thwall-safe-to-request-permissions'))">OK</button>
</div>`;
  var failedPermissionOverlay = `
<style>
  #failed-permission-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.5);
    text-align: center;
    font-family: sans-serif;
  }

  .failed-permission-overlay_title {
    margin: 30px;
    font-size: 32px;
  }

  .failed-permission-overlay_button {
    background-color: #e80086;
    font-size: 22px;
    padding: 10px 30px;
    color: #fff;
    border-radius: 15px;
    border: none;
  }
</style>

<div id="failed-permission-overlay">
  <div class="failed-permission-overlay_title">Failed to grant permissions. Reset the the permissions and refresh the page.</div>

  <button class="failed-permission-overlay_button" onclick="window.location.reload()">Refresh the page</button>
</div>`;
  var runtimeErrorOverlay = `
<style>
  #wall-error-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 999;
    color: #fff;
    background-color: rgba(0, 0, 0, 0.5);
    text-align: center;
    font-family: sans-serif;
  }

  .wall-error-overlay_title {
    margin: 30px;
    font-size: 32px;
  }

  .wall-error-overlay_button {
    background-color: #e80086;
    font-size: 22px;
    padding: 10px 30px;
    color: #fff;
    border-radius: 15px;
    border: none;
  }
</style>

<div id="wall-error-overlay">
  <div class="wall-error-overlay_title">Error has occurred. Please reload the page</div>

  <button class="wall-error-overlay_button" onclick="window.location.reload()">Reload</button>
</div>`;

  // node_modules/@wonderlandengine/components/dist/utils/webxr.js
  var tempVec = new Float32Array(3);
  var tempQuat = new Float32Array(4);
  function setXRRigidTransformLocal(o, transform) {
    const r = transform.orientation;
    tempQuat[0] = r.x;
    tempQuat[1] = r.y;
    tempQuat[2] = r.z;
    tempQuat[3] = r.w;
    const t = transform.position;
    tempVec[0] = t.x;
    tempVec[1] = t.y;
    tempVec[2] = t.z;
    o.resetTranslationRotation();
    o.transformLocal.set(tempQuat);
    o.translate(tempVec);
  }

  // node_modules/@wonderlandengine/components/dist/anchor.js
  var __decorate8 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var tempVec3 = new Float32Array(3);
  var tempQuat2 = new Float32Array(4);
  var _anchors, _addAnchor, addAnchor_fn, _removeAnchor, removeAnchor_fn, _getFrame, getFrame_fn, _createAnchor, createAnchor_fn, _onAddAnchor, onAddAnchor_fn, _onRestoreAnchor, onRestoreAnchor_fn, _onCreate, onCreate_fn;
  var _Anchor = class extends Component {
    constructor() {
      super(...arguments);
      __privateAdd(this, _getFrame);
      __privateAdd(this, _createAnchor);
      __privateAdd(this, _onAddAnchor);
      __privateAdd(this, _onRestoreAnchor);
      __privateAdd(this, _onCreate);
      __publicField(this, "persist", false);
      /** Unique identifier to load a persistent anchor from, or empty/null if unknown */
      __publicField(this, "uuid", null);
      /** The xrAnchor, if created */
      __publicField(this, "xrAnchor", null);
      /** Emits events when the anchor is created either by being restored or newly created */
      __publicField(this, "onCreate", new Emitter());
      /** Whether the anchor is currently being tracked */
      __publicField(this, "visible", false);
      /** Emits an event when this anchor starts tracking */
      __publicField(this, "onTrackingFound", new Emitter());
      /** Emits an event when this anchor stops tracking */
      __publicField(this, "onTrackingLost", new Emitter());
      /** XRFrame to use for creating the anchor */
      __publicField(this, "xrFrame", null);
      /** XRHitTestResult to use for creating the anchor */
      __publicField(this, "xrHitResult", null);
    }
    /** Retrieve all anchors of the current scene */
    static getAllAnchors() {
      return __privateGet(_Anchor, _anchors);
    }
    /**
     * Create a new anchor
     *
     * @param o Object to attach the component to
     * @param params Parameters for the anchor component
     * @param frame XRFrame to use for anchor cration, if null, will use the current frame if available
     * @param hitResult Optional hit-test result to create the anchor with
     * @returns Promise for the newly created anchor component
     */
    static create(o, params, frame, hitResult) {
      const a = o.addComponent(_Anchor, { ...params, active: false });
      if (a === null)
        return null;
      a.xrHitResult = hitResult ?? null;
      a.xrFrame = frame ?? null;
      a.onCreate.once(() => (a.xrFrame = null, a.xrHitResult = null));
      a.active = true;
      return a.onCreate.promise();
    }
    start() {
      if (this.uuid && this.engine.xr) {
        this.persist = true;
        if (this.engine.xr.session.restorePersistentAnchor === void 0) {
          console.warn("anchor: Persistent anchors are not supported by your client. Ignoring persist property.");
        }
        this.engine.xr.session.restorePersistentAnchor(this.uuid).then(__privateMethod(this, _onRestoreAnchor, onRestoreAnchor_fn).bind(this));
      } else if (__privateMethod(this, _getFrame, getFrame_fn).call(this)) {
        __privateMethod(this, _createAnchor, createAnchor_fn).call(this).then(__privateMethod(this, _onAddAnchor, onAddAnchor_fn).bind(this));
      } else {
        throw new Error("Anchors can only be created during the XR frame in an active XR session");
      }
    }
    update() {
      if (!this.xrAnchor || !this.engine.xr)
        return;
      const pose = this.engine.xr.frame.getPose(this.xrAnchor.anchorSpace, this.engine.xr.currentReferenceSpace);
      const visible = !!pose;
      if (visible != this.visible) {
        this.visible = visible;
        (visible ? this.onTrackingFound : this.onTrackingLost).notify(this);
      }
      if (pose) {
        setXRRigidTransformLocal(this.object, pose.transform);
      }
    }
    onDestroy() {
      var _a;
      __privateMethod(_a = _Anchor, _removeAnchor, removeAnchor_fn).call(_a, this);
    }
  };
  var Anchor = _Anchor;
  _anchors = new WeakMap();
  _addAnchor = new WeakSet();
  addAnchor_fn = function(anchor) {
    __privateGet(_Anchor, _anchors).push(anchor);
  };
  _removeAnchor = new WeakSet();
  removeAnchor_fn = function(anchor) {
    const index = __privateGet(_Anchor, _anchors).indexOf(anchor);
    if (index < 0)
      return;
    __privateGet(_Anchor, _anchors).splice(index, 1);
  };
  _getFrame = new WeakSet();
  getFrame_fn = function() {
    return this.xrFrame || this.engine.xr.frame;
  };
  _createAnchor = new WeakSet();
  createAnchor_fn = async function() {
    if (!__privateMethod(this, _getFrame, getFrame_fn).call(this).createAnchor) {
      throw new Error("Cannot create anchor - anchors not supported, did you enable the 'anchors' WebXR feature?");
    }
    if (this.xrHitResult) {
      if (this.xrHitResult.createAnchor === void 0) {
        throw new Error("Requested anchor on XRHitTestResult, but WebXR hit-test feature is not available.");
      }
      return this.xrHitResult.createAnchor();
    } else {
      this.object.getTranslationWorld(tempVec3);
      tempQuat2.set(this.object.rotationWorld);
      const rotation = tempQuat2;
      const anchorPose = new XRRigidTransform({ x: tempVec3[0], y: tempVec3[1], z: tempVec3[2] }, { x: rotation[0], y: rotation[1], z: rotation[2], w: rotation[3] });
      return __privateMethod(this, _getFrame, getFrame_fn).call(this)?.createAnchor(anchorPose, this.engine.xr.currentReferenceSpace);
    }
  };
  _onAddAnchor = new WeakSet();
  onAddAnchor_fn = function(anchor) {
    if (!anchor)
      return;
    if (this.persist) {
      if (anchor.requestPersistentHandle !== void 0) {
        anchor.requestPersistentHandle().then((uuid) => {
          var _a;
          this.uuid = uuid;
          __privateMethod(this, _onCreate, onCreate_fn).call(this, anchor);
          __privateMethod(_a = _Anchor, _addAnchor, addAnchor_fn).call(_a, this);
        });
        return;
      } else {
        console.warn("anchor: Persistent anchors are not supported by your client. Ignoring persist property.");
      }
    }
    __privateMethod(this, _onCreate, onCreate_fn).call(this, anchor);
  };
  _onRestoreAnchor = new WeakSet();
  onRestoreAnchor_fn = function(anchor) {
    __privateMethod(this, _onCreate, onCreate_fn).call(this, anchor);
  };
  _onCreate = new WeakSet();
  onCreate_fn = function(anchor) {
    this.xrAnchor = anchor;
    this.onCreate.notify(this);
  };
  __privateAdd(Anchor, _addAnchor);
  __privateAdd(Anchor, _removeAnchor);
  __publicField(Anchor, "TypeName", "anchor");
  /* Static management of all anchors */
  __privateAdd(Anchor, _anchors, []);
  __decorate8([
    property.bool(false)
  ], Anchor.prototype, "persist", void 0);
  __decorate8([
    property.string()
  ], Anchor.prototype, "uuid", void 0);

  // node_modules/@wonderlandengine/components/dist/cursor-target.js
  var CursorTarget = class extends Component {
    /** Emitter for events when the target is hovered */
    onHover = new Emitter();
    /** Emitter for events when the target is unhovered */
    onUnhover = new Emitter();
    /** Emitter for events when the target is clicked */
    onClick = new Emitter();
    /** Emitter for events when the cursor moves on the target */
    onMove = new Emitter();
    /** Emitter for events when the user pressed the select button on the target */
    onDown = new Emitter();
    /** Emitter for events when the user unpressed the select button on the target */
    onUp = new Emitter();
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onHover.add(f);
     */
    addHoverFunction(f2) {
      this.onHover.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onHover.remove(f);
     */
    removeHoverFunction(f2) {
      this.onHover.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onUnhover.add(f);
     */
    addUnHoverFunction(f2) {
      this.onUnhover.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onUnhover.remove(f);
     */
    removeUnHoverFunction(f2) {
      this.onUnhover.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    this.onClick.add(f);
     */
    addClickFunction(f2) {
      this.onClick.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onClick.remove(f);
     */
    removeClickFunction(f2) {
      this.onClick.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onMove.add(f);
     */
    addMoveFunction(f2) {
      this.onMove.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onMove.remove(f);
     */
    removeMoveFunction(f2) {
      this.onMove.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onDown.add(f);
     */
    addDownFunction(f2) {
      this.onDown.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onDown.remove(f);
     */
    removeDownFunction(f2) {
      this.onDown.remove(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onUp.add(f);
     */
    addUpFunction(f2) {
      this.onUp.add(f2);
    }
    /**
     * @deprecated Use the emitter instead.
     *
     * @example
     *    component.onUp.remove(f);
     */
    removeUpFunction(f2) {
      this.onUp.remove(f2);
    }
  };
  __publicField(CursorTarget, "TypeName", "cursor-target");
  __publicField(CursorTarget, "Properties", {});

  // node_modules/@wonderlandengine/components/dist/hit-test-location.js
  var __decorate9 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var HitTestLocation = class extends Component {
    tempScaling = new Float32Array(3);
    visible = false;
    xrHitTestSource = null;
    /** Reference space for creating the hit test when the session starts */
    xrReferenceSpace = null;
    /**
     * For maintaining backwards compatibility: Whether to scale the object to 0 and back.
     * @deprecated Use onHitLost and onHitFound instead.
     */
    scaleObject = true;
    /** Emits an event when the hit test switches from visible to invisible */
    onHitLost = new Emitter();
    /** Emits an event when the hit test switches from invisible to visible */
    onHitFound = new Emitter();
    onSessionStartCallback = null;
    onSessionEndCallback = null;
    start() {
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
      if (this.scaleObject) {
        this.tempScaling.set(this.object.scalingLocal);
        this.object.scale([0, 0, 0]);
        this.onHitLost.add(() => {
          this.tempScaling.set(this.object.scalingLocal);
          this.object.scale([0, 0, 0]);
        });
        this.onHitFound.add(() => {
          this.object.scalingLocal.set(this.tempScaling);
          this.object.setDirty();
        });
      }
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    update() {
      const wasVisible = this.visible;
      if (this.xrHitTestSource) {
        const frame = this.engine.xrFrame;
        if (!frame)
          return;
        let hitTestResults = frame.getHitTestResults(this.xrHitTestSource);
        if (hitTestResults.length > 0) {
          let pose = hitTestResults[0].getPose(this.engine.xr.currentReferenceSpace);
          this.visible = !!pose;
          if (pose) {
            setXRRigidTransformLocal(this.object, pose.transform);
          }
        } else {
          this.visible = false;
        }
      }
      if (this.visible != wasVisible) {
        (this.visible ? this.onHitFound : this.onHitLost).notify(this);
      }
    }
    getHitTestResults(frame = this.engine.xr?.frame ?? null) {
      if (!frame)
        return [];
      if (!this.xrHitTestSource)
        return [];
      return frame.getHitTestResults(this.xrHitTestSource);
    }
    onXRSessionStart(session) {
      if (session.requestHitTestSource === void 0) {
        console.error("hit-test-location: hit test feature not available. Deactivating component.");
        this.active = false;
        return;
      }
      session.requestHitTestSource({
        space: this.xrReferenceSpace ?? this.engine.xr.referenceSpaceForType("viewer")
      }).then((hitTestSource) => {
        this.xrHitTestSource = hitTestSource;
      }).catch(console.error);
    }
    onXRSessionEnd() {
      if (!this.xrHitTestSource)
        return;
      this.xrHitTestSource.cancel();
      this.xrHitTestSource = null;
    }
  };
  __publicField(HitTestLocation, "TypeName", "hit-test-location");
  __decorate9([
    property.bool(true)
  ], HitTestLocation.prototype, "scaleObject", void 0);

  // node_modules/@wonderlandengine/components/dist/cursor.js
  var __decorate10 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var tempVec2 = new Float32Array(3);
  var CursorTargetEmitters = class {
    /** Emitter for events when the target is hovered */
    onHover = new Emitter();
    /** Emitter for events when the target is unhovered */
    onUnhover = new Emitter();
    /** Emitter for events when the target is clicked */
    onClick = new Emitter();
    /** Emitter for events when the cursor moves on the target */
    onMove = new Emitter();
    /** Emitter for events when the user pressed the select button on the target */
    onDown = new Emitter();
    /** Emitter for events when the user unpressed the select button on the target */
    onUp = new Emitter();
  };
  var Cursor = class extends Component {
    static onRegister(engine) {
      engine.registerComponent(HitTestLocation);
    }
    _collisionMask = 0;
    _onDeactivateCallbacks = [];
    _input = null;
    _origin = new Float32Array(3);
    _cursorObjScale = new Float32Array(3);
    _direction = new Float32Array(3);
    _projectionMatrix = new Float32Array(16);
    _viewComponent = null;
    _isDown = false;
    _lastIsDown = false;
    _arTouchDown = false;
    _lastPointerPos = new Float32Array(2);
    _lastCursorPosOnTarget = new Float32Array(3);
    _cursorRayScale = new Float32Array(3);
    _hitTestLocation = null;
    _hitTestObject = null;
    _onSessionStartCallback = null;
    /**
     * Whether the cursor (and cursorObject) is visible, i.e. pointing at an object
     * that matches the collision group
     */
    visible = true;
    /** Maximum distance for the cursor's ray cast */
    maxDistance = 100;
    /** Currently hovered object */
    hoveringObject = null;
    /** CursorTarget component of the currently hovered object */
    hoveringObjectTarget = null;
    /** Whether the cursor is hovering reality via hit-test */
    hoveringReality = false;
    /**
     * Global target lets you receive global cursor events on any object.
     */
    globalTarget = new CursorTargetEmitters();
    /**
     * Hit test target lets you receive cursor events for "reality", if
     * `useWebXRHitTest` is set to `true`.
     *
     * @example
     * ```js
     * cursor.hitTestTarget.onClick.add((hit, cursor) => {
     *     // User clicked on reality
     * });
     * ```
     */
    hitTestTarget = new CursorTargetEmitters();
    /** World position of the cursor */
    cursorPos = new Float32Array(3);
    /** Collision group for the ray cast. Only objects in this group will be affected by this cursor. */
    collisionGroup = 1;
    /** (optional) Object that visualizes the cursor's ray. */
    cursorRayObject = null;
    /** Axis along which to scale the `cursorRayObject`. */
    cursorRayScalingAxis = 2;
    /** (optional) Object that visualizes the cursor's hit location. */
    cursorObject = null;
    /** Handedness for VR cursors to accept trigger events only from respective controller. */
    handedness = 0;
    /** Mode for raycasting, whether to use PhysX or simple collision components */
    rayCastMode = 0;
    /** Whether to set the CSS style of the mouse cursor on desktop */
    styleCursor = true;
    /**
     * Use WebXR hit-test if available.
     *
     * Attaches a hit-test-location component to the cursorObject, which will be used
     * by the cursor to send events to the hitTestTarget with HitTestResult.
     */
    useWebXRHitTest = false;
    _onViewportResize = () => {
      if (!this._viewComponent)
        return;
      mat4_exports.invert(this._projectionMatrix, this._viewComponent.projectionMatrix);
    };
    start() {
      this._collisionMask = 1 << this.collisionGroup;
      if (this.handedness == 0) {
        const inputComp = this.object.getComponent("input");
        if (!inputComp) {
          console.warn("cursor component on object", this.object.name, 'was configured with handedness "input component", but object has no input component.');
        } else {
          this.handedness = inputComp.handedness || "none";
          this._input = inputComp;
        }
      } else {
        this.handedness = ["left", "right", "none"][this.handedness - 1];
      }
      this._viewComponent = this.object.getComponent(ViewComponent);
      if (this.useWebXRHitTest) {
        this._hitTestObject = this.engine.scene.addObject(this.object);
        this._hitTestLocation = this._hitTestObject.addComponent(HitTestLocation, {
          scaleObject: false
        }) ?? null;
      }
      this._onSessionStartCallback = this.setupVREvents.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this._onSessionStartCallback);
      this.engine.onResize.add(this._onViewportResize);
      this._setCursorVisibility(true);
      if (this._viewComponent != null) {
        const canvas2 = this.engine.canvas;
        const onClick = this.onClick.bind(this);
        const onPointerMove = this.onPointerMove.bind(this);
        const onPointerDown = this.onPointerDown.bind(this);
        const onPointerUp = this.onPointerUp.bind(this);
        canvas2.addEventListener("click", onClick);
        canvas2.addEventListener("pointermove", onPointerMove);
        canvas2.addEventListener("pointerdown", onPointerDown);
        canvas2.addEventListener("pointerup", onPointerUp);
        this._onDeactivateCallbacks.push(() => {
          canvas2.removeEventListener("click", onClick);
          canvas2.removeEventListener("pointermove", onPointerMove);
          canvas2.removeEventListener("pointerdown", onPointerDown);
          canvas2.removeEventListener("pointerup", onPointerUp);
        });
      }
      this._onViewportResize();
    }
    _setCursorRayTransform(hitPosition) {
      if (!this.cursorRayObject)
        return;
      const dist3 = vec3_exports.dist(this._origin, hitPosition);
      this.cursorRayObject.setTranslationLocal([0, 0, -dist3 / 2]);
      if (this.cursorRayScalingAxis != 4) {
        this.cursorRayObject.resetScaling();
        this._cursorRayScale[this.cursorRayScalingAxis] = dist3 / 2;
        this.cursorRayObject.scale(this._cursorRayScale);
      }
    }
    _setCursorVisibility(visible) {
      if (this.visible == visible)
        return;
      this.visible = visible;
      if (!this.cursorObject)
        return;
      if (visible) {
        this.cursorObject.setScalingWorld(this._cursorObjScale);
      } else {
        this.cursorObject.getScalingLocal(this._cursorObjScale);
        this.cursorObject.scale([0, 0, 0]);
      }
    }
    update() {
      if (this.engine.xr && this._arTouchDown && this._input && this.engine.xr.session.inputSources[0].handedness === "none" && this.engine.xr.session.inputSources[0].gamepad) {
        const p = this.engine.xr.session.inputSources[0].gamepad.axes;
        this._direction[0] = p[0];
        this._direction[1] = -p[1];
        this._direction[2] = -1;
        this.applyTransformAndProjectDirection();
      } else if (this.engine.xr && this._input && this._input.xrInputSource) {
        this._direction[0] = 0;
        this._direction[1] = 0;
        this._direction[2] = -1;
        this.applyTransformToDirection();
      } else if (this._viewComponent) {
        this.updateDirection();
      }
      this.rayCast(null, this.engine.xr?.frame);
      if (this.cursorObject) {
        if (this.hoveringObject && (this.cursorPos[0] != 0 || this.cursorPos[1] != 0 || this.cursorPos[2] != 0)) {
          this._setCursorVisibility(true);
          this.cursorObject.setTranslationWorld(this.cursorPos);
          this._setCursorRayTransform(this.cursorPos);
        } else {
          this._setCursorVisibility(false);
        }
      }
    }
    /* Returns the hovered cursor target, if available */
    notify(event, originalEvent) {
      const target = this.hoveringObject;
      if (target) {
        const cursorTarget = this.hoveringObjectTarget;
        if (cursorTarget)
          cursorTarget[event].notify(target, this, originalEvent ?? void 0);
        this.globalTarget[event].notify(target, this, originalEvent ?? void 0);
      }
    }
    hoverBehaviour(rayHit, hitTestResult, doClick, originalEvent) {
      const hit = !this.hoveringReality && rayHit.hitCount > 0 ? rayHit.objects[0] : null;
      if (hit) {
        if (!this.hoveringObject || !this.hoveringObject.equals(hit)) {
          if (this.hoveringObject) {
            this.notify("onUnhover", originalEvent);
          }
          this.hoveringObject = hit;
          this.hoveringObjectTarget = this.hoveringObject.getComponent(CursorTarget);
          if (this.styleCursor)
            this.engine.canvas.style.cursor = "pointer";
          this.notify("onHover", originalEvent);
        }
      } else if (this.hoveringObject) {
        this.notify("onUnhover", originalEvent);
        this.hoveringObject = null;
        this.hoveringObjectTarget = null;
        if (this.styleCursor)
          this.engine.canvas.style.cursor = "default";
      }
      if (this.hoveringObject) {
        if (this._isDown !== this._lastIsDown) {
          this.notify(this._isDown ? "onDown" : "onUp", originalEvent);
        }
        if (doClick)
          this.notify("onClick", originalEvent);
      } else if (this.hoveringReality) {
        if (this._isDown !== this._lastIsDown) {
          (this._isDown ? this.hitTestTarget.onDown : this.hitTestTarget.onUp).notify(hitTestResult, this, originalEvent ?? void 0);
        }
        if (doClick)
          this.hitTestTarget.onClick.notify(hitTestResult, this, originalEvent ?? void 0);
      }
      if (hit) {
        if (this.hoveringObject) {
          this.hoveringObject.transformPointInverseWorld(tempVec2, this.cursorPos);
        } else {
          tempVec2.set(this.cursorPos);
        }
        if (!vec3_exports.equals(this._lastCursorPosOnTarget, tempVec2)) {
          this.notify("onMove", originalEvent);
          this._lastCursorPosOnTarget.set(tempVec2);
        }
      } else if (this.hoveringReality) {
        if (!vec3_exports.equals(this._lastCursorPosOnTarget, this.cursorPos)) {
          this.hitTestTarget.onMove.notify(hitTestResult, this, originalEvent ?? void 0);
          this._lastCursorPosOnTarget.set(this.cursorPos);
        }
      } else {
        this._lastCursorPosOnTarget.set(this.cursorPos);
      }
      this._lastIsDown = this._isDown;
    }
    /**
     * Setup event listeners on session object
     * @param s WebXR session
     *
     * Sets up 'select' and 'end' events.
     */
    setupVREvents(s) {
      if (!s)
        console.error("setupVREvents called without a valid session");
      const onSelect = this.onSelect.bind(this);
      s.addEventListener("select", onSelect);
      const onSelectStart = this.onSelectStart.bind(this);
      s.addEventListener("selectstart", onSelectStart);
      const onSelectEnd = this.onSelectEnd.bind(this);
      s.addEventListener("selectend", onSelectEnd);
      this._onDeactivateCallbacks.push(() => {
        if (!this.engine.xrSession)
          return;
        s.removeEventListener("select", onSelect);
        s.removeEventListener("selectstart", onSelectStart);
        s.removeEventListener("selectend", onSelectEnd);
      });
      this._onViewportResize();
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this._onSessionStartCallback);
      this.engine.onResize.remove(this._onViewportResize);
      this._setCursorVisibility(false);
      if (this.hoveringObject)
        this.notify("onUnhover", null);
      if (this.cursorRayObject)
        this.cursorRayObject.scale([0, 0, 0]);
      for (const f2 of this._onDeactivateCallbacks)
        f2();
      this._onDeactivateCallbacks.length = 0;
    }
    onDestroy() {
      this._hitTestObject?.destroy();
    }
    /** 'select' event listener */
    onSelect(e) {
      if (e.inputSource.handedness != this.handedness)
        return;
      this.rayCast(e, e.frame, true);
    }
    /** 'selectstart' event listener */
    onSelectStart(e) {
      this._arTouchDown = true;
      if (e.inputSource.handedness == this.handedness) {
        this._isDown = true;
        this.rayCast(e, e.frame);
      }
    }
    /** 'selectend' event listener */
    onSelectEnd(e) {
      this._arTouchDown = false;
      if (e.inputSource.handedness == this.handedness) {
        this._isDown = false;
        this.rayCast(e, e.frame);
      }
    }
    /** 'pointermove' event listener */
    onPointerMove(e) {
      if (!e.isPrimary)
        return;
      this.updateMousePos(e);
      this.rayCast(e, null);
    }
    /** 'click' event listener */
    onClick(e) {
      this.updateMousePos(e);
      this.rayCast(e, null, true);
    }
    /** 'pointerdown' event listener */
    onPointerDown(e) {
      if (!e.isPrimary || e.button !== 0)
        return;
      this.updateMousePos(e);
      this._isDown = true;
      this.rayCast(e);
    }
    /** 'pointerup' event listener */
    onPointerUp(e) {
      if (!e.isPrimary || e.button !== 0)
        return;
      this.updateMousePos(e);
      this._isDown = false;
      this.rayCast(e);
    }
    /**
     * Update mouse position in non-VR mode and raycast for new position
     * @returns @ref WL.RayHit for new position.
     */
    updateMousePos(e) {
      this._lastPointerPos[0] = e.clientX;
      this._lastPointerPos[1] = e.clientY;
      this.updateDirection();
    }
    updateDirection() {
      const bounds = this.engine.canvas.getBoundingClientRect();
      const left = this._lastPointerPos[0] / bounds.width;
      const top = this._lastPointerPos[1] / bounds.height;
      this._direction[0] = left * 2 - 1;
      this._direction[1] = -top * 2 + 1;
      this._direction[2] = -1;
      this.applyTransformAndProjectDirection();
    }
    applyTransformAndProjectDirection() {
      vec3_exports.transformMat4(this._direction, this._direction, this._projectionMatrix);
      vec3_exports.normalize(this._direction, this._direction);
      this.applyTransformToDirection();
    }
    applyTransformToDirection() {
      vec3_exports.transformQuat(this._direction, this._direction, this.object.transformWorld);
      this.object.getTranslationWorld(this._origin);
    }
    rayCast(originalEvent, frame = null, doClick = false) {
      const rayHit = this.rayCastMode == 0 ? this.engine.scene.rayCast(this._origin, this._direction, this._collisionMask) : this.engine.physics.rayCast(this._origin, this._direction, this._collisionMask, this.maxDistance);
      let hitResultDistance = Infinity;
      let hitTestResult = null;
      if (this._hitTestLocation?.visible) {
        this._hitTestObject.getTranslationWorld(this.cursorPos);
        hitResultDistance = vec3_exports.distance(this.object.getTranslationWorld(tempVec2), this.cursorPos);
        hitTestResult = this._hitTestLocation?.getHitTestResults(frame)[0];
      }
      let hoveringReality = false;
      if (rayHit.hitCount > 0) {
        const d = rayHit.distances[0];
        if (hitResultDistance >= d) {
          this.cursorPos.set(rayHit.locations[0]);
        } else {
          hoveringReality = true;
        }
      } else if (hitResultDistance < Infinity) {
      } else {
        this.cursorPos.fill(0);
      }
      if (hoveringReality && !this.hoveringReality) {
        this.hitTestTarget.onHover.notify(hitTestResult, this);
      } else if (!hoveringReality && this.hoveringReality) {
        this.hitTestTarget.onUnhover.notify(hitTestResult, this);
      }
      this.hoveringReality = hoveringReality;
      this.hoverBehaviour(rayHit, hitTestResult, doClick, originalEvent);
      return rayHit;
    }
  };
  __publicField(Cursor, "TypeName", "cursor");
  /* Dependencies is deprecated, but we keep it here for compatibility
   * with 1.0.0-rc2 until 1.0.0 is released */
  __publicField(Cursor, "Dependencies", [HitTestLocation]);
  __decorate10([
    property.int(1)
  ], Cursor.prototype, "collisionGroup", void 0);
  __decorate10([
    property.object()
  ], Cursor.prototype, "cursorRayObject", void 0);
  __decorate10([
    property.enum(["x", "y", "z", "none"], "z")
  ], Cursor.prototype, "cursorRayScalingAxis", void 0);
  __decorate10([
    property.object()
  ], Cursor.prototype, "cursorObject", void 0);
  __decorate10([
    property.enum(["input component", "left", "right", "none"], "input component")
  ], Cursor.prototype, "handedness", void 0);
  __decorate10([
    property.enum(["collision", "physx"], "collision")
  ], Cursor.prototype, "rayCastMode", void 0);
  __decorate10([
    property.bool(true)
  ], Cursor.prototype, "styleCursor", void 0);
  __decorate10([
    property.bool(false)
  ], Cursor.prototype, "useWebXRHitTest", void 0);

  // node_modules/@wonderlandengine/components/dist/debug-object.js
  var __decorate11 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var DebugObject = class extends Component {
    /** A second object to print the name of */
    obj = null;
    start() {
      let origin = new Float32Array(3);
      quat2_exports.getTranslation(origin, this.object.transformWorld);
      console.log("Debug object:", this.object.name);
      console.log("Other object:", this.obj?.name);
      console.log("	translation", origin);
      console.log("	transformWorld", this.object.transformWorld);
      console.log("	transformLocal", this.object.transformLocal);
    }
  };
  __publicField(DebugObject, "TypeName", "debug-object");
  __decorate11([
    property.object()
  ], DebugObject.prototype, "obj", void 0);

  // node_modules/@wonderlandengine/components/dist/device-orientation-look.js
  function quatFromEulerYXZ(out, x, y, z) {
    const c1 = Math.cos(x / 2);
    const c2 = Math.cos(y / 2);
    const c3 = Math.cos(z / 2);
    const s1 = Math.sin(x / 2);
    const s2 = Math.sin(y / 2);
    const s3 = Math.sin(z / 2);
    out[0] = s1 * c2 * c3 + c1 * s2 * s3;
    out[1] = c1 * s2 * c3 - s1 * c2 * s3;
    out[2] = c1 * c2 * s3 - s1 * s2 * c3;
    out[3] = c1 * c2 * c3 + s1 * s2 * s3;
  }
  var DeviceOrientationLook = class extends Component {
    start() {
      this.rotationX = 0;
      this.rotationY = 0;
      this.lastClientX = -1;
      this.lastClientY = -1;
    }
    init() {
      this.deviceOrientation = [0, 0, 0, 1];
      this.screenOrientation = window.innerHeight > window.innerWidth ? 0 : 90;
      this._origin = [0, 0, 0];
      window.addEventListener("deviceorientation", function(e) {
        let alpha = e.alpha || 0;
        let beta = e.beta || 0;
        let gamma = e.gamma || 0;
        const toRad = Math.PI / 180;
        quatFromEulerYXZ(this.deviceOrientation, beta * toRad, alpha * toRad, -gamma * toRad);
      }.bind(this));
      window.addEventListener("orientationchange", function(e) {
        this.screenOrientation = window.orientation || 0;
      }.bind(this), false);
    }
    update() {
      if (this.engine.xr)
        return;
      this.object.getTranslationLocal(this._origin);
      this.object.resetTransform();
      if (this.screenOrientation != 0) {
        this.object.rotateAxisAngleDeg([0, 0, -1], this.screenOrientation);
      }
      this.object.rotate([-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5)]);
      this.object.rotate(this.deviceOrientation);
      this.object.translate(this._origin);
    }
  };
  __publicField(DeviceOrientationLook, "TypeName", "device-orientation-look");
  __publicField(DeviceOrientationLook, "Properties", {});

  // node_modules/@wonderlandengine/components/dist/finger-cursor.js
  var FingerCursor = class extends Component {
    init() {
      this.lastTarget = null;
    }
    start() {
      this.tip = this.object.getComponent("collision");
    }
    update() {
      const overlaps = this.tip.queryOverlaps();
      let overlapFound = null;
      for (let i = 0; i < overlaps.length; ++i) {
        const o = overlaps[i].object;
        const target = o.getComponent("cursor-target");
        if (target) {
          if (!target.equals(this.lastTarget)) {
            target.onHover(o, this);
            target.onClick(o, this);
          }
          overlapFound = target;
          break;
        }
      }
      if (!overlapFound) {
        if (this.lastTarget)
          this.lastTarget.onUnhover(this.lastTarget.object, this);
        this.lastTarget = null;
        return;
      } else {
        this.lastTarget = overlapFound;
      }
    }
  };
  __publicField(FingerCursor, "TypeName", "finger-cursor");
  __publicField(FingerCursor, "Properties", {});

  // node_modules/@wonderlandengine/components/dist/fixed-foveation.js
  var FixedFoveation = class extends Component {
    start() {
      this.onSessionStartCallback = this.setFixedFoveation.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
    }
    setFixedFoveation() {
      this.engine.xr.baseLayer.fixedFoveation = this.fixedFoveation;
    }
  };
  __publicField(FixedFoveation, "TypeName", "fixed-foveation");
  __publicField(FixedFoveation, "Properties", {
    /** Amount to apply from 0 (none) to 1 (full) */
    fixedFoveation: { type: Type.Float, default: 0.5 }
  });

  // node_modules/@wonderlandengine/components/dist/hand-tracking.js
  var ORDERED_JOINTS = [
    "wrist",
    "thumb-metacarpal",
    "thumb-phalanx-proximal",
    "thumb-phalanx-distal",
    "thumb-tip",
    "index-finger-metacarpal",
    "index-finger-phalanx-proximal",
    "index-finger-phalanx-intermediate",
    "index-finger-phalanx-distal",
    "index-finger-tip",
    "middle-finger-metacarpal",
    "middle-finger-phalanx-proximal",
    "middle-finger-phalanx-intermediate",
    "middle-finger-phalanx-distal",
    "middle-finger-tip",
    "ring-finger-metacarpal",
    "ring-finger-phalanx-proximal",
    "ring-finger-phalanx-intermediate",
    "ring-finger-phalanx-distal",
    "ring-finger-tip",
    "pinky-finger-metacarpal",
    "pinky-finger-phalanx-proximal",
    "pinky-finger-phalanx-intermediate",
    "pinky-finger-phalanx-distal",
    "pinky-finger-tip"
  ];
  var invTranslation = new Float32Array(3);
  var invRotation = new Float32Array(4);
  var HandTracking = class extends Component {
    init() {
      this.handedness = ["left", "right"][this.handedness];
    }
    joints = {};
    session = null;
    /* Whether last update had a hand pose */
    hasPose = false;
    _childrenActive = true;
    start() {
      if (!("XRHand" in window)) {
        console.warn("WebXR Hand Tracking not supported by this browser.");
        this.active = false;
        return;
      }
      if (this.handSkin) {
        let skin = this.handSkin;
        let jointIds = skin.jointIds;
        this.joints[ORDERED_JOINTS[0]] = this.engine.wrapObject(jointIds[0]);
        for (let j = 0; j < jointIds.length; ++j) {
          let joint = this.engine.wrapObject(jointIds[j]);
          this.joints[joint.name] = joint;
        }
        return;
      }
      const jointObjects = this.engine.scene.addObjects(ORDERED_JOINTS.length, this.object.parent, ORDERED_JOINTS.length);
      for (let j = 0; j < ORDERED_JOINTS.length; ++j) {
        let joint = jointObjects[j];
        joint.addComponent(MeshComponent, {
          mesh: this.jointMesh,
          material: this.jointMaterial
        });
        this.joints[ORDERED_JOINTS[j]] = joint;
      }
    }
    update(dt) {
      if (!this.session) {
        if (this.engine.xr)
          this.setupVREvents(this.engine.xr.session);
      }
      if (!this.session)
        return;
      this.hasPose = false;
      if (this.session && this.session.inputSources) {
        for (let i = 0; i < this.session.inputSources.length; ++i) {
          const inputSource = this.session.inputSources[i];
          if (!inputSource || !inputSource.hand || inputSource.handedness != this.handedness)
            continue;
          this.hasPose = true;
          const wristSpace = inputSource.hand.get("wrist");
          if (wristSpace !== null) {
            const p = this.engine.xr.frame.getJointPose(wristSpace, this.engine.xr.currentReferenceSpace);
            if (p) {
              setXRRigidTransformLocal(this.object, p.transform);
            }
          }
          this.object.getRotationLocal(invRotation);
          quat_exports.conjugate(invRotation, invRotation);
          this.object.getTranslationLocal(invTranslation);
          for (let j = 0; j < ORDERED_JOINTS.length; ++j) {
            const jointName = ORDERED_JOINTS[j];
            const joint = this.joints[jointName];
            if (joint === null)
              continue;
            let jointPose = null;
            const jointSpace = inputSource.hand.get(jointName);
            if (jointSpace !== null) {
              jointPose = this.engine.xr.frame.getJointPose(jointSpace, this.engine.xr.currentReferenceSpace);
            }
            if (jointPose !== null) {
              if (this.handSkin) {
                joint.resetTranslationRotation();
                joint.translate([
                  jointPose.transform.position.x - invTranslation[0],
                  jointPose.transform.position.y - invTranslation[1],
                  jointPose.transform.position.z - invTranslation[2]
                ]);
                joint.rotate(invRotation);
                joint.rotateObject([
                  jointPose.transform.orientation.x,
                  jointPose.transform.orientation.y,
                  jointPose.transform.orientation.z,
                  jointPose.transform.orientation.w
                ]);
              } else {
                setXRRigidTransformLocal(joint, jointPose.transform);
                const r = jointPose.radius || 7e-3;
                joint.setScalingLocal([r, r, r]);
              }
            }
          }
        }
      }
      if (!this.hasPose && this._childrenActive) {
        this._childrenActive = false;
        if (this.deactivateChildrenWithoutPose) {
          this.setChildrenActive(false);
        }
        if (this.controllerToDeactivate) {
          this.controllerToDeactivate.active = true;
          this.setChildrenActive(true, this.controllerToDeactivate);
        }
      } else if (this.hasPose && !this._childrenActive) {
        this._childrenActive = true;
        if (this.deactivateChildrenWithoutPose) {
          this.setChildrenActive(true);
        }
        if (this.controllerToDeactivate) {
          this.controllerToDeactivate.active = false;
          this.setChildrenActive(false, this.controllerToDeactivate);
        }
      }
    }
    setChildrenActive(active, object) {
      object = object || this.object;
      const children = object.children;
      for (const o of children) {
        o.active = active;
        this.setChildrenActive(active, o);
      }
    }
    isGrabbing() {
      const indexTipPos = [0, 0, 0];
      quat2_exports.getTranslation(indexTipPos, this.joints["index-finger-tip"].transformLocal);
      const thumbTipPos = [0, 0, 0];
      quat2_exports.getTranslation(thumbTipPos, this.joints["thumb-tip"].transformLocal);
      return vec3_exports.sqrDist(thumbTipPos, indexTipPos) < 1e-3;
    }
    setupVREvents(s) {
      this.session = s;
    }
  };
  __publicField(HandTracking, "TypeName", "hand-tracking");
  __publicField(HandTracking, "Properties", {
    /** Handedness determining whether to receive tracking input from right or left hand */
    handedness: { type: Type.Enum, default: "left", values: ["left", "right"] },
    /** (optional) Mesh to use to visualize joints */
    jointMesh: { type: Type.Mesh, default: null },
    /** Material to use for display. Applied to either the spawned skinned mesh or the joint spheres. */
    jointMaterial: { type: Type.Material, default: null },
    /** (optional) Skin to apply tracked joint poses to. If not present, joint spheres will be used for display instead. */
    handSkin: { type: Type.Skin, default: null },
    /** Deactivate children if no pose was tracked */
    deactivateChildrenWithoutPose: { type: Type.Bool, default: true },
    /** Controller objects to activate including children if no pose is available */
    controllerToDeactivate: { type: Type.Object }
  });

  // node_modules/@wonderlandengine/components/dist/howler-audio-listener.js
  var import_howler = __toESM(require_howler(), 1);
  var HowlerAudioListener = class extends Component {
    init() {
      this.origin = new Float32Array(3);
      this.fwd = new Float32Array(3);
      this.up = new Float32Array(3);
    }
    update() {
      if (!this.spatial)
        return;
      this.object.getTranslationWorld(this.origin);
      this.object.getForward(this.fwd);
      this.object.getUp(this.up);
      Howler.pos(this.origin[0], this.origin[1], this.origin[2]);
      Howler.orientation(this.fwd[0], this.fwd[1], this.fwd[2], this.up[0], this.up[1], this.up[2]);
    }
  };
  __publicField(HowlerAudioListener, "TypeName", "howler-audio-listener");
  __publicField(HowlerAudioListener, "Properties", {
    /** Whether audio should be spatialized/positional. */
    spatial: { type: Type.Bool, default: true }
  });

  // node_modules/@wonderlandengine/components/dist/howler-audio-source.js
  var import_howler2 = __toESM(require_howler(), 1);
  var HowlerAudioSource = class extends Component {
    start() {
      this.audio = new Howl({
        src: [this.src],
        loop: this.loop,
        volume: this.volume,
        autoplay: this.autoplay
      });
      this.lastPlayedAudioId = null;
      this.origin = new Float32Array(3);
      this.lastOrigin = new Float32Array(3);
      if (this.spatial && this.autoplay) {
        this.updatePosition();
        this.play();
      }
    }
    update() {
      if (!this.spatial || !this.lastPlayedAudioId)
        return;
      this.object.getTranslationWorld(this.origin);
      if (Math.abs(this.lastOrigin[0] - this.origin[0]) > 5e-3 || Math.abs(this.lastOrigin[1] - this.origin[1]) > 5e-3 || Math.abs(this.lastOrigin[2] - this.origin[2]) > 5e-3) {
        this.updatePosition();
      }
    }
    updatePosition() {
      this.audio.pos(this.origin[0], this.origin[1], this.origin[2], this.lastPlayedAudioId);
      this.lastOrigin.set(this.origin);
    }
    play() {
      if (this.lastPlayedAudioId)
        this.audio.stop(this.lastPlayedAudioId);
      this.lastPlayedAudioId = this.audio.play();
      if (this.spatial)
        this.updatePosition();
    }
    stop() {
      if (!this.lastPlayedAudioId)
        return;
      this.audio.stop(this.lastPlayedAudioId);
      this.lastPlayedAudioId = null;
    }
    onDeactivate() {
      this.stop();
    }
  };
  __publicField(HowlerAudioSource, "TypeName", "howler-audio-source");
  __publicField(HowlerAudioSource, "Properties", {
    /** Volume */
    volume: { type: Type.Float, default: 1 },
    /** Whether audio should be spatialized/positional */
    spatial: { type: Type.Bool, default: true },
    /** Whether to loop the sound */
    loop: { type: Type.Bool, default: false },
    /** Whether to start playing automatically */
    autoplay: { type: Type.Bool, default: false },
    /** URL to a sound file to play */
    src: { type: Type.String, default: "" }
  });

  // node_modules/@wonderlandengine/components/dist/utils/utils.js
  function setFirstMaterialTexture(mat, texture, customTextureProperty) {
    if (customTextureProperty !== "auto") {
      mat[customTextureProperty] = texture;
      return true;
    }
    const shader = mat.shader;
    if (shader === "Flat Opaque Textured") {
      mat.flatTexture = texture;
      return true;
    } else if (shader === "Phong Opaque Textured" || shader === "Foliage" || shader === "Phong Normalmapped" || shader === "Phong Lightmapped") {
      mat.diffuseTexture = texture;
      return true;
    } else if (shader === "Particle") {
      mat.mainTexture = texture;
      return true;
    } else if (shader === "DistanceFieldVector") {
      mat.vectorTexture = texture;
      return true;
    } else if (shader === "Background" || shader === "Sky") {
      mat.texture = texture;
      return true;
    } else if (shader === "Physical Opaque Textured") {
      mat.albedoTexture = texture;
      return true;
    }
    return false;
  }

  // node_modules/@wonderlandengine/components/dist/image-texture.js
  var ImageTexture = class extends Component {
    start() {
      if (!this.material) {
        throw Error("image-texture: material property not set");
      }
      this.engine.textures.load(this.url, "anonymous").then((texture) => {
        const mat = this.material;
        if (!setFirstMaterialTexture(mat, texture, this.textureProperty)) {
          console.error("Shader", mat.shader, "not supported by image-texture");
        }
      }).catch(console.err);
    }
  };
  __publicField(ImageTexture, "TypeName", "image-texture");
  __publicField(ImageTexture, "Properties", {
    /** URL to download the image from */
    url: Property.string(),
    /** Material to apply the video texture to */
    material: Property.material(),
    /** Name of the texture property to set */
    textureProperty: Property.string("auto")
  });

  // node_modules/@wonderlandengine/components/dist/mouse-look.js
  var MouseLookComponent = class extends Component {
    init() {
      this.currentRotationY = 0;
      this.currentRotationX = 0;
      this.origin = new Float32Array(3);
      this.parentOrigin = new Float32Array(3);
      this.rotationX = 0;
      this.rotationY = 0;
    }
    start() {
      document.addEventListener("mousemove", (e) => {
        if (this.active && (this.mouseDown || !this.requireMouseDown)) {
          this.rotationY = -this.sensitity * e.movementX / 100;
          this.rotationX = -this.sensitity * e.movementY / 100;
          this.currentRotationX += this.rotationX;
          this.currentRotationY += this.rotationY;
          this.currentRotationX = Math.min(1.507, this.currentRotationX);
          this.currentRotationX = Math.max(-1.507, this.currentRotationX);
          this.object.getTranslationWorld(this.origin);
          const parent = this.object.parent;
          if (parent !== null) {
            parent.getTranslationWorld(this.parentOrigin);
            vec3_exports.sub(this.origin, this.origin, this.parentOrigin);
          }
          this.object.resetTranslationRotation();
          this.object.rotateAxisAngleRad([1, 0, 0], this.currentRotationX);
          this.object.rotateAxisAngleRad([0, 1, 0], this.currentRotationY);
          this.object.translate(this.origin);
        }
      });
      const canvas2 = this.engine.canvas;
      if (this.pointerLockOnClick) {
        canvas2.addEventListener("mousedown", () => {
          canvas2.requestPointerLock = canvas2.requestPointerLock || canvas2.mozRequestPointerLock || canvas2.webkitRequestPointerLock;
          canvas2.requestPointerLock();
        });
      }
      if (this.requireMouseDown) {
        if (this.mouseButtonIndex == 2) {
          canvas2.addEventListener("contextmenu", (e) => {
            e.preventDefault();
          }, false);
        }
        canvas2.addEventListener("mousedown", (e) => {
          if (e.button == this.mouseButtonIndex) {
            this.mouseDown = true;
            document.body.style.cursor = "grabbing";
            if (e.button == 1) {
              e.preventDefault();
              return false;
            }
          }
        });
        canvas2.addEventListener("mouseup", (e) => {
          if (e.button == this.mouseButtonIndex) {
            this.mouseDown = false;
            document.body.style.cursor = "initial";
          }
        });
      }
    }
  };
  __publicField(MouseLookComponent, "TypeName", "mouse-look");
  __publicField(MouseLookComponent, "Properties", {
    /** Mouse look sensitivity */
    sensitity: { type: Type.Float, default: 0.25 },
    /** Require a mouse button to be pressed to control view.
     * Otherwise view will allways follow mouse movement */
    requireMouseDown: { type: Type.Bool, default: true },
    /** If "moveOnClick" is enabled, mouse button which should
     * be held down to control view */
    mouseButtonIndex: { type: Type.Int },
    /** Enables pointer lock on "mousedown" event on canvas */
    pointerLockOnClick: { type: Type.Bool, default: false }
  });

  // node_modules/@wonderlandengine/components/dist/player-height.js
  var __decorate12 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var PlayerHeight = class extends Component {
    height = 1.75;
    onSessionStartCallback;
    onSessionEndCallback;
    start() {
      this.object.resetPositionRotation();
      this.object.translateLocal([0, this.height, 0]);
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    onXRSessionStart() {
      const type = this.engine.xr?.currentReferenceSpaceType;
      if (type !== "local" && type !== "viewer") {
        this.object.resetPositionRotation();
      }
    }
    onXRSessionEnd() {
      const type = this.engine.xr?.currentReferenceSpaceType;
      if (type !== "local" && type !== "viewer") {
        this.object.resetPositionRotation();
        this.object.translateLocal([0, this.height, 0]);
      }
    }
  };
  __publicField(PlayerHeight, "TypeName", "player-height");
  __decorate12([
    property.float(0)
  ], PlayerHeight.prototype, "height", void 0);

  // node_modules/@wonderlandengine/components/dist/target-framerate.js
  var TargetFramerate = class extends Component {
    start() {
      this.onSessionStartCallback = this.setTargetFramerate.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
    }
    setTargetFramerate(s) {
      if (s.supportedFrameRates && s.updateTargetFrameRate) {
        const a = this.engine.xr.session.supportedFrameRates;
        a.sort((a2, b) => Math.abs(a2 - this.framerate) - Math.abs(b - this.framerate));
        this.engine.xr.session.updateTargetFrameRate(a[0]);
      }
    }
  };
  __publicField(TargetFramerate, "TypeName", "target-framerate");
  __publicField(TargetFramerate, "Properties", {
    framerate: { type: Type.Float, default: 90 }
  });

  // node_modules/@wonderlandengine/components/dist/teleport.js
  var TeleportComponent = class extends Component {
    init() {
      this._prevThumbstickAxis = new Float32Array(2);
      this._tempVec = new Float32Array(3);
      this._tempVec0 = new Float32Array(3);
      this._currentIndicatorRotation = 0;
      this.input = this.object.getComponent("input");
      if (!this.input) {
        console.error(this.object.name, "generic-teleport-component.js: input component is required on the object");
        return;
      }
      if (!this.teleportIndicatorMeshObject) {
        console.error(this.object.name, "generic-teleport-component.js: Teleport indicator mesh is missing");
        return;
      }
      if (!this.camRoot) {
        console.error(this.object.name, "generic-teleport-component.js: camRoot not set");
        return;
      }
      this.isIndicating = false;
      this.indicatorHidden = true;
      this.hitSpot = new Float32Array(3);
      this._hasHit = false;
      this._extraRotation = 0;
      this._currentStickAxes = new Float32Array(2);
    }
    start() {
      if (this.cam) {
        this.isMouseIndicating = false;
        canvas.addEventListener("mousedown", this.onMouseDown.bind(this));
        canvas.addEventListener("mouseup", this.onMouseUp.bind(this));
      }
      if (this.handedness == 0) {
        const inputComp = this.object.getComponent("input");
        if (!inputComp) {
          console.warn("teleport component on object", this.object.name, 'was configured with handedness "input component", but object has no input component.');
        } else {
          this.handedness = inputComp.handedness;
          this.input = inputComp;
        }
      } else {
        this.handedness = ["left", "right"][this.handedness - 1];
      }
      this.onSessionStartCallback = this.setupVREvents.bind(this);
      this.teleportIndicatorMeshObject.active = false;
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
    }
    /* Get current camera Y rotation */
    _getCamRotation() {
      this.eyeLeft.getForward(this._tempVec);
      this._tempVec[1] = 0;
      vec3_exports.normalize(this._tempVec, this._tempVec);
      return Math.atan2(this._tempVec[0], this._tempVec[2]);
    }
    update() {
      let inputLength = 0;
      if (this.gamepad && this.gamepad.axes) {
        this._currentStickAxes[0] = this.gamepad.axes[2];
        this._currentStickAxes[1] = this.gamepad.axes[3];
        inputLength = Math.abs(this._currentStickAxes[0]) + Math.abs(this._currentStickAxes[1]);
      }
      if (!this.isIndicating && this._prevThumbstickAxis[1] >= this.thumbstickActivationThreshhold && this._currentStickAxes[1] < this.thumbstickActivationThreshhold) {
        this.isIndicating = true;
      } else if (this.isIndicating && inputLength < this.thumbstickDeactivationThreshhold) {
        this.isIndicating = false;
        this.teleportIndicatorMeshObject.active = false;
        if (this._hasHit) {
          this._teleportPlayer(this.hitSpot, this._extraRotation);
        }
      }
      if (this.isIndicating && this.teleportIndicatorMeshObject && this.input) {
        const origin = this._tempVec0;
        this.object.getPositionWorld(origin);
        const direction2 = this.object.getForwardWorld(this._tempVec);
        let rayHit = this.rayHit = this.rayCastMode == 0 ? this.engine.scene.rayCast(origin, direction2, 1 << this.floorGroup) : this.engine.physics.rayCast(origin, direction2, 1 << this.floorGroup, this.maxDistance);
        if (rayHit.hitCount > 0) {
          this.indicatorHidden = false;
          this._extraRotation = Math.PI + Math.atan2(this._currentStickAxes[0], this._currentStickAxes[1]);
          this._currentIndicatorRotation = this._getCamRotation() + (this._extraRotation - Math.PI);
          this.teleportIndicatorMeshObject.resetPositionRotation();
          this.teleportIndicatorMeshObject.rotateAxisAngleRad([0, 1, 0], this._currentIndicatorRotation);
          this.teleportIndicatorMeshObject.translate(rayHit.locations[0]);
          this.teleportIndicatorMeshObject.translate([
            0,
            this.indicatorYOffset,
            0
          ]);
          this.teleportIndicatorMeshObject.active = true;
          this.hitSpot.set(rayHit.locations[0]);
          this._hasHit = true;
        } else {
          if (!this.indicatorHidden) {
            this.teleportIndicatorMeshObject.active = false;
            this.indicatorHidden = true;
          }
          this._hasHit = false;
        }
      } else if (this.teleportIndicatorMeshObject && this.isMouseIndicating) {
        this.onMousePressed();
      }
      this._prevThumbstickAxis.set(this._currentStickAxes);
    }
    setupVREvents(s) {
      this.session = s;
      s.addEventListener("end", function() {
        this.gamepad = null;
        this.session = null;
      }.bind(this));
      if (s.inputSources && s.inputSources.length) {
        for (let i = 0; i < s.inputSources.length; i++) {
          let inputSource = s.inputSources[i];
          if (inputSource.handedness == this.handedness) {
            this.gamepad = inputSource.gamepad;
          }
        }
      }
      s.addEventListener("inputsourceschange", function(e) {
        if (e.added && e.added.length) {
          for (let i = 0; i < e.added.length; i++) {
            let inputSource = e.added[i];
            if (inputSource.handedness == this.handedness) {
              this.gamepad = inputSource.gamepad;
            }
          }
        }
      }.bind(this));
    }
    onMouseDown() {
      this.isMouseIndicating = true;
    }
    onMouseUp() {
      this.isMouseIndicating = false;
      this.teleportIndicatorMeshObject.active = false;
      if (this._hasHit) {
        this._teleportPlayer(this.hitSpot, 0);
      }
    }
    onMousePressed() {
      let origin = [0, 0, 0];
      this.cam.getPositionWorld(origin);
      const direction2 = this.cam.getForward(this._tempVec);
      let rayHit = this.rayHit = this.rayCastMode == 0 ? this.engine.scene.rayCast(origin, direction2, 1 << this.floorGroup) : this.engine.physics.rayCast(origin, direction2, 1 << this.floorGroup, this.maxDistance);
      if (rayHit.hitCount > 0) {
        this.indicatorHidden = false;
        direction2[1] = 0;
        vec3_exports.normalize(direction2, direction2);
        this._currentIndicatorRotation = -Math.sign(direction2[2]) * Math.acos(direction2[0]) - Math.PI * 0.5;
        this.teleportIndicatorMeshObject.resetPositionRotation();
        this.teleportIndicatorMeshObject.rotateAxisAngleRad([0, 1, 0], this._currentIndicatorRotation);
        this.teleportIndicatorMeshObject.translate(rayHit.locations[0]);
        this.teleportIndicatorMeshObject.active = true;
        this.hitSpot = rayHit.locations[0];
        this._hasHit = true;
      } else {
        if (!this.indicatorHidden) {
          this.teleportIndicatorMeshObject.active = false;
          this.indicatorHidden = true;
        }
        this._hasHit = false;
      }
    }
    _teleportPlayer(newPosition, rotationToAdd) {
      this.camRoot.rotateAxisAngleRad([0, 1, 0], rotationToAdd);
      const p = this._tempVec;
      const p1 = this._tempVec0;
      if (this.session) {
        this.eyeLeft.getPositionWorld(p);
        this.eyeRight.getPositionWorld(p1);
        vec3_exports.add(p, p, p1);
        vec3_exports.scale(p, p, 0.5);
      } else {
        this.cam.getPositionWorld(p);
      }
      this.camRoot.getPositionWorld(p1);
      vec3_exports.sub(p, p1, p);
      p[0] += newPosition[0];
      p[1] = newPosition[1];
      p[2] += newPosition[2];
      this.camRoot.setPositionWorld(p);
    }
  };
  __publicField(TeleportComponent, "TypeName", "teleport");
  __publicField(TeleportComponent, "Properties", {
    /** Object that will be placed as indiciation forwhere the player will teleport to. */
    teleportIndicatorMeshObject: { type: Type.Object },
    /** Root of the player, the object that will be positioned on teleportation. */
    camRoot: { type: Type.Object },
    /** Non-vr camera for use outside of VR */
    cam: { type: Type.Object },
    /** Left eye for use in VR*/
    eyeLeft: { type: Type.Object },
    /** Right eye for use in VR*/
    eyeRight: { type: Type.Object },
    /** Handedness for VR cursors to accept trigger events only from respective controller. */
    handedness: {
      type: Type.Enum,
      values: ["input component", "left", "right", "none"],
      default: "input component"
    },
    /** Collision group of valid "floor" objects that can be teleported on */
    floorGroup: { type: Type.Int, default: 1 },
    /** How far the thumbstick needs to be pushed to have the teleport target indicator show up */
    thumbstickActivationThreshhold: { type: Type.Float, default: -0.7 },
    /** How far the thumbstick needs to be released to execute the teleport */
    thumbstickDeactivationThreshhold: { type: Type.Float, default: 0.3 },
    /** Offset to apply to the indicator object, e.g. to avoid it from Z-fighting with the floor */
    indicatorYOffset: { type: Type.Float, default: 0.01 },
    /** Mode for raycasting, whether to use PhysX or simple collision components */
    rayCastMode: {
      type: Type.Enum,
      values: ["collision", "physx"],
      default: "collision"
    },
    /** Max distance for PhysX raycast */
    maxDistance: { type: Type.Float, default: 100 }
  });

  // node_modules/@wonderlandengine/components/dist/trail.js
  var direction = vec3_exports.create();
  var offset = vec3_exports.create();
  var normal = vec3_exports.create();
  var Trail = class extends Component {
    init() {
      this.points = new Array(this.segments + 1);
      for (let i = 0; i < this.points.length; ++i) {
        this.points[i] = vec3_exports.create();
      }
      this.currentPointOffset = 0;
      this.up = [0, 1, 0];
      this.timeTillNext = this.interval;
    }
    start() {
      this.trailContainer = this.engine.scene.addObject();
      this.meshComp = this.trailContainer.addComponent("mesh");
      this.meshComp.material = this.material;
      const vertexCount = 2 * this.points.length;
      this.indexData = new Uint32Array(6 * this.segments);
      for (let i = 0, v = 0; i < vertexCount - 2; i += 2, v += 6) {
        this.indexData.subarray(v, v + 6).set([i + 1, i + 0, i + 2, i + 2, i + 3, i + 1]);
      }
      this.mesh = new Mesh(this.engine, {
        vertexCount,
        indexData: this.indexData,
        indexType: MeshIndexType.UnsignedInt
      });
      this.meshComp.mesh = this.mesh;
    }
    updateVertices() {
      const positions = this.mesh.attribute(MeshAttribute.Position);
      const texCoords = this.mesh.attribute(MeshAttribute.TextureCoordinate);
      const normals = this.mesh.attribute(MeshAttribute.Normal);
      vec3_exports.set(direction, 0, 0, 0);
      for (let i = 0; i < this.points.length; ++i) {
        const curr = this.points[(this.currentPointIndex + i + 1) % this.points.length];
        const next = this.points[(this.currentPointIndex + i + 2) % this.points.length];
        if (i !== this.points.length - 1) {
          vec3_exports.sub(direction, next, curr);
        }
        vec3_exports.cross(offset, this.up, direction);
        vec3_exports.normalize(offset, offset);
        const timeFraction = 1 - this.timeTillNext / this.interval;
        const fraction = (i - timeFraction) / this.segments;
        vec3_exports.scale(offset, offset, (this.taper ? fraction : 1) * this.width / 2);
        positions.set(i * 2, [
          curr[0] - offset[0],
          curr[1] - offset[1],
          curr[2] - offset[2]
        ]);
        positions.set(i * 2 + 1, [
          curr[0] + offset[0],
          curr[1] + offset[1],
          curr[2] + offset[2]
        ]);
        if (normals) {
          vec3_exports.cross(normal, direction, offset);
          vec3_exports.normalize(normal, normal);
          normals.set(i * 2, normal);
          normals.set(i * 2 + 1, normal);
        }
        if (texCoords) {
          texCoords.set(i * 2, [0, fraction]);
          texCoords.set(i * 2 + 1, [1, fraction]);
        }
      }
      this.mesh.update();
    }
    resetTrail() {
      this.object.getTranslationWorld(this.points[0]);
      for (let i = 1; i < this.points.length; ++i) {
        vec3_exports.copy(this.points[i], this.points[0]);
      }
      this.currentPointIndex = 0;
      this.timeTillNext = this.interval;
    }
    update(dt) {
      this.timeTillNext -= dt;
      if (dt > this.resetThreshold) {
        this.resetTrail();
      }
      if (this.timeTillNext < 0) {
        this.currentPointIndex = (this.currentPointIndex + 1) % this.points.length;
        this.timeTillNext = this.timeTillNext % this.interval + this.interval;
      }
      this.object.getTranslationWorld(this.points[this.currentPointIndex]);
      this.updateVertices();
    }
    onActivate() {
      this.resetTrail();
    }
    onDestroy() {
      this.trailContainer.destroy();
      this.mesh.destroy();
    }
  };
  __publicField(Trail, "TypeName", "trail");
  __publicField(Trail, "Properties", {
    /** The material to apply to the trail mesh */
    material: { type: Type.Material },
    /** The number of segments in the trail mesh */
    segments: { type: Type.Int, default: 50 },
    /** The time interval before recording a new point */
    interval: { type: Type.Float, default: 0.1 },
    /** The width of the trail (in world space) */
    width: { type: Type.Float, default: 1 },
    /** Whether or not the trail should taper off */
    taper: { type: Type.Bool, default: true },
    /**
     * The maximum delta time in seconds, above which the trail resets.
     * This prevents the trail from jumping around when updates happen
     * infrequently (e.g. when the tab doesn't have focus).
     */
    resetThreshold: { type: Type.Float, default: 0.5 }
  });

  // node_modules/@wonderlandengine/components/dist/two-joint-ik-solver.js
  function clamp2(v, a, b) {
    return Math.max(a, Math.min(v, b));
  }
  var rootScaling = new Float32Array(3);
  var tempQuat3 = new Float32Array(4);
  var middlePos = new Float32Array(3);
  var endPos = new Float32Array(3);
  var targetPos = new Float32Array(3);
  var helperPos = new Float32Array(3);
  var rootTransform = new Float32Array(8);
  var middleTransform = new Float32Array(8);
  var endTransform = new Float32Array(8);
  var twoJointIK = function() {
    const ta = new Float32Array(3);
    const ca = new Float32Array(3);
    const ba = new Float32Array(3);
    const ab = new Float32Array(3);
    const cb = new Float32Array(3);
    const axis0 = new Float32Array(3);
    const axis1 = new Float32Array(3);
    const temp = new Float32Array(3);
    return function(root, middle, b, c, targetPos2, eps, helper) {
      ba.set(b);
      const lab = vec3_exports.length(ba);
      vec3_exports.sub(ta, b, c);
      const lcb = vec3_exports.length(ta);
      ta.set(targetPos2);
      const lat = clamp2(vec3_exports.length(ta), eps, lab + lcb - eps);
      ca.set(c);
      vec3_exports.scale(ab, b, -1);
      vec3_exports.sub(cb, c, b);
      vec3_exports.normalize(ca, ca);
      vec3_exports.normalize(ba, ba);
      vec3_exports.normalize(ab, ab);
      vec3_exports.normalize(cb, cb);
      vec3_exports.normalize(ta, ta);
      const ac_ab_0 = Math.acos(clamp2(vec3_exports.dot(ca, ba), -1, 1));
      const ba_bc_0 = Math.acos(clamp2(vec3_exports.dot(ab, cb), -1, 1));
      const ac_at_0 = Math.acos(clamp2(vec3_exports.dot(ca, ta), -1, 1));
      const ac_ab_1 = Math.acos(clamp2((lcb * lcb - lab * lab - lat * lat) / (-2 * lab * lat), -1, 1));
      const ba_bc_1 = Math.acos(clamp2((lat * lat - lab * lab - lcb * lcb) / (-2 * lab * lcb), -1, 1));
      if (helper) {
        vec3_exports.sub(ba, helper, b);
        vec3_exports.normalize(ba, ba);
      }
      vec3_exports.cross(axis0, ca, ba);
      vec3_exports.normalize(axis0, axis0);
      vec3_exports.cross(axis1, c, targetPos2);
      vec3_exports.normalize(axis1, axis1);
      middle.transformVectorInverseLocal(temp, axis0);
      root.rotateAxisAngleRadObject(axis1, ac_at_0);
      root.rotateAxisAngleRadObject(axis0, ac_ab_1 - ac_ab_0);
      middle.rotateAxisAngleRadObject(axis0, ba_bc_1 - ba_bc_0);
    };
  }();
  var TwoJointIkSolver = class extends Component {
    time = 0;
    start() {
      this.root.getTransformLocal(rootTransform);
      this.middle.getTransformLocal(middleTransform);
      this.end.getTransformLocal(endTransform);
    }
    update(dt) {
      this.time += dt;
      this.root.setTransformLocal(rootTransform);
      this.middle.setTransformLocal(middleTransform);
      this.end.setTransformLocal(endTransform);
      this.root.getScalingWorld(rootScaling);
      this.middle.getPositionLocal(middlePos);
      this.end.getPositionLocal(endPos);
      this.middle.transformPointLocal(endPos, endPos);
      if (this.helper) {
        this.helper.getPositionWorld(helperPos);
        this.root.transformPointInverseWorld(helperPos, helperPos);
        vec3_exports.div(helperPos, helperPos, rootScaling);
      }
      this.target.getPositionWorld(targetPos);
      this.root.transformPointInverseWorld(targetPos, targetPos);
      vec3_exports.div(targetPos, targetPos, rootScaling);
      twoJointIK(this.root, this.middle, middlePos, endPos, targetPos, 0.01, this.helper ? helperPos : null, this.time);
      if (this.copyTargetRotation) {
        this.end.setRotationWorld(this.target.getRotationWorld(tempQuat3));
      }
    }
  };
  __publicField(TwoJointIkSolver, "TypeName", "two-joint-ik-solver");
  __publicField(TwoJointIkSolver, "Properties", {
    /** Root bone, never moves */
    root: Property.object(),
    /** Bone attached to the root */
    middle: Property.object(),
    /** Bone attached to the middle */
    end: Property.object(),
    /** Target the joins should reach for */
    target: Property.object(),
    /** Flag for copying rotation from target to end */
    copyTargetRotation: Property.bool(true),
    /** Helper object to use to determine joint rotation axis */
    helper: Property.object()
  });

  // node_modules/@wonderlandengine/components/dist/video-texture.js
  var VideoTexture = class extends Component {
    init() {
      if (!this.material) {
        throw Error("video-texture: material property not set");
      }
      this.loaded = false;
      this.frameUpdateRequested = true;
    }
    start() {
      this.video = document.createElement("video");
      this.video.src = this.url;
      this.video.crossOrigin = "anonymous";
      this.video.playsInline = true;
      this.video.loop = this.loop;
      this.video.muted = this.muted;
      this.video.addEventListener("playing", () => {
        this.loaded = true;
      });
      if (this.autoplay) {
        const playAfterUserGesture = () => {
          this.video.play();
          window.removeEventListener("click", playAfterUserGesture);
          window.removeEventListener("touchstart", playAfterUserGesture);
        };
        window.addEventListener("click", playAfterUserGesture);
        window.addEventListener("touchstart", playAfterUserGesture);
      }
    }
    applyTexture() {
      const mat = this.material;
      const shader = mat.shader;
      const texture = this.texture = new Texture(this.engine, this.video);
      if (!setFirstMaterialTexture(mat, texture, this.textureProperty)) {
        console.error("Shader", shader, "not supported by video-texture");
      }
      if ("requestVideoFrameCallback" in this.video) {
        this.video.requestVideoFrameCallback(this.updateVideo.bind(this));
      } else {
        this.video.addEventListener("timeupdate", () => {
          this.frameUpdateRequested = true;
        });
      }
    }
    update(dt) {
      if (this.loaded && this.frameUpdateRequested) {
        if (this.texture) {
          this.texture.update();
        } else {
          this.applyTexture();
        }
        this.frameUpdateRequested = false;
      }
    }
    updateVideo() {
      this.frameUpdateRequested = true;
      this.video.requestVideoFrameCallback(this.updateVideo.bind(this));
    }
  };
  __publicField(VideoTexture, "TypeName", "video-texture");
  __publicField(VideoTexture, "Properties", {
    /** URL to download video from */
    url: Property.string(),
    /** Material to apply the video texture to */
    material: Property.material(),
    /** Whether to loop the video */
    loop: Property.bool(true),
    /** Whether to automatically start playing the video */
    autoplay: Property.bool(true),
    /** Whether to mute sound */
    muted: Property.bool(true),
    /** Name of the texture property to set */
    textureProperty: Property.string("auto")
  });

  // node_modules/@wonderlandengine/components/dist/vr-mode-active-switch.js
  var VrModeActiveSwitch = class extends Component {
    start() {
      this.components = [];
      this.getComponents(this.object);
      this.onXRSessionEnd();
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    getComponents(obj) {
      const comps = obj.getComponents().filter((c) => c.type !== "vr-mode-active-switch");
      this.components = this.components.concat(comps);
      if (this.affectChildren) {
        let children = obj.children;
        for (let i = 0; i < children.length; ++i) {
          this.getComponents(children[i]);
        }
      }
    }
    setComponentsActive(active) {
      const comps = this.components;
      for (let i = 0; i < comps.length; ++i) {
        comps[i].active = active;
      }
    }
    onXRSessionStart() {
      this.setComponentsActive(this.activateComponents == 0);
    }
    onXRSessionEnd() {
      this.setComponentsActive(this.activateComponents != 0);
    }
  };
  __publicField(VrModeActiveSwitch, "TypeName", "vr-mode-active-switch");
  __publicField(VrModeActiveSwitch, "Properties", {
    /** When components should be active: In VR or when not in VR */
    activateComponents: {
      type: Type.Enum,
      values: ["in VR", "in non-VR"],
      default: "in VR"
    },
    /** Whether child object's components should be affected */
    affectChildren: { type: Type.Bool, default: true }
  });

  // node_modules/@wonderlandengine/components/dist/plane-detection.js
  var import_earcut = __toESM(require_earcut(), 1);
  var __decorate13 = function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i = decorators.length - 1; i >= 0; i--)
        if (d = decorators[i])
          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  };
  var tempVec32 = new Float32Array(3);
  function extentsFromContour(out, points) {
    if (points.length == 0)
      return out;
    let absMaxX = Math.abs(points[0].x);
    let absMaxZ = Math.abs(points[0].z);
    for (let i = 1; i < points.length; ++i) {
      absMaxX = Math.max(absMaxX, Math.abs(points[i].x));
      absMaxZ = Math.max(absMaxZ, Math.abs(points[i].z));
    }
    out[0] = absMaxX;
    out[1] = 0;
    out[2] = absMaxZ;
  }
  function within(x, a, b) {
    if (a > b)
      return x < a && x > b;
    return x > a && x < b;
  }
  function isPointLocalOnXRPlanePolygon(p, plane) {
    const points = plane.polygon;
    if (points.length < 3)
      return false;
    const pX = p[0];
    const pZ = p[2];
    let intersections = 0;
    for (let n = 0, l2 = points.length - 1; n < points.length; ++n) {
      const aX = points[l2].x;
      const aZ = points[l2].z;
      const s = (points[n].z - aZ) / (points[n].x - aX);
      const x = Math.abs((pZ - aZ) / s);
      if (x >= 0 && x <= 1 && within(x + pX, aX, points[n].x))
        ++intersections;
      l2 = n;
    }
    return (intersections & 1) == 0;
  }
  function isPointWorldOnXRPlanePolygon(object, p, plane) {
    if (plane.polygon.length < 3)
      return false;
    isPointLocalOnXRPlanePolygon(object.transformPointInverseWorld(tempVec32, p), plane);
  }
  function planeMeshFromContour(engine, points, meshToUpdate = null) {
    const vertexCount = points.length;
    const vertices = new Float32Array(vertexCount * 2);
    for (let i = 0, d = 0; i < vertexCount; ++i, d += 2) {
      vertices[d] = points[i].x;
      vertices[d + 1] = points[i].z;
    }
    const triangles = (0, import_earcut.default)(vertices);
    const mesh = meshToUpdate || new Mesh(engine, {
      vertexCount,
      /* Assumption here that we will never have more than 256 points
       * in the detected plane meshes! */
      indexType: MeshIndexType.UnsignedByte,
      indexData: triangles
    });
    if (mesh.vertexCount !== vertexCount) {
      console.warn("vertexCount of meshToUpdate did not match required vertexCount");
      return mesh;
    }
    const positions = mesh.attribute(MeshAttribute.Position);
    const textureCoords = mesh.attribute(MeshAttribute.TextureCoordinate);
    const normals = mesh.attribute(MeshAttribute.Normal);
    tempVec32[1] = 0;
    for (let i = 0, s = 0; i < vertexCount; ++i, s += 2) {
      tempVec32[0] = vertices[s];
      tempVec32[2] = vertices[s + 1];
      positions.set(i, tempVec32);
    }
    textureCoords?.set(0, vertices);
    if (normals) {
      tempVec32[0] = 0;
      tempVec32[1] = 1;
      tempVec32[2] = 0;
      for (let i = 0; i < vertexCount; ++i) {
        normals.set(i, tempVec32);
      }
    }
    if (meshToUpdate)
      mesh.update();
    return mesh;
  }
  var _planeLost, planeLost_fn, _planeFound, planeFound_fn, _planeUpdate, planeUpdate_fn, _planeUpdatePose, planeUpdatePose_fn;
  var PlaneDetection = class extends Component {
    constructor() {
      super(...arguments);
      __privateAdd(this, _planeLost);
      __privateAdd(this, _planeFound);
      __privateAdd(this, _planeUpdate);
      __privateAdd(this, _planeUpdatePose);
      /**
       * Material to assign to created plane meshes or `null` if meshes should not be created.
       */
      __publicField(this, "planeMaterial", null);
      /**
       * Collision mask to assign to newly created collision components or a negative value if
       * collision components should not be created.
       */
      __publicField(this, "collisionMask", -1);
      /** Map of all planes and their last updated timestamps */
      __publicField(this, "planes", /* @__PURE__ */ new Map());
      /** Objects generated for each XRPlane */
      __publicField(this, "planeObjects", /* @__PURE__ */ new Map());
      /** Called when a plane starts tracking */
      __publicField(this, "onPlaneFound", new Emitter());
      /** Called when a plane stops tracking */
      __publicField(this, "onPlaneLost", new Emitter());
    }
    update() {
      if (!this.engine.xr?.frame)
        return;
      if (this.engine.xr.frame.detectedPlanes === void 0) {
        console.error("plane-detection: WebXR feature not available.");
        this.active = false;
        return;
      }
      const detectedPlanes = this.engine.xr.frame.detectedPlanes;
      for (const [plane, _] of this.planes) {
        if (!detectedPlanes.has(plane)) {
          __privateMethod(this, _planeLost, planeLost_fn).call(this, plane);
        }
      }
      detectedPlanes.forEach((plane) => {
        if (this.planes.has(plane)) {
          if (plane.lastChangedTime > this.planes.get(plane)) {
            __privateMethod(this, _planeUpdate, planeUpdate_fn).call(this, plane);
          }
        } else {
          __privateMethod(this, _planeFound, planeFound_fn).call(this, plane);
        }
        __privateMethod(this, _planeUpdatePose, planeUpdatePose_fn).call(this, plane);
      });
    }
  };
  _planeLost = new WeakSet();
  planeLost_fn = function(plane) {
    this.planes.delete(plane);
    const o = this.planeObjects.get(plane);
    this.onPlaneLost.notify(plane, o);
    if (o.objectId > 0)
      o.destroy();
  };
  _planeFound = new WeakSet();
  planeFound_fn = function(plane) {
    this.planes.set(plane, plane.lastChangedTime);
    const o = this.engine.scene.addObject(this.object);
    this.planeObjects.set(plane, o);
    if (this.planeMaterial) {
      o.addComponent(MeshComponent, {
        mesh: planeMeshFromContour(this.engine, plane.polygon),
        material: this.planeMaterial
      });
    }
    if (this.collisionMask >= 0) {
      extentsFromContour(tempVec32, plane.polygon);
      tempVec32[1] = 0.025;
      o.addComponent(CollisionComponent, {
        group: this.collisionMask,
        collider: Collider.Box,
        extents: tempVec32
      });
    }
    this.onPlaneFound.notify(plane, o);
  };
  _planeUpdate = new WeakSet();
  planeUpdate_fn = function(plane) {
    this.planes.set(plane, plane.lastChangedTime);
    const planeMesh = this.planeObjects.get(plane).getComponent(MeshComponent);
    if (!planeMesh)
      return;
    planeMeshFromContour(this.engine, plane.polygon, planeMesh.mesh);
  };
  _planeUpdatePose = new WeakSet();
  planeUpdatePose_fn = function(plane) {
    const o = this.planeObjects.get(plane);
    const pose = this.engine.xr.frame.getPose(plane.planeSpace, this.engine.xr.currentReferenceSpace);
    if (!pose) {
      o.active = false;
      return;
    }
    setXRRigidTransformLocal(o, pose.transform);
  };
  __publicField(PlaneDetection, "TypeName", "plane-detection");
  __decorate13([
    property.material()
  ], PlaneDetection.prototype, "planeMaterial", void 0);
  __decorate13([
    property.int()
  ], PlaneDetection.prototype, "collisionMask", void 0);

  // node_modules/@wonderlandengine/components/dist/vrm.js
  var VRM_ROLL_AXES = {
    X: [1, 0, 0],
    Y: [0, 1, 0],
    Z: [0, 0, 1]
  };
  var VRM_AIM_AXES = {
    PositiveX: [1, 0, 0],
    NegativeX: [-1, 0, 0],
    PositiveY: [0, 1, 0],
    NegativeY: [0, -1, 0],
    PositiveZ: [0, 0, 1],
    NegativeZ: [0, 0, -1]
  };
  var Vrm = class extends Component {
    /** Meta information about the VRM model */
    meta = null;
    /** The humanoid bones of the VRM model */
    bones = {
      /* Torso */
      hips: null,
      spine: null,
      chest: null,
      upperChest: null,
      neck: null,
      /* Head */
      head: null,
      leftEye: null,
      rightEye: null,
      jaw: null,
      /* Legs */
      leftUpperLeg: null,
      leftLowerLeg: null,
      leftFoot: null,
      leftToes: null,
      rightUpperLeg: null,
      rightLowerLeg: null,
      rightFoot: null,
      rightToes: null,
      /* Arms */
      leftShoulder: null,
      leftUpperArm: null,
      leftLowerArm: null,
      leftHand: null,
      rightShoulder: null,
      rightUpperArm: null,
      rightLowerArm: null,
      rightHand: null,
      /* Fingers */
      leftThumbMetacarpal: null,
      leftThumbProximal: null,
      leftThumbDistal: null,
      leftIndexProximal: null,
      leftIndexIntermediate: null,
      leftIndexDistal: null,
      leftMiddleProximal: null,
      leftMiddleIntermediate: null,
      leftMiddleDistal: null,
      leftRingProximal: null,
      leftRingIntermediate: null,
      leftRingDistal: null,
      leftLittleProximal: null,
      leftLittleIntermediate: null,
      leftLittleDistal: null,
      rightThumbMetacarpal: null,
      rightThumbProximal: null,
      rightThumbDistal: null,
      rightIndexProximal: null,
      rightIndexIntermediate: null,
      rightIndexDistal: null,
      rightMiddleProximal: null,
      rightMiddleIntermediate: null,
      rightMiddleDistal: null,
      rightRingProximal: null,
      rightRingIntermediate: null,
      rightRingDistal: null,
      rightLittleProximal: null,
      rightLittleIntermediate: null,
      rightLittleDistal: null
    };
    /** Rotations of the bones in the rest pose (T-pose) */
    restPose = {};
    /* All node constraints, ordered to deal with dependencies */
    _nodeConstraints = [];
    /* VRMC_springBone chains */
    _springChains = [];
    /* Spherical colliders for spring bones */
    _sphereColliders = [];
    /* Capsule shaped colliders for spring bones */
    _capsuleColliders = [];
    /* Indicates which meshes are rendered in first/third person views */
    _firstPersonAnnotations = [];
    /* Contains details for (bone type) lookAt behaviour */
    _lookAt = null;
    /* Whether or not the VRM component has been initialized with `initializeVrm` */
    _initialized = false;
    init() {
      this._tempV3 = vec3_exports.create();
      this._tempV3A = vec3_exports.create();
      this._tempV3B = vec3_exports.create();
      this._tempQuat = quat_exports.create();
      this._tempQuatA = quat_exports.create();
      this._tempQuatB = quat_exports.create();
      this._tempMat4A = mat4_exports.create();
      this._tempQuat2 = quat2_exports.create();
      this._tailToShape = vec3_exports.create();
      this._headToTail = vec3_exports.create();
      this._inertia = vec3_exports.create();
      this._stiffness = vec3_exports.create();
      this._external = vec3_exports.create();
      this._rightVector = vec3_exports.set(vec3_exports.create(), 1, 0, 0);
      this._upVector = vec3_exports.set(vec3_exports.create(), 0, 1, 0);
      this._forwardVector = vec3_exports.set(vec3_exports.create(), 0, 0, 1);
      this._identityQuat = quat_exports.identity(quat_exports.create());
      this._rad2deg = 180 / Math.PI;
    }
    start() {
      if (!this.src) {
        console.error("vrm: src property not set");
        return;
      }
      this.engine.scene.append(this.src, { loadGltfExtensions: true }).then(({ root, extensions }) => {
        root.children.forEach((child) => child.parent = this.object);
        this._initializeVrm(extensions);
        root.destroy();
      });
    }
    /**
     * Parses the VRM glTF extensions and initializes the vrm component.
     * @param {GLTFExtensions} extensions The glTF extensions for the VRM model
     */
    _initializeVrm(extensions) {
      if (this._initialized) {
        throw Error("VRM component has already been initialized");
      }
      const VRMC_vrm = extensions.root["VRMC_vrm"];
      if (!VRMC_vrm) {
        throw Error("Missing VRM extensions");
      }
      if (VRMC_vrm.specVersion !== "1.0") {
        throw Error(`Unsupported VRM version, only 1.0 is supported, but encountered '${VRMC_vrm.specVersion}'`);
      }
      this.meta = VRMC_vrm.meta;
      this._parseHumanoid(VRMC_vrm.humanoid, extensions);
      if (VRMC_vrm.firstPerson) {
        this._parseFirstPerson(VRMC_vrm.firstPerson, extensions);
      }
      if (VRMC_vrm.lookAt) {
        this._parseLookAt(VRMC_vrm.lookAt);
      }
      this._findAndParseNodeConstraints(extensions);
      const springBone = extensions.root["VRMC_springBone"];
      if (springBone) {
        this._parseAndInitializeSpringBones(springBone, extensions);
      }
      this._initialized = true;
    }
    _parseHumanoid(humanoid, extensions) {
      for (const boneName in humanoid.humanBones) {
        if (!(boneName in this.bones)) {
          console.warn(`Unrecognized bone '${boneName}'`);
          continue;
        }
        const node = humanoid.humanBones[boneName].node;
        const objectId = extensions.idMapping[node];
        this.bones[boneName] = this.engine.wrapObject(objectId);
        this.restPose[boneName] = quat_exports.copy(quat_exports.create(), this.bones[boneName].rotationLocal);
      }
    }
    _parseFirstPerson(firstPerson, extensions) {
      for (const meshAnnotation of firstPerson.meshAnnotations) {
        const annotation = {
          node: this.engine.wrapObject(extensions.idMapping[meshAnnotation.node]),
          firstPerson: true,
          thirdPerson: true
        };
        switch (meshAnnotation.type) {
          case "firstPersonOnly":
            annotation.thirdPerson = false;
            break;
          case "thirdPersonOnly":
            annotation.firstPerson = false;
            break;
          case "both":
            break;
          case "auto":
            console.warn("First person mesh annotation type 'auto' is not supported, treating as 'both'!");
            break;
          default:
            console.error(`Invalid mesh annotation type '${meshAnnotation.type}'`);
            break;
        }
        this._firstPersonAnnotations.push(annotation);
      }
    }
    _parseLookAt(lookAt2) {
      if (lookAt2.type !== "bone") {
        console.warn(`Unsupported lookAt type '${lookAt2.type}', only 'bone' is supported`);
        return;
      }
      const parseRangeMap = (rangeMap) => {
        return {
          inputMaxValue: rangeMap.inputMaxValue,
          outputScale: rangeMap.outputScale
        };
      };
      this._lookAt = {
        offsetFromHeadBone: lookAt2.offsetFromHeadBone || [0, 0, 0],
        horizontalInner: parseRangeMap(lookAt2.rangeMapHorizontalInner),
        horizontalOuter: parseRangeMap(lookAt2.rangeMapHorizontalOuter),
        verticalDown: parseRangeMap(lookAt2.rangeMapVerticalDown),
        verticalUp: parseRangeMap(lookAt2.rangeMapVerticalUp)
      };
    }
    _findAndParseNodeConstraints(extensions) {
      const traverse = (object) => {
        const nodeExtensions = extensions.node[object.objectId];
        if (nodeExtensions && "VRMC_node_constraint" in nodeExtensions) {
          const nodeConstraintExtension = nodeExtensions["VRMC_node_constraint"];
          const constraint = nodeConstraintExtension.constraint;
          let type, axis;
          if ("roll" in constraint) {
            type = "roll";
            axis = VRM_ROLL_AXES[constraint.roll.rollAxis];
          } else if ("aim" in constraint) {
            type = "aim";
            axis = VRM_AIM_AXES[constraint.aim.aimAxis];
          } else if ("rotation" in constraint) {
            type = "rotation";
          }
          if (type) {
            const source = this.engine.wrapObject(extensions.idMapping[constraint[type].source]);
            this._nodeConstraints.push({
              type,
              source,
              destination: object,
              axis,
              weight: constraint[type].weight,
              /* Rest pose */
              destinationRestLocalRotation: quat_exports.copy(quat_exports.create(), object.rotationLocal),
              sourceRestLocalRotation: quat_exports.copy(quat_exports.create(), source.rotationLocal),
              sourceRestLocalRotationInv: quat_exports.invert(quat_exports.create(), source.rotationLocal)
            });
          } else {
            console.warn("Unrecognized or invalid VRMC_node_constraint, ignoring it");
          }
        }
        for (const child of object.children) {
          traverse(child);
        }
      };
      traverse(this.object);
    }
    _parseAndInitializeSpringBones(springBone, extensions) {
      const colliders = (springBone.colliders || []).map((collider, i) => {
        const shapeType = "capsule" in collider.shape ? "capsule" : "sphere";
        return {
          id: i,
          object: this.engine.wrapObject(extensions.idMapping[collider.node]),
          shape: {
            isCapsule: shapeType === "capsule",
            radius: collider.shape[shapeType].radius,
            offset: collider.shape[shapeType].offset,
            tail: collider.shape[shapeType].tail
          },
          cache: {
            head: vec3_exports.create(),
            tail: vec3_exports.create()
          }
        };
      });
      this._sphereColliders = colliders.filter((c) => !c.shape.isCapsule);
      this._capsuleColliders = colliders.filter((c) => c.shape.isCapsule);
      const colliderGroups = (springBone.colliderGroups || []).map((group) => ({
        name: group.name,
        colliders: group.colliders.map((c) => colliders[c])
      }));
      for (const spring of springBone.springs) {
        const joints = [];
        for (const joint of spring.joints) {
          const springJoint = {
            hitRadius: 0,
            stiffness: 1,
            gravityPower: 0,
            gravityDir: [0, -1, 0],
            dragForce: 0.5,
            node: null,
            state: null
          };
          Object.assign(springJoint, joint);
          springJoint.node = this.engine.wrapObject(extensions.idMapping[springJoint.node]);
          joints.push(springJoint);
        }
        const springChainColliders = (spring.colliderGroups || []).flatMap((cg) => colliderGroups[cg].colliders);
        this._springChains.push({
          name: spring.name,
          center: spring.center ? this.engine.wrapObject(extensions.idMapping[spring.center]) : null,
          joints,
          sphereColliders: springChainColliders.filter((c) => !c.shape.isCapsule),
          capsuleColliders: springChainColliders.filter((c) => c.shape.isCapsule)
        });
      }
      for (const springChain of this._springChains) {
        for (let i = 0; i < springChain.joints.length - 1; ++i) {
          const springBoneJoint = springChain.joints[i];
          const childSpringBoneJoint = springChain.joints[i + 1];
          const springBonePosition = springBoneJoint.node.getTranslationWorld(vec3_exports.create());
          const childSpringBonePosition = childSpringBoneJoint.node.getTranslationWorld(vec3_exports.create());
          const boneDirection = vec3_exports.subtract(this._tempV3A, springBonePosition, childSpringBonePosition);
          const state = {
            prevTail: childSpringBonePosition,
            currentTail: vec3_exports.copy(vec3_exports.create(), childSpringBonePosition),
            initialLocalRotation: quat_exports.copy(quat_exports.create(), springBoneJoint.node.rotationLocal),
            initialLocalTransformInvert: quat2_exports.invert(quat2_exports.create(), springBoneJoint.node.transformLocal),
            boneAxis: vec3_exports.normalize(vec3_exports.create(), childSpringBoneJoint.node.getTranslationLocal(this._tempV3)),
            /* Ensure bone length is at least 1cm to avoid jittery behaviour from zero-length bones */
            boneLength: Math.max(0.01, vec3_exports.length(boneDirection)),
            /* Tail positions in center space, if needed */
            prevTailCenter: null,
            currentTailCenter: null
          };
          if (springChain.center) {
            state.prevTailCenter = springChain.center.transformPointInverseWorld(vec3_exports.create(), childSpringBonePosition);
            state.currentTailCenter = vec3_exports.copy(vec3_exports.create(), childSpringBonePosition);
          }
          springBoneJoint.state = state;
        }
      }
    }
    update(dt) {
      if (!this._initialized) {
        return;
      }
      this._resolveLookAt();
      this._resolveConstraints();
      this._updateSpringBones(dt);
    }
    _rangeMap(rangeMap, input) {
      const maxValue = rangeMap.inputMaxValue;
      const outputScale = rangeMap.outputScale;
      return Math.min(input, maxValue) / maxValue * outputScale;
    }
    _resolveLookAt() {
      if (!this._lookAt || !this.lookAtTarget) {
        return;
      }
      const lookAtSource = this.bones.head.transformPointWorld(this._tempV3A, this._lookAt.offsetFromHeadBone);
      const lookAtTarget = this.lookAtTarget.getTranslationWorld(this._tempV3B);
      const lookAtDirection = vec3_exports.sub(this._tempV3A, lookAtTarget, lookAtSource);
      vec3_exports.normalize(lookAtDirection, lookAtDirection);
      this.bones.head.parent.transformVectorInverseWorld(lookAtDirection);
      const z = vec3_exports.dot(lookAtDirection, this._forwardVector);
      const x = vec3_exports.dot(lookAtDirection, this._rightVector);
      const yaw = Math.atan2(x, z) * this._rad2deg;
      const xz = Math.sqrt(x * x + z * z);
      const y = vec3_exports.dot(lookAtDirection, this._upVector);
      let pitch = Math.atan2(-y, xz) * this._rad2deg;
      if (pitch > 0) {
        pitch = this._rangeMap(this._lookAt.verticalDown, pitch);
      } else {
        pitch = -this._rangeMap(this._lookAt.verticalUp, -pitch);
      }
      if (this.bones.leftEye) {
        let yawLeft = yaw;
        if (yawLeft > 0) {
          yawLeft = this._rangeMap(this._lookAt.horizontalInner, yawLeft);
        } else {
          yawLeft = -this._rangeMap(this._lookAt.horizontalOuter, -yawLeft);
        }
        const eyeRotation = quat_exports.fromEuler(this._tempQuatA, pitch, yawLeft, 0);
        this.bones.leftEye.rotationLocal = quat_exports.multiply(eyeRotation, this.restPose.leftEye, eyeRotation);
      }
      if (this.bones.rightEye) {
        let yawRight = yaw;
        if (yawRight > 0) {
          yawRight = this._rangeMap(this._lookAt.horizontalOuter, yawRight);
        } else {
          yawRight = -this._rangeMap(this._lookAt.horizontalInner, -yawRight);
        }
        const eyeRotation = quat_exports.fromEuler(this._tempQuatA, pitch, yawRight, 0);
        this.bones.rightEye.rotationLocal = quat_exports.multiply(eyeRotation, this.restPose.rightEye, eyeRotation);
      }
    }
    _resolveConstraints() {
      for (const nodeConstraint of this._nodeConstraints) {
        this._resolveConstraint(nodeConstraint);
      }
    }
    _resolveConstraint(nodeConstraint) {
      const dstRestQuat = nodeConstraint.destinationRestLocalRotation;
      const srcRestQuatInv = nodeConstraint.sourceRestLocalRotationInv;
      const targetQuat = quat_exports.identity(this._tempQuatA);
      switch (nodeConstraint.type) {
        case "roll":
          {
            const deltaSrcQuat = quat_exports.multiply(this._tempQuatA, srcRestQuatInv, nodeConstraint.source.rotationLocal);
            const deltaSrcQuatInParent = quat_exports.multiply(this._tempQuatA, nodeConstraint.sourceRestLocalRotation, deltaSrcQuat);
            quat_exports.mul(deltaSrcQuatInParent, deltaSrcQuatInParent, srcRestQuatInv);
            const dstRestQuatInv = quat_exports.invert(this._tempQuatB, dstRestQuat);
            const deltaSrcQuatInDst = quat_exports.multiply(this._tempQuatB, dstRestQuatInv, deltaSrcQuatInParent);
            quat_exports.multiply(deltaSrcQuatInDst, deltaSrcQuatInDst, dstRestQuat);
            const toVec = vec3_exports.transformQuat(this._tempV3A, nodeConstraint.axis, deltaSrcQuatInDst);
            const fromToQuat = quat_exports.rotationTo(this._tempQuatA, nodeConstraint.axis, toVec);
            quat_exports.mul(targetQuat, dstRestQuat, quat_exports.invert(this._tempQuat, fromToQuat));
            quat_exports.mul(targetQuat, targetQuat, deltaSrcQuatInDst);
          }
          break;
        case "aim":
          {
            const dstParentWorldQuat = nodeConstraint.destination.parent.rotationWorld;
            const fromVec = vec3_exports.transformQuat(this._tempV3A, nodeConstraint.axis, dstRestQuat);
            vec3_exports.transformQuat(fromVec, fromVec, dstParentWorldQuat);
            const toVec = nodeConstraint.source.getTranslationWorld(this._tempV3B);
            vec3_exports.sub(toVec, toVec, nodeConstraint.destination.getTranslationWorld(this._tempV3));
            vec3_exports.normalize(toVec, toVec);
            const fromToQuat = quat_exports.rotationTo(this._tempQuatA, fromVec, toVec);
            quat_exports.mul(targetQuat, quat_exports.invert(this._tempQuat, dstParentWorldQuat), fromToQuat);
            quat_exports.mul(targetQuat, targetQuat, dstParentWorldQuat);
            quat_exports.mul(targetQuat, targetQuat, dstRestQuat);
          }
          break;
        case "rotation":
          {
            const srcDeltaQuat = quat_exports.mul(targetQuat, srcRestQuatInv, nodeConstraint.source.rotationLocal);
            quat_exports.mul(targetQuat, dstRestQuat, srcDeltaQuat);
          }
          break;
      }
      quat_exports.slerp(targetQuat, dstRestQuat, targetQuat, nodeConstraint.weight);
      nodeConstraint.destination.rotationLocal = targetQuat;
    }
    _updateSpringBones(dt) {
      this._sphereColliders.forEach(({ object, shape, cache }) => {
        const offset2 = vec3_exports.copy(cache.head, shape.offset);
        object.transformVectorWorld(offset2);
        vec3_exports.add(cache.head, object.getTranslationWorld(this._tempV3), offset2);
      });
      this._capsuleColliders.forEach(({ object, shape, cache }) => {
        const shapeCenter = object.getTranslationWorld(this._tempV3A);
        const headOffset = vec3_exports.copy(cache.head, shape.offset);
        object.transformVectorWorld(headOffset);
        vec3_exports.add(cache.head, shapeCenter, headOffset);
        const tailOffset = vec3_exports.copy(cache.tail, shape.tail);
        object.transformVectorWorld(tailOffset);
        vec3_exports.add(cache.tail, shapeCenter, tailOffset);
      });
      this._springChains.forEach((springChain) => {
        for (let i = 0; i < springChain.joints.length - 1; ++i) {
          const joint = springChain.joints[i];
          const parentWorldRotation = joint.node.parent ? joint.node.parent.rotationWorld : this._identityQuat;
          const inertia = this._inertia;
          if (springChain.center) {
            vec3_exports.sub(inertia, joint.state.currentTailCenter, joint.state.prevTailCenter);
            springChain.center.transformVectorWorld(inertia);
          } else {
            vec3_exports.sub(inertia, joint.state.currentTail, joint.state.prevTail);
          }
          vec3_exports.scale(inertia, inertia, 1 - joint.dragForce);
          const stiffness = vec3_exports.copy(this._stiffness, joint.state.boneAxis);
          vec3_exports.transformQuat(stiffness, stiffness, joint.state.initialLocalRotation);
          vec3_exports.transformQuat(stiffness, stiffness, parentWorldRotation);
          vec3_exports.scale(stiffness, stiffness, dt * joint.stiffness);
          const external = vec3_exports.scale(this._external, joint.gravityDir, dt * joint.gravityPower);
          const nextTail = vec3_exports.copy(this._tempV3A, joint.state.currentTail);
          vec3_exports.add(nextTail, nextTail, inertia);
          vec3_exports.add(nextTail, nextTail, stiffness);
          vec3_exports.add(nextTail, nextTail, external);
          const worldPosition = joint.node.getTranslationWorld(this._tempV3B);
          vec3_exports.sub(nextTail, nextTail, worldPosition);
          vec3_exports.normalize(nextTail, nextTail);
          vec3_exports.scaleAndAdd(nextTail, worldPosition, nextTail, joint.state.boneLength);
          for (const { shape, cache } of springChain.sphereColliders) {
            let tailToShape = this._tailToShape;
            const sphereCenter = cache.head;
            tailToShape = vec3_exports.sub(tailToShape, nextTail, sphereCenter);
            const radius = shape.radius + joint.hitRadius;
            const dist3 = vec3_exports.length(tailToShape) - radius;
            if (dist3 < 0) {
              vec3_exports.normalize(tailToShape, tailToShape);
              vec3_exports.scaleAndAdd(nextTail, nextTail, tailToShape, -dist3);
              vec3_exports.sub(nextTail, nextTail, worldPosition);
              vec3_exports.normalize(nextTail, nextTail);
              vec3_exports.scaleAndAdd(nextTail, worldPosition, nextTail, joint.state.boneLength);
            }
          }
          for (const { shape, cache } of springChain.capsuleColliders) {
            let tailToShape = this._tailToShape;
            const head = cache.head;
            const tail = cache.tail;
            tailToShape = vec3_exports.sub(tailToShape, nextTail, head);
            const headToTail = vec3_exports.sub(this._headToTail, tail, head);
            const dot6 = vec3_exports.dot(headToTail, tailToShape);
            if (vec3_exports.squaredLength(headToTail) <= dot6) {
              vec3_exports.sub(tailToShape, nextTail, tail);
            } else if (dot6 > 0) {
              vec3_exports.scale(headToTail, headToTail, dot6 / vec3_exports.squaredLength(headToTail));
              vec3_exports.sub(tailToShape, tailToShape, headToTail);
            }
            const radius = shape.radius + joint.hitRadius;
            const dist3 = vec3_exports.length(tailToShape) - radius;
            if (dist3 < 0) {
              vec3_exports.normalize(tailToShape, tailToShape);
              vec3_exports.scaleAndAdd(nextTail, nextTail, tailToShape, -dist3);
              vec3_exports.sub(nextTail, nextTail, worldPosition);
              vec3_exports.normalize(nextTail, nextTail);
              vec3_exports.scaleAndAdd(nextTail, worldPosition, nextTail, joint.state.boneLength);
            }
          }
          vec3_exports.copy(joint.state.prevTail, joint.state.currentTail);
          vec3_exports.copy(joint.state.currentTail, nextTail);
          if (springChain.center) {
            vec3_exports.copy(joint.state.prevTailCenter, joint.state.currentTailCenter);
            vec3_exports.copy(joint.state.currentTailCenter, nextTail);
            springChain.center.transformPointInverseWorld(joint.state.currentTailCenter);
          }
          joint.node.parent.transformPointInverseWorld(nextTail);
          const nextTailDualQuat = quat2_exports.fromTranslation(this._tempQuat2, nextTail);
          quat2_exports.multiply(nextTailDualQuat, joint.state.initialLocalTransformInvert, nextTailDualQuat);
          quat2_exports.getTranslation(nextTail, nextTailDualQuat);
          vec3_exports.normalize(nextTail, nextTail);
          const jointRotation = quat_exports.rotationTo(this._tempQuatA, joint.state.boneAxis, nextTail);
          joint.node.rotationLocal = quat_exports.mul(this._tempQuatA, joint.state.initialLocalRotation, jointRotation);
        }
      });
    }
    /**
     * @param {boolean} firstPerson Whether the model should render for first person or third person views
     */
    set firstPerson(firstPerson) {
      this._firstPersonAnnotations.forEach((annotation) => {
        const visible = firstPerson == annotation.firstPerson || firstPerson != annotation.thirdPerson;
        annotation.node.getComponents("mesh").forEach((mesh) => {
          mesh.active = visible;
        });
      });
    }
  };
  __publicField(Vrm, "TypeName", "vrm");
  __publicField(Vrm, "Properties", {
    /** URL to a VRM file to load */
    src: { type: Type.String },
    /** Object the VRM is looking at */
    lookAtTarget: { type: Type.Object }
  });

  // node_modules/@wonderlandengine/components/dist/wasd-controls.js
  var _direction2 = new Float32Array(3);
  var WasdControlsComponent = class extends Component {
    init() {
      this.up = false;
      this.right = false;
      this.down = false;
      this.left = false;
      window.addEventListener("keydown", this.press.bind(this));
      window.addEventListener("keyup", this.release.bind(this));
    }
    start() {
      this.headObject = this.headObject || this.object;
    }
    update() {
      vec3_exports.zero(_direction2);
      if (this.up)
        _direction2[2] -= 1;
      if (this.down)
        _direction2[2] += 1;
      if (this.left)
        _direction2[0] -= 1;
      if (this.right)
        _direction2[0] += 1;
      vec3_exports.normalize(_direction2, _direction2);
      _direction2[0] *= this.speed;
      _direction2[2] *= this.speed;
      vec3_exports.transformQuat(_direction2, _direction2, this.headObject.transformWorld);
      if (this.lockY) {
        _direction2[1] = 0;
        vec3_exports.normalize(_direction2, _direction2);
        vec3_exports.scale(_direction2, _direction2, this.speed);
      }
      this.object.translateLocal(_direction2);
    }
    press(e) {
      if (e.keyCode === 38 || e.keyCode === 87 || e.keyCode === 90) {
        this.up = true;
      } else if (e.keyCode === 39 || e.keyCode === 68) {
        this.right = true;
      } else if (e.keyCode === 40 || e.keyCode === 83) {
        this.down = true;
      } else if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
        this.left = true;
      }
    }
    release(e) {
      if (e.keyCode === 38 || e.keyCode === 87 || e.keyCode === 90) {
        this.up = false;
      } else if (e.keyCode === 39 || e.keyCode === 68) {
        this.right = false;
      } else if (e.keyCode === 40 || e.keyCode === 83) {
        this.down = false;
      } else if (e.keyCode === 37 || e.keyCode === 65 || e.keyCode === 81) {
        this.left = false;
      }
    }
  };
  __publicField(WasdControlsComponent, "TypeName", "wasd-controls");
  __publicField(WasdControlsComponent, "Properties", {
    /** Movement speed in m/s. */
    speed: { type: Type.Float, default: 0.1 },
    /** Flag for only moving the object on the global x & z planes */
    lockY: { type: Type.Bool, default: false },
    /** Object of which the orientation is used to determine forward direction */
    headObject: { type: Type.Object }
  });

  // node_modules/@zestymarket/wonderland-sdk/dist/zesty-wonderland-sdk.js
  var zesty_wonderland_sdk_exports = {};
  __export(zesty_wonderland_sdk_exports, {
    ZestyBanner: () => J
  });
  var Yt = Object.create;
  var X = Object.defineProperty;
  var Zt = Object.getOwnPropertyDescriptor;
  var er = Object.getOwnPropertyNames;
  var tr = Object.getPrototypeOf;
  var rr = Object.prototype.hasOwnProperty;
  var nr = (t, e, r) => e in t ? X(t, e, { enumerable: true, configurable: true, writable: true, value: r }) : t[e] = r;
  var l = (t, e) => () => (e || t((e = { exports: {} }).exports, e), e.exports);
  var ir = (t, e, r, i) => {
    if (e && typeof e == "object" || typeof e == "function")
      for (let n of er(e))
        !rr.call(t, n) && n !== r && X(t, n, { get: () => e[n], enumerable: !(i = Zt(e, n)) || i.enumerable });
    return t;
  };
  var Ae = (t, e, r) => (r = t != null ? Yt(tr(t)) : {}, ir(e || !t || !t.__esModule ? X(r, "default", { value: t, enumerable: true }) : r, t));
  var G = (t, e, r) => (nr(t, typeof e != "symbol" ? e + "" : e, r), r);
  var Q = l((vn, qe) => {
    "use strict";
    qe.exports = function(e, r) {
      return function() {
        for (var n = new Array(arguments.length), s = 0; s < n.length; s++)
          n[s] = arguments[s];
        return e.apply(r, n);
      };
    };
  });
  var f = l((wn, ke) => {
    "use strict";
    var sr = Q(), Z = Object.prototype.toString, ee = function(t) {
      return function(e) {
        var r = Z.call(e);
        return t[r] || (t[r] = r.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function A(t) {
      return t = t.toLowerCase(), function(r) {
        return ee(r) === t;
      };
    }
    function te(t) {
      return Array.isArray(t);
    }
    function F(t) {
      return typeof t > "u";
    }
    function ar(t) {
      return t !== null && !F(t) && t.constructor !== null && !F(t.constructor) && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
    }
    var Te = A("ArrayBuffer");
    function or(t) {
      var e;
      return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? e = ArrayBuffer.isView(t) : e = t && t.buffer && Te(t.buffer), e;
    }
    function ur(t) {
      return typeof t == "string";
    }
    function cr(t) {
      return typeof t == "number";
    }
    function Se(t) {
      return t !== null && typeof t == "object";
    }
    function j(t) {
      if (ee(t) !== "object")
        return false;
      var e = Object.getPrototypeOf(t);
      return e === null || e === Object.prototype;
    }
    var lr = A("Date"), dr = A("File"), fr = A("Blob"), pr = A("FileList");
    function re(t) {
      return Z.call(t) === "[object Function]";
    }
    function hr(t) {
      return Se(t) && re(t.pipe);
    }
    function mr(t) {
      var e = "[object FormData]";
      return t && (typeof FormData == "function" && t instanceof FormData || Z.call(t) === e || re(t.toString) && t.toString() === e);
    }
    var yr = A("URLSearchParams");
    function vr(t) {
      return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
    }
    function wr() {
      return typeof navigator < "u" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS") ? false : typeof window < "u" && typeof document < "u";
    }
    function ne(t, e) {
      if (!(t === null || typeof t > "u"))
        if (typeof t != "object" && (t = [t]), te(t))
          for (var r = 0, i = t.length; r < i; r++)
            e.call(null, t[r], r, t);
        else
          for (var n in t)
            Object.prototype.hasOwnProperty.call(t, n) && e.call(null, t[n], n, t);
    }
    function Y() {
      var t = {};
      function e(n, s) {
        j(t[s]) && j(n) ? t[s] = Y(t[s], n) : j(n) ? t[s] = Y({}, n) : te(n) ? t[s] = n.slice() : t[s] = n;
      }
      for (var r = 0, i = arguments.length; r < i; r++)
        ne(arguments[r], e);
      return t;
    }
    function gr(t, e, r) {
      return ne(e, function(n, s) {
        r && typeof n == "function" ? t[s] = sr(n, r) : t[s] = n;
      }), t;
    }
    function br(t) {
      return t.charCodeAt(0) === 65279 && (t = t.slice(1)), t;
    }
    function Er(t, e, r, i) {
      t.prototype = Object.create(e.prototype, i), t.prototype.constructor = t, r && Object.assign(t.prototype, r);
    }
    function xr(t, e, r) {
      var i, n, s, a = {};
      e = e || {};
      do {
        for (i = Object.getOwnPropertyNames(t), n = i.length; n-- > 0; )
          s = i[n], a[s] || (e[s] = t[s], a[s] = true);
        t = Object.getPrototypeOf(t);
      } while (t && (!r || r(t, e)) && t !== Object.prototype);
      return e;
    }
    function Cr(t, e, r) {
      t = String(t), (r === void 0 || r > t.length) && (r = t.length), r -= e.length;
      var i = t.indexOf(e, r);
      return i !== -1 && i === r;
    }
    function Rr(t) {
      if (!t)
        return null;
      var e = t.length;
      if (F(e))
        return null;
      for (var r = new Array(e); e-- > 0; )
        r[e] = t[e];
      return r;
    }
    var Or = function(t) {
      return function(e) {
        return t && e instanceof t;
      };
    }(typeof Uint8Array < "u" && Object.getPrototypeOf(Uint8Array));
    ke.exports = { isArray: te, isArrayBuffer: Te, isBuffer: ar, isFormData: mr, isArrayBufferView: or, isString: ur, isNumber: cr, isObject: Se, isPlainObject: j, isUndefined: F, isDate: lr, isFile: dr, isBlob: fr, isFunction: re, isStream: hr, isURLSearchParams: yr, isStandardBrowserEnv: wr, forEach: ne, merge: Y, extend: gr, trim: vr, stripBOM: br, inherits: Er, toFlatObject: xr, kindOf: ee, kindOfTest: A, endsWith: Cr, toArray: Rr, isTypedArray: Or, isFileList: pr };
  });
  var ie = l((gn, Pe) => {
    "use strict";
    var S = f();
    function Ne(t) {
      return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    Pe.exports = function(e, r, i) {
      if (!r)
        return e;
      var n;
      if (i)
        n = i(r);
      else if (S.isURLSearchParams(r))
        n = r.toString();
      else {
        var s = [];
        S.forEach(r, function(c, h) {
          c === null || typeof c > "u" || (S.isArray(c) ? h = h + "[]" : c = [c], S.forEach(c, function(d) {
            S.isDate(d) ? d = d.toISOString() : S.isObject(d) && (d = JSON.stringify(d)), s.push(Ne(h) + "=" + Ne(d));
          }));
        }), n = s.join("&");
      }
      if (n) {
        var a = e.indexOf("#");
        a !== -1 && (e = e.slice(0, a)), e += (e.indexOf("?") === -1 ? "?" : "&") + n;
      }
      return e;
    };
  });
  var De = l((bn, _e) => {
    "use strict";
    var Ar = f();
    function I() {
      this.handlers = [];
    }
    I.prototype.use = function(e, r, i) {
      return this.handlers.push({ fulfilled: e, rejected: r, synchronous: i ? i.synchronous : false, runWhen: i ? i.runWhen : null }), this.handlers.length - 1;
    };
    I.prototype.eject = function(e) {
      this.handlers[e] && (this.handlers[e] = null);
    };
    I.prototype.forEach = function(e) {
      Ar.forEach(this.handlers, function(i) {
        i !== null && e(i);
      });
    };
    _e.exports = I;
  });
  var Be = l((En, Ue) => {
    "use strict";
    var qr = f();
    Ue.exports = function(e, r) {
      qr.forEach(e, function(n, s) {
        s !== r && s.toUpperCase() === r.toUpperCase() && (e[r] = n, delete e[s]);
      });
    };
  });
  var q = l((xn, Ie) => {
    "use strict";
    var Le = f();
    function k(t, e, r, i, n) {
      Error.call(this), this.message = t, this.name = "AxiosError", e && (this.code = e), r && (this.config = r), i && (this.request = i), n && (this.response = n);
    }
    Le.inherits(k, Error, { toJSON: function() {
      return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code, status: this.response && this.response.status ? this.response.status : null };
    } });
    var je = k.prototype, Fe = {};
    ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED"].forEach(function(t) {
      Fe[t] = { value: t };
    });
    Object.defineProperties(k, Fe);
    Object.defineProperty(je, "isAxiosError", { value: true });
    k.from = function(t, e, r, i, n, s) {
      var a = Object.create(je);
      return Le.toFlatObject(t, a, function(c) {
        return c !== Error.prototype;
      }), k.call(a, t.message, e, r, i, n), a.name = t.name, s && Object.assign(a, s), a;
    };
    Ie.exports = k;
  });
  var se = l((Cn, ze) => {
    "use strict";
    ze.exports = { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false };
  });
  var ae = l((Rn, Me) => {
    "use strict";
    var b = f();
    function Tr(t, e) {
      e = e || new FormData();
      var r = [];
      function i(s) {
        return s === null ? "" : b.isDate(s) ? s.toISOString() : b.isArrayBuffer(s) || b.isTypedArray(s) ? typeof Blob == "function" ? new Blob([s]) : Buffer.from(s) : s;
      }
      function n(s, a) {
        if (b.isPlainObject(s) || b.isArray(s)) {
          if (r.indexOf(s) !== -1)
            throw Error("Circular reference detected in " + a);
          r.push(s), b.forEach(s, function(c, h) {
            if (!b.isUndefined(c)) {
              var o = a ? a + "." + h : h, d;
              if (c && !a && typeof c == "object") {
                if (b.endsWith(h, "{}"))
                  c = JSON.stringify(c);
                else if (b.endsWith(h, "[]") && (d = b.toArray(c))) {
                  d.forEach(function(v) {
                    !b.isUndefined(v) && e.append(o, i(v));
                  });
                  return;
                }
              }
              n(c, o);
            }
          }), r.pop();
        } else
          e.append(a, i(s));
      }
      return n(t), e;
    }
    Me.exports = Tr;
  });
  var He = l((On, $e) => {
    "use strict";
    var oe = q();
    $e.exports = function(e, r, i) {
      var n = i.config.validateStatus;
      !i.status || !n || n(i.status) ? e(i) : r(new oe("Request failed with status code " + i.status, [oe.ERR_BAD_REQUEST, oe.ERR_BAD_RESPONSE][Math.floor(i.status / 100) - 4], i.config, i.request, i));
    };
  });
  var Je = l((An, We) => {
    "use strict";
    var z = f();
    We.exports = z.isStandardBrowserEnv() ? function() {
      return { write: function(r, i, n, s, a, u) {
        var c = [];
        c.push(r + "=" + encodeURIComponent(i)), z.isNumber(n) && c.push("expires=" + new Date(n).toGMTString()), z.isString(s) && c.push("path=" + s), z.isString(a) && c.push("domain=" + a), u === true && c.push("secure"), document.cookie = c.join("; ");
      }, read: function(r) {
        var i = document.cookie.match(new RegExp("(^|;\\s*)(" + r + ")=([^;]*)"));
        return i ? decodeURIComponent(i[3]) : null;
      }, remove: function(r) {
        this.write(r, "", Date.now() - 864e5);
      } };
    }() : function() {
      return { write: function() {
      }, read: function() {
        return null;
      }, remove: function() {
      } };
    }();
  });
  var Ke = l((qn, Ve) => {
    "use strict";
    Ve.exports = function(e) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e);
    };
  });
  var Ge = l((Tn, Xe) => {
    "use strict";
    Xe.exports = function(e, r) {
      return r ? e.replace(/\/+$/, "") + "/" + r.replace(/^\/+/, "") : e;
    };
  });
  var ue = l((Sn, Qe) => {
    "use strict";
    var Sr = Ke(), kr = Ge();
    Qe.exports = function(e, r) {
      return e && !Sr(r) ? kr(e, r) : r;
    };
  });
  var Ze = l((kn, Ye) => {
    "use strict";
    var ce = f(), Nr = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
    Ye.exports = function(e) {
      var r = {}, i, n, s;
      return e && ce.forEach(e.split(`
`), function(u) {
        if (s = u.indexOf(":"), i = ce.trim(u.substr(0, s)).toLowerCase(), n = ce.trim(u.substr(s + 1)), i) {
          if (r[i] && Nr.indexOf(i) >= 0)
            return;
          i === "set-cookie" ? r[i] = (r[i] ? r[i] : []).concat([n]) : r[i] = r[i] ? r[i] + ", " + n : n;
        }
      }), r;
    };
  });
  var rt = l((Nn, tt) => {
    "use strict";
    var et = f();
    tt.exports = et.isStandardBrowserEnv() ? function() {
      var e = /(msie|trident)/i.test(navigator.userAgent), r = document.createElement("a"), i;
      function n(s) {
        var a = s;
        return e && (r.setAttribute("href", a), a = r.href), r.setAttribute("href", a), { href: r.href, protocol: r.protocol ? r.protocol.replace(/:$/, "") : "", host: r.host, search: r.search ? r.search.replace(/^\?/, "") : "", hash: r.hash ? r.hash.replace(/^#/, "") : "", hostname: r.hostname, port: r.port, pathname: r.pathname.charAt(0) === "/" ? r.pathname : "/" + r.pathname };
      }
      return i = n(window.location.href), function(a) {
        var u = et.isString(a) ? n(a) : a;
        return u.protocol === i.protocol && u.host === i.host;
      };
    }() : function() {
      return function() {
        return true;
      };
    }();
  });
  var U = l((Pn, it) => {
    "use strict";
    var le = q(), Pr = f();
    function nt(t) {
      le.call(this, t ?? "canceled", le.ERR_CANCELED), this.name = "CanceledError";
    }
    Pr.inherits(nt, le, { __CANCEL__: true });
    it.exports = nt;
  });
  var at = l((_n, st) => {
    "use strict";
    st.exports = function(e) {
      var r = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e);
      return r && r[1] || "";
    };
  });
  var de = l((Dn, ot) => {
    "use strict";
    var B = f(), _r = He(), Dr = Je(), Ur = ie(), Br = ue(), Lr = Ze(), jr = rt(), Fr = se(), x = q(), Ir = U(), zr = at();
    ot.exports = function(e) {
      return new Promise(function(i, n) {
        var s = e.data, a = e.headers, u = e.responseType, c;
        function h() {
          e.cancelToken && e.cancelToken.unsubscribe(c), e.signal && e.signal.removeEventListener("abort", c);
        }
        B.isFormData(s) && B.isStandardBrowserEnv() && delete a["Content-Type"];
        var o = new XMLHttpRequest();
        if (e.auth) {
          var d = e.auth.username || "", v = e.auth.password ? unescape(encodeURIComponent(e.auth.password)) : "";
          a.Authorization = "Basic " + btoa(d + ":" + v);
        }
        var m = Br(e.baseURL, e.url);
        o.open(e.method.toUpperCase(), Ur(m, e.params, e.paramsSerializer), true), o.timeout = e.timeout;
        function Re() {
          if (o) {
            var g = "getAllResponseHeaders" in o ? Lr(o.getAllResponseHeaders()) : null, T = !u || u === "text" || u === "json" ? o.responseText : o.response, O = { data: T, status: o.status, statusText: o.statusText, headers: g, config: e, request: o };
            _r(function(K) {
              i(K), h();
            }, function(K) {
              n(K), h();
            }, O), o = null;
          }
        }
        if ("onloadend" in o ? o.onloadend = Re : o.onreadystatechange = function() {
          !o || o.readyState !== 4 || o.status === 0 && !(o.responseURL && o.responseURL.indexOf("file:") === 0) || setTimeout(Re);
        }, o.onabort = function() {
          o && (n(new x("Request aborted", x.ECONNABORTED, e, o)), o = null);
        }, o.onerror = function() {
          n(new x("Network Error", x.ERR_NETWORK, e, o, o)), o = null;
        }, o.ontimeout = function() {
          var T = e.timeout ? "timeout of " + e.timeout + "ms exceeded" : "timeout exceeded", O = e.transitional || Fr;
          e.timeoutErrorMessage && (T = e.timeoutErrorMessage), n(new x(T, O.clarifyTimeoutError ? x.ETIMEDOUT : x.ECONNABORTED, e, o)), o = null;
        }, B.isStandardBrowserEnv()) {
          var Oe = (e.withCredentials || jr(m)) && e.xsrfCookieName ? Dr.read(e.xsrfCookieName) : void 0;
          Oe && (a[e.xsrfHeaderName] = Oe);
        }
        "setRequestHeader" in o && B.forEach(a, function(T, O) {
          typeof s > "u" && O.toLowerCase() === "content-type" ? delete a[O] : o.setRequestHeader(O, T);
        }), B.isUndefined(e.withCredentials) || (o.withCredentials = !!e.withCredentials), u && u !== "json" && (o.responseType = e.responseType), typeof e.onDownloadProgress == "function" && o.addEventListener("progress", e.onDownloadProgress), typeof e.onUploadProgress == "function" && o.upload && o.upload.addEventListener("progress", e.onUploadProgress), (e.cancelToken || e.signal) && (c = function(g) {
          o && (n(!g || g && g.type ? new Ir() : g), o.abort(), o = null);
        }, e.cancelToken && e.cancelToken.subscribe(c), e.signal && (e.signal.aborted ? c() : e.signal.addEventListener("abort", c))), s || (s = null);
        var V = zr(m);
        if (V && ["http", "https", "file"].indexOf(V) === -1) {
          n(new x("Unsupported protocol " + V + ":", x.ERR_BAD_REQUEST, e));
          return;
        }
        o.send(s);
      });
    };
  });
  var ct = l((Un, ut) => {
    ut.exports = null;
  });
  var $ = l((Bn, pt) => {
    "use strict";
    var p = f(), lt = Be(), dt = q(), Mr = se(), $r = ae(), Hr = { "Content-Type": "application/x-www-form-urlencoded" };
    function ft(t, e) {
      !p.isUndefined(t) && p.isUndefined(t["Content-Type"]) && (t["Content-Type"] = e);
    }
    function Wr() {
      var t;
      return typeof XMLHttpRequest < "u" ? t = de() : typeof process < "u" && Object.prototype.toString.call(process) === "[object process]" && (t = de()), t;
    }
    function Jr(t, e, r) {
      if (p.isString(t))
        try {
          return (e || JSON.parse)(t), p.trim(t);
        } catch (i) {
          if (i.name !== "SyntaxError")
            throw i;
        }
      return (r || JSON.stringify)(t);
    }
    var M = { transitional: Mr, adapter: Wr(), transformRequest: [function(e, r) {
      if (lt(r, "Accept"), lt(r, "Content-Type"), p.isFormData(e) || p.isArrayBuffer(e) || p.isBuffer(e) || p.isStream(e) || p.isFile(e) || p.isBlob(e))
        return e;
      if (p.isArrayBufferView(e))
        return e.buffer;
      if (p.isURLSearchParams(e))
        return ft(r, "application/x-www-form-urlencoded;charset=utf-8"), e.toString();
      var i = p.isObject(e), n = r && r["Content-Type"], s;
      if ((s = p.isFileList(e)) || i && n === "multipart/form-data") {
        var a = this.env && this.env.FormData;
        return $r(s ? { "files[]": e } : e, a && new a());
      } else if (i || n === "application/json")
        return ft(r, "application/json"), Jr(e);
      return e;
    }], transformResponse: [function(e) {
      var r = this.transitional || M.transitional, i = r && r.silentJSONParsing, n = r && r.forcedJSONParsing, s = !i && this.responseType === "json";
      if (s || n && p.isString(e) && e.length)
        try {
          return JSON.parse(e);
        } catch (a) {
          if (s)
            throw a.name === "SyntaxError" ? dt.from(a, dt.ERR_BAD_RESPONSE, this, null, this.response) : a;
        }
      return e;
    }], timeout: 0, xsrfCookieName: "XSRF-TOKEN", xsrfHeaderName: "X-XSRF-TOKEN", maxContentLength: -1, maxBodyLength: -1, env: { FormData: ct() }, validateStatus: function(e) {
      return e >= 200 && e < 300;
    }, headers: { common: { Accept: "application/json, text/plain, */*" } } };
    p.forEach(["delete", "get", "head"], function(e) {
      M.headers[e] = {};
    });
    p.forEach(["post", "put", "patch"], function(e) {
      M.headers[e] = p.merge(Hr);
    });
    pt.exports = M;
  });
  var mt = l((Ln, ht) => {
    "use strict";
    var Vr = f(), Kr = $();
    ht.exports = function(e, r, i) {
      var n = this || Kr;
      return Vr.forEach(i, function(a) {
        e = a.call(n, e, r);
      }), e;
    };
  });
  var fe = l((jn, yt) => {
    "use strict";
    yt.exports = function(e) {
      return !!(e && e.__CANCEL__);
    };
  });
  var gt = l((Fn, wt) => {
    "use strict";
    var vt = f(), pe = mt(), Xr = fe(), Gr = $(), Qr = U();
    function he(t) {
      if (t.cancelToken && t.cancelToken.throwIfRequested(), t.signal && t.signal.aborted)
        throw new Qr();
    }
    wt.exports = function(e) {
      he(e), e.headers = e.headers || {}, e.data = pe.call(e, e.data, e.headers, e.transformRequest), e.headers = vt.merge(e.headers.common || {}, e.headers[e.method] || {}, e.headers), vt.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(n) {
        delete e.headers[n];
      });
      var r = e.adapter || Gr.adapter;
      return r(e).then(function(n) {
        return he(e), n.data = pe.call(e, n.data, n.headers, e.transformResponse), n;
      }, function(n) {
        return Xr(n) || (he(e), n && n.response && (n.response.data = pe.call(e, n.response.data, n.response.headers, e.transformResponse))), Promise.reject(n);
      });
    };
  });
  var me = l((In, bt) => {
    "use strict";
    var w = f();
    bt.exports = function(e, r) {
      r = r || {};
      var i = {};
      function n(o, d) {
        return w.isPlainObject(o) && w.isPlainObject(d) ? w.merge(o, d) : w.isPlainObject(d) ? w.merge({}, d) : w.isArray(d) ? d.slice() : d;
      }
      function s(o) {
        if (w.isUndefined(r[o])) {
          if (!w.isUndefined(e[o]))
            return n(void 0, e[o]);
        } else
          return n(e[o], r[o]);
      }
      function a(o) {
        if (!w.isUndefined(r[o]))
          return n(void 0, r[o]);
      }
      function u(o) {
        if (w.isUndefined(r[o])) {
          if (!w.isUndefined(e[o]))
            return n(void 0, e[o]);
        } else
          return n(void 0, r[o]);
      }
      function c(o) {
        if (o in r)
          return n(e[o], r[o]);
        if (o in e)
          return n(void 0, e[o]);
      }
      var h = { url: a, method: a, data: a, baseURL: u, transformRequest: u, transformResponse: u, paramsSerializer: u, timeout: u, timeoutMessage: u, withCredentials: u, adapter: u, responseType: u, xsrfCookieName: u, xsrfHeaderName: u, onUploadProgress: u, onDownloadProgress: u, decompress: u, maxContentLength: u, maxBodyLength: u, beforeRedirect: u, transport: u, httpAgent: u, httpsAgent: u, cancelToken: u, socketPath: u, responseEncoding: u, validateStatus: c };
      return w.forEach(Object.keys(e).concat(Object.keys(r)), function(d) {
        var v = h[d] || s, m = v(d);
        w.isUndefined(m) && v !== c || (i[d] = m);
      }), i;
    };
  });
  var ye = l((zn, Et) => {
    Et.exports = { version: "0.27.2" };
  });
  var Rt = l((Mn, Ct) => {
    "use strict";
    var Yr = ye().version, R = q(), ve = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(t, e) {
      ve[t] = function(i) {
        return typeof i === t || "a" + (e < 1 ? "n " : " ") + t;
      };
    });
    var xt = {};
    ve.transitional = function(e, r, i) {
      function n(s, a) {
        return "[Axios v" + Yr + "] Transitional option '" + s + "'" + a + (i ? ". " + i : "");
      }
      return function(s, a, u) {
        if (e === false)
          throw new R(n(a, " has been removed" + (r ? " in " + r : "")), R.ERR_DEPRECATED);
        return r && !xt[a] && (xt[a] = true, console.warn(n(a, " has been deprecated since v" + r + " and will be removed in the near future"))), e ? e(s, a, u) : true;
      };
    };
    function Zr(t, e, r) {
      if (typeof t != "object")
        throw new R("options must be an object", R.ERR_BAD_OPTION_VALUE);
      for (var i = Object.keys(t), n = i.length; n-- > 0; ) {
        var s = i[n], a = e[s];
        if (a) {
          var u = t[s], c = u === void 0 || a(u, s, t);
          if (c !== true)
            throw new R("option " + s + " must be " + c, R.ERR_BAD_OPTION_VALUE);
          continue;
        }
        if (r !== true)
          throw new R("Unknown option " + s, R.ERR_BAD_OPTION);
      }
    }
    Ct.exports = { assertOptions: Zr, validators: ve };
  });
  var kt = l(($n, St) => {
    "use strict";
    var qt = f(), en = ie(), Ot = De(), At = gt(), H = me(), tn = ue(), Tt = Rt(), N = Tt.validators;
    function P(t) {
      this.defaults = t, this.interceptors = { request: new Ot(), response: new Ot() };
    }
    P.prototype.request = function(e, r) {
      typeof e == "string" ? (r = r || {}, r.url = e) : r = e || {}, r = H(this.defaults, r), r.method ? r.method = r.method.toLowerCase() : this.defaults.method ? r.method = this.defaults.method.toLowerCase() : r.method = "get";
      var i = r.transitional;
      i !== void 0 && Tt.assertOptions(i, { silentJSONParsing: N.transitional(N.boolean), forcedJSONParsing: N.transitional(N.boolean), clarifyTimeoutError: N.transitional(N.boolean) }, false);
      var n = [], s = true;
      this.interceptors.request.forEach(function(m) {
        typeof m.runWhen == "function" && m.runWhen(r) === false || (s = s && m.synchronous, n.unshift(m.fulfilled, m.rejected));
      });
      var a = [];
      this.interceptors.response.forEach(function(m) {
        a.push(m.fulfilled, m.rejected);
      });
      var u;
      if (!s) {
        var c = [At, void 0];
        for (Array.prototype.unshift.apply(c, n), c = c.concat(a), u = Promise.resolve(r); c.length; )
          u = u.then(c.shift(), c.shift());
        return u;
      }
      for (var h = r; n.length; ) {
        var o = n.shift(), d = n.shift();
        try {
          h = o(h);
        } catch (v) {
          d(v);
          break;
        }
      }
      try {
        u = At(h);
      } catch (v) {
        return Promise.reject(v);
      }
      for (; a.length; )
        u = u.then(a.shift(), a.shift());
      return u;
    };
    P.prototype.getUri = function(e) {
      e = H(this.defaults, e);
      var r = tn(e.baseURL, e.url);
      return en(r, e.params, e.paramsSerializer);
    };
    qt.forEach(["delete", "get", "head", "options"], function(e) {
      P.prototype[e] = function(r, i) {
        return this.request(H(i || {}, { method: e, url: r, data: (i || {}).data }));
      };
    });
    qt.forEach(["post", "put", "patch"], function(e) {
      function r(i) {
        return function(s, a, u) {
          return this.request(H(u || {}, { method: e, headers: i ? { "Content-Type": "multipart/form-data" } : {}, url: s, data: a }));
        };
      }
      P.prototype[e] = r(), P.prototype[e + "Form"] = r(true);
    });
    St.exports = P;
  });
  var Pt = l((Hn, Nt) => {
    "use strict";
    var rn = U();
    function _(t) {
      if (typeof t != "function")
        throw new TypeError("executor must be a function.");
      var e;
      this.promise = new Promise(function(n) {
        e = n;
      });
      var r = this;
      this.promise.then(function(i) {
        if (r._listeners) {
          var n, s = r._listeners.length;
          for (n = 0; n < s; n++)
            r._listeners[n](i);
          r._listeners = null;
        }
      }), this.promise.then = function(i) {
        var n, s = new Promise(function(a) {
          r.subscribe(a), n = a;
        }).then(i);
        return s.cancel = function() {
          r.unsubscribe(n);
        }, s;
      }, t(function(n) {
        r.reason || (r.reason = new rn(n), e(r.reason));
      });
    }
    _.prototype.throwIfRequested = function() {
      if (this.reason)
        throw this.reason;
    };
    _.prototype.subscribe = function(e) {
      if (this.reason) {
        e(this.reason);
        return;
      }
      this._listeners ? this._listeners.push(e) : this._listeners = [e];
    };
    _.prototype.unsubscribe = function(e) {
      if (this._listeners) {
        var r = this._listeners.indexOf(e);
        r !== -1 && this._listeners.splice(r, 1);
      }
    };
    _.source = function() {
      var e, r = new _(function(n) {
        e = n;
      });
      return { token: r, cancel: e };
    };
    Nt.exports = _;
  });
  var Dt = l((Wn, _t) => {
    "use strict";
    _t.exports = function(e) {
      return function(i) {
        return e.apply(null, i);
      };
    };
  });
  var Bt = l((Jn, Ut) => {
    "use strict";
    var nn = f();
    Ut.exports = function(e) {
      return nn.isObject(e) && e.isAxiosError === true;
    };
  });
  var Ft = l((Vn, we) => {
    "use strict";
    var Lt = f(), sn = Q(), W = kt(), an = me(), on = $();
    function jt(t) {
      var e = new W(t), r = sn(W.prototype.request, e);
      return Lt.extend(r, W.prototype, e), Lt.extend(r, e), r.create = function(n) {
        return jt(an(t, n));
      }, r;
    }
    var y = jt(on);
    y.Axios = W;
    y.CanceledError = U();
    y.CancelToken = Pt();
    y.isCancel = fe();
    y.VERSION = ye().version;
    y.toFormData = ae();
    y.AxiosError = q();
    y.Cancel = y.CanceledError;
    y.all = function(e) {
      return Promise.all(e);
    };
    y.spread = Dt();
    y.isAxiosError = Bt();
    we.exports = y;
    we.exports.default = y;
  });
  var ge = l((Kn, It) => {
    It.exports = Ft();
  });
  var D = Ae(ge(), 1);
  var C = "https://zesty-storage-prod.s3.amazonaws.com/images/zesty";
  var L = { tall: { width: 0.75, height: 1, style: { standard: `${C}/zesty-banner-tall.png`, minimal: `${C}/zesty-banner-tall-minimal.png`, transparent: `${C}/zesty-banner-tall-transparent.png` } }, wide: { width: 4, height: 1, style: { standard: `${C}/zesty-banner-wide.png`, minimal: `${C}/zesty-banner-wide-minimal.png`, transparent: `${C}/zesty-banner-wide-transparent.png` } }, square: { width: 1, height: 1, style: { standard: `${C}/zesty-banner-square.png`, minimal: `${C}/zesty-banner-square-minimal.png`, transparent: `${C}/zesty-banner-square-transparent.png` } } };
  var un = Ae(ge(), 1);
  var be = () => {
    let t = window.XRHand != null && window.XRMediaBinding != null, e = navigator.userAgent.includes("OculusBrowser"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var Ee = () => {
    let t = window.mozInnerScreenX != null && window.speechSynthesis == null, e = navigator.userAgent.includes("Mobile VR") && !navigator.userAgent.includes("OculusBrowser"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var zt = async () => {
    let t = navigator.xr && await navigator.xr.isSessionSupported("immersive-vr") && await navigator.xr.isSessionSupported("immersive-ar"), e = navigator.userAgent.includes("Pico Neo 3 Link"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var Mt = () => {
    let t = navigator.maxTouchPoints === 0 || navigator.msMaxTouchPoints === 0, e = !navigator.userAgent.includes("Android") && !navigator.userAgent.includes("Mobile"), r = t && e ? "Full" : t || e ? "Partial" : "None";
    return { match: r !== "None", confidence: r };
  };
  var xe = async () => {
    let t = { platform: "", confidence: "" };
    return be().match ? t = { platform: "Oculus", confidence: be().confidence } : Ee().match ? t = { platform: "Wolvic", confidence: Ee().confidence } : await zt().match ? t = { platform: "Pico", confidence: await zt().confidence } : Mt().match ? t = { platform: "Desktop", confidence: Mt().confidence } : t = { platform: "Unknown", confidence: "None" }, t;
  };
  var $t = (t) => {
    if (t) {
      if (be().match) {
        if (t.includes("https://www.oculus.com/experiences/quest/")) {
          setTimeout(() => {
            window.open(t, "_blank");
          }, 1e3);
          return;
        }
      } else if (Ee().match) {
        let e = document.createElement("div"), r = document.createElement("div"), i = document.createElement("p"), n = document.createElement("button"), s = document.createElement("button");
        e.style.backgroundColor = "rgb(0, 0, 0, 0.75)", e.style.color = "white", e.style.textAlign = "center", e.style.position = "fixed", e.style.top = "50%", e.style.left = "50%", e.style.padding = "5%", e.style.borderRadius = "5%", e.style.transform = "translate(-50%, -50%)", i.innerHTML = `<b>This billboard leads to ${t}. Continue?</b>`, n.innerText = "Move cursor back into window.", n.style.width = "100vw", n.style.height = "100vh", n.onmouseenter = () => {
          n.style.width = "auto", n.style.height = "auto", n.innerText = "Yes";
        }, n.onclick = () => {
          window.open(t, "_blank"), e.remove();
        }, s.innerText = "No", s.onclick = () => {
          e.remove();
        }, e.append(r), r.append(i), r.append(n), r.append(s), document.body.append(e);
        return;
      }
      window.open(t, "_blank");
    }
  };
  var Ht = "https://beacon.zesty.market";
  var Wt = "https://beacon2.zesty.market/zgraphql";
  var cn = "https://api.zesty.market/api";
  var Jt = async (t, e = "tall", r = "standard") => {
    try {
      let i = encodeURI(window.top.location.href).replace(/\/$/, "");
      return (await D.default.get(`${cn}/ad?ad_unit_id=${t}&url=${i}`)).data;
    } catch {
      return console.warn("No active campaign banner could be located. Displaying default banner."), { Ads: [{ asset_url: L[e].style[r], cta_url: "https://www.zesty.market" }], CampaignId: "TestCampaign" };
    }
  };
  var Vt = async (t, e = null) => {
    let { platform: r, confidence: i } = await xe();
    try {
      let n = Ht + `/api/v1/space/${t}`;
      await D.default.put(n), await D.default.post(Wt, { query: `mutation { increment(eventType: visits, spaceId: "${t}", campaignId: "${e}", platform: { name: ${r}, confidence: ${i} }) { message } }` }, { headers: { "Content-Type": "application/json" } });
    } catch (n) {
      console.log("Failed to emit onload event", n.message);
    }
  };
  var Kt = async (t, e = null) => {
    let { platform: r, confidence: i } = await xe();
    try {
      let n = Ht + `/api/v1/space/click/${t}`;
      await D.default.put(n), await D.default.post(Wt, { query: `mutation { increment(eventType: clicks, spaceId: "${t}", campaignId: "${e}", platform: { name: ${r}, confidence: ${i} }) { message } }` }, { headers: { "Content-Type": "application/json" } });
    } catch (n) {
      console.log("Failed to emit onclick event", n.message);
    }
  };
  var Xt = "2.0.6";
  console.log("Zesty SDK Version: ", Xt);
  var hn = "https://cdn.zesty.xyz/sdk/zesty-formats.js";
  var mn = "https://cdn.zesty.xyz/sdk/zesty-networking.js";
  var J = class extends Component {
    static onRegister(e) {
      e.registerComponent(CursorTarget);
    }
    init() {
      this.formats = Object.values(L), this.formatKeys = Object.keys(L), this.styleKeys = ["standard", "minimal", "transparent"];
    }
    start() {
      if (this.mesh = this.object.getComponent(MeshComponent), !this.mesh)
        throw new Error("'zesty-banner ' missing mesh component");
      if (this.createAutomaticCollision && (this.collision = this.object.getComponent(CollisionComponent) || this.object.addComponent(CollisionComponent, { collider: Collider.Box, group: 2 }), this.cursorTarget = this.object.getComponent(CursorTarget) || this.object.addComponent(CursorTarget), this.cursorTarget.onClick.add(this.onClick.bind(this))), this.dynamicFormats) {
        let e = document.createElement("script");
        e.onload = () => {
          this.formatsOverride = zestyFormats.formats;
        }, e.setAttribute("src", hn), e.setAttribute("crossorigin", "anonymous"), document.body.appendChild(e);
      }
      this.dynamicNetworking ? import(mn).then((e) => {
        this.zestyNetworking = Object.assign({}, e), this.startLoading();
      }).catch(() => {
        console.error("Failed to dynamically retrieve networking code, falling back to bundled version."), this.dynamicNetworking = false, this.startLoading();
      }) : this.startLoading();
    }
    startLoading() {
      this.loadBanner(this.adUnit, this.formatKeys[this.format], this.styleKeys[this.style]).then((e) => {
        this.banner = e, this.scaleToRatio && (this.height = this.object.scalingLocal[1], this.object.resetScaling(), this.createAutomaticCollision && (this.collision.extents = [this.formats[this.format].width * this.height, this.height, 0.1]), this.object.scale([this.formats[this.format].width * this.height, this.height, 1]));
        let r = this.mesh.material.clone();
        if (this.textureProperty === "auto") {
          let i = r.shader;
          if (i === "Phong Opaque Textured")
            r.diffuseTexture = e.texture, r.alphaMaskThreshold = 0.3;
          else if (i === "Flat Opaque Textured")
            r.flatTexture = e.texture, r.alphaMaskThreshold = 0.8;
          else
            throw Error("'zesty-banner' unable to apply banner texture: unsupported pipeline " + i);
          this.mesh.material = r, this.mesh.material.alphaMaskTexture = e.texture;
        } else
          this.mesh.material[this.textureProperty] = e.texture, this.mesh.material.alphaMaskTexture = e.texture;
        this.beacon && (this.dynamicNetworking ? this.zestyNetworking.sendOnLoadMetric(this.adUnit, this.banner.campaignId) : Vt(this.adUnit, this.banner.campaignId));
      });
    }
    onClick() {
      this.banner?.url && (this.engine.xr ? this.engine.xr.session.end().then(this.executeClick.bind(this)) : this.engine.xrSession ? this.engine.xrSession.end().then(this.executeClick.bind(this)) : this.executeClick());
    }
    executeClick() {
      $t(this.banner.url), this.beacon && (this.dynamicNetworking ? this.zestyNetworking.sendOnClickMetric(this.adUnit, this.banner.campaignId) : Kt(this.adUnit, this.banner.campaignId));
    }
    async loadBanner(e, r, i) {
      let n = this.dynamicNetworking ? await this.zestyNetworking.fetchCampaignAd(e, r, i) : await Jt(e, r, i), { asset_url: s, cta_url: a } = n.Ads[0];
      return this.campaignId = n.CampaignId, this.engine.textures.load(s, "").then((u) => ({ texture: u, imageSrc: s, url: a, campaignId: n.CampaignId }));
    }
  };
  G(J, "TypeName", "zesty-banner"), G(J, "Properties", { adUnit: Property.string(""), format: Property.enum(["tall", "wide", "square"], "square"), style: Property.enum(["standard", "minimal", "transparent"], "transparent"), scaleToRatio: Property.bool(true), textureProperty: Property.string("auto"), assignAlphaMaskTexture: Property.bool(true), beacon: Property.bool(true), dynamicFormats: Property.bool(true), createAutomaticCollision: Property.bool(true), dynamicNetworking: Property.bool(false) });

  // js/components/door-handler.ts
  var door_handler_exports = {};
  __export(door_handler_exports, {
    DoorHandler: () => DoorHandler
  });
  var DoorHandler = class extends Component {
    direction = "N";
    targetRoomX = 0;
    targetRoomY = 0;
    start() {
      let child = wlUtils.findChild(this.object, "collisionObject");
      if (!child) {
        console.warn("DoorHandler needs a child object with the name 'collisionObject'");
        return;
      }
      const target = child.getComponent(CursorTarget);
      if (!target) {
        console.warn("DoorHandler needs a CursorTarget component on the same object");
        return;
      }
      target.onClick.add(() => {
        return;
      });
    }
  };
  __publicField(DoorHandler, "TypeName", "door-handler");
  __decorateClass([
    property.string("N")
  ], DoorHandler.prototype, "direction", 2);
  __decorateClass([
    property.int(0)
  ], DoorHandler.prototype, "targetRoomX", 2);
  __decorateClass([
    property.int(0)
  ], DoorHandler.prototype, "targetRoomY", 2);

  // js/components/fadeScreen.ts
  var fadeScreen_exports = {};
  __export(fadeScreen_exports, {
    FadeScreen: () => FadeScreen
  });
  var _isRunning, _deltaTime, _isFadingIn, _isFadingOut;
  var FadeScreen = class extends Component {
    constructor() {
      super(...arguments);
      __publicField(this, "fadeInTime", 1);
      __publicField(this, "continuous", true);
      /**
       * Called when the fade in process is completed.
       * @type {Emitter}
       */
      __publicField(this, "FadeInCompleted");
      /**
       * Called when the fade out process is completed.
       * @type {Emitter}
       */
      __publicField(this, "FadeOutCompleted");
      /**
       * The mesh component of the object. This should be a black sphere around the head
       * of the player that fades in and out.
       * @type {MeshComponent}
       */
      __publicField(this, "mesh");
      __privateAdd(this, _isRunning, false);
      __privateAdd(this, _deltaTime, 0);
      __privateAdd(this, _isFadingIn, false);
      __privateAdd(this, _isFadingOut, false);
    }
    init() {
      this.FadeInCompleted = new Emitter();
      this.FadeOutCompleted = new Emitter();
    }
    start() {
      const mc = this.object.getComponent(MeshComponent);
      if (!mc)
        throw new Error("No mesh component found on object");
      this.mesh = mc;
      this.mesh.active = false;
    }
    fadeIn() {
      this.mesh.active = true;
      __privateSet(this, _isFadingIn, true);
      __privateSet(this, _isRunning, true);
    }
    fadeOut() {
      this.mesh.active = true;
      __privateSet(this, _isFadingOut, true);
      __privateSet(this, _isRunning, true);
    }
    update(delta) {
      if (__privateGet(this, _isRunning)) {
        let alpha = 0;
        if (__privateGet(this, _isFadingIn)) {
          __privateSet(this, _deltaTime, __privateGet(this, _deltaTime) - delta / this.fadeInTime);
          alpha = clamp(lerp6(0, 1, __privateGet(this, _deltaTime), Easing.InQuad), 0, 1);
        }
        if (__privateGet(this, _isFadingOut)) {
          __privateSet(this, _deltaTime, __privateGet(this, _deltaTime) + delta / this.fadeInTime);
          alpha = clamp(lerp6(0, 1, __privateGet(this, _deltaTime), Easing.OutQuad), 0, 1);
        }
        if (__privateGet(this, _deltaTime) >= 1 || __privateGet(this, _deltaTime) <= 0) {
          __privateSet(this, _isRunning, false);
          __privateSet(this, _isFadingIn, false);
          __privateSet(this, _isFadingOut, false);
          if (__privateGet(this, _deltaTime) >= 1) {
            __privateSet(this, _deltaTime, 1);
            this.FadeOutCompleted.notify();
            if (this.continuous) {
              this.fadeIn();
            }
          } else {
            const flatMaterial2 = this.mesh.material;
            if (flatMaterial2) {
              flatMaterial2.color = [0, 0, 0, 0];
            }
            __privateSet(this, _deltaTime, 0);
            this.FadeInCompleted.notify();
          }
        }
        const flatMaterial = this.mesh.material;
        if (flatMaterial) {
          flatMaterial.color = [0, 0, 0, alpha];
        }
      }
    }
  };
  _isRunning = new WeakMap();
  _deltaTime = new WeakMap();
  _isFadingIn = new WeakMap();
  _isFadingOut = new WeakMap();
  __publicField(FadeScreen, "TypeName", "fade-screen");
  __decorateClass([
    property.float(1)
  ], FadeScreen.prototype, "fadeInTime", 2);
  __decorateClass([
    property.bool(true)
  ], FadeScreen.prototype, "continuous", 2);

  // js/components/game.ts
  var game_exports = {};
  __export(game_exports, {
    Game: () => Game
  });

  // node_modules/reflect-metadata/Reflect.js
  var Reflect2;
  (function(Reflect3) {
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
      var exporter = makeExporter(Reflect3);
      if (typeof root.Reflect === "undefined") {
        root.Reflect = Reflect3;
      } else {
        exporter = makeExporter(root.Reflect, exporter);
      }
      factory(exporter);
      function makeExporter(target, previous) {
        return function(key, value) {
          if (typeof target[key] !== "function") {
            Object.defineProperty(target, key, { configurable: true, writable: true, value });
          }
          if (previous)
            previous(key, value);
        };
      }
    })(function(exporter) {
      var hasOwn = Object.prototype.hasOwnProperty;
      var supportsSymbol = typeof Symbol === "function";
      var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
      var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
      var supportsCreate = typeof Object.create === "function";
      var supportsProto = { __proto__: [] } instanceof Array;
      var downLevel = !supportsCreate && !supportsProto;
      var HashMap = {
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        create: supportsCreate ? function() {
          return MakeDictionary(/* @__PURE__ */ Object.create(null));
        } : supportsProto ? function() {
          return MakeDictionary({ __proto__: null });
        } : function() {
          return MakeDictionary({});
        },
        has: downLevel ? function(map, key) {
          return hasOwn.call(map, key);
        } : function(map, key) {
          return key in map;
        },
        get: downLevel ? function(map, key) {
          return hasOwn.call(map, key) ? map[key] : void 0;
        } : function(map, key) {
          return map[key];
        }
      };
      var functionPrototype = Object.getPrototypeOf(Function);
      var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
      var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
      var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
      var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
      var Metadata = new _WeakMap();
      function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsObject(target))
            throw new TypeError();
          if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
            throw new TypeError();
          if (IsNull(attributes))
            attributes = void 0;
          propertyKey = ToPropertyKey(propertyKey);
          return DecorateProperty(decorators, target, propertyKey, attributes);
        } else {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsConstructor(target))
            throw new TypeError();
          return DecorateConstructor(decorators, target);
        }
      }
      exporter("decorate", decorate);
      function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
            throw new TypeError();
          OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
      }
      exporter("metadata", metadata);
      function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }
      exporter("defineMetadata", defineMetadata);
      function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasMetadata", hasMetadata);
      function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasOwnMetadata", hasOwnMetadata);
      function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
      }
      exporter("getMetadata", getMetadata);
      function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("getOwnMetadata", getOwnMetadata);
      function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
      }
      exporter("getMetadataKeys", getMetadataKeys);
      function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
      }
      exporter("getOwnMetadataKeys", getOwnMetadataKeys);
      function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(
          target,
          propertyKey,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return false;
        if (!metadataMap.delete(metadataKey))
          return false;
        if (metadataMap.size > 0)
          return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
          return true;
        Metadata.delete(target);
        return true;
      }
      exporter("deleteMetadata", deleteMetadata);
      function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsConstructor(decorated))
              throw new TypeError();
            target = decorated;
          }
        }
        return target;
      }
      function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target, propertyKey, descriptor);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsObject(decorated))
              throw new TypeError();
            descriptor = decorated;
          }
        }
        return descriptor;
      }
      function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
          if (!Create)
            return void 0;
          targetMetadata = new _Map();
          Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
          if (!Create)
            return void 0;
          metadataMap = new _Map();
          targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
      }
      function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
      }
      function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return false;
        return ToBoolean(metadataMap.has(MetadataKey));
      }
      function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryGetMetadata(MetadataKey, parent, P);
        return void 0;
      }
      function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return void 0;
        return metadataMap.get(MetadataKey);
      }
      function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          true
        );
        metadataMap.set(MetadataKey, MetadataValue);
      }
      function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
          return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
          return ownKeys;
        if (ownKeys.length <= 0)
          return parentKeys;
        var set7 = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
          var key = ownKeys_1[_i];
          var hasKey = set7.has(key);
          if (!hasKey) {
            set7.add(key);
            keys.push(key);
          }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
          var key = parentKeys_1[_a];
          var hasKey = set7.has(key);
          if (!hasKey) {
            set7.add(key);
            keys.push(key);
          }
        }
        return keys;
      }
      function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
          var next = IteratorStep(iterator);
          if (!next) {
            keys.length = k;
            return keys;
          }
          var nextValue = IteratorValue(next);
          try {
            keys[k] = nextValue;
          } catch (e) {
            try {
              IteratorClose(iterator);
            } finally {
              throw e;
            }
          }
          k++;
        }
      }
      function Type2(x) {
        if (x === null)
          return 1;
        switch (typeof x) {
          case "undefined":
            return 0;
          case "boolean":
            return 2;
          case "string":
            return 3;
          case "symbol":
            return 4;
          case "number":
            return 5;
          case "object":
            return x === null ? 1 : 6;
          default:
            return 6;
        }
      }
      function IsUndefined(x) {
        return x === void 0;
      }
      function IsNull(x) {
        return x === null;
      }
      function IsSymbol(x) {
        return typeof x === "symbol";
      }
      function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
      }
      function ToPrimitive(input, PreferredType) {
        switch (Type2(input)) {
          case 0:
            return input;
          case 1:
            return input;
          case 2:
            return input;
          case 3:
            return input;
          case 4:
            return input;
          case 5:
            return input;
        }
        var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== void 0) {
          var result = exoticToPrim.call(input, hint);
          if (IsObject(result))
            throw new TypeError();
          return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
      }
      function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
          var toString_1 = O.toString;
          if (IsCallable(toString_1)) {
            var result = toString_1.call(O);
            if (!IsObject(result))
              return result;
          }
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
        } else {
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
          var toString_2 = O.toString;
          if (IsCallable(toString_2)) {
            var result = toString_2.call(O);
            if (!IsObject(result))
              return result;
          }
        }
        throw new TypeError();
      }
      function ToBoolean(argument) {
        return !!argument;
      }
      function ToString(argument) {
        return "" + argument;
      }
      function ToPropertyKey(argument) {
        var key = ToPrimitive(
          argument,
          3
          /* String */
        );
        if (IsSymbol(key))
          return key;
        return ToString(key);
      }
      function IsArray(argument) {
        return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
      }
      function IsCallable(argument) {
        return typeof argument === "function";
      }
      function IsConstructor(argument) {
        return typeof argument === "function";
      }
      function IsPropertyKey(argument) {
        switch (Type2(argument)) {
          case 3:
            return true;
          case 4:
            return true;
          default:
            return false;
        }
      }
      function GetMethod(V, P) {
        var func = V[P];
        if (func === void 0 || func === null)
          return void 0;
        if (!IsCallable(func))
          throw new TypeError();
        return func;
      }
      function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
          throw new TypeError();
        var iterator = method.call(obj);
        if (!IsObject(iterator))
          throw new TypeError();
        return iterator;
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
      }
      function IteratorClose(iterator) {
        var f2 = iterator["return"];
        if (f2)
          f2.call(iterator);
      }
      function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
          return proto;
        if (proto !== functionPrototype)
          return proto;
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
          return proto;
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
          return proto;
        if (constructor === O)
          return proto;
        return constructor;
      }
      function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (
          /** @class */
          function() {
            function MapIterator2(keys, values, selector) {
              this._index = 0;
              this._keys = keys;
              this._values = values;
              this._selector = selector;
            }
            MapIterator2.prototype["@@iterator"] = function() {
              return this;
            };
            MapIterator2.prototype[iteratorSymbol] = function() {
              return this;
            };
            MapIterator2.prototype.next = function() {
              var index = this._index;
              if (index >= 0 && index < this._keys.length) {
                var result = this._selector(this._keys[index], this._values[index]);
                if (index + 1 >= this._keys.length) {
                  this._index = -1;
                  this._keys = arraySentinel;
                  this._values = arraySentinel;
                } else {
                  this._index++;
                }
                return { value: result, done: false };
              }
              return { value: void 0, done: true };
            };
            MapIterator2.prototype.throw = function(error) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              throw error;
            };
            MapIterator2.prototype.return = function(value) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              return { value, done: true };
            };
            return MapIterator2;
          }()
        );
        return (
          /** @class */
          function() {
            function Map2() {
              this._keys = [];
              this._values = [];
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            }
            Object.defineProperty(Map2.prototype, "size", {
              get: function() {
                return this._keys.length;
              },
              enumerable: true,
              configurable: true
            });
            Map2.prototype.has = function(key) {
              return this._find(
                key,
                /*insert*/
                false
              ) >= 0;
            };
            Map2.prototype.get = function(key) {
              var index = this._find(
                key,
                /*insert*/
                false
              );
              return index >= 0 ? this._values[index] : void 0;
            };
            Map2.prototype.set = function(key, value) {
              var index = this._find(
                key,
                /*insert*/
                true
              );
              this._values[index] = value;
              return this;
            };
            Map2.prototype.delete = function(key) {
              var index = this._find(
                key,
                /*insert*/
                false
              );
              if (index >= 0) {
                var size2 = this._keys.length;
                for (var i = index + 1; i < size2; i++) {
                  this._keys[i - 1] = this._keys[i];
                  this._values[i - 1] = this._values[i];
                }
                this._keys.length--;
                this._values.length--;
                if (key === this._cacheKey) {
                  this._cacheKey = cacheSentinel;
                  this._cacheIndex = -2;
                }
                return true;
              }
              return false;
            };
            Map2.prototype.clear = function() {
              this._keys.length = 0;
              this._values.length = 0;
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            };
            Map2.prototype.keys = function() {
              return new MapIterator(this._keys, this._values, getKey);
            };
            Map2.prototype.values = function() {
              return new MapIterator(this._keys, this._values, getValue);
            };
            Map2.prototype.entries = function() {
              return new MapIterator(this._keys, this._values, getEntry);
            };
            Map2.prototype["@@iterator"] = function() {
              return this.entries();
            };
            Map2.prototype[iteratorSymbol] = function() {
              return this.entries();
            };
            Map2.prototype._find = function(key, insert) {
              if (this._cacheKey !== key) {
                this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
              }
              if (this._cacheIndex < 0 && insert) {
                this._cacheIndex = this._keys.length;
                this._keys.push(key);
                this._values.push(void 0);
              }
              return this._cacheIndex;
            };
            return Map2;
          }()
        );
        function getKey(key, _) {
          return key;
        }
        function getValue(_, value) {
          return value;
        }
        function getEntry(key, value) {
          return [key, value];
        }
      }
      function CreateSetPolyfill() {
        return (
          /** @class */
          function() {
            function Set2() {
              this._map = new _Map();
            }
            Object.defineProperty(Set2.prototype, "size", {
              get: function() {
                return this._map.size;
              },
              enumerable: true,
              configurable: true
            });
            Set2.prototype.has = function(value) {
              return this._map.has(value);
            };
            Set2.prototype.add = function(value) {
              return this._map.set(value, value), this;
            };
            Set2.prototype.delete = function(value) {
              return this._map.delete(value);
            };
            Set2.prototype.clear = function() {
              this._map.clear();
            };
            Set2.prototype.keys = function() {
              return this._map.keys();
            };
            Set2.prototype.values = function() {
              return this._map.values();
            };
            Set2.prototype.entries = function() {
              return this._map.entries();
            };
            Set2.prototype["@@iterator"] = function() {
              return this.keys();
            };
            Set2.prototype[iteratorSymbol] = function() {
              return this.keys();
            };
            return Set2;
          }()
        );
      }
      function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (
          /** @class */
          function() {
            function WeakMap2() {
              this._key = CreateUniqueKey();
            }
            WeakMap2.prototype.has = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? HashMap.has(table, this._key) : false;
            };
            WeakMap2.prototype.get = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? HashMap.get(table, this._key) : void 0;
            };
            WeakMap2.prototype.set = function(target, value) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                true
              );
              table[this._key] = value;
              return this;
            };
            WeakMap2.prototype.delete = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? delete table[this._key] : false;
            };
            WeakMap2.prototype.clear = function() {
              this._key = CreateUniqueKey();
            };
            return WeakMap2;
          }()
        );
        function CreateUniqueKey() {
          var key;
          do
            key = "@@WeakMap@@" + CreateUUID();
          while (HashMap.has(keys, key));
          keys[key] = true;
          return key;
        }
        function GetOrCreateWeakMapTable(target, create8) {
          if (!hasOwn.call(target, rootKey)) {
            if (!create8)
              return void 0;
            Object.defineProperty(target, rootKey, { value: HashMap.create() });
          }
          return target[rootKey];
        }
        function FillRandomBytes(buffer, size2) {
          for (var i = 0; i < size2; ++i)
            buffer[i] = Math.random() * 255 | 0;
          return buffer;
        }
        function GenRandomBytes(size2) {
          if (typeof Uint8Array === "function") {
            if (typeof crypto !== "undefined")
              return crypto.getRandomValues(new Uint8Array(size2));
            if (typeof msCrypto !== "undefined")
              return msCrypto.getRandomValues(new Uint8Array(size2));
            return FillRandomBytes(new Uint8Array(size2), size2);
          }
          return FillRandomBytes(new Array(size2), size2);
        }
        function CreateUUID() {
          var data = GenRandomBytes(UUID_SIZE);
          data[6] = data[6] & 79 | 64;
          data[8] = data[8] & 191 | 128;
          var result = "";
          for (var offset2 = 0; offset2 < UUID_SIZE; ++offset2) {
            var byte = data[offset2];
            if (offset2 === 4 || offset2 === 6 || offset2 === 8)
              result += "-";
            if (byte < 16)
              result += "0";
            result += byte.toString(16).toLowerCase();
          }
          return result;
        }
      }
      function MakeDictionary(obj) {
        obj.__ = void 0;
        delete obj.__;
        return obj;
      }
    });
  })(Reflect2 || (Reflect2 = {}));

  // js/components/level-generator.ts
  var level_generator_exports = {};
  __export(level_generator_exports, {
    LevelGenerator: () => LevelGenerator
  });

  // node_modules/tsyringe/dist/esm5/types/lifecycle.js
  var Lifecycle;
  (function(Lifecycle2) {
    Lifecycle2[Lifecycle2["Transient"] = 0] = "Transient";
    Lifecycle2[Lifecycle2["Singleton"] = 1] = "Singleton";
    Lifecycle2[Lifecycle2["ResolutionScoped"] = 2] = "ResolutionScoped";
    Lifecycle2[Lifecycle2["ContainerScoped"] = 3] = "ContainerScoped";
  })(Lifecycle || (Lifecycle = {}));
  var lifecycle_default = Lifecycle;

  // node_modules/tsyringe/node_modules/tslib/tslib.es6.js
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  function __extends(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f2, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f2)
        throw new TypeError("Generator is already executing.");
      while (_)
        try {
          if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f2 = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
    return ar;
  }

  // node_modules/tsyringe/dist/esm5/reflection-helpers.js
  var INJECTION_TOKEN_METADATA_KEY = "injectionTokens";
  function getParamInfo(target) {
    var params = Reflect.getMetadata("design:paramtypes", target) || [];
    var injectionTokens = Reflect.getOwnMetadata(INJECTION_TOKEN_METADATA_KEY, target) || {};
    Object.keys(injectionTokens).forEach(function(key) {
      params[+key] = injectionTokens[key];
    });
    return params;
  }
  function defineInjectionTokenMetadata(data, transform) {
    return function(target, _propertyKey, parameterIndex) {
      var descriptors = Reflect.getOwnMetadata(INJECTION_TOKEN_METADATA_KEY, target) || {};
      descriptors[parameterIndex] = transform ? {
        token: data,
        transform: transform.transformToken,
        transformArgs: transform.args || []
      } : data;
      Reflect.defineMetadata(INJECTION_TOKEN_METADATA_KEY, descriptors, target);
    };
  }

  // node_modules/tsyringe/dist/esm5/providers/class-provider.js
  function isClassProvider(provider) {
    return !!provider.useClass;
  }

  // node_modules/tsyringe/dist/esm5/providers/factory-provider.js
  function isFactoryProvider(provider) {
    return !!provider.useFactory;
  }

  // node_modules/tsyringe/dist/esm5/lazy-helpers.js
  var DelayedConstructor = function() {
    function DelayedConstructor2(wrap) {
      this.wrap = wrap;
      this.reflectMethods = [
        "get",
        "getPrototypeOf",
        "setPrototypeOf",
        "getOwnPropertyDescriptor",
        "defineProperty",
        "has",
        "set",
        "deleteProperty",
        "apply",
        "construct",
        "ownKeys"
      ];
    }
    DelayedConstructor2.prototype.createProxy = function(createObject) {
      var _this = this;
      var target = {};
      var init = false;
      var value;
      var delayedObject = function() {
        if (!init) {
          value = createObject(_this.wrap());
          init = true;
        }
        return value;
      };
      return new Proxy(target, this.createHandler(delayedObject));
    };
    DelayedConstructor2.prototype.createHandler = function(delayedObject) {
      var handler = {};
      var install = function(name) {
        handler[name] = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          args[0] = delayedObject();
          var method = Reflect[name];
          return method.apply(void 0, __spread(args));
        };
      };
      this.reflectMethods.forEach(install);
      return handler;
    };
    return DelayedConstructor2;
  }();

  // node_modules/tsyringe/dist/esm5/providers/injection-token.js
  function isNormalToken(token) {
    return typeof token === "string" || typeof token === "symbol";
  }
  function isTokenDescriptor(descriptor) {
    return typeof descriptor === "object" && "token" in descriptor && "multiple" in descriptor;
  }
  function isTransformDescriptor(descriptor) {
    return typeof descriptor === "object" && "token" in descriptor && "transform" in descriptor;
  }
  function isConstructorToken(token) {
    return typeof token === "function" || token instanceof DelayedConstructor;
  }

  // node_modules/tsyringe/dist/esm5/providers/token-provider.js
  function isTokenProvider(provider) {
    return !!provider.useToken;
  }

  // node_modules/tsyringe/dist/esm5/providers/value-provider.js
  function isValueProvider(provider) {
    return provider.useValue != void 0;
  }

  // node_modules/tsyringe/dist/esm5/providers/provider.js
  function isProvider(provider) {
    return isClassProvider(provider) || isValueProvider(provider) || isTokenProvider(provider) || isFactoryProvider(provider);
  }

  // node_modules/tsyringe/dist/esm5/registry-base.js
  var RegistryBase = function() {
    function RegistryBase2() {
      this._registryMap = /* @__PURE__ */ new Map();
    }
    RegistryBase2.prototype.entries = function() {
      return this._registryMap.entries();
    };
    RegistryBase2.prototype.getAll = function(key) {
      this.ensure(key);
      return this._registryMap.get(key);
    };
    RegistryBase2.prototype.get = function(key) {
      this.ensure(key);
      var value = this._registryMap.get(key);
      return value[value.length - 1] || null;
    };
    RegistryBase2.prototype.set = function(key, value) {
      this.ensure(key);
      this._registryMap.get(key).push(value);
    };
    RegistryBase2.prototype.setAll = function(key, value) {
      this._registryMap.set(key, value);
    };
    RegistryBase2.prototype.has = function(key) {
      this.ensure(key);
      return this._registryMap.get(key).length > 0;
    };
    RegistryBase2.prototype.clear = function() {
      this._registryMap.clear();
    };
    RegistryBase2.prototype.ensure = function(key) {
      if (!this._registryMap.has(key)) {
        this._registryMap.set(key, []);
      }
    };
    return RegistryBase2;
  }();
  var registry_base_default = RegistryBase;

  // node_modules/tsyringe/dist/esm5/registry.js
  var Registry = function(_super) {
    __extends(Registry2, _super);
    function Registry2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return Registry2;
  }(registry_base_default);
  var registry_default = Registry;

  // node_modules/tsyringe/dist/esm5/resolution-context.js
  var ResolutionContext = function() {
    function ResolutionContext2() {
      this.scopedResolutions = /* @__PURE__ */ new Map();
    }
    return ResolutionContext2;
  }();
  var resolution_context_default = ResolutionContext;

  // node_modules/tsyringe/dist/esm5/error-helpers.js
  function formatDependency(params, idx) {
    if (params === null) {
      return "at position #" + idx;
    }
    var argName = params.split(",")[idx].trim();
    return '"' + argName + '" at position #' + idx;
  }
  function composeErrorMessage(msg, e, indent) {
    if (indent === void 0) {
      indent = "    ";
    }
    return __spread([msg], e.message.split("\n").map(function(l2) {
      return indent + l2;
    })).join("\n");
  }
  function formatErrorCtor(ctor, paramIdx, error) {
    var _a = __read(ctor.toString().match(/constructor\(([\w, ]+)\)/) || [], 2), _b = _a[1], params = _b === void 0 ? null : _b;
    var dep = formatDependency(params, paramIdx);
    return composeErrorMessage("Cannot inject the dependency " + dep + ' of "' + ctor.name + '" constructor. Reason:', error);
  }

  // node_modules/tsyringe/dist/esm5/types/disposable.js
  function isDisposable(value) {
    if (typeof value.dispose !== "function")
      return false;
    var disposeFun = value.dispose;
    if (disposeFun.length > 0) {
      return false;
    }
    return true;
  }

  // node_modules/tsyringe/dist/esm5/interceptors.js
  var PreResolutionInterceptors = function(_super) {
    __extends(PreResolutionInterceptors2, _super);
    function PreResolutionInterceptors2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return PreResolutionInterceptors2;
  }(registry_base_default);
  var PostResolutionInterceptors = function(_super) {
    __extends(PostResolutionInterceptors2, _super);
    function PostResolutionInterceptors2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return PostResolutionInterceptors2;
  }(registry_base_default);
  var Interceptors = function() {
    function Interceptors2() {
      this.preResolution = new PreResolutionInterceptors();
      this.postResolution = new PostResolutionInterceptors();
    }
    return Interceptors2;
  }();
  var interceptors_default = Interceptors;

  // node_modules/tsyringe/dist/esm5/dependency-container.js
  var typeInfo = /* @__PURE__ */ new Map();
  var InternalDependencyContainer = function() {
    function InternalDependencyContainer2(parent) {
      this.parent = parent;
      this._registry = new registry_default();
      this.interceptors = new interceptors_default();
      this.disposed = false;
      this.disposables = /* @__PURE__ */ new Set();
    }
    InternalDependencyContainer2.prototype.register = function(token, providerOrConstructor, options) {
      if (options === void 0) {
        options = { lifecycle: lifecycle_default.Transient };
      }
      this.ensureNotDisposed();
      var provider;
      if (!isProvider(providerOrConstructor)) {
        provider = { useClass: providerOrConstructor };
      } else {
        provider = providerOrConstructor;
      }
      if (isTokenProvider(provider)) {
        var path = [token];
        var tokenProvider = provider;
        while (tokenProvider != null) {
          var currentToken = tokenProvider.useToken;
          if (path.includes(currentToken)) {
            throw new Error("Token registration cycle detected! " + __spread(path, [currentToken]).join(" -> "));
          }
          path.push(currentToken);
          var registration = this._registry.get(currentToken);
          if (registration && isTokenProvider(registration.provider)) {
            tokenProvider = registration.provider;
          } else {
            tokenProvider = null;
          }
        }
      }
      if (options.lifecycle === lifecycle_default.Singleton || options.lifecycle == lifecycle_default.ContainerScoped || options.lifecycle == lifecycle_default.ResolutionScoped) {
        if (isValueProvider(provider) || isFactoryProvider(provider)) {
          throw new Error('Cannot use lifecycle "' + lifecycle_default[options.lifecycle] + '" with ValueProviders or FactoryProviders');
        }
      }
      this._registry.set(token, { provider, options });
      return this;
    };
    InternalDependencyContainer2.prototype.registerType = function(from, to) {
      this.ensureNotDisposed();
      if (isNormalToken(to)) {
        return this.register(from, {
          useToken: to
        });
      }
      return this.register(from, {
        useClass: to
      });
    };
    InternalDependencyContainer2.prototype.registerInstance = function(token, instance2) {
      this.ensureNotDisposed();
      return this.register(token, {
        useValue: instance2
      });
    };
    InternalDependencyContainer2.prototype.registerSingleton = function(from, to) {
      this.ensureNotDisposed();
      if (isNormalToken(from)) {
        if (isNormalToken(to)) {
          return this.register(from, {
            useToken: to
          }, { lifecycle: lifecycle_default.Singleton });
        } else if (to) {
          return this.register(from, {
            useClass: to
          }, { lifecycle: lifecycle_default.Singleton });
        }
        throw new Error('Cannot register a type name as a singleton without a "to" token');
      }
      var useClass = from;
      if (to && !isNormalToken(to)) {
        useClass = to;
      }
      return this.register(from, {
        useClass
      }, { lifecycle: lifecycle_default.Singleton });
    };
    InternalDependencyContainer2.prototype.resolve = function(token, context2) {
      if (context2 === void 0) {
        context2 = new resolution_context_default();
      }
      this.ensureNotDisposed();
      var registration = this.getRegistration(token);
      if (!registration && isNormalToken(token)) {
        throw new Error('Attempted to resolve unregistered dependency token: "' + token.toString() + '"');
      }
      this.executePreResolutionInterceptor(token, "Single");
      if (registration) {
        var result = this.resolveRegistration(registration, context2);
        this.executePostResolutionInterceptor(token, result, "Single");
        return result;
      }
      if (isConstructorToken(token)) {
        var result = this.construct(token, context2);
        this.executePostResolutionInterceptor(token, result, "Single");
        return result;
      }
      throw new Error("Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.");
    };
    InternalDependencyContainer2.prototype.executePreResolutionInterceptor = function(token, resolutionType) {
      var e_1, _a;
      if (this.interceptors.preResolution.has(token)) {
        var remainingInterceptors = [];
        try {
          for (var _b = __values(this.interceptors.preResolution.getAll(token)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var interceptor = _c.value;
            if (interceptor.options.frequency != "Once") {
              remainingInterceptors.push(interceptor);
            }
            interceptor.callback(token, resolutionType);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        this.interceptors.preResolution.setAll(token, remainingInterceptors);
      }
    };
    InternalDependencyContainer2.prototype.executePostResolutionInterceptor = function(token, result, resolutionType) {
      var e_2, _a;
      if (this.interceptors.postResolution.has(token)) {
        var remainingInterceptors = [];
        try {
          for (var _b = __values(this.interceptors.postResolution.getAll(token)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var interceptor = _c.value;
            if (interceptor.options.frequency != "Once") {
              remainingInterceptors.push(interceptor);
            }
            interceptor.callback(token, result, resolutionType);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        this.interceptors.postResolution.setAll(token, remainingInterceptors);
      }
    };
    InternalDependencyContainer2.prototype.resolveRegistration = function(registration, context2) {
      this.ensureNotDisposed();
      if (registration.options.lifecycle === lifecycle_default.ResolutionScoped && context2.scopedResolutions.has(registration)) {
        return context2.scopedResolutions.get(registration);
      }
      var isSingleton = registration.options.lifecycle === lifecycle_default.Singleton;
      var isContainerScoped = registration.options.lifecycle === lifecycle_default.ContainerScoped;
      var returnInstance = isSingleton || isContainerScoped;
      var resolved;
      if (isValueProvider(registration.provider)) {
        resolved = registration.provider.useValue;
      } else if (isTokenProvider(registration.provider)) {
        resolved = returnInstance ? registration.instance || (registration.instance = this.resolve(registration.provider.useToken, context2)) : this.resolve(registration.provider.useToken, context2);
      } else if (isClassProvider(registration.provider)) {
        resolved = returnInstance ? registration.instance || (registration.instance = this.construct(registration.provider.useClass, context2)) : this.construct(registration.provider.useClass, context2);
      } else if (isFactoryProvider(registration.provider)) {
        resolved = registration.provider.useFactory(this);
      } else {
        resolved = this.construct(registration.provider, context2);
      }
      if (registration.options.lifecycle === lifecycle_default.ResolutionScoped) {
        context2.scopedResolutions.set(registration, resolved);
      }
      return resolved;
    };
    InternalDependencyContainer2.prototype.resolveAll = function(token, context2) {
      var _this = this;
      if (context2 === void 0) {
        context2 = new resolution_context_default();
      }
      this.ensureNotDisposed();
      var registrations = this.getAllRegistrations(token);
      if (!registrations && isNormalToken(token)) {
        throw new Error('Attempted to resolve unregistered dependency token: "' + token.toString() + '"');
      }
      this.executePreResolutionInterceptor(token, "All");
      if (registrations) {
        var result_1 = registrations.map(function(item) {
          return _this.resolveRegistration(item, context2);
        });
        this.executePostResolutionInterceptor(token, result_1, "All");
        return result_1;
      }
      var result = [this.construct(token, context2)];
      this.executePostResolutionInterceptor(token, result, "All");
      return result;
    };
    InternalDependencyContainer2.prototype.isRegistered = function(token, recursive) {
      if (recursive === void 0) {
        recursive = false;
      }
      this.ensureNotDisposed();
      return this._registry.has(token) || recursive && (this.parent || false) && this.parent.isRegistered(token, true);
    };
    InternalDependencyContainer2.prototype.reset = function() {
      this.ensureNotDisposed();
      this._registry.clear();
      this.interceptors.preResolution.clear();
      this.interceptors.postResolution.clear();
    };
    InternalDependencyContainer2.prototype.clearInstances = function() {
      var e_3, _a;
      this.ensureNotDisposed();
      try {
        for (var _b = __values(this._registry.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), token = _d[0], registrations = _d[1];
          this._registry.setAll(token, registrations.filter(function(registration) {
            return !isValueProvider(registration.provider);
          }).map(function(registration) {
            registration.instance = void 0;
            return registration;
          }));
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
    };
    InternalDependencyContainer2.prototype.createChildContainer = function() {
      var e_4, _a;
      this.ensureNotDisposed();
      var childContainer = new InternalDependencyContainer2(this);
      try {
        for (var _b = __values(this._registry.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), token = _d[0], registrations = _d[1];
          if (registrations.some(function(_a2) {
            var options = _a2.options;
            return options.lifecycle === lifecycle_default.ContainerScoped;
          })) {
            childContainer._registry.setAll(token, registrations.map(function(registration) {
              if (registration.options.lifecycle === lifecycle_default.ContainerScoped) {
                return {
                  provider: registration.provider,
                  options: registration.options
                };
              }
              return registration;
            }));
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return childContainer;
    };
    InternalDependencyContainer2.prototype.beforeResolution = function(token, callback, options) {
      if (options === void 0) {
        options = { frequency: "Always" };
      }
      this.interceptors.preResolution.set(token, {
        callback,
        options
      });
    };
    InternalDependencyContainer2.prototype.afterResolution = function(token, callback, options) {
      if (options === void 0) {
        options = { frequency: "Always" };
      }
      this.interceptors.postResolution.set(token, {
        callback,
        options
      });
    };
    InternalDependencyContainer2.prototype.dispose = function() {
      return __awaiter(this, void 0, void 0, function() {
        var promises;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.disposed = true;
              promises = [];
              this.disposables.forEach(function(disposable) {
                var maybePromise = disposable.dispose();
                if (maybePromise) {
                  promises.push(maybePromise);
                }
              });
              return [4, Promise.all(promises)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    };
    InternalDependencyContainer2.prototype.getRegistration = function(token) {
      if (this.isRegistered(token)) {
        return this._registry.get(token);
      }
      if (this.parent) {
        return this.parent.getRegistration(token);
      }
      return null;
    };
    InternalDependencyContainer2.prototype.getAllRegistrations = function(token) {
      if (this.isRegistered(token)) {
        return this._registry.getAll(token);
      }
      if (this.parent) {
        return this.parent.getAllRegistrations(token);
      }
      return null;
    };
    InternalDependencyContainer2.prototype.construct = function(ctor, context2) {
      var _this = this;
      if (ctor instanceof DelayedConstructor) {
        return ctor.createProxy(function(target) {
          return _this.resolve(target, context2);
        });
      }
      var instance2 = function() {
        var paramInfo = typeInfo.get(ctor);
        if (!paramInfo || paramInfo.length === 0) {
          if (ctor.length === 0) {
            return new ctor();
          } else {
            throw new Error('TypeInfo not known for "' + ctor.name + '"');
          }
        }
        var params = paramInfo.map(_this.resolveParams(context2, ctor));
        return new (ctor.bind.apply(ctor, __spread([void 0], params)))();
      }();
      if (isDisposable(instance2)) {
        this.disposables.add(instance2);
      }
      return instance2;
    };
    InternalDependencyContainer2.prototype.resolveParams = function(context2, ctor) {
      var _this = this;
      return function(param, idx) {
        var _a, _b, _c;
        try {
          if (isTokenDescriptor(param)) {
            if (isTransformDescriptor(param)) {
              return param.multiple ? (_a = _this.resolve(param.transform)).transform.apply(_a, __spread([_this.resolveAll(param.token)], param.transformArgs)) : (_b = _this.resolve(param.transform)).transform.apply(_b, __spread([_this.resolve(param.token, context2)], param.transformArgs));
            } else {
              return param.multiple ? _this.resolveAll(param.token) : _this.resolve(param.token, context2);
            }
          } else if (isTransformDescriptor(param)) {
            return (_c = _this.resolve(param.transform, context2)).transform.apply(_c, __spread([_this.resolve(param.token, context2)], param.transformArgs));
          }
          return _this.resolve(param, context2);
        } catch (e) {
          throw new Error(formatErrorCtor(ctor, idx, e));
        }
      };
    };
    InternalDependencyContainer2.prototype.ensureNotDisposed = function() {
      if (this.disposed) {
        throw new Error("This container has been disposed, you cannot interact with a disposed container");
      }
    };
    return InternalDependencyContainer2;
  }();
  var instance = new InternalDependencyContainer();

  // node_modules/tsyringe/dist/esm5/decorators/inject.js
  function inject(token) {
    return defineInjectionTokenMetadata(token);
  }
  var inject_default = inject;

  // node_modules/tsyringe/dist/esm5/decorators/injectable.js
  function injectable() {
    return function(target) {
      typeInfo.set(target, getParamInfo(target));
    };
  }
  var injectable_default = injectable;

  // node_modules/tsyringe/dist/esm5/decorators/singleton.js
  function singleton() {
    return function(target) {
      injectable_default()(target);
      instance.registerSingleton(target);
    };
  }
  var singleton_default = singleton;

  // node_modules/tsyringe/dist/esm5/index.js
  if (typeof Reflect === "undefined" || !Reflect.getMetadata) {
    throw new Error(`tsyringe requires a reflect polyfill. Please add 'import "reflect-metadata"' to the top of your entry point.`);
  }

  // js/dungeongen/MazeGenerator.ts
  var MazeGenerator_exports = {};
  __export(MazeGenerator_exports, {
    MazeGenerator: () => MazeGenerator
  });

  // js/dungeongen/room.ts
  var room_exports = {};
  __export(room_exports, {
    Room: () => Room
  });

  // js/forFramework/findCharInStringArray.ts
  function findCharInStringArray(grid, targetChar) {
    for (let y = 0; y < grid.length; y++) {
      for (let x = 0; x < grid[y].length; x++) {
        if (grid[y][x] === targetChar) {
          return { x, y };
        }
      }
    }
    return null;
  }
  function findCharInStringArrayByPos(grid, x, y) {
    if (y < 0 || y >= grid.length) {
      return null;
    }
    if (x < 0 || x >= grid[y].length) {
      return null;
    }
    return grid[y][x];
  }

  // js/dungeongen/roomTemplates.ts
  var roomTemplates_exports = {};
  __export(roomTemplates_exports, {
    RoomTemplatePatternDefinitions: () => RoomTemplatePatternDefinitions,
    RoomTypes: () => RoomTypes,
    roomTemplates: () => roomTemplates
  });
  var RoomTypes = {
    Entrance: "entrance",
    Exit: "exit",
    Treasure: "treasure",
    Normal: "normal"
  };
  var roomTemplates = [
    {
      name: "entrance",
      type: RoomTypes.Entrance,
      ceilingHeight: [4],
      canBeRotated: false,
      pattern: [
        " #####N##### ",
        "#PP.......PP#",
        "#P..%.....%P#",
        "#P.1.C.....# ",
        "#.....%....##",
        "W...........E",
        "#P..........#",
        "#P.......2.P#",
        "##P....%!.PP#",
        "  ##....PPPP#",
        "    #S###### "
      ],
      characters: [
        "LittleDude",
        "MagicDude"
      ],
      props: [
        { name: "Barrel" },
        { name: "BarrelBroken", chance: 0.4 },
        { name: "Bench", faceWall: true, chance: 0.1 },
        { name: "Banner", faceWall: true, chance: 0.3, mustBeAgainstWall: true }
      ],
      chests: [
        { material: "Iron", size: "Large", rotation: 270 }
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [3, 4],
      canBeRotated: true,
      pattern: [
        " #N#   ",
        " #..## ",
        "#X...X#",
        "W..%...E",
        "#....X#",
        " #S### "
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [5, 8],
      canBeRotated: true,
      pattern: [
        "    #N#",
        "   #...#",
        "  #.....#",
        " #.......#",
        "#.........#",
        "W....%....E",
        "#.........#",
        " #.......#",
        "  #.....#",
        "   #...#",
        "    #S#"
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [5],
      canBeRotated: true,
      pattern: [
        " ####N####",
        "#.........#",
        "#.........#",
        "#..P...P..#",
        "#.........#",
        "W....%....E",
        "#.........#",
        "#..P...P..#",
        "#.........#",
        "#.........#",
        " ####S####"
      ],
      props: [
        { name: "Pillar" }
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [3, 4],
      canBeRotated: true,
      pattern: [
        "#####    ",
        "#.X.#N###",
        "#.%.....E",
        "#.......#",
        "#.......#",
        "W.....%.#",
        "#.......#",
        "#S#######"
      ]
    },
    {
      name: "normal",
      type: RoomTypes.Normal,
      ceilingHeight: [3, 4],
      canBeRotated: true,
      pattern: [
        "##N###    ",
        "#..%.#####",
        "#X.......E",
        "#........#",
        " #...#####",
        " W.%.# ",
        " #...# ",
        " ##S## "
      ]
    },
    {
      name: "Final room",
      type: RoomTypes.Exit,
      ceilingHeight: [4],
      canBeRotated: false,
      pattern: [
        "#N#########",
        "W..%......#",
        "#.........#",
        "#.........#",
        "#..%...%..#",
        "#.........#",
        "#.........#",
        "#......%..E",
        "#########S#"
      ]
    },
    {
      name: "Treasure Room",
      type: RoomTypes.Treasure,
      ceilingHeight: [3],
      canBeRotated: false,
      pattern: [
        "#N#########",
        "W..%..#...#",
        "#.....#...#",
        "#.....#...#",
        "#..%...%..#",
        "#...#.....#",
        "#...#.....#",
        "#...#..%..E",
        "#########S#"
      ]
    }
  ];
  var RoomTemplatePatternDefinitions = {
    N: {
      canTeleportToTile: false,
      canInteractWithTile: true,
      behavior: "Door"
      // Door to the north
    },
    E: {
      canTeleportToTile: false,
      canInteractWithTile: true,
      behavior: "Door"
      // Door to the east
    },
    S: {
      canTeleportToTile: false,
      canInteractWithTile: true,
      behavior: "Door"
      // Door to the south
    },
    W: {
      canTeleportToTile: false,
      canInteractWithTile: true,
      behavior: "Door"
      // Door to the west
    },
    C: {
      canTeleportToTile: false,
      canInteractWithTile: false
      // Campfire( max 1 per room)
    },
    ".": {
      // Empty space
      canTeleportToTile: true,
      canInteractWithTile: false
    },
    "#": {
      canTeleportToTile: false,
      canInteractWithTile: false
      // Wall
    },
    "%": {
      canTeleportToTile: true,
      canInteractWithTile: false
      // Torch (light)
    },
    X: {
      // Enemy spawn point
      canTeleportToTile: true,
      canInteractWithTile: false
    },
    "!": {
      // A chest, details defined in the room definition
      canTeleportToTile: false,
      canInteractWithTile: true,
      behavior: "Chest"
    },
    P: {
      // Prop
      canTeleportToTile: false,
      canInteractWithTile: false
    },
    O: {
      // Ore
      canTeleportToTile: false,
      canInteractWithTile: true,
      behavior: "Ore"
    },
    G: {
      canTeleportToTile: false,
      canInteractWithTile: true
      // Gem
    }
  };

  // js/dungeongen/room.ts
  var Room = class {
    /**
     * The rooms a door will take you to
     * @type {RoomDirections}
     */
    targetRooms;
    /**
     * The template used to generate this room
     */
    #roomTemplate = null;
    /**
     * Does this room have a door in each direction?
     */
    doors;
    /**
     * Is this room the exit, the final room of the game?
     */
    isExit;
    /**
     * Is this room the entrance, the first room of the game?
     */
    isEntrance;
    /**
     * Is this room a treasure room?
     */
    isTreasure;
    /**
     * The seed used to generate this room
     */
    seed;
    /**
     * When a room is visited for the first time, it is initialized
     * This means that the room is populated with items, enemies, etc, based on the chosen template
     * This is done to avoid having to generate the entire dungeon at once, while making
     * sure the room stays the same when revisited
     */
    isInitialized = false;
    /**
     * The distance from the entrance
     */
    distanceFromEntrance;
    chests;
    items;
    constructor() {
      this.doors = { north: false, west: false, south: false, east: false };
      this.targetRooms = { north: null, west: null, south: null, east: null };
      this.isExit = false;
      this.isEntrance = false;
      this.isTreasure = false;
      this.seed = 0;
      this.distanceFromEntrance = 0;
    }
    toKey() {
      let key = "";
      if (this.doors.north)
        key += "N";
      if (this.doors.east)
        key += "E";
      if (this.doors.south)
        key += "S";
      if (this.doors.west)
        key += "W";
      return key;
    }
    /**
     * Gets the room in a specific direction
     * @param {DirectionSymbol|string} direction
     * @returns {{x:number, y:number}|null|undefined} the room in that direction; null if there is no room in that direction
     */
    getTargetRoom(direction2) {
      switch (direction2) {
        case "N":
          return this.targetRooms.north;
        case "E":
          return this.targetRooms.east;
        case "S":
          return this.targetRooms.south;
        case "W":
          return this.targetRooms.west;
      }
    }
    /**
     *
     * @returns {RoomType} the type of the room
     */
    getRoomType() {
      if (this.isEntrance) {
        return RoomTypes.Entrance;
      }
      if (this.isExit) {
        return RoomTypes.Exit;
      }
      if (this.isTreasure) {
        return RoomTypes.Treasure;
      }
      return RoomTypes.Normal;
    }
    /**
     *
     * @param {RoomTemplate} roomTemplate
     */
    setRoomTemplate(roomTemplate) {
      if (this.#roomTemplate === null) {
        this.#roomTemplate = roomTemplate;
      } else {
        console.warn("RoomTemplate already set");
      }
    }
    getRoomTemplate() {
      return this.#roomTemplate;
    }
    /**
     * Gets the door in a specific direction from the template
     * @param {DirectionSymbol} direction
     * @returns {{x:number, y:number}}|null} the X/Y coordinates of the door; or null if there is no door in that direction
     */
    getDoor(direction2) {
      if (this.#roomTemplate !== null) {
        let result = findCharInStringArray(this.#roomTemplate.pattern, direction2);
        return result;
      }
      return null;
    }
    initialize(template) {
      if (this.isInitialized) {
        return;
      }
      this.setRoomTemplate(template);
      this.isInitialized = true;
    }
    getItemsAtPosition(position) {
      if (!this.isInitialized) {
        console.warn("Room is not initialized, but should since we are trying to get items from it");
        return;
      }
      let items = this.items?.filter((item) => {
        return item.position.x === position.x && item.position.y === position.y;
      });
      return items;
    }
  };

  // js/dungeongen/MazeGenerator.ts
  var MazeGenerator = class {
    mazeWidth;
    mazeHeight;
    /**
     * The grid of rooms that make up the level.
     * @type {Room[][]}
     */
    maze = [[]];
    patterns;
    constraints;
    farthestRoom;
    constructor(sizeX, sizeY, tileSet = null, extractedPatterns = [], constraintMappingForAllKeySets = null) {
      this.mazeWidth = sizeX;
      this.mazeHeight = sizeY;
      this.patterns = extractedPatterns;
      this.constraints = constraintMappingForAllKeySets;
      this.#createGrid();
      this.farthestRoom = { x: 0, y: 0, distance: 0 };
    }
    #createGrid() {
      this.maze = new Array(this.mazeWidth);
      for (let x = 0; x < this.mazeWidth; x++) {
        this.maze[x] = new Array(this.mazeHeight);
        for (let y = 0; y < this.mazeHeight; y++) {
          this.maze[x][y] = new Room();
        }
      }
      return this.maze;
    }
    /**
     * Gets a room from the grid at the given indices.
     * @param {number} x X-index of the room
     * @param {number} y Y-index of the room
     * @returns {Room} The room at the given indices
     */
    getRoom(x, y) {
      return this.maze[x][y];
    }
    /**
     * Gets the pattern at the given index from the list of patterns.
     * @param {number} index The index of the pattern to get.
     * @returns {Tile} The pattern at the given index.
     */
    getPattern(index) {
      return this.patterns[index];
    }
    enableDoors(x1, y1, x2, y2, direction2) {
      switch (direction2) {
        case "north":
          this.maze[x1][y1].doors.north = true;
          this.maze[x1][y1].targetRooms.north = { x: x2, y: y2 };
          this.maze[x2][y2].doors.south = true;
          this.maze[x2][y2].targetRooms.south = { x: x1, y: y1 };
          break;
        case "east":
          this.maze[x1][y1].doors.east = true;
          this.maze[x1][y1].targetRooms.east = { x: x2, y: y2 };
          this.maze[x2][y2].doors.west = true;
          this.maze[x2][y2].targetRooms.west = { x: x1, y: y1 };
          break;
        case "south":
          this.maze[x1][y1].doors.south = true;
          this.maze[x1][y1].targetRooms.south = { x: x2, y: y2 };
          this.maze[x2][y2].doors.north = true;
          this.maze[x2][y2].targetRooms.north = { x: x1, y: y1 };
          break;
        case "west":
          this.maze[x1][y1].doors.west = true;
          this.maze[x1][y1].targetRooms.west = { x: x2, y: y2 };
          this.maze[x2][y2].doors.east = true;
          this.maze[x2][y2].targetRooms.east = { x: x1, y: y1 };
          break;
      }
    }
    isValidCoordinates(x, y) {
      return x >= 0 && x < this.mazeWidth && y >= 0 && y < this.mazeHeight;
    }
    generate() {
      this.#generateMazeRecursively(0, 0);
      this.getRoom(this.farthestRoom.x, this.farthestRoom.y).isExit = true;
      this.getRoom(0, 0).isEntrance = true;
      console.log(`distance:${this.farthestRoom.distance}`);
    }
    /**
     * Generates a maze using the recursive backtracking algorithm.
     * @param {number} x Start X coordinate
     * @param {number} y Start Y coordinate
     * @param {string[]} visitedList The list of visited rooms, omit to start a new list.
     */
    #generateMazeRecursively(x, y, visitedList = [], distance3 = 0) {
      if (!visitedList) {
        visitedList = [];
      }
      visitedList.push(`${x},${y}`);
      const directions = [
        { dx: -1, dy: 0, direction: "north" },
        { dx: 1, dy: 0, direction: "south" },
        { dx: 0, dy: -1, direction: "west" },
        { dx: 0, dy: 1, direction: "east" }
      ];
      shuffleArray(directions);
      const currentRoom = this.getRoom(x, y);
      currentRoom.distanceFromEntrance = distance3;
      if (distance3 % 10 == 0) {
        currentRoom.isTreasure = true;
      }
      for (const dir of directions) {
        if (!dir)
          continue;
        const newX = x + dir.dx;
        const newY = y + dir.dy;
        if (this.isValidCoordinates(newX, newY) && !visitedList.includes(`${newX},${newY}`)) {
          this.enableDoors(x, y, newX, newY, dir.direction);
          if (distance3 > this.farthestRoom.distance) {
            this.farthestRoom.x = newX;
            this.farthestRoom.y = newY;
            this.farthestRoom.distance = distance3;
          }
          this.#generateMazeRecursively(newX, newY, visitedList, distance3 + 1);
        }
      }
    }
  };

  // js/dungeongen/tileset.ts
  var tileset_exports = {};
  __export(tileset_exports, {
    TileSet: () => TileSet
  });

  // js/dungeongen/tile.ts
  var tile_exports = {};
  __export(tile_exports, {
    Tile: () => Tile
  });
  var Tile = class {
    /**
     * name of the 3d object
     * @type {string}
     */
    name;
    /**
     * reference to the 3D object
     * @type {Object3D}
     */
    object;
    /**
     * Index in the tileset
     * @type {number}
     */
    index;
    constructor(name, object, index) {
      if (!object) {
        throw new Error("object is undefined");
      }
      if (!name || name.length == 0) {
        throw new Error("name should not be empty");
      }
      this.name = name;
      this.object = object;
      this.index = index;
    }
  };

  // js/dungeongen/tileset.ts
  var TileSet = class {
    /**
     * The set of tiles.
     * @type {Set<Tile>}
     */
    #tiles;
    #enemyObjects;
    #characterObjects;
    /**
     * Initializes a new instance of the TileSet class.
     * @param {Object3D[]} tileObjects The list of Wonderland objects that represent the tiles.
     */
    constructor(tileObjects, enemyObjects, characterObjects) {
      this.#enemyObjects = enemyObjects;
      this.#characterObjects = characterObjects;
      this.#tiles = /* @__PURE__ */ new Set();
      for (let i = 0; i < tileObjects.length; i++) {
        this.#tiles.add(
          new Tile(tileObjects[i].name, tileObjects[i], this.#tiles.size)
        );
      }
    }
    /**
     * Gets the tile at the given index.
     * @param {number} index The index of the tile to get.
     * @returns {Tile} The tile at the given index.
     */
    getTile(index) {
      return [...this.#tiles][index];
    }
    /**
     * Get a tile by its name.
     * @param {string} name
     * @returns {Tile|undefined} The tile with the given name.
     */
    getTileByName(name) {
      return [...this.#tiles].find((x) => x.name == name);
    }
    getCharacter(characterName) {
      return this.#characterObjects.find((x) => x.name === characterName);
    }
    resetAllCharacters() {
      for (let i = 0; i < this.#characterObjects.length; i++) {
        this.#characterObjects[i].resetPositionRotation();
      }
    }
    /**
     * Finds an object in the given list of objects with the given name.
     * @param {Object3D[]} objects list of objects to seach through
     * @param {string} name name of the object to find
     * @returns {Object3D|undefined} the object with the given name
     */
    #findObject(objects, name) {
      return objects.find((x) => x.name === name);
    }
  };

  // js/dungeongen/PatternSet.ts
  var PatternSet_exports = {};
  __export(PatternSet_exports, {
    PatternSet: () => PatternSet
  });

  // js/dungeongen/utils/extractor.ts
  var extractor_exports = {};
  __export(extractor_exports, {
    checkConstraints: () => checkConstraints,
    extractPatterns2D: () => extractPatterns2D,
    extractPatterns3D: () => extractPatterns3D,
    extractPatternsWrap: () => extractPatternsWrap,
    rotatePattern: () => rotatePattern
  });
  function rotatePattern(pattern, patternSize) {
    let rotatedPattern = [];
    for (let i = 0; i < patternSize; i++) {
      rotatedPattern.push([]);
      for (let j = patternSize - 1; j >= 0; j--) {
        rotatedPattern[i].push(pattern[j][i]);
      }
    }
    return rotatedPattern;
  }
  function extractPatterns2D(input, patternSize) {
    const width = input[0].length;
    const height = input.length;
    let patterns = /* @__PURE__ */ new Map();
    for (let y = 0; y <= height - patternSize; y++) {
      for (let x = 0; x <= width - patternSize; x++) {
        let basePattern = [];
        for (let i = 0; i < patternSize; i++) {
          let row = [];
          for (let j = 0; j < patternSize; j++) {
            row.push(input[y + i][x + j]);
          }
          basePattern.push(row);
        }
        let currentPattern = basePattern;
        let key = JSON.stringify(currentPattern);
        if (!patterns.has(key)) {
          patterns.set(key, { pattern: currentPattern, weight: 1 });
        } else {
          let value = patterns.get(key);
          value.weight += 1;
          patterns.set(key, value);
        }
      }
    }
    return Array.from(patterns.values());
  }
  function extractPatternsWrap(input, patternSize) {
    const width = input[0].length;
    const height = input.length;
    let patterns = /* @__PURE__ */ new Map();
    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        let basePattern = [];
        for (let i = 0; i < patternSize; i++) {
          let row = [];
          for (let j = 0; j < patternSize; j++) {
            row.push(input[(x + i) % height][(y + j) % width]);
          }
          basePattern.push(row);
        }
        let currentPattern = basePattern;
        let key = JSON.stringify(currentPattern);
        if (!patterns.has(key)) {
          patterns.set(key, { pattern: currentPattern, weight: 1 });
        } else {
          let value = patterns.get(key);
          value.weight += 1;
          patterns.set(key, value);
        }
      }
    }
    return Array.from(patterns.values());
  }
  function extractPatterns3D(input, patternSize) {
    const width = input[0][0].length;
    const height = input[0].length;
    const depth = input.length;
    let patterns = /* @__PURE__ */ new Map();
    for (let z = 0; z <= depth - patternSize; z++) {
      for (let y = 0; y <= height - patternSize; y++) {
        for (let x = 0; x <= width - patternSize; x++) {
          let pattern = [];
          for (let i = 0; i < patternSize; i++) {
            let layer = [];
            for (let j = 0; j < patternSize; j++) {
              let row = [];
              for (let k = 0; k < patternSize; k++) {
                row.push(input[z + i][y + j][x + k]);
              }
              layer.push(row);
            }
            pattern.push(layer);
          }
          let key = JSON.stringify(pattern);
          if (!patterns.has(key)) {
            patterns.set(key, { pattern, count: 1 });
          } else {
            let value = patterns.get(key);
            value.count += 1;
            patterns.set(key, value);
          }
        }
      }
    }
  }
  function checkConstraints(patternA, patternB) {
    const size2 = patternA.length;
    let topMatch = true;
    for (let i = 0; i < size2; i++) {
      if (patternA[i][0] !== patternB[i][size2 - 1]) {
        topMatch = false;
        break;
      }
    }
    let bottomMatch = true;
    for (let i = 0; i < size2; i++) {
      if (patternA[i][size2 - 1] !== patternB[i][0]) {
        bottomMatch = false;
        break;
      }
    }
    let leftMatch = true;
    for (let j = 0; j < size2; j++) {
      if (patternA[0][j] !== patternB[size2 - 1][j]) {
        leftMatch = false;
        break;
      }
    }
    let rightMatch = true;
    for (let j = 0; j < size2; j++) {
      if (patternA[size2 - 1][j] !== patternB[0][j]) {
        rightMatch = false;
        break;
      }
    }
    return { north: topMatch, south: bottomMatch, west: leftMatch, east: rightMatch };
  }

  // js/dungeongen/PatternSet.ts
  var PatternSet = class {
    #patterns = /* @__PURE__ */ new Map();
    constructor() {
      this.#patterns.set("N", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 6, 6, 6, 6]
      ]);
      this.#patterns.set("E", rotatePattern(this.#patterns.get("N"), 5));
      this.#patterns.set("S", rotatePattern(this.#patterns.get("E"), 5));
      this.#patterns.set("W", rotatePattern(this.#patterns.get("S"), 5));
      this.#patterns.set("NE", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 1],
        [6, 1, 1, 1, 6],
        [6, 6, 6, 6, 6]
      ]);
      this.#patterns.set("ES", rotatePattern(this.#patterns.get("NE"), 5));
      this.#patterns.set("SW", rotatePattern(this.#patterns.get("ES"), 5));
      this.#patterns.set("NW", rotatePattern(this.#patterns.get("SW"), 5));
      this.#patterns.set("NS", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 6],
        [6, 6, 1, 6, 6]
      ]);
      this.#patterns.set("EW", rotatePattern(this.#patterns.get("NS"), 5));
      this.#patterns.set("NES", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [6, 1, 1, 1, 1],
        [6, 1, 1, 1, 6],
        [6, 6, 1, 6, 6]
      ]);
      this.#patterns.set("ESW", rotatePattern(this.#patterns.get("NES"), 5));
      this.#patterns.set("NSW", rotatePattern(this.#patterns.get("ESW"), 5));
      this.#patterns.set("NEW", rotatePattern(this.#patterns.get("NSW"), 5));
      this.#patterns.set("NESW", [
        [6, 6, 1, 6, 6],
        [6, 1, 1, 1, 6],
        [1, 1, 1, 1, 1],
        [6, 1, 1, 1, 6],
        [6, 6, 1, 6, 6]
      ]);
    }
    /**
     * get the pattern for the given key
     * @param {string} key 
     * @returns {number[][]} the pattern for the given key
     */
    get(key) {
      if (this.#patterns.has(key)) {
        return this.#patterns.get(key);
      } else {
        throw new Error(`PatternSet: No pattern for key ${key}`);
      }
    }
  };

  // js/dungeongen/RoomRenderer.ts
  var RoomRenderer_exports = {};
  __export(RoomRenderer_exports, {
    RoomRenderer: () => RoomRenderer
  });

  // js/dungeongen/RoomCreator.ts
  var RoomCreator_exports = {};
  __export(RoomCreator_exports, {
    RoomCreator: () => RoomCreator
  });

  // js/dungeongen/roomItemCreator.ts
  var roomItemCreator_exports = {};
  __export(roomItemCreator_exports, {
    RoomItemCreator: () => RoomItemCreator
  });

  // js/dungeongen/objects/behaviorBase.ts
  var BehaviorBase = class {
    _behaviorHandlers = {};
    _behaviors = [];
    addBehaviorHandler(handlerName, handler) {
      if (!this._behaviorHandlers[handlerName]) {
        this._behaviorHandlers[handlerName] = [];
      }
      this._behaviorHandlers[handlerName].push(handler);
    }
    executeBehavior(handlerName, ret, ...args) {
      if (this._behaviorHandlers && this._behaviorHandlers[handlerName]) {
        this._behaviorHandlers[handlerName].forEach((handler) => {
          args = [ret, ...args];
          ret = handler.apply(this, args);
        });
      }
      return ret;
    }
    wrapFunction(handlerName) {
      if (!this._behaviorHandlers || !this._behaviorHandlers[handlerName]) {
        const originalFunction = this[handlerName];
        this[handlerName] = (...args) => {
          const ret = originalFunction.apply(this, args);
          return this.executeBehavior(handlerName, ret, ...args);
        };
      }
    }
    addBehavior(template) {
      const behaviorClone = { ...template };
      const name = behaviorClone.name;
      delete behaviorClone.name;
      behaviorClone.initialize.apply(this);
      delete behaviorClone.initialize;
      Object.keys(behaviorClone).forEach((key) => {
        this.wrapFunction(key);
        this.addBehaviorHandler(key, behaviorClone[key]);
      });
      this._behaviors.push(name);
      return this;
    }
  };

  // js/dungeongen/objects/GenericItem.ts
  var GenericItem = class extends BehaviorBase {
    id;
    name;
    active;
    type;
    description;
    rarity;
    position = { x: 0, y: 0 };
    constructor(rarity = "common", position = { x: 0, y: 0 }) {
      super();
      this.id = +/* @__PURE__ */ new Date();
      this.active = false;
      this.type = "item";
      this.name = "Nameless Item";
      this.description = "it is nothing special";
      this.rarity = rarity;
      this.position = position;
    }
    damage() {
      return 0;
    }
    protection() {
      return 0;
    }
    range() {
      return 0;
    }
    interact(obj, x, y, z) {
    }
    attack() {
    }
    turn() {
    }
    equip() {
    }
    unequip() {
    }
    refresh() {
    }
    over() {
      return true;
    }
    createUI() {
      return 0;
    }
  };

  // node_modules/tslib/tslib.es6.mjs
  var extendStatics2 = function(d, b) {
    extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics2(d, b);
  };
  function __extends2(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics2(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __values2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read2(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i["return"]))
          m.call(i);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l2 = from.length, ar; i < l2; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  // node_modules/rxjs/dist/esm5/internal/util/isFunction.js
  function isFunction(value) {
    return typeof value === "function";
  }

  // node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
  function createErrorClass(createImpl) {
    var _super = function(instance2) {
      Error.call(instance2);
      instance2.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
  }

  // node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
  var UnsubscriptionError = createErrorClass(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
      _super(this);
      this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
        return i + 1 + ") " + err.toString();
      }).join("\n  ") : "";
      this.name = "UnsubscriptionError";
      this.errors = errors;
    };
  });

  // node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
  function arrRemove(arr, item) {
    if (arr) {
      var index = arr.indexOf(item);
      0 <= index && arr.splice(index, 1);
    }
  }

  // node_modules/rxjs/dist/esm5/internal/Subscription.js
  var Subscription = function() {
    function Subscription2(initialTeardown) {
      this.initialTeardown = initialTeardown;
      this.closed = false;
      this._parentage = null;
      this._finalizers = null;
    }
    Subscription2.prototype.unsubscribe = function() {
      var e_1, _a, e_2, _b;
      var errors;
      if (!this.closed) {
        this.closed = true;
        var _parentage = this._parentage;
        if (_parentage) {
          this._parentage = null;
          if (Array.isArray(_parentage)) {
            try {
              for (var _parentage_1 = __values2(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                var parent_1 = _parentage_1_1.value;
                parent_1.remove(this);
              }
            } catch (e_1_1) {
              e_1 = { error: e_1_1 };
            } finally {
              try {
                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                  _a.call(_parentage_1);
              } finally {
                if (e_1)
                  throw e_1.error;
              }
            }
          } else {
            _parentage.remove(this);
          }
        }
        var initialFinalizer = this.initialTeardown;
        if (isFunction(initialFinalizer)) {
          try {
            initialFinalizer();
          } catch (e) {
            errors = e instanceof UnsubscriptionError ? e.errors : [e];
          }
        }
        var _finalizers = this._finalizers;
        if (_finalizers) {
          this._finalizers = null;
          try {
            for (var _finalizers_1 = __values2(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
              var finalizer = _finalizers_1_1.value;
              try {
                execFinalizer(finalizer);
              } catch (err) {
                errors = errors !== null && errors !== void 0 ? errors : [];
                if (err instanceof UnsubscriptionError) {
                  errors = __spreadArray(__spreadArray([], __read2(errors)), __read2(err.errors));
                } else {
                  errors.push(err);
                }
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
                _b.call(_finalizers_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
        if (errors) {
          throw new UnsubscriptionError(errors);
        }
      }
    };
    Subscription2.prototype.add = function(teardown) {
      var _a;
      if (teardown && teardown !== this) {
        if (this.closed) {
          execFinalizer(teardown);
        } else {
          if (teardown instanceof Subscription2) {
            if (teardown.closed || teardown._hasParent(this)) {
              return;
            }
            teardown._addParent(this);
          }
          (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
        }
      }
    };
    Subscription2.prototype._hasParent = function(parent) {
      var _parentage = this._parentage;
      return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription2.prototype._addParent = function(parent) {
      var _parentage = this._parentage;
      this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription2.prototype._removeParent = function(parent) {
      var _parentage = this._parentage;
      if (_parentage === parent) {
        this._parentage = null;
      } else if (Array.isArray(_parentage)) {
        arrRemove(_parentage, parent);
      }
    };
    Subscription2.prototype.remove = function(teardown) {
      var _finalizers = this._finalizers;
      _finalizers && arrRemove(_finalizers, teardown);
      if (teardown instanceof Subscription2) {
        teardown._removeParent(this);
      }
    };
    Subscription2.EMPTY = function() {
      var empty = new Subscription2();
      empty.closed = true;
      return empty;
    }();
    return Subscription2;
  }();
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
    return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
  }
  function execFinalizer(finalizer) {
    if (isFunction(finalizer)) {
      finalizer();
    } else {
      finalizer.unsubscribe();
    }
  }

  // node_modules/rxjs/dist/esm5/internal/config.js
  var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: void 0,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
  };

  // node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
  var timeoutProvider = {
    setTimeout: function(handler, timeout) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      var delegate = timeoutProvider.delegate;
      if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
        return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read2(args)));
      }
      return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read2(args)));
    },
    clearTimeout: function(handle) {
      var delegate = timeoutProvider.delegate;
      return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: void 0
  };

  // node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
  function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function() {
      var onUnhandledError = config.onUnhandledError;
      if (onUnhandledError) {
        onUnhandledError(err);
      } else {
        throw err;
      }
    });
  }

  // node_modules/rxjs/dist/esm5/internal/util/noop.js
  function noop() {
  }

  // node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
  var COMPLETE_NOTIFICATION = function() {
    return createNotification("C", void 0, void 0);
  }();
  function errorNotification(error) {
    return createNotification("E", void 0, error);
  }
  function nextNotification(value) {
    return createNotification("N", value, void 0);
  }
  function createNotification(kind, value, error) {
    return {
      kind,
      value,
      error
    };
  }

  // node_modules/rxjs/dist/esm5/internal/util/errorContext.js
  var context = null;
  function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      var isRoot = !context;
      if (isRoot) {
        context = { errorThrown: false, error: null };
      }
      cb();
      if (isRoot) {
        var _a = context, errorThrown = _a.errorThrown, error = _a.error;
        context = null;
        if (errorThrown) {
          throw error;
        }
      }
    } else {
      cb();
    }
  }
  function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
      context.errorThrown = true;
      context.error = err;
    }
  }

  // node_modules/rxjs/dist/esm5/internal/Subscriber.js
  var Subscriber = function(_super) {
    __extends2(Subscriber2, _super);
    function Subscriber2(destination) {
      var _this = _super.call(this) || this;
      _this.isStopped = false;
      if (destination) {
        _this.destination = destination;
        if (isSubscription(destination)) {
          destination.add(_this);
        }
      } else {
        _this.destination = EMPTY_OBSERVER;
      }
      return _this;
    }
    Subscriber2.create = function(next, error, complete) {
      return new SafeSubscriber(next, error, complete);
    };
    Subscriber2.prototype.next = function(value) {
      if (this.isStopped) {
        handleStoppedNotification(nextNotification(value), this);
      } else {
        this._next(value);
      }
    };
    Subscriber2.prototype.error = function(err) {
      if (this.isStopped) {
        handleStoppedNotification(errorNotification(err), this);
      } else {
        this.isStopped = true;
        this._error(err);
      }
    };
    Subscriber2.prototype.complete = function() {
      if (this.isStopped) {
        handleStoppedNotification(COMPLETE_NOTIFICATION, this);
      } else {
        this.isStopped = true;
        this._complete();
      }
    };
    Subscriber2.prototype.unsubscribe = function() {
      if (!this.closed) {
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
        this.destination = null;
      }
    };
    Subscriber2.prototype._next = function(value) {
      this.destination.next(value);
    };
    Subscriber2.prototype._error = function(err) {
      try {
        this.destination.error(err);
      } finally {
        this.unsubscribe();
      }
    };
    Subscriber2.prototype._complete = function() {
      try {
        this.destination.complete();
      } finally {
        this.unsubscribe();
      }
    };
    return Subscriber2;
  }(Subscription);
  var _bind = Function.prototype.bind;
  function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = function() {
    function ConsumerObserver2(partialObserver) {
      this.partialObserver = partialObserver;
    }
    ConsumerObserver2.prototype.next = function(value) {
      var partialObserver = this.partialObserver;
      if (partialObserver.next) {
        try {
          partialObserver.next(value);
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    ConsumerObserver2.prototype.error = function(err) {
      var partialObserver = this.partialObserver;
      if (partialObserver.error) {
        try {
          partialObserver.error(err);
        } catch (error) {
          handleUnhandledError(error);
        }
      } else {
        handleUnhandledError(err);
      }
    };
    ConsumerObserver2.prototype.complete = function() {
      var partialObserver = this.partialObserver;
      if (partialObserver.complete) {
        try {
          partialObserver.complete();
        } catch (error) {
          handleUnhandledError(error);
        }
      }
    };
    return ConsumerObserver2;
  }();
  var SafeSubscriber = function(_super) {
    __extends2(SafeSubscriber2, _super);
    function SafeSubscriber2(observerOrNext, error, complete) {
      var _this = _super.call(this) || this;
      var partialObserver;
      if (isFunction(observerOrNext) || !observerOrNext) {
        partialObserver = {
          next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
          error: error !== null && error !== void 0 ? error : void 0,
          complete: complete !== null && complete !== void 0 ? complete : void 0
        };
      } else {
        var context_1;
        if (_this && config.useDeprecatedNextContext) {
          context_1 = Object.create(observerOrNext);
          context_1.unsubscribe = function() {
            return _this.unsubscribe();
          };
          partialObserver = {
            next: observerOrNext.next && bind(observerOrNext.next, context_1),
            error: observerOrNext.error && bind(observerOrNext.error, context_1),
            complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
          };
        } else {
          partialObserver = observerOrNext;
        }
      }
      _this.destination = new ConsumerObserver(partialObserver);
      return _this;
    }
    return SafeSubscriber2;
  }(Subscriber);
  function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
      captureError(error);
    } else {
      reportUnhandledError(error);
    }
  }
  function defaultErrorHandler(err) {
    throw err;
  }
  function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function() {
      return onStoppedNotification(notification, subscriber);
    });
  }
  var EMPTY_OBSERVER = {
    closed: true,
    next: noop,
    error: defaultErrorHandler,
    complete: noop
  };

  // node_modules/rxjs/dist/esm5/internal/symbol/observable.js
  var observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();

  // node_modules/rxjs/dist/esm5/internal/util/identity.js
  function identity4(x) {
    return x;
  }

  // node_modules/rxjs/dist/esm5/internal/util/pipe.js
  function pipeFromArray(fns) {
    if (fns.length === 0) {
      return identity4;
    }
    if (fns.length === 1) {
      return fns[0];
    }
    return function piped(input) {
      return fns.reduce(function(prev, fn) {
        return fn(prev);
      }, input);
    };
  }

  // node_modules/rxjs/dist/esm5/internal/Observable.js
  var Observable = function() {
    function Observable2(subscribe) {
      if (subscribe) {
        this._subscribe = subscribe;
      }
    }
    Observable2.prototype.lift = function(operator) {
      var observable2 = new Observable2();
      observable2.source = this;
      observable2.operator = operator;
      return observable2;
    };
    Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
      var _this = this;
      var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
      errorContext(function() {
        var _a = _this, operator = _a.operator, source = _a.source;
        subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
      });
      return subscriber;
    };
    Observable2.prototype._trySubscribe = function(sink) {
      try {
        return this._subscribe(sink);
      } catch (err) {
        sink.error(err);
      }
    };
    Observable2.prototype.forEach = function(next, promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var subscriber = new SafeSubscriber({
          next: function(value) {
            try {
              next(value);
            } catch (err) {
              reject(err);
              subscriber.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
        _this.subscribe(subscriber);
      });
    };
    Observable2.prototype._subscribe = function(subscriber) {
      var _a;
      return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable2.prototype[observable] = function() {
      return this;
    };
    Observable2.prototype.pipe = function() {
      var operations = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        operations[_i] = arguments[_i];
      }
      return pipeFromArray(operations)(this);
    };
    Observable2.prototype.toPromise = function(promiseCtor) {
      var _this = this;
      promiseCtor = getPromiseCtor(promiseCtor);
      return new promiseCtor(function(resolve, reject) {
        var value;
        _this.subscribe(function(x) {
          return value = x;
        }, function(err) {
          return reject(err);
        }, function() {
          return resolve(value);
        });
      });
    };
    Observable2.create = function(subscribe) {
      return new Observable2(subscribe);
    };
    return Observable2;
  }();
  function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
  }
  function isSubscriber(value) {
    return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
  }

  // node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
  var ObjectUnsubscribedError = createErrorClass(function(_super) {
    return function ObjectUnsubscribedErrorImpl() {
      _super(this);
      this.name = "ObjectUnsubscribedError";
      this.message = "object unsubscribed";
    };
  });

  // node_modules/rxjs/dist/esm5/internal/Subject.js
  var Subject = function(_super) {
    __extends2(Subject2, _super);
    function Subject2() {
      var _this = _super.call(this) || this;
      _this.closed = false;
      _this.currentObservers = null;
      _this.observers = [];
      _this.isStopped = false;
      _this.hasError = false;
      _this.thrownError = null;
      return _this;
    }
    Subject2.prototype.lift = function(operator) {
      var subject = new AnonymousSubject(this, this);
      subject.operator = operator;
      return subject;
    };
    Subject2.prototype._throwIfClosed = function() {
      if (this.closed) {
        throw new ObjectUnsubscribedError();
      }
    };
    Subject2.prototype.next = function(value) {
      var _this = this;
      errorContext(function() {
        var e_1, _a;
        _this._throwIfClosed();
        if (!_this.isStopped) {
          if (!_this.currentObservers) {
            _this.currentObservers = Array.from(_this.observers);
          }
          try {
            for (var _b = __values2(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
              var observer = _c.value;
              observer.next(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return))
                _a.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      });
    };
    Subject2.prototype.error = function(err) {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.hasError = _this.isStopped = true;
          _this.thrownError = err;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().error(err);
          }
        }
      });
    };
    Subject2.prototype.complete = function() {
      var _this = this;
      errorContext(function() {
        _this._throwIfClosed();
        if (!_this.isStopped) {
          _this.isStopped = true;
          var observers = _this.observers;
          while (observers.length) {
            observers.shift().complete();
          }
        }
      });
    };
    Subject2.prototype.unsubscribe = function() {
      this.isStopped = this.closed = true;
      this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject2.prototype, "observed", {
      get: function() {
        var _a;
        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
      },
      enumerable: false,
      configurable: true
    });
    Subject2.prototype._trySubscribe = function(subscriber) {
      this._throwIfClosed();
      return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject2.prototype._subscribe = function(subscriber) {
      this._throwIfClosed();
      this._checkFinalizedStatuses(subscriber);
      return this._innerSubscribe(subscriber);
    };
    Subject2.prototype._innerSubscribe = function(subscriber) {
      var _this = this;
      var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
      if (hasError || isStopped) {
        return EMPTY_SUBSCRIPTION;
      }
      this.currentObservers = null;
      observers.push(subscriber);
      return new Subscription(function() {
        _this.currentObservers = null;
        arrRemove(observers, subscriber);
      });
    };
    Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
      var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
      if (hasError) {
        subscriber.error(thrownError);
      } else if (isStopped) {
        subscriber.complete();
      }
    };
    Subject2.prototype.asObservable = function() {
      var observable2 = new Observable();
      observable2.source = this;
      return observable2;
    };
    Subject2.create = function(destination, source) {
      return new AnonymousSubject(destination, source);
    };
    return Subject2;
  }(Observable);
  var AnonymousSubject = function(_super) {
    __extends2(AnonymousSubject2, _super);
    function AnonymousSubject2(destination, source) {
      var _this = _super.call(this) || this;
      _this.destination = destination;
      _this.source = source;
      return _this;
    }
    AnonymousSubject2.prototype.next = function(value) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject2.prototype.error = function(err) {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject2.prototype.complete = function() {
      var _a, _b;
      (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject2.prototype._subscribe = function(subscriber) {
      var _a, _b;
      return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject2;
  }(Subject);

  // js/classes/levelState.ts
  var LevelState = class {
    // constructor() {
    // }
    // #level = 0;
    // initLevelState(level) {
    //     this.#level = level;
    //     console.log('initLevelState');
    //     //this.currentLevelData = clone(LevelData[level]);
    //    // GameGlobals.particlePool.reset();
    // }
  };

  // js/classes/gameState.ts
  var State = {
    Init: -1,
    Title: 0,
    Pause: 1,
    Playing: 2,
    End: 3,
    Complete: 4
  };
  var GameState = class {
    room = null;
    constructor() {
      this.playerPositionSubject = new Subject();
      this.playerRotationSubject = new Subject();
      this.isInVRSubject = new Subject();
      this.levelSubject = new Subject();
      this.availableTargetsSubject = new Subject();
      this.levelState = new LevelState();
      this.currentRoomSubject = new Subject();
      this.currentRoomSubject.subscribe((room) => {
        console.log("currentRoomSubject", room);
      });
      this.stateSubject = new Subject();
      console.log("new Game State created");
    }
    levelState;
    stateSubject;
    _state = State.Init;
    set state(value) {
      this._state = value;
      this.stateSubject.next(value);
    }
    get state() {
      return this._state;
    }
    availableTargetsSubject;
    _availableTargets = 0;
    set availableTargets(value) {
      this._availableTargets = value;
      this.availableTargetsSubject.next(value);
    }
    get availableTargets() {
      return this._availableTargets;
    }
    levelSubject;
    _level = 0;
    set level(value) {
      this._level = value;
      this.levelSubject.next(value);
    }
    get level() {
      return this._level;
    }
    playerPositionSubject;
    _playerPosition = [0, 0, 0];
    set playerPosition(value) {
      this._previousPlayerPosition = this._playerPosition;
      this._playerPosition = value;
      this.playerPositionSubject.next(value);
    }
    get playerPosition() {
      return this._playerPosition;
    }
    _previousPlayerPosition = [0, 0, 0];
    get previousPlayerPosition() {
      return this._previousPlayerPosition;
    }
    playerRotationSubject;
    _playerRotation = 0;
    set playerRotation(value) {
      this._previousPlayerRotation = this._playerRotation;
      this._playerRotation = value;
      this.playerRotationSubject.next(value);
    }
    get playerRotation() {
      return this._playerRotation;
    }
    _previousPlayerRotation = 0;
    get previousPlayerRotation() {
      return this._previousPlayerRotation;
    }
    isInVRSubject;
    _isInVR = false;
    set isInVR(value) {
      this._isInVR = value;
      this.isInVRSubject.next(value);
    }
    get isInVR() {
      return this._isInVR;
    }
    currentRoomSubject;
    _currentRoom = [0, 0];
    set currentRoom(value) {
      this._currentRoom = value;
      this.currentRoomSubject.next(value);
    }
    get currentRoom() {
      return this._currentRoom;
    }
    offTarget() {
    }
    /**
     * Whether or not the player is currently navigating to a room
     */
    navigating = false;
    /**
     * The direction the player entered the room from
     */
    roomPreviousExitDirection = null;
    /**
     * Navigate to a room
     * @param {number} roomx the x position on the map of the room to navigate to
     * @param {number} roomy the y position on the map of the room to navigate to
     * @param {DirectionSymbol|null} direction the direction the player exited the room from, if null the player will be teleported to the center of the room (this should only happen at the start)
     */
    navigateToRoom(roomx, roomy, direction2 = null) {
      if (this.navigating) {
        return;
      }
      this.navigating = true;
      if (direction2) {
        this.roomPreviousExitDirection = direction2;
      } else {
        this.playerPosition = [3, 0, 7];
        this.playerRotation = 270;
      }
      this.currentRoom = [roomx, roomy];
      this.navigating = false;
    }
    /**
     * Is it possible to teleport to the given position?
     * @param x
     * @param y
     * @param z
     * @returns true if it is possible to teleport to the given position
     */
    canPick(x, y, z) {
      if (!this.room) {
        return false;
      }
      const template = this.room.getRoomTemplate();
      if (!template) {
        console.error(`no template found for current room. Odd... We're in it.`);
        return false;
      }
      const char = findCharInStringArrayByPos(template.pattern, Math.floor(x), Math.floor(z));
      if (!char) {
        console.warn(`no char found at position ${x},${z} in template ${template.name}`);
        return false;
      }
      const definition = RoomTemplatePatternDefinitions[char];
      if (definition.behavior === "Door") {
        return char === "N" && this.room.doors.north || char === "E" && this.room.doors.east || char === "S" && this.room.doors.south || char === "W" && this.room.doors.west;
      } else {
        return definition.canTeleportToTile || definition.canInteractWithTile;
      }
    }
    pick(obj, x, y, z) {
      if (!this.room) {
        return false;
      }
      const template = this.room.getRoomTemplate();
      if (!template) {
        console.error(`no template found for current room. Odd... We're in it.`);
        return false;
      }
      const char = findCharInStringArrayByPos(template.pattern, Math.floor(x), Math.floor(z));
      if (!char) {
        console.warn(`no char found at position ${x},${z} in template ${template.name}`);
        return;
      }
      const items = this.room.getItemsAtPosition({ x: Math.floor(x), y: Math.floor(z) });
      if (!items || items.length === 0) {
        if (RoomTemplatePatternDefinitions[char].canTeleportToTile) {
          this.setPlayerPosition(x, z);
        }
        ;
        return;
      }
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        item.interact(obj, x, y, z);
      }
      return;
    }
    setCurrentRoom(currentRoom) {
      this.room = currentRoom;
    }
    setPlayerPosition(x, y) {
      this.playerPosition = [x, this.playerPosition[1], y];
    }
  };
  GameState = __decorateClass([
    singleton_default()
  ], GameState);

  // js/dungeongen/objects/door.ts
  var Door = class extends GenericItem {
    direction;
    targetRoom;
    constructor(direction2, targetRoom, currentPosition) {
      super();
      super.name = "Door";
      super.type = "item";
      this.direction = direction2;
      this.targetRoom = targetRoom;
      this.position = currentPosition;
    }
    interact(obj, x, y, z) {
      const gameState = instance.resolve(GameState);
      gameState.navigateToRoom(this.targetRoom.x, this.targetRoom.y, this.direction);
    }
  };

  // js/dungeongen/ChestCreator.ts
  var ChestCreator_exports = {};
  __export(ChestCreator_exports, {
    ChestCreator: () => ChestCreator
  });

  // js/classes/items/shield.ts
  var Shield = class extends GenericItem {
    constructor() {
      super();
      super.name = "Shield";
      super.type = "shield";
    }
  };

  // js/classes/items/sword.ts
  var Sword = class extends GenericItem {
    constructor() {
      super();
      super.name = "Sword";
      super.type = "weapon";
    }
    attack() {
      return 5;
    }
    damage() {
      return super.damage();
    }
  };

  // js/dungeongen/loot/lootTableBase.ts
  var LootTable = class {
    lootEntries;
    constructor() {
      this.lootEntries = /* @__PURE__ */ new Map([
        ["entry", [
          //  { item: this.itemCreator.createItem(new Sword()) , weight: 1 },
          { item: new Shield(), weight: 1 }
        ]],
        ["rare", [
          { item: new Sword(), weight: 1 },
          { item: new Sword(), weight: 1 }
        ]]
      ]);
    }
    getItems(type) {
      return this.lootEntries.get(type).map((e) => e.item);
    }
  };
  LootTable = __decorateClass([
    injectable_default()
  ], LootTable);

  // js/dungeongen/objects/chest.ts
  var Chest = class extends GenericItem {
    chestType;
    chestValue;
    maxItems;
    items;
    hasBeenOpened;
    constructor(chestType, chestValue, maxItems, lootTable) {
      super();
      this.chestType = chestType;
      this.chestValue = chestValue;
      this.maxItems = maxItems;
      this.lootTable = lootTable;
      this.hasBeenOpened = false;
    }
    interact(obj, x, y, z) {
      if (!this.hasBeenOpened || this.items == null) {
        this.hasBeenOpened = true;
        this.initializeChest();
      }
      this.items = this.lootTable.getItems("entry");
      console.log(this.items);
    }
    initializeChest() {
    }
  };

  // js/dungeongen/ChestCreator.ts
  var ChestCreator = class {
    constructor(lootTable) {
      this.lootTable = lootTable;
    }
    createChest(position, chestDefinition3) {
      const chestItem = new Chest("small", "common", 3, this.lootTable);
      chestItem.position = position;
      chestItem.name = "Chest";
      return chestItem;
    }
  };
  ChestCreator = __decorateClass([
    singleton_default(),
    __decorateParam(0, inject_default(LootTable))
  ], ChestCreator);

  // js/dungeongen/objects/behaviors/showInventory.ts
  var showInventory_exports = {};
  __export(showInventory_exports, {
    showInventory: () => showInventory
  });

  // js/ui/classes/InternalUIManager.ts
  var InternalUIManager_exports = {};
  __export(InternalUIManager_exports, {
    InternalUIManager: () => InternalUIManager
  });
  var InternalUIManager = class {
    uiManager;
    registerComponent(uiManager) {
      this.uiManager = uiManager;
    }
    open(name, position) {
      if (this.uiManager) {
        this.uiManager.open(name, position);
      }
    }
  };
  InternalUIManager = __decorateClass([
    injectable_default()
  ], InternalUIManager);

  // js/dungeongen/objects/behaviors/showInventory.ts
  var showInventory = {
    name: "Show Inventory",
    initialize: function() {
    },
    interact: function(ret, obj, x, y, z) {
      const internalUIManager = instance.resolve(InternalUIManager);
      internalUIManager.open("Inventory", [x, y, z]);
    }
  };

  // js/dungeongen/roomItemCreator.ts
  var RoomItemCreator = class {
    constructor(chestCreator) {
      this.chestCreator = chestCreator;
    }
    createItems(template, room) {
      let items = [];
      const currentRng = rng.clone().setSeed(room.seed);
      for (let y = 0; y < template.pattern.length; y++) {
        for (let x = 0; x < template.pattern[y].length; x++) {
          if (RoomTemplatePatternDefinitions[template.pattern[y][x]]?.behavior) {
            switch (template.pattern[y][x]) {
              case "N":
              case "S":
              case "E":
              case "W":
                let direction2 = template.pattern[y][x];
                let target = room.getTargetRoom(direction2);
                if (target) {
                  const newLocal = new Door(direction2, target, { x, y });
                  items.push(newLocal);
                }
                break;
              case "!":
                if (!template.chests) {
                  console.error("No chest definition found for room template, but a chest was found in the pattern");
                  break;
                }
                let chest = currentRng.getItem(template.chests);
                let chestItem = this.chestCreator.createChest({ x, y }, chest);
                chestItem.addBehavior(showInventory);
                items.push(chestItem);
                break;
            }
          }
        }
      }
      return items;
    }
  };
  RoomItemCreator = __decorateClass([
    singleton_default(),
    __decorateParam(0, inject_default(ChestCreator))
  ], RoomItemCreator);

  // js/dungeongen/RoomCreator.ts
  var RoomCreator = class {
    constructor(roomItemCreator) {
      this.roomItemCreator = roomItemCreator;
    }
    setUpRoom(room, template) {
      room.initialize(template);
      room.items = this.roomItemCreator.createItems(template, room);
      return true;
    }
  };
  RoomCreator = __decorateClass([
    singleton_default(),
    __decorateParam(0, inject_default(RoomItemCreator))
  ], RoomCreator);

  // js/dungeongen/RoomRenderer.ts
  var RoomRenderer = class {
    /**
     * A reference to the Wonderland Engine
     * @type {WonderlandEngine}
     */
    #engine;
    /**
     * A reference to the parent of all objects in the room.
     * Generated objects will be a child of this object.
     * @type {Object3D}
     */
    #parent;
    /**
     * A reference to the tileset
     * @type {TileSet}
     */
    #tileset;
    /**
     * A reference to the lights objects that can be used in the room
     * @type {Object3D[]}
     */
    #lights;
    /**
     * A reference to the block cache
     * @type {ObjectCache}
     */
    #blockCache;
    roomCreator;
    /**
     * Instantiates a new RoomRenderer
     * @param {WonderlandEngine} engine
     * @param {Object3D} parent
     * @param {Object3D[]} lights
     * @param {TileSet} tileset
     * @param {ObjectCache} blockCache
     */
    constructor(engine, parent, tileset, lights, blockCache) {
      this.roomCreator = instance.resolve(RoomCreator), this.#engine = engine;
      this.#parent = parent;
      this.#tileset = tileset;
      this.#lights = lights;
      this.#blockCache = blockCache;
    }
    /**
     * Renders a room
     * @param {Room} room The room to render
     */
    render(room) {
      if (!room.isInitialized) {
        const possitbleTemplate = roomTemplates.filter((t) => t.type == room.getRoomType());
        let newTemplate = rng.getItem(possitbleTemplate);
        if (!newTemplate) {
          throw new Error(`No template found for room type ${room.getRoomType()}`);
        }
        this.roomCreator.setUpRoom(room, newTemplate);
        room.initialize(newTemplate);
      }
      let template = room.getRoomTemplate();
      let roomLights = [];
      if (!template) {
        throw new Error(`No template found for room type ${room.getRoomType()}`);
      }
      const roomdesign = template.pattern;
      if (!roomdesign) {
        throw new Error(`No room design found for room type ${room.getRoomType()}`);
      }
      for (let y = 0; y < roomdesign.length; y++) {
        for (let x = 0; x < roomdesign[y].length; x++) {
          for (let h = 0; h < template.ceilingHeight[0]; h++) {
            let tile;
            switch (roomdesign[y][x]) {
              case "#":
                tile = this.#tileset.getTileByName("Wall01");
                break;
              case "%":
                if (h == 0) {
                  roomLights.push([x, h, y]);
                }
              case "1":
              case "2":
              case "3":
              case "C":
              case "X":
              case "P":
              case "!":
              case ".":
                if (h == 0) {
                  tile = this.#tileset.getTileByName("Floor01");
                } else if (h == template.ceilingHeight[0] - 1) {
                  tile = this.#tileset.getTileByName("Ceiling01");
                } else {
                  continue;
                }
                break;
              case "N":
                tile = this.#renderFloorOrWall(h, room.doors.north);
                break;
              case "E":
                tile = this.#renderFloorOrWall(h, room.doors.east);
                break;
              case "S":
                tile = this.#renderFloorOrWall(h, room.doors.south);
                break;
              case "W":
                tile = this.#renderFloorOrWall(h, room.doors.west);
                break;
              default:
                continue;
            }
            if (tile) {
              let newObj = this.createTile(x, h, y, tile.object);
              if (!newObj) {
                console.warn(`No object found for tile ${tile.name}`);
                continue;
              }
            }
          }
        }
      }
      this.#addDoors(room, roomdesign);
      this.#setupLights(roomLights, room);
      this.#createInterior(room, roomdesign);
      this.#addCharacters(room, roomdesign);
    }
    #addDoors(room, roomdesign) {
      if (room.doors.north) {
        let door = findCharInStringArray(roomdesign, "N");
        let tile = this.#tileset.getTileByName("Door");
        let newObj = this.createTile(door.x, 0, door.y, tile.object);
        newObj.rotateAxisAngleDegObject([0, 1, 0], 180);
        this.setupDoor(newObj, room.getTargetRoom("N"), "N");
      }
      if (room.doors.south) {
        let door = findCharInStringArray(roomdesign, "S");
        let tile = this.#tileset.getTileByName("Door");
        let newObj = this.createTile(door.x, 0, door.y, tile.object);
        this.setupDoor(newObj, room.getTargetRoom("S"), "S");
      }
      if (room.doors.east) {
        let door = findCharInStringArray(roomdesign, "E");
        let tile = this.#tileset.getTileByName("Door");
        let newObj = this.createTile(door.x, 0, door.y, tile.object);
        newObj.rotateAxisAngleDegObject([0, 1, 0], 90);
        this.setupDoor(newObj, room.getTargetRoom("E"), "E");
      }
      if (room.doors.west) {
        let door = findCharInStringArray(roomdesign, "W");
        let tile = this.#tileset.getTileByName("Door");
        let newObj = this.createTile(door.x, 0, door.y, tile.object);
        newObj.rotateAxisAngleDegObject([0, 1, 0], 270);
        this.setupDoor(newObj, room.getTargetRoom("W"), "W");
      }
    }
    #addCharacters(room, roomdesign) {
      this.#tileset.resetAllCharacters();
      const roomTemplate = room.getRoomTemplate();
      if (!roomTemplate) {
        console.warn("`No room template found for current room");
        return;
      }
      if (!roomTemplate.characters || roomTemplate.characters.length == 0) {
        return;
      }
      let character1Pos = findCharInStringArray(roomdesign, "1");
      if (character1Pos) {
        const characterName = roomTemplate.characters[0];
        const character = this.#tileset.getCharacter(characterName);
        character?.setPositionWorld([character1Pos.x, 0.5, character1Pos.y]);
      }
      let character2Pos = findCharInStringArray(roomdesign, "2");
      if (character2Pos) {
        const characterName = roomTemplate.characters[1];
        const character = this.#tileset.getCharacter(characterName);
        character?.setPositionWorld([character2Pos.x, 0.5, character2Pos.y]);
      }
      let character3Pos = findCharInStringArray(roomdesign, "3");
      if (character3Pos) {
        const characterName = roomTemplate.characters[1];
        const character = this.#tileset.getCharacter(characterName);
        character?.setPositionWorld([character3Pos.x, 0.5, character3Pos.y]);
      }
    }
    /**
     * Setup the scripts for the door, adding a new one if needed.
     * @param {Object3D} newObj the newly created object (the door)
     * @param {*} room
     * @param {DirectionSymbol} direction
     */
    setupDoor(newObj, room, direction2) {
      let oldComp = newObj.getComponent(DoorHandler);
      if (oldComp) {
        oldComp.direction = direction2;
        oldComp.targetRoomX = room.x;
        oldComp.targetRoomY = room.y;
        oldComp.active = true;
      } else
        newObj.addComponent(DoorHandler, {
          direction: direction2,
          targetRoomX: room.x,
          targetRoomY: room.y
        });
    }
    /**
     * Renders a floor tile when there's a doorway or wall depending on the height and if it there's a door or not
     * @param {number} h
     * @param {boolean} hasDoor
     * @returns {Tile}
     */
    #renderFloorOrWall(h, hasDoor) {
      if (h === 0) {
        if (hasDoor) {
          const floorTile = this.#tileset.getTileByName("Floor01");
          if (!floorTile) {
            throw new Error("No floor tile found");
          }
          return floorTile;
        } else {
          const wallTile = this.#tileset.getTileByName("Wall01");
          if (!wallTile) {
            throw new Error("No wall tile found");
          }
          return wallTile;
        }
      } else if (h === 1) {
        if (!hasDoor) {
          const wallTile = this.#tileset.getTileByName("Wall01");
          if (!wallTile) {
            throw new Error("No wall tile found");
          }
          return wallTile;
        } else {
          return;
        }
      } else {
        const wallTile = this.#tileset.getTileByName("Wall01");
        if (!wallTile) {
          throw new Error("No wall tile found");
        }
        return wallTile;
      }
    }
    /**
     * Sets up the lights in a room
     * @param {number[][]} roomLights
     * @param {*} room
     */
    #setupLights(roomLights, room) {
      for (let index = 0; index < this.#lights.length; index++) {
        const light = this.#lights[index];
        light.resetPositionRotation();
        if (roomLights[index]) {
          light.getComponent(LightComponent).active = true;
          light.setPositionWorld([roomLights[index][0], 2, roomLights[index][2]]);
        } else {
          light.getComponent(LightComponent).active = false;
        }
      }
      this.#lights;
    }
    /**
     * Creates the interior of a room
     * @param {Room} room
     * @param {*} roomdesign
     */
    #createInterior(room, roomdesign) {
      const roomRNG = rng.clone().setSeed(1);
      let hasFirepit = false;
      for (let y = 0; y < roomdesign.length; y++) {
        for (let x = 0; x < roomdesign[y].length; x++) {
          let tile;
          let rotation = 0;
          switch (roomdesign[y][x]) {
            case "P":
              const props = room.getRoomTemplate().props;
              if (!props) {
                break;
              }
              const propChances = props.reduce((acc, p) => {
                acc[p.name] = p.chance ?? 1;
                return acc;
              }, {});
              let propname = roomRNG.getWeightedValue(propChances);
              const prop = props.find((p) => p.name === propname);
              tile = this.#tileset.getTileByName(prop.name);
              if (prop.mustBeAgainstWall) {
                if (roomdesign[y - 1][x] !== "#" && roomdesign[y + 1][x] !== "#" && roomdesign[y][x - 1] !== "#" && roomdesign[y][x + 1] !== "#") {
                  continue;
                }
              }
              if (prop.faceWall) {
                const directions = [
                  { x: 0, y: -1, rotation: 180 },
                  { x: 1, y: 0, rotation: 90 },
                  { x: -1, y: 0, rotation: 270 },
                  { x: 0, y: 1, rotation: 0 }
                ];
                let possibleRotations = [];
                for (const dir of directions) {
                  if (roomdesign[y + dir.y][x + dir.x] === "#") {
                    possibleRotations.push(dir);
                  }
                }
                if (possibleRotations.length > 0) {
                  rotation = roomRNG.getItem(possibleRotations).rotation;
                }
              }
              break;
            case "C":
              if (!hasFirepit) {
                tile = this.#tileset.getTileByName("Firepit");
                hasFirepit = true;
              }
              break;
            case "!":
              const chests = room.getRoomTemplate().chests;
              if (!chests) {
                console.warn("No chests in room template, but there's a chest in the room design.");
                break;
              }
              const chestChances = chests.reduce((acc, p) => {
                acc[`Chest_${p.material}_${p.size}`] = p.chance ?? 1;
                return acc;
              }, {});
              let chestname = roomRNG.getWeightedValue(chestChances);
              const chest = chests.find(
                (c) => c.material === chestname.split("_")[1] && c.size === chestname.split("_")[2]
              );
              tile = this.#tileset.getTileByName(chestname);
              rotation = chest.rotation;
              break;
            default:
              continue;
          }
          if (tile) {
            let newObj = this.createTile(x, 0, y, tile.object);
            newObj.rotateAxisAngleDegObject([0, 1, 0], rotation);
          }
        }
      }
    }
    /**
     *
     * @param {*} x
     * @param {*} y
     * @param {*} z
     * @param {*} tile
     * @returns Object3D
     */
    createTile(x, y, z, tile) {
      let blockObj = tile;
      let obj = cloneObject(this.#engine, blockObj, this.#blockCache);
      if (!obj) {
        throw new Error("Cloning object failed");
      }
      obj.resetPositionRotation();
      obj.setPositionWorld([x, y, z]);
      return obj;
    }
  };

  // js/dungeongen/utils/directionHelpers.ts
  var directionHelpers_exports = {};
  __export(directionHelpers_exports, {
    getInvertedDirection: () => getInvertedDirection
  });
  function getInvertedDirection(direction2) {
    switch (direction2) {
      case "N":
        return "S";
      case "S":
        return "N";
      case "E":
        return "W";
      case "W":
        return "E";
    }
  }

  // js/components/level-generator.ts
  var size = 9;
  var LevelGenerator = class extends Component {
    fadeScreenObject;
    levelRoot;
    lights;
    levelBlocks;
    enemies;
    characters;
    /**
     * The component that is used to fade the screen to black and back.
     */
    fadeScreenComponent;
    generator;
    levelParent;
    tileset;
    patternSet;
    roomRenderer;
    blockCache;
    gameState;
    globalObjectCache;
    /**
     * overrides the init method of the component
     */
    init() {
      this.gameState = instance.resolve(GameState);
      this.generator = new MazeGenerator(size, size);
    }
    /**
     * overrides the start method of the component
     */
    start() {
      const fsc = this.fadeScreenObject.getComponent(FadeScreen);
      if (!fsc) {
        throw new Error("No FadeScreen component found on fadeScreenObject");
      }
      this.fadeScreenComponent = fsc;
    }
    /**
     * Generates a level
     * @param {Number} level The level to generate
     * @returns {any}
     */
    generate(level = 0, parent = null) {
      this.levelParent = parent || this.levelRoot;
      this.tileset = new TileSet(
        this.levelBlocks.children,
        this.enemies.children,
        this.characters.children
      );
      this.patternSet = new PatternSet();
      this.generator.generate();
      this.levelParent.children.length = 0;
      if (!this.globalObjectCache) {
        this.globalObjectCache = new ObjectCache(
          this.engine,
          "blocks",
          2400,
          this.levelParent,
          24e3
        );
      } else {
        this.globalObjectCache.reset();
      }
      this.roomRenderer = new RoomRenderer(
        this.engine,
        this.levelParent,
        this.tileset,
        this.lights.children,
        this.globalObjectCache
      );
      this.blockCache = this.globalObjectCache;
      this.gameState.currentRoomSubject.subscribe((r) => {
        const currentRoom = this.generator.getRoom(r[0], r[1]);
        this.fadeScreenComponent.FadeOutCompleted.once(() => {
          this.blockCache.reset();
          this.roomRenderer.render(currentRoom);
          if (this.gameState.roomPreviousExitDirection) {
            let enterDirection = getInvertedDirection(
              this.gameState.roomPreviousExitDirection
            );
            let exit = currentRoom.getDoor(enterDirection);
            if (exit) {
              let rotation = 0;
              switch (enterDirection) {
                case "N":
                  exit.y += 1;
                  rotation = 180;
                  break;
                case "S":
                  exit.y -= 1;
                  rotation = 0;
                  break;
                case "E":
                  exit.x -= 1;
                  rotation = 90;
                  break;
                case "W":
                  exit.x += 1;
                  rotation = 270;
                  break;
              }
              this.gameState.playerPosition = [exit.x, 0, exit.y];
              this.gameState.playerRotation = rotation;
            }
          }
        });
        this.fadeScreenComponent.fadeOut();
        this.gameState.setCurrentRoom(currentRoom);
      });
      this.renderDebug(this.generator);
    }
    /**
     * Renders a debug view of the map
     * @param {MazeGenerator} generator
     */
    renderDebug(generator) {
      const canvas2 = document.createElement("canvas");
      canvas2.style.position = "absolute";
      canvas2.style.top = "0px";
      canvas2.style.left = "0px";
      canvas2.style.zIndex = "100";
      canvas2.style.width = "256px";
      canvas2.style.imageRendering = "pixelated";
      canvas2.width = 100;
      canvas2.height = 100;
      const ctx = canvas2.getContext("2d");
      ctx.fillStyle = "black";
      ctx.fillRect(0, 0, canvas2.width, canvas2.height);
      for (let row = 0; row < size; row++) {
        for (let col = 0; col < size; col++) {
          const currentRoom = generator.getRoom(row, col);
          let ps = 5;
          const pattern = this.patternSet.get(currentRoom.toKey());
          for (let gridRow = 0; gridRow < ps; gridRow++) {
            for (let gridColumn = 0; gridColumn < ps; gridColumn++) {
              const newRowPos = row * ps + gridRow - size * ps / 2;
              const newColPos = col * ps + gridColumn - size * ps / 2;
              let tileIndex = pattern[gridRow][gridColumn];
              if (currentRoom.isEntrance) {
                tileIndex = 5;
              }
              if (currentRoom.isExit) {
                tileIndex = 4;
              }
              if (currentRoom.isTreasure && tileIndex == 6) {
                tileIndex = 7;
              }
              let tile = this.tileset.getTile(tileIndex);
              switch (tileIndex) {
                case 5:
                  ctx.fillStyle = "green";
                  break;
                case 4:
                  ctx.fillStyle = "red";
                  break;
                case 6:
                  ctx.fillStyle = "blue";
                  break;
                case 7:
                  ctx.fillStyle = "yellow";
                  break;
                default:
                  ctx.fillStyle = "gray";
                  break;
              }
              if (tileIndex >= 4)
                ctx.fillRect(
                  (newColPos + size * ps / 2) * 2,
                  (newRowPos + size * ps / 2) * 2,
                  2,
                  2
                );
            }
          }
        }
      }
      document.body.appendChild(canvas2);
    }
    createTile(x, y, z, tile) {
      let blockObj = tile;
      let obj = cloneObject(this.engine, blockObj, this.blockCache);
      if (!obj) {
        throw new Error("Could not clone object: " + blockObj.name);
      }
      obj.resetPositionRotation();
      obj.setPositionWorld([x, y, z]);
    }
  };
  __publicField(LevelGenerator, "TypeName", "level-generator");
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "fadeScreenObject", 2);
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "levelRoot", 2);
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "lights", 2);
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "levelBlocks", 2);
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "enemies", 2);
  __decorateClass([
    property.object()
  ], LevelGenerator.prototype, "characters", 2);

  // js/classes/behaviors/iron.ts
  var iron = {
    name: "Iron",
    initialize: function() {
      this.name = `Iron ${this.name}`;
    },
    attack(acc = 0) {
      if (acc > 0) {
        acc += 1;
      }
      return acc;
    },
    protection(acc = 0) {
      if (acc > 0) {
        acc += 1;
      }
      return acc;
    }
  };
  var iron_default = iron;

  // js/components/game.ts
  var _levelGen;
  var Game = class extends Component {
    constructor() {
      super(...arguments);
      __publicField(this, "levelGenObject");
      __publicField(this, "playerObject");
      __privateAdd(this, _levelGen, void 0);
      __publicField(this, "gameState");
    }
    init() {
      this.gameState = instance.resolve(GameState);
      const lg = this.levelGenObject.getComponent(LevelGenerator);
      if (!lg) {
        throw new Error("LevelGenerator not found on levelGenObject");
      }
      __privateSet(this, _levelGen, lg);
      this.engine.onXRSessionStart.add(() => this.gameState.isInVR = true);
      this.engine.onXRSessionEnd.add(() => this.gameState.isInVR = false);
      this.engine.onXRSessionStart.add(() => {
      });
      this.gameState.state = State.Playing;
    }
    start() {
      this.gameState.levelSubject.subscribe(
        (level) => {
          let result = __privateGet(this, _levelGen).generate(level);
          this.gameState.navigateToRoom(0, 0);
        }
      );
      const testSword = new Sword();
      testSword.addBehavior(iron_default);
      console.log(`${testSword.name}:${testSword.attack()}`);
      setTimeout(() => {
        this.gameState.level = 0;
      }, 1e3);
      window.addEventListener("keyup", (e) => {
        let p = this.gameState.currentRoom;
        if (e.code == "Digit1") {
          p[0] += 1;
          this.gameState.roomPreviousExitDirection = "S";
          this.gameState.currentRoom = p;
        }
        if (e.code == "Digit2") {
          p[0] -= 1;
          this.gameState.roomPreviousExitDirection = "N";
          this.gameState.currentRoom = p;
        }
        if (e.code == "Digit3") {
          p[1] += 1;
          this.gameState.roomPreviousExitDirection = "E";
          this.gameState.currentRoom = p;
        }
        if (e.code == "Digit4") {
          p[1] -= 1;
          this.gameState.roomPreviousExitDirection = "W";
          this.gameState.currentRoom = p;
        }
        if (e.code == "Digit5") {
          this.gameState.room?.items?.find((i) => i.name == "Chest")?.interact(this.playerObject, 0, 0, 0);
        }
        ;
      });
    }
    update(delta) {
    }
  };
  _levelGen = new WeakMap();
  __publicField(Game, "TypeName", "game");
  __publicField(Game, "Properties", {
    levelGenObject: Property.object(),
    playerObject: Property.object()
  });
  __decorateClass([
    property.object()
  ], Game.prototype, "levelGenObject", 2);
  __decorateClass([
    property.object()
  ], Game.prototype, "playerObject", 2);

  // js/components/look-at.ts
  var look_at_exports = {};
  __export(look_at_exports, {
    LookAt: () => LookAt
  });
  var LookAt = class extends Component {
    target;
    update(dt) {
      if (this.target) {
        let pos = this.target.getPositionWorld();
        this.object.lookAt([pos[0], 0, pos[2]]);
        this.object.rotateAxisAngleDegObject([0, 1, 0], 180);
      }
    }
  };
  __publicField(LookAt, "TypeName", "look-at");
  __decorateClass([
    property.object()
  ], LookAt.prototype, "target", 2);

  // js/components/pick-target.ts
  var pick_target_exports = {};
  __export(pick_target_exports, {
    PickTarget: () => PickTarget
  });
  var _canTrigger, canTrigger_fn, _pickingAllowed, pickingAllowed_fn, _picked, picked_fn, _hideIndicators, hideIndicators_fn, _showIndicator, showIndicator_fn;
  var PickTarget = class extends Component {
    constructor() {
      super(...arguments);
      /**
       * Whether the picking is active or not
       * @returns {boolean}
       */
      __privateAdd(this, _canTrigger);
      /**
       * Validates whether the object can be picked or not
       * @param {Object3D} obj 
       * @param {Number} x 
       * @param {Number} y 
       * @param {Number} z 
       * @returns {boolean} Boolean indicating whether the object can be picked or not
       */
      __privateAdd(this, _pickingAllowed);
      /**
       * Handles the picking of an object
       * @param {Object3D} obj The object that is picked
       * @param {Number} x 
       * @param {Number} y 
       * @param {Number} z 
       */
      __privateAdd(this, _picked);
      /**
       * Hides the indicators
       */
      __privateAdd(this, _hideIndicators);
      /**
       * Shows the indicator for the object
       * @param {Object3D} obj the targeted object
       * @param {Number} x 
       * @param {Number} y 
       * @param {Number} z 
       */
      __privateAdd(this, _showIndicator);
      __publicField(this, "allowedPickerMeshObject");
      __publicField(this, "notAllowedPickerMeshObject");
      __publicField(this, "floorGroup", 1 << 2);
      __publicField(this, "player");
      __publicField(this, "navControllerObject");
      __publicField(this, "pickingActive", false);
      __publicField(this, "input");
      __publicField(this, "initialized", false);
      __publicField(this, "hitSpot");
      __publicField(this, "hitObject");
      __publicField(this, "indicatorHidden");
      __publicField(this, "gameState");
      __publicField(this, "forceNotAllowed", false);
    }
    init() {
      this.gameState = instance.resolve(GameState);
    }
    start() {
      this.pickingActive = false;
      this.input = this.object.getComponent("input");
      if (!this.input) {
        console.error("No input component found on object with pick-target component");
      }
      __privateMethod(this, _hideIndicators, hideIndicators_fn).call(this);
      this.initialized = true;
    }
    update(dt) {
      let xrInputSource = this.input.xrInputSource;
      if (!this.initialized || !xrInputSource || !xrInputSource.gamepad || !xrInputSource.gamepad.buttons) {
        return;
      }
      const buttonPressed = xrInputSource.gamepad.buttons[0].pressed;
      if (buttonPressed && this.pickingActive === false && __privateMethod(this, _canTrigger, canTrigger_fn).call(this)) {
        this.pickingActive = true;
      }
      if (!buttonPressed && this.pickingActive === true) {
        this.pickingActive = false;
        if (this.hitSpot) {
          const hitPos = this.hitObject.getPositionWorld();
          const x = hitPos[0];
          const y = hitPos[2];
          if (__privateMethod(this, _pickingAllowed, pickingAllowed_fn).call(this, this.hitObject, x, 0, y) && !this.forceNotAllowed) {
            __privateMethod(this, _picked, picked_fn).call(this, this.hitObject, x, 0, y);
          }
          if (!this.indicatorHidden) {
            __privateMethod(this, _hideIndicators, hideIndicators_fn).call(this);
          }
          this.hitSpot = void 0;
        }
      }
      if (this.pickingActive) {
        const objectPosition = this.object.getPositionWorld();
        const objectRotation = this.object.getRotationWorld();
        let origin = vec3_exports.clone(objectPosition);
        let defaultForward = vec3_exports.fromValues(0, 0, -1);
        let forwardDirection = vec3_exports.create();
        vec3_exports.transformQuat(forwardDirection, defaultForward, objectRotation);
        let rayHit = this.engine.scene.rayCast(
          origin,
          forwardDirection,
          1 << this.floorGroup
        );
        if (rayHit.hitCount > 0) {
          if (this.indicatorHidden) {
            this.indicatorHidden = false;
          }
          this.hitSpot = rayHit.locations[0];
          this.hitObject = rayHit.objects[0];
          const hitPos = this.hitObject.getPositionWorld();
          const x = hitPos[0];
          const y = hitPos[2];
          let pos = this.player.getPositionWorld();
          let ppos = vec2_exports.fromValues(Math.round(pos[0]), Math.round(pos[2]));
          if (vec2_exports.distance(ppos, [x, y]) > 1.6) {
            this.forceNotAllowed = true;
          } else {
            this.forceNotAllowed = false;
          }
          __privateMethod(this, _showIndicator, showIndicator_fn).call(this, this.hitObject, x, 0, y, this.forceNotAllowed);
        } else {
          if (!this.indicatorHidden) {
            __privateMethod(this, _hideIndicators, hideIndicators_fn).call(this);
          }
          this.hitSpot = void 0;
          this.hitObject = void 0;
        }
      }
    }
  };
  _canTrigger = new WeakSet();
  canTrigger_fn = function() {
    return true;
  };
  _pickingAllowed = new WeakSet();
  pickingAllowed_fn = function(obj, x, y, z) {
    let tags = obj.getComponent(Tags);
    if (!tags) {
      return false;
    }
    if (this.gameState.state !== State.Playing) {
      if (tags.hasTag("button")) {
        return true;
      }
      return false;
    }
    return this.gameState.canPick(x, y, z);
  };
  _picked = new WeakSet();
  picked_fn = function(obj, x, y, z) {
    return this.gameState.pick(obj, x, y, z);
  };
  _hideIndicators = new WeakSet();
  hideIndicators_fn = function() {
    this.allowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
    this.notAllowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
    this.indicatorHidden = true;
  };
  _showIndicator = new WeakSet();
  showIndicator_fn = function(obj, x, y, z, forceNotAllowed = false) {
    if (forceNotAllowed) {
      this.allowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
      this.notAllowedPickerMeshObject.resetPositionRotation();
      this.notAllowedPickerMeshObject.setPositionWorld([x, 0.01, z]);
      return;
    }
    let tags = obj.getComponent(Tags);
    if (!tags)
      return;
    switch (true) {
      case tags.hasTag("floor"):
        if (__privateMethod(this, _pickingAllowed, pickingAllowed_fn).call(this, obj, x, y, z)) {
          this.notAllowedPickerMeshObject.setPositionWorld([
            1e3,
            -1e3,
            1e3
          ]);
          this.allowedPickerMeshObject.resetPositionRotation();
          this.allowedPickerMeshObject.setPositionWorld([x, 0.01, z]);
        } else {
          this.allowedPickerMeshObject.setPositionWorld([1e3, -1e3, 1e3]);
          this.notAllowedPickerMeshObject.resetPositionRotation();
          this.notAllowedPickerMeshObject.setPositionWorld([x, 0.01, z]);
        }
        break;
      case tags.hasTag("button"):
        break;
      case tags.hasTag("door"):
        break;
    }
  };
  __publicField(PickTarget, "TypeName", "pick-target");
  __decorateClass([
    property.object()
  ], PickTarget.prototype, "allowedPickerMeshObject", 2);
  __decorateClass([
    property.object()
  ], PickTarget.prototype, "notAllowedPickerMeshObject", 2);
  __decorateClass([
    property.int(1 << 2)
  ], PickTarget.prototype, "floorGroup", 2);
  __decorateClass([
    property.object()
  ], PickTarget.prototype, "player", 2);
  __decorateClass([
    property.object()
  ], PickTarget.prototype, "navControllerObject", 2);

  // js/components/player-height2.ts
  var player_height2_exports = {};
  __export(player_height2_exports, {
    PlayerHeight2: () => PlayerHeight2
  });
  var PlayerHeight2 = class extends Component {
    height = 1.75;
    onSessionStartCallback;
    onSessionEndCallback;
    start() {
      this.object.resetPositionRotation();
      this.object.translateLocal([0, this.height, 0]);
      this.onSessionStartCallback = this.onXRSessionStart.bind(this);
      this.onSessionEndCallback = this.onXRSessionEnd.bind(this);
    }
    onActivate() {
      this.engine.onXRSessionStart.add(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.add(this.onSessionEndCallback);
    }
    onDeactivate() {
      this.engine.onXRSessionStart.remove(this.onSessionStartCallback);
      this.engine.onXRSessionEnd.remove(this.onSessionEndCallback);
    }
    onXRSessionStart() {
      if (!["local", "viewer"].includes(this.engine.xr?.currentReferenceSpaceType)) {
        this.object.resetPositionRotation();
      }
    }
    onXRSessionEnd() {
      if (!["local", "viewer"].includes(this.engine.xr?.currentReferenceSpaceType)) {
        this.object.resetPositionRotation();
        this.object.translateLocal([0, this.height, 0]);
      }
    }
  };
  __publicField(PlayerHeight2, "TypeName", "player-height2");
  __decorateClass([
    property.float()
  ], PlayerHeight2.prototype, "height", 2);

  // js/components/teleport.ts
  var teleport_exports = {};
  __export(teleport_exports, {
    SorskootTeleport: () => SorskootTeleport
  });
  var _teleportPlayer, teleportPlayer_fn, _rotatePlayer, rotatePlayer_fn;
  var SorskootTeleport = class extends Component {
    constructor() {
      super(...arguments);
      __privateAdd(this, _teleportPlayer);
      __privateAdd(this, _rotatePlayer);
      __publicField(this, "eyeLeft");
      __publicField(this, "eyeRight");
      __publicField(this, "cam");
      __publicField(this, "camRoot");
      __publicField(this, "_tempVec", new Float32Array(3));
      __publicField(this, "_tempVec0", new Float32Array(3));
      __publicField(this, "gameState");
    }
    init() {
      this.gameState = instance.resolve(GameState);
      this.gameState.playerPositionSubject.subscribe((pos) => {
        __privateMethod(this, _teleportPlayer, teleportPlayer_fn).call(this, pos);
      });
      this.gameState.playerRotationSubject.subscribe((rotation) => {
        __privateMethod(this, _rotatePlayer, rotatePlayer_fn).call(this, rotation);
      });
    }
  };
  _teleportPlayer = new WeakSet();
  teleportPlayer_fn = function(newPosition) {
    const p = this._tempVec;
    const p1 = this._tempVec0;
    if (this.gameState.isInVR) {
      this.eyeLeft.getPositionWorld(p);
      this.eyeRight.getPositionWorld(p1);
      vec3_exports.add(p, p, p1);
      vec3_exports.scale(p, p, 0.5);
    } else {
      this.cam.getPositionWorld(p);
    }
    this.camRoot.getPositionWorld(p1);
    vec3_exports.sub(p, p1, p);
    p[0] += newPosition[0];
    p[1] = newPosition[1];
    p[2] += newPosition[2];
    this.camRoot.setPositionWorld(p);
  };
  _rotatePlayer = new WeakSet();
  rotatePlayer_fn = function(rotationToAdd) {
    this.camRoot.resetRotation();
    this.camRoot.rotateAxisAngleDegObject([0, 1, 0], rotationToAdd);
  };
  __publicField(SorskootTeleport, "TypeName", "sorskoot-teleport");
  __publicField(SorskootTeleport, "Properties", {
    /** Root of the player, the object that will be positioned on teleportation. */
    camRoot: Property.object(),
    /** Non-vr camera for use outside of VR */
    cam: Property.object(),
    /** Left eye for use in VR*/
    eyeLeft: Property.object(),
    /** Right eye for use in VR*/
    eyeRight: Property.object()
  });
  __decorateClass([
    property.object()
  ], SorskootTeleport.prototype, "eyeLeft", 2);
  __decorateClass([
    property.object()
  ], SorskootTeleport.prototype, "eyeRight", 2);
  __decorateClass([
    property.object()
  ], SorskootTeleport.prototype, "cam", 2);
  __decorateClass([
    property.object()
  ], SorskootTeleport.prototype, "camRoot", 2);

  // js/components/turnManager.ts
  var turnManager_exports = {};
  __export(turnManager_exports, {
    TurnManager: () => TurnManager
  });
  var TurnManager = class extends Component {
    turnDuration = 5;
    stepsPerTurn = 5;
    // Number of steps per turn
    timeSinceLastStep = 0;
    stepsTaken = 0;
    isTurnInProgress = false;
    turnCounter = 0;
    update(dt) {
      if (!this.isTurnInProgress) {
        this.isTurnInProgress = true;
        this.stepsTaken = 0;
        this.timeSinceLastStep = 0;
        this.turnCounter++;
        this.newTurn();
      }
      if (this.isTurnInProgress) {
        this.timeSinceLastStep += dt;
        const stepInterval = this.turnDuration / this.stepsPerTurn;
        while (this.timeSinceLastStep >= stepInterval && this.stepsTaken < this.stepsPerTurn) {
          this.stepFunction();
          this.stepsTaken++;
          this.timeSinceLastStep -= stepInterval;
        }
        if (this.stepsTaken == this.stepsPerTurn) {
          this.isTurnInProgress = false;
          this.endTurn();
        }
      }
    }
    stepFunction() {
    }
    newTurn() {
    }
    endTurn() {
    }
  };
  __publicField(TurnManager, "TypeName", "turnManager");
  __decorateClass([
    property.float(5)
  ], TurnManager.prototype, "turnDuration", 2);
  __decorateClass([
    property.int(5)
  ], TurnManager.prototype, "stepsPerTurn", 2);

  // js/compositionRoot/dependencyRegistrar.ts
  var dependencyRegistrar_exports = {};
  __export(dependencyRegistrar_exports, {
    DependencyRegistrar: () => DependencyRegistrar
  });

  // js/dungeongen/loot/ItemCreator.ts
  var ItemCreator = class {
    constructor() {
    }
    createItem(baseItem, behaviors = null) {
      const item = baseItem;
      if (behaviors != null && behaviors.length > 0) {
        for (const behavior of behaviors) {
          item.addBehavior(behavior);
        }
      }
      return item;
    }
  };
  ItemCreator = __decorateClass([
    singleton_default()
  ], ItemCreator);

  // js/compositionRoot/dependencyRegistrar.ts
  var DependencyRegistrar = class {
    static registerDependencies() {
      instance.registerSingleton(GameState, GameState);
      instance.registerSingleton(ChestCreator, ChestCreator);
      instance.registerSingleton(LootTable, LootTable);
      instance.registerSingleton(RoomItemCreator, RoomItemCreator);
      instance.registerSingleton(ItemCreator, ItemCreator);
      instance.registerSingleton(RoomCreator, RoomCreator);
      instance.registerSingleton(InternalUIManager, InternalUIManager);
    }
  };

  // js/dungeongen/components/tileComponent.ts
  var tileComponent_exports = {};
  __export(tileComponent_exports, {
    TileDescriptor: () => TileDescriptor
  });
  var TileDescriptor = class extends Component {
    init() {
    }
    start() {
    }
    update(dt) {
    }
  };
  __publicField(TileDescriptor, "TypeName", "tile-descriptor");
  __publicField(TileDescriptor, "Properties", {
    canRotate: { type: Type.Bool, default: true },
    canMirror: { type: Type.Bool, default: true }
  });

  // js/globals.ts
  var globals_exports = {};
  __export(globals_exports, {
    default: () => globals_default
  });

  // js/utils/soundfx-player.ts
  var SoundfxPlayer = class {
    initialized;
    currentSfxIndex;
    audiopool;
    pannerNodes;
    audioContext;
    sounds;
    constructor() {
      this.initialized = false;
      this.currentSfxIndex = 0;
      this.audiopool = [];
      this.pannerNodes = [];
    }
    initAudio() {
      if (this.audioContext)
        return;
      this.initialized = true;
      this.sounds = [
        new Audio("sfx/click.mp3"),
        new Audio("sfx/movebox.mp3"),
        new Audio("sfx/teleport.mp3"),
        new Audio("sfx/boxstop.mp3")
      ];
      this.audioContext = new AudioContext();
      this.audioContext.listener.upY.value = 1;
      let gain = this.audioContext.createGain();
      gain.connect(this.audioContext.destination);
      for (let i = 0; i < 25; i++) {
        const audio = new Audio();
        this.audiopool.push(audio);
        const element = this.audioContext.createMediaElementSource(audio);
        const pn = new PannerNode(this.audioContext, {
          panningModel: "HRTF",
          distanceModel: "exponential"
        });
        element.connect(pn);
        pn.connect(gain);
        this.pannerNodes.push(pn);
      }
    }
    playSound(audioIndex, pos) {
      if (!this.audioContext)
        return;
      if (!pos || !pos[0] || isNaN(pos[0])) {
        pos = [0, 0, 0];
      }
      this.pannerNodes[this.currentSfxIndex].positionX.value = pos[0];
      this.pannerNodes[this.currentSfxIndex].positionY.value = pos[1];
      this.pannerNodes[this.currentSfxIndex].positionZ.value = pos[2];
      this.audiopool[this.currentSfxIndex].src = this.sounds[audioIndex].src;
      this.audiopool[this.currentSfxIndex].play();
      this.currentSfxIndex = (this.currentSfxIndex + 1) % 25;
    }
  };

  // js/globals.ts
  var GameGlobals = class {
    //gameState: GameState;
    soundFxPlayer;
    //musicPlayer: MusicPlayer;
    // particlePool: null;
    globalObjectCache;
    constructor() {
      this.soundFxPlayer = new SoundfxPlayer();
      this.globalObjectCache = null;
    }
    static get instance() {
      if (GameGlobals._instance === null) {
        GameGlobals._instance = new GameGlobals();
      }
      return GameGlobals._instance;
    }
  };
  __publicField(GameGlobals, "_instance", null);
  GameGlobals = __decorateClass([
    singleton_default()
  ], GameGlobals);
  var globals_default = GameGlobals.instance;

  // js/ui/components/ui-action-close.ts
  var ui_action_close_exports = {};
  __export(ui_action_close_exports, {
    UiActionClose: () => UiActionClose
  });

  // js/ui/components/ui-button.ts
  var ui_button_exports = {};
  __export(ui_button_exports, {
    UiButton: () => UiButton
  });
  var UiButton = class extends Component {
    hoverMaterial;
    buttonMeshObject;
    buttonTargetObject;
    pressed;
    returnPos;
    mesh;
    defaultMaterial;
    target;
    init() {
      this.pressed = new Emitter();
    }
    start() {
      const m = this.buttonMeshObject.getComponent(MeshComponent);
      if (!m) {
        throw new Error("No mesh component found on button mesh object");
      }
      this.mesh = m;
      const material = this.mesh.material;
      if (!material) {
        throw new Error("No material found on button mesh object");
      }
      this.defaultMaterial = material;
      this.buttonMeshObject.getPositionLocal(this.returnPos);
      const target = this.buttonTargetObject.getComponent(CursorTarget);
      if (!target) {
        throw new Error("No cursor target found on button and could not add one");
      }
      this.target = target;
      this.returnPos = this.buttonMeshObject.getPositionLocal();
    }
    onActivate() {
      this.target.onHover.add(this.onHover.bind(this));
      this.target.onUnhover.add(this.onUnhover.bind(this));
      this.target.onDown.add(this.onDown.bind(this));
      this.target.onUp.add(this.onUp.bind(this));
    }
    onDeactivate() {
      this.target.onHover.remove(this.onHover);
      this.target.onUnhover.remove(this.onUnhover);
      this.target.onDown.remove(this.onDown);
      this.target.onUp.remove(this.onUp);
    }
    update(dt) {
    }
    onHover(obj3D_, cursor, eventTypes) {
      this.mesh.material = this.hoverMaterial;
    }
    onUnhover(obj3D_, cursor, eventTypes) {
      this.mesh.material = this.defaultMaterial;
    }
    onDown(obj3D_, cursor, eventTypes) {
      this.buttonMeshObject.translateLocal([0, -0.1, 0]);
    }
    onUp(obj3D_, cursor, eventTypes) {
      this.buttonMeshObject.setPositionLocal(this.returnPos);
      this.pressed.notify();
    }
  };
  __publicField(UiButton, "TypeName", "ui-button");
  __decorateClass([
    property.material()
  ], UiButton.prototype, "hoverMaterial", 2);
  __decorateClass([
    property.object()
  ], UiButton.prototype, "buttonMeshObject", 2);
  __decorateClass([
    property.object()
  ], UiButton.prototype, "buttonTargetObject", 2);

  // js/ui/components/ui-manager.ts
  var ui_manager_exports = {};
  __export(ui_manager_exports, {
    UiManager: () => UiManager
  });
  var UiManager = class extends Component {
    uiCollection;
    uiElements = [];
    currentVisibleUI;
    start() {
      if (!this.uiCollection) {
        throw new Error("No ui collection set");
      }
      for (const child of this.uiCollection.children) {
        child.setPositionWorld([0, -1e4, 0]);
        this.uiElements.push(child);
      }
      const internalUIManager = instance.resolve(InternalUIManager);
      internalUIManager.registerComponent(this);
    }
    open(name, position) {
      const element = this.uiElements.find((element2) => element2.name === name);
      if (!element) {
        throw new Error(`No ui element found with name ${name}`);
      }
      if (this.currentVisibleUI === name) {
        this.closeAll();
      } else {
        this.currentVisibleUI = name;
        element.setPositionWorld(position);
      }
    }
    /**
     * Closes all UI elements, by moving them far away.
     */
    closeAll() {
      for (const uiRootObject of this.uiElements) {
        uiRootObject.setPositionWorld([0, -1e4, 0]);
      }
      this.currentVisibleUI = null;
    }
  };
  __publicField(UiManager, "TypeName", "ui-manager");
  __decorateClass([
    property.object()
  ], UiManager.prototype, "uiCollection", 2);

  // js/ui/components/ui-action-close.ts
  var UiActionClose = class extends Component {
    uiButtonObject;
    uiRootObject;
    uiManagerObject;
    uiButton;
    uiManager;
    start() {
      const but = this.uiButtonObject.getComponent(UiButton);
      if (!but) {
        throw new Error("No button component found on button mesh object");
      }
      this.uiButton = but;
      const uiman = this.uiManagerObject.getComponent(UiManager);
      if (!uiman) {
        throw new Error("No ui manager component found on ui manager object");
      }
      this.uiManager = uiman;
      if (!this.uiRootObject) {
        throw new Error("No ui root object set");
      }
      this.uiButton.pressed.add(() => {
        this.uiManager.closeAll();
      });
    }
  };
  __publicField(UiActionClose, "TypeName", "ui-action-close");
  __decorateClass([
    property.object()
  ], UiActionClose.prototype, "uiButtonObject", 2);
  __decorateClass([
    property.object()
  ], UiActionClose.prototype, "uiRootObject", 2);
  __decorateClass([
    property.object()
  ], UiActionClose.prototype, "uiManagerObject", 2);

  // js/ui/components/ui-component.ts
  var ui_component_exports = {};
  __export(ui_component_exports, {
    UiComponent: () => UiComponent
  });
  var UiComponent = class extends Component {
  };
  __publicField(UiComponent, "TypeName", "ui-component");

  // js/ui/components/ui-panel.ts
  var ui_panel_exports = {};
  __export(ui_panel_exports, {
    UiPanel: () => UiPanel
  });
  var UiPanel = class extends Component {
  };
  __publicField(UiPanel, "TypeName", "ui-panel");

  // cache/js/_editor_index.js
  _registerEditor(dist_exports);
  _registerEditor(dist_exports2);
  _registerEditor(zesty_wonderland_sdk_exports);
  _registerEditor(door_handler_exports);
  _registerEditor(fadeScreen_exports);
  _registerEditor(game_exports);
  _registerEditor(level_generator_exports);
  _registerEditor(look_at_exports);
  _registerEditor(pick_target_exports);
  _registerEditor(player_height2_exports);
  _registerEditor(teleport_exports);
  _registerEditor(turnManager_exports);
  _registerEditor(dependencyRegistrar_exports);
  _registerEditor(ChestCreator_exports);
  _registerEditor(MazeGenerator_exports);
  _registerEditor(PatternSet_exports);
  _registerEditor(RoomCreator_exports);
  _registerEditor(RoomRenderer_exports);
  _registerEditor(tileComponent_exports);
  _registerEditor(showInventory_exports);
  _registerEditor(room_exports);
  _registerEditor(roomItemCreator_exports);
  _registerEditor(roomTemplates_exports);
  _registerEditor(tile_exports);
  _registerEditor(tileset_exports);
  _registerEditor(directionHelpers_exports);
  _registerEditor(extractor_exports);
  _registerEditor(globals_exports);
  _registerEditor(InternalUIManager_exports);
  _registerEditor(ui_action_close_exports);
  _registerEditor(ui_button_exports);
  _registerEditor(ui_component_exports);
  _registerEditor(ui_manager_exports);
  _registerEditor(ui_panel_exports);
})();
/*! Bundled license information:

howler/dist/howler.js:
  (*!
   *  howler.js v2.2.3
   *  howlerjs.com
   *
   *  (c) 2013-2020, James Simpson of GoldFire Studios
   *  goldfirestudios.com
   *
   *  MIT License
   *)
  (*!
   *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.
   *  
   *  howler.js v2.2.3
   *  howlerjs.com
   *
   *  (c) 2013-2020, James Simpson of GoldFire Studios
   *  goldfirestudios.com
   *
   *  MIT License
   *)

reflect-metadata/Reflect.js:
  (*! *****************************************************************************
  Copyright (C) Microsoft. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0
  
  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.
  
  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzL2hvd2xlci9kaXN0L2hvd2xlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvZWFyY3V0L3NyYy9lYXJjdXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2Rpc3QvcHJvcGVydHkuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2FwaS9kaXN0L2RlY29yYXRvcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2FwaS9kaXN0L3V0aWxzL29iamVjdC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2Rpc3QvdXRpbHMvZXZlbnQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2FwaS9kaXN0L3dvbmRlcmxhbmQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2FwaS9kaXN0L3dhc20uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL2ZsaXBib29rLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ac29yc2tvb3Qvd29uZGVybGFuZC1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9wcmVmYWIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL3ByZWZhYi1zdG9yYWdlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ac29yc2tvb3Qvd29uZGVybGFuZC1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9zaG9vdEJhc2UuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vY29tbW9uLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL21hdDMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vbWF0NC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9xdWF0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vdmVjNC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9xdWF0Mi5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS92ZWMyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ac29yc2tvb3Qvd29uZGVybGFuZC1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9zbmFwLXJvdGF0ZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHNvcnNrb290L3dvbmRlcmxhbmQtY29tcG9uZW50cy9kaXN0L2NvbXBvbmVudHMvc25vdy1wYXJ0aWNsZXMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL3RhZ3MuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC91dGlscy9ybmcuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC91dGlscy9PYmplY3RDYWNoZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHNvcnNrb290L3dvbmRlcmxhbmQtY29tcG9uZW50cy9kaXN0L3V0aWxzL3dsVXRpbHMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC91dGlscy9hcnJheUhlbHBlcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC91dGlscy9sZXJwLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ac29yc2tvb3Qvd29uZGVybGFuZC1jb21wb25lbnRzL2Rpc3QvdXRpbHMvcXVldWUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0Bzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHMvZGlzdC91dGlscy9ybmdXaXRoV2VpZ2h0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC84dGh3YWxsLWNhbWVyYS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L3V0aWxzL3dlYnhyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvYW5jaG9yLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvY3Vyc29yLXRhcmdldC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L2hpdC10ZXN0LWxvY2F0aW9uLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvY3Vyc29yLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvZGVidWctb2JqZWN0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvZGV2aWNlLW9yaWVudGF0aW9uLWxvb2suanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC9maW5nZXItY3Vyc29yLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvZml4ZWQtZm92ZWF0aW9uLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvaGFuZC10cmFja2luZy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L2hvd2xlci1hdWRpby1saXN0ZW5lci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L2hvd2xlci1hdWRpby1zb3VyY2UuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC91dGlscy91dGlscy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L2ltYWdlLXRleHR1cmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC9tb3VzZS1sb29rLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvcGxheWVyLWhlaWdodC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L3RhcmdldC1mcmFtZXJhdGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC90ZWxlcG9ydC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L3RyYWlsLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9Ad29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzL2Rpc3QvdHdvLWpvaW50LWlrLXNvbHZlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cy9kaXN0L3ZpZGVvLXRleHR1cmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC92ci1tb2RlLWFjdGl2ZS1zd2l0Y2guanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC9wbGFuZS1kZXRlY3Rpb24uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC92cm0uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B3b25kZXJsYW5kZW5naW5lL2NvbXBvbmVudHMvZGlzdC93YXNkLWNvbnRyb2xzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC91dGlscy9uZXR3b3JraW5nLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9AemVzdHltYXJrZXQvdXRpbHMvZm9ybWF0cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvQHplc3R5bWFya2V0L3V0aWxzL2hlbHBlcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC93b25kZXJsYW5kLXNkay9wYWNrYWdlLmpzb24iLCAiLi4vLi4vbm9kZV9tb2R1bGVzL0B6ZXN0eW1hcmtldC93b25kZXJsYW5kLXNkay9zcmMvaW5kZXguanMiLCAiLi4vLi4vanMvY29tcG9uZW50cy9kb29yLWhhbmRsZXIudHMiLCAiLi4vLi4vanMvY29tcG9uZW50cy9mYWRlU2NyZWVuLnRzIiwgIi4uLy4uL2pzL2NvbXBvbmVudHMvZ2FtZS50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcmVmbGVjdC1tZXRhZGF0YS9SZWZsZWN0LmpzIiwgIi4uLy4uL2pzL2NvbXBvbmVudHMvbGV2ZWwtZ2VuZXJhdG9yLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvdHlwZXMvbGlmZWN5Y2xlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcmVmbGVjdGlvbi1oZWxwZXJzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL2NsYXNzLXByb3ZpZGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL2ZhY3RvcnktcHJvdmlkZXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9sYXp5LWhlbHBlcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9wcm92aWRlcnMvaW5qZWN0aW9uLXRva2VuLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL3Rva2VuLXByb3ZpZGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL3ZhbHVlLXByb3ZpZGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcHJvdmlkZXJzL3Byb3ZpZGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcmVnaXN0cnktYmFzZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L3JlZ2lzdHJ5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvcmVzb2x1dGlvbi1jb250ZXh0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvZXJyb3ItaGVscGVycy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L3R5cGVzL2Rpc3Bvc2FibGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9pbnRlcmNlcHRvcnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9kZXBlbmRlbmN5LWNvbnRhaW5lci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvdHN5cmluZ2UvZGlzdC9lc201L2RlY29yYXRvcnMvaW5qZWN0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvZGVjb3JhdG9ycy9pbmplY3RhYmxlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy90c3lyaW5nZS9kaXN0L2VzbTUvZGVjb3JhdG9ycy9zaW5nbGV0b24uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3RzeXJpbmdlL2Rpc3QvZXNtNS9pbmRleC5qcyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL01hemVHZW5lcmF0b3IudHMiLCAiLi4vLi4vanMvZHVuZ2Vvbmdlbi9yb29tLnRzIiwgIi4uLy4uL2pzL2ZvckZyYW1ld29yay9maW5kQ2hhckluU3RyaW5nQXJyYXkudHMiLCAiLi4vLi4vanMvZHVuZ2Vvbmdlbi9yb29tVGVtcGxhdGVzLnRzIiwgIi4uLy4uL2pzL2R1bmdlb25nZW4vdGlsZXNldC50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL3RpbGUudHMiLCAiLi4vLi4vanMvZHVuZ2Vvbmdlbi9QYXR0ZXJuU2V0LnRzIiwgIi4uLy4uL2pzL2R1bmdlb25nZW4vdXRpbHMvZXh0cmFjdG9yLnRzIiwgIi4uLy4uL2pzL2R1bmdlb25nZW4vUm9vbVJlbmRlcmVyLnRzIiwgIi4uLy4uL2pzL2R1bmdlb25nZW4vUm9vbUNyZWF0b3IudHMiLCAiLi4vLi4vanMvZHVuZ2Vvbmdlbi9yb29tSXRlbUNyZWF0b3IudHMiLCAiLi4vLi4vanMvZHVuZ2Vvbmdlbi9vYmplY3RzL2JlaGF2aW9yQmFzZS50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL29iamVjdHMvR2VuZXJpY0l0ZW0udHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5tanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3IudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9TdWJzY3JpcHRpb24udHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL2NvbmZpZy50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvdXRpbC9ub29wLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9Ob3RpZmljYXRpb25GYWN0b3JpZXMudHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9TdWJzY3JpYmVyLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9zeW1ib2wvb2JzZXJ2YWJsZS50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS50cyIsICIuLi8uLi9ub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvdXRpbC9waXBlLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9PYnNlcnZhYmxlLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLnRzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9TdWJqZWN0LnRzIiwgIi4uLy4uL2pzL2NsYXNzZXMvbGV2ZWxTdGF0ZS50cyIsICIuLi8uLi9qcy9jbGFzc2VzL2dhbWVTdGF0ZS50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL29iamVjdHMvZG9vci50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL0NoZXN0Q3JlYXRvci50cyIsICIuLi8uLi9qcy9jbGFzc2VzL2l0ZW1zL3NoaWVsZC50cyIsICIuLi8uLi9qcy9jbGFzc2VzL2l0ZW1zL3N3b3JkLnRzIiwgIi4uLy4uL2pzL2R1bmdlb25nZW4vbG9vdC9sb290VGFibGVCYXNlLnRzIiwgIi4uLy4uL2pzL2R1bmdlb25nZW4vb2JqZWN0cy9jaGVzdC50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL29iamVjdHMvYmVoYXZpb3JzL3Nob3dJbnZlbnRvcnkudHMiLCAiLi4vLi4vanMvdWkvY2xhc3Nlcy9JbnRlcm5hbFVJTWFuYWdlci50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL3V0aWxzL2RpcmVjdGlvbkhlbHBlcnMudHMiLCAiLi4vLi4vanMvY2xhc3Nlcy9iZWhhdmlvcnMvaXJvbi50cyIsICIuLi8uLi9qcy9jb21wb25lbnRzL2xvb2stYXQudHMiLCAiLi4vLi4vanMvY29tcG9uZW50cy9waWNrLXRhcmdldC50cyIsICIuLi8uLi9qcy9jb21wb25lbnRzL3BsYXllci1oZWlnaHQyLnRzIiwgIi4uLy4uL2pzL2NvbXBvbmVudHMvdGVsZXBvcnQudHMiLCAiLi4vLi4vanMvY29tcG9uZW50cy90dXJuTWFuYWdlci50cyIsICIuLi8uLi9qcy9jb21wb3NpdGlvblJvb3QvZGVwZW5kZW5jeVJlZ2lzdHJhci50cyIsICIuLi8uLi9qcy9kdW5nZW9uZ2VuL2xvb3QvSXRlbUNyZWF0b3IudHMiLCAiLi4vLi4vanMvZHVuZ2Vvbmdlbi9jb21wb25lbnRzL3RpbGVDb21wb25lbnQudHMiLCAiLi4vLi4vanMvZ2xvYmFscy50cyIsICIuLi8uLi9qcy91dGlscy9zb3VuZGZ4LXBsYXllci50cyIsICIuLi8uLi9qcy91aS9jb21wb25lbnRzL3VpLWFjdGlvbi1jbG9zZS50cyIsICIuLi8uLi9qcy91aS9jb21wb25lbnRzL3VpLWJ1dHRvbi50cyIsICIuLi8uLi9qcy91aS9jb21wb25lbnRzL3VpLW1hbmFnZXIudHMiLCAiLi4vLi4vanMvdWkvY29tcG9uZW50cy91aS1jb21wb25lbnQudHMiLCAiLi4vLi4vanMvdWkvY29tcG9uZW50cy91aS1wYW5lbC50cyIsICJfZWRpdG9yX2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKiFcbiAqICBob3dsZXIuanMgdjIuMi4zXG4gKiAgaG93bGVyanMuY29tXG4gKlxuICogIChjKSAyMDEzLTIwMjAsIEphbWVzIFNpbXBzb24gb2YgR29sZEZpcmUgU3R1ZGlvc1xuICogIGdvbGRmaXJlc3R1ZGlvcy5jb21cbiAqXG4gKiAgTUlUIExpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKiBHbG9iYWwgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBnbG9iYWwgY29udHJvbGxlci4gQWxsIGNvbnRhaW5lZCBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGFwcGx5XG4gICAqIHRvIGFsbCBzb3VuZHMgdGhhdCBhcmUgY3VycmVudGx5IHBsYXlpbmcgb3Igd2lsbCBiZSBpbiB0aGUgZnV0dXJlLlxuICAgKi9cbiAgdmFyIEhvd2xlckdsb2JhbCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5pdCgpO1xuICB9O1xuICBIb3dsZXJHbG9iYWwucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIGdsb2JhbCBIb3dsZXIgb2JqZWN0LlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIC8vIENyZWF0ZSBhIGdsb2JhbCBJRCBjb3VudGVyLlxuICAgICAgc2VsZi5fY291bnRlciA9IDEwMDA7XG5cbiAgICAgIC8vIFBvb2wgb2YgdW5sb2NrZWQgSFRNTDUgQXVkaW8gb2JqZWN0cy5cbiAgICAgIHNlbGYuX2h0bWw1QXVkaW9Qb29sID0gW107XG4gICAgICBzZWxmLmh0bWw1UG9vbFNpemUgPSAxMDtcblxuICAgICAgLy8gSW50ZXJuYWwgcHJvcGVydGllcy5cbiAgICAgIHNlbGYuX2NvZGVjcyA9IHt9O1xuICAgICAgc2VsZi5faG93bHMgPSBbXTtcbiAgICAgIHNlbGYuX211dGVkID0gZmFsc2U7XG4gICAgICBzZWxmLl92b2x1bWUgPSAxO1xuICAgICAgc2VsZi5fY2FuUGxheUV2ZW50ID0gJ2NhbnBsYXl0aHJvdWdoJztcbiAgICAgIHNlbGYuX25hdmlnYXRvciA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubmF2aWdhdG9yKSA/IHdpbmRvdy5uYXZpZ2F0b3IgOiBudWxsO1xuXG4gICAgICAvLyBQdWJsaWMgcHJvcGVydGllcy5cbiAgICAgIHNlbGYubWFzdGVyR2FpbiA9IG51bGw7XG4gICAgICBzZWxmLm5vQXVkaW8gPSBmYWxzZTtcbiAgICAgIHNlbGYudXNpbmdXZWJBdWRpbyA9IHRydWU7XG4gICAgICBzZWxmLmF1dG9TdXNwZW5kID0gdHJ1ZTtcbiAgICAgIHNlbGYuY3R4ID0gbnVsbDtcblxuICAgICAgLy8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhlIGF1dG8gYXVkaW8gdW5sb2NrZXIuXG4gICAgICBzZWxmLmF1dG9VbmxvY2sgPSB0cnVlO1xuXG4gICAgICAvLyBTZXR1cCB0aGUgdmFyaW91cyBzdGF0ZSB2YWx1ZXMgZm9yIGdsb2JhbCB0cmFja2luZy5cbiAgICAgIHNlbGYuX3NldHVwKCk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQvc2V0IHRoZSBnbG9iYWwgdm9sdW1lIGZvciBhbGwgc291bmRzLlxuICAgICAqIEBwYXJhbSAge0Zsb2F0fSB2b2wgVm9sdW1lIGZyb20gMC4wIHRvIDEuMC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXIvRmxvYXR9ICAgICBSZXR1cm5zIHNlbGYgb3IgY3VycmVudCB2b2x1bWUuXG4gICAgICovXG4gICAgdm9sdW1lOiBmdW5jdGlvbih2b2wpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG4gICAgICB2b2wgPSBwYXJzZUZsb2F0KHZvbCk7XG5cbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW4gQXVkaW9Db250ZXh0IGNyZWF0ZWQgeWV0LCBydW4gdGhlIHNldHVwLlxuICAgICAgaWYgKCFzZWxmLmN0eCkge1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdm9sID49IDAgJiYgdm9sIDw9IDEpIHtcbiAgICAgICAgc2VsZi5fdm9sdW1lID0gdm9sO1xuXG4gICAgICAgIC8vIERvbid0IHVwZGF0ZSBhbnkgb2YgdGhlIG5vZGVzIGlmIHdlIGFyZSBtdXRlZC5cbiAgICAgICAgaWYgKHNlbGYuX211dGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHVzaW5nIFdlYiBBdWRpbywgd2UganVzdCBuZWVkIHRvIGFkanVzdCB0aGUgbWFzdGVyIGdhaW4uXG4gICAgICAgIGlmIChzZWxmLnVzaW5nV2ViQXVkaW8pIHtcbiAgICAgICAgICBzZWxmLm1hc3RlckdhaW4uZ2Fpbi5zZXRWYWx1ZUF0VGltZSh2b2wsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFuZCBjaGFuZ2Ugdm9sdW1lIGZvciBhbGwgSFRNTDUgYXVkaW8gbm9kZXMuXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9ob3dscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghc2VsZi5faG93bHNbaV0uX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICAvLyBHZXQgYWxsIG9mIHRoZSBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAgICAgICAgdmFyIGlkcyA9IHNlbGYuX2hvd2xzW2ldLl9nZXRTb3VuZElkcygpO1xuXG4gICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHNvdW5kcyBhbmQgY2hhbmdlIHRoZSB2b2x1bWVzLlxuICAgICAgICAgICAgZm9yICh2YXIgaj0wOyBqPGlkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9ob3dsc1tpXS5fc291bmRCeUlkKGlkc1tqXSk7XG5cbiAgICAgICAgICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICAgICAgc291bmQuX25vZGUudm9sdW1lID0gc291bmQuX3ZvbHVtZSAqIHZvbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZi5fdm9sdW1lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgbXV0aW5nIGFuZCB1bm11dGluZyBnbG9iYWxseS5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBtdXRlZCBJcyBtdXRlZCBvciBub3QuXG4gICAgICovXG4gICAgbXV0ZTogZnVuY3Rpb24obXV0ZWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW4gQXVkaW9Db250ZXh0IGNyZWF0ZWQgeWV0LCBydW4gdGhlIHNldHVwLlxuICAgICAgaWYgKCFzZWxmLmN0eCkge1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9tdXRlZCA9IG11dGVkO1xuXG4gICAgICAvLyBXaXRoIFdlYiBBdWRpbywgd2UganVzdCBuZWVkIHRvIG11dGUgdGhlIG1hc3RlciBnYWluLlxuICAgICAgaWYgKHNlbGYudXNpbmdXZWJBdWRpbykge1xuICAgICAgICBzZWxmLm1hc3RlckdhaW4uZ2Fpbi5zZXRWYWx1ZUF0VGltZShtdXRlZCA/IDAgOiBzZWxmLl92b2x1bWUsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBMb29wIHRocm91Z2ggYW5kIG11dGUgYWxsIEhUTUw1IEF1ZGlvIG5vZGVzLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghc2VsZi5faG93bHNbaV0uX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgLy8gR2V0IGFsbCBvZiB0aGUgc291bmRzIGluIHRoaXMgSG93bCBncm91cC5cbiAgICAgICAgICB2YXIgaWRzID0gc2VsZi5faG93bHNbaV0uX2dldFNvdW5kSWRzKCk7XG5cbiAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIHNvdW5kcyBhbmQgbWFyayB0aGUgYXVkaW8gbm9kZSBhcyBtdXRlZC5cbiAgICAgICAgICBmb3IgKHZhciBqPTA7IGo8aWRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9ob3dsc1tpXS5fc291bmRCeUlkKGlkc1tqXSk7XG5cbiAgICAgICAgICAgIGlmIChzb3VuZCAmJiBzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5tdXRlZCA9IChtdXRlZCkgPyB0cnVlIDogc291bmQuX211dGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHN0b3BwaW5nIGFsbCBzb3VuZHMgZ2xvYmFsbHkuXG4gICAgICovXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuXG4gICAgICAvLyBMb29wIHRocm91Z2ggYWxsIEhvd2xzIGFuZCBzdG9wIHRoZW0uXG4gICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5faG93bHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc2VsZi5faG93bHNbaV0uc3RvcCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5sb2FkIGFuZCBkZXN0cm95IGFsbCBjdXJyZW50bHkgbG9hZGVkIEhvd2wgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXJ9XG4gICAgICovXG4gICAgdW5sb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIGZvciAodmFyIGk9c2VsZi5faG93bHMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICBzZWxmLl9ob3dsc1tpXS51bmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IEF1ZGlvQ29udGV4dCB0byBtYWtlIHN1cmUgaXQgaXMgZnVsbHkgcmVzZXQuXG4gICAgICBpZiAoc2VsZi51c2luZ1dlYkF1ZGlvICYmIHNlbGYuY3R4ICYmIHR5cGVvZiBzZWxmLmN0eC5jbG9zZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5jdHguY2xvc2UoKTtcbiAgICAgICAgc2VsZi5jdHggPSBudWxsO1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgZm9yIGNvZGVjIHN1cHBvcnQgb2Ygc3BlY2lmaWMgZXh0ZW5zaW9uLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZXh0IEF1ZGlvIGZpbGUgZXh0ZW50aW9uLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgY29kZWNzOiBmdW5jdGlvbihleHQpIHtcbiAgICAgIHJldHVybiAodGhpcyB8fCBIb3dsZXIpLl9jb2RlY3NbZXh0LnJlcGxhY2UoL154LS8sICcnKV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHVwIHZhcmlvdXMgc3RhdGUgdmFsdWVzIGZvciBnbG9iYWwgdHJhY2tpbmcuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9zZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuXG4gICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgc3VzcGVuZC9yZXN1bWUgc3RhdGUgb2YgdGhlIEF1ZGlvQ29udGV4dC5cbiAgICAgIHNlbGYuc3RhdGUgPSBzZWxmLmN0eCA/IHNlbGYuY3R4LnN0YXRlIHx8ICdzdXNwZW5kZWQnIDogJ3N1c3BlbmRlZCc7XG5cbiAgICAgIC8vIEF1dG9tYXRpY2FsbHkgYmVnaW4gdGhlIDMwLXNlY29uZCBzdXNwZW5kIHByb2Nlc3NcbiAgICAgIHNlbGYuX2F1dG9TdXNwZW5kKCk7XG5cbiAgICAgIC8vIENoZWNrIGlmIGF1ZGlvIGlzIGF2YWlsYWJsZS5cbiAgICAgIGlmICghc2VsZi51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICAgIC8vIE5vIGF1ZGlvIGlzIGF2YWlsYWJsZSBvbiB0aGlzIHN5c3RlbSBpZiBub0F1ZGlvIGlzIHNldCB0byB0cnVlLlxuICAgICAgICBpZiAodHlwZW9mIEF1ZGlvICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgdGVzdCA9IG5ldyBBdWRpbygpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY2FucGxheXRocm91Z2ggZXZlbnQgaXMgYXZhaWxhYmxlLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ZXN0Lm9uY2FucGxheXRocm91Z2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHNlbGYuX2NhblBsYXlFdmVudCA9ICdjYW5wbGF5JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHNlbGYubm9BdWRpbyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYubm9BdWRpbyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGVzdCB0byBtYWtlIHN1cmUgYXVkaW8gaXNuJ3QgZGlzYWJsZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgdGVzdCA9IG5ldyBBdWRpbygpO1xuICAgICAgICBpZiAodGVzdC5tdXRlZCkge1xuICAgICAgICAgIHNlbGYubm9BdWRpbyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIC8vIENoZWNrIGZvciBzdXBwb3J0ZWQgY29kZWNzLlxuICAgICAgaWYgKCFzZWxmLm5vQXVkaW8pIHtcbiAgICAgICAgc2VsZi5fc2V0dXBDb2RlY3MoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGZvciBicm93c2VyIHN1cHBvcnQgZm9yIHZhcmlvdXMgY29kZWNzIGFuZCBjYWNoZSB0aGUgcmVzdWx0cy5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXJ9XG4gICAgICovXG4gICAgX3NldHVwQ29kZWNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG4gICAgICB2YXIgYXVkaW9UZXN0ID0gbnVsbDtcblxuICAgICAgLy8gTXVzdCB3cmFwIGluIGEgdHJ5L2NhdGNoIGJlY2F1c2UgSUUxMSBpbiBzZXJ2ZXIgbW9kZSB0aHJvd3MgYW4gZXJyb3IuXG4gICAgICB0cnkge1xuICAgICAgICBhdWRpb1Rlc3QgPSAodHlwZW9mIEF1ZGlvICE9PSAndW5kZWZpbmVkJykgPyBuZXcgQXVkaW8oKSA6IG51bGw7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIGlmICghYXVkaW9UZXN0IHx8IHR5cGVvZiBhdWRpb1Rlc3QuY2FuUGxheVR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIHZhciBtcGVnVGVzdCA9IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vbXBlZzsnKS5yZXBsYWNlKC9ebm8kLywgJycpO1xuXG4gICAgICAvLyBPcGVyYSB2ZXJzaW9uIDwzMyBoYXMgbWl4ZWQgTVAzIHN1cHBvcnQsIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGFuZCBibG9jayBpdC5cbiAgICAgIHZhciB1YSA9IHNlbGYuX25hdmlnYXRvciA/IHNlbGYuX25hdmlnYXRvci51c2VyQWdlbnQgOiAnJztcbiAgICAgIHZhciBjaGVja09wZXJhID0gdWEubWF0Y2goL09QUlxcLyhbMC02XS4pL2cpO1xuICAgICAgdmFyIGlzT2xkT3BlcmEgPSAoY2hlY2tPcGVyYSAmJiBwYXJzZUludChjaGVja09wZXJhWzBdLnNwbGl0KCcvJylbMV0sIDEwKSA8IDMzKTtcbiAgICAgIHZhciBjaGVja1NhZmFyaSA9IHVhLmluZGV4T2YoJ1NhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTE7XG4gICAgICB2YXIgc2FmYXJpVmVyc2lvbiA9IHVhLm1hdGNoKC9WZXJzaW9uXFwvKC4qPykgLyk7XG4gICAgICB2YXIgaXNPbGRTYWZhcmkgPSAoY2hlY2tTYWZhcmkgJiYgc2FmYXJpVmVyc2lvbiAmJiBwYXJzZUludChzYWZhcmlWZXJzaW9uWzFdLCAxMCkgPCAxNSk7XG5cbiAgICAgIHNlbGYuX2NvZGVjcyA9IHtcbiAgICAgICAgbXAzOiAhISghaXNPbGRPcGVyYSAmJiAobXBlZ1Rlc3QgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9tcDM7JykucmVwbGFjZSgvXm5vJC8sICcnKSkpLFxuICAgICAgICBtcGVnOiAhIW1wZWdUZXN0LFxuICAgICAgICBvcHVzOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJvcHVzXCInKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBvZ2c6ICEhYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9vZ2c7IGNvZGVjcz1cInZvcmJpc1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgb2dhOiAhIWF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vb2dnOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIHdhdjogISEoYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby93YXY7IGNvZGVjcz1cIjFcIicpIHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vd2F2JykpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIGFhYzogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL2FhYzsnKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBjYWY6ICEhYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LWNhZjsnKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICBtNGE6ICEhKGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8veC1tNGE7JykgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9tNGE7JykgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9hYWM7JykpLnJlcGxhY2UoL15ubyQvLCAnJyksXG4gICAgICAgIG00YjogISEoYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LW00YjsnKSB8fCBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL200YjsnKSB8fCBhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL2FhYzsnKSkucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgbXA0OiAhIShhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL3gtbXA0OycpIHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vbXA0OycpIHx8IGF1ZGlvVGVzdC5jYW5QbGF5VHlwZSgnYXVkaW8vYWFjOycpKS5yZXBsYWNlKC9ebm8kLywgJycpLFxuICAgICAgICB3ZWJhOiAhISghaXNPbGRTYWZhcmkgJiYgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby93ZWJtOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLCAnJykpLFxuICAgICAgICB3ZWJtOiAhISghaXNPbGRTYWZhcmkgJiYgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby93ZWJtOyBjb2RlY3M9XCJ2b3JiaXNcIicpLnJlcGxhY2UoL15ubyQvLCAnJykpLFxuICAgICAgICBkb2xieTogISFhdWRpb1Rlc3QuY2FuUGxheVR5cGUoJ2F1ZGlvL21wNDsgY29kZWNzPVwiZWMtM1wiJykucmVwbGFjZSgvXm5vJC8sICcnKSxcbiAgICAgICAgZmxhYzogISEoYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby94LWZsYWM7JykgfHwgYXVkaW9UZXN0LmNhblBsYXlUeXBlKCdhdWRpby9mbGFjOycpKS5yZXBsYWNlKC9ebm8kLywgJycpXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU29tZSBicm93c2Vycy9kZXZpY2VzIHdpbGwgb25seSBhbGxvdyBhdWRpbyB0byBiZSBwbGF5ZWQgYWZ0ZXIgYSB1c2VyIGludGVyYWN0aW9uLlxuICAgICAqIEF0dGVtcHQgdG8gYXV0b21hdGljYWxseSB1bmxvY2sgYXVkaW8gb24gdGhlIGZpcnN0IHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgICogQ29uY2VwdCBmcm9tOiBodHRwOi8vcGF1bGJha2F1cy5jb20vdHV0b3JpYWxzL2h0bWw1L3dlYi1hdWRpby1vbi1pb3MvXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF91bmxvY2tBdWRpbzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMgfHwgSG93bGVyO1xuXG4gICAgICAvLyBPbmx5IHJ1biB0aGlzIGlmIFdlYiBBdWRpbyBpcyBzdXBwb3J0ZWQgYW5kIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gdW5sb2NrZWQuXG4gICAgICBpZiAoc2VsZi5fYXVkaW9VbmxvY2tlZCB8fCAhc2VsZi5jdHgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzZWxmLl9hdWRpb1VubG9ja2VkID0gZmFsc2U7XG4gICAgICBzZWxmLmF1dG9VbmxvY2sgPSBmYWxzZTtcblxuICAgICAgLy8gU29tZSBtb2JpbGUgZGV2aWNlcy9wbGF0Zm9ybXMgaGF2ZSBkaXN0b3J0aW9uIGlzc3VlcyB3aGVuIG9wZW5pbmcvY2xvc2luZyB0YWJzIGFuZC9vciB3ZWIgdmlld3MuXG4gICAgICAvLyBCdWdzIGluIHRoZSBicm93c2VyIChlc3BlY2lhbGx5IE1vYmlsZSBTYWZhcmkpIGNhbiBjYXVzZSB0aGUgc2FtcGxlUmF0ZSB0byBjaGFuZ2UgZnJvbSA0NDEwMCB0byA0ODAwMC5cbiAgICAgIC8vIEJ5IGNhbGxpbmcgSG93bGVyLnVubG9hZCgpLCB3ZSBjcmVhdGUgYSBuZXcgQXVkaW9Db250ZXh0IHdpdGggdGhlIGNvcnJlY3Qgc2FtcGxlUmF0ZS5cbiAgICAgIGlmICghc2VsZi5fbW9iaWxlVW5sb2FkZWQgJiYgc2VsZi5jdHguc2FtcGxlUmF0ZSAhPT0gNDQxMDApIHtcbiAgICAgICAgc2VsZi5fbW9iaWxlVW5sb2FkZWQgPSB0cnVlO1xuICAgICAgICBzZWxmLnVubG9hZCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBTY3JhdGNoIGJ1ZmZlciBmb3IgZW5hYmxpbmcgaU9TIHRvIGRpc3Bvc2Ugb2Ygd2ViIGF1ZGlvIGJ1ZmZlcnMgY29ycmVjdGx5LCBhcyBwZXI6XG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI0MTE5Njg0XG4gICAgICBzZWxmLl9zY3JhdGNoQnVmZmVyID0gc2VsZi5jdHguY3JlYXRlQnVmZmVyKDEsIDEsIDIyMDUwKTtcblxuICAgICAgLy8gQ2FsbCB0aGlzIG1ldGhvZCBvbiB0b3VjaCBzdGFydCB0byBjcmVhdGUgYW5kIHBsYXkgYSBidWZmZXIsXG4gICAgICAvLyB0aGVuIGNoZWNrIGlmIHRoZSBhdWRpbyBhY3R1YWxseSBwbGF5ZWQgdG8gZGV0ZXJtaW5lIGlmXG4gICAgICAvLyBhdWRpbyBoYXMgbm93IGJlZW4gdW5sb2NrZWQgb24gaU9TLCBBbmRyb2lkLCBldGMuXG4gICAgICB2YXIgdW5sb2NrID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyBDcmVhdGUgYSBwb29sIG9mIHVubG9ja2VkIEhUTUw1IEF1ZGlvIG9iamVjdHMgdGhhdCBjYW5cbiAgICAgICAgLy8gYmUgdXNlZCBmb3IgcGxheWluZyBzb3VuZHMgd2l0aG91dCB1c2VyIGludGVyYWN0aW9uLiBIVE1MNVxuICAgICAgICAvLyBBdWRpbyBvYmplY3RzIG11c3QgYmUgaW5kaXZpZHVhbGx5IHVubG9ja2VkLCBhcyBvcHBvc2VkXG4gICAgICAgIC8vIHRvIHRoZSBXZWJBdWRpbyBBUEkgd2hpY2ggb25seSBuZWVkcyBhIHNpbmdsZSBhY3RpdmF0aW9uLlxuICAgICAgICAvLyBUaGlzIG11c3Qgb2NjdXIgYmVmb3JlIFdlYkF1ZGlvIHNldHVwIG9yIHRoZSBzb3VyY2Uub25lbmRlZFxuICAgICAgICAvLyBldmVudCB3aWxsIG5vdCBmaXJlLlxuICAgICAgICB3aGlsZSAoc2VsZi5faHRtbDVBdWRpb1Bvb2wubGVuZ3RoIDwgc2VsZi5odG1sNVBvb2xTaXplKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBhdWRpb05vZGUgPSBuZXcgQXVkaW8oKTtcblxuICAgICAgICAgICAgLy8gTWFyayB0aGlzIEF1ZGlvIG9iamVjdCBhcyB1bmxvY2tlZCB0byBlbnN1cmUgaXQgY2FuIGdldCByZXR1cm5lZFxuICAgICAgICAgICAgLy8gdG8gdGhlIHVubG9ja2VkIHBvb2wgd2hlbiByZWxlYXNlZC5cbiAgICAgICAgICAgIGF1ZGlvTm9kZS5fdW5sb2NrZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBBZGQgdGhlIGF1ZGlvIG5vZGUgdG8gdGhlIHBvb2wuXG4gICAgICAgICAgICBzZWxmLl9yZWxlYXNlSHRtbDVBdWRpbyhhdWRpb05vZGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNlbGYubm9BdWRpbyA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMb29wIHRocm91Z2ggYW55IGFzc2lnbmVkIGF1ZGlvIG5vZGVzIGFuZCB1bmxvY2sgdGhlbS5cbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFzZWxmLl9ob3dsc1tpXS5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAgIC8vIEdldCBhbGwgb2YgdGhlIHNvdW5kcyBpbiB0aGlzIEhvd2wgZ3JvdXAuXG4gICAgICAgICAgICB2YXIgaWRzID0gc2VsZi5faG93bHNbaV0uX2dldFNvdW5kSWRzKCk7XG5cbiAgICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgc291bmRzIGFuZCB1bmxvY2sgdGhlIGF1ZGlvIG5vZGVzLlxuICAgICAgICAgICAgZm9yICh2YXIgaj0wOyBqPGlkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9ob3dsc1tpXS5fc291bmRCeUlkKGlkc1tqXSk7XG5cbiAgICAgICAgICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9ub2RlICYmICFzb3VuZC5fbm9kZS5fdW5sb2NrZWQpIHtcbiAgICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5fdW5sb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmxvYWQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpeCBBbmRyb2lkIGNhbiBub3QgcGxheSBpbiBzdXNwZW5kIHN0YXRlLlxuICAgICAgICBzZWxmLl9hdXRvUmVzdW1lKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuIGVtcHR5IGJ1ZmZlci5cbiAgICAgICAgdmFyIHNvdXJjZSA9IHNlbGYuY3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICBzb3VyY2UuYnVmZmVyID0gc2VsZi5fc2NyYXRjaEJ1ZmZlcjtcbiAgICAgICAgc291cmNlLmNvbm5lY3Qoc2VsZi5jdHguZGVzdGluYXRpb24pO1xuXG4gICAgICAgIC8vIFBsYXkgdGhlIGVtcHR5IGJ1ZmZlci5cbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2Uuc3RhcnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc291cmNlLm5vdGVPbigwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzb3VyY2Uuc3RhcnQoMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxsaW5nIHJlc3VtZSgpIG9uIGEgc3RhY2sgaW5pdGlhdGVkIGJ5IHVzZXIgZ2VzdHVyZSBpcyB3aGF0IGFjdHVhbGx5IHVubG9ja3MgdGhlIGF1ZGlvIG9uIEFuZHJvaWQgQ2hyb21lID49IDU1LlxuICAgICAgICBpZiAodHlwZW9mIHNlbGYuY3R4LnJlc3VtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHNlbGYuY3R4LnJlc3VtZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgYSB0aW1lb3V0IHRvIGNoZWNrIHRoYXQgd2UgYXJlIHVubG9ja2VkIG9uIHRoZSBuZXh0IGV2ZW50IGxvb3AuXG4gICAgICAgIHNvdXJjZS5vbmVuZGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc291cmNlLmRpc2Nvbm5lY3QoMCk7XG5cbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHVubG9ja2VkIHN0YXRlIGFuZCBwcmV2ZW50IHRoaXMgY2hlY2sgZnJvbSBoYXBwZW5pbmcgYWdhaW4uXG4gICAgICAgICAgc2VsZi5fYXVkaW9VbmxvY2tlZCA9IHRydWU7XG5cbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIHRvdWNoIHN0YXJ0IGxpc3RlbmVyLlxuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB1bmxvY2ssIHRydWUpO1xuICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdW5sb2NrLCB0cnVlKTtcbiAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHVubG9jaywgdHJ1ZSk7XG4gICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHVubG9jaywgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBMZXQgYWxsIHNvdW5kcyBrbm93IHRoYXQgYXVkaW8gaGFzIGJlZW4gdW5sb2NrZWQuXG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX2hvd2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzZWxmLl9ob3dsc1tpXS5fZW1pdCgndW5sb2NrJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgLy8gU2V0dXAgYSB0b3VjaCBzdGFydCBsaXN0ZW5lciB0byBhdHRlbXB0IGFuIHVubG9jayBpbi5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB1bmxvY2ssIHRydWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB1bmxvY2ssIHRydWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB1bmxvY2ssIHRydWUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHVubG9jaywgdHJ1ZSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gdW5sb2NrZWQgSFRNTDUgQXVkaW8gb2JqZWN0IGZyb20gdGhlIHBvb2wuIElmIG5vbmUgYXJlIGxlZnQsXG4gICAgICogcmV0dXJuIGEgbmV3IEF1ZGlvIG9iamVjdCBhbmQgdGhyb3cgYSB3YXJuaW5nLlxuICAgICAqIEByZXR1cm4ge0F1ZGlvfSBIVE1MNSBBdWRpbyBvYmplY3QuXG4gICAgICovXG4gICAgX29idGFpbkh0bWw1QXVkaW86IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzIHx8IEhvd2xlcjtcblxuICAgICAgLy8gUmV0dXJuIHRoZSBuZXh0IG9iamVjdCBmcm9tIHRoZSBwb29sIGlmIG9uZSBleGlzdHMuXG4gICAgICBpZiAoc2VsZi5faHRtbDVBdWRpb1Bvb2wubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9odG1sNUF1ZGlvUG9vbC5wb3AoKTtcbiAgICAgIH1cblxuICAgICAgLy8uQ2hlY2sgaWYgdGhlIGF1ZGlvIGlzIGxvY2tlZCBhbmQgdGhyb3cgYSB3YXJuaW5nLlxuICAgICAgdmFyIHRlc3RQbGF5ID0gbmV3IEF1ZGlvKCkucGxheSgpO1xuICAgICAgaWYgKHRlc3RQbGF5ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiAodGVzdFBsYXkgaW5zdGFuY2VvZiBQcm9taXNlIHx8IHR5cGVvZiB0ZXN0UGxheS50aGVuID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0ZXN0UGxheS5jYXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0hUTUw1IEF1ZGlvIHBvb2wgZXhoYXVzdGVkLCByZXR1cm5pbmcgcG90ZW50aWFsbHkgbG9ja2VkIGF1ZGlvIG9iamVjdC4nKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgQXVkaW8oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGFuIGFjdGl2YXRlZCBIVE1MNSBBdWRpbyBvYmplY3QgdG8gdGhlIHBvb2wuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIF9yZWxlYXNlSHRtbDVBdWRpbzogZnVuY3Rpb24oYXVkaW8pIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcyB8fCBIb3dsZXI7XG5cbiAgICAgIC8vIERvbid0IGFkZCBhdWRpbyB0byB0aGUgcG9vbCBpZiB3ZSBkb24ndCBrbm93IGlmIGl0IGhhcyBiZWVuIHVubG9ja2VkLlxuICAgICAgaWYgKGF1ZGlvLl91bmxvY2tlZCkge1xuICAgICAgICBzZWxmLl9odG1sNUF1ZGlvUG9vbC5wdXNoKGF1ZGlvKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgc3VzcGVuZCB0aGUgV2ViIEF1ZGlvIEF1ZGlvQ29udGV4dCBhZnRlciBubyBzb3VuZCBoYXMgcGxheWVkIGZvciAzMCBzZWNvbmRzLlxuICAgICAqIFRoaXMgc2F2ZXMgcHJvY2Vzc2luZy9lbmVyZ3kgYW5kIGZpeGVzIHZhcmlvdXMgYnJvd3Nlci1zcGVjaWZpYyBidWdzIHdpdGggYXVkaW8gZ2V0dGluZyBzdHVjay5cbiAgICAgKiBAcmV0dXJuIHtIb3dsZXJ9XG4gICAgICovXG4gICAgX2F1dG9TdXNwZW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgaWYgKCFzZWxmLmF1dG9TdXNwZW5kIHx8ICFzZWxmLmN0eCB8fCB0eXBlb2Ygc2VsZi5jdHguc3VzcGVuZCA9PT0gJ3VuZGVmaW5lZCcgfHwgIUhvd2xlci51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgYW55IHNvdW5kcyBhcmUgcGxheWluZy5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9ob3dscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2VsZi5faG93bHNbaV0uX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgZm9yICh2YXIgaj0wOyBqPHNlbGYuX2hvd2xzW2ldLl9zb3VuZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICghc2VsZi5faG93bHNbaV0uX3NvdW5kc1tqXS5fcGF1c2VkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZi5fc3VzcGVuZFRpbWVyKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzZWxmLl9zdXNwZW5kVGltZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBzb3VuZCBoYXMgcGxheWVkIGFmdGVyIDMwIHNlY29uZHMsIHN1c3BlbmQgdGhlIGNvbnRleHQuXG4gICAgICBzZWxmLl9zdXNwZW5kVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXNlbGYuYXV0b1N1c3BlbmQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzZWxmLl9zdXNwZW5kVGltZXIgPSBudWxsO1xuICAgICAgICBzZWxmLnN0YXRlID0gJ3N1c3BlbmRpbmcnO1xuXG4gICAgICAgIC8vIEhhbmRsZSB1cGRhdGluZyB0aGUgc3RhdGUgb2YgdGhlIGF1ZGlvIGNvbnRleHQgYWZ0ZXIgc3VzcGVuZGluZy5cbiAgICAgICAgdmFyIGhhbmRsZVN1c3BlbnNpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLnN0YXRlID0gJ3N1c3BlbmRlZCc7XG5cbiAgICAgICAgICBpZiAoc2VsZi5fcmVzdW1lQWZ0ZXJTdXNwZW5kKSB7XG4gICAgICAgICAgICBkZWxldGUgc2VsZi5fcmVzdW1lQWZ0ZXJTdXNwZW5kO1xuICAgICAgICAgICAgc2VsZi5fYXV0b1Jlc3VtZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBFaXRoZXIgdGhlIHN0YXRlIGdldHMgc3VzcGVuZGVkIG9yIGl0IGlzIGludGVycnVwdGVkLlxuICAgICAgICAvLyBFaXRoZXIgd2F5LCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgc3RhdGUgdG8gc3VzcGVuZGVkLlxuICAgICAgICBzZWxmLmN0eC5zdXNwZW5kKCkudGhlbihoYW5kbGVTdXNwZW5zaW9uLCBoYW5kbGVTdXNwZW5zaW9uKTtcbiAgICAgIH0sIDMwMDAwKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgcmVzdW1lIHRoZSBXZWIgQXVkaW8gQXVkaW9Db250ZXh0IHdoZW4gYSBuZXcgc291bmQgaXMgcGxheWVkLlxuICAgICAqIEByZXR1cm4ge0hvd2xlcn1cbiAgICAgKi9cbiAgICBfYXV0b1Jlc3VtZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmICghc2VsZi5jdHggfHwgdHlwZW9mIHNlbGYuY3R4LnJlc3VtZSA9PT0gJ3VuZGVmaW5lZCcgfHwgIUhvd2xlci51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09ICdydW5uaW5nJyAmJiBzZWxmLmN0eC5zdGF0ZSAhPT0gJ2ludGVycnVwdGVkJyAmJiBzZWxmLl9zdXNwZW5kVGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNlbGYuX3N1c3BlbmRUaW1lcik7XG4gICAgICAgIHNlbGYuX3N1c3BlbmRUaW1lciA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuc3RhdGUgPT09ICdzdXNwZW5kZWQnIHx8IHNlbGYuc3RhdGUgPT09ICdydW5uaW5nJyAmJiBzZWxmLmN0eC5zdGF0ZSA9PT0gJ2ludGVycnVwdGVkJykge1xuICAgICAgICBzZWxmLmN0eC5yZXN1bWUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuc3RhdGUgPSAncnVubmluZyc7XG5cbiAgICAgICAgICAvLyBFbWl0IHRvIGFsbCBIb3dscyB0aGF0IHRoZSBhdWRpbyBoYXMgcmVzdW1lZC5cbiAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5faG93bHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNlbGYuX2hvd2xzW2ldLl9lbWl0KCdyZXN1bWUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzZWxmLl9zdXNwZW5kVGltZXIpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5fc3VzcGVuZFRpbWVyKTtcbiAgICAgICAgICBzZWxmLl9zdXNwZW5kVGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuc3RhdGUgPT09ICdzdXNwZW5kaW5nJykge1xuICAgICAgICBzZWxmLl9yZXN1bWVBZnRlclN1c3BlbmQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIH07XG5cbiAgLy8gU2V0dXAgdGhlIGdsb2JhbCBhdWRpbyBjb250cm9sbGVyLlxuICB2YXIgSG93bGVyID0gbmV3IEhvd2xlckdsb2JhbCgpO1xuXG4gIC8qKiBHcm91cCBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gYXVkaW8gZ3JvdXAgY29udHJvbGxlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG8gUGFzc2VkIGluIHByb3BlcnRpZXMgZm9yIHRoaXMgZ3JvdXAuXG4gICAqL1xuICB2YXIgSG93bCA9IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiBubyBzb3VyY2UgaXMgcHJvdmlkZWQuXG4gICAgaWYgKCFvLnNyYyB8fCBvLnNyYy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0FuIGFycmF5IG9mIHNvdXJjZSBmaWxlcyBtdXN0IGJlIHBhc3NlZCB3aXRoIGFueSBuZXcgSG93bC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLmluaXQobyk7XG4gIH07XG4gIEhvd2wucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgYSBuZXcgSG93bCBncm91cCBvYmplY3QuXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvIFBhc3NlZCBpbiBwcm9wZXJ0aWVzIGZvciB0aGlzIGdyb3VwLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24obykge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFuIEF1ZGlvQ29udGV4dCBjcmVhdGVkIHlldCwgcnVuIHRoZSBzZXR1cC5cbiAgICAgIGlmICghSG93bGVyLmN0eCkge1xuICAgICAgICBzZXR1cEF1ZGlvQ29udGV4dCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXR1cCB1c2VyLWRlZmluZWQgZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAgc2VsZi5fYXV0b3BsYXkgPSBvLmF1dG9wbGF5IHx8IGZhbHNlO1xuICAgICAgc2VsZi5fZm9ybWF0ID0gKHR5cGVvZiBvLmZvcm1hdCAhPT0gJ3N0cmluZycpID8gby5mb3JtYXQgOiBbby5mb3JtYXRdO1xuICAgICAgc2VsZi5faHRtbDUgPSBvLmh0bWw1IHx8IGZhbHNlO1xuICAgICAgc2VsZi5fbXV0ZWQgPSBvLm11dGUgfHwgZmFsc2U7XG4gICAgICBzZWxmLl9sb29wID0gby5sb29wIHx8IGZhbHNlO1xuICAgICAgc2VsZi5fcG9vbCA9IG8ucG9vbCB8fCA1O1xuICAgICAgc2VsZi5fcHJlbG9hZCA9ICh0eXBlb2Ygby5wcmVsb2FkID09PSAnYm9vbGVhbicgfHwgby5wcmVsb2FkID09PSAnbWV0YWRhdGEnKSA/IG8ucHJlbG9hZCA6IHRydWU7XG4gICAgICBzZWxmLl9yYXRlID0gby5yYXRlIHx8IDE7XG4gICAgICBzZWxmLl9zcHJpdGUgPSBvLnNwcml0ZSB8fCB7fTtcbiAgICAgIHNlbGYuX3NyYyA9ICh0eXBlb2Ygby5zcmMgIT09ICdzdHJpbmcnKSA/IG8uc3JjIDogW28uc3JjXTtcbiAgICAgIHNlbGYuX3ZvbHVtZSA9IG8udm9sdW1lICE9PSB1bmRlZmluZWQgPyBvLnZvbHVtZSA6IDE7XG4gICAgICBzZWxmLl94aHIgPSB7XG4gICAgICAgIG1ldGhvZDogby54aHIgJiYgby54aHIubWV0aG9kID8gby54aHIubWV0aG9kIDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IG8ueGhyICYmIG8ueGhyLmhlYWRlcnMgPyBvLnhoci5oZWFkZXJzIDogbnVsbCxcbiAgICAgICAgd2l0aENyZWRlbnRpYWxzOiBvLnhociAmJiBvLnhoci53aXRoQ3JlZGVudGlhbHMgPyBvLnhoci53aXRoQ3JlZGVudGlhbHMgOiBmYWxzZSxcbiAgICAgIH07XG5cbiAgICAgIC8vIFNldHVwIGFsbCBvdGhlciBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICBzZWxmLl9kdXJhdGlvbiA9IDA7XG4gICAgICBzZWxmLl9zdGF0ZSA9ICd1bmxvYWRlZCc7XG4gICAgICBzZWxmLl9zb3VuZHMgPSBbXTtcbiAgICAgIHNlbGYuX2VuZFRpbWVycyA9IHt9O1xuICAgICAgc2VsZi5fcXVldWUgPSBbXTtcbiAgICAgIHNlbGYuX3BsYXlMb2NrID0gZmFsc2U7XG5cbiAgICAgIC8vIFNldHVwIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgIHNlbGYuX29uZW5kID0gby5vbmVuZCA/IFt7Zm46IG8ub25lbmR9XSA6IFtdO1xuICAgICAgc2VsZi5fb25mYWRlID0gby5vbmZhZGUgPyBbe2ZuOiBvLm9uZmFkZX1dIDogW107XG4gICAgICBzZWxmLl9vbmxvYWQgPSBvLm9ubG9hZCA/IFt7Zm46IG8ub25sb2FkfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ubG9hZGVycm9yID0gby5vbmxvYWRlcnJvciA/IFt7Zm46IG8ub25sb2FkZXJyb3J9XSA6IFtdO1xuICAgICAgc2VsZi5fb25wbGF5ZXJyb3IgPSBvLm9ucGxheWVycm9yID8gW3tmbjogby5vbnBsYXllcnJvcn1dIDogW107XG4gICAgICBzZWxmLl9vbnBhdXNlID0gby5vbnBhdXNlID8gW3tmbjogby5vbnBhdXNlfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ucGxheSA9IG8ub25wbGF5ID8gW3tmbjogby5vbnBsYXl9XSA6IFtdO1xuICAgICAgc2VsZi5fb25zdG9wID0gby5vbnN0b3AgPyBbe2ZuOiBvLm9uc3RvcH1dIDogW107XG4gICAgICBzZWxmLl9vbm11dGUgPSBvLm9ubXV0ZSA/IFt7Zm46IG8ub25tdXRlfV0gOiBbXTtcbiAgICAgIHNlbGYuX29udm9sdW1lID0gby5vbnZvbHVtZSA/IFt7Zm46IG8ub252b2x1bWV9XSA6IFtdO1xuICAgICAgc2VsZi5fb25yYXRlID0gby5vbnJhdGUgPyBbe2ZuOiBvLm9ucmF0ZX1dIDogW107XG4gICAgICBzZWxmLl9vbnNlZWsgPSBvLm9uc2VlayA/IFt7Zm46IG8ub25zZWVrfV0gOiBbXTtcbiAgICAgIHNlbGYuX29udW5sb2NrID0gby5vbnVubG9jayA/IFt7Zm46IG8ub251bmxvY2t9XSA6IFtdO1xuICAgICAgc2VsZi5fb25yZXN1bWUgPSBbXTtcblxuICAgICAgLy8gV2ViIEF1ZGlvIG9yIEhUTUw1IEF1ZGlvP1xuICAgICAgc2VsZi5fd2ViQXVkaW8gPSBIb3dsZXIudXNpbmdXZWJBdWRpbyAmJiAhc2VsZi5faHRtbDU7XG5cbiAgICAgIC8vIEF1dG9tYXRpY2FsbHkgdHJ5IHRvIGVuYWJsZSBhdWRpby5cbiAgICAgIGlmICh0eXBlb2YgSG93bGVyLmN0eCAhPT0gJ3VuZGVmaW5lZCcgJiYgSG93bGVyLmN0eCAmJiBIb3dsZXIuYXV0b1VubG9jaykge1xuICAgICAgICBIb3dsZXIuX3VubG9ja0F1ZGlvKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhpcyBIb3dsIGdyb3VwIGluIHRoZSBnbG9iYWwgY29udHJvbGxlci5cbiAgICAgIEhvd2xlci5faG93bHMucHVzaChzZWxmKTtcblxuICAgICAgLy8gSWYgdGhleSBzZWxlY3RlZCBhdXRvcGxheSwgYWRkIGEgcGxheSBldmVudCB0byB0aGUgbG9hZCBxdWV1ZS5cbiAgICAgIGlmIChzZWxmLl9hdXRvcGxheSkge1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ3BsYXknLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnBsYXkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBMb2FkIHRoZSBzb3VyY2UgZmlsZSB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cbiAgICAgIGlmIChzZWxmLl9wcmVsb2FkICYmIHNlbGYuX3ByZWxvYWQgIT09ICdub25lJykge1xuICAgICAgICBzZWxmLmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGF1ZGlvIGZpbGUuXG4gICAgICogQHJldHVybiB7SG93bGVyfVxuICAgICAqL1xuICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHVybCA9IG51bGw7XG5cbiAgICAgIC8vIElmIG5vIGF1ZGlvIGlzIGF2YWlsYWJsZSwgcXVpdCBpbW1lZGlhdGVseS5cbiAgICAgIGlmIChIb3dsZXIubm9BdWRpbykge1xuICAgICAgICBzZWxmLl9lbWl0KCdsb2FkZXJyb3InLCBudWxsLCAnTm8gYXVkaW8gc3VwcG9ydC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgb3VyIHNvdXJjZSBpcyBpbiBhbiBhcnJheS5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZi5fc3JjID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZWxmLl9zcmMgPSBbc2VsZi5fc3JjXTtcbiAgICAgIH1cblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBzb3VyY2VzIGFuZCBwaWNrIHRoZSBmaXJzdCBvbmUgdGhhdCBpcyBjb21wYXRpYmxlLlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NyYy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZXh0LCBzdHI7XG5cbiAgICAgICAgaWYgKHNlbGYuX2Zvcm1hdCAmJiBzZWxmLl9mb3JtYXRbaV0pIHtcbiAgICAgICAgICAvLyBJZiBhbiBleHRlbnNpb24gd2FzIHNwZWNpZmllZCwgdXNlIHRoYXQgaW5zdGVhZC5cbiAgICAgICAgICBleHQgPSBzZWxmLl9mb3JtYXRbaV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBzb3VyY2UgaXMgYSBzdHJpbmcuXG4gICAgICAgICAgc3RyID0gc2VsZi5fc3JjW2ldO1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ05vbi1zdHJpbmcgZm91bmQgaW4gc2VsZWN0ZWQgYXVkaW8gc291cmNlcyAtIGlnbm9yaW5nLicpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRXh0cmFjdCB0aGUgZmlsZSBleHRlbnNpb24gZnJvbSB0aGUgVVJMIG9yIGJhc2U2NCBkYXRhIFVSSS5cbiAgICAgICAgICBleHQgPSAvXmRhdGE6YXVkaW9cXC8oW147LF0rKTsvaS5leGVjKHN0cik7XG4gICAgICAgICAgaWYgKCFleHQpIHtcbiAgICAgICAgICAgIGV4dCA9IC9cXC4oW14uXSspJC8uZXhlYyhzdHIuc3BsaXQoJz8nLCAxKVswXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGV4dCkge1xuICAgICAgICAgICAgZXh0ID0gZXh0WzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTG9nIGEgd2FybmluZyBpZiBubyBleHRlbnNpb24gd2FzIGZvdW5kLlxuICAgICAgICBpZiAoIWV4dCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignTm8gZmlsZSBleHRlbnNpb24gd2FzIGZvdW5kLiBDb25zaWRlciB1c2luZyB0aGUgXCJmb3JtYXRcIiBwcm9wZXJ0eSBvciBzcGVjaWZ5IGFuIGV4dGVuc2lvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgZXh0ZW5zaW9uIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgaWYgKGV4dCAmJiBIb3dsZXIuY29kZWNzKGV4dCkpIHtcbiAgICAgICAgICB1cmwgPSBzZWxmLl9zcmNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgc2VsZi5fZW1pdCgnbG9hZGVycm9yJywgbnVsbCwgJ05vIGNvZGVjIHN1cHBvcnQgZm9yIHNlbGVjdGVkIGF1ZGlvIHNvdXJjZXMuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2VsZi5fc3JjID0gdXJsO1xuICAgICAgc2VsZi5fc3RhdGUgPSAnbG9hZGluZyc7XG5cbiAgICAgIC8vIElmIHRoZSBob3N0aW5nIHBhZ2UgaXMgSFRUUFMgYW5kIHRoZSBzb3VyY2UgaXNuJ3QsXG4gICAgICAvLyBkcm9wIGRvd24gdG8gSFRNTDUgQXVkaW8gdG8gYXZvaWQgTWl4ZWQgQ29udGVudCBlcnJvcnMuXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyAmJiB1cmwuc2xpY2UoMCwgNSkgPT09ICdodHRwOicpIHtcbiAgICAgICAgc2VsZi5faHRtbDUgPSB0cnVlO1xuICAgICAgICBzZWxmLl93ZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgc291bmQgb2JqZWN0IGFuZCBhZGQgaXQgdG8gdGhlIHBvb2wuXG4gICAgICBuZXcgU291bmQoc2VsZik7XG5cbiAgICAgIC8vIExvYWQgYW5kIGRlY29kZSB0aGUgYXVkaW8gZGF0YSBmb3IgcGxheWJhY2suXG4gICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgbG9hZEJ1ZmZlcihzZWxmKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBsYXkgYSBzb3VuZCBvciByZXN1bWUgcHJldmlvdXMgcGxheWJhY2suXG4gICAgICogQHBhcmFtICB7U3RyaW5nL051bWJlcn0gc3ByaXRlICAgU3ByaXRlIG5hbWUgZm9yIHNwcml0ZSBwbGF5YmFjayBvciBzb3VuZCBpZCB0byBjb250aW51ZSBwcmV2aW91cy5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpbnRlcm5hbCBJbnRlcm5hbCBVc2U6IHRydWUgcHJldmVudHMgZXZlbnQgZmlyaW5nLlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICAgU291bmQgSUQuXG4gICAgICovXG4gICAgcGxheTogZnVuY3Rpb24oc3ByaXRlLCBpbnRlcm5hbCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGlkID0gbnVsbDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIGlmIGEgc3ByaXRlLCBzb3VuZCBpZCBvciBub3RoaW5nIHdhcyBwYXNzZWRcbiAgICAgIGlmICh0eXBlb2Ygc3ByaXRlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZCA9IHNwcml0ZTtcbiAgICAgICAgc3ByaXRlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwcml0ZSA9PT0gJ3N0cmluZycgJiYgc2VsZi5fc3RhdGUgPT09ICdsb2FkZWQnICYmICFzZWxmLl9zcHJpdGVbc3ByaXRlXSkge1xuICAgICAgICAvLyBJZiB0aGUgcGFzc2VkIHNwcml0ZSBkb2Vzbid0IGV4aXN0LCBkbyBub3RoaW5nLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNwcml0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gVXNlIHRoZSBkZWZhdWx0IHNvdW5kIHNwcml0ZSAocGxheXMgdGhlIGZ1bGwgYXVkaW8gbGVuZ3RoKS5cbiAgICAgICAgc3ByaXRlID0gJ19fZGVmYXVsdCc7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBzaW5nbGUgcGF1c2VkIHNvdW5kIHRoYXQgaXNuJ3QgZW5kZWQuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzLCBwbGF5IHRoYXQgc291bmQuIElmIG5vdCwgY29udGludWUgYXMgdXN1YWwuXG4gICAgICAgIGlmICghc2VsZi5fcGxheUxvY2spIHtcbiAgICAgICAgICB2YXIgbnVtID0gMDtcbiAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5fc291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5fc291bmRzW2ldLl9wYXVzZWQgJiYgIXNlbGYuX3NvdW5kc1tpXS5fZW5kZWQpIHtcbiAgICAgICAgICAgICAgbnVtKys7XG4gICAgICAgICAgICAgIGlkID0gc2VsZi5fc291bmRzW2ldLl9pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobnVtID09PSAxKSB7XG4gICAgICAgICAgICBzcHJpdGUgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCB0aGUgc2VsZWN0ZWQgbm9kZSwgb3IgZ2V0IG9uZSBmcm9tIHRoZSBwb29sLlxuICAgICAgdmFyIHNvdW5kID0gaWQgPyBzZWxmLl9zb3VuZEJ5SWQoaWQpIDogc2VsZi5faW5hY3RpdmVTb3VuZCgpO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgZG9lc24ndCBleGlzdCwgZG8gbm90aGluZy5cbiAgICAgIGlmICghc291bmQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlbGVjdCB0aGUgc3ByaXRlIGRlZmluaXRpb24uXG4gICAgICBpZiAoaWQgJiYgIXNwcml0ZSkge1xuICAgICAgICBzcHJpdGUgPSBzb3VuZC5fc3ByaXRlIHx8ICdfX2RlZmF1bHQnO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgd2UgbXVzdCB3YWl0IHRvIGdldCB0aGUgYXVkaW8ncyBkdXJhdGlvbi5cbiAgICAgIC8vIFdlIGFsc28gbmVlZCB0byB3YWl0IHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCBydW4gaW50byByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgICAgLy8gdGhlIG9yZGVyIG9mIGZ1bmN0aW9uIGNhbGxzLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICAvLyBTZXQgdGhlIHNwcml0ZSB2YWx1ZSBvbiB0aGlzIHNvdW5kLlxuICAgICAgICBzb3VuZC5fc3ByaXRlID0gc3ByaXRlO1xuXG4gICAgICAgIC8vIE1hcmsgdGhpcyBzb3VuZCBhcyBub3QgZW5kZWQgaW4gY2FzZSBhbm90aGVyIHNvdW5kIGlzIHBsYXllZCBiZWZvcmUgdGhpcyBvbmUgbG9hZHMuXG4gICAgICAgIHNvdW5kLl9lbmRlZCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIEFkZCB0aGUgc291bmQgdG8gdGhlIHF1ZXVlIHRvIGJlIHBsYXllZCBvbiBsb2FkLlxuICAgICAgICB2YXIgc291bmRJZCA9IHNvdW5kLl9pZDtcbiAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgZXZlbnQ6ICdwbGF5JyxcbiAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5wbGF5KHNvdW5kSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNvdW5kSWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHBsYXkgdGhlIHNvdW5kIGlmIGFuIGlkIHdhcyBwYXNzZWQgYW5kIGl0IGlzIGFscmVhZHkgcGxheWluZy5cbiAgICAgIGlmIChpZCAmJiAhc291bmQuX3BhdXNlZCkge1xuICAgICAgICAvLyBUcmlnZ2VyIHRoZSBwbGF5IGV2ZW50LCBpbiBvcmRlciB0byBrZWVwIGl0ZXJhdGluZyB0aHJvdWdoIHF1ZXVlLlxuICAgICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgc2VsZi5fbG9hZFF1ZXVlKCdwbGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc291bmQuX2lkO1xuICAgICAgfVxuXG4gICAgICAvLyBNYWtlIHN1cmUgdGhlIEF1ZGlvQ29udGV4dCBpc24ndCBzdXNwZW5kZWQsIGFuZCByZXN1bWUgaXQgaWYgaXQgaXMuXG4gICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgSG93bGVyLl9hdXRvUmVzdW1lKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVybWluZSBob3cgbG9uZyB0byBwbGF5IGZvciBhbmQgd2hlcmUgdG8gc3RhcnQgcGxheWluZy5cbiAgICAgIHZhciBzZWVrID0gTWF0aC5tYXgoMCwgc291bmQuX3NlZWsgPiAwID8gc291bmQuX3NlZWsgOiBzZWxmLl9zcHJpdGVbc3ByaXRlXVswXSAvIDEwMDApO1xuICAgICAgdmFyIGR1cmF0aW9uID0gTWF0aC5tYXgoMCwgKChzZWxmLl9zcHJpdGVbc3ByaXRlXVswXSArIHNlbGYuX3Nwcml0ZVtzcHJpdGVdWzFdKSAvIDEwMDApIC0gc2Vlayk7XG4gICAgICB2YXIgdGltZW91dCA9IChkdXJhdGlvbiAqIDEwMDApIC8gTWF0aC5hYnMoc291bmQuX3JhdGUpO1xuICAgICAgdmFyIHN0YXJ0ID0gc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMF0gLyAxMDAwO1xuICAgICAgdmFyIHN0b3AgPSAoc2VsZi5fc3ByaXRlW3Nwcml0ZV1bMF0gKyBzZWxmLl9zcHJpdGVbc3ByaXRlXVsxXSkgLyAxMDAwO1xuICAgICAgc291bmQuX3Nwcml0ZSA9IHNwcml0ZTtcblxuICAgICAgLy8gTWFyayB0aGUgc291bmQgYXMgZW5kZWQgaW5zdGFudGx5IHNvIHRoYXQgdGhpcyBhc3luYyBwbGF5YmFja1xuICAgICAgLy8gZG9lc24ndCBnZXQgZ3JhYmJlZCBieSBhbm90aGVyIGNhbGwgdG8gcGxheSB3aGlsZSB0aGlzIG9uZSB3YWl0cyB0byBzdGFydC5cbiAgICAgIHNvdW5kLl9lbmRlZCA9IGZhbHNlO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIHBhcmFtZXRlcnMgb2YgdGhlIHNvdW5kLlxuICAgICAgdmFyIHNldFBhcmFtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzb3VuZC5fcGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHNvdW5kLl9zZWVrID0gc2VlaztcbiAgICAgICAgc291bmQuX3N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHNvdW5kLl9zdG9wID0gc3RvcDtcbiAgICAgICAgc291bmQuX2xvb3AgPSAhIShzb3VuZC5fbG9vcCB8fCBzZWxmLl9zcHJpdGVbc3ByaXRlXVsyXSk7XG4gICAgICB9O1xuXG4gICAgICAvLyBFbmQgdGhlIHNvdW5kIGluc3RhbnRseSBpZiBzZWVrIGlzIGF0IHRoZSBlbmQuXG4gICAgICBpZiAoc2VlayA+PSBzdG9wKSB7XG4gICAgICAgIHNlbGYuX2VuZGVkKHNvdW5kKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBCZWdpbiB0aGUgYWN0dWFsIHBsYXliYWNrLlxuICAgICAgdmFyIG5vZGUgPSBzb3VuZC5fbm9kZTtcbiAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAvLyBGaXJlIHRoaXMgd2hlbiB0aGUgc291bmQgaXMgcmVhZHkgdG8gcGxheSB0byBiZWdpbiBXZWIgQXVkaW8gcGxheWJhY2suXG4gICAgICAgIHZhciBwbGF5V2ViQXVkaW8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLl9wbGF5TG9jayA9IGZhbHNlO1xuICAgICAgICAgIHNldFBhcmFtcygpO1xuICAgICAgICAgIHNlbGYuX3JlZnJlc2hCdWZmZXIoc291bmQpO1xuXG4gICAgICAgICAgLy8gU2V0dXAgdGhlIHBsYXliYWNrIHBhcmFtcy5cbiAgICAgICAgICB2YXIgdm9sID0gKHNvdW5kLl9tdXRlZCB8fCBzZWxmLl9tdXRlZCkgPyAwIDogc291bmQuX3ZvbHVtZTtcbiAgICAgICAgICBub2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodm9sLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICBzb3VuZC5fcGxheVN0YXJ0ID0gSG93bGVyLmN0eC5jdXJyZW50VGltZTtcblxuICAgICAgICAgIC8vIFBsYXkgdGhlIHNvdW5kIHVzaW5nIHRoZSBzdXBwb3J0ZWQgbWV0aG9kLlxuICAgICAgICAgIGlmICh0eXBlb2Ygbm9kZS5idWZmZXJTb3VyY2Uuc3RhcnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBzb3VuZC5fbG9vcCA/IG5vZGUuYnVmZmVyU291cmNlLm5vdGVHcmFpbk9uKDAsIHNlZWssIDg2NDAwKSA6IG5vZGUuYnVmZmVyU291cmNlLm5vdGVHcmFpbk9uKDAsIHNlZWssIGR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc291bmQuX2xvb3AgPyBub2RlLmJ1ZmZlclNvdXJjZS5zdGFydCgwLCBzZWVrLCA4NjQwMCkgOiBub2RlLmJ1ZmZlclNvdXJjZS5zdGFydCgwLCBzZWVrLCBkdXJhdGlvbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3RhcnQgYSBuZXcgdGltZXIgaWYgbm9uZSBpcyBwcmVzZW50LlxuICAgICAgICAgIGlmICh0aW1lb3V0ICE9PSBJbmZpbml0eSkge1xuICAgICAgICAgICAgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0gPSBzZXRUaW1lb3V0KHNlbGYuX2VuZGVkLmJpbmQoc2VsZiwgc291bmQpLCB0aW1lb3V0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZWxmLl9lbWl0KCdwbGF5Jywgc291bmQuX2lkKTtcbiAgICAgICAgICAgICAgc2VsZi5fbG9hZFF1ZXVlKCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKEhvd2xlci5zdGF0ZSA9PT0gJ3J1bm5pbmcnICYmIEhvd2xlci5jdHguc3RhdGUgIT09ICdpbnRlcnJ1cHRlZCcpIHtcbiAgICAgICAgICBwbGF5V2ViQXVkaW8oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9wbGF5TG9jayA9IHRydWU7XG5cbiAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgYXVkaW8gY29udGV4dCB0byByZXN1bWUgYmVmb3JlIHBsYXlpbmcuXG4gICAgICAgICAgc2VsZi5vbmNlKCdyZXN1bWUnLCBwbGF5V2ViQXVkaW8pO1xuXG4gICAgICAgICAgLy8gQ2FuY2VsIHRoZSBlbmQgdGltZXIuXG4gICAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihzb3VuZC5faWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGaXJlIHRoaXMgd2hlbiB0aGUgc291bmQgaXMgcmVhZHkgdG8gcGxheSB0byBiZWdpbiBIVE1MNSBBdWRpbyBwbGF5YmFjay5cbiAgICAgICAgdmFyIHBsYXlIdG1sNSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5vZGUuY3VycmVudFRpbWUgPSBzZWVrO1xuICAgICAgICAgIG5vZGUubXV0ZWQgPSBzb3VuZC5fbXV0ZWQgfHwgc2VsZi5fbXV0ZWQgfHwgSG93bGVyLl9tdXRlZCB8fCBub2RlLm11dGVkO1xuICAgICAgICAgIG5vZGUudm9sdW1lID0gc291bmQuX3ZvbHVtZSAqIEhvd2xlci52b2x1bWUoKTtcbiAgICAgICAgICBub2RlLnBsYXliYWNrUmF0ZSA9IHNvdW5kLl9yYXRlO1xuXG4gICAgICAgICAgLy8gU29tZSBicm93c2VycyB3aWxsIHRocm93IGFuIGVycm9yIGlmIHRoaXMgaXMgY2FsbGVkIHdpdGhvdXQgdXNlciBpbnRlcmFjdGlvbi5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHBsYXkgPSBub2RlLnBsYXkoKTtcblxuICAgICAgICAgICAgLy8gU3VwcG9ydCBvbGRlciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgcHJvbWlzZXMsIGFuZCB0aHVzIGRvbid0IGhhdmUgdGhpcyBpc3N1ZS5cbiAgICAgICAgICAgIGlmIChwbGF5ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiAocGxheSBpbnN0YW5jZW9mIFByb21pc2UgfHwgdHlwZW9mIHBsYXkudGhlbiA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgLy8gSW1wbGVtZW50cyBhIGxvY2sgdG8gcHJldmVudCBET01FeGNlcHRpb246IFRoZSBwbGF5KCkgcmVxdWVzdCB3YXMgaW50ZXJydXB0ZWQgYnkgYSBjYWxsIHRvIHBhdXNlKCkuXG4gICAgICAgICAgICAgIHNlbGYuX3BsYXlMb2NrID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAvLyBTZXQgcGFyYW0gdmFsdWVzIGltbWVkaWF0ZWx5LlxuICAgICAgICAgICAgICBzZXRQYXJhbXMoKTtcblxuICAgICAgICAgICAgICAvLyBSZWxlYXNlcyB0aGUgbG9jayBhbmQgZXhlY3V0ZXMgcXVldWVkIGFjdGlvbnMuXG4gICAgICAgICAgICAgIHBsYXlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGYuX3BsYXlMb2NrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBub2RlLl91bmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3BsYXknLCBzb3VuZC5faWQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9hZFF1ZXVlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzZWxmLl9wbGF5TG9jayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheWVycm9yJywgc291bmQuX2lkLCAnUGxheWJhY2sgd2FzIHVuYWJsZSB0byBzdGFydC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGFuIGlzc3VlICcgK1xuICAgICAgICAgICAgICAgICAgICAnb24gbW9iaWxlIGRldmljZXMgYW5kIENocm9tZSB3aGVyZSBwbGF5YmFjayB3YXMgbm90IHdpdGhpbiBhIHVzZXIgaW50ZXJhY3Rpb24uJyk7XG5cbiAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBlbmRlZCBhbmQgcGF1c2VkIHZhbHVlcy5cbiAgICAgICAgICAgICAgICAgIHNvdW5kLl9lbmRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBzb3VuZC5fcGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWludGVybmFsKSB7XG4gICAgICAgICAgICAgIHNlbGYuX3BsYXlMb2NrID0gZmFsc2U7XG4gICAgICAgICAgICAgIHNldFBhcmFtcygpO1xuICAgICAgICAgICAgICBzZWxmLl9lbWl0KCdwbGF5Jywgc291bmQuX2lkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2V0dGluZyByYXRlIGJlZm9yZSBwbGF5aW5nIHdvbid0IHdvcmsgaW4gSUUsIHNvIHdlIHNldCBpdCBhZ2FpbiBoZXJlLlxuICAgICAgICAgICAgbm9kZS5wbGF5YmFja1JhdGUgPSBzb3VuZC5fcmF0ZTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIG5vZGUgaXMgc3RpbGwgcGF1c2VkLCB0aGVuIHdlIGNhbiBhc3N1bWUgdGhlcmUgd2FzIGEgcGxheWJhY2sgaXNzdWUuXG4gICAgICAgICAgICBpZiAobm9kZS5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgc2VsZi5fZW1pdCgncGxheWVycm9yJywgc291bmQuX2lkLCAnUGxheWJhY2sgd2FzIHVuYWJsZSB0byBzdGFydC4gVGhpcyBpcyBtb3N0IGNvbW1vbmx5IGFuIGlzc3VlICcgK1xuICAgICAgICAgICAgICAgICdvbiBtb2JpbGUgZGV2aWNlcyBhbmQgQ2hyb21lIHdoZXJlIHBsYXliYWNrIHdhcyBub3Qgd2l0aGluIGEgdXNlciBpbnRlcmFjdGlvbi4nKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXR1cCB0aGUgZW5kIHRpbWVyIG9uIHNwcml0ZXMgb3IgbGlzdGVuIGZvciB0aGUgZW5kZWQgZXZlbnQuXG4gICAgICAgICAgICBpZiAoc3ByaXRlICE9PSAnX19kZWZhdWx0JyB8fCBzb3VuZC5fbG9vcCkge1xuICAgICAgICAgICAgICBzZWxmLl9lbmRUaW1lcnNbc291bmQuX2lkXSA9IHNldFRpbWVvdXQoc2VsZi5fZW5kZWQuYmluZChzZWxmLCBzb3VuZCksIHRpbWVvdXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvLyBGaXJlIGVuZGVkIG9uIHRoaXMgYXVkaW8gbm9kZS5cbiAgICAgICAgICAgICAgICBzZWxmLl9lbmRlZChzb3VuZCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGlzIGxpc3RlbmVyLlxuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCBzZWxmLl9lbmRUaW1lcnNbc291bmQuX2lkXSwgZmFsc2UpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgc2VsZi5fZW5kVGltZXJzW3NvdW5kLl9pZF0sIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3BsYXllcnJvcicsIHNvdW5kLl9pZCwgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBzdHJlYW1pbmcgYXVkaW8sIG1ha2Ugc3VyZSB0aGUgc3JjIGlzIHNldCBhbmQgbG9hZCBhZ2Fpbi5cbiAgICAgICAgaWYgKG5vZGUuc3JjID09PSAnZGF0YTphdWRpby93YXY7YmFzZTY0LFVrbEdSaWdBQUFCWFFWWkZabTEwSUJJQUFBQUJBQUVBUkt3QUFJaFlBUUFDQUJBQUFBQmtZWFJoQWdBQUFBRUEnKSB7XG4gICAgICAgICAgbm9kZS5zcmMgPSBzZWxmLl9zcmM7XG4gICAgICAgICAgbm9kZS5sb2FkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQbGF5IGltbWVkaWF0ZWx5IGlmIHJlYWR5LCBvciB3YWl0IGZvciB0aGUgJ2NhbnBsYXl0aHJvdWdoJ2UgdmVudC5cbiAgICAgICAgdmFyIGxvYWRlZE5vUmVhZHlTdGF0ZSA9ICh3aW5kb3cgJiYgd2luZG93LmVqZWN0YSkgfHwgKCFub2RlLnJlYWR5U3RhdGUgJiYgSG93bGVyLl9uYXZpZ2F0b3IuaXNDb2Nvb25KUyk7XG4gICAgICAgIGlmIChub2RlLnJlYWR5U3RhdGUgPj0gMyB8fCBsb2FkZWROb1JlYWR5U3RhdGUpIHtcbiAgICAgICAgICBwbGF5SHRtbDUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLl9wbGF5TG9jayA9IHRydWU7XG4gICAgICAgICAgc2VsZi5fc3RhdGUgPSAnbG9hZGluZyc7XG5cbiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0YXRlID0gJ2xvYWRlZCc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEJlZ2luIHBsYXliYWNrLlxuICAgICAgICAgICAgcGxheUh0bWw1KCk7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG5cbiAgICAgICAgICAvLyBDYW5jZWwgdGhlIGVuZCB0aW1lci5cbiAgICAgICAgICBzZWxmLl9jbGVhclRpbWVyKHNvdW5kLl9pZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNvdW5kLl9pZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGF1c2UgcGxheWJhY2sgYW5kIHNhdmUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIFRoZSBzb3VuZCBJRCAoZW1wdHkgdG8gcGF1c2UgYWxsIGluIGdyb3VwKS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIHBhdXNlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCBvciBhIHBsYXkoKSBwcm9taXNlIGlzIHBlbmRpbmcsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBwYXVzZSB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnIHx8IHNlbGYuX3BsYXlMb2NrKSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAncGF1c2UnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnBhdXNlKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBpZCBpcyBwYXNzZWQsIGdldCBhbGwgSUQncyB0byBiZSBwYXVzZWQuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBlbmQgdGltZXIuXG4gICAgICAgIHNlbGYuX2NsZWFyVGltZXIoaWRzW2ldKTtcblxuICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICBpZiAoc291bmQgJiYgIXNvdW5kLl9wYXVzZWQpIHtcbiAgICAgICAgICAvLyBSZXNldCB0aGUgc2VlayBwb3NpdGlvbi5cbiAgICAgICAgICBzb3VuZC5fc2VlayA9IHNlbGYuc2VlayhpZHNbaV0pO1xuICAgICAgICAgIHNvdW5kLl9yYXRlU2VlayA9IDA7XG4gICAgICAgICAgc291bmQuX3BhdXNlZCA9IHRydWU7XG5cbiAgICAgICAgICAvLyBTdG9wIGN1cnJlbnRseSBydW5uaW5nIGZhZGVzLlxuICAgICAgICAgIHNlbGYuX3N0b3BGYWRlKGlkc1tpXSk7XG5cbiAgICAgICAgICBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHNvdW5kIGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAgICAgICAgICAgIGlmICghc291bmQuX25vZGUuYnVmZmVyU291cmNlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5zdG9wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5ub3RlT2ZmKDApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5zdG9wKDApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICAgICAgICAgIHNlbGYuX2NsZWFuQnVmZmVyKHNvdW5kLl9ub2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTmFOKHNvdW5kLl9ub2RlLmR1cmF0aW9uKSB8fCBzb3VuZC5fbm9kZS5kdXJhdGlvbiA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlIHRoZSBwYXVzZSBldmVudCwgdW5sZXNzIGB0cnVlYCBpcyBwYXNzZWQgYXMgdGhlIDJuZCBhcmd1bWVudC5cbiAgICAgICAgaWYgKCFhcmd1bWVudHNbMV0pIHtcbiAgICAgICAgICBzZWxmLl9lbWl0KCdwYXVzZScsIHNvdW5kID8gc291bmQuX2lkIDogbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0b3AgcGxheWJhY2sgYW5kIHJlc2V0IHRvIHN0YXJ0LlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIElEIChlbXB0eSB0byBzdG9wIGFsbCBpbiBncm91cCkuXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gaW50ZXJuYWwgSW50ZXJuYWwgVXNlOiB0cnVlIHByZXZlbnRzIGV2ZW50IGZpcmluZy5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIHN0b3A6IGZ1bmN0aW9uKGlkLCBpbnRlcm5hbCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIHN0b3Agd2hlbiBjYXBhYmxlLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJyB8fCBzZWxmLl9wbGF5TG9jaykge1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ3N0b3AnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLnN0b3AoaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGlkIGlzIHBhc3NlZCwgZ2V0IGFsbCBJRCdzIHRvIGJlIHN0b3BwZWQuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBlbmQgdGltZXIuXG4gICAgICAgIHNlbGYuX2NsZWFyVGltZXIoaWRzW2ldKTtcblxuICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICAvLyBSZXNldCB0aGUgc2VlayBwb3NpdGlvbi5cbiAgICAgICAgICBzb3VuZC5fc2VlayA9IHNvdW5kLl9zdGFydCB8fCAwO1xuICAgICAgICAgIHNvdW5kLl9yYXRlU2VlayA9IDA7XG4gICAgICAgICAgc291bmQuX3BhdXNlZCA9IHRydWU7XG4gICAgICAgICAgc291bmQuX2VuZGVkID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIFN0b3AgY3VycmVudGx5IHJ1bm5pbmcgZmFkZXMuXG4gICAgICAgICAgc2VsZi5fc3RvcEZhZGUoaWRzW2ldKTtcblxuICAgICAgICAgIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc291bmQncyBBdWRpb0J1ZmZlclNvdXJjZU5vZGUgaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICAgICAgaWYgKHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291bmQuX25vZGUuYnVmZmVyU291cmNlLnN0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2Uubm90ZU9mZigwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLnN0b3AoMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICAgICAgICAgICAgc2VsZi5fY2xlYW5CdWZmZXIoc291bmQuX25vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc05hTihzb3VuZC5fbm9kZS5kdXJhdGlvbikgfHwgc291bmQuX25vZGUuZHVyYXRpb24gPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmN1cnJlbnRUaW1lID0gc291bmQuX3N0YXJ0IHx8IDA7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLnBhdXNlKCk7XG5cbiAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGxpdmUgc3RyZWFtLCBzdG9wIGRvd25sb2FkIG9uY2UgdGhlIGF1ZGlvIGlzIHN0b3BwZWQuXG4gICAgICAgICAgICAgIGlmIChzb3VuZC5fbm9kZS5kdXJhdGlvbiA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9jbGVhclNvdW5kKHNvdW5kLl9ub2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghaW50ZXJuYWwpIHtcbiAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3N0b3AnLCBzb3VuZC5faWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXV0ZS91bm11dGUgYSBzaW5nbGUgc291bmQgb3IgYWxsIHNvdW5kcyBpbiB0aGlzIEhvd2wgZ3JvdXAuXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gbXV0ZWQgU2V0IHRvIHRydWUgdG8gbXV0ZSBhbmQgZmFsc2UgdG8gdW5tdXRlLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgICAgVGhlIHNvdW5kIElEIHRvIHVwZGF0ZSAob21pdCB0byBtdXRlL3VubXV0ZSBhbGwpLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgbXV0ZTogZnVuY3Rpb24obXV0ZWQsIGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gbXV0ZSB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnfHwgc2VsZi5fcGxheUxvY2spIHtcbiAgICAgICAgc2VsZi5fcXVldWUucHVzaCh7XG4gICAgICAgICAgZXZlbnQ6ICdtdXRlJyxcbiAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5tdXRlKG11dGVkLCBpZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYXBwbHlpbmcgbXV0ZS91bm11dGUgdG8gYWxsIHNvdW5kcywgdXBkYXRlIHRoZSBncm91cCdzIHZhbHVlLlxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtdXRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgc2VsZi5fbXV0ZWQgPSBtdXRlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5fbXV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gaWQgaXMgcGFzc2VkLCBnZXQgYWxsIElEJ3MgdG8gYmUgbXV0ZWQuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEdldCB0aGUgc291bmQuXG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICAgIHNvdW5kLl9tdXRlZCA9IG11dGVkO1xuXG4gICAgICAgICAgLy8gQ2FuY2VsIGFjdGl2ZSBmYWRlIGFuZCBzZXQgdGhlIHZvbHVtZSB0byB0aGUgZW5kIHZhbHVlLlxuICAgICAgICAgIGlmIChzb3VuZC5faW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHNlbGYuX3N0b3BGYWRlKHNvdW5kLl9pZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlKSB7XG4gICAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKG11dGVkID8gMCA6IHNvdW5kLl92b2x1bWUsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLm11dGVkID0gSG93bGVyLl9tdXRlZCA/IHRydWUgOiBtdXRlZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLl9lbWl0KCdtdXRlJywgc291bmQuX2lkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0L3NldCB0aGUgdm9sdW1lIG9mIHRoaXMgc291bmQgb3Igb2YgdGhlIEhvd2wgZ3JvdXAuIFRoaXMgbWV0aG9kIGNhbiBvcHRpb25hbGx5IHRha2UgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAgICAgKiAgIHZvbHVtZSgpIC0+IFJldHVybnMgdGhlIGdyb3VwJ3Mgdm9sdW1lIHZhbHVlLlxuICAgICAqICAgdm9sdW1lKGlkKSAtPiBSZXR1cm5zIHRoZSBzb3VuZCBpZCdzIGN1cnJlbnQgdm9sdW1lLlxuICAgICAqICAgdm9sdW1lKHZvbCkgLT4gU2V0cyB0aGUgdm9sdW1lIG9mIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqICAgdm9sdW1lKHZvbCwgaWQpIC0+IFNldHMgdGhlIHZvbHVtZSBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9OdW1iZXJ9IFJldHVybnMgc2VsZiBvciBjdXJyZW50IHZvbHVtZS5cbiAgICAgKi9cbiAgICB2b2x1bWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgdm9sLCBpZDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSB2YWx1ZXMgYmFzZWQgb24gYXJndW1lbnRzLlxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGdyb3Vwcycgdm9sdW1lLlxuICAgICAgICByZXR1cm4gc2VsZi5fdm9sdW1lO1xuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSB8fCBhcmdzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgYXJnc1sxXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhpcyBpcyBhbiBJRCwgYW5kIGlmIG5vdCwgYXNzdW1lIGl0IGlzIGEgbmV3IHZvbHVtZS5cbiAgICAgICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKCk7XG4gICAgICAgIHZhciBpbmRleCA9IGlkcy5pbmRleE9mKGFyZ3NbMF0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1swXSwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZvbCA9IHBhcnNlRmxvYXQoYXJnc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPj0gMikge1xuICAgICAgICB2b2wgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgb3IgcmV0dXJuIHRoZSBjdXJyZW50IHZvbHVtZS5cbiAgICAgIHZhciBzb3VuZDtcbiAgICAgIGlmICh0eXBlb2Ygdm9sICE9PSAndW5kZWZpbmVkJyAmJiB2b2wgPj0gMCAmJiB2b2wgPD0gMSkge1xuICAgICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIGNoYW5nZSB2b2x1bWUgd2hlbiBjYXBhYmxlLlxuICAgICAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnfHwgc2VsZi5fcGxheUxvY2spIHtcbiAgICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50OiAndm9sdW1lJyxcbiAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNlbGYudm9sdW1lLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGdyb3VwIHZvbHVtZS5cbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLl92b2x1bWUgPSB2b2w7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgb25lIG9yIGFsbCB2b2x1bWVzLlxuICAgICAgICBpZCA9IHNlbGYuX2dldFNvdW5kSWRzKGlkKTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgICAgICBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZFtpXSk7XG5cbiAgICAgICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgICAgIHNvdW5kLl92b2x1bWUgPSB2b2w7XG5cbiAgICAgICAgICAgIC8vIFN0b3AgY3VycmVudGx5IHJ1bm5pbmcgZmFkZXMuXG4gICAgICAgICAgICBpZiAoIWFyZ3NbMl0pIHtcbiAgICAgICAgICAgICAgc2VsZi5fc3RvcEZhZGUoaWRbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8gJiYgc291bmQuX25vZGUgJiYgIXNvdW5kLl9tdXRlZCkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKHZvbCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNvdW5kLl9ub2RlICYmICFzb3VuZC5fbXV0ZWQpIHtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUudm9sdW1lID0gdm9sICogSG93bGVyLnZvbHVtZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLl9lbWl0KCd2b2x1bWUnLCBzb3VuZC5faWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc291bmQgPSBpZCA/IHNlbGYuX3NvdW5kQnlJZChpZCkgOiBzZWxmLl9zb3VuZHNbMF07XG4gICAgICAgIHJldHVybiBzb3VuZCA/IHNvdW5kLl92b2x1bWUgOiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmFkZSBhIGN1cnJlbnRseSBwbGF5aW5nIHNvdW5kIGJldHdlZW4gdHdvIHZvbHVtZXMgKGlmIG5vIGlkIGlzIHBhc3NlZCwgYWxsIHNvdW5kcyB3aWxsIGZhZGUpLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gZnJvbSBUaGUgdmFsdWUgdG8gZmFkZSBmcm9tICgwLjAgdG8gMS4wKS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHRvICAgVGhlIHZvbHVtZSB0byBmYWRlIHRvICgwLjAgdG8gMS4wKS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGxlbiAgVGltZSBpbiBtaWxsaXNlY29uZHMgdG8gZmFkZS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkICAgVGhlIHNvdW5kIGlkIChvbWl0IHRvIGZhZGUgYWxsIHNvdW5kcykuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBmYWRlOiBmdW5jdGlvbihmcm9tLCB0bywgbGVuLCBpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIGZhZGUgd2hlbiBjYXBhYmxlLlxuICAgICAgaWYgKHNlbGYuX3N0YXRlICE9PSAnbG9hZGVkJyB8fCBzZWxmLl9wbGF5TG9jaykge1xuICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICBldmVudDogJ2ZhZGUnLFxuICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLmZhZGUoZnJvbSwgdG8sIGxlbiwgaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgdG8vZnJvbS9sZW4gdmFsdWVzIGFyZSBudW1iZXJzLlxuICAgICAgZnJvbSA9IE1hdGgubWluKE1hdGgubWF4KDAsIHBhcnNlRmxvYXQoZnJvbSkpLCAxKTtcbiAgICAgIHRvID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcGFyc2VGbG9hdCh0bykpLCAxKTtcbiAgICAgIGxlbiA9IHBhcnNlRmxvYXQobGVuKTtcblxuICAgICAgLy8gU2V0IHRoZSB2b2x1bWUgdG8gdGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAgc2VsZi52b2x1bWUoZnJvbSwgaWQpO1xuXG4gICAgICAvLyBGYWRlIHRoZSB2b2x1bWUgb2Ygb25lIG9yIGFsbCBzb3VuZHMuXG4gICAgICB2YXIgaWRzID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICB2YXIgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgICAvLyBDcmVhdGUgYSBsaW5lYXIgZmFkZSBvciBmYWxsIGJhY2sgdG8gdGltZW91dHMgd2l0aCBIVE1MNSBBdWRpby5cbiAgICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgICAgLy8gU3RvcCB0aGUgcHJldmlvdXMgZmFkZSBpZiBubyBzcHJpdGUgaXMgYmVpbmcgdXNlZCAob3RoZXJ3aXNlLCB2b2x1bWUgaGFuZGxlcyB0aGlzKS5cbiAgICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgICBzZWxmLl9zdG9wRmFkZShpZHNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBXZWIgQXVkaW8sIGxldCB0aGUgbmF0aXZlIG1ldGhvZHMgZG8gdGhlIGFjdHVhbCBmYWRlLlxuICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiAhc291bmQuX211dGVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFRpbWUgPSBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGN1cnJlbnRUaW1lICsgKGxlbiAvIDEwMDApO1xuICAgICAgICAgICAgc291bmQuX3ZvbHVtZSA9IGZyb207XG4gICAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLnNldFZhbHVlQXRUaW1lKGZyb20sIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodG8sIGVuZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fc3RhcnRGYWRlSW50ZXJ2YWwoc291bmQsIGZyb20sIHRvLCBsZW4sIGlkc1tpXSwgdHlwZW9mIGlkID09PSAndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0aGUgaW50ZXJuYWwgaW50ZXJ2YWwgdG8gZmFkZSBhIHNvdW5kLlxuICAgICAqIEBwYXJhbSAge09iamVjdH0gc291bmQgUmVmZXJlbmNlIHRvIHNvdW5kIHRvIGZhZGUuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBmcm9tIFRoZSB2YWx1ZSB0byBmYWRlIGZyb20gKDAuMCB0byAxLjApLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gdG8gICBUaGUgdm9sdW1lIHRvIGZhZGUgdG8gKDAuMCB0byAxLjApLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gbGVuICBUaW1lIGluIG1pbGxpc2Vjb25kcyB0byBmYWRlLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgICBUaGUgc291bmQgaWQgdG8gZmFkZS5cbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpc0dyb3VwICAgSWYgdHJ1ZSwgc2V0IHRoZSB2b2x1bWUgb24gdGhlIGdyb3VwLlxuICAgICAqL1xuICAgIF9zdGFydEZhZGVJbnRlcnZhbDogZnVuY3Rpb24oc291bmQsIGZyb20sIHRvLCBsZW4sIGlkLCBpc0dyb3VwKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgdm9sID0gZnJvbTtcbiAgICAgIHZhciBkaWZmID0gdG8gLSBmcm9tO1xuICAgICAgdmFyIHN0ZXBzID0gTWF0aC5hYnMoZGlmZiAvIDAuMDEpO1xuICAgICAgdmFyIHN0ZXBMZW4gPSBNYXRoLm1heCg0LCAoc3RlcHMgPiAwKSA/IGxlbiAvIHN0ZXBzIDogbGVuKTtcbiAgICAgIHZhciBsYXN0VGljayA9IERhdGUubm93KCk7XG5cbiAgICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBiZWluZyBmYWRlZCB0by5cbiAgICAgIHNvdW5kLl9mYWRlVG8gPSB0bztcblxuICAgICAgLy8gVXBkYXRlIHRoZSB2b2x1bWUgdmFsdWUgb24gZWFjaCBpbnRlcnZhbCB0aWNrLlxuICAgICAgc291bmQuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgdm9sdW1lIGJhc2VkIG9uIHRoZSB0aW1lIHNpbmNlIHRoZSBsYXN0IHRpY2suXG4gICAgICAgIHZhciB0aWNrID0gKERhdGUubm93KCkgLSBsYXN0VGljaykgLyBsZW47XG4gICAgICAgIGxhc3RUaWNrID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdm9sICs9IGRpZmYgKiB0aWNrO1xuXG4gICAgICAgIC8vIFJvdW5kIHRvIHdpdGhpbiAyIGRlY2ltYWwgcG9pbnRzLlxuICAgICAgICB2b2wgPSBNYXRoLnJvdW5kKHZvbCAqIDEwMCkgLyAxMDA7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSB2b2x1bWUgaXMgaW4gdGhlIHJpZ2h0IGJvdW5kcy5cbiAgICAgICAgaWYgKGRpZmYgPCAwKSB7XG4gICAgICAgICAgdm9sID0gTWF0aC5tYXgodG8sIHZvbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm9sID0gTWF0aC5taW4odG8sIHZvbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGFuZ2UgdGhlIHZvbHVtZS5cbiAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgc291bmQuX3ZvbHVtZSA9IHZvbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxmLnZvbHVtZSh2b2wsIHNvdW5kLl9pZCwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIGdyb3VwJ3Mgdm9sdW1lLlxuICAgICAgICBpZiAoaXNHcm91cCkge1xuICAgICAgICAgIHNlbGYuX3ZvbHVtZSA9IHZvbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZW4gdGhlIGZhZGUgaXMgY29tcGxldGUsIHN0b3AgaXQgYW5kIGZpcmUgZXZlbnQuXG4gICAgICAgIGlmICgodG8gPCBmcm9tICYmIHZvbCA8PSB0bykgfHwgKHRvID4gZnJvbSAmJiB2b2wgPj0gdG8pKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChzb3VuZC5faW50ZXJ2YWwpO1xuICAgICAgICAgIHNvdW5kLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgc291bmQuX2ZhZGVUbyA9IG51bGw7XG4gICAgICAgICAgc2VsZi52b2x1bWUodG8sIHNvdW5kLl9pZCk7XG4gICAgICAgICAgc2VsZi5fZW1pdCgnZmFkZScsIHNvdW5kLl9pZCk7XG4gICAgICAgIH1cbiAgICAgIH0sIHN0ZXBMZW4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtZXRob2QgdGhhdCBzdG9wcyB0aGUgY3VycmVudGx5IHBsYXlpbmcgZmFkZSB3aGVuXG4gICAgICogYSBuZXcgZmFkZSBzdGFydHMsIHZvbHVtZSBpcyBjaGFuZ2VkIG9yIHRoZSBzb3VuZCBpcyBzdG9wcGVkLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgVGhlIHNvdW5kIGlkLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX3N0b3BGYWRlOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcblxuICAgICAgaWYgKHNvdW5kICYmIHNvdW5kLl9pbnRlcnZhbCkge1xuICAgICAgICBpZiAoc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICBzb3VuZC5fbm9kZS5nYWluLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyhIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoc291bmQuX2ludGVydmFsKTtcbiAgICAgICAgc291bmQuX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgc2VsZi52b2x1bWUoc291bmQuX2ZhZGVUbywgaWQpO1xuICAgICAgICBzb3VuZC5fZmFkZVRvID0gbnVsbDtcbiAgICAgICAgc2VsZi5fZW1pdCgnZmFkZScsIGlkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldC9zZXQgdGhlIGxvb3AgcGFyYW1ldGVyIG9uIGEgc291bmQuIFRoaXMgbWV0aG9kIGNhbiBvcHRpb25hbGx5IHRha2UgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAgICAgKiAgIGxvb3AoKSAtPiBSZXR1cm5zIHRoZSBncm91cCdzIGxvb3AgdmFsdWUuXG4gICAgICogICBsb29wKGlkKSAtPiBSZXR1cm5zIHRoZSBzb3VuZCBpZCdzIGxvb3AgdmFsdWUuXG4gICAgICogICBsb29wKGxvb3ApIC0+IFNldHMgdGhlIGxvb3AgdmFsdWUgZm9yIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqICAgbG9vcChsb29wLCBpZCkgLT4gU2V0cyB0aGUgbG9vcCB2YWx1ZSBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9Cb29sZWFufSBSZXR1cm5zIHNlbGYgb3IgY3VycmVudCBsb29wIHZhbHVlLlxuICAgICAqL1xuICAgIGxvb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgbG9vcCwgaWQsIHNvdW5kO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBmb3IgbG9vcCBhbmQgaWQuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBncm91J3MgbG9vcCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIHNlbGYuX2xvb3A7XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgbG9vcCA9IGFyZ3NbMF07XG4gICAgICAgICAgc2VsZi5fbG9vcCA9IGxvb3A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmV0dXJuIHRoaXMgc291bmQncyBsb29wIHZhbHVlLlxuICAgICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKHBhcnNlSW50KGFyZ3NbMF0sIDEwKSk7XG4gICAgICAgICAgcmV0dXJuIHNvdW5kID8gc291bmQuX2xvb3AgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBsb29wID0gYXJnc1swXTtcbiAgICAgICAgaWQgPSBwYXJzZUludChhcmdzWzFdLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGlkIGlzIHBhc3NlZCwgZ2V0IGFsbCBJRCdzIHRvIGJlIGxvb3BlZC5cbiAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgICBmb3IgKHZhciBpPTA7IGk8aWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkc1tpXSk7XG5cbiAgICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgICAgc291bmQuX2xvb3AgPSBsb29wO1xuICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiBzb3VuZC5fbm9kZSAmJiBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UpIHtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wID0gbG9vcDtcbiAgICAgICAgICAgIGlmIChsb29wKSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wU3RhcnQgPSBzb3VuZC5fc3RhcnQgfHwgMDtcbiAgICAgICAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3BFbmQgPSBzb3VuZC5fc3RvcDtcblxuICAgICAgICAgICAgICAvLyBJZiBwbGF5aW5nLCByZXN0YXJ0IHBsYXliYWNrIHRvIGVuc3VyZSBsb29waW5nIHVwZGF0ZXMuXG4gICAgICAgICAgICAgIGlmIChzZWxmLnBsYXlpbmcoaWRzW2ldKSkge1xuICAgICAgICAgICAgICAgIHNlbGYucGF1c2UoaWRzW2ldLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBzZWxmLnBsYXkoaWRzW2ldLCB0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0L3NldCB0aGUgcGxheWJhY2sgcmF0ZSBvZiBhIHNvdW5kLiBUaGlzIG1ldGhvZCBjYW4gb3B0aW9uYWxseSB0YWtlIDAsIDEgb3IgMiBhcmd1bWVudHMuXG4gICAgICogICByYXRlKCkgLT4gUmV0dXJucyB0aGUgZmlyc3Qgc291bmQgbm9kZSdzIGN1cnJlbnQgcGxheWJhY2sgcmF0ZS5cbiAgICAgKiAgIHJhdGUoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgY3VycmVudCBwbGF5YmFjayByYXRlLlxuICAgICAqICAgcmF0ZShyYXRlKSAtPiBTZXRzIHRoZSBwbGF5YmFjayByYXRlIG9mIGFsbCBzb3VuZHMgaW4gdGhpcyBIb3dsIGdyb3VwLlxuICAgICAqICAgcmF0ZShyYXRlLCBpZCkgLT4gU2V0cyB0aGUgcGxheWJhY2sgcmF0ZSBvZiBwYXNzZWQgc291bmQgaWQuXG4gICAgICogQHJldHVybiB7SG93bC9OdW1iZXJ9IFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCBwbGF5YmFjayByYXRlLlxuICAgICAqL1xuICAgIHJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB2YXIgcmF0ZSwgaWQ7XG5cbiAgICAgIC8vIERldGVybWluZSB0aGUgdmFsdWVzIGJhc2VkIG9uIGFyZ3VtZW50cy5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBXZSB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgcmF0ZSBvZiB0aGUgZmlyc3Qgbm9kZS5cbiAgICAgICAgaWQgPSBzZWxmLl9zb3VuZHNbMF0uX2lkO1xuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGlzIGlzIGFuIElELCBhbmQgaWYgbm90LCBhc3N1bWUgaXQgaXMgYSBuZXcgcmF0ZSB2YWx1ZS5cbiAgICAgICAgdmFyIGlkcyA9IHNlbGYuX2dldFNvdW5kSWRzKCk7XG4gICAgICAgIHZhciBpbmRleCA9IGlkcy5pbmRleE9mKGFyZ3NbMF0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1swXSwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJhdGUgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJhdGUgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHRoZSBwbGF5YmFjayByYXRlIG9yIHJldHVybiB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgIHZhciBzb3VuZDtcbiAgICAgIGlmICh0eXBlb2YgcmF0ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBjaGFuZ2UgcGxheWJhY2sgcmF0ZSB3aGVuIGNhcGFibGUuXG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcgfHwgc2VsZi5fcGxheUxvY2spIHtcbiAgICAgICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50OiAncmF0ZScsXG4gICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBzZWxmLnJhdGUuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgZ3JvdXAgcmF0ZS5cbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBzZWxmLl9yYXRlID0gcmF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBvbmUgb3IgYWxsIHZvbHVtZXMuXG4gICAgICAgIGlkID0gc2VsZi5fZ2V0U291bmRJZHMoaWQpO1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8aWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkW2ldKTtcblxuICAgICAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBvdXIgcG9zaXRpb24gd2hlbiB0aGUgcmF0ZSBjaGFuZ2VkIGFuZCB1cGRhdGUgdGhlIHBsYXliYWNrXG4gICAgICAgICAgICAvLyBzdGFydCBwb3NpdGlvbiBzbyB3ZSBjYW4gcHJvcGVybHkgYWRqdXN0IHRoZSBzZWVrIHBvc2l0aW9uIGZvciB0aW1lIGVsYXBzZWQuXG4gICAgICAgICAgICBpZiAoc2VsZi5wbGF5aW5nKGlkW2ldKSkge1xuICAgICAgICAgICAgICBzb3VuZC5fcmF0ZVNlZWsgPSBzZWxmLnNlZWsoaWRbaV0pO1xuICAgICAgICAgICAgICBzb3VuZC5fcGxheVN0YXJ0ID0gc2VsZi5fd2ViQXVkaW8gPyBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lIDogc291bmQuX3BsYXlTdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdW5kLl9yYXRlID0gcmF0ZTtcblxuICAgICAgICAgICAgLy8gQ2hhbmdlIHRoZSBwbGF5YmFjayByYXRlLlxuICAgICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmIHNvdW5kLl9ub2RlICYmIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZSkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKHJhdGUsIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgICBzb3VuZC5fbm9kZS5wbGF5YmFja1JhdGUgPSByYXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgdGltZXJzLlxuICAgICAgICAgICAgdmFyIHNlZWsgPSBzZWxmLnNlZWsoaWRbaV0pO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gKChzZWxmLl9zcHJpdGVbc291bmQuX3Nwcml0ZV1bMF0gKyBzZWxmLl9zcHJpdGVbc291bmQuX3Nwcml0ZV1bMV0pIC8gMTAwMCkgLSBzZWVrO1xuICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSAoZHVyYXRpb24gKiAxMDAwKSAvIE1hdGguYWJzKHNvdW5kLl9yYXRlKTtcblxuICAgICAgICAgICAgLy8gU3RhcnQgYSBuZXcgZW5kIHRpbWVyIGlmIHNvdW5kIGlzIGFscmVhZHkgcGxheWluZy5cbiAgICAgICAgICAgIGlmIChzZWxmLl9lbmRUaW1lcnNbaWRbaV1dIHx8ICFzb3VuZC5fcGF1c2VkKSB7XG4gICAgICAgICAgICAgIHNlbGYuX2NsZWFyVGltZXIoaWRbaV0pO1xuICAgICAgICAgICAgICBzZWxmLl9lbmRUaW1lcnNbaWRbaV1dID0gc2V0VGltZW91dChzZWxmLl9lbmRlZC5iaW5kKHNlbGYsIHNvdW5kKSwgdGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3JhdGUnLCBzb3VuZC5faWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWQpO1xuICAgICAgICByZXR1cm4gc291bmQgPyBzb3VuZC5fcmF0ZSA6IHNlbGYuX3JhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQvc2V0IHRoZSBzZWVrIHBvc2l0aW9uIG9mIGEgc291bmQuIFRoaXMgbWV0aG9kIGNhbiBvcHRpb25hbGx5IHRha2UgMCwgMSBvciAyIGFyZ3VtZW50cy5cbiAgICAgKiAgIHNlZWsoKSAtPiBSZXR1cm5zIHRoZSBmaXJzdCBzb3VuZCBub2RlJ3MgY3VycmVudCBzZWVrIHBvc2l0aW9uLlxuICAgICAqICAgc2VlayhpZCkgLT4gUmV0dXJucyB0aGUgc291bmQgaWQncyBjdXJyZW50IHNlZWsgcG9zaXRpb24uXG4gICAgICogICBzZWVrKHNlZWspIC0+IFNldHMgdGhlIHNlZWsgcG9zaXRpb24gb2YgdGhlIGZpcnN0IHNvdW5kIG5vZGUuXG4gICAgICogICBzZWVrKHNlZWssIGlkKSAtPiBTZXRzIHRoZSBzZWVrIHBvc2l0aW9uIG9mIHBhc3NlZCBzb3VuZCBpZC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsL051bWJlcn0gUmV0dXJucyBzZWxmIG9yIHRoZSBjdXJyZW50IHNlZWsgcG9zaXRpb24uXG4gICAgICovXG4gICAgc2VlazogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHZhciBzZWVrLCBpZDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSB2YWx1ZXMgYmFzZWQgb24gYXJndW1lbnRzLlxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFdlIHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgbm9kZS5cbiAgICAgICAgaWYgKHNlbGYuX3NvdW5kcy5sZW5ndGgpIHtcbiAgICAgICAgICBpZCA9IHNlbGYuX3NvdW5kc1swXS5faWQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhpcyBpcyBhbiBJRCwgYW5kIGlmIG5vdCwgYXNzdW1lIGl0IGlzIGEgbmV3IHNlZWsgcG9zaXRpb24uXG4gICAgICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcygpO1xuICAgICAgICB2YXIgaW5kZXggPSBpZHMuaW5kZXhPZihhcmdzWzBdKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMF0sIDEwKTtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLl9zb3VuZHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWQgPSBzZWxmLl9zb3VuZHNbMF0uX2lkO1xuICAgICAgICAgIHNlZWsgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHNlZWsgPSBwYXJzZUZsb2F0KGFyZ3NbMF0pO1xuICAgICAgICBpZCA9IHBhcnNlSW50KGFyZ3NbMV0sIDEwKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gSUQsIGJhaWwgb3V0LlxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gc2VlayB3aGVuIGNhcGFibGUuXG4gICAgICBpZiAodHlwZW9mIHNlZWsgPT09ICdudW1iZXInICYmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcgfHwgc2VsZi5fcGxheUxvY2spKSB7XG4gICAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgIGV2ZW50OiAnc2VlaycsXG4gICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNlbGYuc2Vlay5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgdGhlIHNvdW5kLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VlayA9PT0gJ251bWJlcicgJiYgc2VlayA+PSAwKSB7XG4gICAgICAgICAgLy8gUGF1c2UgdGhlIHNvdW5kIGFuZCB1cGRhdGUgcG9zaXRpb24gZm9yIHJlc3RhcnRpbmcgcGxheWJhY2suXG4gICAgICAgICAgdmFyIHBsYXlpbmcgPSBzZWxmLnBsYXlpbmcoaWQpO1xuICAgICAgICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICAgICAgICBzZWxmLnBhdXNlKGlkLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBNb3ZlIHRoZSBwb3NpdGlvbiBvZiB0aGUgdHJhY2sgYW5kIGNhbmNlbCB0aW1lci5cbiAgICAgICAgICBzb3VuZC5fc2VlayA9IHNlZWs7XG4gICAgICAgICAgc291bmQuX2VuZGVkID0gZmFsc2U7XG4gICAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihpZCk7XG5cbiAgICAgICAgICAvLyBVcGRhdGUgdGhlIHNlZWsgcG9zaXRpb24gZm9yIEhUTUw1IEF1ZGlvLlxuICAgICAgICAgIGlmICghc2VsZi5fd2ViQXVkaW8gJiYgc291bmQuX25vZGUgJiYgIWlzTmFOKHNvdW5kLl9ub2RlLmR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc291bmQuX25vZGUuY3VycmVudFRpbWUgPSBzZWVrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNlZWsgYW5kIGVtaXQgd2hlbiByZWFkeS5cbiAgICAgICAgICB2YXIgc2Vla0FuZEVtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIFJlc3RhcnQgdGhlIHBsYXliYWNrIGlmIHRoZSBzb3VuZCB3YXMgcGxheWluZy5cbiAgICAgICAgICAgIGlmIChwbGF5aW5nKSB7XG4gICAgICAgICAgICAgIHNlbGYucGxheShpZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGYuX2VtaXQoJ3NlZWsnLCBpZCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSBwbGF5IGxvY2sgdG8gYmUgdW5zZXQgYmVmb3JlIGVtaXR0aW5nIChIVE1MNSBBdWRpbykuXG4gICAgICAgICAgaWYgKHBsYXlpbmcgJiYgIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgZW1pdFNlZWsgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCFzZWxmLl9wbGF5TG9jaykge1xuICAgICAgICAgICAgICAgIHNlZWtBbmRFbWl0KCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChlbWl0U2VlaywgMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGVtaXRTZWVrLCAwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2Vla0FuZEVtaXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgcmVhbFRpbWUgPSBzZWxmLnBsYXlpbmcoaWQpID8gSG93bGVyLmN0eC5jdXJyZW50VGltZSAtIHNvdW5kLl9wbGF5U3RhcnQgOiAwO1xuICAgICAgICAgICAgdmFyIHJhdGVTZWVrID0gc291bmQuX3JhdGVTZWVrID8gc291bmQuX3JhdGVTZWVrIC0gc291bmQuX3NlZWsgOiAwO1xuICAgICAgICAgICAgcmV0dXJuIHNvdW5kLl9zZWVrICsgKHJhdGVTZWVrICsgcmVhbFRpbWUgKiBNYXRoLmFicyhzb3VuZC5fcmF0ZSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc291bmQuX25vZGUuY3VycmVudFRpbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHNwZWNpZmljIHNvdW5kIGlzIGN1cnJlbnRseSBwbGF5aW5nIG9yIG5vdCAoaWYgaWQgaXMgcHJvdmlkZWQpLCBvciBjaGVjayBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHNvdW5kcyBpbiB0aGUgZ3JvdXAgaXMgcGxheWluZyBvciBub3QuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgaWQgVGhlIHNvdW5kIGlkIHRvIGNoZWNrLiBJZiBub25lIGlzIHBhc3NlZCwgdGhlIHdob2xlIHNvdW5kIGdyb3VwIGlzIGNoZWNrZWQuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBwbGF5aW5nIGFuZCBmYWxzZSBpZiBub3QuXG4gICAgICovXG4gICAgcGxheWluZzogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gQ2hlY2sgdGhlIHBhc3NlZCBzb3VuZCBJRCAoaWYgYW55KS5cbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZCk7XG4gICAgICAgIHJldHVybiBzb3VuZCA/ICFzb3VuZC5fcGF1c2VkIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgbG9vcCB0aHJvdWdoIGFsbCBzb3VuZHMgYW5kIGNoZWNrIGlmIGFueSBhcmUgcGxheWluZy5cbiAgICAgIGZvciAodmFyIGk9MDsgaTxzZWxmLl9zb3VuZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFzZWxmLl9zb3VuZHNbaV0uX3BhdXNlZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkdXJhdGlvbiBvZiB0aGlzIHNvdW5kLiBQYXNzaW5nIGEgc291bmQgaWQgd2lsbCByZXR1cm4gdGhlIHNwcml0ZSBkdXJhdGlvbi5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIFRoZSBzb3VuZCBpZCB0byBjaGVjay4gSWYgbm9uZSBpcyBwYXNzZWQsIHJldHVybiBmdWxsIHNvdXJjZSBkdXJhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEF1ZGlvIGR1cmF0aW9uIGluIHNlY29uZHMuXG4gICAgICovXG4gICAgZHVyYXRpb246IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZHVyYXRpb24gPSBzZWxmLl9kdXJhdGlvbjtcblxuICAgICAgLy8gSWYgd2UgcGFzcyBhbiBJRCwgZ2V0IHRoZSBzb3VuZCBhbmQgcmV0dXJuIHRoZSBzcHJpdGUgbGVuZ3RoLlxuICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcbiAgICAgIGlmIChzb3VuZCkge1xuICAgICAgICBkdXJhdGlvbiA9IHNlbGYuX3Nwcml0ZVtzb3VuZC5fc3ByaXRlXVsxXSAvIDEwMDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBsb2FkZWQgc3RhdGUgb2YgdGhpcyBIb3dsLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gJ3VubG9hZGVkJywgJ2xvYWRpbmcnLCAnbG9hZGVkJ1xuICAgICAqL1xuICAgIHN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5sb2FkIGFuZCBkZXN0cm95IHRoZSBjdXJyZW50IEhvd2wgb2JqZWN0LlxuICAgICAqIFRoaXMgd2lsbCBpbW1lZGlhdGVseSBzdG9wIGFsbCBzb3VuZCBpbnN0YW5jZXMgYXR0YWNoZWQgdG8gdGhpcyBncm91cC5cbiAgICAgKi9cbiAgICB1bmxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBTdG9wIHBsYXlpbmcgYW55IGFjdGl2ZSBzb3VuZHMuXG4gICAgICB2YXIgc291bmRzID0gc2VsZi5fc291bmRzO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPHNvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBTdG9wIHRoZSBzb3VuZCBpZiBpdCBpcyBjdXJyZW50bHkgcGxheWluZy5cbiAgICAgICAgaWYgKCFzb3VuZHNbaV0uX3BhdXNlZCkge1xuICAgICAgICAgIHNlbGYuc3RvcChzb3VuZHNbaV0uX2lkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIG9yIGRpc2Nvbm5lY3QuXG4gICAgICAgIGlmICghc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgICAgICAvLyBTZXQgdGhlIHNvdXJjZSB0byAwLXNlY29uZCBzaWxlbmNlIHRvIHN0b3AgYW55IGRvd25sb2FkaW5nIChleGNlcHQgaW4gSUUpLlxuICAgICAgICAgIHNlbGYuX2NsZWFyU291bmQoc291bmRzW2ldLl9ub2RlKTtcblxuICAgICAgICAgIC8vIFJlbW92ZSBhbnkgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgIHNvdW5kc1tpXS5fbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHNvdW5kc1tpXS5fZXJyb3JGbiwgZmFsc2UpO1xuICAgICAgICAgIHNvdW5kc1tpXS5fbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKEhvd2xlci5fY2FuUGxheUV2ZW50LCBzb3VuZHNbaV0uX2xvYWRGbiwgZmFsc2UpO1xuICAgICAgICAgIHNvdW5kc1tpXS5fbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmRlZCcsIHNvdW5kc1tpXS5fZW5kRm4sIGZhbHNlKTtcblxuICAgICAgICAgIC8vIFJlbGVhc2UgdGhlIEF1ZGlvIG9iamVjdCBiYWNrIHRvIHRoZSBwb29sLlxuICAgICAgICAgIEhvd2xlci5fcmVsZWFzZUh0bWw1QXVkaW8oc291bmRzW2ldLl9ub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVtcHR5IG91dCBhbGwgb2YgdGhlIG5vZGVzLlxuICAgICAgICBkZWxldGUgc291bmRzW2ldLl9ub2RlO1xuXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBhbGwgdGltZXJzIGFyZSBjbGVhcmVkIG91dC5cbiAgICAgICAgc2VsZi5fY2xlYXJUaW1lcihzb3VuZHNbaV0uX2lkKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSByZWZlcmVuY2VzIGluIHRoZSBnbG9iYWwgSG93bGVyIG9iamVjdC5cbiAgICAgIHZhciBpbmRleCA9IEhvd2xlci5faG93bHMuaW5kZXhPZihzZWxmKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIEhvd2xlci5faG93bHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVsZXRlIHRoaXMgc291bmQgZnJvbSB0aGUgY2FjaGUgKGlmIG5vIG90aGVyIEhvd2wgaXMgdXNpbmcgaXQpLlxuICAgICAgdmFyIHJlbUNhY2hlID0gdHJ1ZTtcbiAgICAgIGZvciAoaT0wOyBpPEhvd2xlci5faG93bHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKEhvd2xlci5faG93bHNbaV0uX3NyYyA9PT0gc2VsZi5fc3JjIHx8IHNlbGYuX3NyYy5pbmRleE9mKEhvd2xlci5faG93bHNbaV0uX3NyYykgPj0gMCkge1xuICAgICAgICAgIHJlbUNhY2hlID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNhY2hlICYmIHJlbUNhY2hlKSB7XG4gICAgICAgIGRlbGV0ZSBjYWNoZVtzZWxmLl9zcmNdO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhciBnbG9iYWwgZXJyb3JzLlxuICAgICAgSG93bGVyLm5vQXVkaW8gPSBmYWxzZTtcblxuICAgICAgLy8gQ2xlYXIgb3V0IGBzZWxmYC5cbiAgICAgIHNlbGYuX3N0YXRlID0gJ3VubG9hZGVkJztcbiAgICAgIHNlbGYuX3NvdW5kcyA9IFtdO1xuICAgICAgc2VsZiA9IG51bGw7XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gYSBjdXN0b20gZXZlbnQuXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSAgIGV2ZW50IEV2ZW50IG5hbWUuXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZuICAgIExpc3RlbmVyIHRvIGNhbGwuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgIGlkICAgIChvcHRpb25hbCkgT25seSBsaXN0ZW4gdG8gZXZlbnRzIGZvciB0aGlzIHNvdW5kLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gICBvbmNlICAoSU5URVJOQUwpIE1hcmtzIGV2ZW50IHRvIGZpcmUgb25seSBvbmNlLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uKGV2ZW50LCBmbiwgaWQsIG9uY2UpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBldmVudHMgPSBzZWxmWydfb24nICsgZXZlbnRdO1xuXG4gICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGV2ZW50cy5wdXNoKG9uY2UgPyB7aWQ6IGlkLCBmbjogZm4sIG9uY2U6IG9uY2V9IDoge2lkOiBpZCwgZm46IGZufSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBjdXN0b20gZXZlbnQuIENhbGwgd2l0aG91dCBwYXJhbWV0ZXJzIHRvIHJlbW92ZSBhbGwgZXZlbnRzLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBldmVudCBFdmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICBMaXN0ZW5lciB0byByZW1vdmUuIExlYXZlIGVtcHR5IHRvIHJlbW92ZSBhbGwuXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgIGlkICAgIChvcHRpb25hbCkgT25seSByZW1vdmUgZXZlbnRzIGZvciB0aGlzIHNvdW5kLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgb2ZmOiBmdW5jdGlvbihldmVudCwgZm4sIGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZXZlbnRzID0gc2VsZlsnX29uJyArIGV2ZW50XTtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgLy8gQWxsb3cgcGFzc2luZyBqdXN0IGFuIGV2ZW50IGFuZCBJRC5cbiAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlkID0gZm47XG4gICAgICAgIGZuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZuIHx8IGlkKSB7XG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBldmVudCBzdG9yZSBhbmQgcmVtb3ZlIHRoZSBwYXNzZWQgZnVuY3Rpb24uXG4gICAgICAgIGZvciAoaT0wOyBpPGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBpc0lkID0gKGlkID09PSBldmVudHNbaV0uaWQpO1xuICAgICAgICAgIGlmIChmbiA9PT0gZXZlbnRzW2ldLmZuICYmIGlzSWQgfHwgIWZuICYmIGlzSWQpIHtcbiAgICAgICAgICAgIGV2ZW50cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQpIHtcbiAgICAgICAgLy8gQ2xlYXIgb3V0IGFsbCBldmVudHMgb2YgdGhpcyB0eXBlLlxuICAgICAgICBzZWxmWydfb24nICsgZXZlbnRdID0gW107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDbGVhciBvdXQgYWxsIGV2ZW50cyBvZiBldmVyeSB0eXBlLlxuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNlbGYpO1xuICAgICAgICBmb3IgKGk9MDsgaTxrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKChrZXlzW2ldLmluZGV4T2YoJ19vbicpID09PSAwKSAmJiBBcnJheS5pc0FycmF5KHNlbGZba2V5c1tpXV0pKSB7XG4gICAgICAgICAgICBzZWxmW2tleXNbaV1dID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gYSBjdXN0b20gZXZlbnQgYW5kIHJlbW92ZSBpdCBvbmNlIGZpcmVkLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBldmVudCBFdmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbiAgICBMaXN0ZW5lciB0byBjYWxsLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gICBpZCAgICAob3B0aW9uYWwpIE9ubHkgbGlzdGVuIHRvIGV2ZW50cyBmb3IgdGhpcyBzb3VuZC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIG9uY2U6IGZ1bmN0aW9uKGV2ZW50LCBmbiwgaWQpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgLy8gU2V0dXAgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICAgICAgc2VsZi5vbihldmVudCwgZm4sIGlkLCAxKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVtaXQgYWxsIGV2ZW50cyBvZiBhIHNwZWNpZmljIHR5cGUgYW5kIHBhc3MgdGhlIHNvdW5kIGlkLlxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnQgRXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkICAgIFNvdW5kIElELlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gbXNnICAgTWVzc2FnZSB0byBnbyB3aXRoIGV2ZW50LlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX2VtaXQ6IGZ1bmN0aW9uKGV2ZW50LCBpZCwgbXNnKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgZXZlbnRzID0gc2VsZlsnX29uJyArIGV2ZW50XTtcblxuICAgICAgLy8gTG9vcCB0aHJvdWdoIGV2ZW50IHN0b3JlIGFuZCBmaXJlIGFsbCBmdW5jdGlvbnMuXG4gICAgICBmb3IgKHZhciBpPWV2ZW50cy5sZW5ndGgtMTsgaT49MDsgaS0tKSB7XG4gICAgICAgIC8vIE9ubHkgZmlyZSB0aGUgbGlzdGVuZXIgaWYgdGhlIGNvcnJlY3QgSUQgaXMgdXNlZC5cbiAgICAgICAgaWYgKCFldmVudHNbaV0uaWQgfHwgZXZlbnRzW2ldLmlkID09PSBpZCB8fCBldmVudCA9PT0gJ2xvYWQnKSB7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBpZCwgbXNnKTtcbiAgICAgICAgICB9LmJpbmQoc2VsZiwgZXZlbnRzW2ldLmZuKSwgMCk7XG5cbiAgICAgICAgICAvLyBJZiB0aGlzIGV2ZW50IHdhcyBzZXR1cCB3aXRoIGBvbmNlYCwgcmVtb3ZlIGl0LlxuICAgICAgICAgIGlmIChldmVudHNbaV0ub25jZSkge1xuICAgICAgICAgICAgc2VsZi5vZmYoZXZlbnQsIGV2ZW50c1tpXS5mbiwgZXZlbnRzW2ldLmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUGFzcyB0aGUgZXZlbnQgdHlwZSBpbnRvIGxvYWQgcXVldWUgc28gdGhhdCBpdCBjYW4gY29udGludWUgc3RlcHBpbmcuXG4gICAgICBzZWxmLl9sb2FkUXVldWUoZXZlbnQpO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUXVldWUgb2YgYWN0aW9ucyBpbml0aWF0ZWQgYmVmb3JlIHRoZSBzb3VuZCBoYXMgbG9hZGVkLlxuICAgICAqIFRoZXNlIHdpbGwgYmUgY2FsbGVkIGluIHNlcXVlbmNlLCB3aXRoIHRoZSBuZXh0IG9ubHkgZmlyaW5nXG4gICAgICogYWZ0ZXIgdGhlIHByZXZpb3VzIGhhcyBmaW5pc2hlZCBleGVjdXRpbmcgKGV2ZW4gaWYgYXN5bmMgbGlrZSBwbGF5KS5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIF9sb2FkUXVldWU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmIChzZWxmLl9xdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciB0YXNrID0gc2VsZi5fcXVldWVbMF07XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgdGFzayBpZiBhIG1hdGNoaW5nIGV2ZW50IHdhcyBwYXNzZWQuXG4gICAgICAgIGlmICh0YXNrLmV2ZW50ID09PSBldmVudCkge1xuICAgICAgICAgIHNlbGYuX3F1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgc2VsZi5fbG9hZFF1ZXVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdW4gdGhlIHRhc2sgaWYgbm8gZXZlbnQgdHlwZSBpcyBwYXNzZWQuXG4gICAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICB0YXNrLmFjdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHBsYXliYWNrIGVuZHMgYXQgdGhlIGVuZCBvZiB0aGUgZHVyYXRpb24uXG4gICAgICogQHBhcmFtICB7U291bmR9IHNvdW5kIFRoZSBzb3VuZCBvYmplY3QgdG8gd29yayB3aXRoLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX2VuZGVkOiBmdW5jdGlvbihzb3VuZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHNwcml0ZSA9IHNvdW5kLl9zcHJpdGU7XG5cbiAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBJRSBhbmQgdGhlcmUgd2FzIG5ldHdvcmsgbGF0ZW5jeSB3ZSBtYXkgYmUgY2xpcHBpbmdcbiAgICAgIC8vIGF1ZGlvIGJlZm9yZSBpdCBjb21wbGV0ZXMgcGxheWluZy4gTGV0cyBjaGVjayB0aGUgbm9kZSB0byBtYWtlIHN1cmUgaXRcbiAgICAgIC8vIGJlbGlldmVzIGl0IGhhcyBjb21wbGV0ZWQsIGJlZm9yZSBlbmRpbmcgdGhlIHBsYXliYWNrLlxuICAgICAgaWYgKCFzZWxmLl93ZWJBdWRpbyAmJiBzb3VuZC5fbm9kZSAmJiAhc291bmQuX25vZGUucGF1c2VkICYmICFzb3VuZC5fbm9kZS5lbmRlZCAmJiBzb3VuZC5fbm9kZS5jdXJyZW50VGltZSA8IHNvdW5kLl9zdG9wKSB7XG4gICAgICAgIHNldFRpbWVvdXQoc2VsZi5fZW5kZWQuYmluZChzZWxmLCBzb3VuZCksIDEwMCk7XG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgfVxuXG4gICAgICAvLyBTaG91bGQgdGhpcyBzb3VuZCBsb29wP1xuICAgICAgdmFyIGxvb3AgPSAhIShzb3VuZC5fbG9vcCB8fCBzZWxmLl9zcHJpdGVbc3ByaXRlXVsyXSk7XG5cbiAgICAgIC8vIEZpcmUgdGhlIGVuZGVkIGV2ZW50LlxuICAgICAgc2VsZi5fZW1pdCgnZW5kJywgc291bmQuX2lkKTtcblxuICAgICAgLy8gUmVzdGFydCB0aGUgcGxheWJhY2sgZm9yIEhUTUw1IEF1ZGlvIGxvb3AuXG4gICAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvICYmIGxvb3ApIHtcbiAgICAgICAgc2VsZi5zdG9wKHNvdW5kLl9pZCwgdHJ1ZSkucGxheShzb3VuZC5faWQpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXN0YXJ0IHRoaXMgdGltZXIgaWYgb24gYSBXZWIgQXVkaW8gbG9vcC5cbiAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiBsb29wKSB7XG4gICAgICAgIHNlbGYuX2VtaXQoJ3BsYXknLCBzb3VuZC5faWQpO1xuICAgICAgICBzb3VuZC5fc2VlayA9IHNvdW5kLl9zdGFydCB8fCAwO1xuICAgICAgICBzb3VuZC5fcmF0ZVNlZWsgPSAwO1xuICAgICAgICBzb3VuZC5fcGxheVN0YXJ0ID0gSG93bGVyLmN0eC5jdXJyZW50VGltZTtcblxuICAgICAgICB2YXIgdGltZW91dCA9ICgoc291bmQuX3N0b3AgLSBzb3VuZC5fc3RhcnQpICogMTAwMCkgLyBNYXRoLmFicyhzb3VuZC5fcmF0ZSk7XG4gICAgICAgIHNlbGYuX2VuZFRpbWVyc1tzb3VuZC5faWRdID0gc2V0VGltZW91dChzZWxmLl9lbmRlZC5iaW5kKHNlbGYsIHNvdW5kKSwgdGltZW91dCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1hcmsgdGhlIG5vZGUgYXMgcGF1c2VkLlxuICAgICAgaWYgKHNlbGYuX3dlYkF1ZGlvICYmICFsb29wKSB7XG4gICAgICAgIHNvdW5kLl9wYXVzZWQgPSB0cnVlO1xuICAgICAgICBzb3VuZC5fZW5kZWQgPSB0cnVlO1xuICAgICAgICBzb3VuZC5fc2VlayA9IHNvdW5kLl9zdGFydCB8fCAwO1xuICAgICAgICBzb3VuZC5fcmF0ZVNlZWsgPSAwO1xuICAgICAgICBzZWxmLl9jbGVhclRpbWVyKHNvdW5kLl9pZCk7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICAgIHNlbGYuX2NsZWFuQnVmZmVyKHNvdW5kLl9ub2RlKTtcblxuICAgICAgICAvLyBBdHRlbXB0IHRvIGF1dG8tc3VzcGVuZCBBdWRpb0NvbnRleHQgaWYgbm8gc291bmRzIGFyZSBzdGlsbCBwbGF5aW5nLlxuICAgICAgICBIb3dsZXIuX2F1dG9TdXNwZW5kKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdoZW4gdXNpbmcgYSBzcHJpdGUsIGVuZCB0aGUgdHJhY2suXG4gICAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvICYmICFsb29wKSB7XG4gICAgICAgIHNlbGYuc3RvcChzb3VuZC5faWQsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGVuZCB0aW1lciBmb3IgYSBzb3VuZCBwbGF5YmFjay5cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIFRoZSBzb3VuZCBJRC5cbiAgICAgKiBAcmV0dXJuIHtIb3dsfVxuICAgICAqL1xuICAgIF9jbGVhclRpbWVyOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBpZiAoc2VsZi5fZW5kVGltZXJzW2lkXSkge1xuICAgICAgICAvLyBDbGVhciB0aGUgdGltZW91dCBvciByZW1vdmUgdGhlIGVuZGVkIGxpc3RlbmVyLlxuICAgICAgICBpZiAodHlwZW9mIHNlbGYuX2VuZFRpbWVyc1tpZF0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc2VsZi5fZW5kVGltZXJzW2lkXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKGlkKTtcbiAgICAgICAgICBpZiAoc291bmQgJiYgc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIHNvdW5kLl9ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgc2VsZi5fZW5kVGltZXJzW2lkXSwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBzZWxmLl9lbmRUaW1lcnNbaWRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBzb3VuZCBpZGVudGlmaWVkIGJ5IHRoaXMgSUQsIG9yIHJldHVybiBudWxsLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgU291bmQgSURcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9ICAgIFNvdW5kIG9iamVjdCBvciBudWxsLlxuICAgICAqL1xuICAgIF9zb3VuZEJ5SWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgc291bmRzIGFuZCBmaW5kIHRoZSBvbmUgd2l0aCB0aGlzIElELlxuICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaWQgPT09IHNlbGYuX3NvdW5kc1tpXS5faWQpIHtcbiAgICAgICAgICByZXR1cm4gc2VsZi5fc291bmRzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYW4gaW5hY3RpdmUgc291bmQgZnJvbSB0aGUgcG9vbCBvciBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAqIEByZXR1cm4ge1NvdW5kfSBTb3VuZCBwbGF5YmFjayBvYmplY3QuXG4gICAgICovXG4gICAgX2luYWN0aXZlU291bmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICBzZWxmLl9kcmFpbigpO1xuXG4gICAgICAvLyBGaW5kIHRoZSBmaXJzdCBpbmFjdGl2ZSBub2RlIHRvIHJlY3ljbGUuXG4gICAgICBmb3IgKHZhciBpPTA7IGk8c2VsZi5fc291bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzZWxmLl9zb3VuZHNbaV0uX2VuZGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYuX3NvdW5kc1tpXS5yZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIG5vIGluYWN0aXZlIG5vZGUgd2FzIGZvdW5kLCBjcmVhdGUgYSBuZXcgb25lLlxuICAgICAgcmV0dXJuIG5ldyBTb3VuZChzZWxmKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhaW4gZXhjZXNzIGluYWN0aXZlIHNvdW5kcyBmcm9tIHRoZSBwb29sLlxuICAgICAqL1xuICAgIF9kcmFpbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgbGltaXQgPSBzZWxmLl9wb29sO1xuICAgICAgdmFyIGNudCA9IDA7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIC8vIElmIHRoZXJlIGFyZSBsZXNzIHNvdW5kcyB0aGFuIHRoZSBtYXggcG9vbCBzaXplLCB3ZSBhcmUgZG9uZS5cbiAgICAgIGlmIChzZWxmLl9zb3VuZHMubGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3VudCB0aGUgbnVtYmVyIG9mIGluYWN0aXZlIHNvdW5kcy5cbiAgICAgIGZvciAoaT0wOyBpPHNlbGYuX3NvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2VsZi5fc291bmRzW2ldLl9lbmRlZCkge1xuICAgICAgICAgIGNudCsrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlbW92ZSBleGNlc3MgaW5hY3RpdmUgc291bmRzLCBnb2luZyBpbiByZXZlcnNlIG9yZGVyLlxuICAgICAgZm9yIChpPXNlbGYuX3NvdW5kcy5sZW5ndGggLSAxOyBpPj0wOyBpLS0pIHtcbiAgICAgICAgaWYgKGNudCA8PSBsaW1pdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxmLl9zb3VuZHNbaV0uX2VuZGVkKSB7XG4gICAgICAgICAgLy8gRGlzY29ubmVjdCB0aGUgYXVkaW8gc291cmNlIHdoZW4gdXNpbmcgV2ViIEF1ZGlvLlxuICAgICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbyAmJiBzZWxmLl9zb3VuZHNbaV0uX25vZGUpIHtcbiAgICAgICAgICAgIHNlbGYuX3NvdW5kc1tpXS5fbm9kZS5kaXNjb25uZWN0KDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJlbW92ZSBzb3VuZHMgdW50aWwgd2UgaGF2ZSB0aGUgcG9vbCBzaXplLlxuICAgICAgICAgIHNlbGYuX3NvdW5kcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgY250LS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBJRCdzIGZyb20gdGhlIHNvdW5kcyBwb29sLlxuICAgICAqIEBwYXJhbSAge051bWJlcn0gaWQgT25seSByZXR1cm4gb25lIElEIGlmIG9uZSBpcyBwYXNzZWQuXG4gICAgICogQHJldHVybiB7QXJyYXl9ICAgIEFycmF5IG9mIElEcy5cbiAgICAgKi9cbiAgICBfZ2V0U291bmRJZHM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBpZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNlbGYuX3NvdW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlkcy5wdXNoKHNlbGYuX3NvdW5kc1tpXS5faWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbaWRdO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBzb3VuZCBiYWNrIGludG8gdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICogQHBhcmFtICB7U291bmR9IHNvdW5kIFRoZSBzb3VuZCBvYmplY3QgdG8gd29yayB3aXRoLlxuICAgICAqIEByZXR1cm4ge0hvd2x9XG4gICAgICovXG4gICAgX3JlZnJlc2hCdWZmZXI6IGZ1bmN0aW9uKHNvdW5kKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIFNldHVwIHRoZSBidWZmZXIgc291cmNlIGZvciBwbGF5YmFjay5cbiAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZSA9IEhvd2xlci5jdHguY3JlYXRlQnVmZmVyU291cmNlKCk7XG4gICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UuYnVmZmVyID0gY2FjaGVbc2VsZi5fc3JjXTtcblxuICAgICAgLy8gQ29ubmVjdCB0byB0aGUgY29ycmVjdCBub2RlLlxuICAgICAgaWYgKHNvdW5kLl9wYW5uZXIpIHtcbiAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmNvbm5lY3Qoc291bmQuX3Bhbm5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UuY29ubmVjdChzb3VuZC5fbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldHVwIGxvb3BpbmcgYW5kIHBsYXliYWNrIHJhdGUuXG4gICAgICBzb3VuZC5fbm9kZS5idWZmZXJTb3VyY2UubG9vcCA9IHNvdW5kLl9sb29wO1xuICAgICAgaWYgKHNvdW5kLl9sb29wKSB7XG4gICAgICAgIHNvdW5kLl9ub2RlLmJ1ZmZlclNvdXJjZS5sb29wU3RhcnQgPSBzb3VuZC5fc3RhcnQgfHwgMDtcbiAgICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLmxvb3BFbmQgPSBzb3VuZC5fc3RvcCB8fCAwO1xuICAgICAgfVxuICAgICAgc291bmQuX25vZGUuYnVmZmVyU291cmNlLnBsYXliYWNrUmF0ZS5zZXRWYWx1ZUF0VGltZShzb3VuZC5fcmF0ZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IG1lbW9yeSBsZWFrcyBieSBjbGVhbmluZyB1cCB0aGUgYnVmZmVyIHNvdXJjZSBhZnRlciBwbGF5YmFjay5cbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG5vZGUgU291bmQncyBhdWRpbyBub2RlIGNvbnRhaW5pbmcgdGhlIGJ1ZmZlciBzb3VyY2UuXG4gICAgICogQHJldHVybiB7SG93bH1cbiAgICAgKi9cbiAgICBfY2xlYW5CdWZmZXI6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBpc0lPUyA9IEhvd2xlci5fbmF2aWdhdG9yICYmIEhvd2xlci5fbmF2aWdhdG9yLnZlbmRvci5pbmRleE9mKCdBcHBsZScpID49IDA7XG5cbiAgICAgIGlmIChIb3dsZXIuX3NjcmF0Y2hCdWZmZXIgJiYgbm9kZS5idWZmZXJTb3VyY2UpIHtcbiAgICAgICAgbm9kZS5idWZmZXJTb3VyY2Uub25lbmRlZCA9IG51bGw7XG4gICAgICAgIG5vZGUuYnVmZmVyU291cmNlLmRpc2Nvbm5lY3QoMCk7XG4gICAgICAgIGlmIChpc0lPUykge1xuICAgICAgICAgIHRyeSB7IG5vZGUuYnVmZmVyU291cmNlLmJ1ZmZlciA9IEhvd2xlci5fc2NyYXRjaEJ1ZmZlcjsgfSBjYXRjaChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLmJ1ZmZlclNvdXJjZSA9IG51bGw7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNvdXJjZSB0byBhIDAtc2Vjb25kIHNpbGVuY2UgdG8gc3RvcCBhbnkgZG93bmxvYWRpbmcgKGV4Y2VwdCBpbiBJRSkuXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBub2RlIEF1ZGlvIG5vZGUgdG8gY2xlYXIuXG4gICAgICovXG4gICAgX2NsZWFyU291bmQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBjaGVja0lFID0gL01TSUUgfFRyaWRlbnRcXC8vLnRlc3QoSG93bGVyLl9uYXZpZ2F0b3IgJiYgSG93bGVyLl9uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIGlmICghY2hlY2tJRSkge1xuICAgICAgICBub2RlLnNyYyA9ICdkYXRhOmF1ZGlvL3dhdjtiYXNlNjQsVWtsR1JpZ0FBQUJYUVZaRlptMTBJQklBQUFBQkFBRUFSS3dBQUloWUFRQUNBQkFBQUFCa1lYUmhBZ0FBQUFFQSc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKiBTaW5nbGUgU291bmQgTWV0aG9kcyAqKi9cbiAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAvKipcbiAgICogU2V0dXAgdGhlIHNvdW5kIG9iamVjdCwgd2hpY2ggZWFjaCBub2RlIGF0dGFjaGVkIHRvIGEgSG93bCBncm91cCBpcyBjb250YWluZWQgaW4uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBob3dsIFRoZSBIb3dsIHBhcmVudCBncm91cC5cbiAgICovXG4gIHZhciBTb3VuZCA9IGZ1bmN0aW9uKGhvd2wpIHtcbiAgICB0aGlzLl9wYXJlbnQgPSBob3dsO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9O1xuICBTb3VuZC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBhIG5ldyBTb3VuZCBvYmplY3QuXG4gICAgICogQHJldHVybiB7U291bmR9XG4gICAgICovXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcGFyZW50ID0gc2VsZi5fcGFyZW50O1xuXG4gICAgICAvLyBTZXR1cCB0aGUgZGVmYXVsdCBwYXJhbWV0ZXJzLlxuICAgICAgc2VsZi5fbXV0ZWQgPSBwYXJlbnQuX211dGVkO1xuICAgICAgc2VsZi5fbG9vcCA9IHBhcmVudC5fbG9vcDtcbiAgICAgIHNlbGYuX3ZvbHVtZSA9IHBhcmVudC5fdm9sdW1lO1xuICAgICAgc2VsZi5fcmF0ZSA9IHBhcmVudC5fcmF0ZTtcbiAgICAgIHNlbGYuX3NlZWsgPSAwO1xuICAgICAgc2VsZi5fcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZTtcbiAgICAgIHNlbGYuX3Nwcml0ZSA9ICdfX2RlZmF1bHQnO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBJRCBmb3IgdGhpcyBzb3VuZC5cbiAgICAgIHNlbGYuX2lkID0gKytIb3dsZXIuX2NvdW50ZXI7XG5cbiAgICAgIC8vIEFkZCBpdHNlbGYgdG8gdGhlIHBhcmVudCdzIHBvb2wuXG4gICAgICBwYXJlbnQuX3NvdW5kcy5wdXNoKHNlbGYpO1xuXG4gICAgICAvLyBDcmVhdGUgdGhlIG5ldyBub2RlLlxuICAgICAgc2VsZi5jcmVhdGUoKTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgc2V0dXAgYSBuZXcgc291bmQgb2JqZWN0LCB3aGV0aGVyIEhUTUw1IEF1ZGlvIG9yIFdlYiBBdWRpby5cbiAgICAgKiBAcmV0dXJuIHtTb3VuZH1cbiAgICAgKi9cbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcbiAgICAgIHZhciB2b2x1bWUgPSAoSG93bGVyLl9tdXRlZCB8fCBzZWxmLl9tdXRlZCB8fCBzZWxmLl9wYXJlbnQuX211dGVkKSA/IDAgOiBzZWxmLl92b2x1bWU7XG5cbiAgICAgIGlmIChwYXJlbnQuX3dlYkF1ZGlvKSB7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgZ2FpbiBub2RlIGZvciBjb250cm9sbGluZyB2b2x1bWUgKHRoZSBzb3VyY2Ugd2lsbCBjb25uZWN0IHRvIHRoaXMpLlxuICAgICAgICBzZWxmLl9ub2RlID0gKHR5cGVvZiBIb3dsZXIuY3R4LmNyZWF0ZUdhaW4gPT09ICd1bmRlZmluZWQnKSA/IEhvd2xlci5jdHguY3JlYXRlR2Fpbk5vZGUoKSA6IEhvd2xlci5jdHguY3JlYXRlR2FpbigpO1xuICAgICAgICBzZWxmLl9ub2RlLmdhaW4uc2V0VmFsdWVBdFRpbWUodm9sdW1lLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgc2VsZi5fbm9kZS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICBzZWxmLl9ub2RlLmNvbm5lY3QoSG93bGVyLm1hc3RlckdhaW4pO1xuICAgICAgfSBlbHNlIGlmICghSG93bGVyLm5vQXVkaW8pIHtcbiAgICAgICAgLy8gR2V0IGFuIHVubG9ja2VkIEF1ZGlvIG9iamVjdCBmcm9tIHRoZSBwb29sLlxuICAgICAgICBzZWxmLl9ub2RlID0gSG93bGVyLl9vYnRhaW5IdG1sNUF1ZGlvKCk7XG5cbiAgICAgICAgLy8gTGlzdGVuIGZvciBlcnJvcnMgKGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMtYXV0aG9yLXZpZXcvc3BlYy5odG1sI21lZGlhZXJyb3IpLlxuICAgICAgICBzZWxmLl9lcnJvckZuID0gc2VsZi5fZXJyb3JMaXN0ZW5lci5iaW5kKHNlbGYpO1xuICAgICAgICBzZWxmLl9ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgc2VsZi5fZXJyb3JGbiwgZmFsc2UpO1xuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgJ2NhbnBsYXl0aHJvdWdoJyBldmVudCB0byBsZXQgdXMga25vdyB0aGUgc291bmQgaXMgcmVhZHkuXG4gICAgICAgIHNlbGYuX2xvYWRGbiA9IHNlbGYuX2xvYWRMaXN0ZW5lci5iaW5kKHNlbGYpO1xuICAgICAgICBzZWxmLl9ub2RlLmFkZEV2ZW50TGlzdGVuZXIoSG93bGVyLl9jYW5QbGF5RXZlbnQsIHNlbGYuX2xvYWRGbiwgZmFsc2UpO1xuXG4gICAgICAgIC8vIExpc3RlbiBmb3IgdGhlICdlbmRlZCcgZXZlbnQgb24gdGhlIHNvdW5kIHRvIGFjY291bnQgZm9yIGVkZ2UtY2FzZSB3aGVyZVxuICAgICAgICAvLyBhIGZpbml0ZSBzb3VuZCBoYXMgYSBkdXJhdGlvbiBvZiBJbmZpbml0eS5cbiAgICAgICAgc2VsZi5fZW5kRm4gPSBzZWxmLl9lbmRMaXN0ZW5lci5iaW5kKHNlbGYpO1xuICAgICAgICBzZWxmLl9ub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgc2VsZi5fZW5kRm4sIGZhbHNlKTtcblxuICAgICAgICAvLyBTZXR1cCB0aGUgbmV3IGF1ZGlvIG5vZGUuXG4gICAgICAgIHNlbGYuX25vZGUuc3JjID0gcGFyZW50Ll9zcmM7XG4gICAgICAgIHNlbGYuX25vZGUucHJlbG9hZCA9IHBhcmVudC5fcHJlbG9hZCA9PT0gdHJ1ZSA/ICdhdXRvJyA6IHBhcmVudC5fcHJlbG9hZDtcbiAgICAgICAgc2VsZi5fbm9kZS52b2x1bWUgPSB2b2x1bWUgKiBIb3dsZXIudm9sdW1lKCk7XG5cbiAgICAgICAgLy8gQmVnaW4gbG9hZGluZyB0aGUgc291cmNlLlxuICAgICAgICBzZWxmLl9ub2RlLmxvYWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBwYXJhbWV0ZXJzIG9mIHRoaXMgc291bmQgdG8gdGhlIG9yaWdpbmFsIHN0YXRlIChmb3IgcmVjeWNsZSkuXG4gICAgICogQHJldHVybiB7U291bmR9XG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gUmVzZXQgYWxsIG9mIHRoZSBwYXJhbWV0ZXJzIG9mIHRoaXMgc291bmQuXG4gICAgICBzZWxmLl9tdXRlZCA9IHBhcmVudC5fbXV0ZWQ7XG4gICAgICBzZWxmLl9sb29wID0gcGFyZW50Ll9sb29wO1xuICAgICAgc2VsZi5fdm9sdW1lID0gcGFyZW50Ll92b2x1bWU7XG4gICAgICBzZWxmLl9yYXRlID0gcGFyZW50Ll9yYXRlO1xuICAgICAgc2VsZi5fc2VlayA9IDA7XG4gICAgICBzZWxmLl9yYXRlU2VlayA9IDA7XG4gICAgICBzZWxmLl9wYXVzZWQgPSB0cnVlO1xuICAgICAgc2VsZi5fZW5kZWQgPSB0cnVlO1xuICAgICAgc2VsZi5fc3ByaXRlID0gJ19fZGVmYXVsdCc7XG5cbiAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IElEIHNvIHRoYXQgaXQgaXNuJ3QgY29uZnVzZWQgd2l0aCB0aGUgcHJldmlvdXMgc291bmQuXG4gICAgICBzZWxmLl9pZCA9ICsrSG93bGVyLl9jb3VudGVyO1xuXG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSFRNTDUgQXVkaW8gZXJyb3IgbGlzdGVuZXIgY2FsbGJhY2suXG4gICAgICovXG4gICAgX2Vycm9yTGlzdGVuZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgICAvLyBGaXJlIGFuIGVycm9yIGV2ZW50IGFuZCBwYXNzIGJhY2sgdGhlIGNvZGUuXG4gICAgICBzZWxmLl9wYXJlbnQuX2VtaXQoJ2xvYWRlcnJvcicsIHNlbGYuX2lkLCBzZWxmLl9ub2RlLmVycm9yID8gc2VsZi5fbm9kZS5lcnJvci5jb2RlIDogMCk7XG5cbiAgICAgIC8vIENsZWFyIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIHNlbGYuX25vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBzZWxmLl9lcnJvckZuLCBmYWxzZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhUTUw1IEF1ZGlvIGNhbnBsYXl0aHJvdWdoIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIF9sb2FkTGlzdGVuZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gUm91bmQgdXAgdGhlIGR1cmF0aW9uIHRvIGFjY291bnQgZm9yIHRoZSBsb3dlciBwcmVjaXNpb24gaW4gSFRNTDUgQXVkaW8uXG4gICAgICBwYXJlbnQuX2R1cmF0aW9uID0gTWF0aC5jZWlsKHNlbGYuX25vZGUuZHVyYXRpb24gKiAxMCkgLyAxMDtcblxuICAgICAgLy8gU2V0dXAgYSBzcHJpdGUgaWYgbm9uZSBpcyBkZWZpbmVkLlxuICAgICAgaWYgKE9iamVjdC5rZXlzKHBhcmVudC5fc3ByaXRlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcGFyZW50Ll9zcHJpdGUgPSB7X19kZWZhdWx0OiBbMCwgcGFyZW50Ll9kdXJhdGlvbiAqIDEwMDBdfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudC5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgIHBhcmVudC5fc3RhdGUgPSAnbG9hZGVkJztcbiAgICAgICAgcGFyZW50Ll9lbWl0KCdsb2FkJyk7XG4gICAgICAgIHBhcmVudC5fbG9hZFF1ZXVlKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIHRoZSBldmVudCBsaXN0ZW5lci5cbiAgICAgIHNlbGYuX25vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihIb3dsZXIuX2NhblBsYXlFdmVudCwgc2VsZi5fbG9hZEZuLCBmYWxzZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhUTUw1IEF1ZGlvIGVuZGVkIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIF9lbmRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgcGFyZW50ID0gc2VsZi5fcGFyZW50O1xuXG4gICAgICAvLyBPbmx5IGhhbmRsZSB0aGUgYGVuZGVkYGAgZXZlbnQgaWYgdGhlIGR1cmF0aW9uIGlzIEluZmluaXR5LlxuICAgICAgaWYgKHBhcmVudC5fZHVyYXRpb24gPT09IEluZmluaXR5KSB7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcGFyZW50IGR1cmF0aW9uIHRvIG1hdGNoIHRoZSByZWFsIGF1ZGlvIGR1cmF0aW9uLlxuICAgICAgICAvLyBSb3VuZCB1cCB0aGUgZHVyYXRpb24gdG8gYWNjb3VudCBmb3IgdGhlIGxvd2VyIHByZWNpc2lvbiBpbiBIVE1MNSBBdWRpby5cbiAgICAgICAgcGFyZW50Ll9kdXJhdGlvbiA9IE1hdGguY2VpbChzZWxmLl9ub2RlLmR1cmF0aW9uICogMTApIC8gMTA7XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSBzcHJpdGUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgcmVhbCBkdXJhdGlvbi5cbiAgICAgICAgaWYgKHBhcmVudC5fc3ByaXRlLl9fZGVmYXVsdFsxXSA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICBwYXJlbnQuX3Nwcml0ZS5fX2RlZmF1bHRbMV0gPSBwYXJlbnQuX2R1cmF0aW9uICogMTAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biB0aGUgcmVndWxhciBlbmRlZCBtZXRob2QuXG4gICAgICAgIHBhcmVudC5fZW5kZWQoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIHRoZSBldmVudCBsaXN0ZW5lciBzaW5jZSB0aGUgZHVyYXRpb24gaXMgbm93IGNvcnJlY3QuXG4gICAgICBzZWxmLl9ub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgc2VsZi5fZW5kRm4sIGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqIEhlbHBlciBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIHZhciBjYWNoZSA9IHt9O1xuXG4gIC8qKlxuICAgKiBCdWZmZXIgYSBzb3VuZCBmcm9tIFVSTCwgRGF0YSBVUkkgb3IgY2FjaGUgYW5kIGRlY29kZSB0byBhdWRpbyBzb3VyY2UgKFdlYiBBdWRpbyBBUEkpLlxuICAgKiBAcGFyYW0gIHtIb3dsfSBzZWxmXG4gICAqL1xuICB2YXIgbG9hZEJ1ZmZlciA9IGZ1bmN0aW9uKHNlbGYpIHtcbiAgICB2YXIgdXJsID0gc2VsZi5fc3JjO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGJ1ZmZlciBoYXMgYWxyZWFkeSBiZWVuIGNhY2hlZCBhbmQgdXNlIGl0IGluc3RlYWQuXG4gICAgaWYgKGNhY2hlW3VybF0pIHtcbiAgICAgIC8vIFNldCB0aGUgZHVyYXRpb24gZnJvbSB0aGUgY2FjaGUuXG4gICAgICBzZWxmLl9kdXJhdGlvbiA9IGNhY2hlW3VybF0uZHVyYXRpb247XG5cbiAgICAgIC8vIExvYWQgdGhlIHNvdW5kIGludG8gdGhpcyBIb3dsLlxuICAgICAgbG9hZFNvdW5kKHNlbGYpO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKC9eZGF0YTpbXjtdKztiYXNlNjQsLy50ZXN0KHVybCkpIHtcbiAgICAgIC8vIERlY29kZSB0aGUgYmFzZTY0IGRhdGEgVVJJIHdpdGhvdXQgWEhSLCBzaW5jZSBzb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICB2YXIgZGF0YSA9IGF0b2IodXJsLnNwbGl0KCcsJylbMV0pO1xuICAgICAgdmFyIGRhdGFWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgZGF0YVZpZXdbaV0gPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgICB9XG5cbiAgICAgIGRlY29kZUF1ZGlvRGF0YShkYXRhVmlldy5idWZmZXIsIHNlbGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMb2FkIHRoZSBidWZmZXIgZnJvbSB0aGUgVVJMLlxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oc2VsZi5feGhyLm1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSBzZWxmLl94aHIud2l0aENyZWRlbnRpYWxzO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG5cbiAgICAgIC8vIEFwcGx5IGFueSBjdXN0b20gaGVhZGVycyB0byB0aGUgcmVxdWVzdC5cbiAgICAgIGlmIChzZWxmLl94aHIuaGVhZGVycykge1xuICAgICAgICBPYmplY3Qua2V5cyhzZWxmLl94aHIuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHNlbGYuX3hoci5oZWFkZXJzW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZ2V0IGEgc3VjY2Vzc2Z1bCByZXNwb25zZSBiYWNrLlxuICAgICAgICB2YXIgY29kZSA9ICh4aHIuc3RhdHVzICsgJycpWzBdO1xuICAgICAgICBpZiAoY29kZSAhPT0gJzAnICYmIGNvZGUgIT09ICcyJyAmJiBjb2RlICE9PSAnMycpIHtcbiAgICAgICAgICBzZWxmLl9lbWl0KCdsb2FkZXJyb3InLCBudWxsLCAnRmFpbGVkIGxvYWRpbmcgYXVkaW8gZmlsZSB3aXRoIHN0YXR1czogJyArIHhoci5zdGF0dXMgKyAnLicpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlY29kZUF1ZGlvRGF0YSh4aHIucmVzcG9uc2UsIHNlbGYpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGVycm9yLCBzd2l0Y2ggdG8gSFRNTDUgQXVkaW8uXG4gICAgICAgIGlmIChzZWxmLl93ZWJBdWRpbykge1xuICAgICAgICAgIHNlbGYuX2h0bWw1ID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLl93ZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYuX3NvdW5kcyA9IFtdO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZVt1cmxdO1xuICAgICAgICAgIHNlbGYubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgc2FmZVhoclNlbmQoeGhyKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNlbmQgdGhlIFhIUiByZXF1ZXN0IHdyYXBwZWQgaW4gYSB0cnkvY2F0Y2guXG4gICAqIEBwYXJhbSAge09iamVjdH0geGhyIFhIUiB0byBzZW5kLlxuICAgKi9cbiAgdmFyIHNhZmVYaHJTZW5kID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgeGhyLm9uZXJyb3IoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERlY29kZSBhdWRpbyBkYXRhIGZyb20gYW4gYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gIHtBcnJheUJ1ZmZlcn0gYXJyYXlidWZmZXIgVGhlIGF1ZGlvIGRhdGEuXG4gICAqIEBwYXJhbSAge0hvd2x9ICAgICAgICBzZWxmXG4gICAqL1xuICB2YXIgZGVjb2RlQXVkaW9EYXRhID0gZnVuY3Rpb24oYXJyYXlidWZmZXIsIHNlbGYpIHtcbiAgICAvLyBGaXJlIGEgbG9hZCBlcnJvciBpZiBzb21ldGhpbmcgYnJva2UuXG4gICAgdmFyIGVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLl9lbWl0KCdsb2FkZXJyb3InLCBudWxsLCAnRGVjb2RpbmcgYXVkaW8gZGF0YSBmYWlsZWQuJyk7XG4gICAgfTtcblxuICAgIC8vIExvYWQgdGhlIHNvdW5kIG9uIHN1Y2Nlc3MuXG4gICAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgICAgIGlmIChidWZmZXIgJiYgc2VsZi5fc291bmRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY2FjaGVbc2VsZi5fc3JjXSA9IGJ1ZmZlcjtcbiAgICAgICAgbG9hZFNvdW5kKHNlbGYsIGJ1ZmZlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBEZWNvZGUgdGhlIGJ1ZmZlciBpbnRvIGFuIGF1ZGlvIHNvdXJjZS5cbiAgICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIEhvd2xlci5jdHguZGVjb2RlQXVkaW9EYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgSG93bGVyLmN0eC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlidWZmZXIpLnRoZW4oc3VjY2VzcykuY2F0Y2goZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBIb3dsZXIuY3R4LmRlY29kZUF1ZGlvRGF0YShhcnJheWJ1ZmZlciwgc3VjY2VzcywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTb3VuZCBpcyBub3cgbG9hZGVkLCBzbyBmaW5pc2ggc2V0dGluZyBldmVyeXRoaW5nIHVwIGFuZCBmaXJlIHRoZSBsb2FkZWQgZXZlbnQuXG4gICAqIEBwYXJhbSAge0hvd2x9IHNlbGZcbiAgICogQHBhcmFtICB7T2JqZWN0fSBidWZmZXIgVGhlIGRlY29kZWQgYnVmZmVyIHNvdW5kIHNvdXJjZS5cbiAgICovXG4gIHZhciBsb2FkU291bmQgPSBmdW5jdGlvbihzZWxmLCBidWZmZXIpIHtcbiAgICAvLyBTZXQgdGhlIGR1cmF0aW9uLlxuICAgIGlmIChidWZmZXIgJiYgIXNlbGYuX2R1cmF0aW9uKSB7XG4gICAgICBzZWxmLl9kdXJhdGlvbiA9IGJ1ZmZlci5kdXJhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBTZXR1cCBhIHNwcml0ZSBpZiBub25lIGlzIGRlZmluZWQuXG4gICAgaWYgKE9iamVjdC5rZXlzKHNlbGYuX3Nwcml0ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9zcHJpdGUgPSB7X19kZWZhdWx0OiBbMCwgc2VsZi5fZHVyYXRpb24gKiAxMDAwXX07XG4gICAgfVxuXG4gICAgLy8gRmlyZSB0aGUgbG9hZGVkIGV2ZW50LlxuICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgIHNlbGYuX3N0YXRlID0gJ2xvYWRlZCc7XG4gICAgICBzZWxmLl9lbWl0KCdsb2FkJyk7XG4gICAgICBzZWxmLl9sb2FkUXVldWUoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHVwIHRoZSBhdWRpbyBjb250ZXh0IHdoZW4gYXZhaWxhYmxlLCBvciBzd2l0Y2ggdG8gSFRNTDUgQXVkaW8gbW9kZS5cbiAgICovXG4gIHZhciBzZXR1cEF1ZGlvQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIElmIHdlIGhhdmUgYWxyZWFkeSBkZXRlY3RlZCB0aGF0IFdlYiBBdWRpbyBpc24ndCBzdXBwb3J0ZWQsIGRvbid0IHJ1biB0aGlzIHN0ZXAgYWdhaW4uXG4gICAgaWYgKCFIb3dsZXIudXNpbmdXZWJBdWRpbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHdlIGFyZSB1c2luZyBXZWIgQXVkaW8gYW5kIHNldHVwIHRoZSBBdWRpb0NvbnRleHQgaWYgd2UgYXJlLlxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIEF1ZGlvQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgSG93bGVyLmN0eCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdlYmtpdEF1ZGlvQ29udGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgSG93bGVyLmN0eCA9IG5ldyB3ZWJraXRBdWRpb0NvbnRleHQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEhvd2xlci51c2luZ1dlYkF1ZGlvID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICBIb3dsZXIudXNpbmdXZWJBdWRpbyA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBhdWRpbyBjb250ZXh0IGNyZWF0aW9uIHN0aWxsIGZhaWxlZCwgc2V0IHVzaW5nIHdlYiBhdWRpbyB0byBmYWxzZS5cbiAgICBpZiAoIUhvd2xlci5jdHgpIHtcbiAgICAgIEhvd2xlci51c2luZ1dlYkF1ZGlvID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgYSB3ZWJ2aWV3IGlzIGJlaW5nIHVzZWQgb24gaU9TOCBvciBlYXJsaWVyIChyYXRoZXIgdGhhbiB0aGUgYnJvd3NlcikuXG4gICAgLy8gSWYgaXQgaXMsIGRpc2FibGUgV2ViIEF1ZGlvIGFzIGl0IGNhdXNlcyBjcmFzaGluZy5cbiAgICB2YXIgaU9TID0gKC9pUChob25lfG9kfGFkKS8udGVzdChIb3dsZXIuX25hdmlnYXRvciAmJiBIb3dsZXIuX25hdmlnYXRvci5wbGF0Zm9ybSkpO1xuICAgIHZhciBhcHBWZXJzaW9uID0gSG93bGVyLl9uYXZpZ2F0b3IgJiYgSG93bGVyLl9uYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvT1MgKFxcZCspXyhcXGQrKV8/KFxcZCspPy8pO1xuICAgIHZhciB2ZXJzaW9uID0gYXBwVmVyc2lvbiA/IHBhcnNlSW50KGFwcFZlcnNpb25bMV0sIDEwKSA6IG51bGw7XG4gICAgaWYgKGlPUyAmJiB2ZXJzaW9uICYmIHZlcnNpb24gPCA5KSB7XG4gICAgICB2YXIgc2FmYXJpID0gL3NhZmFyaS8udGVzdChIb3dsZXIuX25hdmlnYXRvciAmJiBIb3dsZXIuX25hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XG4gICAgICBpZiAoSG93bGVyLl9uYXZpZ2F0b3IgJiYgIXNhZmFyaSkge1xuICAgICAgICBIb3dsZXIudXNpbmdXZWJBdWRpbyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhbmQgZXhwb3NlIHRoZSBtYXN0ZXIgR2Fpbk5vZGUgd2hlbiB1c2luZyBXZWIgQXVkaW8gKHVzZWZ1bCBmb3IgcGx1Z2lucyBvciBhZHZhbmNlZCB1c2FnZSkuXG4gICAgaWYgKEhvd2xlci51c2luZ1dlYkF1ZGlvKSB7XG4gICAgICBIb3dsZXIubWFzdGVyR2FpbiA9ICh0eXBlb2YgSG93bGVyLmN0eC5jcmVhdGVHYWluID09PSAndW5kZWZpbmVkJykgPyBIb3dsZXIuY3R4LmNyZWF0ZUdhaW5Ob2RlKCkgOiBIb3dsZXIuY3R4LmNyZWF0ZUdhaW4oKTtcbiAgICAgIEhvd2xlci5tYXN0ZXJHYWluLmdhaW4uc2V0VmFsdWVBdFRpbWUoSG93bGVyLl9tdXRlZCA/IDAgOiBIb3dsZXIuX3ZvbHVtZSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICBIb3dsZXIubWFzdGVyR2Fpbi5jb25uZWN0KEhvd2xlci5jdHguZGVzdGluYXRpb24pO1xuICAgIH1cblxuICAgIC8vIFJlLXJ1biB0aGUgc2V0dXAgb24gSG93bGVyLlxuICAgIEhvd2xlci5fc2V0dXAoKTtcbiAgfTtcblxuICAvLyBBZGQgc3VwcG9ydCBmb3IgQU1EIChBc3luY2hyb25vdXMgTW9kdWxlIERlZmluaXRpb24pIGxpYnJhcmllcyBzdWNoIGFzIHJlcXVpcmUuanMuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgSG93bGVyOiBIb3dsZXIsXG4gICAgICAgIEhvd2w6IEhvd2xcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvLyBBZGQgc3VwcG9ydCBmb3IgQ29tbW9uSlMgbGlicmFyaWVzIHN1Y2ggYXMgYnJvd3NlcmlmeS5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGV4cG9ydHMuSG93bGVyID0gSG93bGVyO1xuICAgIGV4cG9ydHMuSG93bCA9IEhvd2w7XG4gIH1cblxuICAvLyBBZGQgdG8gZ2xvYmFsIGluIE5vZGUuanMgKGZvciB0ZXN0aW5nLCBldGMpLlxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnbG9iYWwuSG93bGVyR2xvYmFsID0gSG93bGVyR2xvYmFsO1xuICAgIGdsb2JhbC5Ib3dsZXIgPSBIb3dsZXI7XG4gICAgZ2xvYmFsLkhvd2wgPSBIb3dsO1xuICAgIGdsb2JhbC5Tb3VuZCA9IFNvdW5kO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7ICAvLyBEZWZpbmUgZ2xvYmFsbHkgaW4gY2FzZSBBTUQgaXMgbm90IGF2YWlsYWJsZSBvciB1bnVzZWQuXG4gICAgd2luZG93Lkhvd2xlckdsb2JhbCA9IEhvd2xlckdsb2JhbDtcbiAgICB3aW5kb3cuSG93bGVyID0gSG93bGVyO1xuICAgIHdpbmRvdy5Ib3dsID0gSG93bDtcbiAgICB3aW5kb3cuU291bmQgPSBTb3VuZDtcbiAgfVxufSkoKTtcblxuXG4vKiFcbiAqICBTcGF0aWFsIFBsdWdpbiAtIEFkZHMgc3VwcG9ydCBmb3Igc3RlcmVvIGFuZCAzRCBhdWRpbyB3aGVyZSBXZWIgQXVkaW8gaXMgc3VwcG9ydGVkLlxuICogIFxuICogIGhvd2xlci5qcyB2Mi4yLjNcbiAqICBob3dsZXJqcy5jb21cbiAqXG4gKiAgKGMpIDIwMTMtMjAyMCwgSmFtZXMgU2ltcHNvbiBvZiBHb2xkRmlyZSBTdHVkaW9zXG4gKiAgZ29sZGZpcmVzdHVkaW9zLmNvbVxuICpcbiAqICBNSVQgTGljZW5zZVxuICovXG5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gU2V0dXAgZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBIb3dsZXJHbG9iYWwucHJvdG90eXBlLl9wb3MgPSBbMCwgMCwgMF07XG4gIEhvd2xlckdsb2JhbC5wcm90b3R5cGUuX29yaWVudGF0aW9uID0gWzAsIDAsIC0xLCAwLCAxLCAwXTtcblxuICAvKiogR2xvYmFsIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2QgdG8gdXBkYXRlIHRoZSBzdGVyZW8gcGFubmluZyBwb3NpdGlvbiBvZiBhbGwgY3VycmVudCBIb3dscy5cbiAgICogRnV0dXJlIEhvd2xzIHdpbGwgbm90IHVzZSB0aGlzIHZhbHVlIHVubGVzcyBleHBsaWNpdGx5IHNldC5cbiAgICogQHBhcmFtICB7TnVtYmVyfSBwYW4gQSB2YWx1ZSBvZiAtMS4wIGlzIGFsbCB0aGUgd2F5IGxlZnQgYW5kIDEuMCBpcyBhbGwgdGhlIHdheSByaWdodC5cbiAgICogQHJldHVybiB7SG93bGVyL051bWJlcn0gICAgIFNlbGYgb3IgY3VycmVudCBzdGVyZW8gcGFubmluZyB2YWx1ZS5cbiAgICovXG4gIEhvd2xlckdsb2JhbC5wcm90b3R5cGUuc3RlcmVvID0gZnVuY3Rpb24ocGFuKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3RvcCByaWdodCBoZXJlIGlmIG5vdCB1c2luZyBXZWIgQXVkaW8uXG4gICAgaWYgKCFzZWxmLmN0eCB8fCAhc2VsZi5jdHgubGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgSG93bHMgYW5kIHVwZGF0ZSB0aGVpciBzdGVyZW8gcGFubmluZy5cbiAgICBmb3IgKHZhciBpPXNlbGYuX2hvd2xzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgIHNlbGYuX2hvd2xzW2ldLnN0ZXJlbyhwYW4pO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbGlzdGVuZXIgaW4gM0QgY2FydGVzaWFuIHNwYWNlLiBTb3VuZHMgdXNpbmdcbiAgICogM0QgcG9zaXRpb24gd2lsbCBiZSByZWxhdGl2ZSB0byB0aGUgbGlzdGVuZXIncyBwb3NpdGlvbi5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB4IFRoZSB4LXBvc2l0aW9uIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB5IFRoZSB5LXBvc2l0aW9uIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB6IFRoZSB6LXBvc2l0aW9uIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7SG93bGVyL0FycmF5fSAgIFNlbGYgb3IgY3VycmVudCBsaXN0ZW5lciBwb3NpdGlvbi5cbiAgICovXG4gIEhvd2xlckdsb2JhbC5wcm90b3R5cGUucG9zID0gZnVuY3Rpb24oeCwgeSwgeikge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5jdHggfHwgIXNlbGYuY3R4Lmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBTZXQgdGhlIGRlZmF1bHRzIGZvciBvcHRpb25hbCAneScgJiAneicuXG4gICAgeSA9ICh0eXBlb2YgeSAhPT0gJ251bWJlcicpID8gc2VsZi5fcG9zWzFdIDogeTtcbiAgICB6ID0gKHR5cGVvZiB6ICE9PSAnbnVtYmVyJykgPyBzZWxmLl9wb3NbMl0gOiB6O1xuXG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgc2VsZi5fcG9zID0gW3gsIHksIHpdO1xuXG4gICAgICBpZiAodHlwZW9mIHNlbGYuY3R4Lmxpc3RlbmVyLnBvc2l0aW9uWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIucG9zaXRpb25YLnNldFRhcmdldEF0VGltZShzZWxmLl9wb3NbMF0sIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnBvc2l0aW9uWS5zZXRUYXJnZXRBdFRpbWUoc2VsZi5fcG9zWzFdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5wb3NpdGlvblouc2V0VGFyZ2V0QXRUaW1lKHNlbGYuX3Bvc1syXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnNldFBvc2l0aW9uKHNlbGYuX3Bvc1swXSwgc2VsZi5fcG9zWzFdLCBzZWxmLl9wb3NbMl0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2VsZi5fcG9zO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHRoZSBkaXJlY3Rpb24gdGhlIGxpc3RlbmVyIGlzIHBvaW50aW5nIGluIHRoZSAzRCBjYXJ0ZXNpYW4gc3BhY2UuXG4gICAqIEEgZnJvbnQgYW5kIHVwIHZlY3RvciBtdXN0IGJlIHByb3ZpZGVkLiBUaGUgZnJvbnQgaXMgdGhlIGRpcmVjdGlvbiB0aGVcbiAgICogZmFjZSBvZiB0aGUgbGlzdGVuZXIgaXMgcG9pbnRpbmcsIGFuZCB1cCBpcyB0aGUgZGlyZWN0aW9uIHRoZSB0b3Agb2YgdGhlXG4gICAqIGxpc3RlbmVyIGlzIHBvaW50aW5nLiBUaHVzLCB0aGVzZSB2YWx1ZXMgYXJlIGV4cGVjdGVkIHRvIGJlIGF0IHJpZ2h0IGFuZ2xlc1xuICAgKiBmcm9tIGVhY2ggb3RoZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geCAgIFRoZSB4LW9yaWVudGF0aW9uIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB5ICAgVGhlIHktb3JpZW50YXRpb24gb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHogICBUaGUgei1vcmllbnRhdGlvbiBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSAge051bWJlcn0geFVwIFRoZSB4LW9yaWVudGF0aW9uIG9mIHRoZSB0b3Agb2YgdGhlIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHlVcCBUaGUgeS1vcmllbnRhdGlvbiBvZiB0aGUgdG9wIG9mIHRoZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB6VXAgVGhlIHotb3JpZW50YXRpb24gb2YgdGhlIHRvcCBvZiB0aGUgbGlzdGVuZXIuXG4gICAqIEByZXR1cm4ge0hvd2xlci9BcnJheX0gICAgIFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCBvcmllbnRhdGlvbiB2ZWN0b3JzLlxuICAgKi9cbiAgSG93bGVyR2xvYmFsLnByb3RvdHlwZS5vcmllbnRhdGlvbiA9IGZ1bmN0aW9uKHgsIHksIHosIHhVcCwgeVVwLCB6VXApIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuY3R4IHx8ICFzZWxmLmN0eC5saXN0ZW5lcikge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0cyBmb3Igb3B0aW9uYWwgJ3knICYgJ3onLlxuICAgIHZhciBvciA9IHNlbGYuX29yaWVudGF0aW9uO1xuICAgIHkgPSAodHlwZW9mIHkgIT09ICdudW1iZXInKSA/IG9yWzFdIDogeTtcbiAgICB6ID0gKHR5cGVvZiB6ICE9PSAnbnVtYmVyJykgPyBvclsyXSA6IHo7XG4gICAgeFVwID0gKHR5cGVvZiB4VXAgIT09ICdudW1iZXInKSA/IG9yWzNdIDogeFVwO1xuICAgIHlVcCA9ICh0eXBlb2YgeVVwICE9PSAnbnVtYmVyJykgPyBvcls0XSA6IHlVcDtcbiAgICB6VXAgPSAodHlwZW9mIHpVcCAhPT0gJ251bWJlcicpID8gb3JbNV0gOiB6VXA7XG5cbiAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICBzZWxmLl9vcmllbnRhdGlvbiA9IFt4LCB5LCB6LCB4VXAsIHlVcCwgelVwXTtcblxuICAgICAgaWYgKHR5cGVvZiBzZWxmLmN0eC5saXN0ZW5lci5mb3J3YXJkWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIuZm9yd2FyZFguc2V0VGFyZ2V0QXRUaW1lKHgsIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLmZvcndhcmRZLnNldFRhcmdldEF0VGltZSh5LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci5mb3J3YXJkWi5zZXRUYXJnZXRBdFRpbWUoeiwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgICAgc2VsZi5jdHgubGlzdGVuZXIudXBYLnNldFRhcmdldEF0VGltZSh4VXAsIEhvd2xlci5jdHguY3VycmVudFRpbWUsIDAuMSk7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnVwWS5zZXRUYXJnZXRBdFRpbWUoeVVwLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lLCAwLjEpO1xuICAgICAgICBzZWxmLmN0eC5saXN0ZW5lci51cFouc2V0VGFyZ2V0QXRUaW1lKHpVcCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSwgMC4xKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuY3R4Lmxpc3RlbmVyLnNldE9yaWVudGF0aW9uKHgsIHksIHosIHhVcCwgeVVwLCB6VXApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqIEdyb3VwIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIEFkZCBuZXcgcHJvcGVydGllcyB0byB0aGUgY29yZSBpbml0LlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gX3N1cGVyIENvcmUgaW5pdCBtZXRob2QuXG4gICAqIEByZXR1cm4ge0hvd2x9XG4gICAqL1xuICBIb3dsLnByb3RvdHlwZS5pbml0ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbihvKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIC8vIFNldHVwIHVzZXItZGVmaW5lZCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICBzZWxmLl9vcmllbnRhdGlvbiA9IG8ub3JpZW50YXRpb24gfHwgWzEsIDAsIDBdO1xuICAgICAgc2VsZi5fc3RlcmVvID0gby5zdGVyZW8gfHwgbnVsbDtcbiAgICAgIHNlbGYuX3BvcyA9IG8ucG9zIHx8IG51bGw7XG4gICAgICBzZWxmLl9wYW5uZXJBdHRyID0ge1xuICAgICAgICBjb25lSW5uZXJBbmdsZTogdHlwZW9mIG8uY29uZUlubmVyQW5nbGUgIT09ICd1bmRlZmluZWQnID8gby5jb25lSW5uZXJBbmdsZSA6IDM2MCxcbiAgICAgICAgY29uZU91dGVyQW5nbGU6IHR5cGVvZiBvLmNvbmVPdXRlckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8uY29uZU91dGVyQW5nbGUgOiAzNjAsXG4gICAgICAgIGNvbmVPdXRlckdhaW46IHR5cGVvZiBvLmNvbmVPdXRlckdhaW4gIT09ICd1bmRlZmluZWQnID8gby5jb25lT3V0ZXJHYWluIDogMCxcbiAgICAgICAgZGlzdGFuY2VNb2RlbDogdHlwZW9mIG8uZGlzdGFuY2VNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLmRpc3RhbmNlTW9kZWwgOiAnaW52ZXJzZScsXG4gICAgICAgIG1heERpc3RhbmNlOiB0eXBlb2Ygby5tYXhEaXN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLm1heERpc3RhbmNlIDogMTAwMDAsXG4gICAgICAgIHBhbm5pbmdNb2RlbDogdHlwZW9mIG8ucGFubmluZ01vZGVsICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmluZ01vZGVsIDogJ0hSVEYnLFxuICAgICAgICByZWZEaXN0YW5jZTogdHlwZW9mIG8ucmVmRGlzdGFuY2UgIT09ICd1bmRlZmluZWQnID8gby5yZWZEaXN0YW5jZSA6IDEsXG4gICAgICAgIHJvbGxvZmZGYWN0b3I6IHR5cGVvZiBvLnJvbGxvZmZGYWN0b3IgIT09ICd1bmRlZmluZWQnID8gby5yb2xsb2ZmRmFjdG9yIDogMVxuICAgICAgfTtcblxuICAgICAgLy8gU2V0dXAgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgc2VsZi5fb25zdGVyZW8gPSBvLm9uc3RlcmVvID8gW3tmbjogby5vbnN0ZXJlb31dIDogW107XG4gICAgICBzZWxmLl9vbnBvcyA9IG8ub25wb3MgPyBbe2ZuOiBvLm9ucG9zfV0gOiBbXTtcbiAgICAgIHNlbGYuX29ub3JpZW50YXRpb24gPSBvLm9ub3JpZW50YXRpb24gPyBbe2ZuOiBvLm9ub3JpZW50YXRpb259XSA6IFtdO1xuXG4gICAgICAvLyBDb21wbGV0ZSBpbml0aWxpemF0aW9uIHdpdGggaG93bGVyLmpzIGNvcmUncyBpbml0IGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIG8pO1xuICAgIH07XG4gIH0pKEhvd2wucHJvdG90eXBlLmluaXQpO1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHRoZSBzdGVyZW8gcGFubmluZyBvZiB0aGUgYXVkaW8gc291cmNlIGZvciB0aGlzIHNvdW5kIG9yIGFsbCBpbiB0aGUgZ3JvdXAuXG4gICAqIEBwYXJhbSAge051bWJlcn0gcGFuICBBIHZhbHVlIG9mIC0xLjAgaXMgYWxsIHRoZSB3YXkgbGVmdCBhbmQgMS4wIGlzIGFsbCB0aGUgd2F5IHJpZ2h0LlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGlkIChvcHRpb25hbCkgVGhlIHNvdW5kIElELiBJZiBub25lIGlzIHBhc3NlZCwgYWxsIGluIGdyb3VwIHdpbGwgYmUgdXBkYXRlZC5cbiAgICogQHJldHVybiB7SG93bC9OdW1iZXJ9ICAgIFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCBzdGVyZW8gcGFubmluZyB2YWx1ZS5cbiAgICovXG4gIEhvd2wucHJvdG90eXBlLnN0ZXJlbyA9IGZ1bmN0aW9uKHBhbiwgaWQpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgc291bmQgaGFzbid0IGxvYWRlZCwgYWRkIGl0IHRvIHRoZSBsb2FkIHF1ZXVlIHRvIGNoYW5nZSBzdGVyZW8gcGFuIHdoZW4gY2FwYWJsZS5cbiAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgZXZlbnQ6ICdzdGVyZW8nLFxuICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuc3RlcmVvKHBhbiwgaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIFBhbm5lclN0ZXJlb05vZGUgc3VwcG9ydCBhbmQgZmFsbGJhY2sgdG8gUGFubmVyTm9kZSBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgIHZhciBwYW5uZXJUeXBlID0gKHR5cGVvZiBIb3dsZXIuY3R4LmNyZWF0ZVN0ZXJlb1Bhbm5lciA9PT0gJ3VuZGVmaW5lZCcpID8gJ3NwYXRpYWwnIDogJ3N0ZXJlbyc7XG5cbiAgICAvLyBTZXR1cCB0aGUgZ3JvdXAncyBzdGVyZW8gcGFubmluZyBpZiBubyBJRCBpcyBwYXNzZWQuXG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFJldHVybiB0aGUgZ3JvdXAncyBzdGVyZW8gcGFubmluZyBpZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQuXG4gICAgICBpZiAodHlwZW9mIHBhbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgc2VsZi5fc3RlcmVvID0gcGFuO1xuICAgICAgICBzZWxmLl9wb3MgPSBbcGFuLCAwLCAwXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9zdGVyZW87XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hhbmdlIHRoZSBzdHJlbyBwYW5uaW5nIG9mIG9uZSBvciBhbGwgc291bmRzIGluIGdyb3VwLlxuICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYW4gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgc291bmQuX3N0ZXJlbyA9IHBhbjtcbiAgICAgICAgICBzb3VuZC5fcG9zID0gW3BhbiwgMCwgMF07XG5cbiAgICAgICAgICBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBmYWxsaW5nIGJhY2ssIG1ha2Ugc3VyZSB0aGUgcGFubmluZ01vZGVsIGlzIGVxdWFscG93ZXIuXG4gICAgICAgICAgICBzb3VuZC5fcGFubmVyQXR0ci5wYW5uaW5nTW9kZWwgPSAnZXF1YWxwb3dlcic7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgcGFubmVyIHNldHVwIGFuZCBjcmVhdGUgYSBuZXcgb25lIGlmIG5vdC5cbiAgICAgICAgICAgIGlmICghc291bmQuX3Bhbm5lciB8fCAhc291bmQuX3Bhbm5lci5wYW4pIHtcbiAgICAgICAgICAgICAgc2V0dXBQYW5uZXIoc291bmQsIHBhbm5lclR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocGFubmVyVHlwZSA9PT0gJ3NwYXRpYWwnKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygc291bmQuX3Bhbm5lci5wb3NpdGlvblggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblguc2V0VmFsdWVBdFRpbWUocGFuLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWS5zZXRWYWx1ZUF0VGltZSgwLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWi5zZXRWYWx1ZUF0VGltZSgwLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnNldFBvc2l0aW9uKHBhbiwgMCwgMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucGFuLnNldFZhbHVlQXRUaW1lKHBhbiwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fZW1pdCgnc3RlcmVvJywgc291bmQuX2lkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc291bmQuX3N0ZXJlbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHRoZSAzRCBzcGF0aWFsIHBvc2l0aW9uIG9mIHRoZSBhdWRpbyBzb3VyY2UgZm9yIHRoaXMgc291bmQgb3IgZ3JvdXAgcmVsYXRpdmUgdG8gdGhlIGdsb2JhbCBsaXN0ZW5lci5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB4ICBUaGUgeC1wb3NpdGlvbiBvZiB0aGUgYXVkaW8gc291cmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHkgIFRoZSB5LXBvc2l0aW9uIG9mIHRoZSBhdWRpbyBzb3VyY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0geiAgVGhlIHotcG9zaXRpb24gb2YgdGhlIGF1ZGlvIHNvdXJjZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAob3B0aW9uYWwpIFRoZSBzb3VuZCBJRC4gSWYgbm9uZSBpcyBwYXNzZWQsIGFsbCBpbiBncm91cCB3aWxsIGJlIHVwZGF0ZWQuXG4gICAqIEByZXR1cm4ge0hvd2wvQXJyYXl9ICAgIFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCAzRCBzcGF0aWFsIHBvc2l0aW9uOiBbeCwgeSwgel0uXG4gICAqL1xuICBIb3dsLnByb3RvdHlwZS5wb3MgPSBmdW5jdGlvbih4LCB5LCB6LCBpZCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIFN0b3AgcmlnaHQgaGVyZSBpZiBub3QgdXNpbmcgV2ViIEF1ZGlvLlxuICAgIGlmICghc2VsZi5fd2ViQXVkaW8pIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBzb3VuZCBoYXNuJ3QgbG9hZGVkLCBhZGQgaXQgdG8gdGhlIGxvYWQgcXVldWUgdG8gY2hhbmdlIHBvc2l0aW9uIHdoZW4gY2FwYWJsZS5cbiAgICBpZiAoc2VsZi5fc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICBzZWxmLl9xdWV1ZS5wdXNoKHtcbiAgICAgICAgZXZlbnQ6ICdwb3MnLFxuICAgICAgICBhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucG9zKHgsIHksIHosIGlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdHMgZm9yIG9wdGlvbmFsICd5JyAmICd6Jy5cbiAgICB5ID0gKHR5cGVvZiB5ICE9PSAnbnVtYmVyJykgPyAwIDogeTtcbiAgICB6ID0gKHR5cGVvZiB6ICE9PSAnbnVtYmVyJykgPyAtMC41IDogejtcblxuICAgIC8vIFNldHVwIHRoZSBncm91cCdzIHNwYXRpYWwgcG9zaXRpb24gaWYgbm8gSUQgaXMgcGFzc2VkLlxuICAgIGlmICh0eXBlb2YgaWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIGdyb3VwJ3Mgc3BhdGlhbCBwb3NpdGlvbiBpZiBubyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQuXG4gICAgICBpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNlbGYuX3BvcyA9IFt4LCB5LCB6XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9wb3M7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hhbmdlIHRoZSBzcGF0aWFsIHBvc2l0aW9uIG9mIG9uZSBvciBhbGwgc291bmRzIGluIGdyb3VwLlxuICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHNvdW5kLl9wb3MgPSBbeCwgeSwgel07XG5cbiAgICAgICAgICBpZiAoc291bmQuX25vZGUpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgcGFubmVyIHNldHVwIGFuZCBjcmVhdGUgYSBuZXcgb25lIGlmIG5vdC5cbiAgICAgICAgICAgIGlmICghc291bmQuX3Bhbm5lciB8fCBzb3VuZC5fcGFubmVyLnBhbikge1xuICAgICAgICAgICAgICBzZXR1cFBhbm5lcihzb3VuZCwgJ3NwYXRpYWwnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblguc2V0VmFsdWVBdFRpbWUoeCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25ZLnNldFZhbHVlQXRUaW1lKHksIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWi5zZXRWYWx1ZUF0VGltZSh6LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIuc2V0UG9zaXRpb24oeCwgeSwgeik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fZW1pdCgncG9zJywgc291bmQuX2lkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc291bmQuX3BvcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHRoZSBkaXJlY3Rpb24gdGhlIGF1ZGlvIHNvdXJjZSBpcyBwb2ludGluZyBpbiB0aGUgM0QgY2FydGVzaWFuIGNvb3JkaW5hdGVcbiAgICogc3BhY2UuIERlcGVuZGluZyBvbiBob3cgZGlyZWN0aW9uIHRoZSBzb3VuZCBpcywgYmFzZWQgb24gdGhlIGBjb25lYCBhdHRyaWJ1dGVzLFxuICAgKiBhIHNvdW5kIHBvaW50aW5nIGF3YXkgZnJvbSB0aGUgbGlzdGVuZXIgY2FuIGJlIHF1aWV0IG9yIHNpbGVudC5cbiAgICogQHBhcmFtICB7TnVtYmVyfSB4ICBUaGUgeC1vcmllbnRhdGlvbiBvZiB0aGUgc291cmNlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHkgIFRoZSB5LW9yaWVudGF0aW9uIG9mIHRoZSBzb3VyY2UuXG4gICAqIEBwYXJhbSAge051bWJlcn0geiAgVGhlIHotb3JpZW50YXRpb24gb2YgdGhlIHNvdXJjZS5cbiAgICogQHBhcmFtICB7TnVtYmVyfSBpZCAob3B0aW9uYWwpIFRoZSBzb3VuZCBJRC4gSWYgbm9uZSBpcyBwYXNzZWQsIGFsbCBpbiBncm91cCB3aWxsIGJlIHVwZGF0ZWQuXG4gICAqIEByZXR1cm4ge0hvd2wvQXJyYXl9ICAgIFJldHVybnMgc2VsZiBvciB0aGUgY3VycmVudCAzRCBzcGF0aWFsIG9yaWVudGF0aW9uOiBbeCwgeSwgel0uXG4gICAqL1xuICBIb3dsLnByb3RvdHlwZS5vcmllbnRhdGlvbiA9IGZ1bmN0aW9uKHgsIHksIHosIGlkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gU3RvcCByaWdodCBoZXJlIGlmIG5vdCB1c2luZyBXZWIgQXVkaW8uXG4gICAgaWYgKCFzZWxmLl93ZWJBdWRpbykge1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHNvdW5kIGhhc24ndCBsb2FkZWQsIGFkZCBpdCB0byB0aGUgbG9hZCBxdWV1ZSB0byBjaGFuZ2Ugb3JpZW50YXRpb24gd2hlbiBjYXBhYmxlLlxuICAgIGlmIChzZWxmLl9zdGF0ZSAhPT0gJ2xvYWRlZCcpIHtcbiAgICAgIHNlbGYuX3F1ZXVlLnB1c2goe1xuICAgICAgICBldmVudDogJ29yaWVudGF0aW9uJyxcbiAgICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLm9yaWVudGF0aW9uKHgsIHksIHosIGlkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdHMgZm9yIG9wdGlvbmFsICd5JyAmICd6Jy5cbiAgICB5ID0gKHR5cGVvZiB5ICE9PSAnbnVtYmVyJykgPyBzZWxmLl9vcmllbnRhdGlvblsxXSA6IHk7XG4gICAgeiA9ICh0eXBlb2YgeiAhPT0gJ251bWJlcicpID8gc2VsZi5fb3JpZW50YXRpb25bMl0gOiB6O1xuXG4gICAgLy8gU2V0dXAgdGhlIGdyb3VwJ3Mgc3BhdGlhbCBvcmllbnRhdGlvbiBpZiBubyBJRCBpcyBwYXNzZWQuXG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFJldHVybiB0aGUgZ3JvdXAncyBzcGF0aWFsIG9yaWVudGF0aW9uIGlmIG5vIHBhcmFtZXRlcnMgYXJlIHBhc3NlZC5cbiAgICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgc2VsZi5fb3JpZW50YXRpb24gPSBbeCwgeSwgel07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc2VsZi5fb3JpZW50YXRpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hhbmdlIHRoZSBzcGF0aWFsIG9yaWVudGF0aW9uIG9mIG9uZSBvciBhbGwgc291bmRzIGluIGdyb3VwLlxuICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gR2V0IHRoZSBzb3VuZC5cbiAgICAgIHZhciBzb3VuZCA9IHNlbGYuX3NvdW5kQnlJZChpZHNbaV0pO1xuXG4gICAgICBpZiAoc291bmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHNvdW5kLl9vcmllbnRhdGlvbiA9IFt4LCB5LCB6XTtcblxuICAgICAgICAgIGlmIChzb3VuZC5fbm9kZSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgaXMgYSBwYW5uZXIgc2V0dXAgYW5kIGNyZWF0ZSBhIG5ldyBvbmUgaWYgbm90LlxuICAgICAgICAgICAgaWYgKCFzb3VuZC5fcGFubmVyKSB7XG4gICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBoYXZlIGEgcG9zaXRpb24gdG8gc2V0dXAgdGhlIG5vZGUgd2l0aC5cbiAgICAgICAgICAgICAgaWYgKCFzb3VuZC5fcG9zKSB7XG4gICAgICAgICAgICAgICAgc291bmQuX3BvcyA9IHNlbGYuX3BvcyB8fCBbMCwgMCwgLTAuNV07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzZXR1cFBhbm5lcihzb3VuZCwgJ3NwYXRpYWwnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblguc2V0VmFsdWVBdFRpbWUoeCwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25ZLnNldFZhbHVlQXRUaW1lKHksIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICBzb3VuZC5fcGFubmVyLm9yaWVudGF0aW9uWi5zZXRWYWx1ZUF0VGltZSh6LCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNvdW5kLl9wYW5uZXIuc2V0T3JpZW50YXRpb24oeCwgeSwgeik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZi5fZW1pdCgnb3JpZW50YXRpb24nLCBzb3VuZC5faWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBzb3VuZC5fb3JpZW50YXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvKipcbiAgICogR2V0L3NldCB0aGUgcGFubmVyIG5vZGUncyBhdHRyaWJ1dGVzIGZvciBhIHNvdW5kIG9yIGdyb3VwIG9mIHNvdW5kcy5cbiAgICogVGhpcyBtZXRob2QgY2FuIG9wdGlvbmFsbCB0YWtlIDAsIDEgb3IgMiBhcmd1bWVudHMuXG4gICAqICAgcGFubmVyQXR0cigpIC0+IFJldHVybnMgdGhlIGdyb3VwJ3MgdmFsdWVzLlxuICAgKiAgIHBhbm5lckF0dHIoaWQpIC0+IFJldHVybnMgdGhlIHNvdW5kIGlkJ3MgdmFsdWVzLlxuICAgKiAgIHBhbm5lckF0dHIobykgLT4gU2V0J3MgdGhlIHZhbHVlcyBvZiBhbGwgc291bmRzIGluIHRoaXMgSG93bCBncm91cC5cbiAgICogICBwYW5uZXJBdHRyKG8sIGlkKSAtPiBTZXQncyB0aGUgdmFsdWVzIG9mIHBhc3NlZCBzb3VuZCBpZC5cbiAgICpcbiAgICogICBBdHRyaWJ1dGVzOlxuICAgKiAgICAgY29uZUlubmVyQW5nbGUgLSAoMzYwIGJ5IGRlZmF1bHQpIEEgcGFyYW1ldGVyIGZvciBkaXJlY3Rpb25hbCBhdWRpbyBzb3VyY2VzLCB0aGlzIGlzIGFuIGFuZ2xlLCBpbiBkZWdyZWVzLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICBpbnNpZGUgb2Ygd2hpY2ggdGhlcmUgd2lsbCBiZSBubyB2b2x1bWUgcmVkdWN0aW9uLlxuICAgKiAgICAgY29uZU91dGVyQW5nbGUgLSAoMzYwIGJ5IGRlZmF1bHQpIEEgcGFyYW1ldGVyIGZvciBkaXJlY3Rpb25hbCBhdWRpbyBzb3VyY2VzLCB0aGlzIGlzIGFuIGFuZ2xlLCBpbiBkZWdyZWVzLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICBvdXRzaWRlIG9mIHdoaWNoIHRoZSB2b2x1bWUgd2lsbCBiZSByZWR1Y2VkIHRvIGEgY29uc3RhbnQgdmFsdWUgb2YgYGNvbmVPdXRlckdhaW5gLlxuICAgKiAgICAgY29uZU91dGVyR2FpbiAtICgwIGJ5IGRlZmF1bHQpIEEgcGFyYW1ldGVyIGZvciBkaXJlY3Rpb25hbCBhdWRpbyBzb3VyY2VzLCB0aGlzIGlzIHRoZSBnYWluIG91dHNpZGUgb2YgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgYGNvbmVPdXRlckFuZ2xlYC4gSXQgaXMgYSBsaW5lYXIgdmFsdWUgaW4gdGhlIHJhbmdlIGBbMCwgMV1gLlxuICAgKiAgICAgZGlzdGFuY2VNb2RlbCAtICgnaW52ZXJzZScgYnkgZGVmYXVsdCkgRGV0ZXJtaW5lcyBhbGdvcml0aG0gdXNlZCB0byByZWR1Y2Ugdm9sdW1lIGFzIGF1ZGlvIG1vdmVzIGF3YXkgZnJvbVxuICAgKiAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLiBDYW4gYmUgYGxpbmVhcmAsIGBpbnZlcnNlYCBvciBgZXhwb25lbnRpYWwuXG4gICAqICAgICBtYXhEaXN0YW5jZSAtICgxMDAwMCBieSBkZWZhdWx0KSBUaGUgbWF4aW11bSBkaXN0YW5jZSBiZXR3ZWVuIHNvdXJjZSBhbmQgbGlzdGVuZXIsIGFmdGVyIHdoaWNoIHRoZSB2b2x1bWVcbiAgICogICAgICAgICAgICAgICAgICAgd2lsbCBub3QgYmUgcmVkdWNlZCBhbnkgZnVydGhlci5cbiAgICogICAgIHJlZkRpc3RhbmNlIC0gKDEgYnkgZGVmYXVsdCkgQSByZWZlcmVuY2UgZGlzdGFuY2UgZm9yIHJlZHVjaW5nIHZvbHVtZSBhcyBzb3VyY2UgbW92ZXMgZnVydGhlciBmcm9tIHRoZSBsaXN0ZW5lci5cbiAgICogICAgICAgICAgICAgICAgICAgVGhpcyBpcyBzaW1wbHkgYSB2YXJpYWJsZSBvZiB0aGUgZGlzdGFuY2UgbW9kZWwgYW5kIGhhcyBhIGRpZmZlcmVudCBlZmZlY3QgZGVwZW5kaW5nIG9uIHdoaWNoIG1vZGVsXG4gICAqICAgICAgICAgICAgICAgICAgIGlzIHVzZWQgYW5kIHRoZSBzY2FsZSBvZiB5b3VyIGNvb3JkaW5hdGVzLiBHZW5lcmFsbHksIHZvbHVtZSB3aWxsIGJlIGVxdWFsIHRvIDEgYXQgdGhpcyBkaXN0YW5jZS5cbiAgICogICAgIHJvbGxvZmZGYWN0b3IgLSAoMSBieSBkZWZhdWx0KSBIb3cgcXVpY2tseSB0aGUgdm9sdW1lIHJlZHVjZXMgYXMgc291cmNlIG1vdmVzIGZyb20gbGlzdGVuZXIuIFRoaXMgaXMgc2ltcGx5IGFcbiAgICogICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZSBvZiB0aGUgZGlzdGFuY2UgbW9kZWwgYW5kIGNhbiBiZSBpbiB0aGUgcmFuZ2Ugb2YgYFswLCAxXWAgd2l0aCBgbGluZWFyYCBhbmQgYFswLCBcdTIyMUVdYFxuICAgKiAgICAgICAgICAgICAgICAgICAgIHdpdGggYGludmVyc2VgIGFuZCBgZXhwb25lbnRpYWxgLlxuICAgKiAgICAgcGFubmluZ01vZGVsIC0gKCdIUlRGJyBieSBkZWZhdWx0KSBEZXRlcm1pbmVzIHdoaWNoIHNwYXRpYWxpemF0aW9uIGFsZ29yaXRobSBpcyB1c2VkIHRvIHBvc2l0aW9uIGF1ZGlvLlxuICAgKiAgICAgICAgICAgICAgICAgICAgIENhbiBiZSBgSFJURmAgb3IgYGVxdWFscG93ZXJgLlxuICAgKlxuICAgKiBAcmV0dXJuIHtIb3dsL09iamVjdH0gUmV0dXJucyBzZWxmIG9yIGN1cnJlbnQgcGFubmVyIGF0dHJpYnV0ZXMuXG4gICAqL1xuICBIb3dsLnByb3RvdHlwZS5wYW5uZXJBdHRyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBvLCBpZCwgc291bmQ7XG5cbiAgICAvLyBTdG9wIHJpZ2h0IGhlcmUgaWYgbm90IHVzaW5nIFdlYiBBdWRpby5cbiAgICBpZiAoIXNlbGYuX3dlYkF1ZGlvKSB7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG5cbiAgICAvLyBEZXRlcm1pbmUgdGhlIHZhbHVlcyBiYXNlZCBvbiBhcmd1bWVudHMuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBSZXR1cm4gdGhlIGdyb3VwJ3MgcGFubmVyIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICByZXR1cm4gc2VsZi5fcGFubmVyQXR0cjtcbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIG8gPSBhcmdzWzBdO1xuXG4gICAgICAgIC8vIFNldCB0aGUgZ3JvdSdzIHBhbm5lciBhdHRyaWJ1dGUgdmFsdWVzLlxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmICghby5wYW5uZXJBdHRyKSB7XG4gICAgICAgICAgICBvLnBhbm5lckF0dHIgPSB7XG4gICAgICAgICAgICAgIGNvbmVJbm5lckFuZ2xlOiBvLmNvbmVJbm5lckFuZ2xlLFxuICAgICAgICAgICAgICBjb25lT3V0ZXJBbmdsZTogby5jb25lT3V0ZXJBbmdsZSxcbiAgICAgICAgICAgICAgY29uZU91dGVyR2Fpbjogby5jb25lT3V0ZXJHYWluLFxuICAgICAgICAgICAgICBkaXN0YW5jZU1vZGVsOiBvLmRpc3RhbmNlTW9kZWwsXG4gICAgICAgICAgICAgIG1heERpc3RhbmNlOiBvLm1heERpc3RhbmNlLFxuICAgICAgICAgICAgICByZWZEaXN0YW5jZTogby5yZWZEaXN0YW5jZSxcbiAgICAgICAgICAgICAgcm9sbG9mZkZhY3Rvcjogby5yb2xsb2ZmRmFjdG9yLFxuICAgICAgICAgICAgICBwYW5uaW5nTW9kZWw6IG8ucGFubmluZ01vZGVsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuX3Bhbm5lckF0dHIgPSB7XG4gICAgICAgICAgICBjb25lSW5uZXJBbmdsZTogdHlwZW9mIG8ucGFubmVyQXR0ci5jb25lSW5uZXJBbmdsZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIuY29uZUlubmVyQW5nbGUgOiBzZWxmLl9jb25lSW5uZXJBbmdsZSxcbiAgICAgICAgICAgIGNvbmVPdXRlckFuZ2xlOiB0eXBlb2Ygby5wYW5uZXJBdHRyLmNvbmVPdXRlckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5jb25lT3V0ZXJBbmdsZSA6IHNlbGYuX2NvbmVPdXRlckFuZ2xlLFxuICAgICAgICAgICAgY29uZU91dGVyR2FpbjogdHlwZW9mIG8ucGFubmVyQXR0ci5jb25lT3V0ZXJHYWluICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5jb25lT3V0ZXJHYWluIDogc2VsZi5fY29uZU91dGVyR2FpbixcbiAgICAgICAgICAgIGRpc3RhbmNlTW9kZWw6IHR5cGVvZiBvLnBhbm5lckF0dHIuZGlzdGFuY2VNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIuZGlzdGFuY2VNb2RlbCA6IHNlbGYuX2Rpc3RhbmNlTW9kZWwsXG4gICAgICAgICAgICBtYXhEaXN0YW5jZTogdHlwZW9mIG8ucGFubmVyQXR0ci5tYXhEaXN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5lckF0dHIubWF4RGlzdGFuY2UgOiBzZWxmLl9tYXhEaXN0YW5jZSxcbiAgICAgICAgICAgIHJlZkRpc3RhbmNlOiB0eXBlb2Ygby5wYW5uZXJBdHRyLnJlZkRpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5yZWZEaXN0YW5jZSA6IHNlbGYuX3JlZkRpc3RhbmNlLFxuICAgICAgICAgICAgcm9sbG9mZkZhY3RvcjogdHlwZW9mIG8ucGFubmVyQXR0ci5yb2xsb2ZmRmFjdG9yICE9PSAndW5kZWZpbmVkJyA/IG8ucGFubmVyQXR0ci5yb2xsb2ZmRmFjdG9yIDogc2VsZi5fcm9sbG9mZkZhY3RvcixcbiAgICAgICAgICAgIHBhbm5pbmdNb2RlbDogdHlwZW9mIG8ucGFubmVyQXR0ci5wYW5uaW5nTW9kZWwgIT09ICd1bmRlZmluZWQnID8gby5wYW5uZXJBdHRyLnBhbm5pbmdNb2RlbCA6IHNlbGYuX3Bhbm5pbmdNb2RlbFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiB0aGlzIHNvdW5kJ3MgcGFubmVyIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICAgIHNvdW5kID0gc2VsZi5fc291bmRCeUlkKHBhcnNlSW50KGFyZ3NbMF0sIDEwKSk7XG4gICAgICAgIHJldHVybiBzb3VuZCA/IHNvdW5kLl9wYW5uZXJBdHRyIDogc2VsZi5fcGFubmVyQXR0cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICBvID0gYXJnc1swXTtcbiAgICAgIGlkID0gcGFyc2VJbnQoYXJnc1sxXSwgMTApO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmFsdWVzIG9mIHRoZSBzcGVjaWZpZWQgc291bmRzLlxuICAgIHZhciBpZHMgPSBzZWxmLl9nZXRTb3VuZElkcyhpZCk7XG4gICAgZm9yICh2YXIgaT0wOyBpPGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgc291bmQgPSBzZWxmLl9zb3VuZEJ5SWQoaWRzW2ldKTtcblxuICAgICAgaWYgKHNvdW5kKSB7XG4gICAgICAgIC8vIE1lcmdlIHRoZSBuZXcgdmFsdWVzIGludG8gdGhlIHNvdW5kLlxuICAgICAgICB2YXIgcGEgPSBzb3VuZC5fcGFubmVyQXR0cjtcbiAgICAgICAgcGEgPSB7XG4gICAgICAgICAgY29uZUlubmVyQW5nbGU6IHR5cGVvZiBvLmNvbmVJbm5lckFuZ2xlICE9PSAndW5kZWZpbmVkJyA/IG8uY29uZUlubmVyQW5nbGUgOiBwYS5jb25lSW5uZXJBbmdsZSxcbiAgICAgICAgICBjb25lT3V0ZXJBbmdsZTogdHlwZW9mIG8uY29uZU91dGVyQW5nbGUgIT09ICd1bmRlZmluZWQnID8gby5jb25lT3V0ZXJBbmdsZSA6IHBhLmNvbmVPdXRlckFuZ2xlLFxuICAgICAgICAgIGNvbmVPdXRlckdhaW46IHR5cGVvZiBvLmNvbmVPdXRlckdhaW4gIT09ICd1bmRlZmluZWQnID8gby5jb25lT3V0ZXJHYWluIDogcGEuY29uZU91dGVyR2FpbixcbiAgICAgICAgICBkaXN0YW5jZU1vZGVsOiB0eXBlb2Ygby5kaXN0YW5jZU1vZGVsICE9PSAndW5kZWZpbmVkJyA/IG8uZGlzdGFuY2VNb2RlbCA6IHBhLmRpc3RhbmNlTW9kZWwsXG4gICAgICAgICAgbWF4RGlzdGFuY2U6IHR5cGVvZiBvLm1heERpc3RhbmNlICE9PSAndW5kZWZpbmVkJyA/IG8ubWF4RGlzdGFuY2UgOiBwYS5tYXhEaXN0YW5jZSxcbiAgICAgICAgICByZWZEaXN0YW5jZTogdHlwZW9mIG8ucmVmRGlzdGFuY2UgIT09ICd1bmRlZmluZWQnID8gby5yZWZEaXN0YW5jZSA6IHBhLnJlZkRpc3RhbmNlLFxuICAgICAgICAgIHJvbGxvZmZGYWN0b3I6IHR5cGVvZiBvLnJvbGxvZmZGYWN0b3IgIT09ICd1bmRlZmluZWQnID8gby5yb2xsb2ZmRmFjdG9yIDogcGEucm9sbG9mZkZhY3RvcixcbiAgICAgICAgICBwYW5uaW5nTW9kZWw6IHR5cGVvZiBvLnBhbm5pbmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcgPyBvLnBhbm5pbmdNb2RlbCA6IHBhLnBhbm5pbmdNb2RlbFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcGFubmVyIHZhbHVlcyBvciBjcmVhdGUgYSBuZXcgcGFubmVyIGlmIG5vbmUgZXhpc3RzLlxuICAgICAgICB2YXIgcGFubmVyID0gc291bmQuX3Bhbm5lcjtcbiAgICAgICAgaWYgKHBhbm5lcikge1xuICAgICAgICAgIHBhbm5lci5jb25lSW5uZXJBbmdsZSA9IHBhLmNvbmVJbm5lckFuZ2xlO1xuICAgICAgICAgIHBhbm5lci5jb25lT3V0ZXJBbmdsZSA9IHBhLmNvbmVPdXRlckFuZ2xlO1xuICAgICAgICAgIHBhbm5lci5jb25lT3V0ZXJHYWluID0gcGEuY29uZU91dGVyR2FpbjtcbiAgICAgICAgICBwYW5uZXIuZGlzdGFuY2VNb2RlbCA9IHBhLmRpc3RhbmNlTW9kZWw7XG4gICAgICAgICAgcGFubmVyLm1heERpc3RhbmNlID0gcGEubWF4RGlzdGFuY2U7XG4gICAgICAgICAgcGFubmVyLnJlZkRpc3RhbmNlID0gcGEucmVmRGlzdGFuY2U7XG4gICAgICAgICAgcGFubmVyLnJvbGxvZmZGYWN0b3IgPSBwYS5yb2xsb2ZmRmFjdG9yO1xuICAgICAgICAgIHBhbm5lci5wYW5uaW5nTW9kZWwgPSBwYS5wYW5uaW5nTW9kZWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYSBwb3NpdGlvbiB0byBzZXR1cCB0aGUgbm9kZSB3aXRoLlxuICAgICAgICAgIGlmICghc291bmQuX3Bvcykge1xuICAgICAgICAgICAgc291bmQuX3BvcyA9IHNlbGYuX3BvcyB8fCBbMCwgMCwgLTAuNV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhbm5lciBub2RlLlxuICAgICAgICAgIHNldHVwUGFubmVyKHNvdW5kLCAnc3BhdGlhbCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgLyoqIFNpbmdsZSBTb3VuZCBNZXRob2RzICoqL1xuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4gIC8qKlxuICAgKiBBZGQgbmV3IHByb3BlcnRpZXMgdG8gdGhlIGNvcmUgU291bmQgaW5pdC5cbiAgICogQHBhcmFtICB7RnVuY3Rpb259IF9zdXBlciBDb3JlIFNvdW5kIGluaXQgbWV0aG9kLlxuICAgKiBAcmV0dXJuIHtTb3VuZH1cbiAgICovXG4gIFNvdW5kLnByb3RvdHlwZS5pbml0ID0gKGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBwYXJlbnQgPSBzZWxmLl9wYXJlbnQ7XG5cbiAgICAgIC8vIFNldHVwIHVzZXItZGVmaW5lZCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICBzZWxmLl9vcmllbnRhdGlvbiA9IHBhcmVudC5fb3JpZW50YXRpb247XG4gICAgICBzZWxmLl9zdGVyZW8gPSBwYXJlbnQuX3N0ZXJlbztcbiAgICAgIHNlbGYuX3BvcyA9IHBhcmVudC5fcG9zO1xuICAgICAgc2VsZi5fcGFubmVyQXR0ciA9IHBhcmVudC5fcGFubmVyQXR0cjtcblxuICAgICAgLy8gQ29tcGxldGUgaW5pdGlsaXphdGlvbiB3aXRoIGhvd2xlci5qcyBjb3JlIFNvdW5kJ3MgaW5pdCBmdW5jdGlvbi5cbiAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuXG4gICAgICAvLyBJZiBhIHN0ZXJlbyBvciBwb3NpdGlvbiB3YXMgc3BlY2lmaWVkLCBzZXQgaXQgdXAuXG4gICAgICBpZiAoc2VsZi5fc3RlcmVvKSB7XG4gICAgICAgIHBhcmVudC5zdGVyZW8oc2VsZi5fc3RlcmVvKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5fcG9zKSB7XG4gICAgICAgIHBhcmVudC5wb3Moc2VsZi5fcG9zWzBdLCBzZWxmLl9wb3NbMV0sIHNlbGYuX3Bvc1syXSwgc2VsZi5faWQpO1xuICAgICAgfVxuICAgIH07XG4gIH0pKFNvdW5kLnByb3RvdHlwZS5pbml0KTtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIFNvdW5kLnJlc2V0IG1ldGhvZCB0byBjbGVhbiB1cCBwcm9wZXJ0aWVzIGZyb20gdGhlIHNwYXRpYWwgcGx1Z2luLlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gX3N1cGVyIFNvdW5kIHJlc2V0IG1ldGhvZC5cbiAgICogQHJldHVybiB7U291bmR9XG4gICAqL1xuICBTb3VuZC5wcm90b3R5cGUucmVzZXQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHBhcmVudCA9IHNlbGYuX3BhcmVudDtcblxuICAgICAgLy8gUmVzZXQgYWxsIHNwYXRpYWwgcGx1Z2luIHByb3BlcnRpZXMgb24gdGhpcyBzb3VuZC5cbiAgICAgIHNlbGYuX29yaWVudGF0aW9uID0gcGFyZW50Ll9vcmllbnRhdGlvbjtcbiAgICAgIHNlbGYuX3N0ZXJlbyA9IHBhcmVudC5fc3RlcmVvO1xuICAgICAgc2VsZi5fcG9zID0gcGFyZW50Ll9wb3M7XG4gICAgICBzZWxmLl9wYW5uZXJBdHRyID0gcGFyZW50Ll9wYW5uZXJBdHRyO1xuXG4gICAgICAvLyBJZiBhIHN0ZXJlbyBvciBwb3NpdGlvbiB3YXMgc3BlY2lmaWVkLCBzZXQgaXQgdXAuXG4gICAgICBpZiAoc2VsZi5fc3RlcmVvKSB7XG4gICAgICAgIHBhcmVudC5zdGVyZW8oc2VsZi5fc3RlcmVvKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5fcG9zKSB7XG4gICAgICAgIHBhcmVudC5wb3Moc2VsZi5fcG9zWzBdLCBzZWxmLl9wb3NbMV0sIHNlbGYuX3Bvc1syXSwgc2VsZi5faWQpO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLl9wYW5uZXIpIHtcbiAgICAgICAgLy8gRGlzY29ubmVjdCB0aGUgcGFubmVyLlxuICAgICAgICBzZWxmLl9wYW5uZXIuZGlzY29ubmVjdCgwKTtcbiAgICAgICAgc2VsZi5fcGFubmVyID0gdW5kZWZpbmVkO1xuICAgICAgICBwYXJlbnQuX3JlZnJlc2hCdWZmZXIoc2VsZik7XG4gICAgICB9XG5cbiAgICAgIC8vIENvbXBsZXRlIHJlc2V0dGluZyBvZiB0aGUgc291bmQuXG4gICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfSkoU291bmQucHJvdG90eXBlLnJlc2V0KTtcblxuICAvKiogSGVscGVyIE1ldGhvZHMgKiovXG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwYW5uZXIgbm9kZSBhbmQgc2F2ZSBpdCBvbiB0aGUgc291bmQuXG4gICAqIEBwYXJhbSAge1NvdW5kfSBzb3VuZCBTcGVjaWZpYyBzb3VuZCB0byBzZXR1cCBwYW5uaW5nIG9uLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUeXBlIG9mIHBhbm5lciB0byBjcmVhdGU6ICdzdGVyZW8nIG9yICdzcGF0aWFsJy5cbiAgICovXG4gIHZhciBzZXR1cFBhbm5lciA9IGZ1bmN0aW9uKHNvdW5kLCB0eXBlKSB7XG4gICAgdHlwZSA9IHR5cGUgfHwgJ3NwYXRpYWwnO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBuZXcgcGFubmVyIG5vZGUuXG4gICAgaWYgKHR5cGUgPT09ICdzcGF0aWFsJykge1xuICAgICAgc291bmQuX3Bhbm5lciA9IEhvd2xlci5jdHguY3JlYXRlUGFubmVyKCk7XG4gICAgICBzb3VuZC5fcGFubmVyLmNvbmVJbm5lckFuZ2xlID0gc291bmQuX3Bhbm5lckF0dHIuY29uZUlubmVyQW5nbGU7XG4gICAgICBzb3VuZC5fcGFubmVyLmNvbmVPdXRlckFuZ2xlID0gc291bmQuX3Bhbm5lckF0dHIuY29uZU91dGVyQW5nbGU7XG4gICAgICBzb3VuZC5fcGFubmVyLmNvbmVPdXRlckdhaW4gPSBzb3VuZC5fcGFubmVyQXR0ci5jb25lT3V0ZXJHYWluO1xuICAgICAgc291bmQuX3Bhbm5lci5kaXN0YW5jZU1vZGVsID0gc291bmQuX3Bhbm5lckF0dHIuZGlzdGFuY2VNb2RlbDtcbiAgICAgIHNvdW5kLl9wYW5uZXIubWF4RGlzdGFuY2UgPSBzb3VuZC5fcGFubmVyQXR0ci5tYXhEaXN0YW5jZTtcbiAgICAgIHNvdW5kLl9wYW5uZXIucmVmRGlzdGFuY2UgPSBzb3VuZC5fcGFubmVyQXR0ci5yZWZEaXN0YW5jZTtcbiAgICAgIHNvdW5kLl9wYW5uZXIucm9sbG9mZkZhY3RvciA9IHNvdW5kLl9wYW5uZXJBdHRyLnJvbGxvZmZGYWN0b3I7XG4gICAgICBzb3VuZC5fcGFubmVyLnBhbm5pbmdNb2RlbCA9IHNvdW5kLl9wYW5uZXJBdHRyLnBhbm5pbmdNb2RlbDtcblxuICAgICAgaWYgKHR5cGVvZiBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc291bmQuX3Bhbm5lci5wb3NpdGlvblguc2V0VmFsdWVBdFRpbWUoc291bmQuX3Bvc1swXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIucG9zaXRpb25ZLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9wb3NbMV0sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgICAgICBzb3VuZC5fcGFubmVyLnBvc2l0aW9uWi5zZXRWYWx1ZUF0VGltZShzb3VuZC5fcG9zWzJdLCBIb3dsZXIuY3R4LmN1cnJlbnRUaW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIuc2V0UG9zaXRpb24oc291bmQuX3Bvc1swXSwgc291bmQuX3Bvc1sxXSwgc291bmQuX3Bvc1syXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc291bmQuX3Bhbm5lci5vcmllbnRhdGlvblggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25YLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9vcmllbnRhdGlvblswXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25ZLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9vcmllbnRhdGlvblsxXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICAgIHNvdW5kLl9wYW5uZXIub3JpZW50YXRpb25aLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9vcmllbnRhdGlvblsyXSwgSG93bGVyLmN0eC5jdXJyZW50VGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzb3VuZC5fcGFubmVyLnNldE9yaWVudGF0aW9uKHNvdW5kLl9vcmllbnRhdGlvblswXSwgc291bmQuX29yaWVudGF0aW9uWzFdLCBzb3VuZC5fb3JpZW50YXRpb25bMl0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzb3VuZC5fcGFubmVyID0gSG93bGVyLmN0eC5jcmVhdGVTdGVyZW9QYW5uZXIoKTtcbiAgICAgIHNvdW5kLl9wYW5uZXIucGFuLnNldFZhbHVlQXRUaW1lKHNvdW5kLl9zdGVyZW8sIEhvd2xlci5jdHguY3VycmVudFRpbWUpO1xuICAgIH1cblxuICAgIHNvdW5kLl9wYW5uZXIuY29ubmVjdChzb3VuZC5fbm9kZSk7XG5cbiAgICAvLyBVcGRhdGUgdGhlIGNvbm5lY3Rpb25zLlxuICAgIGlmICghc291bmQuX3BhdXNlZCkge1xuICAgICAgc291bmQuX3BhcmVudC5wYXVzZShzb3VuZC5faWQsIHRydWUpLnBsYXkoc291bmQuX2lkLCB0cnVlKTtcbiAgICB9XG4gIH07XG59KSgpO1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBlYXJjdXQ7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZWFyY3V0O1xuXG5mdW5jdGlvbiBlYXJjdXQoZGF0YSwgaG9sZUluZGljZXMsIGRpbSkge1xuXG4gICAgZGltID0gZGltIHx8IDI7XG5cbiAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsXG4gICAgICAgIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoLFxuICAgICAgICBvdXRlck5vZGUgPSBsaW5rZWRMaXN0KGRhdGEsIDAsIG91dGVyTGVuLCBkaW0sIHRydWUpLFxuICAgICAgICB0cmlhbmdsZXMgPSBbXTtcblxuICAgIGlmICghb3V0ZXJOb2RlIHx8IG91dGVyTm9kZS5uZXh0ID09PSBvdXRlck5vZGUucHJldikgcmV0dXJuIHRyaWFuZ2xlcztcblxuICAgIHZhciBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCB4LCB5LCBpbnZTaXplO1xuXG4gICAgaWYgKGhhc0hvbGVzKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyhkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0pO1xuXG4gICAgLy8gaWYgdGhlIHNoYXBlIGlzIG5vdCB0b28gc2ltcGxlLCB3ZSdsbCB1c2Ugei1vcmRlciBjdXJ2ZSBoYXNoIGxhdGVyOyBjYWxjdWxhdGUgcG9seWdvbiBiYm94XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gODAgKiBkaW0pIHtcbiAgICAgICAgbWluWCA9IG1heFggPSBkYXRhWzBdO1xuICAgICAgICBtaW5ZID0gbWF4WSA9IGRhdGFbMV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGRpbTsgaSA8IG91dGVyTGVuOyBpICs9IGRpbSkge1xuICAgICAgICAgICAgeCA9IGRhdGFbaV07XG4gICAgICAgICAgICB5ID0gZGF0YVtpICsgMV07XG4gICAgICAgICAgICBpZiAoeCA8IG1pblgpIG1pblggPSB4O1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSBtaW5ZID0geTtcbiAgICAgICAgICAgIGlmICh4ID4gbWF4WCkgbWF4WCA9IHg7XG4gICAgICAgICAgICBpZiAoeSA+IG1heFkpIG1heFkgPSB5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cbiAgICAgICAgaW52U2l6ZSA9IE1hdGgubWF4KG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XG4gICAgICAgIGludlNpemUgPSBpbnZTaXplICE9PSAwID8gMzI3NjcgLyBpbnZTaXplIDogMDtcbiAgICB9XG5cbiAgICBlYXJjdXRMaW5rZWQob3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMCk7XG5cbiAgICByZXR1cm4gdHJpYW5nbGVzO1xufVxuXG4vLyBjcmVhdGUgYSBjaXJjdWxhciBkb3VibHkgbGlua2VkIGxpc3QgZnJvbSBwb2x5Z29uIHBvaW50cyBpbiB0aGUgc3BlY2lmaWVkIHdpbmRpbmcgb3JkZXJcbmZ1bmN0aW9uIGxpbmtlZExpc3QoZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UpIHtcbiAgICB2YXIgaSwgbGFzdDtcblxuICAgIGlmIChjbG9ja3dpc2UgPT09IChzaWduZWRBcmVhKGRhdGEsIHN0YXJ0LCBlbmQsIGRpbSkgPiAwKSkge1xuICAgICAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBkaW0pIGxhc3QgPSBpbnNlcnROb2RlKGksIGRhdGFbaV0sIGRhdGFbaSArIDFdLCBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSBlbmQgLSBkaW07IGkgPj0gc3RhcnQ7IGkgLT0gZGltKSBsYXN0ID0gaW5zZXJ0Tm9kZShpLCBkYXRhW2ldLCBkYXRhW2kgKyAxXSwgbGFzdCk7XG4gICAgfVxuXG4gICAgaWYgKGxhc3QgJiYgZXF1YWxzKGxhc3QsIGxhc3QubmV4dCkpIHtcbiAgICAgICAgcmVtb3ZlTm9kZShsYXN0KTtcbiAgICAgICAgbGFzdCA9IGxhc3QubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbGFzdDtcbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyhzdGFydCwgZW5kKSB7XG4gICAgaWYgKCFzdGFydCkgcmV0dXJuIHN0YXJ0O1xuICAgIGlmICghZW5kKSBlbmQgPSBzdGFydDtcblxuICAgIHZhciBwID0gc3RhcnQsXG4gICAgICAgIGFnYWluO1xuICAgIGRvIHtcbiAgICAgICAgYWdhaW4gPSBmYWxzZTtcblxuICAgICAgICBpZiAoIXAuc3RlaW5lciAmJiAoZXF1YWxzKHAsIHAubmV4dCkgfHwgYXJlYShwLnByZXYsIHAsIHAubmV4dCkgPT09IDApKSB7XG4gICAgICAgICAgICByZW1vdmVOb2RlKHApO1xuICAgICAgICAgICAgcCA9IGVuZCA9IHAucHJldjtcbiAgICAgICAgICAgIGlmIChwID09PSBwLm5leHQpIGJyZWFrO1xuICAgICAgICAgICAgYWdhaW4gPSB0cnVlO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwID0gcC5uZXh0O1xuICAgICAgICB9XG4gICAgfSB3aGlsZSAoYWdhaW4gfHwgcCAhPT0gZW5kKTtcblxuICAgIHJldHVybiBlbmQ7XG59XG5cbi8vIG1haW4gZWFyIHNsaWNpbmcgbG9vcCB3aGljaCB0cmlhbmd1bGF0ZXMgYSBwb2x5Z29uIChnaXZlbiBhcyBhIGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MpIHtcbiAgICBpZiAoIWVhcikgcmV0dXJuO1xuXG4gICAgLy8gaW50ZXJsaW5rIHBvbHlnb24gbm9kZXMgaW4gei1vcmRlclxuICAgIGlmICghcGFzcyAmJiBpbnZTaXplKSBpbmRleEN1cnZlKGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG5cbiAgICB2YXIgc3RvcCA9IGVhcixcbiAgICAgICAgcHJldiwgbmV4dDtcblxuICAgIC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuICAgIHdoaWxlIChlYXIucHJldiAhPT0gZWFyLm5leHQpIHtcbiAgICAgICAgcHJldiA9IGVhci5wcmV2O1xuICAgICAgICBuZXh0ID0gZWFyLm5leHQ7XG5cbiAgICAgICAgaWYgKGludlNpemUgPyBpc0Vhckhhc2hlZChlYXIsIG1pblgsIG1pblksIGludlNpemUpIDogaXNFYXIoZWFyKSkge1xuICAgICAgICAgICAgLy8gY3V0IG9mZiB0aGUgdHJpYW5nbGVcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHByZXYuaSAvIGRpbSB8IDApO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goZWFyLmkgLyBkaW0gfCAwKTtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKG5leHQuaSAvIGRpbSB8IDApO1xuXG4gICAgICAgICAgICByZW1vdmVOb2RlKGVhcik7XG5cbiAgICAgICAgICAgIC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcbiAgICAgICAgICAgIGVhciA9IG5leHQubmV4dDtcbiAgICAgICAgICAgIHN0b3AgPSBuZXh0Lm5leHQ7XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZWFyID0gbmV4dDtcblxuICAgICAgICAvLyBpZiB3ZSBsb29wZWQgdGhyb3VnaCB0aGUgd2hvbGUgcmVtYWluaW5nIHBvbHlnb24gYW5kIGNhbid0IGZpbmQgYW55IG1vcmUgZWFyc1xuICAgICAgICBpZiAoZWFyID09PSBzdG9wKSB7XG4gICAgICAgICAgICAvLyB0cnkgZmlsdGVyaW5nIHBvaW50cyBhbmQgc2xpY2luZyBhZ2FpblxuICAgICAgICAgICAgaWYgKCFwYXNzKSB7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMSk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlkbid0IHdvcmssIHRyeSBjdXJpbmcgYWxsIHNtYWxsIHNlbGYtaW50ZXJzZWN0aW9ucyBsb2NhbGx5XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhc3MgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKGZpbHRlclBvaW50cyhlYXIpLCB0cmlhbmdsZXMsIGRpbSk7XG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDIpO1xuXG4gICAgICAgICAgICAvLyBhcyBhIGxhc3QgcmVzb3J0LCB0cnkgc3BsaXR0aW5nIHRoZSByZW1haW5pbmcgcG9seWdvbiBpbnRvIHR3b1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXNzID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc3BsaXRFYXJjdXQoZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBjaGVjayB3aGV0aGVyIGEgcG9seWdvbiBub2RlIGZvcm1zIGEgdmFsaWQgZWFyIHdpdGggYWRqYWNlbnQgbm9kZXNcbmZ1bmN0aW9uIGlzRWFyKGVhcikge1xuICAgIHZhciBhID0gZWFyLnByZXYsXG4gICAgICAgIGIgPSBlYXIsXG4gICAgICAgIGMgPSBlYXIubmV4dDtcblxuICAgIGlmIChhcmVhKGEsIGIsIGMpID49IDApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuICAgIC8vIG5vdyBtYWtlIHN1cmUgd2UgZG9uJ3QgaGF2ZSBvdGhlciBwb2ludHMgaW5zaWRlIHRoZSBwb3RlbnRpYWwgZWFyXG4gICAgdmFyIGF4ID0gYS54LCBieCA9IGIueCwgY3ggPSBjLngsIGF5ID0gYS55LCBieSA9IGIueSwgY3kgPSBjLnk7XG5cbiAgICAvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuICAgIHZhciB4MCA9IGF4IDwgYnggPyAoYXggPCBjeCA/IGF4IDogY3gpIDogKGJ4IDwgY3ggPyBieCA6IGN4KSxcbiAgICAgICAgeTAgPSBheSA8IGJ5ID8gKGF5IDwgY3kgPyBheSA6IGN5KSA6IChieSA8IGN5ID8gYnkgOiBjeSksXG4gICAgICAgIHgxID0gYXggPiBieCA/IChheCA+IGN4ID8gYXggOiBjeCkgOiAoYnggPiBjeCA/IGJ4IDogY3gpLFxuICAgICAgICB5MSA9IGF5ID4gYnkgPyAoYXkgPiBjeSA/IGF5IDogY3kpIDogKGJ5ID4gY3kgPyBieSA6IGN5KTtcblxuICAgIHZhciBwID0gYy5uZXh0O1xuICAgIHdoaWxlIChwICE9PSBhKSB7XG4gICAgICAgIGlmIChwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBwLngsIHAueSkgJiZcbiAgICAgICAgICAgIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgdmFyIGEgPSBlYXIucHJldixcbiAgICAgICAgYiA9IGVhcixcbiAgICAgICAgYyA9IGVhci5uZXh0O1xuXG4gICAgaWYgKGFyZWEoYSwgYiwgYykgPj0gMCkgcmV0dXJuIGZhbHNlOyAvLyByZWZsZXgsIGNhbid0IGJlIGFuIGVhclxuXG4gICAgdmFyIGF4ID0gYS54LCBieCA9IGIueCwgY3ggPSBjLngsIGF5ID0gYS55LCBieSA9IGIueSwgY3kgPSBjLnk7XG5cbiAgICAvLyB0cmlhbmdsZSBiYm94OyBtaW4gJiBtYXggYXJlIGNhbGN1bGF0ZWQgbGlrZSB0aGlzIGZvciBzcGVlZFxuICAgIHZhciB4MCA9IGF4IDwgYnggPyAoYXggPCBjeCA/IGF4IDogY3gpIDogKGJ4IDwgY3ggPyBieCA6IGN4KSxcbiAgICAgICAgeTAgPSBheSA8IGJ5ID8gKGF5IDwgY3kgPyBheSA6IGN5KSA6IChieSA8IGN5ID8gYnkgOiBjeSksXG4gICAgICAgIHgxID0gYXggPiBieCA/IChheCA+IGN4ID8gYXggOiBjeCkgOiAoYnggPiBjeCA/IGJ4IDogY3gpLFxuICAgICAgICB5MSA9IGF5ID4gYnkgPyAoYXkgPiBjeSA/IGF5IDogY3kpIDogKGJ5ID4gY3kgPyBieSA6IGN5KTtcblxuICAgIC8vIHotb3JkZXIgcmFuZ2UgZm9yIHRoZSBjdXJyZW50IHRyaWFuZ2xlIGJib3g7XG4gICAgdmFyIG1pblogPSB6T3JkZXIoeDAsIHkwLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSxcbiAgICAgICAgbWF4WiA9IHpPcmRlcih4MSwgeTEsIG1pblgsIG1pblksIGludlNpemUpO1xuXG4gICAgdmFyIHAgPSBlYXIucHJldlosXG4gICAgICAgIG4gPSBlYXIubmV4dFo7XG5cbiAgICAvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBpbiBib3RoIGRpcmVjdGlvbnNcbiAgICB3aGlsZSAocCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaKSB7XG4gICAgICAgIGlmIChwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiYgcCAhPT0gYSAmJiBwICE9PSBjICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAucHJldlo7XG5cbiAgICAgICAgaWYgKG4ueCA+PSB4MCAmJiBuLnggPD0geDEgJiYgbi55ID49IHkwICYmIG4ueSA8PSB5MSAmJiBuICE9PSBhICYmIG4gIT09IGMgJiZcbiAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBuLngsIG4ueSkgJiYgYXJlYShuLnByZXYsIG4sIG4ubmV4dCkgPj0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBuID0gbi5uZXh0WjtcbiAgICB9XG5cbiAgICAvLyBsb29rIGZvciByZW1haW5pbmcgcG9pbnRzIGluIGRlY3JlYXNpbmcgei1vcmRlclxuICAgIHdoaWxlIChwICYmIHAueiA+PSBtaW5aKSB7XG4gICAgICAgIGlmIChwLnggPj0geDAgJiYgcC54IDw9IHgxICYmIHAueSA+PSB5MCAmJiBwLnkgPD0geTEgJiYgcCAhPT0gYSAmJiBwICE9PSBjICYmXG4gICAgICAgICAgICBwb2ludEluVHJpYW5nbGUoYXgsIGF5LCBieCwgYnksIGN4LCBjeSwgcC54LCBwLnkpICYmIGFyZWEocC5wcmV2LCBwLCBwLm5leHQpID49IDApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcCA9IHAucHJldlo7XG4gICAgfVxuXG4gICAgLy8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBpbmNyZWFzaW5nIHotb3JkZXJcbiAgICB3aGlsZSAobiAmJiBuLnogPD0gbWF4Wikge1xuICAgICAgICBpZiAobi54ID49IHgwICYmIG4ueCA8PSB4MSAmJiBuLnkgPj0geTAgJiYgbi55IDw9IHkxICYmIG4gIT09IGEgJiYgbiAhPT0gYyAmJlxuICAgICAgICAgICAgcG9pbnRJblRyaWFuZ2xlKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIG4ueCwgbi55KSAmJiBhcmVhKG4ucHJldiwgbiwgbi5uZXh0KSA+PSAwKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIG4gPSBuLm5leHRaO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyhzdGFydCwgdHJpYW5nbGVzLCBkaW0pIHtcbiAgICB2YXIgcCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGEgPSBwLnByZXYsXG4gICAgICAgICAgICBiID0gcC5uZXh0Lm5leHQ7XG5cbiAgICAgICAgaWYgKCFlcXVhbHMoYSwgYikgJiYgaW50ZXJzZWN0cyhhLCBwLCBwLm5leHQsIGIpICYmIGxvY2FsbHlJbnNpZGUoYSwgYikgJiYgbG9jYWxseUluc2lkZShiLCBhKSkge1xuXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChhLmkgLyBkaW0gfCAwKTtcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKHAuaSAvIGRpbSB8IDApO1xuICAgICAgICAgICAgdHJpYW5nbGVzLnB1c2goYi5pIC8gZGltIHwgMCk7XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0d28gbm9kZXMgaW52b2x2ZWRcbiAgICAgICAgICAgIHJlbW92ZU5vZGUocCk7XG4gICAgICAgICAgICByZW1vdmVOb2RlKHAubmV4dCk7XG5cbiAgICAgICAgICAgIHAgPSBzdGFydCA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gZmlsdGVyUG9pbnRzKHApO1xufVxuXG4vLyB0cnkgc3BsaXR0aW5nIHBvbHlnb24gaW50byB0d28gYW5kIHRyaWFuZ3VsYXRlIHRoZW0gaW5kZXBlbmRlbnRseVxuZnVuY3Rpb24gc3BsaXRFYXJjdXQoc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplKSB7XG4gICAgLy8gbG9vayBmb3IgYSB2YWxpZCBkaWFnb25hbCB0aGF0IGRpdmlkZXMgdGhlIHBvbHlnb24gaW50byB0d29cbiAgICB2YXIgYSA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgdmFyIGIgPSBhLm5leHQubmV4dDtcbiAgICAgICAgd2hpbGUgKGIgIT09IGEucHJldikge1xuICAgICAgICAgICAgaWYgKGEuaSAhPT0gYi5pICYmIGlzVmFsaWREaWFnb25hbChhLCBiKSkge1xuICAgICAgICAgICAgICAgIC8vIHNwbGl0IHRoZSBwb2x5Z29uIGluIHR3byBieSB0aGUgZGlhZ29uYWxcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHNwbGl0UG9seWdvbihhLCBiKTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG4gICAgICAgICAgICAgICAgYSA9IGZpbHRlclBvaW50cyhhLCBhLm5leHQpO1xuICAgICAgICAgICAgICAgIGMgPSBmaWx0ZXJQb2ludHMoYywgYy5uZXh0KTtcblxuICAgICAgICAgICAgICAgIC8vIHJ1biBlYXJjdXQgb24gZWFjaCBoYWxmXG4gICAgICAgICAgICAgICAgZWFyY3V0TGlua2VkKGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAwKTtcbiAgICAgICAgICAgICAgICBlYXJjdXRMaW5rZWQoYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGIgPSBiLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IGEubmV4dDtcbiAgICB9IHdoaWxlIChhICE9PSBzdGFydCk7XG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKGRhdGEsIGhvbGVJbmRpY2VzLCBvdXRlck5vZGUsIGRpbSkge1xuICAgIHZhciBxdWV1ZSA9IFtdLFxuICAgICAgICBpLCBsZW4sIHN0YXJ0LCBlbmQsIGxpc3Q7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdGFydCA9IGhvbGVJbmRpY2VzW2ldICogZGltO1xuICAgICAgICBlbmQgPSBpIDwgbGVuIC0gMSA/IGhvbGVJbmRpY2VzW2kgKyAxXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuICAgICAgICBsaXN0ID0gbGlua2VkTGlzdChkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlKTtcbiAgICAgICAgaWYgKGxpc3QgPT09IGxpc3QubmV4dCkgbGlzdC5zdGVpbmVyID0gdHJ1ZTtcbiAgICAgICAgcXVldWUucHVzaChnZXRMZWZ0bW9zdChsaXN0KSk7XG4gICAgfVxuXG4gICAgcXVldWUuc29ydChjb21wYXJlWCk7XG5cbiAgICAvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxuICAgIGZvciAoaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlKHF1ZXVlW2ldLCBvdXRlck5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXRlck5vZGU7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVYKGEsIGIpIHtcbiAgICByZXR1cm4gYS54IC0gYi54O1xufVxuXG4vLyBmaW5kIGEgYnJpZGdlIGJldHdlZW4gdmVydGljZXMgdGhhdCBjb25uZWN0cyBob2xlIHdpdGggYW4gb3V0ZXIgcmluZyBhbmQgYW5kIGxpbmsgaXRcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGUoaG9sZSwgb3V0ZXJOb2RlKSB7XG4gICAgdmFyIGJyaWRnZSA9IGZpbmRIb2xlQnJpZGdlKGhvbGUsIG91dGVyTm9kZSk7XG4gICAgaWYgKCFicmlkZ2UpIHtcbiAgICAgICAgcmV0dXJuIG91dGVyTm9kZTtcbiAgICB9XG5cbiAgICB2YXIgYnJpZGdlUmV2ZXJzZSA9IHNwbGl0UG9seWdvbihicmlkZ2UsIGhvbGUpO1xuXG4gICAgLy8gZmlsdGVyIGNvbGxpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG4gICAgZmlsdGVyUG9pbnRzKGJyaWRnZVJldmVyc2UsIGJyaWRnZVJldmVyc2UubmV4dCk7XG4gICAgcmV0dXJuIGZpbHRlclBvaW50cyhicmlkZ2UsIGJyaWRnZS5uZXh0KTtcbn1cblxuLy8gRGF2aWQgRWJlcmx5J3MgYWxnb3JpdGhtIGZvciBmaW5kaW5nIGEgYnJpZGdlIGJldHdlZW4gaG9sZSBhbmQgb3V0ZXIgcG9seWdvblxuZnVuY3Rpb24gZmluZEhvbGVCcmlkZ2UoaG9sZSwgb3V0ZXJOb2RlKSB7XG4gICAgdmFyIHAgPSBvdXRlck5vZGUsXG4gICAgICAgIGh4ID0gaG9sZS54LFxuICAgICAgICBoeSA9IGhvbGUueSxcbiAgICAgICAgcXggPSAtSW5maW5pdHksXG4gICAgICAgIG07XG5cbiAgICAvLyBmaW5kIGEgc2VnbWVudCBpbnRlcnNlY3RlZCBieSBhIHJheSBmcm9tIHRoZSBob2xlJ3MgbGVmdG1vc3QgcG9pbnQgdG8gdGhlIGxlZnQ7XG4gICAgLy8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxuICAgIGRvIHtcbiAgICAgICAgaWYgKGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55KSB7XG4gICAgICAgICAgICB2YXIgeCA9IHAueCArIChoeSAtIHAueSkgKiAocC5uZXh0LnggLSBwLngpIC8gKHAubmV4dC55IC0gcC55KTtcbiAgICAgICAgICAgIGlmICh4IDw9IGh4ICYmIHggPiBxeCkge1xuICAgICAgICAgICAgICAgIHF4ID0geDtcbiAgICAgICAgICAgICAgICBtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xuICAgICAgICAgICAgICAgIGlmICh4ID09PSBoeCkgcmV0dXJuIG07IC8vIGhvbGUgdG91Y2hlcyBvdXRlciBzZWdtZW50OyBwaWNrIGxlZnRtb3N0IGVuZHBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBvdXRlck5vZGUpO1xuXG4gICAgaWYgKCFtKSByZXR1cm4gbnVsbDtcblxuICAgIC8vIGxvb2sgZm9yIHBvaW50cyBpbnNpZGUgdGhlIHRyaWFuZ2xlIG9mIGhvbGUgcG9pbnQsIHNlZ21lbnQgaW50ZXJzZWN0aW9uIGFuZCBlbmRwb2ludDtcbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gcG9pbnRzIGZvdW5kLCB3ZSBoYXZlIGEgdmFsaWQgY29ubmVjdGlvbjtcbiAgICAvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxuXG4gICAgdmFyIHN0b3AgPSBtLFxuICAgICAgICBteCA9IG0ueCxcbiAgICAgICAgbXkgPSBtLnksXG4gICAgICAgIHRhbk1pbiA9IEluZmluaXR5LFxuICAgICAgICB0YW47XG5cbiAgICBwID0gbTtcblxuICAgIGRvIHtcbiAgICAgICAgaWYgKGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJlxuICAgICAgICAgICAgICAgIHBvaW50SW5UcmlhbmdsZShoeSA8IG15ID8gaHggOiBxeCwgaHksIG14LCBteSwgaHkgPCBteSA/IHF4IDogaHgsIGh5LCBwLngsIHAueSkpIHtcblxuICAgICAgICAgICAgdGFuID0gTWF0aC5hYnMoaHkgLSBwLnkpIC8gKGh4IC0gcC54KTsgLy8gdGFuZ2VudGlhbFxuXG4gICAgICAgICAgICBpZiAobG9jYWxseUluc2lkZShwLCBob2xlKSAmJlxuICAgICAgICAgICAgICAgICh0YW4gPCB0YW5NaW4gfHwgKHRhbiA9PT0gdGFuTWluICYmIChwLnggPiBtLnggfHwgKHAueCA9PT0gbS54ICYmIHNlY3RvckNvbnRhaW5zU2VjdG9yKG0sIHApKSkpKSkge1xuICAgICAgICAgICAgICAgIG0gPSBwO1xuICAgICAgICAgICAgICAgIHRhbk1pbiA9IHRhbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gc3RvcCk7XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gd2hldGhlciBzZWN0b3IgaW4gdmVydGV4IG0gY29udGFpbnMgc2VjdG9yIGluIHZlcnRleCBwIGluIHRoZSBzYW1lIGNvb3JkaW5hdGVzXG5mdW5jdGlvbiBzZWN0b3JDb250YWluc1NlY3RvcihtLCBwKSB7XG4gICAgcmV0dXJuIGFyZWEobS5wcmV2LCBtLCBwLnByZXYpIDwgMCAmJiBhcmVhKHAubmV4dCwgbSwgbS5uZXh0KSA8IDA7XG59XG5cbi8vIGludGVybGluayBwb2x5Z29uIG5vZGVzIGluIHotb3JkZXJcbmZ1bmN0aW9uIGluZGV4Q3VydmUoc3RhcnQsIG1pblgsIG1pblksIGludlNpemUpIHtcbiAgICB2YXIgcCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgaWYgKHAueiA9PT0gMCkgcC56ID0gek9yZGVyKHAueCwgcC55LCBtaW5YLCBtaW5ZLCBpbnZTaXplKTtcbiAgICAgICAgcC5wcmV2WiA9IHAucHJldjtcbiAgICAgICAgcC5uZXh0WiA9IHAubmV4dDtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICBwLnByZXZaLm5leHRaID0gbnVsbDtcbiAgICBwLnByZXZaID0gbnVsbDtcblxuICAgIHNvcnRMaW5rZWQocCk7XG59XG5cbi8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXG4vLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxuZnVuY3Rpb24gc29ydExpbmtlZChsaXN0KSB7XG4gICAgdmFyIGksIHAsIHEsIGUsIHRhaWwsIG51bU1lcmdlcywgcFNpemUsIHFTaXplLFxuICAgICAgICBpblNpemUgPSAxO1xuXG4gICAgZG8ge1xuICAgICAgICBwID0gbGlzdDtcbiAgICAgICAgbGlzdCA9IG51bGw7XG4gICAgICAgIHRhaWwgPSBudWxsO1xuICAgICAgICBudW1NZXJnZXMgPSAwO1xuXG4gICAgICAgIHdoaWxlIChwKSB7XG4gICAgICAgICAgICBudW1NZXJnZXMrKztcbiAgICAgICAgICAgIHEgPSBwO1xuICAgICAgICAgICAgcFNpemUgPSAwO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGluU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcFNpemUrKztcbiAgICAgICAgICAgICAgICBxID0gcS5uZXh0WjtcbiAgICAgICAgICAgICAgICBpZiAoIXEpIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcVNpemUgPSBpblNpemU7XG5cbiAgICAgICAgICAgIHdoaWxlIChwU2l6ZSA+IDAgfHwgKHFTaXplID4gMCAmJiBxKSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHBTaXplICE9PSAwICYmIChxU2l6ZSA9PT0gMCB8fCAhcSB8fCBwLnogPD0gcS56KSkge1xuICAgICAgICAgICAgICAgICAgICBlID0gcDtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAubmV4dFo7XG4gICAgICAgICAgICAgICAgICAgIHBTaXplLS07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZSA9IHE7XG4gICAgICAgICAgICAgICAgICAgIHEgPSBxLm5leHRaO1xuICAgICAgICAgICAgICAgICAgICBxU2l6ZS0tO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0YWlsKSB0YWlsLm5leHRaID0gZTtcbiAgICAgICAgICAgICAgICBlbHNlIGxpc3QgPSBlO1xuXG4gICAgICAgICAgICAgICAgZS5wcmV2WiA9IHRhaWw7XG4gICAgICAgICAgICAgICAgdGFpbCA9IGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHAgPSBxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGFpbC5uZXh0WiA9IG51bGw7XG4gICAgICAgIGluU2l6ZSAqPSAyO1xuXG4gICAgfSB3aGlsZSAobnVtTWVyZ2VzID4gMSk7XG5cbiAgICByZXR1cm4gbGlzdDtcbn1cblxuLy8gei1vcmRlciBvZiBhIHBvaW50IGdpdmVuIGNvb3JkcyBhbmQgaW52ZXJzZSBvZiB0aGUgbG9uZ2VyIHNpZGUgb2YgZGF0YSBiYm94XG5mdW5jdGlvbiB6T3JkZXIoeCwgeSwgbWluWCwgbWluWSwgaW52U2l6ZSkge1xuICAgIC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2VcbiAgICB4ID0gKHggLSBtaW5YKSAqIGludlNpemUgfCAwO1xuICAgIHkgPSAoeSAtIG1pblkpICogaW52U2l6ZSB8IDA7XG5cbiAgICB4ID0gKHggfCAoeCA8PCA4KSkgJiAweDAwRkYwMEZGO1xuICAgIHggPSAoeCB8ICh4IDw8IDQpKSAmIDB4MEYwRjBGMEY7XG4gICAgeCA9ICh4IHwgKHggPDwgMikpICYgMHgzMzMzMzMzMztcbiAgICB4ID0gKHggfCAoeCA8PCAxKSkgJiAweDU1NTU1NTU1O1xuXG4gICAgeSA9ICh5IHwgKHkgPDwgOCkpICYgMHgwMEZGMDBGRjtcbiAgICB5ID0gKHkgfCAoeSA8PCA0KSkgJiAweDBGMEYwRjBGO1xuICAgIHkgPSAoeSB8ICh5IDw8IDIpKSAmIDB4MzMzMzMzMzM7XG4gICAgeSA9ICh5IHwgKHkgPDwgMSkpICYgMHg1NTU1NTU1NTtcblxuICAgIHJldHVybiB4IHwgKHkgPDwgMSk7XG59XG5cbi8vIGZpbmQgdGhlIGxlZnRtb3N0IG5vZGUgb2YgYSBwb2x5Z29uIHJpbmdcbmZ1bmN0aW9uIGdldExlZnRtb3N0KHN0YXJ0KSB7XG4gICAgdmFyIHAgPSBzdGFydCxcbiAgICAgICAgbGVmdG1vc3QgPSBzdGFydDtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLnggPCBsZWZ0bW9zdC54IHx8IChwLnggPT09IGxlZnRtb3N0LnggJiYgcC55IDwgbGVmdG1vc3QueSkpIGxlZnRtb3N0ID0gcDtcbiAgICAgICAgcCA9IHAubmV4dDtcbiAgICB9IHdoaWxlIChwICE9PSBzdGFydCk7XG5cbiAgICByZXR1cm4gbGVmdG1vc3Q7XG59XG5cbi8vIGNoZWNrIGlmIGEgcG9pbnQgbGllcyB3aXRoaW4gYSBjb252ZXggdHJpYW5nbGVcbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZShheCwgYXksIGJ4LCBieSwgY3gsIGN5LCBweCwgcHkpIHtcbiAgICByZXR1cm4gKGN4IC0gcHgpICogKGF5IC0gcHkpID49IChheCAtIHB4KSAqIChjeSAtIHB5KSAmJlxuICAgICAgICAgICAoYXggLSBweCkgKiAoYnkgLSBweSkgPj0gKGJ4IC0gcHgpICogKGF5IC0gcHkpICYmXG4gICAgICAgICAgIChieCAtIHB4KSAqIChjeSAtIHB5KSA+PSAoY3ggLSBweCkgKiAoYnkgLSBweSk7XG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKGEsIGIpIHtcbiAgICByZXR1cm4gYS5uZXh0LmkgIT09IGIuaSAmJiBhLnByZXYuaSAhPT0gYi5pICYmICFpbnRlcnNlY3RzUG9seWdvbihhLCBiKSAmJiAvLyBkb25lcyd0IGludGVyc2VjdCBvdGhlciBlZGdlc1xuICAgICAgICAgICAobG9jYWxseUluc2lkZShhLCBiKSAmJiBsb2NhbGx5SW5zaWRlKGIsIGEpICYmIG1pZGRsZUluc2lkZShhLCBiKSAmJiAvLyBsb2NhbGx5IHZpc2libGVcbiAgICAgICAgICAgIChhcmVhKGEucHJldiwgYSwgYi5wcmV2KSB8fCBhcmVhKGEsIGIucHJldiwgYikpIHx8IC8vIGRvZXMgbm90IGNyZWF0ZSBvcHBvc2l0ZS1mYWNpbmcgc2VjdG9yc1xuICAgICAgICAgICAgZXF1YWxzKGEsIGIpICYmIGFyZWEoYS5wcmV2LCBhLCBhLm5leHQpID4gMCAmJiBhcmVhKGIucHJldiwgYiwgYi5uZXh0KSA+IDApOyAvLyBzcGVjaWFsIHplcm8tbGVuZ3RoIGNhc2Vcbn1cblxuLy8gc2lnbmVkIGFyZWEgb2YgYSB0cmlhbmdsZVxuZnVuY3Rpb24gYXJlYShwLCBxLCByKSB7XG4gICAgcmV0dXJuIChxLnkgLSBwLnkpICogKHIueCAtIHEueCkgLSAocS54IC0gcC54KSAqIChyLnkgLSBxLnkpO1xufVxuXG4vLyBjaGVjayBpZiB0d28gcG9pbnRzIGFyZSBlcXVhbFxuZnVuY3Rpb24gZXF1YWxzKHAxLCBwMikge1xuICAgIHJldHVybiBwMS54ID09PSBwMi54ICYmIHAxLnkgPT09IHAyLnk7XG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcbmZ1bmN0aW9uIGludGVyc2VjdHMocDEsIHExLCBwMiwgcTIpIHtcbiAgICB2YXIgbzEgPSBzaWduKGFyZWEocDEsIHExLCBwMikpO1xuICAgIHZhciBvMiA9IHNpZ24oYXJlYShwMSwgcTEsIHEyKSk7XG4gICAgdmFyIG8zID0gc2lnbihhcmVhKHAyLCBxMiwgcDEpKTtcbiAgICB2YXIgbzQgPSBzaWduKGFyZWEocDIsIHEyLCBxMSkpO1xuXG4gICAgaWYgKG8xICE9PSBvMiAmJiBvMyAhPT0gbzQpIHJldHVybiB0cnVlOyAvLyBnZW5lcmFsIGNhc2VcblxuICAgIGlmIChvMSA9PT0gMCAmJiBvblNlZ21lbnQocDEsIHAyLCBxMSkpIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHAyIGFyZSBjb2xsaW5lYXIgYW5kIHAyIGxpZXMgb24gcDFxMVxuICAgIGlmIChvMiA9PT0gMCAmJiBvblNlZ21lbnQocDEsIHEyLCBxMSkpIHJldHVybiB0cnVlOyAvLyBwMSwgcTEgYW5kIHEyIGFyZSBjb2xsaW5lYXIgYW5kIHEyIGxpZXMgb24gcDFxMVxuICAgIGlmIChvMyA9PT0gMCAmJiBvblNlZ21lbnQocDIsIHAxLCBxMikpIHJldHVybiB0cnVlOyAvLyBwMiwgcTIgYW5kIHAxIGFyZSBjb2xsaW5lYXIgYW5kIHAxIGxpZXMgb24gcDJxMlxuICAgIGlmIChvNCA9PT0gMCAmJiBvblNlZ21lbnQocDIsIHExLCBxMikpIHJldHVybiB0cnVlOyAvLyBwMiwgcTIgYW5kIHExIGFyZSBjb2xsaW5lYXIgYW5kIHExIGxpZXMgb24gcDJxMlxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBmb3IgY29sbGluZWFyIHBvaW50cyBwLCBxLCByLCBjaGVjayBpZiBwb2ludCBxIGxpZXMgb24gc2VnbWVudCBwclxuZnVuY3Rpb24gb25TZWdtZW50KHAsIHEsIHIpIHtcbiAgICByZXR1cm4gcS54IDw9IE1hdGgubWF4KHAueCwgci54KSAmJiBxLnggPj0gTWF0aC5taW4ocC54LCByLngpICYmIHEueSA8PSBNYXRoLm1heChwLnksIHIueSkgJiYgcS55ID49IE1hdGgubWluKHAueSwgci55KTtcbn1cblxuZnVuY3Rpb24gc2lnbihudW0pIHtcbiAgICByZXR1cm4gbnVtID4gMCA/IDEgOiBudW0gPCAwID8gLTEgOiAwO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaW50ZXJzZWN0cyBhbnkgcG9seWdvbiBzZWdtZW50c1xuZnVuY3Rpb24gaW50ZXJzZWN0c1BvbHlnb24oYSwgYikge1xuICAgIHZhciBwID0gYTtcbiAgICBkbyB7XG4gICAgICAgIGlmIChwLmkgIT09IGEuaSAmJiBwLm5leHQuaSAhPT0gYS5pICYmIHAuaSAhPT0gYi5pICYmIHAubmV4dC5pICE9PSBiLmkgJiZcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3RzKHAsIHAubmV4dCwgYSwgYikpIHJldHVybiB0cnVlO1xuICAgICAgICBwID0gcC5uZXh0O1xuICAgIH0gd2hpbGUgKHAgIT09IGEpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoYSwgYikge1xuICAgIHJldHVybiBhcmVhKGEucHJldiwgYSwgYS5uZXh0KSA8IDAgP1xuICAgICAgICBhcmVhKGEsIGIsIGEubmV4dCkgPj0gMCAmJiBhcmVhKGEsIGEucHJldiwgYikgPj0gMCA6XG4gICAgICAgIGFyZWEoYSwgYiwgYS5wcmV2KSA8IDAgfHwgYXJlYShhLCBhLm5leHQsIGIpIDwgMDtcbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoYSwgYikge1xuICAgIHZhciBwID0gYSxcbiAgICAgICAgaW5zaWRlID0gZmFsc2UsXG4gICAgICAgIHB4ID0gKGEueCArIGIueCkgLyAyLFxuICAgICAgICBweSA9IChhLnkgKyBiLnkpIC8gMjtcbiAgICBkbyB7XG4gICAgICAgIGlmICgoKHAueSA+IHB5KSAhPT0gKHAubmV4dC55ID4gcHkpKSAmJiBwLm5leHQueSAhPT0gcC55ICYmXG4gICAgICAgICAgICAgICAgKHB4IDwgKHAubmV4dC54IC0gcC54KSAqIChweSAtIHAueSkgLyAocC5uZXh0LnkgLSBwLnkpICsgcC54KSlcbiAgICAgICAgICAgIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgICAgIHAgPSBwLm5leHQ7XG4gICAgfSB3aGlsZSAocCAhPT0gYSk7XG5cbiAgICByZXR1cm4gaW5zaWRlO1xufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcbmZ1bmN0aW9uIHNwbGl0UG9seWdvbihhLCBiKSB7XG4gICAgdmFyIGEyID0gbmV3IE5vZGUoYS5pLCBhLngsIGEueSksXG4gICAgICAgIGIyID0gbmV3IE5vZGUoYi5pLCBiLngsIGIueSksXG4gICAgICAgIGFuID0gYS5uZXh0LFxuICAgICAgICBicCA9IGIucHJldjtcblxuICAgIGEubmV4dCA9IGI7XG4gICAgYi5wcmV2ID0gYTtcblxuICAgIGEyLm5leHQgPSBhbjtcbiAgICBhbi5wcmV2ID0gYTI7XG5cbiAgICBiMi5uZXh0ID0gYTI7XG4gICAgYTIucHJldiA9IGIyO1xuXG4gICAgYnAubmV4dCA9IGIyO1xuICAgIGIyLnByZXYgPSBicDtcblxuICAgIHJldHVybiBiMjtcbn1cblxuLy8gY3JlYXRlIGEgbm9kZSBhbmQgb3B0aW9uYWxseSBsaW5rIGl0IHdpdGggcHJldmlvdXMgb25lIChpbiBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdClcbmZ1bmN0aW9uIGluc2VydE5vZGUoaSwgeCwgeSwgbGFzdCkge1xuICAgIHZhciBwID0gbmV3IE5vZGUoaSwgeCwgeSk7XG5cbiAgICBpZiAoIWxhc3QpIHtcbiAgICAgICAgcC5wcmV2ID0gcDtcbiAgICAgICAgcC5uZXh0ID0gcDtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHAubmV4dCA9IGxhc3QubmV4dDtcbiAgICAgICAgcC5wcmV2ID0gbGFzdDtcbiAgICAgICAgbGFzdC5uZXh0LnByZXYgPSBwO1xuICAgICAgICBsYXN0Lm5leHQgPSBwO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTm9kZShwKSB7XG4gICAgcC5uZXh0LnByZXYgPSBwLnByZXY7XG4gICAgcC5wcmV2Lm5leHQgPSBwLm5leHQ7XG5cbiAgICBpZiAocC5wcmV2WikgcC5wcmV2Wi5uZXh0WiA9IHAubmV4dFo7XG4gICAgaWYgKHAubmV4dFopIHAubmV4dFoucHJldlogPSBwLnByZXZaO1xufVxuXG5mdW5jdGlvbiBOb2RlKGksIHgsIHkpIHtcbiAgICAvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcbiAgICB0aGlzLmkgPSBpO1xuXG4gICAgLy8gdmVydGV4IGNvb3JkaW5hdGVzXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuXG4gICAgLy8gcHJldmlvdXMgYW5kIG5leHQgdmVydGV4IG5vZGVzIGluIGEgcG9seWdvbiByaW5nXG4gICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICB0aGlzLm5leHQgPSBudWxsO1xuXG4gICAgLy8gei1vcmRlciBjdXJ2ZSB2YWx1ZVxuICAgIHRoaXMueiA9IDA7XG5cbiAgICAvLyBwcmV2aW91cyBhbmQgbmV4dCBub2RlcyBpbiB6LW9yZGVyXG4gICAgdGhpcy5wcmV2WiA9IG51bGw7XG4gICAgdGhpcy5uZXh0WiA9IG51bGw7XG5cbiAgICAvLyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIGlzIGEgc3RlaW5lciBwb2ludFxuICAgIHRoaXMuc3RlaW5lciA9IGZhbHNlO1xufVxuXG4vLyByZXR1cm4gYSBwZXJjZW50YWdlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgcG9seWdvbiBhcmVhIGFuZCBpdHMgdHJpYW5ndWxhdGlvbiBhcmVhO1xuLy8gdXNlZCB0byB2ZXJpZnkgY29ycmVjdG5lc3Mgb2YgdHJpYW5ndWxhdGlvblxuZWFyY3V0LmRldmlhdGlvbiA9IGZ1bmN0aW9uIChkYXRhLCBob2xlSW5kaWNlcywgZGltLCB0cmlhbmdsZXMpIHtcbiAgICB2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGg7XG4gICAgdmFyIG91dGVyTGVuID0gaGFzSG9sZXMgPyBob2xlSW5kaWNlc1swXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXG4gICAgdmFyIHBvbHlnb25BcmVhID0gTWF0aC5hYnMoc2lnbmVkQXJlYShkYXRhLCAwLCBvdXRlckxlbiwgZGltKSk7XG4gICAgaWYgKGhhc0hvbGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gaG9sZUluZGljZXNbaV0gKiBkaW07XG4gICAgICAgICAgICB2YXIgZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1tpICsgMV0gKiBkaW0gOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIHBvbHlnb25BcmVhIC09IE1hdGguYWJzKHNpZ25lZEFyZWEoZGF0YSwgc3RhcnQsIGVuZCwgZGltKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdHJpYW5nbGVzQXJlYSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB2YXIgYSA9IHRyaWFuZ2xlc1tpXSAqIGRpbTtcbiAgICAgICAgdmFyIGIgPSB0cmlhbmdsZXNbaSArIDFdICogZGltO1xuICAgICAgICB2YXIgYyA9IHRyaWFuZ2xlc1tpICsgMl0gKiBkaW07XG4gICAgICAgIHRyaWFuZ2xlc0FyZWEgKz0gTWF0aC5hYnMoXG4gICAgICAgICAgICAoZGF0YVthXSAtIGRhdGFbY10pICogKGRhdGFbYiArIDFdIC0gZGF0YVthICsgMV0pIC1cbiAgICAgICAgICAgIChkYXRhW2FdIC0gZGF0YVtiXSkgKiAoZGF0YVtjICsgMV0gLSBkYXRhW2EgKyAxXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBwb2x5Z29uQXJlYSA9PT0gMCAmJiB0cmlhbmdsZXNBcmVhID09PSAwID8gMCA6XG4gICAgICAgIE1hdGguYWJzKCh0cmlhbmdsZXNBcmVhIC0gcG9seWdvbkFyZWEpIC8gcG9seWdvbkFyZWEpO1xufTtcblxuZnVuY3Rpb24gc2lnbmVkQXJlYShkYXRhLCBzdGFydCwgZW5kLCBkaW0pIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQsIGogPSBlbmQgLSBkaW07IGkgPCBlbmQ7IGkgKz0gZGltKSB7XG4gICAgICAgIHN1bSArPSAoZGF0YVtqXSAtIGRhdGFbaV0pICogKGRhdGFbaSArIDFdICsgZGF0YVtqICsgMV0pO1xuICAgICAgICBqID0gaTtcbiAgICB9XG4gICAgcmV0dXJuIHN1bTtcbn1cblxuLy8gdHVybiBhIHBvbHlnb24gaW4gYSBtdWx0aS1kaW1lbnNpb25hbCBhcnJheSBmb3JtIChlLmcuIGFzIGluIEdlb0pTT04pIGludG8gYSBmb3JtIEVhcmN1dCBhY2NlcHRzXG5lYXJjdXQuZmxhdHRlbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGRpbSA9IGRhdGFbMF1bMF0ubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSB7dmVydGljZXM6IFtdLCBob2xlczogW10sIGRpbWVuc2lvbnM6IGRpbX0sXG4gICAgICAgIGhvbGVJbmRleCA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkYXRhW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IGRpbTsgZCsrKSByZXN1bHQudmVydGljZXMucHVzaChkYXRhW2ldW2pdW2RdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGhvbGVJbmRleCArPSBkYXRhW2kgLSAxXS5sZW5ndGg7XG4gICAgICAgICAgICByZXN1bHQuaG9sZXMucHVzaChob2xlSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuIiwgImV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50cy9mbGlwYm9vay5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMvcHJlZmFiLXN0b3JhZ2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzL3ByZWZhYi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMvc2hvb3RCYXNlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50cy9zbmFwLXJvdGF0ZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudHMvc25vdy1wYXJ0aWNsZXMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnRzL3RhZ3MuanMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9ybmcuanMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9PYmplY3RDYWNoZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL3dsVXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9hcnJheUhlbHBlcnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9sZXJwLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMvcXVldWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscy9ybmdXaXRoV2VpZ2h0LmpzJztcbiIsICIvKipcbiAqIENvbXBvbmVudCBwcm9wZXJ0eSB0eXBlLlxuICovXG5leHBvcnQgdmFyIFR5cGU7XG4oZnVuY3Rpb24gKFR5cGUpIHtcbiAgICAvKipcbiAgICAgKiAqKk5hdGl2ZSoqXG4gICAgICpcbiAgICAgKiBQcm9wZXJ0eSBvZiBhIG5hdGl2ZSBjb21wb25lbnQuIE11c3Qgbm90IGJlIHVzZWQgaW4gY3VzdG9tIGNvbXBvbmVudHMuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiTmF0aXZlXCJdID0gMV0gPSBcIk5hdGl2ZVwiO1xuICAgIC8qKlxuICAgICAqICoqQm9vbCoqOlxuICAgICAqXG4gICAgICogQXBwZWFycyBpbiB0aGUgZWRpdG9yIGFzIGEgY2hlY2tib3guXG4gICAgICpcbiAgICAgKiBJbml0aWFsIHZhbHVlIGlzIGBmYWxzZWAsIHVubGVzcyBvdmVycmlkZGVuIGJ5IHRoZSBgZGVmYXVsdGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiQm9vbFwiXSA9IDJdID0gXCJCb29sXCI7XG4gICAgLyoqXG4gICAgICogKipJbnQqKjpcbiAgICAgKlxuICAgICAqIEFwcGVhcnMgaW4gdGhlIGVkaXRvciBhcyBhbiBpbnRlZ2VyIGlucHV0IGZpZWxkLlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyBgMGAsIHVubGVzcyBvdmVycmlkZGVuIGJ5IHRoZSBgZGVmYXVsdGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiSW50XCJdID0gNF0gPSBcIkludFwiO1xuICAgIC8qKlxuICAgICAqICoqRmxvYXQqKjpcbiAgICAgKlxuICAgICAqIEFwcGVhcnMgaW4gdGhlIGVkaXRvciBhcyBhIGZsb2F0aW5nIHBvaW50IGlucHV0IGZpZWxkLlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyBgMC4wYCwgdW5sZXNzIG92ZXJyaWRkZW4gYnkgdGhlIGBkZWZhdWx0YCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBUeXBlW1R5cGVbXCJGbG9hdFwiXSA9IDhdID0gXCJGbG9hdFwiO1xuICAgIC8qKlxuICAgICAqICoqU3RyaW5nIC8gVGV4dCoqOlxuICAgICAqXG4gICAgICogQXBwZWFycyBpbiB0aGUgZWRpdG9yIGFzIGEgc2luZ2xlLWxpbmUgdGV4dCBpbnB1dCBmaWVsZC5cbiAgICAgKlxuICAgICAqIEluaXRpYWwgdmFsdWUgaXMgYW4gZW1wdHkgc3RyaW5nLCB1bmxlc3Mgb3ZlcnJpZGRlbiBieSB0aGUgYGRlZmF1bHRgXG4gICAgICogcHJvcGVydHkuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiU3RyaW5nXCJdID0gMTZdID0gXCJTdHJpbmdcIjtcbiAgICAvKipcbiAgICAgKiAqKkVudW1lcmF0aW9uKio6XG4gICAgICpcbiAgICAgKiBBcHBlYXJzIGluIHRoZSBlZGl0b3IgYXMgYSBkcm9wZG93biB3aXRoIGdpdmVuIHZhbHVlcy4gVGhlIGFkZGl0aW9uYWxcbiAgICAgKiBgdmFsdWVzYCBwYXJhbWV0ZXIgd2l0aCBzZWxlY3Rpb24gb3B0aW9ucyBpcyBtYW5kYXRvcnkuXG4gICAgICpcbiAgICAgKiBUaGUgcHJvcGVydHkgdmFsdWUgaXMgcmVzb2x2ZWQgdG8gYW4gKippbmRleCoqIGludG8gdGhlIGB2YWx1ZXNgIGFycmF5LlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyB0aGUgZmlyc3QgZWxlbWVudCBpbiBgdmFsdWVzYCwgdW5sZXNzIG92ZXJyaWRkZW4gYnlcbiAgICAgKiB0aGUgYGRlZmF1bHRgIHByb3BlcnR5LiBUaGUgYGRlZmF1bHRgIHZhbHVlIGNhbiBiZSBhIHN0cmluZyBvciBhbiBpbmRleFxuICAgICAqIGludG8gYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgICAgY2FtZXJhOiB7dHlwZTogVHlwZS5FbnVtLCB2YWx1ZXM6IFsnYXV0bycsICdiYWNrJywgJ2Zyb250J10sIGRlZmF1bHQ6ICdhdXRvJ30sXG4gICAgICogYGBgXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiRW51bVwiXSA9IDMyXSA9IFwiRW51bVwiO1xuICAgIC8qKlxuICAgICAqICoqT2JqZWN0IHJlZmVyZW5jZSoqOlxuICAgICAqXG4gICAgICogQXBwZWFycyBpbiB0aGUgZWRpdG9yIGFzIGFuIG9iamVjdCByZXNvdXJjZSBzZWxlY3Rpb24gZHJvcGRvd25cbiAgICAgKiB3aXRoIG9iamVjdCBwaWNrZXIuXG4gICAgICpcbiAgICAgKiBJbml0aWFsIHZhbHVlIGlzIGBudWxsYC5cbiAgICAgKi9cbiAgICBUeXBlW1R5cGVbXCJPYmplY3RcIl0gPSA2NF0gPSBcIk9iamVjdFwiO1xuICAgIC8qKlxuICAgICAqICoqTWVzaCByZWZlcmVuY2UqKjpcbiAgICAgKlxuICAgICAqIEFwcGVhcnMgaW4gdGhlIGVkaXRvciBhcyBhIG1lc2ggcmVzb3VyY2Ugc2VsZWN0aW9uIGRyb3Bkb3duLlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyBgbnVsbGAuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiTWVzaFwiXSA9IDEyOF0gPSBcIk1lc2hcIjtcbiAgICAvKipcbiAgICAgKiAqKlRleHR1cmUgcmVmZXJlbmNlKio6XG4gICAgICpcbiAgICAgKiBBcHBlYXJzIGluIHRoZSBlZGl0b3IgYXMgYSB0ZXh0dXJlIHJlc291cmNlIHNlbGVjdGlvbiBkcm9wZG93bi5cbiAgICAgKlxuICAgICAqIEluaXRpYWwgdmFsdWUgaXMgYG51bGxgLlxuICAgICAqL1xuICAgIFR5cGVbVHlwZVtcIlRleHR1cmVcIl0gPSAyNTZdID0gXCJUZXh0dXJlXCI7XG4gICAgLyoqXG4gICAgICogKipNYXRlcmlhbCByZWZlcmVuY2UqKjpcbiAgICAgKlxuICAgICAqIEFwcGVhcnMgaW4gdGhlIGVkaXRvciBhcyBhIG1hdGVyaWFsIHJlc291cmNlIHNlbGVjdGlvbiBkcm9wZG93bi5cbiAgICAgKlxuICAgICAqIEluaXRpYWwgdmFsdWUgaXMgYG51bGxgLlxuICAgICAqL1xuICAgIFR5cGVbVHlwZVtcIk1hdGVyaWFsXCJdID0gNTEyXSA9IFwiTWF0ZXJpYWxcIjtcbiAgICAvKipcbiAgICAgKiAqKkFuaW1hdGlvbiByZWZlcmVuY2UqKjpcbiAgICAgKlxuICAgICAqIEFwcGVhcnMgaW4gdGhlIGVkaXRvciBhcyBhbiBhbmltYXRpb24gcmVzb3VyY2Ugc2VsZWN0aW9uIGRyb3Bkb3duLlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyBgbnVsbGAuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiQW5pbWF0aW9uXCJdID0gMTAyNF0gPSBcIkFuaW1hdGlvblwiO1xuICAgIC8qKlxuICAgICAqICoqU2tpbiByZWZlcmVuY2UqKjpcbiAgICAgKlxuICAgICAqIEFwcGVhcnMgaW4gdGhlIGVkaXRvciBhcyBhIHNraW4gcmVzb3VyY2Ugc2VsZWN0aW9uIGRyb3Bkb3duLlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyBgbnVsbGAuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiU2tpblwiXSA9IDIwNDhdID0gXCJTa2luXCI7XG4gICAgLyoqXG4gICAgICogKipDb2xvcioqOlxuICAgICAqXG4gICAgICogQXBwZWFycyBpbiB0aGUgZWRpdG9yIGFzIGEgY29sb3Igd2lkZ2V0LlxuICAgICAqXG4gICAgICogSW5pdGlhbCB2YWx1ZSBpcyBgWzAuMCwgMC4wLCAwLjAsIDEuMF1gLCB1bmxlc3Mgb3ZlcnJpZGRlbiBieSB0aGVcbiAgICAgKiBgZGVmYXVsdGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgVHlwZVtUeXBlW1wiQ29sb3JcIl0gPSA0MDk2XSA9IFwiQ29sb3JcIjtcbn0pKFR5cGUgfHwgKFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBDb21wb25lbnQgcHJvcGVydHkgbmFtZXNwYWNlLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQge0NvbXBvbmVudCwgUHJvcGVydHl9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4gKlxuICogY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICogICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICogICAgICAgICBteUJvb2w6IFByb3BlcnR5LmJvb2wodHJ1ZSksXG4gKiAgICAgICAgIG15SW50OiBQcm9wZXJ0eS5pbnQoNDIpLFxuICogICAgICAgICBteVN0cmluZzogUHJvcGVydHkuc3RyaW5nKCdIZWxsbyBXb3JsZCEnKSxcbiAqICAgICAgICAgbXlNZXNoOiBQcm9wZXJ0eS5tZXNoKCksXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKlxuICogRm9yIFR5cGVTY3JpcHQgdXNlcnMsIHlvdSBjYW4gdXNlIHRoZSBkZWNvcmF0b3JzIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9wZXJ0eSA9IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYm9vbGVhbiBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBib29sKGRlZmF1bHRWYWx1ZSA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFR5cGUuQm9vbCwgZGVmYXVsdDogZGVmYXVsdFZhbHVlIH07XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW50ZWdlciBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gYDBgLlxuICAgICAqL1xuICAgIGludChkZWZhdWx0VmFsdWUgPSAwKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFR5cGUuSW50LCBkZWZhdWx0OiBkZWZhdWx0VmFsdWUgfTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBmbG9hdCBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gYDAuMGAuXG4gICAgICovXG4gICAgZmxvYXQoZGVmYXVsdFZhbHVlID0gMC4wKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSB9O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIHN0cmluZyBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gYCcnYC5cbiAgICAgKi9cbiAgICBzdHJpbmcoZGVmYXVsdFZhbHVlID0gJycpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVHlwZS5TdHJpbmcsIGRlZmF1bHQ6IGRlZmF1bHRWYWx1ZSB9O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGVudW1lcmF0aW9uIHByb3BlcnR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlcyBUaGUgbGlzdCBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZS4gQ2FuIGJlIGEgc3RyaW5nIG9yIGFuIGluZGV4IGludG9cbiAgICAgKiAgICAgYHZhbHVlc2AuIElmIG5vdCBwcm92aWRlZCwgZGVmYXVsdHMgdG8gdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICovXG4gICAgZW51bSh2YWx1ZXMsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBUeXBlLkVudW0sIHZhbHVlcywgZGVmYXVsdDogZGVmYXVsdFZhbHVlIH07XG4gICAgfSxcbiAgICAvKiogQ3JlYXRlIGFuIHtAbGluayBPYmplY3QzRH0gcmVmZXJlbmNlIHByb3BlcnR5LiAqL1xuICAgIG9iamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVHlwZS5PYmplY3QsIGRlZmF1bHQ6IG51bGwgfTtcbiAgICB9LFxuICAgIC8qKiBDcmVhdGUgYSB7QGxpbmsgTWVzaH0gcmVmZXJlbmNlIHByb3BlcnR5LiAqL1xuICAgIG1lc2goKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFR5cGUuTWVzaCwgZGVmYXVsdDogbnVsbCB9O1xuICAgIH0sXG4gICAgLyoqIENyZWF0ZSBhIHtAbGluayBUZXh0dXJlfSByZWZlcmVuY2UgcHJvcGVydHkuICovXG4gICAgdGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVHlwZS5UZXh0dXJlLCBkZWZhdWx0OiBudWxsIH07XG4gICAgfSxcbiAgICAvKiogQ3JlYXRlIGEge0BsaW5rIE1hdGVyaWFsfSByZWZlcmVuY2UgcHJvcGVydHkuICovXG4gICAgbWF0ZXJpYWwoKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFR5cGUuTWF0ZXJpYWwsIGRlZmF1bHQ6IG51bGwgfTtcbiAgICB9LFxuICAgIC8qKiBDcmVhdGUgYW4ge0BsaW5rIEFuaW1hdGlvbn0gcmVmZXJlbmNlIHByb3BlcnR5LiAqL1xuICAgIGFuaW1hdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVHlwZS5BbmltYXRpb24sIGRlZmF1bHQ6IG51bGwgfTtcbiAgICB9LFxuICAgIC8qKiBDcmVhdGUgYSB7QGxpbmsgU2tpbn0gcmVmZXJlbmNlIHByb3BlcnR5LiAqL1xuICAgIHNraW4oKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFR5cGUuU2tpbiwgZGVmYXVsdDogbnVsbCB9O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY29sb3IgcHJvcGVydHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gciBUaGUgcmVkIGNvbXBvbmVudCwgaW4gdGhlIHJhbmdlIFswOyAxXS5cbiAgICAgKiBAcGFyYW0gZyBUaGUgZ3JlZW4gY29tcG9uZW50LCBpbiB0aGUgcmFuZ2UgWzA7IDFdLlxuICAgICAqIEBwYXJhbSBiIFRoZSBibHVlIGNvbXBvbmVudCwgaW4gdGhlIHJhbmdlIFswOyAxXS5cbiAgICAgKiBAcGFyYW0gYSBUaGUgYWxwaGEgY29tcG9uZW50LCBpbiB0aGUgcmFuZ2UgWzA7IDFdLlxuICAgICAqL1xuICAgIGNvbG9yKHIgPSAwLjAsIGcgPSAwLjAsIGIgPSAwLjAsIGEgPSAxLjApIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogVHlwZS5Db2xvciwgZGVmYXVsdDogW3IsIGcsIGIsIGFdIH07XG4gICAgfSxcbn07XG4iLCAiaW1wb3J0IHsgUHJvcGVydHksIFR5cGUgfSBmcm9tICcuL3Byb3BlcnR5LmpzJztcbi8qKlxuICogRGVjb3JhdG9yIGZvciBKUyBjb21wb25lbnQgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBUaGUgcHJvcGVydHkgZGVzY3JpcHRpb24gYXMgYW4gb2JqZWN0IGxpdGVyYWxcbiAqIEByZXR1cm5zIEEgZGVjb3JhdG9yIGZ1bmN0aW9uIG1vZGlmeWluZyB0aGUgYFByb3BlcnRpZXNgIHN0YXRpY1xuICogICAgIGF0dHJpYnV0ZVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eURlY29yYXRvcihkYXRhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gICAgICAgIGN0b3IuUHJvcGVydGllcyA9IGN0b3IuUHJvcGVydGllcyA/PyB7fTtcbiAgICAgICAgY3Rvci5Qcm9wZXJ0aWVzW3Byb3BlcnR5S2V5XSA9IGRhdGE7XG4gICAgfTtcbn1cbi8qKlxuICogRGVjb3JhdG9yIGZvciBtYWtpbmcgYSBnZXR0ZXIgZW51bWVyYWJsZS5cbiAqXG4gKiBVc2FnZTpcbiAqXG4gKiBgYGB0c1xuICogY2xhc3MgTXlDbGFzcyB7XG4gKiAgICAgQGVudW1lcmFibGUoKVxuICogICAgIGdldCBwcm9qZWN0aW9uTWF0cml4KCk6IEZsb2F0MzJBcnJheSB7IC4uLiB9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVudW1lcmFibGUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfLCBfXywgZGVzY3JpcHRvcikge1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICAgIH07XG59XG4vKipcbiAqIERlY29yYXRvciBmb3IgbmF0aXZlIHByb3BlcnRpZXMuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogYGBgdHNcbiAqIGNsYXNzIE15Q2xhc3Mge1xuICogICAgIEBuYXRpdmVQcm9wZXJ0eSgpXG4gKiAgICAgZ2V0IHByb2plY3Rpb25NYXRyaXgoKTogRmxvYXQzMkFycmF5IHsgLi4uIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gbmF0aXZlUHJvcGVydHkoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGVudW1lcmFibGUoKSh0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgcHJvcGVydHlEZWNvcmF0b3IoeyB0eXBlOiBUeXBlLk5hdGl2ZSB9KSh0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICB9O1xufVxuLyoqXG4gKiBQcm9wZXJ0eSBkZWNvcmF0b3JzIG5hbWVzcGFjZS5cbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGUgZGVjb3JhdG9ycyB0byBtYXJrIGEgY2xhc3MgYXR0cmlidXRlIGFzXG4gKiBhIFdvbmRlcmxhbmQgRW5naW5lIHByb3BlcnR5LlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQge01lc2h9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4gKiBpbXBvcnQge3Byb3BlcnR5fSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qcyc7XG4gKlxuICogY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICogICAgIEBwcm9wZXJ0eS5ib29sKHRydWUpXG4gKiAgICAgbXlCb29sITogYm9vbGVhbjtcbiAqXG4gKiAgICAgQHByb3BlcnR5LmludCg0MilcbiAqICAgICBteUludCE6IG51bWJlcjtcbiAqXG4gKiAgICAgQHByb3BlcnR5LnN0cmluZygnSGVsbG8gV29ybGQhJylcbiAqICAgICBteVN0cmluZyE6IHN0cmluZztcbiAqXG4gKiAgICAgQHByb3BlcnR5Lm1lc2goKVxuICogICAgIG15TWVzaCE6IE1lc2g7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBGb3IgSmF2YVNjcmlwdCB1c2VycywgcGxlYXNlIGRlY2xhcmUgdGhlIHByb3BlcnRpZXMgc3RhdGljYWxseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHByb3BlcnR5ID0ge307XG5mb3IgKGNvbnN0IG5hbWUgaW4gUHJvcGVydHkpIHtcbiAgICAvKiBBc3NpZ24gZWFjaCBwcm9wZXJ0eSBmdW5jdG9yIHRvIGEgVHlwZVNjcmlwdCBkZWNvcmF0b3IuXG4gICAgICogVGhpcyBjb2RlIGV4dHJhY3RzIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlIHRvIHByb3ZpZGUgcHJvcGVyXG4gICAgICogdHlwaW5ncyB0byB0aGUgdXNlci4gKi9cbiAgICBwcm9wZXJ0eVtuYW1lXSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IGZ1bmN0b3IgPSBQcm9wZXJ0eVtuYW1lXTtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5RGVjb3JhdG9yKGZ1bmN0b3IoLi4uYXJncykpO1xuICAgIH07XG59XG4iLCAiLyoqXG4gKiBDaGVjayBpZiBhIGdpdmVuIHZhbHVlIGlzIGEgbmF0aXZlIHN0cmluZyBvciBhIGBTdHJpbmdgIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGB2YWx1ZWAgaGFzIHR5cGUgc3RyaW5nIGxpdGVyYWwgb3IgYFN0cmluZ2AsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09ICcnKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUuY29uc3RydWN0b3IgPT09IFN0cmluZyk7XG59XG4vKipcbiAqIENoZWNrIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgYSBuYXRpdmUgbnVtYmVyIG9yIGEgYE51bWJlcmAgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgYHZhbHVlYCBoYXMgdHlwZSBudW1iZXIgbGl0ZXJhbCBvciBgTnVtYmVyYCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUuY29uc3RydWN0b3IgPT09IE51bWJlcjtcbn1cbiIsICIvKipcbiAqIEV2ZW50IGVtaXR0ZXIuXG4gKlxuICogVGhpcyBjbGFzcyBhbGxvd3MgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzIHRoYXQgd2lsbCBnZXQgbm90aWZpZWQgYnkgdGhlIGVtaXR0ZXIuXG4gKlxuICogVXNhZ2UgZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAvLyBgb25QcmVSZW5kZXJgIGlzIGFuIGBFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIHNjZW5lLm9uUHJlUmVuZGVyLmFkZCgoKSA9PiBjb25zb2xlLmxvZygnYmVmb3JlIHJlbmRlcmluZycpKTtcbiAqIC8vIGBvblBvc3RSZW5kZXJgIGlzIGFuIGBFbWl0dGVyYCBpbnN0YW5jZS5cbiAqIHNjZW5lLm9uUG9zdFJlbmRlci5hZGQoKCkgPT4gY29uc29sZS5sb2coJ2FmdGVyIHJlbmRlcmluZycpKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gY3JlYXRlIHlvdXIgb3duIGVtaXR0ZXJzOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQge0VtaXR0ZXJ9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4gKlxuICogY29uc3QgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIG5vdGlmeSBsaXN0ZW5lcnMgaW4gdG8geW91ciBlbWl0dGVyIHVzaW5nIHtAbGluayBFbWl0dGVyLm5vdGlmeX06XG4gKlxuICogYGBganNcbiAqIC8vIE5vdGlmaWVzIGFsbCB0aGUgbGlzdGVuZXJzLlxuICogZW1pdHRlci5ub3RpZnkoKTtcbiAqIC8vIE5vdGlmaWVzIGFsbCB0aGUgbGlzdGVuZXJzIHdpdGggc29tZSBkYXRhLlxuICogZW1pdHRlci5ub3RpZnkoeyBteUludDogNDIsIG15U3RyOiAnSGVsbG8gV29ybGQhJyB9KTtcbiAqIGBgYFxuICpcbiAqIEBjYXRlZ29yeSBldmVudFxuICovXG5leHBvcnQgY2xhc3MgRW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBsaXN0ZW5lcnMgdG8gdHJpZ2dlciB3aGVuIGBub3RpZnlgIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfbGlzdGVuZXJzID0gW107XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBuZXcgbGlzdGVuZXIgdG8gYmUgdHJpZ2dlcmVkIG9uIHtAbGluayBFbWl0dGVyLm5vdGlmeX0uXG4gICAgICpcbiAgICAgKiBCYXNpYyB1c2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogZW1pdHRlci5hZGQoKGRhdGEpID0+IHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2V2ZW50IHJlY2VpdmVkIScpO1xuICAgICAqICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBsaXN0ZW5lciB3aGVuIGFuIGV2ZW50IGlzIHJlY2VpdmVkOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBlbWl0dGVyLmFkZCgoZGF0YSkgPT4ge1xuICAgICAqICAgICBjb25zb2xlLmxvZygnZXZlbnQgcmVjZWl2ZWQhJyk7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAqIH0sIHtvbmNlOiB0cnVlfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIHJlZ2lzdGVyLlxuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBsaXN0ZW5lciBvcHRpb25zLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIGhhdmUgYSBsb29rXG4gICAgICogICAgIGF0IHRoZSB7QGxpbmsgTGlzdGVuZXJPcHRpb25zfSBpbnRlcmZhY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZylcbiAgICAgKi9cbiAgICBhZGQobGlzdGVuZXIsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IG9uY2UgPSBmYWxzZSwgaWQgPSB1bmRlZmluZWQgfSA9IG9wdHM7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKHsgaWQsIG9uY2UsIGNhbGxiYWNrOiBsaXN0ZW5lciB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVxdWl2YWxlbnQgdG8ge0BsaW5rIEVtaXR0ZXIuYWRkfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lcnMgVGhlIGNhbGxiYWNrKHMpIHRvIHJlZ2lzdGVyLlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIEVtaXR0ZXIuYWRkfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHB1c2goLi4ubGlzdGVuZXJzKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2Igb2YgbGlzdGVuZXJzKVxuICAgICAgICAgICAgdGhpcy5hZGQoY2IpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBuZXcgbGlzdGVuZXIgdG8gYmUgdHJpZ2dlcmVkIG9uIHtAbGluayBFbWl0dGVyLm5vdGlmeX0uXG4gICAgICpcbiAgICAgKiBPbmNlIG5vdGlmaWVkLCB0aGUgbGlzdGVuZXIgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gICAgICpcbiAgICAgKiBUaGUgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gY2FsbGluZyB7QGxpbmsgRW1pdHRlci5hZGR9IHdpdGg6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGVtaXR0ZXIuYWRkKGxpc3RlbmVyLCB7b25jZTogdHJ1ZX0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byByZWdpc3Rlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICBvbmNlKGxpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChsaXN0ZW5lciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSByZWdpc3RlcmVkIGxpc3RlbmVyLlxuICAgICAqXG4gICAgICogVXNhZ2Ugd2l0aCBhIGNhbGxiYWNrOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBsaXN0ZW5lciA9IChkYXRhKSA9PiBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgKiBlbWl0dGVyLmFkZChsaXN0ZW5lcik7XG4gICAgICpcbiAgICAgKiAvLyBSZW1vdmUgdXNpbmcgdGhlIGNhbGxiYWNrIHJlZmVyZW5jZTpcbiAgICAgKiBlbWl0dGVyLnJlbW92ZShsaXN0ZW5lcik7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBVc2FnZSB3aXRoIGFuIGlkOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBlbWl0dGVyLmFkZCgoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YSksIHtpZDogJ215LWNhbGxiYWNrJ30pO1xuICAgICAqXG4gICAgICogLy8gUmVtb3ZlIHVzaW5nIHRoZSBpZDpcbiAgICAgKiBlbWl0dGVyLnJlbW92ZSgnbXktY2FsbGJhY2snKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFVzaW5nIGlkZW50aWZpZXJzLCB5b3Ugd2lsbCBuZWVkIHRvIGVuc3VyZSB5b3VyIHZhbHVlIGlzIHVuaXF1ZSB0byBhdm9pZFxuICAgICAqIHJlbW92aW5nIGxpc3RlbmVycyBmcm9tIG90aGVyIGxpYnJhcmllcywgZS5nLiw6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGVtaXR0ZXIuYWRkKChkYXRhKSA9PiBjb25zb2xlLmxvZyhkYXRhKSwge2lkOiAnbm9uLXVuaXF1ZSd9KTtcbiAgICAgKiAvLyBUaGlzIHNlY29uZCBsaXN0ZW5lciBjb3VsZCBiZSBhZGRlZCBieSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkuXG4gICAgICogZW1pdHRlci5hZGQoKGRhdGEpID0+IGNvbnNvbGUubG9nKCdIZWxsbyBGcm9tIExpYnJhcnkhJyksIHtpZDogJ25vbi11bmlxdWUnfSk7XG4gICAgICpcbiAgICAgKiAvLyBIbyBTbmFwISBUaGlzIGFsc28gcmVtb3ZlZCB0aGUgbGlicmFyeSBsaXN0ZW5lciFcbiAgICAgKiBlbWl0dGVyLnJlbW92ZSgnbm9uLXVuaXF1ZScpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIGlkZW50aWZpZXIgY2FuIGJlIGFueSB0eXBlLiBIb3dldmVyLCByZW1lbWJlciB0aGF0IHRoZSBjb21wYXJpc29uIHdpbGwgYmVcbiAgICAgKiBieS12YWx1ZSBmb3IgcHJpbWl0aXZlIHR5cGVzIChzdHJpbmcsIG51bWJlciksIGJ1dCBieSByZWZlcmVuY2UgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBlbWl0dGVyLmFkZCgoKSA9PiBjb25zb2xlLmxvZygnSGVsbG8nKSwge2lkOiB7dmFsdWU6IDQyfX0pO1xuICAgICAqIGVtaXR0ZXIuYWRkKCgpID0+IGNvbnNvbGUubG9nKCdXb3JsZCEnKSwge2lkOiB7dmFsdWU6IDQyfX0pO1xuICAgICAqIGVtaXR0ZXIucmVtb3ZlKHt2YWx1ZTogNDJ9KTsgLy8gTm9uZSBvZiB0aGUgYWJvdmUgbGlzdGVuZXJzIG1hdGNoIVxuICAgICAqIGVtaXR0ZXIubm90aWZ5KCk7IC8vIFByaW50cyAnSGVsbG8nIGFuZCAnV29ybGQhJy5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEhlcmUsIGJvdGggZW1pdHRlcnMgaGF2ZSBpZCBge3ZhbHVlOiA0Mn1gLCBidXQgdGhlIGNvbXBhcmlzb24gaXMgbWFkZSBieSByZWZlcmVuY2UuIFRodXMsXG4gICAgICogdGhlIGByZW1vdmUoKWAgY2FsbCBoYXMgbm8gZWZmZWN0LiBXZSBjYW4gbWFrZSBpdCB3b3JrIGJ5IGRvaW5nOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBpZCA9IHt2YWx1ZTogNDJ9O1xuICAgICAqIGVtaXR0ZXIuYWRkKCgpID0+IGNvbnNvbGUubG9nKCdIZWxsbycpLCB7aWR9KTtcbiAgICAgKiBlbWl0dGVyLmFkZCgoKSA9PiBjb25zb2xlLmxvZygnV29ybGQhJyksIHtpZH0pO1xuICAgICAqIGVtaXR0ZXIucmVtb3ZlKGlkKTsgLy8gU2FtZSByZWZlcmVuY2UsIGl0IHdvcmtzIVxuICAgICAqIGVtaXR0ZXIubm90aWZ5KCk7IC8vIERvZXNuJ3QgcHJpbnQuXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2sgb3IgYSB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIGBpZGAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZylcbiAgICAgKi9cbiAgICByZW1vdmUobGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgaWYgKHRhcmdldC5jYWxsYmFjayA9PT0gbGlzdGVuZXIgfHwgdGFyZ2V0LmlkID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGUgbGlzdGVuZXIgaXMgcmVnaXN0ZXJlZC5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgbWV0aG9kIHBlcmZvcm1zIGEgbGluZWFyIHNlYXJjaC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgcmVnaXN0ZXJlZCBjYWxsYmFjayBvciBhIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgYGlkYC5cbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGhhbmRsZSBpcyBmb3VuZCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgaGFzKGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGxpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2FsbGJhY2sgPT09IGxpc3RlbmVyIHx8IHRhcmdldC5pZCA9PT0gbGlzdGVuZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOb3RpZnkgbGlzdGVuZXJzIHdpdGggdGhlIGdpdmVuIGRhdGEgb2JqZWN0LlxuICAgICAqXG4gICAgICogQG5vdGUgVGhpcyBtZXRob2QgZW5zdXJlcyBhbGwgbGlzdGVuZXJzIGFyZSBjYWxsZWQgZXZlbiBpZlxuICAgICAqIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uIEZvciAocG9zc2libHkpIGZhc3RlciBub3RpZmljYXRpb24sXG4gICAgICogcGxlYXNlIHVzZSB7QGxpbmsgRW1pdHRlci5ub3RpZnlVbnNhZmV9LlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBsaXN0ZW5lciB3aGVuIGludm9rZWQuXG4gICAgICovXG4gICAgbm90aWZ5KC4uLmRhdGEpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICAgICAgICBpZiAobGlzdGVuZXIub25jZSlcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKC4uLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmeSBsaXN0ZW5lcnMgd2l0aCB0aGUgZ2l2ZW4gZGF0YSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAbm90ZSBCZWNhdXNlIHRoaXMgbWV0aG9kIGRvZXNuJ3QgY2F0Y2ggZXhjZXB0aW9ucywgc29tZSBsaXN0ZW5lcnNcbiAgICAgKiB3aWxsIGJlIHNraXBwZWQgb24gYSB0aHJvdy4gUGxlYXNlIHVzZSB7QGxpbmsgRW1pdHRlci5ub3RpZnl9IGZvciBzYWZlXG4gICAgICogbm90aWZpY2F0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBsaXN0ZW5lciB3aGVuIGludm9rZWQuXG4gICAgICovXG4gICAgbm90aWZ5VW5zYWZlKC4uLmRhdGEpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICAgICAgICBpZiAobGlzdGVuZXIub25jZSlcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjayguLi5kYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uIHRoZSBuZXh0IGV2ZW50LlxuICAgICAqXG4gICAgICogQG5vdGUgVGhlIHByb21pc2UgbWlnaHQgbmV2ZXIgcmVzb2x2ZSBpZiBubyBldmVudCBpcyBzZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZGF0YSBwYXNzZWQgdG9cbiAgICAgKiAgICAge0BsaW5rIEVtaXR0ZXIubm90aWZ5fS5cbiAgICAgKi9cbiAgICBwcm9taXNlKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgXykgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbmNlKCguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXMoYXJncyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMoYXJnc1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogTnVtYmVyIG9mIGxpc3RlbmVycy4gKi9cbiAgICBnZXQgbGlzdGVuZXJDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVycy5sZW5ndGg7XG4gICAgfVxuICAgIC8qKiBgdHJ1ZWAgaWYgaXQgaGFzIG5vIGxpc3RlbmVycywgYGZhbHNlYCBvdGhlcndpc2UuICovXG4gICAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyQ291bnQgPT09IDA7XG4gICAgfVxufVxuLyogRHVtbXkgdmFsdWUgdXNlZCB3aXRoIFJldGFpbkVtaXR0ZXIuICovXG5jb25zdCBSZXRhaW5FbWl0dGVyVW5kZWZpbmVkID0ge307XG4vKipcbiAqIEV2ZW50IGVtaXR0ZXIgdGhhdCByZXRhaW5zIGV2ZW50IGRhdGEgd2hlbiBub3RpZmllZC5cbiAqXG4gKiBBZnRlciBhIG5vdGlmaWNhdGlvbiBoYXBwZW5zLCBzdWJzZXF1ZW50IGNhbGxzIHRvIHtAbGluayBSZXRhaW5FbWl0dGVyLmFkZH0gd2lsbCBnZXRcbiAqIGF1dG9tYXRpY2FsbHkgbm90aWZpZWQuXG4gKlxuICogWW91IGNhbiB1c2UgYW5vdGhlciBlbWl0dGVyIGluIG9yZGVyIHRvIGNhbmNlbCB0aGUgbGFzdCByZXRhaW5lZCBldmVudDpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtFbWl0dGVyLCBSZXRhaW5lZEVtaXR0ZXJ9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4gKlxuICogY29uc3Qgb25TdGFydCA9IG5ldyBSZXRhaW5lZEVtaXR0ZXIoKTtcbiAqXG4gKiBvblN0YXJ0Lm5vdGlmeSg0Mik7XG4gKiBvblN0YXJ0LmFkZCgoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YSkpIC8vIFByaW50cyAnNDInLlxuICogYGBgXG4gKlxuICogWW91IGNhbiByZXNldCB0aGUgc3RhdGUgb2YgdGhlIGVtaXR0ZXIsIGkuZS4sIG1ha2luZyBpdCBmb3JnZXQgYWJvdXQgdGhlXG4gKiBsYXN0IGV2ZW50IHVzaW5nOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQge0VtaXR0ZXIsIFJldGFpbmVkRW1pdHRlcn0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbiAqXG4gKiBjb25zdCBvblN0YXJ0ID0gbmV3IFJldGFpbmVkRW1pdHRlcigpO1xuICogb25TdGFydC5ub3RpZnkoNDIpO1xuICogb25TdGFydC5hZGQoKGRhdGEpID0+IGNvbnNvbGUubG9nKGRhdGEpKSAvLyBQcmludHMgJzQyJy5cbiAqXG4gKiAvLyBSZXNldCB0aGUgc3RhdGUgb2YgdGhlIGVtaXR0ZXIuXG4gKiBvblN0YXJ0LnJlc2V0KCk7XG4gKiBvblN0YXJ0LmFkZCgoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YSkpIC8vIERvZXNuJ3QgcHJpbnQgYW55dGhpbmcuXG4gKiBgYGBcbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBlbWl0dGVycywgcGxlYXNlIGhhdmUgYSBsb29rIGF0IHRoZSBiYXNlIHtAbGluayBFbWl0dGVyfSBjbGFzcy5cbiAqXG4gKiBAY2F0ZWdvcnkgZXZlbnRcbiAqL1xuZXhwb3J0IGNsYXNzIFJldGFpbkVtaXR0ZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICAvKiogUHJlLXJlc29sdmVkIGRhdGEuIEBoaWRkZW4gKi9cbiAgICBfZXZlbnQgPSBSZXRhaW5FbWl0dGVyVW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZXIgdGFyZ2V0IHVzZWQgdG8gcmVzZXQgdGhlIHN0YXRlIG9mIHRoaXMgZW1pdHRlci5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfcmVzZXQ7XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIGFkZChsaXN0ZW5lciwgb3B0cykge1xuICAgICAgICBjb25zdCBpbW1lZGlhdGUgPSBvcHRzPy5pbW1lZGlhdGUgPz8gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX2V2ZW50ICE9PSBSZXRhaW5FbWl0dGVyVW5kZWZpbmVkICYmIGltbWVkaWF0ZSkge1xuICAgICAgICAgICAgbGlzdGVuZXIoLi4udGhpcy5fZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmFkZChsaXN0ZW5lciwgb3B0cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAb3ZlcnJpZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gcmVnaXN0ZXIuXG4gICAgICogQHBhcmFtIGltbWVkaWF0ZSBJZiBgdHJ1ZWAsIGRpcmVjdGx5IHJlc29sdmVzIGlmIHRoZSBlbWl0dGVyIHJldGFpbnMgYSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICBvbmNlKGxpc3RlbmVyLCBpbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGxpc3RlbmVyLCB7IG9uY2U6IHRydWUsIGltbWVkaWF0ZSB9KTtcbiAgICB9XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIG5vdGlmeSguLi5kYXRhKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50ID0gZGF0YTtcbiAgICAgICAgc3VwZXIubm90aWZ5KC4uLmRhdGEpO1xuICAgIH1cbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgbm90aWZ5VW5zYWZlKC4uLmRhdGEpIHtcbiAgICAgICAgdGhpcy5fZXZlbnQgPSBkYXRhO1xuICAgICAgICBzdXBlci5ub3RpZnlVbnNhZmUoLi4uZGF0YSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBzdGF0ZSBvZiB0aGUgZW1pdHRlci5cbiAgICAgKlxuICAgICAqIEZ1cnRoZXIgY2FsbCB0byB7QGxpbmsgRW1pdHRlci5hZGR9IHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgcmVzb2x2ZSxcbiAgICAgKiB1bnRpbCBhIG5ldyBjYWxsIHRvIHtAbGluayBFbWl0dGVyLm5vdGlmeX0gaXMgcGVyZm9ybWVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50ID0gUmV0YWluRW1pdHRlclVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIHRoZSByZXRhaW5lZCBkYXRhLCBvciBgdW5kZWZpbmVkYCBpZiBubyBkYXRhIHdhcyByZXRhaW5lZC4gKi9cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEYXRhUmV0YWluZWQgPyB0aGlzLl9ldmVudCA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqIGB0cnVlYCBpZiBkYXRhIGlzIHJldGFpbmVkIGZyb20gdGhlIGxhc3QgZXZlbnQsIGBmYWxzZWAgb3RoZXJ3aXNlLiAqL1xuICAgIGdldCBpc0RhdGFSZXRhaW5lZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50ICE9PSBSZXRhaW5FbWl0dGVyVW5kZWZpbmVkO1xuICAgIH1cbn1cbiIsICIvKipcbiAqIFR5cGVzXG4gKi9cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IG5hdGl2ZVByb3BlcnR5LCBlbnVtZXJhYmxlIH0gZnJvbSAnLi9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IGlzTnVtYmVyLCBpc1N0cmluZyB9IGZyb20gJy4vdXRpbHMvb2JqZWN0LmpzJztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuL3V0aWxzL2V2ZW50LmpzJztcbi8qKlxuICogV29uZGVybGFuZCBFbmdpbmUgQVBJXG4gKiBAbmFtZXNwYWNlIFdMXG4gKi9cbi8qKlxuICogQ29sbGlkZXIgdHlwZSBlbnVtIGZvciB7QGxpbmsgQ29sbGlzaW9uQ29tcG9uZW50fS5cbiAqL1xuZXhwb3J0IHZhciBDb2xsaWRlcjtcbihmdW5jdGlvbiAoQ29sbGlkZXIpIHtcbiAgICAvKipcbiAgICAgKiAqKlNwaGVyZSBDb2xsaWRlcioqOlxuICAgICAqXG4gICAgICogU2ltcGxlc3QgYW5kIG1vc3QgcGVyZm9ybWFudCBjb2xsaXNpb24gc2hhcGUuIElmIHRoaXMgdHlwZSBpcyBzZXQgb24gYVxuICAgICAqIHtAbGluayBDb2xsaXNpb25Db21wb25lbnR9LCBvbmx5IHRoZSBmaXJzdCBjb21wb25lbnQgb2ZcbiAgICAgKiB7QGxpbmsgQ29sbGlzaW9uQ29tcG9uZW50I2V4dGVudHN9IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHJhZGl1cy5cbiAgICAgKi9cbiAgICBDb2xsaWRlcltDb2xsaWRlcltcIlNwaGVyZVwiXSA9IDBdID0gXCJTcGhlcmVcIjtcbiAgICAvKipcbiAgICAgKiAqKkF4aXMgQWxpZ25lZCBCb3VuZGluZyBCb3ggQ29sbGlkZXIqKjpcbiAgICAgKlxuICAgICAqIEJveCB0aGF0IGlzIGFsd2F5cyBhbGlnbmVkIHRvIFhZWiBheGlzLiBJdCBjYW5ub3QgYmUgcm90YXRlZCBidXQgaXMgbW9yZVxuICAgICAqIGVmZmljaWVudCB0aGFuIHtAbGluayBDb2xsaWRlci5Cb3h9LlxuICAgICAqL1xuICAgIENvbGxpZGVyW0NvbGxpZGVyW1wiQXhpc0FsaWduZWRCb3hcIl0gPSAxXSA9IFwiQXhpc0FsaWduZWRCb3hcIjtcbiAgICAvKipcbiAgICAgKiAqKkFsaWduZWQgQm91bmRpbmcgQm94IENvbGxpZGVyKio6XG4gICAgICpcbiAgICAgKiBCb3ggdGhhdCBtYXRjaGVzIHRoZSBvYmplY3QncyByb3RhdGlvbiBhbmQgdHJhbnNsYXRpb24gY29ycmVjdGx5LiBUaGlzXG4gICAgICogaXMgdGhlIGxlYXN0IGVmZmljaWVudCBjb2xsaWRlciBhbmQgc2hvdWxkIG9ubHkgYmUgY2hvc2VuIG92ZXJcbiAgICAgKiB7QGxpbmsgQ29sbGlkZXIuU3BoZXJlfSBhbmQge0BsaW5rIENvbGxpZGVyLkF4aXNBbGlnbmVkQm94fSBpZiByZWFsbHlcbiAgICAgKiBuZWNlc3NhcnkuXG4gICAgICovXG4gICAgQ29sbGlkZXJbQ29sbGlkZXJbXCJCb3hcIl0gPSAyXSA9IFwiQm94XCI7XG59KShDb2xsaWRlciB8fCAoQ29sbGlkZXIgPSB7fSkpO1xuLyoqXG4gKiBBbGlnbm1lbnQgdHlwZSBlbnVtIGZvciB7QGxpbmsgVGV4dENvbXBvbmVudH0uXG4gKi9cbmV4cG9ydCB2YXIgQWxpZ25tZW50O1xuKGZ1bmN0aW9uIChBbGlnbm1lbnQpIHtcbiAgICAvKiogVGV4dCBzdGFydCBpcyBhdCBvYmplY3Qgb3JpZ2luICovXG4gICAgQWxpZ25tZW50W0FsaWdubWVudFtcIkxlZnRcIl0gPSAwXSA9IFwiTGVmdFwiO1xuICAgIC8qKiBUZXh0IGNlbnRlciBpcyBhdCBvYmplY3Qgb3JpZ2luICovXG4gICAgQWxpZ25tZW50W0FsaWdubWVudFtcIkNlbnRlclwiXSA9IDFdID0gXCJDZW50ZXJcIjtcbiAgICAvKiogVGV4dCBlbmQgaXMgYXQgb2JqZWN0IG9yaWdpbiAqL1xuICAgIEFsaWdubWVudFtBbGlnbm1lbnRbXCJSaWdodFwiXSA9IDJdID0gXCJSaWdodFwiO1xufSkoQWxpZ25tZW50IHx8IChBbGlnbm1lbnQgPSB7fSkpO1xuLyoqXG4gKiBKdXN0aWZpY2F0aW9uIHR5cGUgZW51bSBmb3Ige0BsaW5rIFRleHRDb21wb25lbnR9LlxuICovXG5leHBvcnQgdmFyIEp1c3RpZmljYXRpb247XG4oZnVuY3Rpb24gKEp1c3RpZmljYXRpb24pIHtcbiAgICAvKiogVGV4dCBsaW5lIGlzIGF0IG9iamVjdCBvcmlnaW4gKi9cbiAgICBKdXN0aWZpY2F0aW9uW0p1c3RpZmljYXRpb25bXCJMaW5lXCJdID0gMF0gPSBcIkxpbmVcIjtcbiAgICAvKiogVGV4dCBtaWRkbGUgaXMgYXQgb2JqZWN0IG9yaWdpbiAqL1xuICAgIEp1c3RpZmljYXRpb25bSnVzdGlmaWNhdGlvbltcIk1pZGRsZVwiXSA9IDFdID0gXCJNaWRkbGVcIjtcbiAgICAvKiogVGV4dCB0b3AgaXMgYXQgb2JqZWN0IG9yaWdpbiAqL1xuICAgIEp1c3RpZmljYXRpb25bSnVzdGlmaWNhdGlvbltcIlRvcFwiXSA9IDJdID0gXCJUb3BcIjtcbiAgICAvKiogVGV4dCBib3R0b20gaXMgYXQgb2JqZWN0IG9yaWdpbiAqL1xuICAgIEp1c3RpZmljYXRpb25bSnVzdGlmaWNhdGlvbltcIkJvdHRvbVwiXSA9IDNdID0gXCJCb3R0b21cIjtcbn0pKEp1c3RpZmljYXRpb24gfHwgKEp1c3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBFZmZlY3QgdHlwZSBlbnVtIGZvciB7QGxpbmsgVGV4dENvbXBvbmVudH0uXG4gKi9cbmV4cG9ydCB2YXIgVGV4dEVmZmVjdDtcbihmdW5jdGlvbiAoVGV4dEVmZmVjdCkge1xuICAgIC8qKiBUZXh0IGlzIHJlbmRlcmVkIG5vcm1hbGx5ICovXG4gICAgVGV4dEVmZmVjdFtUZXh0RWZmZWN0W1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgLyoqIFRleHQgaXMgcmVuZGVyZWQgd2l0aCBhbiBvdXRsaW5lICovXG4gICAgVGV4dEVmZmVjdFtUZXh0RWZmZWN0W1wiT3V0bGluZVwiXSA9IDFdID0gXCJPdXRsaW5lXCI7XG59KShUZXh0RWZmZWN0IHx8IChUZXh0RWZmZWN0ID0ge30pKTtcbi8qKlxuICogSW5wdXQgdHlwZSBlbnVtIGZvciB7QGxpbmsgSW5wdXRDb21wb25lbnR9LlxuICovXG5leHBvcnQgdmFyIElucHV0VHlwZTtcbihmdW5jdGlvbiAoSW5wdXRUeXBlKSB7XG4gICAgLyoqIEhlYWQgaW5wdXQgKi9cbiAgICBJbnB1dFR5cGVbSW5wdXRUeXBlW1wiSGVhZFwiXSA9IDBdID0gXCJIZWFkXCI7XG4gICAgLyoqIExlZnQgZXllIGlucHV0ICovXG4gICAgSW5wdXRUeXBlW0lucHV0VHlwZVtcIkV5ZUxlZnRcIl0gPSAxXSA9IFwiRXllTGVmdFwiO1xuICAgIC8qKiBSaWdodCBleWUgaW5wdXQgKi9cbiAgICBJbnB1dFR5cGVbSW5wdXRUeXBlW1wiRXllUmlnaHRcIl0gPSAyXSA9IFwiRXllUmlnaHRcIjtcbiAgICAvKiogTGVmdCBjb250cm9sbGVyIGlucHV0ICovXG4gICAgSW5wdXRUeXBlW0lucHV0VHlwZVtcIkNvbnRyb2xsZXJMZWZ0XCJdID0gM10gPSBcIkNvbnRyb2xsZXJMZWZ0XCI7XG4gICAgLyoqIFJpZ2h0IGNvbnRyb2xsZXIgaW5wdXQgKi9cbiAgICBJbnB1dFR5cGVbSW5wdXRUeXBlW1wiQ29udHJvbGxlclJpZ2h0XCJdID0gNF0gPSBcIkNvbnRyb2xsZXJSaWdodFwiO1xuICAgIC8qKiBMZWZ0IHJheSBpbnB1dCAqL1xuICAgIElucHV0VHlwZVtJbnB1dFR5cGVbXCJSYXlMZWZ0XCJdID0gNV0gPSBcIlJheUxlZnRcIjtcbiAgICAvKiogUmlnaHQgcmF5IGlucHV0ICovXG4gICAgSW5wdXRUeXBlW0lucHV0VHlwZVtcIlJheVJpZ2h0XCJdID0gNl0gPSBcIlJheVJpZ2h0XCI7XG59KShJbnB1dFR5cGUgfHwgKElucHV0VHlwZSA9IHt9KSk7XG4vKipcbiAqIExpZ2h0IHR5cGUgZW51bSBmb3Ige0BsaW5rIExpZ2h0Q29tcG9uZW50fS5cbiAqL1xuZXhwb3J0IHZhciBMaWdodFR5cGU7XG4oZnVuY3Rpb24gKExpZ2h0VHlwZSkge1xuICAgIC8qKiBQb2ludCBsaWdodCAqL1xuICAgIExpZ2h0VHlwZVtMaWdodFR5cGVbXCJQb2ludFwiXSA9IDBdID0gXCJQb2ludFwiO1xuICAgIC8qKiBTcG90IGxpZ2h0ICovXG4gICAgTGlnaHRUeXBlW0xpZ2h0VHlwZVtcIlNwb3RcIl0gPSAxXSA9IFwiU3BvdFwiO1xuICAgIC8qKiBTdW4gbGlnaHQgLyBEaXJlY3Rpb25hbCBsaWdodCAqL1xuICAgIExpZ2h0VHlwZVtMaWdodFR5cGVbXCJTdW5cIl0gPSAyXSA9IFwiU3VuXCI7XG59KShMaWdodFR5cGUgfHwgKExpZ2h0VHlwZSA9IHt9KSk7XG4vKipcbiAqIEFuaW1hdGlvbiBzdGF0ZSBvZiB7QGxpbmsgQW5pbWF0aW9uQ29tcG9uZW50fS5cbiAqL1xuZXhwb3J0IHZhciBBbmltYXRpb25TdGF0ZTtcbihmdW5jdGlvbiAoQW5pbWF0aW9uU3RhdGUpIHtcbiAgICAvKiogQW5pbWF0aW9uIGlzIGN1cnJlbnRseSBwbGF5aW5nICovXG4gICAgQW5pbWF0aW9uU3RhdGVbQW5pbWF0aW9uU3RhdGVbXCJQbGF5aW5nXCJdID0gMF0gPSBcIlBsYXlpbmdcIjtcbiAgICAvKiogQW5pbWF0aW9uIGlzIHBhdXNlZCBhbmQgd2lsbCBjb250aW51ZSBhdCBjdXJyZW50IHBsYXliYWNrXG4gICAgICogdGltZSBvbiB7QGxpbmsgQW5pbWF0aW9uQ29tcG9uZW50I3BsYXl9ICovXG4gICAgQW5pbWF0aW9uU3RhdGVbQW5pbWF0aW9uU3RhdGVbXCJQYXVzZWRcIl0gPSAxXSA9IFwiUGF1c2VkXCI7XG4gICAgLyoqIEFuaW1hdGlvbiBpcyBzdG9wcGVkICovXG4gICAgQW5pbWF0aW9uU3RhdGVbQW5pbWF0aW9uU3RhdGVbXCJTdG9wcGVkXCJdID0gMl0gPSBcIlN0b3BwZWRcIjtcbn0pKEFuaW1hdGlvblN0YXRlIHx8IChBbmltYXRpb25TdGF0ZSA9IHt9KSk7XG4vKipcbiAqIFJpZ2lkIGJvZHkgZm9yY2UgbW9kZSBmb3Ige0BsaW5rIFBoeXNYQ29tcG9uZW50I2FkZEZvcmNlfSBhbmQge0BsaW5rIFBoeXNYQ29tcG9uZW50I2FkZFRvcnF1ZX0uXG4gKlxuICogW1BoeXNYIEFQSSBSZWZlcmVuY2VdKGh0dHBzOi8vZ2FtZXdvcmtzZG9jcy5udmlkaWEuY29tL1BoeXNYLzQuMS9kb2N1bWVudGF0aW9uL3BoeXN4YXBpL2ZpbGVzL3N0cnVjdFB4Rm9yY2VNb2RlLmh0bWwpXG4gKi9cbmV4cG9ydCB2YXIgRm9yY2VNb2RlO1xuKGZ1bmN0aW9uIChGb3JjZU1vZGUpIHtcbiAgICAvKiogQXBwbHkgYXMgZm9yY2UgKi9cbiAgICBGb3JjZU1vZGVbRm9yY2VNb2RlW1wiRm9yY2VcIl0gPSAwXSA9IFwiRm9yY2VcIjtcbiAgICAvKiogQXBwbHkgYXMgaW1wdWxzZSAqL1xuICAgIEZvcmNlTW9kZVtGb3JjZU1vZGVbXCJJbXB1bHNlXCJdID0gMV0gPSBcIkltcHVsc2VcIjtcbiAgICAvKiogQXBwbHkgYXMgdmVsb2NpdHkgY2hhbmdlLCBtYXNzIGRlcGVuZGVudCAqL1xuICAgIEZvcmNlTW9kZVtGb3JjZU1vZGVbXCJWZWxvY2l0eUNoYW5nZVwiXSA9IDJdID0gXCJWZWxvY2l0eUNoYW5nZVwiO1xuICAgIC8qKiBBcHBseSBhcyBtYXNzIGRlcGVuZGVudCBmb3JjZSAqL1xuICAgIEZvcmNlTW9kZVtGb3JjZU1vZGVbXCJBY2NlbGVyYXRpb25cIl0gPSAzXSA9IFwiQWNjZWxlcmF0aW9uXCI7XG59KShGb3JjZU1vZGUgfHwgKEZvcmNlTW9kZSA9IHt9KSk7XG4vKipcbiAqIENvbGxpc2lvbiBjYWxsYmFjayBldmVudCB0eXBlLlxuICovXG5leHBvcnQgdmFyIENvbGxpc2lvbkV2ZW50VHlwZTtcbihmdW5jdGlvbiAoQ29sbGlzaW9uRXZlbnRUeXBlKSB7XG4gICAgLyoqIFRvdWNoL2NvbnRhY3QgZGV0ZWN0ZWQsIGNvbGxpc2lvbiAqL1xuICAgIENvbGxpc2lvbkV2ZW50VHlwZVtDb2xsaXNpb25FdmVudFR5cGVbXCJUb3VjaFwiXSA9IDBdID0gXCJUb3VjaFwiO1xuICAgIC8qKiBUb3VjaC9jb250YWN0IGxvc3QsIHVuY29sbGlkZSAqL1xuICAgIENvbGxpc2lvbkV2ZW50VHlwZVtDb2xsaXNpb25FdmVudFR5cGVbXCJUb3VjaExvc3RcIl0gPSAxXSA9IFwiVG91Y2hMb3N0XCI7XG4gICAgLyoqIFRvdWNoL2NvbnRhY3Qgd2l0aCB0cmlnZ2VyIGRldGVjdGVkICovXG4gICAgQ29sbGlzaW9uRXZlbnRUeXBlW0NvbGxpc2lvbkV2ZW50VHlwZVtcIlRyaWdnZXJUb3VjaFwiXSA9IDJdID0gXCJUcmlnZ2VyVG91Y2hcIjtcbiAgICAvKiogVG91Y2gvY29udGFjdCB3aXRoIHRyaWdnZXIgbG9zdCAqL1xuICAgIENvbGxpc2lvbkV2ZW50VHlwZVtDb2xsaXNpb25FdmVudFR5cGVbXCJUcmlnZ2VyVG91Y2hMb3N0XCJdID0gM10gPSBcIlRyaWdnZXJUb3VjaExvc3RcIjtcbn0pKENvbGxpc2lvbkV2ZW50VHlwZSB8fCAoQ29sbGlzaW9uRXZlbnRUeXBlID0ge30pKTtcbi8qKlxuICogUmlnaWQgYm9keSB7QGxpbmsgUGh5c1hDb21wb25lbnQjc2hhcGV9LlxuICpcbiAqIFtQaHlzWCBTREsgR3VpZGVdKGh0dHBzOi8vZ2FtZXdvcmtzZG9jcy5udmlkaWEuY29tL1BoeXNYLzQuMS9kb2N1bWVudGF0aW9uL3BoeXN4Z3VpZGUvTWFudWFsL0dlb21ldHJ5Lmh0bWwjZ2VvbWV0cnktdHlwZXMpLlxuICovXG5leHBvcnQgdmFyIFNoYXBlO1xuKGZ1bmN0aW9uIChTaGFwZSkge1xuICAgIC8qKiBObyBzaGFwZS4gKi9cbiAgICBTaGFwZVtTaGFwZVtcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKiBTcGhlcmUgc2hhcGUuICovXG4gICAgU2hhcGVbU2hhcGVbXCJTcGhlcmVcIl0gPSAxXSA9IFwiU3BoZXJlXCI7XG4gICAgLyoqIENhcHN1bGUgc2hhcGUuICovXG4gICAgU2hhcGVbU2hhcGVbXCJDYXBzdWxlXCJdID0gMl0gPSBcIkNhcHN1bGVcIjtcbiAgICAvKiogQm94IHNoYXBlLiAqL1xuICAgIFNoYXBlW1NoYXBlW1wiQm94XCJdID0gM10gPSBcIkJveFwiO1xuICAgIC8qKiBQbGFuZSBzaGFwZS4gKi9cbiAgICBTaGFwZVtTaGFwZVtcIlBsYW5lXCJdID0gNF0gPSBcIlBsYW5lXCI7XG4gICAgLyoqIENvbnZleCBtZXNoIHNoYXBlLiAqL1xuICAgIFNoYXBlW1NoYXBlW1wiQ29udmV4TWVzaFwiXSA9IDVdID0gXCJDb252ZXhNZXNoXCI7XG4gICAgLyoqIFRyaWFuZ2xlIG1lc2ggc2hhcGUuICovXG4gICAgU2hhcGVbU2hhcGVbXCJUcmlhbmdsZU1lc2hcIl0gPSA2XSA9IFwiVHJpYW5nbGVNZXNoXCI7XG59KShTaGFwZSB8fCAoU2hhcGUgPSB7fSkpO1xuLyoqXG4gKiBNZXNoIGF0dHJpYnV0ZSBlbnVtLlxuICogQHNpbmNlIDAuOS4wXG4gKi9cbmV4cG9ydCB2YXIgTWVzaEF0dHJpYnV0ZTtcbihmdW5jdGlvbiAoTWVzaEF0dHJpYnV0ZSkge1xuICAgIC8qKiBQb3NpdGlvbiBhdHRyaWJ1dGUsIDMgZmxvYXRzICovXG4gICAgTWVzaEF0dHJpYnV0ZVtNZXNoQXR0cmlidXRlW1wiUG9zaXRpb25cIl0gPSAwXSA9IFwiUG9zaXRpb25cIjtcbiAgICAvKiogVGFuZ2VudCBhdHRyaWJ1dGUsIDQgZmxvYXRzICovXG4gICAgTWVzaEF0dHJpYnV0ZVtNZXNoQXR0cmlidXRlW1wiVGFuZ2VudFwiXSA9IDFdID0gXCJUYW5nZW50XCI7XG4gICAgLyoqIE5vcm1hbCBhdHRyaWJ1dGUsIDMgZmxvYXRzICovXG4gICAgTWVzaEF0dHJpYnV0ZVtNZXNoQXR0cmlidXRlW1wiTm9ybWFsXCJdID0gMl0gPSBcIk5vcm1hbFwiO1xuICAgIC8qKiBUZXh0dXJlIGNvb3JkaW5hdGUgYXR0cmlidXRlLCAyIGZsb2F0cyAqL1xuICAgIE1lc2hBdHRyaWJ1dGVbTWVzaEF0dHJpYnV0ZVtcIlRleHR1cmVDb29yZGluYXRlXCJdID0gM10gPSBcIlRleHR1cmVDb29yZGluYXRlXCI7XG4gICAgLyoqIENvbG9yIGF0dHJpYnV0ZSwgNCBmbG9hdHMsIFJHQkEsIHJhbmdlIGAwYCB0byBgMWAgKi9cbiAgICBNZXNoQXR0cmlidXRlW01lc2hBdHRyaWJ1dGVbXCJDb2xvclwiXSA9IDRdID0gXCJDb2xvclwiO1xuICAgIC8qKiBKb2ludCBpZCBhdHRyaWJ1dGUsIDggdW5zaWduZWQgaW50cyAqL1xuICAgIE1lc2hBdHRyaWJ1dGVbTWVzaEF0dHJpYnV0ZVtcIkpvaW50SWRcIl0gPSA1XSA9IFwiSm9pbnRJZFwiO1xuICAgIC8qKiBKb2ludCB3ZWlnaHRzIGF0dHJpYnV0ZSwgOCBmbG9hdHMgKi9cbiAgICBNZXNoQXR0cmlidXRlW01lc2hBdHRyaWJ1dGVbXCJKb2ludFdlaWdodFwiXSA9IDZdID0gXCJKb2ludFdlaWdodFwiO1xufSkoTWVzaEF0dHJpYnV0ZSB8fCAoTWVzaEF0dHJpYnV0ZSA9IHt9KSk7XG4vKipcbiAqIE1hdGVyaWFsIHBhcmFtZXRlciB0eXBlLlxuICovXG5leHBvcnQgdmFyIE1hdGVyaWFsUGFyYW1UeXBlO1xuKGZ1bmN0aW9uIChNYXRlcmlhbFBhcmFtVHlwZSkge1xuICAgIC8qKiBVbnNpZ25lZCBpbnRlZ2VyIHBhcmFtZXRlciB0eXBlLiAqL1xuICAgIE1hdGVyaWFsUGFyYW1UeXBlW01hdGVyaWFsUGFyYW1UeXBlW1wiVW5zaWduZWRJbnRcIl0gPSAwXSA9IFwiVW5zaWduZWRJbnRcIjtcbiAgICAvKiogSW50ZWdlciBwYXJhbWV0ZXIgdHlwZS4gKi9cbiAgICBNYXRlcmlhbFBhcmFtVHlwZVtNYXRlcmlhbFBhcmFtVHlwZVtcIkludFwiXSA9IDFdID0gXCJJbnRcIjtcbiAgICAvKiogRmxvYXQgcGFyYW1ldGVyIHR5cGUuICovXG4gICAgTWF0ZXJpYWxQYXJhbVR5cGVbTWF0ZXJpYWxQYXJhbVR5cGVbXCJGbG9hdFwiXSA9IDJdID0gXCJGbG9hdFwiO1xuICAgIC8qKiBTYW1wbGVyIHJlc291cmNlIHBhcmFtZXRlciB0eXBlLCBpLmUuLCBhIHtAbGluayBUZXh0dXJlfS4gKi9cbiAgICBNYXRlcmlhbFBhcmFtVHlwZVtNYXRlcmlhbFBhcmFtVHlwZVtcIlNhbXBsZXJcIl0gPSAzXSA9IFwiU2FtcGxlclwiO1xuICAgIC8qKlxuICAgICAqIEZvbnQgcmVzb3VyY2UgcGFyYW1ldGVyIHR5cGUuXG4gICAgICpcbiAgICAgKiAqKk5vdGUqKjogQ2hhbmdpbmcgZm9udCBpc24ndCBleHBvc2VkIHlldCBhbmQgd2lsbCByYWlzZSBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBNYXRlcmlhbFBhcmFtVHlwZVtNYXRlcmlhbFBhcmFtVHlwZVtcIkZvbnRcIl0gPSA0XSA9IFwiRm9udFwiO1xufSkoTWF0ZXJpYWxQYXJhbVR5cGUgfHwgKE1hdGVyaWFsUGFyYW1UeXBlID0ge30pKTtcbi8qKlxuICogQ2hlY2sgd2hldGhlciBhIGdpdmVuIHNoYXBlIGlzIGEgbWVzaCBvciBub3QuXG4gKlxuICogQHBhcmFtIHNoYXBlIFRoZSBzaGFwZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgc2hhcGUgaXMgYSBtZXNoLCBgZmFsc2VgIGlmIGl0J3MgYSBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzTWVzaFNoYXBlKHNoYXBlKSB7XG4gICAgcmV0dXJuIHNoYXBlID09PSBTaGFwZS5Db252ZXhNZXNoIHx8IHNoYXBlID09PSBTaGFwZS5UcmlhbmdsZU1lc2g7XG59XG4vKipcbiAqIENvbnN0YW50cy5cbiAqL1xuLyoqXG4gKiBEZWZhdWx0IHdvcmxkIHVwIHZlY3Rvci5cbiAqL1xuY29uc3QgVVBfVkVDVE9SID0gWzAsIDEsIDBdO1xuLyoqXG4gKiBOYXRpdmUgY29tcG9uZW50XG4gKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIGEgbmF0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSBvZiBhIHNwZWNpZmllZCBjb21wb25lbnQgdHlwZS5cbiAqXG4gKiBVc2FnZSBleGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgeyBDb21wb25lbnQsIFR5cGUgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xuICpcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gKiAgICAgc3RhdGljIFR5cGVOYW1lID0gJ215LWNvbXBvbmVudCc7XG4gKiAgICAgc3RhdGljIFByb3BlcnRpZXMgPSB7XG4gKiAgICAgICAgIG15Qm9vbGVhbjogeyB0eXBlOiBUeXBlLkJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gKiAgICAgfTtcbiAqICAgICBzdGFydCgpIHt9XG4gKiAgICAgb25BY3RpdmF0ZSgpIHt9XG4gKiAgICAgb25EZWFjdGl2YXRlKCkge31cbiAqICAgICB1cGRhdGUoZHQpIHt9XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoaXMgY29tcG9uZW50IGNsYXNzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB1c2VkIHRvIHJlZ2lzdGVyLCBhZGQsIGFuZCByZXRyaWV2ZSBjb21wb25lbnRzIG9mIGEgZ2l2ZW4gdHlwZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgVHlwZU5hbWU7XG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiB0aGlzIGNvbXBvbmVudCBjbGFzcy5cbiAgICAgKlxuICAgICAqIFByb3BlcnRpZXMgYXJlIHB1YmxpYyBhdHRyaWJ1dGVzIHRoYXQgY2FuIGJlIGNvbmZpZ3VyZWQgdmlhIHRoZVxuICAgICAqIFdvbmRlcmxhbmQgRWRpdG9yLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHsgQ29tcG9uZW50LCBUeXBlIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbiAgICAgKiBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgICogICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdteS1jb21wb25lbnQnO1xuICAgICAqICAgICBzdGF0aWMgUHJvcGVydGllcyA9IHtcbiAgICAgKiAgICAgICAgIG15Qm9vbGVhbjogeyB0eXBlOiBUeXBlLkJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICogICAgICAgICBteUZsb2F0OiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICogICAgICAgICBteVRleHR1cmU6IHsgdHlwZTogVHlwZS5UZXh0dXJlLCBkZWZhdWx0OiBudWxsIH0sXG4gICAgICogICAgIH07XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogUHJvcGVydGllcyBhcmUgYXV0b21hdGljYWxseSBhZGRlZCB0byBlYWNoIGNvbXBvbmVudCBpbnN0YW5jZSwgYW5kIGFyZVxuICAgICAqIGFjY2Vzc2libGUgbGlrZSBhbnkgSlMgYXR0cmlidXRlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBDcmVhdGVzIGEgbmV3IGNvbXBvbmVudCBhbmQgc2V0IGVhY2ggcHJvcGVydGllcyB2YWx1ZTpcbiAgICAgKiBjb25zdCBteUNvbXBvbmVudCA9IG9iamVjdC5hZGRDb21wb25lbnQoTXlDb21wb25lbnQsIHtcbiAgICAgKiAgICAgbXlCb29sZWFuOiB0cnVlLFxuICAgICAqICAgICBteUZsb2F0OiA0Mi4wLFxuICAgICAqICAgICBteVRleHR1cmU6IG51bGxcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIC8vIFlvdSBjYW4gYWxzbyBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBvbiB0aGUgaW5zdGFuY2U6XG4gICAgICogbXlDb21wb25lbnQubXlCb29sZWFuID0gZmFsc2U7XG4gICAgICogbXlDb21wb25lbnQubXlGbG9hdCA9IC00Mi4wO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzO1xuICAgIC8qKlxuICAgICAqIFRoaXMgd2FzIG5ldmVyIHJlbGVhc2VkIGluIGFuIG9mZmljaWFsIHZlcnNpb24sIHdlIGFyZSBrZWVwaW5nIGl0XG4gICAgICogdG8gZWFzeSB0cmFuc2l0aW9uIHRvIHRoZSBuZXcgQVBJLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBDb21wb25lbnQub25SZWdpc3Rlcn0gaW5zdGVhZC5cbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc3RhdGljIERlcGVuZGVuY2llcztcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBjbGFzcyBpcyByZWdpc3RlcmVkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIFRoaXMgY2FsbGJhY2sgY2FuIGJlIHVzZWQgdG8gcmVnaXN0ZXIgZGVwZW5kZW5jaWVzIG9mIGEgY29tcG9uZW50LFxuICAgICAqIGUuZy4sIGNvbXBvbmVudCBjbGFzc2VzIHRoYXQgbmVlZCB0byBiZSByZWdpc3RlcmVkIGluIG9yZGVyIHRvIGFkZFxuICAgICAqIHRoZW0gYXQgcnVudGltZSB3aXRoIHtAbGluayBPYmplY3QzRC5hZGRDb21wb25lbnR9LCBpbmRlcGVuZGVudCBvZiB3aGV0aGVyXG4gICAgICogdGhleSBhcmUgdXNlZCBpbiB0aGUgZWRpdG9yLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBjbGFzcyBTcGF3bmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAgKiAgICAgc3RhdGljIFR5cGVOYW1lID0gJ3NwYXduZXInO1xuICAgICAqXG4gICAgICogICAgIHN0YXRpYyBvblJlZ2lzdGVyKGVuZ2luZSkge1xuICAgICAqICAgICAgICAgZW5naW5lLnJlZ2lzdGVyQ29tcG9uZW50KFNwYXduZWRDb21wb25lbnQpO1xuICAgICAqICAgICB9XG4gICAgICpcbiAgICAgKiAgICAgLy8gWW91IGNhbiBub3cgdXNlIGFkZENvbXBvbmVudCB3aXRoIFNwYXduZWRDb21wb25lbnRcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogVGhpcyBjYWxsYmFjayBjYW4gYmUgdXNlZCB0byByZWdpc3RlciBkaWZmZXJlbnQgaW1wbGVtZW50YXRpb25zIG9mIGFcbiAgICAgKiBjb21wb25lbnQgZGVwZW5kaW5nIG9uIGNsaWVudCBmZWF0dXJlcyBvciBBUEkgdmVyc2lvbnMuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIFByb3BlcnRpZXMgbmVlZCB0byBiZSB0aGUgc2FtZSBmb3IgYWxsIGltcGxlbWVudGF0aW9ucyFcbiAgICAgKiBjb25zdCBTaGFyZWRQcm9wZXJ0aWVzID0ge307XG4gICAgICpcbiAgICAgKiBjbGFzcyBBbmNob3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgICAqICAgICBzdGF0aWMgVHlwZU5hbWUgPSAnc3Bhd25lcic7XG4gICAgICogICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0gU2hhcmVkUHJvcGVydGllcztcbiAgICAgKlxuICAgICAqICAgICBzdGF0aWMgb25SZWdpc3RlcihlbmdpbmUpIHtcbiAgICAgKiAgICAgICAgIGlmKG5hdmlnYXRvci54ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICogICAgICAgICAgICAgLyogV2ViWFIgdW5zdXBwb3J0ZWQsIGtlZXAgdGhpcyBkdW1teSBjb21wb25lbnQgKlxcL1xuICAgICAqICAgICAgICAgICAgIHJldHVybjtcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIC8qIFdlYlhSIHN1cHBvcnRlZCEgT3ZlcnJpZGUgYWxyZWFkeSByZWdpc3RlcmVkIGR1bW15IGltcGxlbWVudGF0aW9uXG4gICAgICogICAgICAgICAgKiB3aXRoIG9uZSBkZXBlbmRpbmcgb24gaGl0LXRlc3QgQVBJIHN1cHBvcnQgKlxcL1xuICAgICAqICAgICAgICAgZW5naW5lLnJlZ2lzdGVyQ29tcG9uZW50KHdpbmRvdy5IaXRUZXN0U291cmNlID09PSB1bmRlZmluZWQgP1xuICAgICAqICAgICAgICAgICAgIEFuY2hvcldpdGhvdXRIaXRUZXN0IDogQW5jaG9yV2l0aEhpdFRlc3QpO1xuICAgICAqICAgICB9XG4gICAgICpcbiAgICAgKiAgICAgLy8gVGhpcyBvbmUgaW1wbGVtZW50cyBubyBmdW5jdGlvbnNcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgc3RhdGljIG9uUmVnaXN0ZXI7XG4gICAgLyoqIE1hbmFnZXIgaW5kZXguIEBoaWRkZW4gKi9cbiAgICBfbWFuYWdlcjtcbiAgICAvKiogSW5zdGFuY2UgaW5kZXguIEBoaWRkZW4gKi9cbiAgICBfaWQ7XG4gICAgLyoqXG4gICAgICogT2JqZWN0IGNvbnRhaW5pbmcgdGhpcyBvYmplY3QuXG4gICAgICpcbiAgICAgKiAqKk5vdGUqKjogVGhpcyBpcyBjYWNoZWQgZm9yIGZhc3RlciByZXRyaWV2YWwuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX29iamVjdDtcbiAgICAvKiogV29uZGVybGFuZCBFbmdpbmUgaW5zdGFuY2UuIEBoaWRkZW4gKi9cbiAgICBfZW5naW5lO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAqXG4gICAgICogQHBhcmFtIGVuZ2luZSBUaGUgZW5naW5lIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBtYW5hZ2VyIEluZGV4IG9mIHRoZSBtYW5hZ2VyLlxuICAgICAqIEBwYXJhbSBpZCBXQVNNIGNvbXBvbmVudCBpbnN0YW5jZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUsIG1hbmFnZXIgPSAtMSwgaWQgPSAtMSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIHRoaXMuX21hbmFnZXIgPSBtYW5hZ2VyO1xuICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICB0aGlzLl9vYmplY3QgPSBudWxsO1xuICAgIH1cbiAgICAvKiogSG9zdGluZyBlbmdpbmUgaW5zdGFuY2UuICovXG4gICAgZ2V0IGVuZ2luZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZTtcbiAgICB9XG4gICAgLyoqIFRoZSBuYW1lIG9mIHRoaXMgY29tcG9uZW50J3MgdHlwZSAqL1xuICAgIGdldCB0eXBlKCkge1xuICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgcmV0dXJuIGN0b3IuVHlwZU5hbWUgPz8gdGhpcy5fZW5naW5lLndhc20uX3R5cGVOYW1lRm9yKHRoaXMuX21hbmFnZXIpO1xuICAgIH1cbiAgICAvKiogVGhlIG9iamVjdCB0aGlzIGNvbXBvbmVudCBpcyBhdHRhY2hlZCB0by4gKi9cbiAgICBnZXQgb2JqZWN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX29iamVjdCkge1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0SWQgPSB0aGlzLl9lbmdpbmUud2FzbS5fd2xfY29tcG9uZW50X2dldF9vYmplY3QodGhpcy5fbWFuYWdlciwgdGhpcy5faWQpO1xuICAgICAgICAgICAgdGhpcy5fb2JqZWN0ID0gdGhpcy5fZW5naW5lLndyYXBPYmplY3Qob2JqZWN0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3Q7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRoaXMgY29tcG9uZW50IGlzIGFjdGl2ZS5cbiAgICAgKlxuICAgICAqIEFjdGl2YXRpbmcvZGVhY3RpdmF0aW5nIGEgY29tcG9uZW50IGNvbWVzIGF0IGEgc21hbGwgY29zdCBvZiByZW9yZGVyaW5nXG4gICAgICogY29tcG9uZW50cyBpbiB0aGUgcmVzcGVjdGl2ZSBjb21wb25lbnQgbWFuYWdlci4gVGhpcyBmdW5jdGlvbiB0aGVyZWZvcmVcbiAgICAgKiBpcyBub3QgYSB0cml2aWFsIGFzc2lnbm1lbnQuXG4gICAgICpcbiAgICAgKiBEb2VzIG5vdGhpbmcgaWYgdGhlIGNvbXBvbmVudCBpcyBhbHJlYWR5IGFjdGl2YXRlZC9kZWFjdGl2YXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhY3RpdmUgTmV3IGFjdGl2ZSBzdGF0ZS5cbiAgICAgKi9cbiAgICBzZXQgYWN0aXZlKGFjdGl2ZSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfY29tcG9uZW50X3NldEFjdGl2ZSh0aGlzLl9tYW5hZ2VyLCB0aGlzLl9pZCwgYWN0aXZlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGNvbXBvbmVudCBpcyBhY3RpdmVcbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2NvbXBvbmVudF9pc0FjdGl2ZSh0aGlzLl9tYW5hZ2VyLCB0aGlzLl9pZCkgIT0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoaXMgY29tcG9uZW50IGZyb20gaXRzIG9iamVjdHMgYW5kIGRlc3Ryb3kgaXQuXG4gICAgICpcbiAgICAgKiBJdCBpcyBiZXN0IHByYWN0aWNlIHRvIHNldCB0aGUgY29tcG9uZW50IHRvIGBudWxsYCBhZnRlcixcbiAgICAgKiB0byBlbnN1cmUgaXQgZG9lcyBub3QgZ2V0IHVzZWQgbGF0ZXIuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgIGMuZGVzdHJveSgpO1xuICAgICAqICAgIGMgPSBudWxsO1xuICAgICAqIGBgYFxuICAgICAqIEBzaW5jZSAwLjkuMFxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9jb21wb25lbnRfcmVtb3ZlKHRoaXMuX21hbmFnZXIsIHRoaXMuX2lkKTtcbiAgICAgICAgdGhpcy5fbWFuYWdlciA9IC0xO1xuICAgICAgICB0aGlzLl9pZCA9IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZXF1YWxpdHkgYnkgY29tcGFyaW5nIHdoZXRoZXIgdGhlIHdyYXBwZWQgbmF0aXZlIGNvbXBvbmVudCBpZHNcbiAgICAgKiBhbmQgY29tcG9uZW50IG1hbmFnZXIgdHlwZXMgYXJlIGVxdWFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyQ29tcG9uZW50IENvbXBvbmVudCB0byBjaGVjayBlcXVhbGl0eSB3aXRoLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhpcyBjb21wb25lbnQgZXF1YWxzIHRoZSBnaXZlbiBjb21wb25lbnQuXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyQ29tcG9uZW50KSB7XG4gICAgICAgIGlmICghb3RoZXJDb21wb25lbnQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYW5hZ2VyID09IG90aGVyQ29tcG9uZW50Ll9tYW5hZ2VyICYmIHRoaXMuX2lkID09IG90aGVyQ29tcG9uZW50Ll9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbXBvbmVudCBwcm9wZXJ0aWVzIHRvIGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gY3Rvci5Qcm9wZXJ0aWVzO1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gcHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHByb3BlcnRpZXNbbmFtZV0uZGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgY29tcG9uZW50IHtAbGluayBDb21wb25lbnQuaW5pdH0gbWV0aG9kLlxuICAgICAqXG4gICAgICogQG5vdGUgVXNlIHRoaXMgbWV0aG9kIGluc3RlYWQgb2YgZGlyZWN0bHkgY2FsbGluZyB7QGxpbmsgQ29tcG9uZW50LmluaXR9LFxuICAgICAqIGJlY2F1c2UgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBoYW5kbGVyIGZvciB0aGUge0BsaW5rIENvbXBvbmVudC5zdGFydH0uXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX3RyaWdnZXJJbml0KCkge1xuICAgICAgICBpZiAodGhpcy5pbml0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFeGNlcHRpb24gZHVyaW5nICR7dGhpcy50eXBlfSBpbml0KCkgb24gb2JqZWN0ICR7dGhpcy5vYmplY3QubmFtZX1gKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zdGFydClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyogQXJtIG9uQWN0aXZhdGUoKSB3aXRoIHRoZSBpbml0aWFsIHN0YXJ0KCkgY2FsbCAqL1xuICAgICAgICBjb25zdCBvbGRBY3RpdmF0ZSA9IHRoaXMub25BY3RpdmF0ZTtcbiAgICAgICAgdGhpcy5vbkFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLyogQXMgXCJjb21wb25lbnRcIiBpcyB0aGUgY29tcG9uZW50IGluZGV4LCB3aGljaCBtYXkgY2hhbmdlXG4gICAgICAgICAgICAgKiB0aHJvdWdoIGNhbGxzIHRvIGluaXQoKSBhbmQgc3RhcnQoKSwgd2UgY2FsbCBpdCBvbiB0aGVcbiAgICAgICAgICAgICAqIGNhbGxpbmcgb2JqZWN0LCB3aGljaCB3aWxsIGJlIHRoZSBjb21wb25lbnQsIGluc3RlYWQgb2ZcbiAgICAgICAgICAgICAqIHdsanNfY29tcG9uZW50X3N0YXJ0KCkgZXRjICovXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQ/LigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFeGNlcHRpb24gZHVyaW5nICR7dGhpcy50eXBlfSBzdGFydCgpIG9uIG9iamVjdCAke3RoaXMub2JqZWN0Lm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub25BY3RpdmF0ZSA9IG9sZEFjdGl2YXRlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9uQWN0aXZhdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQWN0aXZhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXhjZXB0aW9uIGR1cmluZyAke3RoaXMudHlwZX0gb25BY3RpdmF0ZSgpIG9uIG9iamVjdCAke3RoaXMub2JqZWN0Lm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgY29tcG9uZW50IHtAbGluayBDb21wb25lbnQudXBkYXRlfSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX3RyaWdnZXJVcGRhdGUoZHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnVwZGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKGR0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXhjZXB0aW9uIGR1cmluZyAke3RoaXMudHlwZX0gdXBkYXRlKCkgb24gb2JqZWN0ICR7dGhpcy5vYmplY3QubmFtZX1gKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fZW5naW5lLndhc20uX2RlYWN0aXZhdGVfY29tcG9uZW50X29uX2Vycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBjb21wb25lbnQge0BsaW5rIENvbXBvbmVudC5vbkFjdGl2YXRlfSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX3RyaWdnZXJPbkFjdGl2YXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMub25BY3RpdmF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMub25BY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFeGNlcHRpb24gZHVyaW5nICR7dGhpcy50eXBlfSBvbkFjdGl2YXRlKCkgb24gb2JqZWN0ICR7dGhpcy5vYmplY3QubmFtZX1gKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlciB0aGUgY29tcG9uZW50IHtAbGluayBDb21wb25lbnQub25EZWFjdGl2YXRlfSBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX3RyaWdnZXJPbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5vbkRlYWN0aXZhdGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLm9uRGVhY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFeGNlcHRpb24gZHVyaW5nICR7dGhpcy50eXBlfSBvbkRlYWN0aXZhdGUoKSBvbiBvYmplY3QgJHt0aGlzLm9iamVjdC5uYW1lfWApO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIHRoZSBjb21wb25lbnQge0BsaW5rIENvbXBvbmVudC5vbkRlc3Ryb3l9IG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBfdHJpZ2dlck9uRGVzdHJveSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9uRGVzdHJveSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMub25EZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEV4Y2VwdGlvbiBkdXJpbmcgJHt0aGlzLnR5cGV9IG9uRGVzdHJveSgpIG9uIG9iamVjdCAke3RoaXMub2JqZWN0Lm5hbWV9YCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBOYXRpdmUgY29sbGlzaW9uIGNvbXBvbmVudC5cbiAqXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gYSBuYXRpdmUgY29sbGlzaW9uIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbGxpc2lvbkNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdjb2xsaXNpb24nO1xuICAgIC8qKiBDb2xsaXNpb24gY29tcG9uZW50IGNvbGxpZGVyICovXG4gICAgZ2V0IGNvbGxpZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2NvbGxpc2lvbl9jb21wb25lbnRfZ2V0X2NvbGxpZGVyKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGNvbGxpc2lvbiBjb21wb25lbnQgY29sbGlkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGlkZXIgQ29sbGlkZXIgb2YgdGhlIGNvbGxpc2lvbiBjb21wb25lbnQuXG4gICAgICovXG4gICAgc2V0IGNvbGxpZGVyKGNvbGxpZGVyKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9jb2xsaXNpb25fY29tcG9uZW50X3NldF9jb2xsaWRlcih0aGlzLl9pZCwgY29sbGlkZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb2xsaXNpb24gY29tcG9uZW50IGV4dGVudHMuXG4gICAgICpcbiAgICAgKiBJZiB7QGxpbmsgY29sbGlkZXJ9IHJldHVybnMge0BsaW5rIENvbGxpZGVyLlNwaGVyZX0sIG9ubHkgdGhlIGZpcnN0XG4gICAgICogY29tcG9uZW50IG9mIHRoZSByZXR1cm5lZCB2ZWN0b3IgaXMgdXNlZC5cbiAgICAgKi9cbiAgICBnZXQgZXh0ZW50cygpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh3YXNtLkhFQVBGMzIuYnVmZmVyLCB3YXNtLl93bF9jb2xsaXNpb25fY29tcG9uZW50X2dldF9leHRlbnRzKHRoaXMuX2lkKSwgMyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBjb2xsaXNpb24gY29tcG9uZW50IGV4dGVudHMuXG4gICAgICpcbiAgICAgKiBJZiB7QGxpbmsgY29sbGlkZXJ9IHJldHVybnMge0BsaW5rIENvbGxpZGVyLlNwaGVyZX0sIG9ubHkgdGhlIGZpcnN0XG4gICAgICogY29tcG9uZW50IG9mIHRoZSBwYXNzZWQgdmVjdG9yIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBTcGFucyAxIHVuaXQgb24gdGhlIHgtYXhpcywgMiBvbiB0aGUgeS1heGlzLCAzIG9uIHRoZSB6LWF4aXMuXG4gICAgICogY29sbGlzaW9uLmV4dGVudCA9IFsxLCAyLCAzXTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBleHRlbnRzIEV4dGVudHMgb2YgdGhlIGNvbGxpc2lvbiBjb21wb25lbnQsIGV4cGVjdHMgYVxuICAgICAqICAgICAgMyBjb21wb25lbnQgYXJyYXkuXG4gICAgICovXG4gICAgc2V0IGV4dGVudHMoZXh0ZW50cykge1xuICAgICAgICB0aGlzLmV4dGVudHMuc2V0KGV4dGVudHMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb2xsaXNpb24gY29tcG9uZW50IGdyb3VwLlxuICAgICAqXG4gICAgICogVGhlIGdyb3VwcyBpcyBhIGJpdG1hc2sgdGhhdCBpcyBjb21wYXJlZCB0byBvdGhlciBjb21wb25lbnRzIGluIHtAbGluayBDb2xsaXNpb25Db21wb25lbnQjcXVlcnlPdmVybGFwc31cbiAgICAgKiBvciB0aGUgZ3JvdXAgaW4ge0BsaW5rIFNjZW5lI3JheUNhc3R9LlxuICAgICAqXG4gICAgICogQ29sbGlkZXJzIHRoYXQgaGF2ZSBubyBjb21tb24gZ3JvdXBzIHdpbGwgbm90IG92ZXJsYXAgd2l0aCBlYWNoIG90aGVyLiBJZiBhIGNvbGxpZGVyXG4gICAgICogaGFzIG5vbmUgb2YgdGhlIGdyb3VwcyBzZXQgZm9yIHtAbGluayBTY2VuZSNyYXlDYXN0fSwgdGhlIHJheSB3aWxsIG5vdCBoaXQgaXQuXG4gICAgICpcbiAgICAgKiBFYWNoIGJpdCByZXByZXNlbnRzIGJlbG9uZ2luZyB0byBhIGdyb3VwLCBzZWUgZXhhbXBsZS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAgLy8gYyBiZWxvbmdzIHRvIGdyb3VwIDJcbiAgICAgKiAgICBjLmdyb3VwID0gKDEgPDwgMik7XG4gICAgICpcbiAgICAgKiAgICAvLyBjIGJlbG9uZ3MgdG8gZ3JvdXAgMFxuICAgICAqICAgIGMuZ3JvdXAgPSAoMSA8PCAwKTtcbiAgICAgKlxuICAgICAqICAgIC8vIGMgYmVsb25ncyB0byBncm91cCAwICphbmQqIDJcbiAgICAgKiAgICBjLmdyb3VwID0gKDEgPDwgMCkgfCAoMSA8PCAyKTtcbiAgICAgKlxuICAgICAqICAgIChjLmdyb3VwICYgKDEgPDwgMikpICE9IDA7IC8vIHRydWVcbiAgICAgKiAgICAoYy5ncm91cCAmICgxIDw8IDcpKSAhPSAwOyAvLyBmYWxzZVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9jb2xsaXNpb25fY29tcG9uZW50X2dldF9ncm91cCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBjb2xsaXNpb24gY29tcG9uZW50IGdyb3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIGdyb3VwIEdyb3VwIG1hc2sgb2YgdGhlIGNvbGxpc2lvbiBjb21wb25lbnQuXG4gICAgICovXG4gICAgc2V0IGdyb3VwKGdyb3VwKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9jb2xsaXNpb25fY29tcG9uZW50X3NldF9ncm91cCh0aGlzLl9pZCwgZ3JvdXApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBRdWVyeSBvdmVybGFwcGluZyBvYmplY3RzLlxuICAgICAqXG4gICAgICogVXNhZ2U6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGNvbGxpc2lvbiA9IG9iamVjdC5nZXRDb21wb25lbnQoJ2NvbGxpc2lvbicpO1xuICAgICAqIGNvbnN0IG92ZXJsYXBzID0gY29sbGlzaW9uLnF1ZXJ5T3ZlcmxhcHMoKTtcbiAgICAgKiBmb3IoY29uc3Qgb3RoZXJDb2xsaXNpb24gb2Ygb3ZlcmxhcHMpIHtcbiAgICAgKiAgICAgY29uc3Qgb3RoZXJPYmplY3QgPSBvdGhlckNvbGxpc2lvbi5vYmplY3Q7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGBDb2xsaXNpb24gd2l0aCBvYmplY3QgJHtvdGhlck9iamVjdC5vYmplY3RJZH1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBDb2xsaXNpb24gY29tcG9uZW50cyBvdmVybGFwcGluZyB0aGlzIGNvbGxpZGVyLlxuICAgICAqL1xuICAgIHF1ZXJ5T3ZlcmxhcHMoKSB7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZW5naW5lLndhc20uX3dsX2NvbGxpc2lvbl9jb21wb25lbnRfcXVlcnlfb3ZlcmxhcHModGhpcy5faWQsIHRoaXMuX2VuZ2luZS53YXNtLl90ZW1wTWVtLCB0aGlzLl9lbmdpbmUud2FzbS5fdGVtcE1lbVNpemUgPj4gMSk7XG4gICAgICAgIGNvbnN0IG92ZXJsYXBzID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgICAgICBvdmVybGFwc1tpXSA9IG5ldyBDb2xsaXNpb25Db21wb25lbnQodGhpcy5fZW5naW5lLCB0aGlzLl9tYW5hZ2VyLCB0aGlzLl9lbmdpbmUud2FzbS5fdGVtcE1lbVVpbnQxNltpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG92ZXJsYXBzO1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIENvbGxpc2lvbkNvbXBvbmVudC5wcm90b3R5cGUsIFwiY29sbGlkZXJcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBDb2xsaXNpb25Db21wb25lbnQucHJvdG90eXBlLCBcImV4dGVudHNcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBDb2xsaXNpb25Db21wb25lbnQucHJvdG90eXBlLCBcImdyb3VwXCIsIG51bGwpO1xuLyoqXG4gKiBOYXRpdmUgdGV4dCBjb21wb25lbnRcbiAqXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gYSBuYXRpdmUgdGV4dCBjb21wb25lbnQgaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGNsYXNzIFRleHRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndGV4dCc7XG4gICAgLyoqIFRleHQgY29tcG9uZW50IGFsaWdubWVudC4gKi9cbiAgICBnZXQgYWxpZ25tZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3RleHRfY29tcG9uZW50X2dldF9ob3Jpem9udGFsX2FsaWdubWVudCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0ZXh0IGNvbXBvbmVudCBhbGlnbm1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWxpZ25tZW50IEFsaWdubWVudCBmb3IgdGhlIHRleHQgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHNldCBhbGlnbm1lbnQoYWxpZ25tZW50KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF90ZXh0X2NvbXBvbmVudF9zZXRfaG9yaXpvbnRhbF9hbGlnbm1lbnQodGhpcy5faWQsIGFsaWdubWVudCk7XG4gICAgfVxuICAgIC8qKiBUZXh0IGNvbXBvbmVudCBqdXN0aWZpY2F0aW9uLiAqL1xuICAgIGdldCBqdXN0aWZpY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3RleHRfY29tcG9uZW50X2dldF92ZXJ0aWNhbF9hbGlnbm1lbnQodGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGV4dCBjb21wb25lbnQganVzdGlmaWNhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBqdXN0aWZpY2F0aW9uIEp1c3RpZmljYXRpb24gZm9yIHRoZSB0ZXh0IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBzZXQganVzdGlmaWNhdGlvbihqdXN0aWZpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF90ZXh0X2NvbXBvbmVudF9zZXRfdmVydGljYWxfYWxpZ25tZW50KHRoaXMuX2lkLCBqdXN0aWZpY2F0aW9uKTtcbiAgICB9XG4gICAgLyoqIFRleHQgY29tcG9uZW50IGNoYXJhY3RlciBzcGFjaW5nLiAqL1xuICAgIGdldCBjaGFyYWN0ZXJTcGFjaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3RleHRfY29tcG9uZW50X2dldF9jaGFyYWN0ZXJfc3BhY2luZyh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0ZXh0IGNvbXBvbmVudCBjaGFyYWN0ZXIgc3BhY2luZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzcGFjaW5nIENoYXJhY3RlciBzcGFjaW5nIGZvciB0aGUgdGV4dCBjb21wb25lbnQuXG4gICAgICovXG4gICAgc2V0IGNoYXJhY3RlclNwYWNpbmcoc3BhY2luZykge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdGV4dF9jb21wb25lbnRfc2V0X2NoYXJhY3Rlcl9zcGFjaW5nKHRoaXMuX2lkLCBzcGFjaW5nKTtcbiAgICB9XG4gICAgLyoqIFRleHQgY29tcG9uZW50IGxpbmUgc3BhY2luZy4gKi9cbiAgICBnZXQgbGluZVNwYWNpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdGV4dF9jb21wb25lbnRfZ2V0X2xpbmVfc3BhY2luZyh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0ZXh0IGNvbXBvbmVudCBsaW5lIHNwYWNpbmdcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzcGFjaW5nIExpbmUgc3BhY2luZyBmb3IgdGhlIHRleHQgY29tcG9uZW50XG4gICAgICovXG4gICAgc2V0IGxpbmVTcGFjaW5nKHNwYWNpbmcpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX3RleHRfY29tcG9uZW50X3NldF9saW5lX3NwYWNpbmcodGhpcy5faWQsIHNwYWNpbmcpO1xuICAgIH1cbiAgICAvKiogVGV4dCBjb21wb25lbnQgZWZmZWN0LiAqL1xuICAgIGdldCBlZmZlY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdGV4dF9jb21wb25lbnRfZ2V0X2VmZmVjdCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0ZXh0IGNvbXBvbmVudCBlZmZlY3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSBlZmZlY3QgRWZmZWN0IGZvciB0aGUgdGV4dCBjb21wb25lbnRcbiAgICAgKi9cbiAgICBzZXQgZWZmZWN0KGVmZmVjdCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdGV4dF9jb21wb25lbnRfc2V0X2VmZmVjdCh0aGlzLl9pZCwgZWZmZWN0KTtcbiAgICB9XG4gICAgLyoqIFRleHQgY29tcG9uZW50IHRleHQuICovXG4gICAgZ2V0IHRleHQoKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgcHRyID0gd2FzbS5fd2xfdGV4dF9jb21wb25lbnRfZ2V0X3RleHQodGhpcy5faWQpO1xuICAgICAgICByZXR1cm4gd2FzbS5VVEY4VG9TdHJpbmcocHRyKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRleHQgY29tcG9uZW50IHRleHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGV4dCBUZXh0IG9mIHRoZSB0ZXh0IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBzZXQgdGV4dCh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgd2FzbS5fd2xfdGV4dF9jb21wb25lbnRfc2V0X3RleHQodGhpcy5faWQsIHdhc20udGVtcFVURjgodGV4dC50b1N0cmluZygpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBtYXRlcmlhbCB0byByZW5kZXIgdGhlIHRleHQgd2l0aC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtYXRlcmlhbCBOZXcgbWF0ZXJpYWwuXG4gICAgICovXG4gICAgc2V0IG1hdGVyaWFsKG1hdGVyaWFsKSB7XG4gICAgICAgIGNvbnN0IG1hdEluZGV4ID0gbWF0ZXJpYWwgPyBtYXRlcmlhbC5faW5kZXggOiAwO1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdGV4dF9jb21wb25lbnRfc2V0X21hdGVyaWFsKHRoaXMuX2lkLCBtYXRJbmRleCk7XG4gICAgfVxuICAgIC8qKiBNYXRlcmlhbCB1c2VkIHRvIHJlbmRlciB0aGUgdGV4dC4gKi9cbiAgICBnZXQgbWF0ZXJpYWwoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5fZW5naW5lLndhc20uX3dsX3RleHRfY29tcG9uZW50X2dldF9tYXRlcmlhbCh0aGlzLl9pZCk7XG4gICAgICAgIHJldHVybiBpZCA+IDAgPyBuZXcgTWF0ZXJpYWwodGhpcy5fZW5naW5lLCBpZCkgOiBudWxsO1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFRleHRDb21wb25lbnQucHJvdG90eXBlLCBcImFsaWdubWVudFwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFRleHRDb21wb25lbnQucHJvdG90eXBlLCBcImp1c3RpZmljYXRpb25cIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBUZXh0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJjaGFyYWN0ZXJTcGFjaW5nXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgVGV4dENvbXBvbmVudC5wcm90b3R5cGUsIFwibGluZVNwYWNpbmdcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBUZXh0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJlZmZlY3RcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBUZXh0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJ0ZXh0XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgVGV4dENvbXBvbmVudC5wcm90b3R5cGUsIFwibWF0ZXJpYWxcIiwgbnVsbCk7XG4vKipcbiAqIE5hdGl2ZSB2aWV3IGNvbXBvbmVudC5cbiAqXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gYSBuYXRpdmUgdmlldyBjb21wb25lbnQgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBWaWV3Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3ZpZXcnO1xuICAgIC8qKiBQcm9qZWN0aW9uIG1hdHJpeC4gKi9cbiAgICBnZXQgcHJvamVjdGlvbk1hdHJpeCgpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh3YXNtLkhFQVBGMzIuYnVmZmVyLCB3YXNtLl93bF92aWV3X2NvbXBvbmVudF9nZXRfcHJvamVjdGlvbl9tYXRyaXgodGhpcy5faWQpLCAxNik7XG4gICAgfVxuICAgIC8qKiBWaWV3Q29tcG9uZW50IG5lYXIgY2xpcHBpbmcgcGxhbmUgdmFsdWUuICovXG4gICAgZ2V0IG5lYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdmlld19jb21wb25lbnRfZ2V0X25lYXIodGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbmVhciBjbGlwcGluZyBwbGFuZSBkaXN0YW5jZSBmb3IgdGhlIHZpZXcuXG4gICAgICpcbiAgICAgKiBJZiBhbiBYUiBzZXNzaW9uIGlzIGFjdGl2ZSwgdGhlIGNoYW5nZSB3aWxsIGFwcGx5IGluIHRoZVxuICAgICAqIGZvbGxvd2luZyBmcmFtZSwgb3RoZXJ3aXNlIHRoZSBjaGFuZ2UgaXMgaW1tZWRpYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5lYXIgTmVhciBkZXB0aCB2YWx1ZS5cbiAgICAgKi9cbiAgICBzZXQgbmVhcihuZWFyKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF92aWV3X2NvbXBvbmVudF9zZXRfbmVhcih0aGlzLl9pZCwgbmVhcik7XG4gICAgfVxuICAgIC8qKiBGYXIgY2xpcHBpbmcgcGxhbmUgdmFsdWUuICovXG4gICAgZ2V0IGZhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF92aWV3X2NvbXBvbmVudF9nZXRfZmFyKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGZhciBjbGlwcGluZyBwbGFuZSBkaXN0YW5jZSBmb3IgdGhlIHZpZXcuXG4gICAgICpcbiAgICAgKiBJZiBhbiBYUiBzZXNzaW9uIGlzIGFjdGl2ZSwgdGhlIGNoYW5nZSB3aWxsIGFwcGx5IGluIHRoZVxuICAgICAqIGZvbGxvd2luZyBmcmFtZSwgb3RoZXJ3aXNlIHRoZSBjaGFuZ2UgaXMgaW1tZWRpYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZhciBOZWFyIGRlcHRoIHZhbHVlLlxuICAgICAqL1xuICAgIHNldCBmYXIoZmFyKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF92aWV3X2NvbXBvbmVudF9zZXRfZmFyKHRoaXMuX2lkLCBmYXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGhvcml6b250YWwgZmllbGQgb2YgdmlldyBmb3IgdGhlIHZpZXcsICoqaW4gZGVncmVlcyoqLlxuICAgICAqXG4gICAgICogSWYgYW4gWFIgc2Vzc2lvbiBpcyBhY3RpdmUsIHRoaXMgcmV0dXJucyB0aGUgZmllbGQgb2YgdmlldyByZXBvcnRlZCBieVxuICAgICAqIHRoZSBkZXZpY2UsIHJlZ2FyZGxlc3Mgb2YgdGhlIGZvdiB0aGF0IHdhcyBzZXQuXG4gICAgICovXG4gICAgZ2V0IGZvdigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF92aWV3X2NvbXBvbmVudF9nZXRfZm92KHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBob3Jpem9udGFsIGZpZWxkIG9mIHZpZXcgZm9yIHRoZSB2aWV3LCAqKmluIGRlZ3JlZXMqKi5cbiAgICAgKlxuICAgICAqIElmIGFuIFhSIHNlc3Npb24gaXMgYWN0aXZlLCB0aGUgZmllbGQgb2YgdmlldyByZXBvcnRlZCBieSB0aGUgZGV2aWNlIGlzXG4gICAgICogdXNlZCBhbmQgdGhpcyB2YWx1ZSBpcyBpZ25vcmVkLiBBZnRlciB0aGUgWFIgc2Vzc2lvbiBlbmRzLCB0aGUgbmV3IHZhbHVlXG4gICAgICogaXMgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3YgSG9yaXpvbnRhbCBmaWVsZCBvZiB2aWV3LCAqKmluIGRlZ3JlZXMqKi5cbiAgICAgKi9cbiAgICBzZXQgZm92KGZvdikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdmlld19jb21wb25lbnRfc2V0X2Zvdih0aGlzLl9pZCwgZm92KTtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBlbnVtZXJhYmxlKClcbl0sIFZpZXdDb21wb25lbnQucHJvdG90eXBlLCBcInByb2plY3Rpb25NYXRyaXhcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBWaWV3Q29tcG9uZW50LnByb3RvdHlwZSwgXCJuZWFyXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZmFyXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgVmlld0NvbXBvbmVudC5wcm90b3R5cGUsIFwiZm92XCIsIG51bGwpO1xuLyoqXG4gKiBOYXRpdmUgaW5wdXQgY29tcG9uZW50LlxuICpcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byBhIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdpbnB1dCc7XG4gICAgLyoqIElucHV0IGNvbXBvbmVudCB0eXBlICovXG4gICAgZ2V0IGlucHV0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9pbnB1dF9jb21wb25lbnRfZ2V0X3R5cGUodGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgaW5wdXQgY29tcG9uZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW1zIE5ldyBpbnB1dCBjb21wb25lbnQgdHlwZS5cbiAgICAgKi9cbiAgICBzZXQgaW5wdXRUeXBlKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2lucHV0X2NvbXBvbmVudF9zZXRfdHlwZSh0aGlzLl9pZCwgdHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdlYlhSIERldmljZSBBUEkgaW5wdXQgc291cmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGlucHV0IGNvbXBvbmVudCxcbiAgICAgKiBpZiB0eXBlIHtAbGluayBJbnB1dFR5cGUuQ29udHJvbGxlckxlZnR9IG9yIHtAbGluayBJbnB1dFR5cGUuQ29udHJvbGxlclJpZ2h0fS5cbiAgICAgKi9cbiAgICBnZXQgeHJJbnB1dFNvdXJjZSgpIHtcbiAgICAgICAgY29uc3QgeHJTZXNzaW9uID0gdGhpcy5fZW5naW5lLnhyU2Vzc2lvbjtcbiAgICAgICAgaWYgKHhyU2Vzc2lvbikge1xuICAgICAgICAgICAgZm9yIChsZXQgaW5wdXRTb3VyY2Ugb2YgeHJTZXNzaW9uLmlucHV0U291cmNlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFNvdXJjZS5oYW5kZWRuZXNzID09IHRoaXMuaGFuZGVkbmVzcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRTb3VyY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAnbGVmdCcsICdyaWdodCcgb3IgYG51bGxgIGRlcGVuZGluZyBvbiB0aGUge0BsaW5rIElucHV0Q29tcG9uZW50I2lucHV0VHlwZX0uXG4gICAgICovXG4gICAgZ2V0IGhhbmRlZG5lc3MoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0VHlwZSA9IHRoaXMuaW5wdXRUeXBlO1xuICAgICAgICBpZiAoaW5wdXRUeXBlID09IElucHV0VHlwZS5Db250cm9sbGVyUmlnaHQgfHxcbiAgICAgICAgICAgIGlucHV0VHlwZSA9PSBJbnB1dFR5cGUuUmF5UmlnaHQgfHxcbiAgICAgICAgICAgIGlucHV0VHlwZSA9PSBJbnB1dFR5cGUuRXllUmlnaHQpXG4gICAgICAgICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICAgICAgaWYgKGlucHV0VHlwZSA9PSBJbnB1dFR5cGUuQ29udHJvbGxlckxlZnQgfHxcbiAgICAgICAgICAgIGlucHV0VHlwZSA9PSBJbnB1dFR5cGUuUmF5TGVmdCB8fFxuICAgICAgICAgICAgaW5wdXRUeXBlID09IElucHV0VHlwZS5FeWVMZWZ0KVxuICAgICAgICAgICAgcmV0dXJuICdsZWZ0JztcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcImlucHV0VHlwZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIGVudW1lcmFibGUoKVxuXSwgSW5wdXRDb21wb25lbnQucHJvdG90eXBlLCBcInhySW5wdXRTb3VyY2VcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBlbnVtZXJhYmxlKClcbl0sIElucHV0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJoYW5kZWRuZXNzXCIsIG51bGwpO1xuLyoqXG4gKiBOYXRpdmUgbGlnaHQgY29tcG9uZW50LlxuICpcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byBhIG5hdGl2ZSBsaWdodCBjb21wb25lbnQgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBMaWdodENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdsaWdodCc7XG4gICAgZ2V0Q29sb3Iob3V0ID0gbmV3IEZsb2F0MzJBcnJheSgzKSkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIGNvbnN0IHB0ciA9IHdhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfY29sb3IodGhpcy5faWQpIC8gNDsgLyogQWxpZ24gRjMyICovXG4gICAgICAgIG91dFswXSA9IHdhc20uSEVBUEYzMltwdHJdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLkhFQVBGMzJbcHRyICsgMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uSEVBUEYzMltwdHIgKyAyXTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGxpZ2h0IGNvbG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGMgTmV3IGNvbG9yIGFycmF5L3ZlY3RvciwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIGVsZW1lbnRzLlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIHNldENvbG9yKGMpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCBwdHIgPSB3YXNtLl93bF9saWdodF9jb21wb25lbnRfZ2V0X2NvbG9yKHRoaXMuX2lkKSAvIDQ7IC8qIEFsaWduIEYzMiAqL1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyXSA9IGNbMF07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyAxXSA9IGNbMV07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyAyXSA9IGNbMl07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZpZXcgb24gdGhlIGxpZ2h0IGNvbG9yLlxuICAgICAqXG4gICAgICogQG5vdGUgUHJlZmVyIHRvIHVzZSB7QGxpbmsgZ2V0Q29sb3J9IGluIHBlcmZvcm1hbmNlLWNyaXRpY2FsIGNvZGUuXG4gICAgICovXG4gICAgZ2V0IGNvbG9yKCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHdhc20uSEVBUEYzMi5idWZmZXIsIHdhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfY29sb3IodGhpcy5faWQpLCAzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGxpZ2h0IGNvbG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIGMgQ29sb3Igb2YgdGhlIGxpZ2h0IGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBub3RlIFByZWZlciB0byB1c2Uge0BsaW5rIHNldENvbG9yfSBpbiBwZXJmb3JtYW5jZS1jcml0aWNhbCBjb2RlLlxuICAgICAqL1xuICAgIHNldCBjb2xvcihjKSB7XG4gICAgICAgIHRoaXMuY29sb3Iuc2V0KGMpO1xuICAgIH1cbiAgICAvKiogTGlnaHQgdHlwZS4gKi9cbiAgICBnZXQgbGlnaHRUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfdHlwZSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBsaWdodCB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpZ2h0VHlwZSBUeXBlIG9mIHRoZSBsaWdodCBjb21wb25lbnQuXG4gICAgICovXG4gICAgc2V0IGxpZ2h0VHlwZSh0KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfc2V0X3R5cGUodGhpcy5faWQsIHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaWdodCBpbnRlbnNpdHkuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IGludGVuc2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfZ2V0X2ludGVuc2l0eSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBsaWdodCBpbnRlbnNpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW50ZW5zaXR5IEludGVuc2l0eSBvZiB0aGUgbGlnaHQgY29tcG9uZW50LlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIHNldCBpbnRlbnNpdHkoaW50ZW5zaXR5KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfc2V0X2ludGVuc2l0eSh0aGlzLl9pZCwgaW50ZW5zaXR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogT3V0ZXIgYW5nbGUgZm9yIHNwb3QgbGlnaHRzLCBpbiBkZWdyZWVzLlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIGdldCBvdXRlckFuZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfb3V0ZXJBbmdsZSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBvdXRlciBhbmdsZSBmb3Igc3BvdCBsaWdodHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW5nbGUgT3V0ZXIgYW5nbGUsIGluIGRlZ3JlZXMuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgc2V0IG91dGVyQW5nbGUoYW5nbGUpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfb3V0ZXJBbmdsZSh0aGlzLl9pZCwgYW5nbGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbm5lciBhbmdsZSBmb3Igc3BvdCBsaWdodHMsIGluIGRlZ3JlZXMuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IGlubmVyQW5nbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbGlnaHRfY29tcG9uZW50X2dldF9pbm5lckFuZ2xlKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGlubmVyIGFuZ2xlIGZvciBzcG90IGxpZ2h0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbmdsZSBJbm5lciBhbmdsZSwgaW4gZGVncmVlcy5cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKi9cbiAgICBzZXQgaW5uZXJBbmdsZShhbmdsZSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbGlnaHRfY29tcG9uZW50X3NldF9pbm5lckFuZ2xlKHRoaXMuX2lkLCBhbmdsZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGxpZ2h0IGNhc3RzIHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IHNoYWRvd3MoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfZ2V0X3NoYWRvd3ModGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgd2hldGhlciB0aGUgbGlnaHQgY2FzdHMgc2hhZG93cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiIFdoZXRoZXIgdGhlIGxpZ2h0IGNhc3RzIHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgc2V0IHNoYWRvd3MoYikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbGlnaHRfY29tcG9uZW50X3NldF9zaGFkb3dzKHRoaXMuX2lkLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmFuZ2UgZm9yIHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IHNoYWRvd1JhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfc2hhZG93UmFuZ2UodGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgcmFuZ2UgZm9yIHNoYWRvd3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmFuZ2UgUmFuZ2UgZm9yIHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgc2V0IHNoYWRvd1JhbmdlKHJhbmdlKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfc2V0X3NoYWRvd1JhbmdlKHRoaXMuX2lkLCByYW5nZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJpYXMgdmFsdWUgZm9yIHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IHNoYWRvd0JpYXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbGlnaHRfY29tcG9uZW50X2dldF9zaGFkb3dCaWFzKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGJpYXMgdmFsdWUgZm9yIHNoYWRvd3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYmlhcyBCaWFzIGZvciBzaGFkb3dzLlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIHNldCBzaGFkb3dCaWFzKGJpYXMpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfc2hhZG93Qmlhcyh0aGlzLl9pZCwgYmlhcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vcm1hbCBiaWFzIHZhbHVlIGZvciBzaGFkb3dzLlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIGdldCBzaGFkb3dOb3JtYWxCaWFzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfc2hhZG93Tm9ybWFsQmlhcyh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBub3JtYWwgYmlhcyB2YWx1ZSBmb3Igc2hhZG93cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiaWFzIE5vcm1hbCBiaWFzIGZvciBzaGFkb3dzLlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIHNldCBzaGFkb3dOb3JtYWxCaWFzKGJpYXMpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfc2hhZG93Tm9ybWFsQmlhcyh0aGlzLl9pZCwgYmlhcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRleGVsIHNpemUgZm9yIHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IHNoYWRvd1RleGVsU2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfZ2V0X3NoYWRvd1RleGVsU2l6ZSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB0ZXhlbCBzaXplIGZvciBzaGFkb3dzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgVGV4ZWwgc2l6ZSBmb3Igc2hhZG93cy5cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKi9cbiAgICBzZXQgc2hhZG93VGV4ZWxTaXplKHNpemUpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfc2hhZG93VGV4ZWxTaXplKHRoaXMuX2lkLCBzaXplKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FzY2FkZSBjb3VudCBmb3Ige0BsaW5rIExpZ2h0VHlwZS5TdW59IHNoYWRvd3MuXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICovXG4gICAgZ2V0IGNhc2NhZGVDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9saWdodF9jb21wb25lbnRfZ2V0X2Nhc2NhZGVDb3VudCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBjYXNjYWRlIGNvdW50IGZvciB7QGxpbmsgTGlnaHRUeXBlLlN1bn0gc2hhZG93cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3VudCBDYXNjYWRlIGNvdW50LlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIHNldCBjYXNjYWRlQ291bnQoY291bnQpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfY2FzY2FkZUNvdW50KHRoaXMuX2lkLCBjb3VudCk7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgTGlnaHRDb21wb25lbnQucHJvdG90eXBlLCBcImNvbG9yXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgTGlnaHRDb21wb25lbnQucHJvdG90eXBlLCBcImxpZ2h0VHlwZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIExpZ2h0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJpbnRlbnNpdHlcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBMaWdodENvbXBvbmVudC5wcm90b3R5cGUsIFwib3V0ZXJBbmdsZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIExpZ2h0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJpbm5lckFuZ2xlXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgTGlnaHRDb21wb25lbnQucHJvdG90eXBlLCBcInNoYWRvd3NcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBMaWdodENvbXBvbmVudC5wcm90b3R5cGUsIFwic2hhZG93UmFuZ2VcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBMaWdodENvbXBvbmVudC5wcm90b3R5cGUsIFwic2hhZG93Qmlhc1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIExpZ2h0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJzaGFkb3dOb3JtYWxCaWFzXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgTGlnaHRDb21wb25lbnQucHJvdG90eXBlLCBcInNoYWRvd1RleGVsU2l6ZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIExpZ2h0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJjYXNjYWRlQ291bnRcIiwgbnVsbCk7XG4vKipcbiAqIE5hdGl2ZSBhbmltYXRpb24gY29tcG9uZW50LlxuICpcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byBhIG5hdGl2ZSBhbmltYXRpb24gY29tcG9uZW50IGluc3RhbmNlLlxuICovXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICAvKiogQG92ZXJyaWRlICovXG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ2FuaW1hdGlvbic7XG4gICAgLyoqXG4gICAgICogU2V0IGFuaW1hdGlvbiB0byBwbGF5LlxuICAgICAqXG4gICAgICogTWFrZSBzdXJlIHRvIHtAbGluayBBbmltYXRpb24jcmV0YXJnZXR9IHRoZSBhbmltYXRpb24gdG8gYWZmZWN0IHRoZVxuICAgICAqIHJpZ2h0IG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYW5pbSBBbmltYXRpb24gdG8gcGxheS5cbiAgICAgKi9cbiAgICBzZXQgYW5pbWF0aW9uKGFuaW0pIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfc2V0X2FuaW1hdGlvbih0aGlzLl9pZCwgYW5pbSA/IGFuaW0uX2luZGV4IDogMCk7XG4gICAgfVxuICAgIC8qKiBBbmltYXRpb24gc2V0IGZvciB0aGlzIGNvbXBvbmVudCAqL1xuICAgIGdldCBhbmltYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5fZW5naW5lLndhc20uX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfZ2V0X2FuaW1hdGlvbih0aGlzLl9pZCk7XG4gICAgICAgIHJldHVybiBpZCA+IDAgPyBuZXcgQW5pbWF0aW9uKHRoaXMuX2VuZ2luZSwgaWQpIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHBsYXkgY291bnQuIFNldCB0byBgMGAgdG8gbG9vcCBpbmRlZmluaXRlbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGxheUNvdW50IE51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIGFuaW1hdGlvbi5cbiAgICAgKi9cbiAgICBzZXQgcGxheUNvdW50KHBsYXlDb3VudCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9zZXRfcGxheUNvdW50KHRoaXMuX2lkLCBwbGF5Q291bnQpO1xuICAgIH1cbiAgICAvKiogTnVtYmVyIG9mIHRpbWVzIHRoZSBhbmltYXRpb24gaXMgcGxheWVkLiAqL1xuICAgIGdldCBwbGF5Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9nZXRfcGxheUNvdW50KHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHNwZWVkLiBTZXQgdG8gbmVnYXRpdmUgdmFsdWVzIHRvIHJ1biB0aGUgYW5pbWF0aW9uIGJhY2t3YXJkcy5cbiAgICAgKlxuICAgICAqIFNldHRpbmcgc3BlZWQgaGFzIGFuIGltbWVkaWF0ZSBlZmZlY3QgZm9yIHRoZSBjdXJyZW50IGZyYW1lJ3MgdXBkYXRlXG4gICAgICogYW5kIHdpbGwgY29udGludWUgd2l0aCB0aGUgc3BlZWQgZnJvbSB0aGUgY3VycmVudCBwb2ludCBpbiB0aGUgYW5pbWF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNwZWVkIE5ldyBzcGVlZCBhdCB3aGljaCB0byBwbGF5IHRoZSBhbmltYXRpb24uXG4gICAgICogQHNpbmNlIDAuOC4xMFxuICAgICAqL1xuICAgIHNldCBzcGVlZChzcGVlZCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9zZXRfc3BlZWQodGhpcy5faWQsIHNwZWVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3BlZWQgZmFjdG9yIGF0IHdoaWNoIHRoZSBhbmltYXRpb24gaXMgcGxheWVkLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOC4xMFxuICAgICAqL1xuICAgIGdldCBzcGVlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9hbmltYXRpb25fY29tcG9uZW50X2dldF9zcGVlZCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKiBDdXJyZW50IHBsYXlpbmcgc3RhdGUgb2YgdGhlIGFuaW1hdGlvbiAqL1xuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9hbmltYXRpb25fY29tcG9uZW50X3N0YXRlKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGxheSBhbmltYXRpb24uXG4gICAgICpcbiAgICAgKiBJZiB0aGUgYW5pbWF0aW9uIGlzIGN1cnJlbnRseSBwYXVzZWQsIHJlc3VtZXMgZnJvbSB0aGF0IHBvc2l0aW9uLiBJZiB0aGVcbiAgICAgKiBhbmltYXRpb24gaXMgYWxyZWFkeSBwbGF5aW5nLCBkb2VzIG5vdGhpbmcuXG4gICAgICpcbiAgICAgKiBUbyByZXN0YXJ0IHRoZSBhbmltYXRpb24sIHtAbGluayBBbmltYXRpb25Db21wb25lbnQjc3RvcH0gaXQgZmlyc3QuXG4gICAgICovXG4gICAgcGxheSgpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfcGxheSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKiBTdG9wIGFuaW1hdGlvbi4gKi9cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9zdG9wKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqIFBhdXNlIGFuaW1hdGlvbi4gKi9cbiAgICBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfcGF1c2UodGhpcy5faWQpO1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIEFuaW1hdGlvbkNvbXBvbmVudC5wcm90b3R5cGUsIFwiYW5pbWF0aW9uXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgQW5pbWF0aW9uQ29tcG9uZW50LnByb3RvdHlwZSwgXCJwbGF5Q291bnRcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBBbmltYXRpb25Db21wb25lbnQucHJvdG90eXBlLCBcInNwZWVkXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgZW51bWVyYWJsZSgpXG5dLCBBbmltYXRpb25Db21wb25lbnQucHJvdG90eXBlLCBcInN0YXRlXCIsIG51bGwpO1xuLyoqXG4gKiBOYXRpdmUgbWVzaCBjb21wb25lbnQuXG4gKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIGEgbmF0aXZlIG1lc2ggY29tcG9uZW50IGluc3RhbmNlLlxuICovXG5leHBvcnQgY2xhc3MgTWVzaENvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgLyoqIEBvdmVycmlkZSAqL1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdtZXNoJztcbiAgICAvKipcbiAgICAgKiBTZXQgbWF0ZXJpYWwgdG8gcmVuZGVyIHRoZSBtZXNoIHdpdGguXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWF0ZXJpYWwgTWF0ZXJpYWwgdG8gcmVuZGVyIHRoZSBtZXNoIHdpdGguXG4gICAgICovXG4gICAgc2V0IG1hdGVyaWFsKG1hdGVyaWFsKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9tZXNoX2NvbXBvbmVudF9zZXRfbWF0ZXJpYWwodGhpcy5faWQsIG1hdGVyaWFsID8gbWF0ZXJpYWwuX2luZGV4IDogMCk7XG4gICAgfVxuICAgIC8qKiBNYXRlcmlhbCB1c2VkIHRvIHJlbmRlciB0aGUgbWVzaC4gKi9cbiAgICBnZXQgbWF0ZXJpYWwoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5fZW5naW5lLndhc20uX3dsX21lc2hfY29tcG9uZW50X2dldF9tYXRlcmlhbCh0aGlzLl9pZCk7XG4gICAgICAgIHJldHVybiBpZCA+IDAgPyBuZXcgTWF0ZXJpYWwodGhpcy5fZW5naW5lLCBpZCkgOiBudWxsO1xuICAgIH1cbiAgICAvKiogTWVzaCByZW5kZXJlZCBieSB0aGlzIGNvbXBvbmVudC4gKi9cbiAgICBnZXQgbWVzaCgpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbWVzaF9jb21wb25lbnRfZ2V0X21lc2godGhpcy5faWQpO1xuICAgICAgICByZXR1cm4gaWQgPiAwID8gbmV3IE1lc2godGhpcy5fZW5naW5lLCBpZCkgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbWVzaCB0byByZW5kZXJlZCB3aXRoIHRoaXMgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG1lc2ggTWVzaCByZW5kZXJlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBzZXQgbWVzaChtZXNoKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9tZXNoX2NvbXBvbmVudF9zZXRfbWVzaCh0aGlzLl9pZCwgbWVzaCA/IG1lc2guX2luZGV4IDogMCk7XG4gICAgfVxuICAgIC8qKiBTa2luIGZvciB0aGlzIG1lc2ggY29tcG9uZW50LiAqL1xuICAgIGdldCBza2luKCkge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuX2VuZ2luZS53YXNtLl93bF9tZXNoX2NvbXBvbmVudF9nZXRfc2tpbih0aGlzLl9pZCk7XG4gICAgICAgIHJldHVybiBpZCA+IDAgPyBuZXcgU2tpbih0aGlzLl9lbmdpbmUsIGlkKSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBza2luIHRvIHRyYW5zZm9ybSB0aGlzIG1lc2ggY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHNraW4gU2tpbiB0byB1c2UgZm9yIHJlbmRlcmluZyBza2lubmVkIG1lc2hlcy5cbiAgICAgKi9cbiAgICBzZXQgc2tpbihza2luKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9tZXNoX2NvbXBvbmVudF9zZXRfc2tpbih0aGlzLl9pZCwgc2tpbiA/IHNraW4uX2luZGV4IDogMCk7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgTWVzaENvbXBvbmVudC5wcm90b3R5cGUsIFwibWF0ZXJpYWxcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBNZXNoQ29tcG9uZW50LnByb3RvdHlwZSwgXCJtZXNoXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgTWVzaENvbXBvbmVudC5wcm90b3R5cGUsIFwic2tpblwiLCBudWxsKTtcbi8qKlxuICogRW51bSBmb3IgUGh5c2ljcyBheGVzIGxvY2tpbmdcbiAqXG4gKiBTZWUge0BsaW5rIFBoeXNYQ29tcG9uZW50LmFuZ3VsYXJMb2NrQXhpc30gYW5kIHtAbGluayBQaHlzWENvbXBvbmVudC5saW5lYXJMb2NrQXhpc30uXG4gKi9cbmV4cG9ydCB2YXIgTG9ja0F4aXM7XG4oZnVuY3Rpb24gKExvY2tBeGlzKSB7XG4gICAgLyoqXG4gICAgICogTm8gYXhpcyBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBMb2NrQXhpc1tMb2NrQXhpc1tcIk5vbmVcIl0gPSAwXSA9IFwiTm9uZVwiO1xuICAgIC8qKlxuICAgICAqICoqWCBheGlzKio6XG4gICAgICovXG4gICAgTG9ja0F4aXNbTG9ja0F4aXNbXCJYXCJdID0gMV0gPSBcIlhcIjtcbiAgICAvKipcbiAgICAgKiAqKlkgYXhpcyoqOlxuICAgICAqL1xuICAgIExvY2tBeGlzW0xvY2tBeGlzW1wiWVwiXSA9IDJdID0gXCJZXCI7XG4gICAgLyoqXG4gICAgICogKipaIGF4aXMqKjpcbiAgICAgKi9cbiAgICBMb2NrQXhpc1tMb2NrQXhpc1tcIlpcIl0gPSA0XSA9IFwiWlwiO1xufSkoTG9ja0F4aXMgfHwgKExvY2tBeGlzID0ge30pKTtcbi8qKlxuICogTmF0aXZlIHBoeXN4IHJpZ2lkIGJvZHkgY29tcG9uZW50LlxuICpcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byBhIG5hdGl2ZSBtZXNoIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAqIE9ubHkgYXZhaWxhYmxlIHdoZW4gdXNpbmcgcGh5c3ggZW5hYmxlZCBydW50aW1lLCBzZWUgXCJQcm9qZWN0IFNldHRpbmdzID4gUnVudGltZVwiLlxuICovXG5leHBvcnQgY2xhc3MgUGh5c1hDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAncGh5c3gnO1xuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRoaXMgcmlnaWQgYm9keSBpcyBzdGF0aWMuXG4gICAgICpcbiAgICAgKiBTZXR0aW5nIHRoaXMgcHJvcGVydHkgb25seSB0YWtlcyBlZmZlY3Qgb25jZSB0aGUgY29tcG9uZW50XG4gICAgICogc3dpdGNoZXMgZnJvbSBpbmFjdGl2ZSB0byBhY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYiBXaGV0aGVyIHRoZSByaWdpZCBib2R5IHNob3VsZCBiZSBzdGF0aWMuXG4gICAgICovXG4gICAgc2V0IHN0YXRpYyhiKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X3N0YXRpYyh0aGlzLl9pZCwgYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhpcyByaWdpZCBib2R5IGlzIHN0YXRpYy5cbiAgICAgKlxuICAgICAqIFRoaXMgcHJvcGVydHkgcmV0dXJucyB3aGV0aGVyIHRoZSByaWdpZCBib2R5IGlzICplZmZlY3RpdmVseSpcbiAgICAgKiBzdGF0aWMuIElmIHN0YXRpYyBwcm9wZXJ0eSB3YXMgc2V0IHdoaWxlIHRoZSByaWdpZCBib2R5IHdhc1xuICAgICAqIGFjdGl2ZSwgaXQgd2lsbCBub3QgdGFrZSBlZmZlY3QgdW50aWwgdGhlIHJpZ2lkIGJvZHkgaXMgc2V0XG4gICAgICogaW5hY3RpdmUgYW5kIGFjdGl2ZSBhZ2Fpbi4gVW50aWwgdGhlIGNvbXBvbmVudCBpcyBzZXQgaW5hY3RpdmUsXG4gICAgICogdGhpcyBnZXR0ZXIgd2lsbCByZXR1cm4gd2hldGhlciB0aGUgcmlnaWQgYm9keSBpcyBhY3R1YWxseVxuICAgICAqIHN0YXRpYy5cbiAgICAgKi9cbiAgICBnZXQgc3RhdGljKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9zdGF0aWModGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgd2hldGhlciB0aGlzIHJpZ2lkIGJvZHkgaXMga2luZW1hdGljLlxuICAgICAqXG4gICAgICogQHBhcmFtIGIgV2hldGhlciB0aGUgcmlnaWQgYm9keSBzaG91bGQgYmUga2luZW1hdGljLlxuICAgICAqL1xuICAgIHNldCBraW5lbWF0aWMoYikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9raW5lbWF0aWModGhpcy5faWQsIGIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoaXMgcmlnaWQgYm9keSBpcyBraW5lbWF0aWMuXG4gICAgICovXG4gICAgZ2V0IGtpbmVtYXRpYygpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfa2luZW1hdGljKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHdoZXRoZXIgdGhpcyByaWdpZCBib2R5J3MgZ3Jhdml0eSBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGIgV2hldGhlciB0aGUgcmlnaWQgYm9keSdzIGdyYXZpdHkgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAgICovXG4gICAgc2V0IGdyYXZpdHkoYikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9ncmF2aXR5KHRoaXMuX2lkLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHJpZ2lkIGJvZHkncyBncmF2aXR5IGZsYWcgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBnZXQgZ3Jhdml0eSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfZ3Jhdml0eSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRoaXMgcmlnaWQgYm9keSdzIHNpbXVsYXRlIGZsYWcgaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBiIFdoZXRoZXIgdGhlIHJpZ2lkIGJvZHkncyBzaW11bGF0ZSBmbGFnIHNob3VsZCBiZSBlbmFibGVkLlxuICAgICAqL1xuICAgIHNldCBzaW11bGF0ZShiKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X3NpbXVsYXRlKHRoaXMuX2lkLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHJpZ2lkIGJvZHkncyBzaW11bGF0ZSBmbGFnIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgZ2V0IHNpbXVsYXRlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9zaW11bGF0ZSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRvIGFsbG93IHNpbXVsYXRpb24gb2YgdGhpcyByaWdpZCBib2R5LlxuICAgICAqXG4gICAgICoge0BsaW5rIGFsbG93U2ltdWxhdGlvbn0gYW5kIHtAbGluayB0cmlnZ2VyfSBjYW4gbm90IGJlIGVuYWJsZWQgYXQgdGhlXG4gICAgICogc2FtZSB0aW1lLiBFbmFibGluZyB7QGxpbmsgYWxsb3dTaW11bGF0aW9ufSB3aGlsZSB7QGxpbmsgdHJpZ2dlcn0gaXMgZW5hYmxlZFxuICAgICAqIHdpbGwgZGlzYWJsZSB7QGxpbmsgdHJpZ2dlcn0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYiBXaGV0aGVyIHRvIGFsbG93IHNpbXVsYXRpb24gb2YgdGhpcyByaWdpZCBib2R5LlxuICAgICAqL1xuICAgIHNldCBhbGxvd1NpbXVsYXRpb24oYikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9hbGxvd1NpbXVsYXRpb24odGhpcy5faWQsIGIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGFsbG93IHNpbXVsYXRpb24gb2YgdGhpcyByaWdpZCBib2R5LlxuICAgICAqL1xuICAgIGdldCBhbGxvd1NpbXVsYXRpb24oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfZ2V0X2FsbG93U2ltdWxhdGlvbih0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCB3aGV0aGVyIHRoaXMgcmlnaWQgYm9keSBtYXkgYmUgcXVlcmllZCBpbiByYXkgY2FzdHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYiBXaGV0aGVyIHRoaXMgcmlnaWQgYm9keSBtYXkgYmUgcXVlcmllZCBpbiByYXkgY2FzdHMuXG4gICAgICovXG4gICAgc2V0IGFsbG93UXVlcnkoYikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9hbGxvd1F1ZXJ5KHRoaXMuX2lkLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHJpZ2lkIGJvZHkgbWF5IGJlIHF1ZXJpZWQgaW4gcmF5IGNhc3RzLlxuICAgICAqL1xuICAgIGdldCBhbGxvd1F1ZXJ5KCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9hbGxvd1F1ZXJ5KHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHdoZXRoZXIgdGhpcyBwaHlzaWNzIGJvZHkgaXMgYSB0cmlnZ2VyLlxuICAgICAqXG4gICAgICoge0BsaW5rIGFsbG93U2ltdWxhdGlvbn0gYW5kIHtAbGluayB0cmlnZ2VyfSBjYW4gbm90IGJlIGVuYWJsZWQgYXQgdGhlXG4gICAgICogc2FtZSB0aW1lLiBFbmFibGluZyB0cmlnZ2VyIHdoaWxlIHtAbGluayBhbGxvd1NpbXVsYXRpb259IGlzIGVuYWJsZWQsXG4gICAgICogd2lsbCBkaXNhYmxlIHtAbGluayBhbGxvd1NpbXVsYXRpb259LlxuICAgICAqXG4gICAgICogQHBhcmFtIGIgV2hldGhlciB0aGlzIHBoeXNpY3MgYm9keSBpcyBhIHRyaWdnZXIuXG4gICAgICovXG4gICAgc2V0IHRyaWdnZXIoYikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF90cmlnZ2VyKHRoaXMuX2lkLCBiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIHBoeXNpY3MgYm9keSBpcyBhIHRyaWdnZXIuXG4gICAgICovXG4gICAgZ2V0IHRyaWdnZXIoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfZ2V0X3RyaWdnZXIodGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNoYXBlIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHMgTmV3IHNoYXBlLlxuICAgICAqIEBzaW5jZSAwLjguNVxuICAgICAqL1xuICAgIHNldCBzaGFwZShzKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X3NoYXBlKHRoaXMuX2lkLCBzKTtcbiAgICB9XG4gICAgLyoqIFRoZSBzaGFwZSBmb3IgY29sbGlzaW9uIGRldGVjdGlvbi4gKi9cbiAgICBnZXQgc2hhcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9zaGFwZSh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBhZGRpdGlvbmFsIGRhdGEgZm9yIHRoZSBzaGFwZS5cbiAgICAgKlxuICAgICAqIFJldHJpZXZlZCBvbmx5IGZyb20ge0BsaW5rIFBoeXNYQ29tcG9uZW50I3NoYXBlRGF0YX0uXG4gICAgICogQHNpbmNlIDAuOC4xMFxuICAgICAqL1xuICAgIHNldCBzaGFwZURhdGEoZCkge1xuICAgICAgICBpZiAoZCA9PSBudWxsIHx8ICFpc01lc2hTaGFwZSh0aGlzLnNoYXBlKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfc2hhcGVfZGF0YSh0aGlzLl9pZCwgZC5pbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZGl0aW9uYWwgZGF0YSBmb3IgdGhlIHNoYXBlLlxuICAgICAqXG4gICAgICogYG51bGxgIGZvciB7QGxpbmsgU2hhcGV9IHZhbHVlczogYE5vbmVgLCBgU3BoZXJlYCwgYENhcHN1bGVgLCBgQm94YCwgYFBsYW5lYC5cbiAgICAgKiBge2luZGV4OiBufWAgZm9yIGBUcmlhbmdsZU1lc2hgIGFuZCBgQ29udmV4SHVsbGAuXG4gICAgICpcbiAgICAgKiBUaGlzIGRhdGEgaXMgY3VycmVudGx5IG9ubHkgZm9yIHBhc3Npbmcgb250byBvciBjcmVhdGluZyBvdGhlciB7QGxpbmsgUGh5c1hDb21wb25lbnR9LlxuICAgICAqIEBzaW5jZSAwLjguMTBcbiAgICAgKi9cbiAgICBnZXQgc2hhcGVEYXRhKCkge1xuICAgICAgICBpZiAoIWlzTWVzaFNoYXBlKHRoaXMuc2hhcGUpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB7IGluZGV4OiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9zaGFwZV9kYXRhKHRoaXMuX2lkKSB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNoYXBlIGV4dGVudHMgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZSBOZXcgZXh0ZW50cyBmb3IgdGhlIHNoYXBlLlxuICAgICAqIEBzaW5jZSAwLjguNVxuICAgICAqL1xuICAgIHNldCBleHRlbnRzKGUpIHtcbiAgICAgICAgdGhpcy5leHRlbnRzLnNldChlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHNoYXBlIGV4dGVudHMgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGV4dGVudHMoKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgcHRyID0gd2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9leHRlbnRzKHRoaXMuX2lkKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkod2FzbS5IRUFQRjMyLmJ1ZmZlciwgcHRyLCAzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHN0YXRpY0ZyaWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBzdGF0aWNGcmljdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfZ2V0X3N0YXRpY0ZyaWN0aW9uKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHN0YXRpY0ZyaWN0aW9uLlxuICAgICAqIEBwYXJhbSB2IE5ldyBzdGF0aWNGcmljdGlvbi5cbiAgICAgKi9cbiAgICBzZXQgc3RhdGljRnJpY3Rpb24odikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9zdGF0aWNGcmljdGlvbih0aGlzLl9pZCwgdik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBkeW5hbWljRnJpY3Rpb24uXG4gICAgICovXG4gICAgZ2V0IGR5bmFtaWNGcmljdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfZ2V0X2R5bmFtaWNGcmljdGlvbih0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBkeW5hbWljRnJpY3Rpb25cbiAgICAgKiBAcGFyYW0gdiBOZXcgZHluYW1pY0RhbXBpbmcuXG4gICAgICovXG4gICAgc2V0IGR5bmFtaWNGcmljdGlvbih2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X2R5bmFtaWNGcmljdGlvbih0aGlzLl9pZCwgdik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBib3VuY2luZXNzLlxuICAgICAqIEBzaW5jZSAwLjkuMFxuICAgICAqL1xuICAgIGdldCBib3VuY2luZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYm91bmNpbmVzcyh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBib3VuY2luZXNzLlxuICAgICAqIEBwYXJhbSB2IE5ldyBib3VuY2luZXNzLlxuICAgICAqIEBzaW5jZSAwLjkuMFxuICAgICAqL1xuICAgIHNldCBib3VuY2luZXNzKHYpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfYm91bmNpbmVzcyh0aGlzLl9pZCwgdik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBsaW5lYXJEYW1waW5nL1xuICAgICAqL1xuICAgIGdldCBsaW5lYXJEYW1waW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfbGluZWFyRGFtcGluZyh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBsaW5lYXJEYW1waW5nLlxuICAgICAqIEBwYXJhbSB2IE5ldyBsaW5lYXJEYW1waW5nLlxuICAgICAqL1xuICAgIHNldCBsaW5lYXJEYW1waW5nKHYpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfbGluZWFyRGFtcGluZyh0aGlzLl9pZCwgdik7XG4gICAgfVxuICAgIC8qKiBHZXQgYW5ndWxhckRhbXBpbmcuICovXG4gICAgZ2V0IGFuZ3VsYXJEYW1waW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYW5ndWxhckRhbXBpbmcodGhpcy5faWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYW5ndWxhckRhbXBpbmcuXG4gICAgICogQHBhcmFtIHYgTmV3IGFuZ3VsYXJEYW1waW5nLlxuICAgICAqL1xuICAgIHNldCBhbmd1bGFyRGFtcGluZyh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X2FuZ3VsYXJEYW1waW5nKHRoaXMuX2lkLCB2KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGxpbmVhciB2ZWxvY2l0eS5cbiAgICAgKlxuICAgICAqIFtQaHlzWCBNYW51YWwgLSBcIlZlbG9jaXR5XCJdKGh0dHBzOi8vZ2FtZXdvcmtzZG9jcy5udmlkaWEuY29tL1BoeXNYLzQuMS9kb2N1bWVudGF0aW9uL3BoeXN4Z3VpZGUvTWFudWFsL1JpZ2lkQm9keUR5bmFtaWNzLmh0bWwjdmVsb2NpdHkpXG4gICAgICpcbiAgICAgKiBIYXMgbm8gZWZmZWN0LCBpZiB0aGUgY29tcG9uZW50IGlzIG5vdCBhY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgbGluZWFyIHZlbG9jaXR5LlxuICAgICAqL1xuICAgIHNldCBsaW5lYXJWZWxvY2l0eSh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X2xpbmVhclZlbG9jaXR5KHRoaXMuX2lkLCB2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICB9XG4gICAgLyoqIExpbmVhciB2ZWxvY2l0eSBvciBgWzAsIDAsIDBdYCBpZiB0aGUgY29tcG9uZW50IGlzIG5vdCBhY3RpdmUuICovXG4gICAgZ2V0IGxpbmVhclZlbG9jaXR5KCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIHdhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfbGluZWFyVmVsb2NpdHkodGhpcy5faWQsIHdhc20uX3RlbXBNZW0pO1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh3YXNtLkhFQVBGMzIuYnVmZmVyLCB3YXNtLl90ZW1wTWVtLCAzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGFuZ3VsYXIgdmVsb2NpdHlcbiAgICAgKlxuICAgICAqIFtQaHlzWCBNYW51YWwgLSBcIlZlbG9jaXR5XCJdKGh0dHBzOi8vZ2FtZXdvcmtzZG9jcy5udmlkaWEuY29tL1BoeXNYLzQuMS9kb2N1bWVudGF0aW9uL3BoeXN4Z3VpZGUvTWFudWFsL1JpZ2lkQm9keUR5bmFtaWNzLmh0bWwjdmVsb2NpdHkpXG4gICAgICpcbiAgICAgKiBIYXMgbm8gZWZmZWN0LCBpZiB0aGUgY29tcG9uZW50IGlzIG5vdCBhY3RpdmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgYW5ndWxhciB2ZWxvY2l0eVxuICAgICAqL1xuICAgIHNldCBhbmd1bGFyVmVsb2NpdHkodikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9hbmd1bGFyVmVsb2NpdHkodGhpcy5faWQsIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgIH1cbiAgICAvKiogQW5ndWxhciB2ZWxvY2l0eSBvciBgWzAsIDAsIDBdYCBpZiB0aGUgY29tcG9uZW50IGlzIG5vdCBhY3RpdmUuICovXG4gICAgZ2V0IGFuZ3VsYXJWZWxvY2l0eSgpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl93bF9waHlzeF9jb21wb25lbnRfZ2V0X2FuZ3VsYXJWZWxvY2l0eSh0aGlzLl9pZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHdhc20uSEVBUEYzMi5idWZmZXIsIHdhc20uX3RlbXBNZW0sIDMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbXBvbmVudHMgZ3JvdXBzIG1hc2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmxhZ3MgTmV3IGZsYWdzIHRoYXQgbmVlZCB0byBiZSBzZXQuXG4gICAgICovXG4gICAgc2V0IGdyb3Vwc01hc2soZmxhZ3MpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfZ3JvdXBzTWFzayh0aGlzLl9pZCwgZmxhZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbXBvbmVudHMgZ3JvdXBzIG1hc2sgZmxhZ3MuXG4gICAgICpcbiAgICAgKiBFYWNoIGJpdCByZXByZXNlbnRzIG1lbWJlcnNoaXAgdG8gZ3JvdXAsIHNlZSBleGFtcGxlLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBBc3NpZ24gYyB0byBncm91cCAyXG4gICAgICogYy5ncm91cHNNYXNrID0gKDEgPDwgMik7XG4gICAgICpcbiAgICAgKiAvLyBBc3NpZ24gYyB0byBncm91cCAwXG4gICAgICogYy5ncm91cHNNYXNrICA9ICgxIDw8IDApO1xuICAgICAqXG4gICAgICogLy8gQXNzaWduIGMgdG8gZ3JvdXAgMCBhbmQgMlxuICAgICAqIGMuZ3JvdXBzTWFzayA9ICgxIDw8IDApIHwgKDEgPDwgMik7XG4gICAgICpcbiAgICAgKiAoYy5ncm91cHNNYXNrICYgKDEgPDwgMikpICE9IDA7IC8vIHRydWVcbiAgICAgKiAoYy5ncm91cHNNYXNrICYgKDEgPDwgNykpICE9IDA7IC8vIGZhbHNlXG4gICAgICogYGBgXG4gICAgICovXG4gICAgZ2V0IGdyb3Vwc01hc2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2dldF9ncm91cHNNYXNrKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjb21wb25lbnRzIGJsb2NrcyBtYXNrLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZsYWdzIE5ldyBmbGFncyB0aGF0IG5lZWQgdG8gYmUgc2V0LlxuICAgICAqL1xuICAgIHNldCBibG9ja3NNYXNrKGZsYWdzKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X2Jsb2Nrc01hc2sodGhpcy5faWQsIGZsYWdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjb21wb25lbnRzIGJsb2NrcyBtYXNrIGZsYWdzLlxuICAgICAqXG4gICAgICogRWFjaCBiaXQgcmVwcmVzZW50cyBtZW1iZXJzaGlwIHRvIHRoZSBibG9jaywgc2VlIGV4YW1wbGUuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIC8vIEJsb2NrIG92ZXJsYXAgd2l0aCBhbnkgb2JqZWN0cyBpbiBncm91cCAyXG4gICAgICogYy5ibG9ja3NNYXNrID0gKDEgPDwgMik7XG4gICAgICpcbiAgICAgKiAvLyBCbG9jayBvdmVybGFwIHdpdGggYW55IG9iamVjdHMgaW4gZ3JvdXAgMFxuICAgICAqIGMuYmxvY2tzTWFzayAgPSAoMSA8PCAwKVxuICAgICAqXG4gICAgICogLy8gQmxvY2sgb3ZlcmxhcCB3aXRoIGFueSBvYmplY3RzIGluIGdyb3VwIDAgYW5kIDJcbiAgICAgKiBjLmJsb2Nrc01hc2sgPSAoMSA8PCAwKSB8ICgxIDw8IDIpO1xuICAgICAqXG4gICAgICogKGMuYmxvY2tzTWFzayAmICgxIDw8IDIpKSAhPSAwOyAvLyB0cnVlXG4gICAgICogKGMuYmxvY2tzTWFzayAmICgxIDw8IDcpKSAhPSAwOyAvLyBmYWxzZVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCBibG9ja3NNYXNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYmxvY2tzTWFzayh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBheGVzIHRvIGxvY2sgZm9yIGxpbmVhciB2ZWxvY2l0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsb2NrIFRoZSBBeGlzIHRoYXQgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAqXG4gICAgICogQ29tYmluZSBmbGFncyB3aXRoIEJpdHdpc2UgT1IuXG4gICAgICogYGBganNcbiAgICAgKiBib2R5LmxpbmVhckxvY2tBeGlzID0gTG9ja0F4aXMuWCB8IExvY2tBeGlzLlk7IC8vIHggYW5kIHkgc2V0XG4gICAgICogYm9keS5saW5lYXJMb2NrQXhpcyA9IExvY2tBeGlzLlg7IC8vIHkgdW5zZXRcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgaGFzIG5vIGVmZmVjdCBpZiB0aGUgY29tcG9uZW50IGlzIHN0YXRpYy5cbiAgICAgKi9cbiAgICBzZXQgbGluZWFyTG9ja0F4aXMobG9jaykge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9saW5lYXJMb2NrQXhpcyh0aGlzLl9pZCwgbG9jayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbGluZWFyIGxvY2sgYXhlcyBmbGFncy5cbiAgICAgKlxuICAgICAqIFRvIGdldCB0aGUgc3RhdGUgb2YgYSBzcGVjaWZpYyBmbGFnLCBCaXR3aXNlIEFORCB3aXRoIHRoZSBMb2NrQXhpcyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGlmKGJvZHkubGluZWFyTG9ja0F4aXMgJiBMb2NrQXhpcy5ZKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKFwiVGhlIFkgZmxhZyB3YXMgc2V0IVwiKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGF4ZXMgdGhhdCBhcmUgY3VycmVudGx5IGxvY2tlZCBmb3IgbGluZWFyIG1vdmVtZW50LlxuICAgICAqL1xuICAgIGdldCBsaW5lYXJMb2NrQXhpcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfZ2V0X2xpbmVhckxvY2tBeGlzKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGF4ZXMgdG8gbG9jayBmb3IgYW5ndWxhciB2ZWxvY2l0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsb2NrIFRoZSBBeGlzIHRoYXQgbmVlZHMgdG8gYmUgc2V0LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBib2R5LmFuZ3VsYXJMb2NrQXhpcyA9IExvY2tBeGlzLlggfCBMb2NrQXhpcy5ZOyAvLyB4IGFuZCB5IHNldFxuICAgICAqIGJvZHkuYW5ndWxhckxvY2tBeGlzID0gTG9ja0F4aXMuWDsgLy8geSB1bnNldFxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQG5vdGUgVGhpcyBoYXMgbm8gZWZmZWN0IGlmIHRoZSBjb21wb25lbnQgaXMgc3RhdGljLlxuICAgICAqL1xuICAgIHNldCBhbmd1bGFyTG9ja0F4aXMobG9jaykge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X3NldF9hbmd1bGFyTG9ja0F4aXModGhpcy5faWQsIGxvY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFuZ3VsYXIgbG9jayBheGVzIGZsYWdzLlxuICAgICAqXG4gICAgICogVG8gZ2V0IHRoZSBzdGF0ZSBvZiBhIHNwZWNpZmljIGZsYWcsIEJpdHdpc2UgQU5EIHdpdGggdGhlIExvY2tBeGlzIG5lZWRlZC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaWYoYm9keS5hbmd1bGFyTG9ja0F4aXMgJiBMb2NrQXhpcy5ZKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKFwiVGhlIFkgZmxhZyB3YXMgc2V0IVwiKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGF4ZXMgdGhhdCBhcmUgY3VycmVudGx5IGxvY2tlZCBmb3IgYW5ndWxhciBtb3ZlbWVudC5cbiAgICAgKi9cbiAgICBnZXQgYW5ndWxhckxvY2tBeGlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYW5ndWxhckxvY2tBeGlzKHRoaXMuX2lkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IG1hc3MuXG4gICAgICpcbiAgICAgKiBbUGh5c1ggTWFudWFsIC0gXCJNYXNzIFByb3BlcnRpZXNcIl0oaHR0cHM6Ly9nYW1ld29ya3Nkb2NzLm52aWRpYS5jb20vUGh5c1gvNC4xL2RvY3VtZW50YXRpb24vcGh5c3hndWlkZS9NYW51YWwvUmlnaWRCb2R5RHluYW1pY3MuaHRtbCNtYXNzLXByb3BlcnRpZXMpXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbSBOZXcgbWFzcy5cbiAgICAgKi9cbiAgICBzZXQgbWFzcyhtKSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X21hc3ModGhpcy5faWQsIG0pO1xuICAgIH1cbiAgICAvKiogTWFzcyAqL1xuICAgIGdldCBtYXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfbWFzcyh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBtYXNzIHNwYWNlIGludGVyaWEgdGVuc29yLlxuICAgICAqXG4gICAgICogW1BoeXNYIE1hbnVhbCAtIFwiTWFzcyBQcm9wZXJ0aWVzXCJdKGh0dHBzOi8vZ2FtZXdvcmtzZG9jcy5udmlkaWEuY29tL1BoeXNYLzQuMS9kb2N1bWVudGF0aW9uL3BoeXN4Z3VpZGUvTWFudWFsL1JpZ2lkQm9keUR5bmFtaWNzLmh0bWwjbWFzcy1wcm9wZXJ0aWVzKVxuICAgICAqXG4gICAgICogSGFzIG5vIGVmZmVjdCwgaWYgdGhlIGNvbXBvbmVudCBpcyBub3QgYWN0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHYgTmV3IG1hc3Mgc3BhY2UgaW50ZXJhdGlhIHRlbnNvci5cbiAgICAgKi9cbiAgICBzZXQgbWFzc1NwYWNlSW50ZXJpYVRlbnNvcih2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfc2V0X21hc3NTcGFjZUluZXJ0aWFUZW5zb3IodGhpcy5faWQsIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHBseSBhIGZvcmNlLlxuICAgICAqXG4gICAgICogW1BoeXNYIE1hbnVhbCAtIFwiQXBwbHlpbmcgRm9yY2VzIGFuZCBUb3JxdWVzXCJdKGh0dHBzOi8vZ2FtZXdvcmtzZG9jcy5udmlkaWEuY29tL1BoeXNYLzQuMS9kb2N1bWVudGF0aW9uL3BoeXN4Z3VpZGUvTWFudWFsL1JpZ2lkQm9keUR5bmFtaWNzLmh0bWwjYXBwbHlpbmctZm9yY2VzLWFuZC10b3JxdWVzKVxuICAgICAqXG4gICAgICogSGFzIG5vIGVmZmVjdCwgaWYgdGhlIGNvbXBvbmVudCBpcyBub3QgYWN0aXZlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGYgRm9yY2UgdmVjdG9yLlxuICAgICAqIEBwYXJhbSBtIEZvcmNlIG1vZGUsIHNlZSB7QGxpbmsgRm9yY2VNb2RlfSwgZGVmYXVsdCBgRm9yY2VgLlxuICAgICAqIEBwYXJhbSBsb2NhbEZvcmNlIFdoZXRoZXIgdGhlIGZvcmNlIHZlY3RvciBpcyBpbiBsb2NhbCBzcGFjZSwgZGVmYXVsdCBgZmFsc2VgLlxuICAgICAqIEBwYXJhbSBwIFBvc2l0aW9uIHRvIGFwcGx5IGZvcmNlIGF0LCBkZWZhdWx0IGlzIGNlbnRlciBvZiBtYXNzLlxuICAgICAqIEBwYXJhbSBsb2NhbCBXaGV0aGVyIHBvc2l0aW9uIGlzIGluIGxvY2FsIHNwYWNlLCBkZWZhdWx0IGBmYWxzZWAuXG4gICAgICovXG4gICAgYWRkRm9yY2UoZiwgbSA9IEZvcmNlTW9kZS5Gb3JjZSwgbG9jYWxGb3JjZSA9IGZhbHNlLCBwLCBsb2NhbCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgICB3YXNtLl93bF9waHlzeF9jb21wb25lbnRfYWRkRm9yY2UodGhpcy5faWQsIGZbMF0sIGZbMV0sIGZbMl0sIG0sIGxvY2FsRm9yY2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9hZGRGb3JjZUF0KHRoaXMuX2lkLCBmWzBdLCBmWzFdLCBmWzJdLCBtLCBsb2NhbEZvcmNlLCBwWzBdLCBwWzFdLCBwWzJdLCBsb2NhbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRvcnF1ZS5cbiAgICAgKlxuICAgICAqIFtQaHlzWCBNYW51YWwgLSBcIkFwcGx5aW5nIEZvcmNlcyBhbmQgVG9ycXVlc1wiXShodHRwczovL2dhbWV3b3Jrc2RvY3MubnZpZGlhLmNvbS9QaHlzWC80LjEvZG9jdW1lbnRhdGlvbi9waHlzeGd1aWRlL01hbnVhbC9SaWdpZEJvZHlEeW5hbWljcy5odG1sI2FwcGx5aW5nLWZvcmNlcy1hbmQtdG9ycXVlcylcbiAgICAgKlxuICAgICAqIEhhcyBubyBlZmZlY3QsIGlmIHRoZSBjb21wb25lbnQgaXMgbm90IGFjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmIEZvcmNlIHZlY3Rvci5cbiAgICAgKiBAcGFyYW0gbSBGb3JjZSBtb2RlLCBzZWUge0BsaW5rIEZvcmNlTW9kZX0sIGRlZmF1bHQgYEZvcmNlYC5cbiAgICAgKi9cbiAgICBhZGRUb3JxdWUoZiwgbSA9IEZvcmNlTW9kZS5Gb3JjZSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfY29tcG9uZW50X2FkZFRvcnF1ZSh0aGlzLl9pZCwgZlswXSwgZlsxXSwgZlsyXSwgbSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBvbiBjb2xsaXNpb24gY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoaXMgcmlnaWQgYm9keSAodW4pY29sbGlkZXMgd2l0aCBhbnkgb3RoZXIuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICBsZXQgcmlnaWRCb2R5ID0gdGhpcy5vYmplY3QuZ2V0Q29tcG9uZW50KCdwaHlzeCcpO1xuICAgICAqICByaWdpZEJvZHkub25Db2xsaXNpb24oZnVuY3Rpb24odHlwZSwgb3RoZXIpIHtcbiAgICAgKiAgICAgIC8vIElnbm9yZSB1bmNvbGxpZGVzXG4gICAgICogICAgICBpZih0eXBlID09IENvbGxpc2lvbkV2ZW50VHlwZS5Ub3VjaExvc3QpIHJldHVybjtcbiAgICAgKlxuICAgICAqICAgICAgLy8gVGFrZSBkYW1hZ2Ugb24gY29sbGlzaW9uIHdpdGggZW5lbWllc1xuICAgICAqICAgICAgaWYob3RoZXIub2JqZWN0Lm5hbWUuc3RhcnRzV2l0aCgnZW5lbXktJykpIHtcbiAgICAgKiAgICAgICAgICB0aGlzLmFwcGx5RGFtYWdlKDEwKTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgfS5iaW5kKHRoaXMpKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIElkIG9mIHRoZSBuZXcgY2FsbGJhY2sgZm9yIHVzZSB3aXRoIHtAbGluayBQaHlzWENvbXBvbmVudCNyZW1vdmVDb2xsaXNpb25DYWxsYmFja30uXG4gICAgICovXG4gICAgb25Db2xsaXNpb24oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25Db2xsaXNpb25XaXRoKHRoaXMsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGZpbHRlcmVkIG9uIGNvbGxpc2lvbiBjYWxsYmFjay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdGhlckNvbXAgQ29tcG9uZW50IGZvciB3aGljaCBjYWxsYmFja3Mgd2lsbFxuICAgICAqICAgICAgICBiZSB0cmlnZ2VyZWQuIElmIHlvdSBwYXNzIHRoaXMgY29tcG9uZW50LCB0aGUgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8uXG4gICAgICogICAgICAgIHtAbGluayBQaHlzWENvbXBvbmVudCNvbkNvbGxpc2lvbn0uXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGlzIHJpZ2lkIGJvZHlcbiAgICAgKiAgICAgICAgKHVuKWNvbGxpZGVzIHdpdGggYG90aGVyQ29tcGAuXG4gICAgICogQHJldHVybnMgSWQgb2YgdGhlIG5ldyBjYWxsYmFjayBmb3IgdXNlIHdpdGgge0BsaW5rIFBoeXNYQ29tcG9uZW50I3JlbW92ZUNvbGxpc2lvbkNhbGxiYWNrfS5cbiAgICAgKi9cbiAgICBvbkNvbGxpc2lvbldpdGgob3RoZXJDb21wLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBwaHlzaWNzID0gdGhpcy5fZW5naW5lLnBoeXNpY3M7XG4gICAgICAgIHBoeXNpY3MuX2NhbGxiYWNrc1t0aGlzLl9pZF0gPSBwaHlzaWNzLl9jYWxsYmFja3NbdGhpcy5faWRdIHx8IFtdO1xuICAgICAgICBwaHlzaWNzLl9jYWxsYmFja3NbdGhpcy5faWRdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX3BoeXN4X2NvbXBvbmVudF9hZGRDYWxsYmFjayh0aGlzLl9pZCwgb3RoZXJDb21wLl9pZCB8fCB0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGNvbGxpc2lvbiBjYWxsYmFjayBhZGRlZCB3aXRoIHtAbGluayBQaHlzWENvbXBvbmVudCNvbkNvbGxpc2lvbn0gb3Ige0BsaW5rIFBoeXNYQ29tcG9uZW50I29uQ29sbGlzaW9uV2l0aH0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tJZCBDYWxsYmFjayBpZCBhcyByZXR1cm5lZCBieSB7QGxpbmsgUGh5c1hDb21wb25lbnQjb25Db2xsaXNpb259IG9yIHtAbGluayBQaHlzWENvbXBvbmVudCNvbkNvbGxpc2lvbldpdGh9LlxuICAgICAqIEB0aHJvd3MgV2hlbiB0aGUgY2FsbGJhY2sgZG9lcyBub3QgYmVsb25nIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICogQHRocm93cyBXaGVuIHRoZSBjYWxsYmFjayBkb2VzIG5vdCBleGlzdC5cbiAgICAgKi9cbiAgICByZW1vdmVDb2xsaXNpb25DYWxsYmFjayhjYWxsYmFja0lkKSB7XG4gICAgICAgIGNvbnN0IHBoeXNpY3MgPSB0aGlzLl9lbmdpbmUucGh5c2ljcztcbiAgICAgICAgY29uc3QgciA9IHRoaXMuX2VuZ2luZS53YXNtLl93bF9waHlzeF9jb21wb25lbnRfcmVtb3ZlQ2FsbGJhY2sodGhpcy5faWQsIGNhbGxiYWNrSWQpO1xuICAgICAgICAvKiByIGlzIHRoZSBhbW91bnQgb2Ygb2JqZWN0IHRvIHJlbW92ZSBmcm9tIHRoZSBlbmQgb2YgdGhlXG4gICAgICAgICAqIGNhbGxiYWNrcyBhcnJheSBmb3IgdGhpcyBvYmplY3QgKi9cbiAgICAgICAgaWYgKHIpXG4gICAgICAgICAgICBwaHlzaWNzLl9jYWxsYmFja3NbdGhpcy5faWRdLnNwbGljZSgtcik7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcInN0YXRpY1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJraW5lbWF0aWNcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwiZ3Jhdml0eVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzaW11bGF0ZVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhbGxvd1NpbXVsYXRpb25cIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwiYWxsb3dRdWVyeVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0cmlnZ2VyXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcInNoYXBlXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcInNoYXBlRGF0YVwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJleHRlbnRzXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcInN0YXRpY0ZyaWN0aW9uXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcImR5bmFtaWNGcmljdGlvblwiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJib3VuY2luZXNzXCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcImxpbmVhckRhbXBpbmdcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwiYW5ndWxhckRhbXBpbmdcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwibGluZWFyVmVsb2NpdHlcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwiYW5ndWxhclZlbG9jaXR5XCIsIG51bGwpO1xuX19kZWNvcmF0ZShbXG4gICAgbmF0aXZlUHJvcGVydHkoKVxuXSwgUGh5c1hDb21wb25lbnQucHJvdG90eXBlLCBcImdyb3Vwc01hc2tcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwiYmxvY2tzTWFza1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJsaW5lYXJMb2NrQXhpc1wiLCBudWxsKTtcbl9fZGVjb3JhdGUoW1xuICAgIG5hdGl2ZVByb3BlcnR5KClcbl0sIFBoeXNYQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhbmd1bGFyTG9ja0F4aXNcIiwgbnVsbCk7XG5fX2RlY29yYXRlKFtcbiAgICBuYXRpdmVQcm9wZXJ0eSgpXG5dLCBQaHlzWENvbXBvbmVudC5wcm90b3R5cGUsIFwibWFzc1wiLCBudWxsKTtcbi8qKlxuICogQWNjZXNzIHRvIHRoZSBwaHlzaWNzIHNjZW5lXG4gKi9cbmV4cG9ydCBjbGFzcyBQaHlzaWNzIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICpcbiAgICAgKiAqKk5vdGUqKjogVGhpcyBpcyBwdWJsaWMgdG8gZW11bGF0ZSBhIGBmcmllbmRgIGFjY2Vzc29yLlxuICAgICAqL1xuICAgIF9jYWxsYmFja3M7XG4gICAgLyoqIFdvbmRlcmxhbmQgRW5naW5lIGluc3RhbmNlICovXG4gICAgX2VuZ2luZTtcbiAgICAvKiogUmF5IEhpdCAqL1xuICAgIF9yYXlIaXQ7XG4gICAgLyoqIEhpdC4gKi9cbiAgICBfaGl0O1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIHRoaXMuX3JheUhpdCA9IGVuZ2luZS53YXNtLl9tYWxsb2MoNCAqICgzICogNCArIDMgKiA0ICsgNCArIDIpICsgNCk7XG4gICAgICAgIHRoaXMuX2hpdCA9IG5ldyBSYXlIaXQodGhpcy5fZW5naW5lLCB0aGlzLl9yYXlIaXQpO1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FzdCBhIHJheSB0aHJvdWdoIHRoZSBwaHlzaWNzIHNjZW5lIGFuZCBmaW5kIGludGVyc2VjdGluZyBvYmplY3RzLlxuICAgICAqXG4gICAgICogVGhlIHJlc3VsdGluZyByYXkgaGl0IHdpbGwgY29udGFpbiAqKnVwIHRvIDQqKiBjbG9zZXN0IHJheSBoaXRzLFxuICAgICAqIHNvcnRlZCBieSBpbmNyZWFzaW5nIGRpc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG8gUmF5IG9yaWdpbi5cbiAgICAgKiBAcGFyYW0gZCBSYXkgZGlyZWN0aW9uLlxuICAgICAqIEBwYXJhbSBncm91cCBDb2xsaXNpb24gZ3JvdXAgdG8gZmlsdGVyIGJ5OiBvbmx5IG9iamVjdHMgdGhhdCBhcmVcbiAgICAgKiAgICAgICAgcGFydCBvZiBnaXZlbiBncm91cCBhcmUgY29uc2lkZXJlZCBmb3IgcmF5Y2FzdC5cbiAgICAgKiBAcGFyYW0gbWF4RGlzdGFuY2UgTWF4aW11bSByYXkgZGlzdGFuY2UsIGRlZmF1bHQgYDEwMC4wYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBSYXlIaXQgaW5zdGFuY2UsIGJlbG9uZ2luZyB0byB0aGlzIGNsYXNzLlxuICAgICAqXG4gICAgICogQG5vdGUgVGhlIHJldHVybmVkIHtAbGluayBSYXlIaXR9IG9iamVjdCBpcyBvd25lZCBieSB0aGUgUGh5c2ljcyBpbnN0YW5jZSBhbmRcbiAgICAgKiAgICAgICB3aWxsIGJlIHJldXNlZCB3aXRoIHRoZSBuZXh0IHtAbGluayBQaHlzaWNzI3JheUNhc3R9IGNhbGwuXG4gICAgICovXG4gICAgcmF5Q2FzdChvLCBkLCBncm91cCwgbWF4RGlzdGFuY2UgPSAxMDAuMCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcGh5c3hfcmF5X2Nhc3Qob1swXSwgb1sxXSwgb1syXSwgZFswXSwgZFsxXSwgZFsyXSwgZ3JvdXAsIG1heERpc3RhbmNlLCB0aGlzLl9yYXlIaXQpO1xuICAgICAgICByZXR1cm4gdGhpcy5faGl0O1xuICAgIH1cbn1cbi8qKlxuICogTWVzaCBpbmRleCB0eXBlLlxuICovXG5leHBvcnQgdmFyIE1lc2hJbmRleFR5cGU7XG4oZnVuY3Rpb24gKE1lc2hJbmRleFR5cGUpIHtcbiAgICAvKiogU2luZ2xlIGJ5dGUgbWVzaCBpbmRleCwgcmFuZ2UgMC0yNTUgKi9cbiAgICBNZXNoSW5kZXhUeXBlW01lc2hJbmRleFR5cGVbXCJVbnNpZ25lZEJ5dGVcIl0gPSAxXSA9IFwiVW5zaWduZWRCeXRlXCI7XG4gICAgLyoqIFR3byBieXRlIG1lc2ggaW5kZXgsIHJhbmdlIDAtNjU1MzUgKi9cbiAgICBNZXNoSW5kZXhUeXBlW01lc2hJbmRleFR5cGVbXCJVbnNpZ25lZFNob3J0XCJdID0gMl0gPSBcIlVuc2lnbmVkU2hvcnRcIjtcbiAgICAvKiogRm91ciBieXRlIG1lc2ggaW5kZXgsIHJhbmdlIDAtNDI5NDk2NzI5NSAqL1xuICAgIE1lc2hJbmRleFR5cGVbTWVzaEluZGV4VHlwZVtcIlVuc2lnbmVkSW50XCJdID0gNF0gPSBcIlVuc2lnbmVkSW50XCI7XG59KShNZXNoSW5kZXhUeXBlIHx8IChNZXNoSW5kZXhUeXBlID0ge30pKTtcbi8qKlxuICogTWVzaCBza2lubmluZyB0eXBlLlxuICovXG5leHBvcnQgdmFyIE1lc2hTa2lubmluZ1R5cGU7XG4oZnVuY3Rpb24gKE1lc2hTa2lubmluZ1R5cGUpIHtcbiAgICAvKiogTm90IHNraW5uZWQgKi9cbiAgICBNZXNoU2tpbm5pbmdUeXBlW01lc2hTa2lubmluZ1R5cGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICAvKiogU2tpbm5lZCwgNCBqb2ludHMvd2VpZ2h0IHBlciB2ZXJ0ZXggKi9cbiAgICBNZXNoU2tpbm5pbmdUeXBlW01lc2hTa2lubmluZ1R5cGVbXCJGb3VySm9pbnRzXCJdID0gMV0gPSBcIkZvdXJKb2ludHNcIjtcbiAgICAvKiogU2tpbm5lZCwgOCBqb2ludHMvd2VpZ2h0IHBlciB2ZXJ0ZXggKi9cbiAgICBNZXNoU2tpbm5pbmdUeXBlW01lc2hTa2lubmluZ1R5cGVbXCJFaWdodEpvaW50c1wiXSA9IDJdID0gXCJFaWdodEpvaW50c1wiO1xufSkoTWVzaFNraW5uaW5nVHlwZSB8fCAoTWVzaFNraW5uaW5nVHlwZSA9IHt9KSk7XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIGEgbmF0aXZlIG1lc2ggZGF0YS5cbiAqXG4gKiBUbyBtb2RpZnkgYSBtZXNoLCB5b3UgZ2V0IGFjY2VzcyB0byBhIHtAbGluayBNZXNoQXR0cmlidXRlQWNjZXNzb3J9IHRoYXQgYWxsb3dzIHlvdSB0byBtb2RpZnlcbiAqIHRoZSBjb250ZW50IG9mIHRoZSBidWZmZXJzOlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBtZXNoID0gbmV3IE1lc2goZW5naW5lLCB7dmVydGV4Q291bnQ6IDMsIGluZGV4RGF0YTogWzAsIDEsIDJdIH0pO1xuICogY29uc3QgcG9zaXRpb25zID0gbWVzaC5hdHRyaWJ1dGUoTWVzaEF0dHJpYnV0ZS5Qb3NpdGlvbik7XG4gKiAuLi5cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgTWVzaCB7XG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIG1lc2ggaW4gdGhlIG1hbmFnZXIuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2luZGV4ID0gLTE7XG4gICAgLyoqIFdvbmRlcmxhbmQgRW5naW5lIGluc3RhbmNlLiBAaGlkZGVuICovXG4gICAgX2VuZ2luZTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1zIEVpdGhlciBhIG1lc2ggaW5kZXggdG8gd3JhcCBvciBzZXQgb2YgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBuZXcgbWVzaC5cbiAgICAgKiAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlIGhhdmUgYSBsb29rIGF0IHRoZSB7QGxpbmsgTWVzaFBhcmFtZXRlcnN9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUsIHBhcmFtcykge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmUgPz8gV0w7XG4gICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgIGlmIChpc051bWJlcihwYXJhbXMpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IHBhcmFtcztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhcmFtcy52ZXJ0ZXhDb3VudClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcGFyYW1ldGVyICd2ZXJ0ZXhDb3VudCdcIik7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgbGV0IGluZGV4RGF0YSA9IDA7XG4gICAgICAgIGxldCBpbmRleFR5cGUgPSAwO1xuICAgICAgICBsZXQgaW5kZXhEYXRhU2l6ZSA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMuaW5kZXhEYXRhKSB7XG4gICAgICAgICAgICBpbmRleFR5cGUgPSBwYXJhbXMuaW5kZXhUeXBlIHx8IE1lc2hJbmRleFR5cGUuVW5zaWduZWRTaG9ydDtcbiAgICAgICAgICAgIGluZGV4RGF0YVNpemUgPSBwYXJhbXMuaW5kZXhEYXRhLmxlbmd0aCAqIGluZGV4VHlwZTtcbiAgICAgICAgICAgIGluZGV4RGF0YSA9IHdhc20uX21hbGxvYyhpbmRleERhdGFTaXplKTtcbiAgICAgICAgICAgIC8qIENvcHkgdGhlIGluZGV4IGRhdGEgaW50byB3YXNtIG1lbW9yeSAqL1xuICAgICAgICAgICAgc3dpdGNoIChpbmRleFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIE1lc2hJbmRleFR5cGUuVW5zaWduZWRCeXRlOlxuICAgICAgICAgICAgICAgICAgICB3YXNtLkhFQVBVOC5zZXQocGFyYW1zLmluZGV4RGF0YSwgaW5kZXhEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBNZXNoSW5kZXhUeXBlLlVuc2lnbmVkU2hvcnQ6XG4gICAgICAgICAgICAgICAgICAgIHdhc20uSEVBUFUxNi5zZXQocGFyYW1zLmluZGV4RGF0YSwgaW5kZXhEYXRhID4+IDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIE1lc2hJbmRleFR5cGUuVW5zaWduZWRJbnQ6XG4gICAgICAgICAgICAgICAgICAgIHdhc20uSEVBUFUzMi5zZXQocGFyYW1zLmluZGV4RGF0YSwgaW5kZXhEYXRhID4+IDIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHNraW5uaW5nVHlwZSA9IE1lc2hTa2lubmluZ1R5cGUuTm9uZSB9ID0gcGFyYW1zO1xuICAgICAgICB0aGlzLl9pbmRleCA9IHdhc20uX3dsX21lc2hfY3JlYXRlKGluZGV4RGF0YSwgaW5kZXhEYXRhU2l6ZSwgaW5kZXhUeXBlLCBwYXJhbXMudmVydGV4Q291bnQsIHNraW5uaW5nVHlwZSk7XG4gICAgfVxuICAgIC8qKiBOdW1iZXIgb2YgdmVydGljZXMgaW4gdGhpcyBtZXNoLiAqL1xuICAgIGdldCB2ZXJ0ZXhDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF9tZXNoX2dldF92ZXJ0ZXhDb3VudCh0aGlzLl9pbmRleCk7XG4gICAgfVxuICAgIC8qKiBJbmRleCBkYXRhIChyZWFkLW9ubHkpIG9yIGBudWxsYCBpZiB0aGUgbWVzaCBpcyBub3QgaW5kZXhlZC4gKi9cbiAgICBnZXQgaW5kZXhEYXRhKCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIGNvbnN0IHRlbXBNZW0gPSB3YXNtLl90ZW1wTWVtO1xuICAgICAgICBjb25zdCBwdHIgPSB3YXNtLl93bF9tZXNoX2dldF9pbmRleERhdGEodGhpcy5faW5kZXgsIHRlbXBNZW0sIHRlbXBNZW0gKyA0KTtcbiAgICAgICAgaWYgKHB0ciA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBpbmRleENvdW50ID0gd2FzbS5IRUFQVTMyW3RlbXBNZW0gLyA0XTtcbiAgICAgICAgY29uc3QgaW5kZXhTaXplID0gd2FzbS5IRUFQVTMyW3RlbXBNZW0gLyA0ICsgMV07XG4gICAgICAgIHN3aXRjaCAoaW5kZXhTaXplKSB7XG4gICAgICAgICAgICBjYXNlIE1lc2hJbmRleFR5cGUuVW5zaWduZWRCeXRlOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh3YXNtLkhFQVBVOC5idWZmZXIsIHB0ciwgaW5kZXhDb3VudCk7XG4gICAgICAgICAgICBjYXNlIE1lc2hJbmRleFR5cGUuVW5zaWduZWRTaG9ydDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KHdhc20uSEVBUFUxNi5idWZmZXIsIHB0ciwgaW5kZXhDb3VudCk7XG4gICAgICAgICAgICBjYXNlIE1lc2hJbmRleFR5cGUuVW5zaWduZWRJbnQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50MzJBcnJheSh3YXNtLkhFQVBVMzIuYnVmZmVyLCBwdHIsIGluZGV4Q291bnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKiogSG9zdGluZyBlbmdpbmUgaW5zdGFuY2UuICovXG4gICAgZ2V0IGVuZ2luZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgY2hhbmdlcyB0byB7QGxpbmsgYXR0cmlidXRlIHwgdmVydGV4IGF0dHJpYnV0ZXN9LlxuICAgICAqXG4gICAgICogVXBsb2FkcyB0aGUgdXBkYXRlZCB2ZXJ0ZXggYXR0cmlidXRlcyB0byB0aGUgR1BVIGFuZCB1cGRhdGVzIHRoZSBib3VuZGluZ1xuICAgICAqIHNwaGVyZSB0byBtYXRjaCB0aGUgbmV3IHZlcnRleCBwb3NpdGlvbnMuXG4gICAgICpcbiAgICAgKiBTaW5jZSB0aGlzIGlzIGFuIGV4cGVuc2l2ZSBvcGVyYXRpb24sIGNhbGwgaXQgb25seSBvbmNlIHlvdSBoYXZlIHBlcmZvcm1lZFxuICAgICAqIGFsbCBtb2RpZmljYXRpb25zIG9uIGEgbWVzaCBhbmQgYXZvaWQgY2FsbGluZyBpZiB5b3UgZGlkIG5vdCBwZXJmb3JtIGFueVxuICAgICAqIG1vZGlmaWNhdGlvbnMgYXQgYWxsLlxuICAgICAqL1xuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX21lc2hfdXBkYXRlKHRoaXMuX2luZGV4KTtcbiAgICB9XG4gICAgZ2V0Qm91bmRpbmdTcGhlcmUob3V0ID0gbmV3IEZsb2F0MzJBcnJheSg0KSkge1xuICAgICAgICBjb25zdCB0ZW1wTWVtRmxvYXQgPSB0aGlzLl9lbmdpbmUud2FzbS5fdGVtcE1lbUZsb2F0O1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbWVzaF9nZXRfYm91bmRpbmdTcGhlcmUodGhpcy5faW5kZXgsIHRoaXMuX2VuZ2luZS53YXNtLl90ZW1wTWVtKTtcbiAgICAgICAgb3V0WzBdID0gdGVtcE1lbUZsb2F0WzBdO1xuICAgICAgICBvdXRbMV0gPSB0ZW1wTWVtRmxvYXRbMV07XG4gICAgICAgIG91dFsyXSA9IHRlbXBNZW1GbG9hdFsyXTtcbiAgICAgICAgb3V0WzNdID0gdGVtcE1lbUZsb2F0WzNdO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBhdHRyaWJ1dGUoYXR0cikge1xuICAgICAgICBpZiAodHlwZW9mIGF0dHIgIT0gJ251bWJlcicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBudW1iZXIsIGJ1dCBnb3QgJyArIHR5cGVvZiBhdHRyKTtcbiAgICAgICAgY29uc3QgdGVtcE1lbVVpbnQzMiA9IHRoaXMuX2VuZ2luZS53YXNtLl90ZW1wTWVtVWludDMyO1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfbWVzaF9nZXRfYXR0cmlidXRlKHRoaXMuX2luZGV4LCBhdHRyLCB0aGlzLl9lbmdpbmUud2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIGlmICh0ZW1wTWVtVWludDMyWzBdID09IDI1NSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjb25zdCBhcnJheVNpemUgPSB0ZW1wTWVtVWludDMyWzVdO1xuICAgICAgICByZXR1cm4gbmV3IE1lc2hBdHRyaWJ1dGVBY2Nlc3Nvcih0aGlzLl9lbmdpbmUsIHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogdGVtcE1lbVVpbnQzMlswXSxcbiAgICAgICAgICAgIG9mZnNldDogdGVtcE1lbVVpbnQzMlsxXSxcbiAgICAgICAgICAgIHN0cmlkZTogdGVtcE1lbVVpbnQzMlsyXSxcbiAgICAgICAgICAgIGZvcm1hdFNpemU6IHRlbXBNZW1VaW50MzJbM10sXG4gICAgICAgICAgICBjb21wb25lbnRDb3VudDogdGVtcE1lbVVpbnQzMls0XSxcbiAgICAgICAgICAgIC8qIFRoZSBXQVNNIEFQSSByZXR1cm5zIGAwYCBmb3IgYSBzY2FsYXIgdmFsdWUuIFdlIGNsYW1wIGl0IHRvIDEgYXMgd2Ugc3RyaWN0bHkgdXNlIGl0IGFzIGEgbXVsdGlwbGllciBmb3IgZ2V0L3NldCBvcGVyYXRpb25zICovXG4gICAgICAgICAgICBhcnJheVNpemU6IGFycmF5U2l6ZSA/IGFycmF5U2l6ZSA6IDEsXG4gICAgICAgICAgICBsZW5ndGg6IHRoaXMudmVydGV4Q291bnQsXG4gICAgICAgICAgICBidWZmZXJUeXBlOiAoYXR0ciAhPT0gTWVzaEF0dHJpYnV0ZS5Kb2ludElkXG4gICAgICAgICAgICAgICAgPyBGbG9hdDMyQXJyYXlcbiAgICAgICAgICAgICAgICA6IFVpbnQxNkFycmF5KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYW5kIGZyZWUgdGhlIG1lc2hlcyBtZW1vcnkuXG4gICAgICpcbiAgICAgKiBJdCBpcyBiZXN0IHByYWN0aWNlIHRvIHNldCB0aGUgbWVzaCB2YXJpYWJsZSB0byBgbnVsbGAgYWZ0ZXIgY2FsbGluZ1xuICAgICAqIGRlc3Ryb3kgdG8gcHJldmVudCBhY2NpZGVudGFsIHVzZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICBtZXNoLmRlc3Ryb3koKTtcbiAgICAgKiAgIG1lc2ggPSBudWxsO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQWNjZXNzaW5nIHRoZSBtZXNoIGFmdGVyIGRlc3RydWN0aW9uIGJlaGF2ZXMgbGlrZSBhY2Nlc3NpbmcgYW4gZW1wdHlcbiAgICAgKiBtZXNoLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOS4wXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX21lc2hfZGVzdHJveSh0aGlzLl9pbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBlcXVhbGl0eSBieSBjb21wYXJpbmcgd2hldGhlciB0aGUgd3JhcHBlZCBuYXRpdmUgbWVzaCBpZHMgYXJlXG4gICAgICogZXF1YWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXJNZXNoIE1lc2ggdG8gY2hlY2sgZXF1YWxpdHkgd2l0aC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoaXMgbWVzaCBlcXVhbHMgdGhlIGdpdmVuIG1lc2guXG4gICAgICpcbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXJNZXNoKSB7XG4gICAgICAgIGlmICghb3RoZXJNZXNoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXggPT09IG90aGVyTWVzaC5faW5kZXg7XG4gICAgfVxufVxuLyoqXG4gKiBBbiBpdGVyYXRvciBvdmVyIGEgbWVzaCB2ZXJ0ZXggYXR0cmlidXRlLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYGpzXG4gKiAgIGNvbnN0IG1lc2ggPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoJ21lc2gnKS5tZXNoO1xuICogICBjb25zdCBwb3NpdGlvbnMgPSBtZXNoLmF0dHJpYnV0ZShXTC5NZXNoQXR0cmlidXRlLlBvc2l0aW9uKTtcbiAqXG4gKiAgIGNvbnN0IHRlbXAgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICogICBmb3IoaW50IGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aDsgKytpKSB7XG4gKiAgICAgICAvLyBwb3Mgd2lsbCByZWZlcmVuY2UgdGVtcCBhbmQgdGhlcmVieSBub3QgYWxsb2NhdGUgYWRkaXRpb25hbFxuICogICAgICAgLy8gSmF2YVNjcmlwdCBnYXJiYWdlLCB3aGljaCB3b3VsZCBjYXVzZSBhIHBlcmYgc3Bpa2Ugd2hlbiBjb2xsZWN0ZWQuXG4gKiAgICAgICBjb25zdCBwb3MgPSBwb3NpdGlvbnMuZ2V0KGksIHRlbXApO1xuICogICAgICAgLy8gc2NhbGUgcG9zaXRpb24gYnkgMiBvbiBYIGF4aXMgb25seVxuICogICAgICAgcG9zWzBdICo9IDIuMGY7XG4gKiAgICAgICBwb3NpdGlvbnMuc2V0KGksIHBvcyk7XG4gKiAgIH1cbiAqICAgLy8gd2UncmUgZG9uZSBtb2RpZnlpbmcsIHRlbGwgdGhlIGVuZ2luZSB0byBtb3ZlIHZlcnRleCBkYXRhIHRvIHRoZSBHUFVcbiAqICAgbWVzaC51cGRhdGUoKTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgTWVzaEF0dHJpYnV0ZUFjY2Vzc29yIHtcbiAgICAvKiogTWF4IG51bWJlciBvZiBlbGVtZW50cy4gKi9cbiAgICBsZW5ndGggPSAwO1xuICAgIC8qKiBXb25kZXJsYW5kIEVuZ2luZSBpbnN0YW5jZS4gQGhpZGRlbiAqL1xuICAgIF9lbmdpbmU7XG4gICAgLyoqIEF0dHJpYnV0ZSBpbmRleC4gQGhpZGRlbiAqL1xuICAgIF9hdHRyaWJ1dGUgPSAtMTtcbiAgICAvKiogQXR0cmlidXRlIG9mZnNldC4gQGhpZGRlbiAqL1xuICAgIF9vZmZzZXQgPSAwO1xuICAgIC8qKiBBdHRyaWJ1dGUgc3RyaWRlLiBAaGlkZGVuICovXG4gICAgX3N0cmlkZSA9IDA7XG4gICAgLyoqIEZvcm1hdCBzaXplIG5hdGl2ZSBlbnVtLiBAaGlkZGVuICovXG4gICAgX2Zvcm1hdFNpemUgPSAwO1xuICAgIC8qKiBOdW1iZXIgb2YgY29tcG9uZW50cyBwZXIgdmVydGV4LiBAaGlkZGVuICovXG4gICAgX2NvbXBvbmVudENvdW50ID0gMDtcbiAgICAvKiogTnVtYmVyIG9mIHZhbHVlcyBwZXIgdmVydGV4LiBAaGlkZGVuICovXG4gICAgX2FycmF5U2l6ZSA9IDE7XG4gICAgLyoqXG4gICAgICogQ2xhc3MgdG8gaW5zdGFudGlhdGUgYW4gQXJyYXlCdWZmZXIgdG8gZ2V0L3NldCB2YWx1ZXMuXG4gICAgICovXG4gICAgX2J1ZmZlclR5cGU7XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gYWxsb2NhdGUgdGVtcG9yYXJ5IFdBU00gbWVtb3J5LiBJdCBpcyBjYWNoZWQgaW4gdGhlIGFjY2Vzc29yIHRvIGF2b2lkXG4gICAgICogY29uZGl0aW9uYWxzIGR1cmluZyBnZXQvc2V0LlxuICAgICAqL1xuICAgIF90ZW1wQnVmZmVyR2V0dGVyO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBub3RlIFBsZWFzZSB1c2Uge0BsaW5rIE1lc2guYXR0cmlidXRlfSB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBDb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBob3cgdG8gcmVhZCB0aGUgZGF0YS5cbiAgICAgKiBAbm90ZSBEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IuIEluc3RlYWQsIHBsZWFzZSB1c2UgdGhlIHtAbGluayBNZXNoLmF0dHJpYnV0ZX0gbWV0aG9kLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgdGhpcy5fYXR0cmlidXRlID0gb3B0aW9ucy5hdHRyaWJ1dGU7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IG9wdGlvbnMub2Zmc2V0O1xuICAgICAgICB0aGlzLl9zdHJpZGUgPSBvcHRpb25zLnN0cmlkZTtcbiAgICAgICAgdGhpcy5fZm9ybWF0U2l6ZSA9IG9wdGlvbnMuZm9ybWF0U2l6ZTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50Q291bnQgPSBvcHRpb25zLmNvbXBvbmVudENvdW50O1xuICAgICAgICB0aGlzLl9hcnJheVNpemUgPSBvcHRpb25zLmFycmF5U2l6ZTtcbiAgICAgICAgdGhpcy5fYnVmZmVyVHlwZSA9IG9wdGlvbnMuYnVmZmVyVHlwZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBvcHRpb25zLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fdGVtcEJ1ZmZlckdldHRlciA9ICh0aGlzLl9idWZmZXJUeXBlID09PSBGbG9hdDMyQXJyYXlcbiAgICAgICAgICAgID8gd2FzbS5nZXRUZW1wQnVmZmVyRjMyLmJpbmQod2FzbSlcbiAgICAgICAgICAgIDogd2FzbS5nZXRUZW1wQnVmZmVyVTE2LmJpbmQod2FzbSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgVHlwZWRBcnJheSB0byBob2xkIHRoaXMgYXR0cmlidXRlJ3MgdmFsdWVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHRvIGNyZWF0ZSBhIHZpZXcgdG8gaG9sZCB0aGUgZGF0YSB0b1xuICAgICAqIHBhc3MgdG8ge0BsaW5rIGdldH0gYW5kIHtAbGluayBzZXR9XG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCB2ZXJ0ZXhDb3VudCA9IDQ7XG4gICAgICogY29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBtZXNoLmF0dHJpYnV0ZShNZXNoQXR0cmlidXRlcy5Qb3NpdGlvbik7XG4gICAgICpcbiAgICAgKiAvLyBBIHBvc2l0aW9uIGhhcyAzIGZsb2F0cyBwZXIgdmVydGV4LiBUaHVzLCBwb3NpdGlvbnMgaGFzIGxlbmd0aCAzICogNC5cbiAgICAgKiBjb25zdCBwb3NpdGlvbnMgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jcmVhdGVBcnJheSh2ZXJ0ZXhDb3VudCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiAqKnZlcnRpY2VzKiogZXhwZWN0ZWQuXG4gICAgICogQHJldHVybnMgQSBUeXBlZEFycmF5IHdpdGggdGhlIGFwcHJvcHJpYXRlIGZvcm1hdCB0byBhY2Nlc3MgdGhlIGRhdGFcbiAgICAgKi9cbiAgICBjcmVhdGVBcnJheShjb3VudCA9IDEpIHtcbiAgICAgICAgY291bnQgPSBjb3VudCA+IHRoaXMubGVuZ3RoID8gdGhpcy5sZW5ndGggOiBjb3VudDtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLl9idWZmZXJUeXBlKGNvdW50ICogdGhpcy5fY29tcG9uZW50Q291bnQgKiB0aGlzLl9hcnJheVNpemUpO1xuICAgIH1cbiAgICBnZXQoaW5kZXgsIG91dCA9IHRoaXMuY3JlYXRlQXJyYXkoKSkge1xuICAgICAgICBpZiAob3V0Lmxlbmd0aCAlIHRoaXMuX2NvbXBvbmVudENvdW50ICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG91dC5sZW5ndGgsICR7b3V0Lmxlbmd0aH0gaXMgbm90IGEgbXVsdGlwbGUgb2YgdGhlIGF0dHJpYnV0ZSB2ZWN0b3IgY29tcG9uZW50cywgJHt0aGlzLl9jb21wb25lbnRDb3VudH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXN0ID0gdGhpcy5fdGVtcEJ1ZmZlckdldHRlcihvdXQubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSB0aGlzLl9idWZmZXJUeXBlLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICBjb25zdCBkZXN0U2l6ZSA9IGVsZW1lbnRTaXplICogb3V0Lmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc3JjRm9ybWF0U2l6ZSA9IHRoaXMuX2Zvcm1hdFNpemUgKiB0aGlzLl9hcnJheVNpemU7XG4gICAgICAgIGNvbnN0IGRlc3RGb3JtYXRTaXplID0gdGhpcy5fY29tcG9uZW50Q291bnQgKiBlbGVtZW50U2l6ZSAqIHRoaXMuX2FycmF5U2l6ZTtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX21lc2hfZ2V0X2F0dHJpYnV0ZV92YWx1ZXModGhpcy5fYXR0cmlidXRlLCBzcmNGb3JtYXRTaXplLCB0aGlzLl9vZmZzZXQgKyBpbmRleCAqIHRoaXMuX3N0cmlkZSwgdGhpcy5fc3RyaWRlLCBkZXN0Rm9ybWF0U2l6ZSwgZGVzdC5ieXRlT2Zmc2V0LCBkZXN0U2l6ZSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgb3V0W2ldID0gZGVzdFtpXTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGF0dHJpYnV0ZSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGkgSW5kZXhcbiAgICAgKiBAcGFyYW0gdiBWYWx1ZSB0byBzZXQgdGhlIGVsZW1lbnQgdG9cbiAgICAgKlxuICAgICAqIGB2Lmxlbmd0aGAgbmVlZHMgdG8gYmUgYSBtdWx0aXBsZSBvZiB0aGUgYXR0cmlidXRlcyBjb21wb25lbnQgY291bnQsIHNlZVxuICAgICAqIHtAbGluayBNZXNoQXR0cmlidXRlfS4gSWYgYHYubGVuZ3RoYCBpcyBtb3JlIHRoYW4gb25lIG11bHRpcGxlLCBpdCB3aWxsIGJlXG4gICAgICogZmlsbGVkIHdpdGggdGhlIG5leHQgbiBhdHRyaWJ1dGUgZWxlbWVudHMsIHdoaWNoIGNhbiByZWR1Y2Ugb3ZlcmhlYWRcbiAgICAgKiBvZiB0aGlzIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZylcbiAgICAgKi9cbiAgICBzZXQoaSwgdikge1xuICAgICAgICBpZiAodi5sZW5ndGggJSB0aGlzLl9jb21wb25lbnRDb3VudCAhPT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgb3V0Lmxlbmd0aCwgJHt2Lmxlbmd0aH0gaXMgbm90IGEgbXVsdGlwbGUgb2YgdGhlIGF0dHJpYnV0ZSB2ZWN0b3IgY29tcG9uZW50cywgJHt0aGlzLl9jb21wb25lbnRDb3VudH1gKTtcbiAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSB0aGlzLl9idWZmZXJUeXBlLkJZVEVTX1BFUl9FTEVNRU5UO1xuICAgICAgICBjb25zdCBzcmNTaXplID0gZWxlbWVudFNpemUgKiB2Lmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc3JjRm9ybWF0U2l6ZSA9IHRoaXMuX2NvbXBvbmVudENvdW50ICogZWxlbWVudFNpemUgKiB0aGlzLl9hcnJheVNpemU7XG4gICAgICAgIGNvbnN0IGRlc3RGb3JtYXRTaXplID0gdGhpcy5fZm9ybWF0U2l6ZSAqIHRoaXMuX2FycmF5U2l6ZTtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICAvKiBVbmxlc3Mgd2UgYXJlIGFscmVhZHkgd29ya2luZyB3aXRoIGRhdGEgZnJvbSBXQVNNIGhlYXAsIHdlXG4gICAgICAgICAqIG5lZWQgdG8gY29weSBpbnRvIHRlbXBvcmFyeSBtZW1vcnkuICovXG4gICAgICAgIGlmICh2LmJ1ZmZlciAhPSB3YXNtLkhFQVBVOC5idWZmZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc3QgPSB0aGlzLl90ZW1wQnVmZmVyR2V0dGVyKHYubGVuZ3RoKTtcbiAgICAgICAgICAgIGRlc3Quc2V0KHYpO1xuICAgICAgICAgICAgdiA9IGRlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgd2FzbS5fd2xfbWVzaF9zZXRfYXR0cmlidXRlX3ZhbHVlcyh0aGlzLl9hdHRyaWJ1dGUsIHNyY0Zvcm1hdFNpemUsIHYuYnl0ZU9mZnNldCwgc3JjU2l6ZSwgZGVzdEZvcm1hdFNpemUsIHRoaXMuX29mZnNldCArIGkgKiB0aGlzLl9zdHJpZGUsIHRoaXMuX3N0cmlkZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgYSBuYXRpdmUgbWF0ZXJpYWwuXG4gKlxuICogRWFjaCBtYXRlcmlhbCBpbnN0YW5jZSB3aWxsIGhhdmUgcHJvcGVydGllcyBhc3NvY2lhdGVkIHRvIHRoZSBwaXBlbGluZSBpdCB1c2VzLlxuICogVGhlIG1hdGVyaWFsIHByb3BlcnRpZXMgYXJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCBtYXRlcmlhbCBpbnN0YW5jZSwgZXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbWF0ZXJpYWwgPSBtZXNoLm1hdGVyaWFsOyAvLyBNYXRlcmlhbCB3aXRoIGEgYFBob25nIE9wYXF1ZSBUZXh0dXJlZGAgcGlwZWxpbmVcbiAqIC8vIFlvdSBjYW4gYWNjZXNzIGFsbCB0aGUgbWF0ZXJpYWwgcHJvcGVydGllcyBmcm9tIHRoZSBlZGl0b3IgdXNpbmc6XG4gKiBtYXRlcmlhbC5kaWZmdXNlVGV4dHVyZSA9IG51bGw7XG4gKiBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBbMS4wLCAwLjAsIDAuMCwgMS4wXTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWwge1xuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoaXMgbWF0ZXJpYWwgaW4gdGhlIG1hbmFnZXIuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2luZGV4O1xuICAgIC8qKlxuICAgICAqIE1hdGVyaWFsIGRlZmluaXRpb24gaW5kZXggaW4gdGhlIHNjZW5lLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9kZWZpbml0aW9uO1xuICAgIC8qKiBXb25kZXJsYW5kIEVuZ2luZSBpbnN0YW5jZS4gQGhpZGRlbiAqL1xuICAgIF9lbmdpbmU7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IE1hdGVyaWFsLlxuICAgICAqXG4gICAgICogQG5vdGUgQ3JlYXRpbmcgbWF0ZXJpYWwgaXMgZXhwZW5zaXZlLiBQbGVhc2UgdXNlIHtAbGluayBNYXRlcmlhbCNjbG9uZX0gdG8gY2xvbmUgYSBtYXRlcmlhbC5cbiAgICAgKiBAbm90ZSBEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IgZGlyZWN0bHkgd2l0aCBhbiBpbmRleCwgdGhpcyBpcyByZXNlcnZlZCBmb3IgaW50ZXJuYWwgcHVycG9zZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZW5naW5lLCBwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmICghcGFyYW1zPy5waXBlbGluZSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHBhcmFtZXRlciAncGlwZWxpbmUnXCIpO1xuICAgICAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBwYXJhbXMucGlwZWxpbmU7XG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IHdhc20uX3dsX21hdGVyaWFsX2NyZWF0ZSh3YXNtLnRlbXBVVEY4KHBpcGVsaW5lKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPCAwKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3VjaCBwaXBlbGluZSAnJHtwaXBlbGluZX0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IHBhcmFtcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9kZWZpbml0aW9uID0gdGhpcy5fZW5naW5lLndhc20uX3dsX21hdGVyaWFsX2dldF9kZWZpbml0aW9uKHRoaXMuX2luZGV4KTtcbiAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUud2FzbS5fbWF0ZXJpYWxEZWZpbml0aW9uc1t0aGlzLl9kZWZpbml0aW9uXSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWF0ZXJpYWwgRGVmaW5pdGlvbiAke3RoaXMuX2RlZmluaXRpb259IG5vdCBmb3VuZCBmb3IgbWF0ZXJpYWwgd2l0aCBpbmRleCAke3RoaXMuX2luZGV4fWApO1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRoaXMsIHtcbiAgICAgICAgICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3YXNtID0gZW5naW5lLndhc207XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHdhc20uX21hdGVyaWFsRGVmaW5pdGlvbnNbdGFyZ2V0Ll9kZWZpbml0aW9uXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbSA9IGRlZmluaXRpb24uZ2V0KHByb3ApO1xuICAgICAgICAgICAgICAgIGlmICghcGFyYW0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKHdhc20uX3dsX21hdGVyaWFsX2dldF9wYXJhbV92YWx1ZSh0YXJnZXQuX2luZGV4LCBwYXJhbS5pbmRleCwgd2FzbS5fdGVtcE1lbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcmFtLnR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE1hdGVyaWFsUGFyYW1UeXBlLlVuc2lnbmVkSW50OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlLmNvbXBvbmVudENvdW50ID09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB3YXNtLl90ZW1wTWVtVWludDMyWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IFVpbnQzMkFycmF5KHdhc20uSEVBUFUzMi5idWZmZXIsIHdhc20uX3RlbXBNZW0sIHR5cGUuY29tcG9uZW50Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBNYXRlcmlhbFBhcmFtVHlwZS5JbnQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGUuY29tcG9uZW50Q291bnQgPT0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHdhc20uX3RlbXBNZW1JbnRbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgSW50MzJBcnJheSh3YXNtLkhFQVAzMi5idWZmZXIsIHdhc20uX3RlbXBNZW0sIHR5cGUuY29tcG9uZW50Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBNYXRlcmlhbFBhcmFtVHlwZS5GbG9hdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZS5jb21wb25lbnRDb3VudCA9PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gd2FzbS5fdGVtcE1lbUZsb2F0WzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IEZsb2F0MzJBcnJheSh3YXNtLkhFQVBGMzIuYnVmZmVyLCB3YXNtLl90ZW1wTWVtLCB0eXBlLmNvbXBvbmVudENvdW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTWF0ZXJpYWxQYXJhbVR5cGUuU2FtcGxlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5naW5lLnRleHR1cmVzLndyYXAod2FzbS5fdGVtcE1lbUludFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0eXBlICR7dHlwZS50eXBlfSBvbiBwYXJhbWV0ZXIgJHtwYXJhbS5pbmRleH0gZm9yIG1hdGVyaWFsICR7dGFyZ2V0Ll9pbmRleH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHdhc20gPSBlbmdpbmUud2FzbTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZpbml0aW9uID0gd2FzbS5fbWF0ZXJpYWxEZWZpbml0aW9uc1t0YXJnZXQuX2RlZmluaXRpb25dO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtID0gZGVmaW5pdGlvbi5nZXQocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBwYXJhbS50eXBlO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWF0ZXJpYWxQYXJhbVR5cGUuVW5zaWduZWRJbnQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWF0ZXJpYWxQYXJhbVR5cGUuSW50OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIE1hdGVyaWFsUGFyYW1UeXBlLlNhbXBsZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gdmFsdWUuaWQgPz8gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXNtLl93bF9tYXRlcmlhbF9zZXRfcGFyYW1fdmFsdWVfdWludCh0YXJnZXQuX2luZGV4LCBwYXJhbS5pbmRleCwgdik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNYXRlcmlhbFBhcmFtVHlwZS5GbG9hdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFswXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbaV0gPSB2YWx1ZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHdhc20uX3dsX21hdGVyaWFsX3NldF9wYXJhbV92YWx1ZV9mbG9hdCh0YXJnZXQuX2luZGV4LCBwYXJhbS5pbmRleCwgd2FzbS5fdGVtcE1lbSwgY291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWF0ZXJpYWxQYXJhbVR5cGUuRm9udDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBmb250IHByb3BlcnRpZXMgaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayAjcGlwZWxpbmV9IGluc3RlYWQuICovXG4gICAgZ2V0IHNoYWRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZWxpbmU7XG4gICAgfVxuICAgIC8qKiBOYW1lIG9mIHRoZSBwaXBlbGluZSB1c2VkIGJ5IHRoaXMgbWF0ZXJpYWwuICovXG4gICAgZ2V0IHBpcGVsaW5lKCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIHJldHVybiB3YXNtLlVURjhUb1N0cmluZyh3YXNtLl93bF9tYXRlcmlhbF9nZXRfcGlwZWxpbmUodGhpcy5faW5kZXgpKTtcbiAgICB9XG4gICAgLyoqIEhvc3RpbmcgZW5naW5lIGluc3RhbmNlLiAqL1xuICAgIGdldCBlbmdpbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvcHkgb2YgdGhlIHVuZGVybHlpbmcgbmF0aXZlIG1hdGVyaWFsLlxuICAgICAqXG4gICAgICogQHJldHVybnMgTWF0ZXJpYWwgY2xvbmUuXG4gICAgICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5fZW5naW5lLndhc20uX3dsX21hdGVyaWFsX2Nsb25lKHRoaXMuX2luZGV4KTtcbiAgICAgICAgcmV0dXJuIGlkID4gMCA/IG5ldyBNYXRlcmlhbCh0aGlzLl9lbmdpbmUsIGlkKSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBlcXVhbGl0eSBieSBjb21wYXJpbmcgd2hldGhlciB0aGUgd3JhcHBlZCBuYXRpdmUgbWF0ZXJpYWwgaWRzIGFyZVxuICAgICAqIGVxdWFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyTWF0ZXJpYWwgTWF0ZXJpYWwgdG8gY2hlY2sgZXF1YWxpdHkgd2l0aC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoaXMgbWF0ZXJpYWwgZXF1YWxzIHRoZSBnaXZlbiBtYXRlcmlhbC5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIGVxdWFscyhvdGhlck1hdGVyaWFsKSB7XG4gICAgICAgIGlmICghb3RoZXJNYXRlcmlhbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4ID09PSBvdGhlck1hdGVyaWFsLl9pbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JhcCBhIG5hdGl2ZSBtYXRlcmlhbCBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmdpbmUgRW5naW5lIGluc3RhbmNlLlxuICAgICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXguXG4gICAgICogQHJldHVybnMgTWF0ZXJpYWwgaW5zdGFuY2Ugb3IgYG51bGxgIGlmIGluZGV4IDw9IDAuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBuZXcgTWF0ZXJpYWwoKWAgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgd3JhcChlbmdpbmUsIGluZGV4KSB7XG4gICAgICAgIC8qKiBAdG9kbzogdGhpcyBwcm9wYWdhdGUgbnVsbGFibGUgaW4gdGhlIGVudGlyZSBjb2RlYmFzZS4gUmVtb3ZlLiAqL1xuICAgICAgICByZXR1cm4gaW5kZXggPiAwID8gbmV3IE1hdGVyaWFsKGVuZ2luZSwgaW5kZXgpIDogbnVsbDtcbiAgICB9XG59XG4vKiogVGVtcG9yYXJ5IGNhbnZhcyAqL1xubGV0IHRlbXAyZCA9IG51bGw7XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIGEgbmF0aXZlIHRleHR1cmUgZGF0YS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmUge1xuICAgIC8qKiBXb25kZXJsYW5kIEVuZ2luZSBpbnN0YW5jZS4gQGhpZGRlbiAqL1xuICAgIF9lbmdpbmU7XG4gICAgLyoqIEluZGV4IGluIHRoZSBtYW5hZ2VyLiBAaGlkZGVuICovXG4gICAgX2lkID0gMDtcbiAgICAvKiogSFRNTCBpbWFnZSBpbmRleC4gQGhpZGRlbiAqL1xuICAgIF9pbWFnZUluZGV4ID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZW5naW5lIFRoZSBlbmdpbmUgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gcGFyYW0gSFRNTCBtZWRpYSBlbGVtZW50IHRvIGNyZWF0ZSB0ZXh0dXJlIGZyb20gb3IgdGV4dHVyZSBpZCB0byB3cmFwLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSwgcGFyYW0pIHtcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lID8/IFdMO1xuICAgICAgICBjb25zdCB3YXNtID0gZW5naW5lLndhc207XG4gICAgICAgIGlmIChwYXJhbSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgfHxcbiAgICAgICAgICAgIHBhcmFtIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCB8fFxuICAgICAgICAgICAgcGFyYW0gaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB3YXNtLl9pbWFnZXMubGVuZ3RoO1xuICAgICAgICAgICAgd2FzbS5faW1hZ2VzLnB1c2gocGFyYW0pO1xuICAgICAgICAgICAgdGhpcy5faW1hZ2VJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy5faWQgPSB0aGlzLl9lbmdpbmUud2FzbS5fd2xfcmVuZGVyZXJfYWRkSW1hZ2UoaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faWQgPSBwYXJhbTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbmdpbmUudGV4dHVyZXMuX3NldCh0aGlzKTtcbiAgICB9XG4gICAgLyoqIFdoZXRoZXIgdGhpcyB0ZXh0dXJlIGlzIHZhbGlkLiAqL1xuICAgIGdldCB2YWxpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkID49IDA7XG4gICAgfVxuICAgIC8qKiBJbmRleCBpbiB0aGlzIG1hbmFnZXIuICovXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuICAgIC8qKiBVcGRhdGUgdGhlIHRleHR1cmUgdG8gbWF0Y2ggdGhlIEhUTUwgZWxlbWVudCAoZS5nLiByZWZsZWN0IHRoZSBjdXJyZW50IGZyYW1lIG9mIGEgdmlkZW8pLiAqL1xuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkIHx8IHRoaXMuX2ltYWdlSW5kZXggPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9yZW5kZXJlcl91cGRhdGVJbWFnZSh0aGlzLl9pZCwgdGhpcy5faW1hZ2VJbmRleCk7XG4gICAgfVxuICAgIC8qKiBXaWR0aCBvZiB0aGUgdGV4dHVyZS4gKi9cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfdGV4dHVyZV93aWR0aCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKiBIZWlnaHQgb2YgdGhlIHRleHR1cmUuICovXG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZ2luZS53YXNtLl93bF90ZXh0dXJlX2hlaWdodCh0aGlzLl9pZCk7XG4gICAgfVxuICAgIC8qKiBIb3N0aW5nIGVuZ2luZSBpbnN0YW5jZS4gKi9cbiAgICBnZXQgZW5naW5lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgYSBzdWJyYW5nZSBvbiB0aGUgdGV4dHVyZSB0byBtYXRjaCB0aGUgSFRNTCBlbGVtZW50IChlLmcuIHJlZmxlY3QgdGhlIGN1cnJlbnQgZnJhbWUgb2YgYSB2aWRlbykuXG4gICAgICpcbiAgICAgKiBVc2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQ29waWVzIHJlY3RhbmdsZSBvZiBwaXhlbCBzdGFydGluZyBmcm9tICgxMCwgMjApXG4gICAgICogdGV4dHVyZS51cGRhdGVTdWJJbWFnZSgxMCwgMjAsIDYwMCwgNDAwKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB4IHggb2Zmc2V0XG4gICAgICogQHBhcmFtIHkgeSBvZmZzZXRcbiAgICAgKiBAcGFyYW0gdyB3aWR0aFxuICAgICAqIEBwYXJhbSBoIGhlaWdodFxuICAgICAqL1xuICAgIHVwZGF0ZVN1YkltYWdlKHgsIHksIHcsIGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkIHx8IHRoaXMuX2ltYWdlSW5kZXggPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8qIExhenkgaW5pdGlhbGl6ZSB0ZW1wIGNhbnZhcyAqL1xuICAgICAgICBpZiAoIXRlbXAyZCkge1xuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0dXJlLnVwZGF0ZVN1YkltYWdlKCk6IEZhaWxlZCB0byBvYnRhaW4gQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcDJkID0geyBjYW52YXMsIGN0eCB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgaW1nID0gd2FzbS5faW1hZ2VzW3RoaXMuX2ltYWdlSW5kZXhdO1xuICAgICAgICBpZiAoIWltZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGVtcDJkLmNhbnZhcy53aWR0aCA9IHc7XG4gICAgICAgIHRlbXAyZC5jYW52YXMuaGVpZ2h0ID0gaDtcbiAgICAgICAgdGVtcDJkLmN0eC5kcmF3SW1hZ2UoaW1nLCB4LCB5LCB3LCBoLCAwLCAwLCB3LCBoKTtcbiAgICAgICAgY29uc3QgeU9mZnNldCA9IChpbWcudmlkZW9IZWlnaHQgPz8gaW1nLmhlaWdodCkgLSB5IC0gaDtcbiAgICAgICAgd2FzbS5faW1hZ2VzW3RoaXMuX2ltYWdlSW5kZXhdID0gdGVtcDJkLmNhbnZhcztcbiAgICAgICAgd2FzbS5fd2xfcmVuZGVyZXJfdXBkYXRlSW1hZ2UodGhpcy5faWQsIHRoaXMuX2ltYWdlSW5kZXgsIHgsIHlPZmZzZXQpO1xuICAgICAgICB3YXNtLl9pbWFnZXNbdGhpcy5faW1hZ2VJbmRleF0gPSBpbWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgYW5kIGZyZWUgdGhlIHRleHR1cmUncyB0ZXh0dXJlIGFsdGFzIHNwYWNlIGFuZCBtZW1vcnkuXG4gICAgICpcbiAgICAgKiBJdCBpcyBiZXN0IHByYWN0aWNlIHRvIHNldCB0aGUgdGV4dHVyZSB2YXJpYWJsZSB0byBgbnVsbGAgYWZ0ZXIgY2FsbGluZ1xuICAgICAqIGRlc3Ryb3kgdG8gcHJldmVudCBhY2NpZGVudGFsIHVzZSBvZiB0aGUgaW52YWxpZCB0ZXh0dXJlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHRleHR1cmUuZGVzdHJveSgpO1xuICAgICAqICAgdGV4dHVyZSA9IG51bGw7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC45LjBcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmVuZ2luZS50ZXh0dXJlcy5fZGVzdHJveSh0aGlzKTtcbiAgICAgICAgdGhpcy5faWQgPSAtMTtcbiAgICAgICAgdGhpcy5faW1hZ2VJbmRleCA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBlcXVhbGl0eSBieSBjb21wYXJpbmcgd2hldGhlciB0aGUgd3JhcHBlZCBuYXRpdmUgdGV4dHVyZSBpZHMgYXJlXG4gICAgICogZXF1YWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXJUZXh0dXJlIFRleHR1cmUgdG8gY2hlY2sgZXF1YWxpdHkgd2l0aC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoaXMgdGV4dHVyZSBlcXVhbHMgdGhlIGdpdmVuIHRleHR1cmUuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXJUZXh0dXJlKSB7XG4gICAgICAgIGlmICghb3RoZXJUZXh0dXJlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5faWQgPT09IG90aGVyVGV4dHVyZS5faWQ7XG4gICAgfVxufVxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBhIG5hdGl2ZSBhbmltYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmltYXRpb24ge1xuICAgIC8qKiBJbmRleCBvZiB0aGUgbWVzaCBpbiB0aGUgbWFuYWdlci4gQGhpZGRlbiAqL1xuICAgIF9pbmRleDtcbiAgICAvKiogV29uZGVybGFuZCBFbmdpbmUgaW5zdGFuY2UuIEBoaWRkZW4gKi9cbiAgICBfZW5naW5lO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpbmRleCBJbmRleCBpbiB0aGUgbWFuYWdlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSA9IFdMLCBpbmRleCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgICAgIHRoaXMuX2luZGV4ID0gaW5kZXg7XG4gICAgfVxuICAgIC8qKiBEdXJhdGlvbiBvZiB0aGlzIGFuaW1hdGlvbi4gKi9cbiAgICBnZXQgZHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfYW5pbWF0aW9uX2dldF9kdXJhdGlvbih0aGlzLl9pbmRleCk7XG4gICAgfVxuICAgIC8qKiBOdW1iZXIgb2YgdHJhY2tzIGluIHRoaXMgYW5pbWF0aW9uLiAqL1xuICAgIGdldCB0cmFja0NvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5naW5lLndhc20uX3dsX2FuaW1hdGlvbl9nZXRfdHJhY2tDb3VudCh0aGlzLl9pbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb25lIHRoaXMgYW5pbWF0aW9uIHJldGFyZ2V0ZWQgdG8gYSBuZXcgc2V0IG9mIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBUaGUgY2xvbmUgc2hhcmVzIG1vc3Qgb2YgdGhlIGRhdGEgd2l0aCB0aGUgb3JpZ2luYWwgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAqIGxpZ2h0LXdlaWdodC5cbiAgICAgKlxuICAgICAqICoqRXhwZXJpbWVudGFsOioqIFRoaXMgQVBJIG1pZ2h0IGNoYW5nZSBpbiB1cGNvbWluZyB2ZXJzaW9ucy5cbiAgICAgKlxuICAgICAqIElmIHJldGFyZ2V0aW5nIHRvIHtAbGluayBTa2lufSwgdGhlIGpvaW4gbmFtZXMgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBhIG1hcHBpbmdcbiAgICAgKiBmcm9tIHRoZSBwcmV2aW91cyBza2luIHRvIHRoZSBuZXcgc2tpbi4gVGhlIHNvdXJjZSBza2luIHdpbGwgYmUgcmV0cmlldmVkIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgdHJhY2sgaW4gdGhlIGFuaW1hdGlvbiB0aGF0IHRhcmdldHMgYSBqb2ludC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdUYXJnZXRzIE5ldyB0YXJnZXRzIHBlciB0cmFjay4gRXhwZWN0ZWQgdG8gaGF2ZVxuICAgICAqICAgICAge0BsaW5rIEFuaW1hdGlvbiN0cmFja0NvdW50fSBlbGVtZW50cyBvciB0byBiZSBhIHtAbGluayBTa2lufS5cbiAgICAgKiBAcmV0dXJucyBUaGUgcmV0YXJnZXRlZCBjbG9uZSBvZiB0aGlzIGFuaW1hdGlvbi5cbiAgICAgKi9cbiAgICByZXRhcmdldChuZXdUYXJnZXRzKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgaWYgKG5ld1RhcmdldHMgaW5zdGFuY2VvZiBTa2luKSB7XG4gICAgICAgICAgICBjb25zdCBhbmltSWQgPSB3YXNtLl93bF9hbmltYXRpb25fcmV0YXJnZXRUb1NraW4odGhpcy5faW5kZXgsIG5ld1RhcmdldHMuX2luZGV4KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5pbWF0aW9uKHRoaXMuX2VuZ2luZSwgYW5pbUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VGFyZ2V0cy5sZW5ndGggIT0gdGhpcy50cmFja0NvdW50KSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignRXhwZWN0ZWQgJyArXG4gICAgICAgICAgICAgICAgdGhpcy50cmFja0NvdW50LnRvU3RyaW5nKCkgK1xuICAgICAgICAgICAgICAgICcgdGFyZ2V0cywgYnV0IGdvdCAnICtcbiAgICAgICAgICAgICAgICBuZXdUYXJnZXRzLmxlbmd0aC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdHIgPSB3YXNtLl9tYWxsb2MoMiAqIG5ld1RhcmdldHMubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdUYXJnZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB3YXNtLkhFQVBVMTZbcHRyID4+ICgxICsgaSldID0gbmV3VGFyZ2V0c1tpXS5vYmplY3RJZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltSWQgPSB3YXNtLl93bF9hbmltYXRpb25fcmV0YXJnZXQodGhpcy5faW5kZXgsIHB0cik7XG4gICAgICAgIHdhc20uX2ZyZWUocHRyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBbmltYXRpb24odGhpcy5fZW5naW5lLCBhbmltSWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgZXF1YWxpdHkgYnkgY29tcGFyaW5nIHdoZXRoZXIgdGhlIHdyYXBwZWQgbmF0aXZlIGFuaW1hdGlvbiBpZHNcbiAgICAgKiBhcmUgZXF1YWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXJBbmltYXRpb24gQW5pbWF0aW9uIHRvIGNoZWNrIGVxdWFsaXR5IHdpdGguXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGlzIGFuaW1hdGlvbiBlcXVhbHMgdGhlIGdpdmVuIGFuaW1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqL1xuICAgIGVxdWFscyhvdGhlckFuaW1hdGlvbikge1xuICAgICAgICBpZiAoIW90aGVyQW5pbWF0aW9uKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXggPT09IG90aGVyQW5pbWF0aW9uLl9pbmRleDtcbiAgICB9XG59XG4vKipcbiAqIFNjZW5lIGdyYXBoIG9iamVjdC5cbiAqXG4gKiBOb2RlIGluIHRoZSBzY2VuZSBncmFwaCBvciBcImVudGl0eVwiLiBDb25zaXN0cyBvZiB0cmFuc2Zvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2VcbiAqIHRvIGl0cyBwYXJlbnQgb2JqZWN0LiBVc3VhbGx5IGhvbGRzIGNvbXBvbmVudHMgYW5kIGlzIGFjY2Vzc2libGUgYnkgY29tcG9uZW50c1xuICogdGhyb3VnaCB7QGxpbmsgQ29tcG9uZW50I29iamVjdH0uXG4gKlxuICogT2JqZWN0cyBhcmUgc3RvcmVkIGluIGEgZGF0YSBvcmllbnRlZCBtYW5uZXIgaW5zaWRlIFdlYkFzc2VtYmx5IG1lbW9yeS4gVGhpcyBjbGFzc1xuICogaXMgYSBKYXZhU2NyaXB0IEFQSSB3cmFwcGVyIGFyb3VuZCB0aGlzIG1lbW9yeSBmb3IgbW9yZSBjb252ZW5pZW50IHVzZSBpblxuICogY29tcG9uZW50cy5cbiAqXG4gKiBPYmplY3RzIGNhbiBiZSBjcmVhdGVkIGFuZCBhZGRlZCB0byBhIHNjZW5lIHRocm91Z2hcbiAqIHtAbGluayBTY2VuZSNhZGRPYmplY3R9IG9uIHRoZSB7QGxpbmsgV29uZGVybGFuZEVuZ2luZS5zY2VuZX0uXG4gKi9cbmV4cG9ydCBjbGFzcyBPYmplY3QzRCB7XG4gICAgLyoqIFdvbmRlcmxhbmQgRW5naW5lIGluc3RhbmNlLiBAaGlkZGVuICovXG4gICAgX2VuZ2luZTtcbiAgICAvKipcbiAgICAgKiBPYmplY3QgaW5kZXggaW4gdGhlIG1hbmFnZXIuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX29iamVjdElkID0gLTE7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG8gT2JqZWN0IGlkIHRvIHdyYXBcbiAgICAgKlxuICAgICAqIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBwbGVhc2UgdXNlIHtAbGluayBXb25kZXJsYW5kRW5naW5lLndyYXBPYmplY3R9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZW5naW5lLCBvKSB7XG4gICAgICAgIHRoaXMuX29iamVjdElkID0gbztcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBVc2VmdWwgZm9yIGlkZW50aWZ5aW5nIG9iamVjdHMgZHVyaW5nIGRlYnVnZ2luZy5cbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICByZXR1cm4gd2FzbS5VVEY4VG9TdHJpbmcod2FzbS5fd2xfb2JqZWN0X25hbWUodGhpcy5vYmplY3RJZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG9iamVjdCdzIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3TmFtZSBUaGUgbmV3IG5hbWUgdG8gc2V0LlxuICAgICAqL1xuICAgIHNldCBuYW1lKG5ld05hbWUpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl93bF9vYmplY3Rfc2V0X25hbWUodGhpcy5vYmplY3RJZCwgd2FzbS50ZW1wVVRGOChuZXdOYW1lKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcmVudCBvZiB0aGlzIG9iamVjdCBvciBgbnVsbGAgaWYgcGFyZW50ZWQgdG8gcm9vdC5cbiAgICAgKi9cbiAgICBnZXQgcGFyZW50KCkge1xuICAgICAgICBjb25zdCBwID0gdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9wYXJlbnQodGhpcy5vYmplY3RJZCk7XG4gICAgICAgIHJldHVybiBwID09PSAwID8gbnVsbCA6IHRoaXMuX2VuZ2luZS53cmFwT2JqZWN0KHApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGlsZHJlbiBvZiB0aGlzIG9iamVjdC5cbiAgICAgKi9cbiAgICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuQ291bnQgPSB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X2dldF9jaGlsZHJlbl9jb3VudCh0aGlzLm9iamVjdElkKTtcbiAgICAgICAgaWYgKGNoaWxkcmVuQ291bnQgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgd2FzbS5yZXF1aXJlVGVtcE1lbShjaGlsZHJlbkNvdW50ICogMik7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3RfZ2V0X2NoaWxkcmVuKHRoaXMub2JqZWN0SWQsIHdhc20uX3RlbXBNZW0sIHdhc20uX3RlbXBNZW1TaXplID4+IDEpO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5ldyBBcnJheShjaGlsZHJlbkNvdW50KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbkNvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW2ldID0gdGhpcy5fZW5naW5lLndyYXBPYmplY3Qod2FzbS5fdGVtcE1lbVVpbnQxNltpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXBhcmVudCBvYmplY3QgdG8gZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQG5vdGUgUmVwYXJlbnRpbmcgaXMgbm90IHRyaXZpYWwgYW5kIG1pZ2h0IGhhdmUgYSBub3RpY2VhYmxlIHBlcmZvcm1hbmNlIGltcGFjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdQYXJlbnQgTmV3IHBhcmVudCBvciBgbnVsbGAgdG8gcGFyZW50IHRvIHJvb3RcbiAgICAgKi9cbiAgICBzZXQgcGFyZW50KG5ld1BhcmVudCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3NldF9wYXJlbnQodGhpcy5vYmplY3RJZCwgbmV3UGFyZW50ID09IG51bGwgPyAwIDogbmV3UGFyZW50Lm9iamVjdElkKTtcbiAgICB9XG4gICAgLyoqIE9iamVjdCBpbmRleCBpbiB0aGUgbWFuYWdlci4gKi9cbiAgICBnZXQgb2JqZWN0SWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vYmplY3RJZDtcbiAgICB9XG4gICAgLyoqIEhvc3RpbmcgZW5naW5lIGluc3RhbmNlLiAqL1xuICAgIGdldCBlbmdpbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IGxvY2FsIHRyYW5zZm9ybWF0aW9uICh0cmFuc2xhdGlvbiwgcm90YXRpb24gYW5kIHNjYWxpbmcpIHRvIGlkZW50aXR5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHJlc2V0VHJhbnNmb3JtKCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3Jlc2V0X3RyYW5zbGF0aW9uX3JvdGF0aW9uKHRoaXMub2JqZWN0SWQpO1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3Jlc2V0X3NjYWxpbmcodGhpcy5vYmplY3RJZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCBsb2NhbCBwb3NpdGlvbiBhbmQgcm90YXRpb24gdG8gaWRlbnRpdHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgcmVzZXRQb3NpdGlvblJvdGF0aW9uKCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3Jlc2V0X3RyYW5zbGF0aW9uX3JvdGF0aW9uKHRoaXMub2JqZWN0SWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELnJlc2V0UG9zaXRpb25Sb3RhdGlvbn0gaW5zdGVhZC4gKi9cbiAgICByZXNldFRyYW5zbGF0aW9uUm90YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCBsb2NhbCByb3RhdGlvbiwga2VlcCB0cmFuc2xhdGlvbi5cbiAgICAgKlxuICAgICAqIEBub3RlIFRvIHJlc2V0IGJvdGggcm90YXRpb24gYW5kIHRyYW5zbGF0aW9uLCBwcmVmZXJcbiAgICAgKiAgICAgICB7QGxpbmsgcmVzZXRUcmFuc2xhdGlvblJvdGF0aW9ufS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICByZXNldFJvdGF0aW9uKCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3Jlc2V0X3JvdGF0aW9uKHRoaXMub2JqZWN0SWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgbG9jYWwgdHJhbnNsYXRpb24sIGtlZXAgcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAbm90ZSBUbyByZXNldCBib3RoIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGlvbiwgcHJlZmVyXG4gICAgICogICAgICAge0BsaW5rIHJlc2V0VHJhbnNsYXRpb25Sb3RhdGlvbn0uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgcmVzZXRQb3NpdGlvbigpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9yZXNldF90cmFuc2xhdGlvbih0aGlzLm9iamVjdElkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5yZXNldFBvc2l0aW9ufSBpbnN0ZWFkLiAqL1xuICAgIHJlc2V0VHJhbnNsYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc2V0UG9zaXRpb24oKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgbG9jYWwgc2NhbGluZyB0byBpZGVudGl0eSAoYGBbMS4wLCAxLjAsIDEuMF1gYCkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgcmVzZXRTY2FsaW5nKCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3Jlc2V0X3NjYWxpbmcodGhpcy5vYmplY3RJZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB7QGxpbmsgT2JqZWN0M0QudHJhbnNsYXRlTG9jYWx9IGluc3RlYWQuICovXG4gICAgdHJhbnNsYXRlKHYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlTG9jYWwodik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZSBvYmplY3QgYnkgYSB2ZWN0b3IgaW4gdGhlIHBhcmVudCdzIHNwYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHYgVmVjdG9yIHRvIHRyYW5zbGF0ZSBieS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICB0cmFuc2xhdGVMb2NhbCh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3RfdHJhbnNsYXRlKHRoaXMub2JqZWN0SWQsIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIG9iamVjdCBieSBhIHZlY3RvciBpbiBvYmplY3Qgc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBWZWN0b3IgdG8gdHJhbnNsYXRlIGJ5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHRyYW5zbGF0ZU9iamVjdCh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3RfdHJhbnNsYXRlX29iaih0aGlzLm9iamVjdElkLCB2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZSBvYmplY3QgYnkgYSB2ZWN0b3IgaW4gd29ybGQgc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBWZWN0b3IgdG8gdHJhbnNsYXRlIGJ5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHRyYW5zbGF0ZVdvcmxkKHYpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF90cmFuc2xhdGVfd29ybGQodGhpcy5vYmplY3RJZCwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB7QGxpbmsgT2JqZWN0M0Qucm90YXRlQXhpc0FuZ2xlRGVnTG9jYWx9IGluc3RlYWQuICovXG4gICAgcm90YXRlQXhpc0FuZ2xlRGVnKGEsIGQpIHtcbiAgICAgICAgdGhpcy5yb3RhdGVBeGlzQW5nbGVEZWdMb2NhbChhLCBkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBhcm91bmQgZ2l2ZW4gYXhpcyBieSBnaXZlbiBhbmdsZSAoZGVncmVlcykgaW4gbG9jYWwgc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYSBWZWN0b3IgcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbiBheGlzLlxuICAgICAqIEBwYXJhbSBkIEFuZ2xlIGluIGRlZ3JlZXMuXG4gICAgICpcbiAgICAgKiBAbm90ZSBJZiB0aGUgb2JqZWN0IGlzIHRyYW5zbGF0ZWQgdGhlIHJvdGF0aW9uIHdpbGwgYmUgYXJvdW5kXG4gICAgICogICAgIHRoZSBwYXJlbnQuIFRvIHJvdGF0ZSBhcm91bmQgdGhlIG9iamVjdCBvcmlnaW4sIHVzZVxuICAgICAqICAgICB7QGxpbmsgcm90YXRlQXhpc0FuZ2xlRGVnT2JqZWN0fVxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgcm90YXRlQXhpc0FuZ2xlUmFkfVxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHJvdGF0ZUF4aXNBbmdsZURlZ0xvY2FsKGEsIGQpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9yb3RhdGVfYXhpc19hbmdsZSh0aGlzLm9iamVjdElkLCBhWzBdLCBhWzFdLCBhWzJdLCBkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5yb3RhdGVBeGlzQW5nbGVSYWRMb2NhbH0gaW5zdGVhZC4gKi9cbiAgICByb3RhdGVBeGlzQW5nbGVSYWQoYSwgZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb3RhdGVBeGlzQW5nbGVSYWRMb2NhbChhLCBkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUm90YXRlIGFyb3VuZCBnaXZlbiBheGlzIGJ5IGdpdmVuIGFuZ2xlIChyYWRpYW5zKSBpbiBsb2NhbCBzcGFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhIFZlY3RvciByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uIGF4aXMuXG4gICAgICogQHBhcmFtIGQgQW5nbGUgaW4gcmFkaWFucy5cbiAgICAgKlxuICAgICAqIEBub3RlIElmIHRoZSBvYmplY3QgaXMgdHJhbnNsYXRlZCB0aGUgcm90YXRpb24gd2lsbCBiZSBhcm91bmRcbiAgICAgKiAgICAgdGhlIHBhcmVudC4gVG8gcm90YXRlIGFyb3VuZCB0aGUgb2JqZWN0IG9yaWdpbiwgdXNlXG4gICAgICogICAgIHtAbGluayByb3RhdGVBeGlzQW5nbGVEZWdPYmplY3R9XG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayByb3RhdGVBeGlzQW5nbGVEZWd9XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgcm90YXRlQXhpc0FuZ2xlUmFkTG9jYWwoYSwgZCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3JvdGF0ZV9heGlzX2FuZ2xlX3JhZCh0aGlzLm9iamVjdElkLCBhWzBdLCBhWzFdLCBhWzJdLCBkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBhcm91bmQgZ2l2ZW4gYXhpcyBieSBnaXZlbiBhbmdsZSAoZGVncmVlcykgaW4gb2JqZWN0IHNwYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGEgVmVjdG9yIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb24gYXhpcy5cbiAgICAgKiBAcGFyYW0gZCBBbmdsZSBpbiBkZWdyZWVzLlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byBwcmVwZW5kaW5nIGEgcm90YXRpb24gcXVhdGVybmlvbiB0byB0aGUgb2JqZWN0J3NcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBzZWUge0BsaW5rIHJvdGF0ZUF4aXNBbmdsZVJhZE9iamVjdH1cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICByb3RhdGVBeGlzQW5nbGVEZWdPYmplY3QoYSwgZCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3JvdGF0ZV9heGlzX2FuZ2xlX29iaih0aGlzLm9iamVjdElkLCBhWzBdLCBhWzFdLCBhWzJdLCBkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBhcm91bmQgZ2l2ZW4gYXhpcyBieSBnaXZlbiBhbmdsZSAocmFkaWFucykgaW4gb2JqZWN0IHNwYWNlXG4gICAgICogRXF1aXZhbGVudCB0byBwcmVwZW5kaW5nIGEgcm90YXRpb24gcXVhdGVybmlvbiB0byB0aGUgb2JqZWN0J3NcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhIFZlY3RvciByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uIGF4aXNcbiAgICAgKiBAcGFyYW0gZCBBbmdsZSBpbiBkZWdyZWVzXG4gICAgICpcbiAgICAgKiBAc2VlIHtAbGluayByb3RhdGVBeGlzQW5nbGVEZWdPYmplY3R9XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgcm90YXRlQXhpc0FuZ2xlUmFkT2JqZWN0KGEsIGQpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9yb3RhdGVfYXhpc19hbmdsZV9yYWRfb2JqKHRoaXMub2JqZWN0SWQsIGFbMF0sIGFbMV0sIGFbMl0sIGQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELnJvdGF0ZUxvY2FsfSBpbnN0ZWFkLiAqL1xuICAgIHJvdGF0ZShxKSB7XG4gICAgICAgIHRoaXMucm90YXRlTG9jYWwocSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSb3RhdGUgYnkgYSBxdWF0ZXJuaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHEgdGhlIFF1YXRlcm5pb24gdG8gcm90YXRlIGJ5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHJvdGF0ZUxvY2FsKHEpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9yb3RhdGVfcXVhdCh0aGlzLm9iamVjdElkLCBxWzBdLCBxWzFdLCBxWzJdLCBxWzNdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJvdGF0ZSBieSBhIHF1YXRlcm5pb24gaW4gb2JqZWN0IHNwYWNlLlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byBwcmVwZW5kaW5nIGEgcm90YXRpb24gcXVhdGVybmlvbiB0byB0aGUgb2JqZWN0J3NcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBxIHRoZSBRdWF0ZXJuaW9uIHRvIHJvdGF0ZSBieS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICByb3RhdGVPYmplY3QocSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3JvdGF0ZV9xdWF0X29iaih0aGlzLm9iamVjdElkLCBxWzBdLCBxWzFdLCBxWzJdLCBxWzNdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5zY2FsZUxvY2FsfSBpbnN0ZWFkLiAqL1xuICAgIHNjYWxlKHYpIHtcbiAgICAgICAgdGhpcy5zY2FsZUxvY2FsKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2NhbGUgb2JqZWN0IGJ5IGEgdmVjdG9yIGluIG9iamVjdCBzcGFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2IFZlY3RvciB0byBzY2FsZSBieS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICBzY2FsZUxvY2FsKHYpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9zY2FsZSh0aGlzLm9iamVjdElkLCB2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldFBvc2l0aW9uTG9jYWwob3V0ID0gbmV3IEZsb2F0MzJBcnJheSgzKSkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIC8qIFRyYW5zbGF0aW9uIGlzIGRpZmZlcmVudCB0aGFuIHJvdGF0aW9uICYgc2NhbGluZy5cbiAgICAgICAgICogV2UgY2FuJ3Qgc2ltcGx5IHJlYWQgdGhlIG1lbW9yeS4gKi9cbiAgICAgICAgd2FzbS5fd2xfb2JqZWN0X2dldF90cmFuc2xhdGlvbl9sb2NhbCh0aGlzLm9iamVjdElkLCB3YXNtLl90ZW1wTWVtKTtcbiAgICAgICAgb3V0WzBdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzBdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uX3RlbXBNZW1GbG9hdFsyXTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZ2V0VHJhbnNsYXRpb25Mb2NhbChvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvc2l0aW9uTG9jYWwob3V0KTtcbiAgICB9XG4gICAgZ2V0UG9zaXRpb25Xb3JsZChvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDMpKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgLyogVHJhbnNsYXRpb24gaXMgZGlmZmVyZW50IHRoYW4gcm90YXRpb24gJiBzY2FsaW5nLlxuICAgICAgICAgKiBXZSBjYW4ndCBzaW1wbHkgcmVhZCB0aGUgbWVtb3J5LiAqL1xuICAgICAgICB3YXNtLl93bF9vYmplY3RfZ2V0X3RyYW5zbGF0aW9uX3dvcmxkKHRoaXMub2JqZWN0SWQsIHdhc20uX3RlbXBNZW0pO1xuICAgICAgICBvdXRbMF0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMF07XG4gICAgICAgIG91dFsxXSA9IHdhc20uX3RlbXBNZW1GbG9hdFsxXTtcbiAgICAgICAgb3V0WzJdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzJdO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBnZXRUcmFuc2xhdGlvbldvcmxkKG91dCA9IG5ldyBGbG9hdDMyQXJyYXkoMykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UG9zaXRpb25Xb3JsZChvdXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgLyBvYmplY3Qgc3BhY2UgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBDb25jYXRlbmF0ZXMgYSBuZXcgdHJhbnNsYXRpb24gZHVhbCBxdWF0ZXJuaW9uIG9udG8gdGhlIGV4aXN0aW5nIHJvdGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHYgTmV3IGxvY2FsIHBvc2l0aW9uIGFycmF5L3ZlY3RvciwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHNldFBvc2l0aW9uTG9jYWwodikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3NldF90cmFuc2xhdGlvbl9sb2NhbCh0aGlzLm9iamVjdElkLCB2WzBdLCB2WzFdLCB2WzJdKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5zZXRQb3NpdGlvbkxvY2FsfSBpbnN0ZWFkLiAqL1xuICAgIHNldFRyYW5zbGF0aW9uTG9jYWwodikge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRQb3NpdGlvbkxvY2FsKHYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgd29ybGQgc3BhY2UgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBBcHBsaWVzIHRoZSBpbnZlcnNlIHBhcmVudCB0cmFuc2Zvcm0gd2l0aCBhIG5ldyB0cmFuc2xhdGlvbiBkdWFsIHF1YXRlcm5pb25cbiAgICAgKiB3aGljaCBpcyBjb25jYXRlbmF0ZWQgb250byB0aGUgZXhpc3Rpbmcgcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgd29ybGQgcG9zaXRpb24gYXJyYXkvdmVjdG9yLCBleHBlY3RlZCB0byBoYXZlIGF0IGxlYXN0IDMgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgc2V0UG9zaXRpb25Xb3JsZCh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3Rfc2V0X3RyYW5zbGF0aW9uX3dvcmxkKHRoaXMub2JqZWN0SWQsIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELnNldFBvc2l0aW9uV29ybGR9IGluc3RlYWQuICovXG4gICAgc2V0VHJhbnNsYXRpb25Xb3JsZCh2KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFBvc2l0aW9uV29ybGQodik7XG4gICAgfVxuICAgIGdldFNjYWxpbmdMb2NhbChvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDMpKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgcHRyID0gd2FzbS5fd2xfb2JqZWN0X3NjYWxpbmdfbG9jYWwodGhpcy5vYmplY3RJZCkgLyA0OyAvKiBBbGlnbiBGMzIgKi9cbiAgICAgICAgb3V0WzBdID0gd2FzbS5IRUFQRjMyW3B0cl07XG4gICAgICAgIG91dFsxXSA9IHdhc20uSEVBUEYzMltwdHIgKyAxXTtcbiAgICAgICAgb3V0WzJdID0gd2FzbS5IRUFQRjMyW3B0ciArIDJdO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgLyBvYmplY3Qgc3BhY2Ugc2NhbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2IE5ldyBsb2NhbCBzY2FsaW5nIGFycmF5L3ZlY3RvciwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHNldFNjYWxpbmdMb2NhbCh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3Rfc2V0X3NjYWxpbmdfbG9jYWwodGhpcy5vYmplY3RJZCwgdlswXSwgdlsxXSwgdlsyXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXRTY2FsaW5nV29ybGQob3V0ID0gbmV3IEZsb2F0MzJBcnJheSgzKSkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIGNvbnN0IHB0ciA9IHdhc20uX3dsX29iamVjdF9zY2FsaW5nX3dvcmxkKHRoaXMub2JqZWN0SWQpIC8gNDsgLyogQWxpZ24gRjMyICovXG4gICAgICAgIG91dFswXSA9IHdhc20uSEVBUEYzMltwdHJdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLkhFQVBGMzJbcHRyICsgMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uSEVBUEYzMltwdHIgKyAyXTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IFdvcmxkIHNwYWNlIHNjYWxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgd29ybGQgc2NhbGluZyBhcnJheS92ZWN0b3IsIGV4cGVjdGVkIHRvIGhhdmUgYXQgbGVhc3QgMyBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICBzZXRTY2FsaW5nV29ybGQodikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3NldF9zY2FsaW5nX3dvcmxkKHRoaXMub2JqZWN0SWQsIHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0Um90YXRpb25Mb2NhbChvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDQpKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgcHRyID0gd2FzbS5fd2xfb2JqZWN0X3RyYW5zX2xvY2FsKHRoaXMub2JqZWN0SWQpIC8gNDsgLyogQWxpZ24gRjMyICovXG4gICAgICAgIC8qIFRoZSBmaXJzdCA0IGZsb2F0cyByZXByZXNlbnQgdGhlIHJvdGF0aW9uIHF1YXRlcm5pb24uICovXG4gICAgICAgIG91dFswXSA9IHdhc20uSEVBUEYzMltwdHJdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLkhFQVBGMzJbcHRyICsgMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uSEVBUEYzMltwdHIgKyAyXTtcbiAgICAgICAgb3V0WzNdID0gd2FzbS5IRUFQRjMyW3B0ciArIDNdO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgc3BhY2Ugcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgd29ybGQgcm90YXRpb24gYXJyYXkvdmVjdG9yLCBleHBlY3RlZCB0byBoYXZlIGF0IGxlYXN0IDQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgc2V0Um90YXRpb25Mb2NhbCh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3Rfc2V0X3JvdGF0aW9uX2xvY2FsKHRoaXMub2JqZWN0SWQsIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0Um90YXRpb25Xb3JsZChvdXQgPSBuZXcgRmxvYXQzMkFycmF5KDQpKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgcHRyID0gd2FzbS5fd2xfb2JqZWN0X3RyYW5zX3dvcmxkKHRoaXMub2JqZWN0SWQpIC8gNDsgLyogQWxpZ24gRjMyICovXG4gICAgICAgIC8qIFRoZSBmaXJzdCA0IGZsb2F0cyByZXByZXNlbnQgdGhlIHJvdGF0aW9uIHF1YXRlcm5pb24uICovXG4gICAgICAgIG91dFswXSA9IHdhc20uSEVBUEYzMltwdHJdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLkhFQVBGMzJbcHRyICsgMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uSEVBUEYzMltwdHIgKyAyXTtcbiAgICAgICAgb3V0WzNdID0gd2FzbS5IRUFQRjMyW3B0ciArIDNdO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgc3BhY2Ugcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgd29ybGQgcm90YXRpb24gYXJyYXkvdmVjdG9yLCBleHBlY3RlZCB0byBoYXZlIGF0IGxlYXN0IDQgZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgc2V0Um90YXRpb25Xb3JsZCh2KSB7XG4gICAgICAgIHRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3Rfc2V0X3JvdGF0aW9uX3dvcmxkKHRoaXMub2JqZWN0SWQsIHZbMF0sIHZbMV0sIHZbMl0sIHZbM10pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0VHJhbnNmb3JtTG9jYWwob3V0ID0gbmV3IEZsb2F0MzJBcnJheSg4KSkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIGNvbnN0IHB0ciA9IHdhc20uX3dsX29iamVjdF90cmFuc19sb2NhbCh0aGlzLm9iamVjdElkKSAvIDQ7IC8qIEFsaWduIEYzMiAqL1xuICAgICAgICBvdXRbMF0gPSB3YXNtLkhFQVBGMzJbcHRyXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5IRUFQRjMyW3B0ciArIDFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLkhFQVBGMzJbcHRyICsgMl07XG4gICAgICAgIG91dFszXSA9IHdhc20uSEVBUEYzMltwdHIgKyAzXTtcbiAgICAgICAgb3V0WzRdID0gd2FzbS5IRUFQRjMyW3B0ciArIDRdO1xuICAgICAgICBvdXRbNV0gPSB3YXNtLkhFQVBGMzJbcHRyICsgNV07XG4gICAgICAgIG91dFs2XSA9IHdhc20uSEVBUEYzMltwdHIgKyA2XTtcbiAgICAgICAgb3V0WzddID0gd2FzbS5IRUFQRjMyW3B0ciArIDddO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgc3BhY2Ugcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdiBOZXcgbG9jYWwgdHJhbnNmb3JtIGFycmF5LCBleHBlY3RlZCB0byBoYXZlIGF0IGxlYXN0IDggZWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBSZWZlcmVuY2UgdG8gc2VsZiAoZm9yIG1ldGhvZCBjaGFpbmluZykuXG4gICAgICovXG4gICAgc2V0VHJhbnNmb3JtTG9jYWwodikge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIGNvbnN0IHB0ciA9IHdhc20uX3dsX29iamVjdF90cmFuc19sb2NhbCh0aGlzLm9iamVjdElkKSAvIDQ7IC8qIEFsaWduIEYzMiAqL1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyXSA9IHZbMF07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyAxXSA9IHZbMV07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyAyXSA9IHZbMl07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyAzXSA9IHZbM107XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyA0XSA9IHZbNF07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyA1XSA9IHZbNV07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyA2XSA9IHZbNl07XG4gICAgICAgIHdhc20uSEVBUEYzMltwdHIgKyA3XSA9IHZbN107XG4gICAgICAgIHRoaXMuc2V0RGlydHkoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldFRyYW5zZm9ybVdvcmxkKG91dCA9IG5ldyBGbG9hdDMyQXJyYXkoOCkpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCBwdHIgPSB3YXNtLl93bF9vYmplY3RfdHJhbnNfd29ybGQodGhpcy5vYmplY3RJZCkgLyA0OyAvKiBBbGlnbiBGMzIgKi9cbiAgICAgICAgb3V0WzBdID0gd2FzbS5IRUFQRjMyW3B0cl07XG4gICAgICAgIG91dFsxXSA9IHdhc20uSEVBUEYzMltwdHIgKyAxXTtcbiAgICAgICAgb3V0WzJdID0gd2FzbS5IRUFQRjMyW3B0ciArIDJdO1xuICAgICAgICBvdXRbM10gPSB3YXNtLkhFQVBGMzJbcHRyICsgM107XG4gICAgICAgIG91dFs0XSA9IHdhc20uSEVBUEYzMltwdHIgKyA0XTtcbiAgICAgICAgb3V0WzVdID0gd2FzbS5IRUFQRjMyW3B0ciArIDVdO1xuICAgICAgICBvdXRbNl0gPSB3YXNtLkhFQVBGMzJbcHRyICsgNl07XG4gICAgICAgIG91dFs3XSA9IHdhc20uSEVBUEYzMltwdHIgKyA3XTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHdvcmxkIHNwYWNlIHJvdGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHYgTmV3IHdvcmxkIHRyYW5zZm9ybSBhcnJheSwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCA4IGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVmZXJlbmNlIHRvIHNlbGYgKGZvciBtZXRob2QgY2hhaW5pbmcpLlxuICAgICAqL1xuICAgIHNldFRyYW5zZm9ybVdvcmxkKHYpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCBwdHIgPSB3YXNtLl93bF9vYmplY3RfdHJhbnNfd29ybGQodGhpcy5vYmplY3RJZCkgLyA0OyAvKiBBbGlnbiBGMzIgKi9cbiAgICAgICAgd2FzbS5IRUFQRjMyW3B0cl0gPSB2WzBdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgMV0gPSB2WzFdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgMl0gPSB2WzJdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgM10gPSB2WzNdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgNF0gPSB2WzRdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgNV0gPSB2WzVdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgNl0gPSB2WzZdO1xuICAgICAgICB3YXNtLkhFQVBGMzJbcHRyICsgN10gPSB2WzddO1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3RyYW5zX3dvcmxkX3RvX2xvY2FsKHRoaXMub2JqZWN0SWQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9jYWwgc3BhY2UgdHJhbnNmb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5zZXRUcmFuc2Zvcm1Mb2NhbH0gYW5kXG4gICAgICoge0BsaW5rIE9iamVjdDNELmdldFRyYW5zZm9ybUxvY2FsfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldCB0cmFuc2Zvcm1Mb2NhbCgpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh3YXNtLkhFQVBGMzIuYnVmZmVyLCB3YXNtLl93bF9vYmplY3RfdHJhbnNfbG9jYWwodGhpcy5vYmplY3RJZCksIDgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHQgTG9jYWwgc3BhY2UgdHJhbnNmb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjVcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELnNldFRyYW5zZm9ybUxvY2FsfSBhbmRcbiAgICAgKiB7QGxpbmsgT2JqZWN0M0QuZ2V0VHJhbnNmb3JtTG9jYWx9IGluc3RlYWQuXG4gICAgICovXG4gICAgc2V0IHRyYW5zZm9ybUxvY2FsKHQpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1Mb2NhbC5zZXQodCk7XG4gICAgICAgIHRoaXMuc2V0RGlydHkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2xvYmFsIC8gd29ybGQgc3BhY2UgdHJhbnNmb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBNYXkgcmVjb21wdXRlIHRyYW5zZm9ybWF0aW9ucyBvZiB0aGUgaGllcmFyY2h5IG9mIHRoaXMgb2JqZWN0LFxuICAgICAqIGlmIHRoZXkgd2VyZSBjaGFuZ2VkIGJ5IEphdmFTY3JpcHQgY29tcG9uZW50cyB0aGlzIGZyYW1lLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB7QGxpbmsgT2JqZWN0M0Quc2V0VHJhbnNmb3JtV29ybGR9IGFuZFxuICAgICAqIHtAbGluayBPYmplY3QzRC5nZXRUcmFuc2Zvcm1Xb3JsZH0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXQgdHJhbnNmb3JtV29ybGQoKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkod2FzbS5IRUFQRjMyLmJ1ZmZlciwgd2FzbS5fd2xfb2JqZWN0X3RyYW5zX3dvcmxkKHRoaXMub2JqZWN0SWQpLCA4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHdvcmxkIHRyYW5zZm9ybS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0IEdsb2JhbCAvIHdvcmxkIHNwYWNlIHRyYW5zZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOC41XG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5zZXRUcmFuc2Zvcm1Xb3JsZH0gYW5kXG4gICAgICoge0BsaW5rIE9iamVjdDNELmdldFRyYW5zZm9ybVdvcmxkfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHNldCB0cmFuc2Zvcm1Xb3JsZCh0KSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtV29ybGQuc2V0KHQpO1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3RyYW5zX3dvcmxkX3RvX2xvY2FsKHRoaXMub2JqZWN0SWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2NhbCAvIG9iamVjdCBzcGFjZSBzY2FsaW5nLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB7QGxpbmsgT2JqZWN0M0Quc2V0U2NhbGluZ0xvY2FsfSBhbmRcbiAgICAgKiB7QGxpbmsgT2JqZWN0M0QuZ2V0U2NhbGluZ0xvY2FsfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldCBzY2FsaW5nTG9jYWwoKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkod2FzbS5IRUFQRjMyLmJ1ZmZlciwgd2FzbS5fd2xfb2JqZWN0X3NjYWxpbmdfbG9jYWwodGhpcy5vYmplY3RJZCksIDMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgbG9jYWwgc3BhY2Ugc2NhbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzIExvY2FsIHNwYWNlIHNjYWxpbmcuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELnNldFNjYWxpbmdMb2NhbH0gYW5kXG4gICAgICoge0BsaW5rIE9iamVjdDNELmdldFNjYWxpbmdMb2NhbH0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBzZXQgc2NhbGluZ0xvY2FsKHMpIHtcbiAgICAgICAgdGhpcy5zY2FsaW5nTG9jYWwuc2V0KHMpO1xuICAgICAgICB0aGlzLnNldERpcnR5KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdsb2JhbCAvIHdvcmxkIHNwYWNlIHNjYWxpbmcuXG4gICAgICpcbiAgICAgKiBNYXkgcmVjb21wdXRlIHRyYW5zZm9ybWF0aW9ucyBvZiB0aGUgaGllcmFyY2h5IG9mIHRoaXMgb2JqZWN0LFxuICAgICAqIGlmIHRoZXkgd2VyZSBjaGFuZ2VkIGJ5IEphdmFTY3JpcHQgY29tcG9uZW50cyB0aGlzIGZyYW1lLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB7QGxpbmsgT2JqZWN0M0Quc2V0U2NhbGluZ1dvcmxkfSBhbmRcbiAgICAgKiB7QGxpbmsgT2JqZWN0M0QuZ2V0U2NhbGluZ1dvcmxkfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldCBzY2FsaW5nV29ybGQoKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkod2FzbS5IRUFQRjMyLmJ1ZmZlciwgd2FzbS5fd2xfb2JqZWN0X3NjYWxpbmdfd29ybGQodGhpcy5vYmplY3RJZCksIDMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgd29ybGQgc3BhY2Ugc2NhbGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0IFdvcmxkIHNwYWNlIHNjYWxpbmcuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELnNldFNjYWxpbmdXb3JsZH0gYW5kXG4gICAgICoge0BsaW5rIE9iamVjdDNELmdldFNjYWxpbmdXb3JsZH0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBzZXQgc2NhbGluZ1dvcmxkKHMpIHtcbiAgICAgICAgdGhpcy5zY2FsaW5nV29ybGQuc2V0KHMpO1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3NjYWxpbmdfd29ybGRfdG9fbG9jYWwodGhpcy5vYmplY3RJZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvY2FsIHNwYWNlIHJvdGF0aW9uLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOC43XG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5nZXRSb3RhdGlvbkxvY2FsfSBhbmRcbiAgICAgKiB7QGxpbmsgT2JqZWN0M0Quc2V0Um90YXRpb25Mb2NhbH0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBnZXQgcm90YXRpb25Mb2NhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtTG9jYWwuc3ViYXJyYXkoMCwgNCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdsb2JhbCAvIHdvcmxkIHNwYWNlIHJvdGF0aW9uXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELmdldFJvdGF0aW9uV29ybGR9IGFuZFxuICAgICAqIHtAbGluayBPYmplY3QzRC5zZXRSb3RhdGlvbldvcmxkfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldCByb3RhdGlvbldvcmxkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1Xb3JsZC5zdWJhcnJheSgwLCA0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IGxvY2FsIHNwYWNlIHJvdGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHIgTG9jYWwgc3BhY2Ugcm90YXRpb25cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguN1xuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSB7QGxpbmsgT2JqZWN0M0QuZ2V0Um90YXRpb25Mb2NhbH0gYW5kXG4gICAgICoge0BsaW5rIE9iamVjdDNELnNldFJvdGF0aW9uTG9jYWx9IGluc3RlYWQuXG4gICAgICovXG4gICAgc2V0IHJvdGF0aW9uTG9jYWwocikge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3NldF9yb3RhdGlvbl9sb2NhbCh0aGlzLm9iamVjdElkLCByWzBdLCByWzFdLCByWzJdLCByWzNdKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHdvcmxkIHNwYWNlIHJvdGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHIgR2xvYmFsIC8gd29ybGQgc3BhY2Ugcm90YXRpb24uXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2Uge0BsaW5rIE9iamVjdDNELmdldFJvdGF0aW9uV29ybGR9IGFuZFxuICAgICAqIHtAbGluayBPYmplY3QzRC5zZXRSb3RhdGlvbldvcmxkfSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHNldCByb3RhdGlvbldvcmxkKHIpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9zZXRfcm90YXRpb25fd29ybGQodGhpcy5vYmplY3RJZCwgclswXSwgclsxXSwgclsyXSwgclszXSk7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5nZXRGb3J3YXJkV29ybGR9IGluc3RlYWQuICovXG4gICAgZ2V0Rm9yd2FyZChvdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9yd2FyZFdvcmxkKG91dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIG9iamVjdCdzIGZvcndhcmQgZmFjaW5nIHdvcmxkIHNwYWNlIHZlY3Rvci5cbiAgICAgKlxuICAgICAqIFRoZSBmb3J3YXJkIHZlY3RvciBpbiBvYmplY3Qgc3BhY2UgaXMgYWxvbmcgdGhlIG5lZ2F0aXZlIHotYXhpcywgaS5lLixcbiAgICAgKiBgWzAsIDAsIC0xXWAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3V0IERlc3RpbmF0aW9uIGFycmF5L3ZlY3RvciwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIGVsZW1lbnRzLlxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBnZXRGb3J3YXJkV29ybGQob3V0KSB7XG4gICAgICAgIG91dFswXSA9IDA7XG4gICAgICAgIG91dFsxXSA9IDA7XG4gICAgICAgIG91dFsyXSA9IC0xO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybVZlY3RvcldvcmxkKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5nZXRVcFdvcmxkfSBpbnN0ZWFkLiAqL1xuICAgIGdldFVwKG91dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRVcFdvcmxkKG91dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIG9iamVjdCdzIHVwIGZhY2luZyB3b3JsZCBzcGFjZSB2ZWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3V0IERlc3RpbmF0aW9uIGFycmF5L3ZlY3RvciwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIGVsZW1lbnRzLlxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBnZXRVcFdvcmxkKG91dCkge1xuICAgICAgICBvdXRbMF0gPSAwO1xuICAgICAgICBvdXRbMV0gPSAxO1xuICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybVZlY3RvcldvcmxkKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIHtAbGluayBPYmplY3QzRC5nZXRSaWdodFdvcmxkfSBpbnN0ZWFkLiAqL1xuICAgIGdldFJpZ2h0KG91dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSaWdodFdvcmxkKG91dCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIG9iamVjdCdzIHJpZ2h0IGZhY2luZyB3b3JsZCBzcGFjZSB2ZWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3V0IERlc3RpbmF0aW9uIGFycmF5L3ZlY3RvciwgZXhwZWN0ZWQgdG8gaGF2ZSBhdCBsZWFzdCAzIGVsZW1lbnRzLlxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBnZXRSaWdodFdvcmxkKG91dCkge1xuICAgICAgICBvdXRbMF0gPSAxO1xuICAgICAgICBvdXRbMV0gPSAwO1xuICAgICAgICBvdXRbMl0gPSAwO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybVZlY3RvcldvcmxkKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHZlY3RvciBieSB0aGlzIG9iamVjdCdzIHdvcmxkIHRyYW5zZm9ybS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdXQgT3V0IHZlY3RvclxuICAgICAqIEBwYXJhbSB2IFZlY3RvciB0byB0cmFuc2Zvcm0sIGRlZmF1bHQgYG91dGBcbiAgICAgKiBAcmV0dXJuIFRoZSBgb3V0YCBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1WZWN0b3JXb3JsZChvdXQsIHYgPSBvdXQpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMF0gPSB2WzBdO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMV0gPSB2WzFdO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMl0gPSB2WzJdO1xuICAgICAgICB3YXNtLl93bF9vYmplY3RfdHJhbnNmb3JtVmVjdG9yV29ybGQodGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIG91dFswXSA9IHdhc20uX3RlbXBNZW1GbG9hdFswXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHZlY3RvciBieSB0aGlzIG9iamVjdCdzIGxvY2FsIHRyYW5zZm9ybS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdXQgT3V0IHZlY3RvclxuICAgICAqIEBwYXJhbSB2IFZlY3RvciB0byB0cmFuc2Zvcm0sIGRlZmF1bHQgYG91dGBcbiAgICAgKiBAcmV0dXJuIFRoZSBgb3V0YCBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1WZWN0b3JMb2NhbChvdXQsIHYgPSBvdXQpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMF0gPSB2WzBdO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMV0gPSB2WzFdO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMl0gPSB2WzJdO1xuICAgICAgICB3YXNtLl93bF9vYmplY3RfdHJhbnNmb3JtVmVjdG9yTG9jYWwodGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIG91dFswXSA9IHdhc20uX3RlbXBNZW1GbG9hdFswXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHBvaW50IGJ5IHRoaXMgb2JqZWN0J3Mgd29ybGQgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBPdXQgcG9pbnQuXG4gICAgICogQHBhcmFtIHAgUG9pbnQgdG8gdHJhbnNmb3JtLCBkZWZhdWx0IGBvdXRgLlxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguN1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVBvaW50V29ybGQob3V0LCBwID0gb3V0KSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0WzBdID0gcFswXTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0WzFdID0gcFsxXTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0WzJdID0gcFsyXTtcbiAgICAgICAgd2FzbS5fd2xfb2JqZWN0X3RyYW5zZm9ybVBvaW50V29ybGQodGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIG91dFswXSA9IHdhc20uX3RlbXBNZW1GbG9hdFswXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHBvaW50IGJ5IHRoaXMgb2JqZWN0J3MgbG9jYWwgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBPdXQgcG9pbnQuXG4gICAgICogQHBhcmFtIHAgUG9pbnQgdG8gdHJhbnNmb3JtLCBkZWZhdWx0IGBvdXRgLlxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguN1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVBvaW50TG9jYWwob3V0LCBwID0gb3V0KSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0WzBdID0gcFswXTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0WzFdID0gcFsxXTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0WzJdID0gcFsyXTtcbiAgICAgICAgd2FzbS5fd2xfb2JqZWN0X3RyYW5zZm9ybVBvaW50TG9jYWwodGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIG91dFswXSA9IHdhc20uX3RlbXBNZW1GbG9hdFswXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHZlY3RvciBieSB0aGlzIG9iamVjdCdzIGludmVyc2Ugd29ybGQgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBPdXQgdmVjdG9yLlxuICAgICAqIEBwYXJhbSB2IFZlY3RvciB0byB0cmFuc2Zvcm0sIGRlZmF1bHQgYG91dGAuXG4gICAgICogQHJldHVybiBUaGUgYG91dGAgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOC43XG4gICAgICovXG4gICAgdHJhbnNmb3JtVmVjdG9ySW52ZXJzZVdvcmxkKG91dCwgdiA9IG91dCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFswXSA9IHZbMF07XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFsxXSA9IHZbMV07XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFsyXSA9IHZbMl07XG4gICAgICAgIHdhc20uX3dsX29iamVjdF90cmFuc2Zvcm1WZWN0b3JJbnZlcnNlV29ybGQodGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIG91dFswXSA9IHdhc20uX3RlbXBNZW1GbG9hdFswXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHZlY3RvciBieSB0aGlzIG9iamVjdCdzIGludmVyc2UgbG9jYWwgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBPdXQgdmVjdG9yXG4gICAgICogQHBhcmFtIHYgVmVjdG9yIHRvIHRyYW5zZm9ybSwgZGVmYXVsdCBgb3V0YFxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguN1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVZlY3RvckludmVyc2VMb2NhbChvdXQsIHYgPSBvdXQpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMF0gPSB2WzBdO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMV0gPSB2WzFdO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXRbMl0gPSB2WzJdO1xuICAgICAgICB3YXNtLl93bF9vYmplY3RfdHJhbnNmb3JtVmVjdG9ySW52ZXJzZUxvY2FsKHRoaXMub2JqZWN0SWQsIHdhc20uX3RlbXBNZW0pO1xuICAgICAgICBvdXRbMF0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMF07XG4gICAgICAgIG91dFsxXSA9IHdhc20uX3RlbXBNZW1GbG9hdFsxXTtcbiAgICAgICAgb3V0WzJdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzJdO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gYSBwb2ludCBieSB0aGlzIG9iamVjdCdzIGludmVyc2Ugd29ybGQgdHJhbnNmb3JtLlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBPdXQgcG9pbnQuXG4gICAgICogQHBhcmFtIHAgUG9pbnQgdG8gdHJhbnNmb3JtLCBkZWZhdWx0IGBvdXRgLlxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguN1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVBvaW50SW52ZXJzZVdvcmxkKG91dCwgcCA9IG91dCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFswXSA9IHBbMF07XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFsxXSA9IHBbMV07XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdFsyXSA9IHBbMl07XG4gICAgICAgIHdhc20uX3dsX29iamVjdF90cmFuc2Zvcm1Qb2ludEludmVyc2VXb3JsZCh0aGlzLm9iamVjdElkLCB3YXNtLl90ZW1wTWVtKTtcbiAgICAgICAgb3V0WzBdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzBdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uX3RlbXBNZW1GbG9hdFsyXTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtIGEgcG9pbnQgYnkgdGhpcyBvYmplY3QncyBpbnZlcnNlIGxvY2FsIHRyYW5zZm9ybS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdXQgT3V0IHBvaW50LlxuICAgICAqIEBwYXJhbSBwIFBvaW50IHRvIHRyYW5zZm9ybSwgZGVmYXVsdCBgb3V0YC5cbiAgICAgKiBAcmV0dXJuIFRoZSBgb3V0YCBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1Qb2ludEludmVyc2VMb2NhbChvdXQsIHAgPSBvdXQpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXQuc2V0KHApO1xuICAgICAgICB3YXNtLl93bF9vYmplY3RfdHJhbnNmb3JtUG9pbnRJbnZlcnNlTG9jYWwodGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSk7XG4gICAgICAgIG91dFswXSA9IHdhc20uX3RlbXBNZW1GbG9hdFswXTtcbiAgICAgICAgb3V0WzFdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzFdO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMl07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhbiBvYmplY3Qgc3BhY2UgZHVhbCBxdWF0ZXJuaW9uIGludG8gd29ybGQgc3BhY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3V0IE91dCB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKiBAcGFyYW0gcSBMb2NhbCBzcGFjZSB0cmFuc2Zvcm1hdGlvbiwgZGVmYXVsdCBgb3V0YC5cbiAgICAgKiBAcmV0dXJuIFRoZSBgb3V0YCBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMC44LjdcbiAgICAgKi9cbiAgICB0b1dvcmxkU3BhY2VUcmFuc2Zvcm0ob3V0LCBxID0gb3V0KSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgd2FzbS5fdGVtcE1lbUZsb2F0LnNldChxKTtcbiAgICAgICAgd2FzbS5fd2xfb2JqZWN0X3RvV29ybGRTcGFjZVRyYW5zZm9ybSh0aGlzLm9iamVjdElkLCB3YXNtLl90ZW1wTWVtKTtcbiAgICAgICAgb3V0WzBdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzBdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uX3RlbXBNZW1GbG9hdFsyXTtcbiAgICAgICAgb3V0WzNdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzNdO1xuICAgICAgICBvdXRbNF0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbNF07XG4gICAgICAgIG91dFs1XSA9IHdhc20uX3RlbXBNZW1GbG9hdFs1XTtcbiAgICAgICAgb3V0WzZdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzZdO1xuICAgICAgICBvdXRbN10gPSB3YXNtLl90ZW1wTWVtRmxvYXRbN107XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHdvcmxkIHNwYWNlIGR1YWwgcXVhdGVybmlvbiBpbnRvIGxvY2FsIHNwYWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG91dCBPdXQgdHJhbnNmb3JtYXRpb25cbiAgICAgKiBAcGFyYW0gcSBXb3JsZCBzcGFjZSB0cmFuc2Zvcm1hdGlvbiwgZGVmYXVsdCBgb3V0YFxuICAgICAqIEByZXR1cm4gVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguN1xuICAgICAqL1xuICAgIHRvTG9jYWxTcGFjZVRyYW5zZm9ybShvdXQsIHEgPSBvdXQpIHtcbiAgICAgICAgY29uc3QgcCA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAocCkge1xuICAgICAgICAgICAgcC50b09iamVjdFNwYWNlVHJhbnNmb3JtKG91dCwgcSk7XG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdXQgIT09IHEpIHtcbiAgICAgICAgICAgIG91dFswXSA9IHFbMF07XG4gICAgICAgICAgICBvdXRbMV0gPSBxWzFdO1xuICAgICAgICAgICAgb3V0WzJdID0gcVsyXTtcbiAgICAgICAgICAgIG91dFszXSA9IHFbM107XG4gICAgICAgICAgICBvdXRbNF0gPSBxWzRdO1xuICAgICAgICAgICAgb3V0WzVdID0gcVs1XTtcbiAgICAgICAgICAgIG91dFs2XSA9IHFbNl07XG4gICAgICAgICAgICBvdXRbN10gPSBxWzddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIHdvcmxkIHNwYWNlIGR1YWwgcXVhdGVybmlvbiBpbnRvIG9iamVjdCBzcGFjZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdXQgT3V0IHRyYW5zZm9ybWF0aW9uLlxuICAgICAqIEBwYXJhbSBxIFdvcmxkIHNwYWNlIHRyYW5zZm9ybWF0aW9uLCBkZWZhdWx0IGBvdXRgXG4gICAgICogQHJldHVybiBUaGUgYG91dGAgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOC43XG4gICAgICovXG4gICAgdG9PYmplY3RTcGFjZVRyYW5zZm9ybShvdXQsIHEgPSBvdXQpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl90ZW1wTWVtRmxvYXQuc2V0KHEpO1xuICAgICAgICB3YXNtLl93bF9vYmplY3RfdG9PYmplY3RTcGFjZVRyYW5zZm9ybSh0aGlzLm9iamVjdElkLCB3YXNtLl90ZW1wTWVtKTtcbiAgICAgICAgb3V0WzBdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzBdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMV07XG4gICAgICAgIG91dFsyXSA9IHdhc20uX3RlbXBNZW1GbG9hdFsyXTtcbiAgICAgICAgb3V0WzNdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzNdO1xuICAgICAgICBvdXRbNF0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbNF07XG4gICAgICAgIG91dFs1XSA9IHdhc20uX3RlbXBNZW1GbG9hdFs1XTtcbiAgICAgICAgb3V0WzZdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzZdO1xuICAgICAgICBvdXRbN10gPSB3YXNtLl90ZW1wTWVtRmxvYXRbN107XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFR1cm4gdG93YXJkcyAvIGxvb2sgYXQgdGFyZ2V0LlxuICAgICAqXG4gICAgICogUm90YXRlcyB0aGUgb2JqZWN0IHNvIHRoYXQgaXRzIGZvcndhcmQgdmVjdG9yIGZhY2VzIHRvd2FyZHMgdGhlIHRhcmdldFxuICAgICAqIHBvc2l0aW9uLiBUaGUgYHVwYCB2ZWN0b3IgYWN0cyBhcyBhIGhpbnQgdG8gdW5pcXVlbHkgb3JpZW50IHRoZSBvYmplY3Qnc1xuICAgICAqIHVwIGRpcmVjdGlvbi4gV2hlbiBvcmllbnRpbmcgYSB2aWV3IGNvbXBvbmVudCwgdGhlIHByb2plY3RlZCBgdXBgIHZlY3RvclxuICAgICAqIGZhY2VzIHVwd2FyZHMgb24gdGhlIHZpZXdpbmcgcGxhbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcCBUYXJnZXQgcG9zaXRpb24gdG8gdHVybiB0b3dhcmRzLCBpbiB3b3JsZCBzcGFjZS5cbiAgICAgKiBAcGFyYW0gdXAgVXAgdmVjdG9yIHRvIGFsaWduIG9iamVjdCB3aXRoLCBpbiB3b3JsZCBzcGFjZS4gRGVmYXVsdCBpcyBgWzAsIDEsIDBdYC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlZmVyZW5jZSB0byBzZWxmIChmb3IgbWV0aG9kIGNoYWluaW5nKS5cbiAgICAgKi9cbiAgICBsb29rQXQocCwgdXAgPSBVUF9WRUNUT1IpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lLndhc20uX3dsX29iamVjdF9sb29rQXQodGhpcy5vYmplY3RJZCwgcFswXSwgcFsxXSwgcFsyXSwgdXBbMF0sIHVwWzFdLCB1cFsyXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKiogRGVzdHJveSB0aGUgb2JqZWN0IHdpdGggYWxsIG9mIGl0cyBjb21wb25lbnRzIGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgc2NlbmUgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfc2NlbmVfcmVtb3ZlX29iamVjdCh0aGlzLm9iamVjdElkKTtcbiAgICAgICAgdGhpcy5fb2JqZWN0SWQgPSAtMTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWFyayB0cmFuc2Zvcm1hdGlvbiBkaXJ0eS5cbiAgICAgKlxuICAgICAqIENhdXNlcyBhbiBldmVudHVhbCByZWNhbGN1bGF0aW9uIG9mIHtAbGluayB0cmFuc2Zvcm1Xb3JsZH0sIGVpdGhlclxuICAgICAqIG9uIG5leHQge0BsaW5rIGdldFRyYW5zbGF0aW9uV29ybGR9LCB7QGxpbmsgdHJhbnNmb3JtV29ybGR9IG9yXG4gICAgICoge0BsaW5rIHNjYWxpbmdXb3JsZH0gb3IgdGhlIGJlZ2lubmluZyBvZiBuZXh0IGZyYW1lLCB3aGljaGV2ZXJcbiAgICAgKiBoYXBwZW5zIGZpcnN0LlxuICAgICAqL1xuICAgIHNldERpcnR5KCkge1xuICAgICAgICB0aGlzLl9lbmdpbmUud2FzbS5fd2xfb2JqZWN0X3NldF9kaXJ0eSh0aGlzLm9iamVjdElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzYWJsZS9lbmFibGUgYWxsIGNvbXBvbmVudHMgb2YgdGhpcyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYiBOZXcgc3RhdGUgZm9yIHRoZSBjb21wb25lbnRzLlxuICAgICAqXG4gICAgICogQHNpbmNlIDAuOC41XG4gICAgICovXG4gICAgc2V0IGFjdGl2ZShiKSB7XG4gICAgICAgIGNvbnN0IGNvbXBzID0gdGhpcy5nZXRDb21wb25lbnRzKCk7XG4gICAgICAgIGZvciAobGV0IGMgb2YgY29tcHMpIHtcbiAgICAgICAgICAgIGMuYWN0aXZlID0gYjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRDb21wb25lbnQodHlwZU9yQ2xhc3MsIGluZGV4ID0gMCkge1xuICAgICAgICBjb25zdCB0eXBlID0gaXNTdHJpbmcodHlwZU9yQ2xhc3MpID8gdHlwZU9yQ2xhc3MgOiB0eXBlT3JDbGFzcy5UeXBlTmFtZTtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCBjb21wb25lbnRUeXBlID0gd2FzbS5fd2xfZ2V0X2NvbXBvbmVudF9tYW5hZ2VyX2luZGV4KHdhc20udGVtcFVURjgodHlwZSkpO1xuICAgICAgICBpZiAoY29tcG9uZW50VHlwZSA8IDApIHtcbiAgICAgICAgICAgIC8qIE5vdCBhIG5hdGl2ZSBjb21wb25lbnQsIHRyeSBqczogKi9cbiAgICAgICAgICAgIGNvbnN0IHR5cGVJbmRleCA9IHdhc20uX2NvbXBvbmVudFR5cGVJbmRpY2VzW3R5cGVdO1xuICAgICAgICAgICAgaWYgKHR5cGVJbmRleCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY29uc3QganNJbmRleCA9IHdhc20uX3dsX2dldF9qc19jb21wb25lbnRfaW5kZXgodGhpcy5vYmplY3RJZCwgdHlwZUluZGV4LCBpbmRleCk7XG4gICAgICAgICAgICByZXR1cm4ganNJbmRleCA8IDAgPyBudWxsIDogdGhpcy5fZW5naW5lLndhc20uX2NvbXBvbmVudHNbanNJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcG9uZW50SWQgPSB0aGlzLl9lbmdpbmUud2FzbS5fd2xfZ2V0X2NvbXBvbmVudF9pZCh0aGlzLm9iamVjdElkLCBjb21wb25lbnRUeXBlLCBpbmRleCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUuX3dyYXBDb21wb25lbnQodHlwZSwgY29tcG9uZW50VHlwZSwgY29tcG9uZW50SWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdHlwZU9yQ2xhc3MgVHlwZSBuYW1lLCBwYXNzIGEgZmFsc2V5IHZhbHVlIChgdW5kZWZpbmVkYCBvciBgbnVsbGApIHRvIHJldHJpZXZlIGFsbC5cbiAgICAgKiAgICAgSXQncyBhbHNvIHBvc3NpYmxlIHRvIGdpdmUgYSBjbGFzcyBkZWZpbml0aW9uLiBJbiB0aGlzIGNhc2UsIHRoZSBtZXRob2Qgd2lsbCB1c2UgdGhlIGBjbGFzcy5UeXBlTmFtZWAgZmllbGQgdG9cbiAgICAgKiAgICAgZmluZCB0aGUgY29tcG9uZW50cy5cbiAgICAgKiBAcmV0dXJucyBBbGwgY29tcG9uZW50cyBvZiBnaXZlbiB0eXBlIGF0dGFjaGVkIHRvIHRoaXMgb2JqZWN0LlxuICAgICAqXG4gICAgICogQG5vdGUgQXMgdGhpcyBmdW5jdGlvbiBpcyBub24tdHJpdmlhbCwgYXZvaWQgdXNpbmcgaXQgaW4gYHVwZGF0ZSgpYCByZXBlYXRlZGx5LFxuICAgICAqICAgICAgYnV0IHJhdGhlciBzdG9yZSBpdHMgcmVzdWx0IGluIGBpbml0KClgIG9yIGBzdGFydCgpYFxuICAgICAqIEB3YXJuaW5nIFRoaXMgbWV0aG9kIHdpbGwgY3VycmVudGx5IHJldHVybiBhdCBtb3N0IDM0MSBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIGdldENvbXBvbmVudHModHlwZU9yQ2xhc3MpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBsZXQgY29tcG9uZW50VHlwZSA9IG51bGw7XG4gICAgICAgIGxldCB0eXBlID0gbnVsbDtcbiAgICAgICAgaWYgKHR5cGVPckNsYXNzKSB7XG4gICAgICAgICAgICB0eXBlID0gaXNTdHJpbmcodHlwZU9yQ2xhc3MpID8gdHlwZU9yQ2xhc3MgOiB0eXBlT3JDbGFzcy5UeXBlTmFtZTtcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgPSB3YXNtLl90eXBlSW5kZXhGb3IodHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IFtdO1xuICAgICAgICBjb25zdCBtYXhDb21wcyA9IE1hdGguZmxvb3IoKHdhc20uX3RlbXBNZW1TaXplIC8gMykgKiAyKTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50c0NvdW50ID0gd2FzbS5fd2xfb2JqZWN0X2dldF9jb21wb25lbnRzKHRoaXMub2JqZWN0SWQsIHdhc20uX3RlbXBNZW0sIG1heENvbXBzKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gMiAqIGNvbXBvbmVudHNDb3VudDtcbiAgICAgICAgd2FzbS5fd2xfb2JqZWN0X2dldF9jb21wb25lbnRfdHlwZXModGhpcy5vYmplY3RJZCwgd2FzbS5fdGVtcE1lbSArIG9mZnNldCwgbWF4Q29tcHMpO1xuICAgICAgICBjb25zdCBqc01hbmFnZXJJbmRleCA9IHdhc20uX3R5cGVJbmRleEZvcignanMnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRzQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgdCA9IHdhc20uX3RlbXBNZW1VaW50OFtpICsgb2Zmc2V0XTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gd2FzbS5fdGVtcE1lbVVpbnQxNltpXTtcbiAgICAgICAgICAgIC8qIEhhbmRsZSBKUyB0eXBlcyBzZXBhcmF0ZWx5ICovXG4gICAgICAgICAgICBpZiAodCA9PSBqc01hbmFnZXJJbmRleCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVJbmRleCA9IHdhc20uX3dsX2dldF9qc19jb21wb25lbnRfaW5kZXhfZm9yX2lkKGNvbXBvbmVudElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wID0gd2FzbS5fY29tcG9uZW50c1t0eXBlSW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRUeXBlID09PSBudWxsIHx8IGNvbXAudHlwZSA9PSB0eXBlKVxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzLnB1c2goY29tcCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50VHlwZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hbmFnZXJOYW1lID0gd2FzbS5fdHlwZU5hbWVGb3IodCk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKHRoaXMuX2VuZ2luZS5fd3JhcENvbXBvbmVudChtYW5hZ2VyTmFtZSwgdCwgY29tcG9uZW50SWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHQgPT0gY29tcG9uZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIC8qIE9wdGltaXplZCBtYW5hZ2VyIG5hbWUgcmV0cmlldmFsLCBhbHJlYWR5IGhhdmUgdHlwZSAqL1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaCh0aGlzLl9lbmdpbmUuX3dyYXBDb21wb25lbnQodHlwZSwgY29tcG9uZW50VHlwZSwgY29tcG9uZW50SWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcG9uZW50cztcbiAgICB9XG4gICAgYWRkQ29tcG9uZW50KHR5cGVPckNsYXNzLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCB0eXBlID0gaXNTdHJpbmcodHlwZU9yQ2xhc3MpID8gdHlwZU9yQ2xhc3MgOiB0eXBlT3JDbGFzcy5UeXBlTmFtZTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50VHlwZSA9IHdhc20uX3R5cGVJbmRleEZvcih0eXBlKTtcbiAgICAgICAgbGV0IGNvbXBvbmVudCA9IG51bGw7XG4gICAgICAgIGxldCBjb21wb25lbnRJbmRleCA9IG51bGw7XG4gICAgICAgIGlmIChjb21wb25lbnRUeXBlIDwgMCkge1xuICAgICAgICAgICAgLyogSmF2YVNjcmlwdCBjb21wb25lbnQgKi9cbiAgICAgICAgICAgIGlmICghKHR5cGUgaW4gd2FzbS5fY29tcG9uZW50VHlwZUluZGljZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gY29tcG9uZW50IHR5cGUgJ1wiICsgdHlwZSArIFwiJ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gd2FzbS5fd2xfb2JqZWN0X2FkZF9qc19jb21wb25lbnQodGhpcy5vYmplY3RJZCwgd2FzbS5fY29tcG9uZW50VHlwZUluZGljZXNbdHlwZV0pO1xuICAgICAgICAgICAgY29tcG9uZW50SW5kZXggPSB3YXNtLl93bF9nZXRfanNfY29tcG9uZW50X2luZGV4X2Zvcl9pZChjb21wb25lbnRJZCk7XG4gICAgICAgICAgICBjb21wb25lbnQgPSB3YXNtLl9jb21wb25lbnRzW2NvbXBvbmVudEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qIG5hdGl2ZSBjb21wb25lbnQgKi9cbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudElkID0gd2FzbS5fd2xfb2JqZWN0X2FkZF9jb21wb25lbnQodGhpcy5vYmplY3RJZCwgY29tcG9uZW50VHlwZSk7XG4gICAgICAgICAgICBjb21wb25lbnQgPSB0aGlzLl9lbmdpbmUuX3dyYXBDb21wb25lbnQodHlwZSwgY29tcG9uZW50VHlwZSwgY29tcG9uZW50SWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3RvciA9IGNvbXBvbmVudC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBjdG9yLlByb3BlcnRpZXMpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRba2V5XSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qIEV4cGxpY2l0bHkgaW5pdGlhbGl6ZSBuYXRpdmUgY29tcG9uZW50cyAqL1xuICAgICAgICBpZiAoY29tcG9uZW50VHlwZSA8IDApIHtcbiAgICAgICAgICAgIC8qIEB0b2RvOiBgY29tcG9uZW50SW5kZXhgIGNhbiBiZSBudWxsIGhlcmUsIHRoYXQncyBhbiBlcnJvciAqL1xuICAgICAgICAgICAgd2FzbS5fd2xqc19jb21wb25lbnRfaW5pdChjb21wb25lbnRJbmRleCk7XG4gICAgICAgICAgICAvKiBzdGFydCgpIGlzIGNhbGxlZCB0aHJvdWdoIG9uQWN0aXZhdGUoKSAqL1xuICAgICAgICB9XG4gICAgICAgIC8qIElmIGl0IHdhcyBub3QgZXhwbGljaXRseSByZXF1ZXN0ZWQgYnkgdGhlIHVzZXIgdG8gbGVhdmUgdGhlIGNvbXBvbmVudCBpbmFjdGl2ZSxcbiAgICAgICAgICogd2UgYWN0aXZhdGUgaXQgYXMgYSBmaW5hbCBzdGVwLiBUaGlzIGludmFsaWRhdGVzIGNvbXBvbmVudEluZGV4ISAqL1xuICAgICAgICBpZiAoIXBhcmFtcyB8fCAhKCdhY3RpdmUnIGluIHBhcmFtcyAmJiAhcGFyYW1zLmFjdGl2ZSkpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZ2l2ZW4gb2JqZWN0J3MgdHJhbnNmb3JtYXRpb24gaGFzIGNoYW5nZWQuXG4gICAgICovXG4gICAgZ2V0IGNoYW5nZWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2VuZ2luZS53YXNtLl93bF9vYmplY3RfaXNfY2hhbmdlZCh0aGlzLm9iamVjdElkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGVxdWFsaXR5IGJ5IGNvbXBhcmluZyB3aGV0aGVyIHRoZSB3cmFwcGVkIG5hdGl2ZSBvYmplY3QgaWRzIGFyZVxuICAgICAqIGVxdWFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG90aGVyT2JqZWN0IE9iamVjdCB0byBjaGVjayBlcXVhbGl0eSB3aXRoLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhpcyBvYmplY3QgZXF1YWxzIHRoZSBnaXZlbiBvYmplY3QuXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyT2JqZWN0KSB7XG4gICAgICAgIGlmICghb3RoZXJPYmplY3QpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdElkID09IG90aGVyT2JqZWN0Lm9iamVjdElkO1xuICAgIH1cbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgYSBuYXRpdmUgc2tpbiBkYXRhLlxuICovXG5leHBvcnQgY2xhc3MgU2tpbiB7XG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIHNraW4gaW4gdGhlIG1hbmFnZXIuXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIF9pbmRleDtcbiAgICAvKiogV29uZGVybGFuZCBFbmdpbmUgaW5zdGFuY2UuIEBoaWRkZW4gKi9cbiAgICBfZW5naW5lO1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fZW5naW5lID0gZW5naW5lO1xuICAgICAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICAgIH1cbiAgICAvKiogQW1vdW50IG9mIGpvaW50cyBpbiB0aGlzIHNraW4uICovXG4gICAgZ2V0IGpvaW50Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmdpbmUud2FzbS5fd2xfc2tpbl9nZXRfam9pbnRfY291bnQodGhpcy5faW5kZXgpO1xuICAgIH1cbiAgICAvKiogSm9pbnRzIG9iamVjdCBpZHMgZm9yIHRoaXMgc2tpbiAqL1xuICAgIGdldCBqb2ludElkcygpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQxNkFycmF5KHdhc20uSEVBUFUxNi5idWZmZXIsIHdhc20uX3dsX3NraW5fam9pbnRfaWRzKHRoaXMuX2luZGV4KSwgdGhpcy5qb2ludENvdW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRHVhbCBxdWF0ZXJuaW9ucyBpbiBhIGZsYXQgYXJyYXkgb2Ygc2l6ZSA4IHRpbWVzIHtAbGluayBqb2ludENvdW50fS5cbiAgICAgKlxuICAgICAqIEludmVyc2UgYmluZCB0cmFuc2Zvcm1zIG9mIHRoZSBza2luLlxuICAgICAqL1xuICAgIGdldCBpbnZlcnNlQmluZFRyYW5zZm9ybXMoKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkod2FzbS5IRUFQRjMyLmJ1ZmZlciwgd2FzbS5fd2xfc2tpbl9pbnZlcnNlX2JpbmRfdHJhbnNmb3Jtcyh0aGlzLl9pbmRleCksIDggKiB0aGlzLmpvaW50Q291bnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWZWN0b3JzIGluIGEgZmxhdCBhcnJheSBvZiBzaXplIDMgdGltZXMge0BsaW5rIGpvaW50Q291bnR9LlxuICAgICAqXG4gICAgICogSW52ZXJzZSBiaW5kIHNjYWxpbmdzIG9mIHRoZSBza2luLlxuICAgICAqL1xuICAgIGdldCBpbnZlcnNlQmluZFNjYWxpbmdzKCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHdhc20uSEVBUEYzMi5idWZmZXIsIHdhc20uX3dsX3NraW5faW52ZXJzZV9iaW5kX3NjYWxpbmdzKHRoaXMuX2luZGV4KSwgMyAqIHRoaXMuam9pbnRDb3VudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBlcXVhbGl0eSBieSBjb21wYXJpbmcgd2hldGhlciB0aGUgd3JhcHBlZCBuYXRpdmUgc2tpbiBpZHMgYXJlXG4gICAgICogZXF1YWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3RoZXJTa2luIFNraW4gdG8gY2hlY2sgZXF1YWxpdHkgd2l0aC5cbiAgICAgKiBAcmV0dXJucyBXaGV0aGVyIHRoaXMgc2tpbiBlcXVhbHMgdGhlIGdpdmVuIHNraW4uXG4gICAgICpcbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKi9cbiAgICBlcXVhbHMob3RoZXJTa2luKSB7XG4gICAgICAgIGlmICghb3RoZXJTa2luKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXggPT09IG90aGVyU2tpbi5faW5kZXg7XG4gICAgfVxufVxuLyogRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCA8IDEuMC4wLiAqL1xuZXhwb3J0IHsgT2JqZWN0M0QgYXMgT2JqZWN0IH07XG4vKipcbiAqIFJheSBoaXQuXG4gKlxuICogUmVzdWx0IG9mIGEge0BsaW5rIFNjZW5lLnJheUNhc3R9LlxuICpcbiAqIEBub3RlIHRoaXMgY2xhc3Mgd3JhcHMgaW50ZXJuYWwgZW5naW5lIGRhdGEgYW5kIHNob3VsZCBvbmx5IGJlIGNyZWF0ZWQgaW50ZXJuYWxseS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJheUhpdCB7XG4gICAgLyoqIFdvbmRlcmxhbmQgRW5naW5lIGluc3RhbmNlLiBAaGlkZGVuICovXG4gICAgX2VuZ2luZTtcbiAgICAvKiogUG9pbnRlciB0byB0aGUgbWVtb3J5IGhlYXAuICovXG4gICAgX3B0cjtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gcHRyIFBvaW50ZXIgdG8gdGhlIHJheSBoaXRzIG1lbW9yeS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUsIHB0cikge1xuICAgICAgICBpZiAoKHB0ciAmIDMpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc2FsaWduZWQgcG9pbnRlcjogcGxlYXNlIHJlcG9ydCBhIGJ1ZycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VuZ2luZSA9IGVuZ2luZTtcbiAgICAgICAgdGhpcy5fcHRyID0gcHRyO1xuICAgIH1cbiAgICAvKiogQXJyYXkgb2YgcmF5IGhpdCBsb2NhdGlvbnMuICovXG4gICAgZ2V0IGxvY2F0aW9ucygpIHtcbiAgICAgICAgbGV0IHAgPSB0aGlzLl9wdHI7XG4gICAgICAgIGxldCBsID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5oaXRDb3VudDsgKytpKSB7XG4gICAgICAgICAgICBsLnB1c2gobmV3IEZsb2F0MzJBcnJheSh0aGlzLl9lbmdpbmUud2FzbS5IRUFQRjMyLmJ1ZmZlciwgcCArIDEyICogaSwgMykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICAvKiogQXJyYXkgb2YgcmF5IGhpdCBub3JtYWxzIChvbmx5IHdoZW4gdXNpbmcge0BsaW5rIFBoeXNpY3MjcmF5Q2FzdH0uICovXG4gICAgZ2V0IG5vcm1hbHMoKSB7XG4gICAgICAgIGxldCBwID0gdGhpcy5fcHRyICsgNDg7XG4gICAgICAgIGxldCBsID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5oaXRDb3VudDsgKytpKSB7XG4gICAgICAgICAgICBsLnB1c2gobmV3IEZsb2F0MzJBcnJheSh0aGlzLl9lbmdpbmUud2FzbS5IRUFQRjMyLmJ1ZmZlciwgcCArIDEyICogaSwgMykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmVmZXIgdGhlc2UgdG8gcmVjYWxjdWxhdGluZyB0aGUgZGlzdGFuY2UgZnJvbSBsb2NhdGlvbnMuXG4gICAgICpcbiAgICAgKiBEaXN0YW5jZXMgb2YgYXJyYXkgaGl0cyB0byByYXkgb3JpZ2luLlxuICAgICAqL1xuICAgIGdldCBkaXN0YW5jZXMoKSB7XG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLl9wdHIgKyA0OCAqIDI7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX2VuZ2luZS53YXNtLkhFQVBGMzIuYnVmZmVyLCBwLCB0aGlzLmhpdENvdW50KTtcbiAgICB9XG4gICAgLyoqIEhpdCBvYmplY3RzICovXG4gICAgZ2V0IG9iamVjdHMoKSB7XG4gICAgICAgIGNvbnN0IEhFQVBVMTYgPSB0aGlzLl9lbmdpbmUud2FzbS5IRUFQVTE2O1xuICAgICAgICBjb25zdCBvYmplY3RzID0gW251bGwsIG51bGwsIG51bGwsIG51bGxdO1xuICAgICAgICBsZXQgcCA9ICh0aGlzLl9wdHIgKyAoNDggKiAyICsgMTYpKSA+PiAxO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaGl0Q291bnQ7ICsraSkge1xuICAgICAgICAgICAgb2JqZWN0c1tpXSA9IHRoaXMuX2VuZ2luZS53cmFwT2JqZWN0KEhFQVBVMTZbcCArIGldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0cztcbiAgICB9XG4gICAgLyoqIE51bWJlciBvZiBoaXRzIChtYXggNCkgKi9cbiAgICBnZXQgaGl0Q291bnQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLl9lbmdpbmUud2FzbS5IRUFQVTMyW3RoaXMuX3B0ciAvIDQgKyAzMF0sIDQpO1xuICAgIH1cbn1cbmNsYXNzIG1hdGgge1xuICAgIC8qKiAoRXhwZXJpbWVudGFsISkgQ3ViaWMgSGVybWl0ZSBzcGxpbmUgaW50ZXJwb2xhdGlvbiBmb3IgdmVjdG9yMyBhbmQgcXVhdGVybmlvbnMuXG4gICAgICpcbiAgICAgKiBXaXRoIGBmID09IDBgLCBgb3V0YCB3aWxsIGJlIGBiYCwgaWYgYGYgPT0gMWAsIGBvdXRgIHdpbGwgYmUgYy5cbiAgICAgKlxuICAgICAqIFdoZXRoZXIgYSBxdWF0ZXJuaW9uIG9yIHZlY3RvcjMgaW50ZXJwb2xhdGlvbiBpcyBpbnRlbmRlZCBpcyBkZXRlcm1pbmVkIGJ5XG4gICAgICogbGVuZ3RoIG9mIGBhYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdXQgQXJyYXkgdG8gd3JpdGUgcmVzdWx0IHRvLlxuICAgICAqIEBwYXJhbSBhIEZpcnN0IHRhbmdlbnQvaGFuZGxlLlxuICAgICAqIEBwYXJhbSBiIEZpcnN0IHBvaW50IG9yIHF1YXRlcm5pb24uXG4gICAgICogQHBhcmFtIGMgU2Vjb25kIHBvaW50IG9yIHF1YXRlcm5pb24uXG4gICAgICogQHBhcmFtIGQgU2Vjb25kIGhhbmRsZS5cbiAgICAgKiBAcGFyYW0gZiBJbnRlcnBvbGF0aW9uIGZhY3RvciBpbiBbMDsgMV0uXG4gICAgICogQHJldHVybnMgVGhlIGBvdXRgIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAwLjguNlxuICAgICAqL1xuICAgIHN0YXRpYyBjdWJpY0hlcm1pdGUob3V0LCBhLCBiLCBjLCBkLCBmLCBlbmdpbmUgPSBXTCkge1xuICAgICAgICBjb25zdCB3YXNtID0gZW5naW5lLndhc207XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdC5zdWJhcnJheSgwKS5zZXQoYSk7XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdC5zdWJhcnJheSg0KS5zZXQoYik7XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdC5zdWJhcnJheSg4KS5zZXQoYyk7XG4gICAgICAgIHdhc20uX3RlbXBNZW1GbG9hdC5zdWJhcnJheSgxMikuc2V0KGQpO1xuICAgICAgICBjb25zdCBpc1F1YXQgPSBhLmxlbmd0aCA9PSA0O1xuICAgICAgICB3YXNtLl93bF9tYXRoX2N1YmljSGVybWl0ZSh3YXNtLl90ZW1wTWVtICsgNCAqIDE2LCB3YXNtLl90ZW1wTWVtICsgNCAqIDAsIHdhc20uX3RlbXBNZW0gKyA0ICogNCwgd2FzbS5fdGVtcE1lbSArIDQgKiA4LCB3YXNtLl90ZW1wTWVtICsgNCAqIDEyLCBmLCBpc1F1YXQpO1xuICAgICAgICBvdXRbMF0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMTZdO1xuICAgICAgICBvdXRbMV0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMTddO1xuICAgICAgICBvdXRbMl0gPSB3YXNtLl90ZW1wTWVtRmxvYXRbMThdO1xuICAgICAgICBpZiAoaXNRdWF0KVxuICAgICAgICAgICAgb3V0WzNdID0gd2FzbS5fdGVtcE1lbUZsb2F0WzE5XTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG59XG5leHBvcnQgeyBtYXRoIH07XG4vKipcbiAqIENsYXNzIGZvciBhY2Nlc3NpbmcgaW50ZXJuYXRpb25hbGl6YXRpb24gKGkxOG4pIGZlYXR1cmVzLlxuICpcbiAqIEFsbG93cyB7QGxpbmsgSTE4Ti5vbkxhbmd1YWdlQ2hhbmdlZCBcImRldGVjdGluZyBsYW5ndWFnZSBjaGFuZ2VcIn0sXG4gKiB7QGxpbmsgSTE4Ti5sYW5ndWFnZSBcInNldHRpbmcgdGhlIGN1cnJlbnQgbGFuZ3VhZ2VcIn0gb3IgdHJhbnNsYXRpbmdcbiAqIHtAbGluayBJMThOLnRyYW5zbGF0ZSgpIFwiaW5kaXZpZHVhbCB0ZXJtc1wifS5cbiAqXG4gKiBJbnRlcm5hdGlvbmFsaXphdGlvbiB3b3JrcyB3aXRoIHRlcm1zLFxuICogYSBzdHJpbmcgdHlwZSBrZXl3b3JkIHRoYXQgaXMgbGlua2VkIHRvIGEgZGlmZmVyZW50IHRleHQgZm9yIGVhY2ggbGFuZ3VhZ2UuXG4gKlxuICogSW50ZXJuYWxseSwgc3RyaW5nIHBhcmFtZXRlcnMgZm9yIHRleHQgYW5kIGpzIGNvbXBvbmVudHMgYXJlXG4gKiBhdXRvbWF0aWNhbGx5IHN3YXBwZWQgZHVyaW5nIGxhbmd1YWdlIGNoYW5nZSwgZ2l2ZW4gdGhleSBhcmUgbGlua2VkIHRvIGEgdGVybS5cbiAqIElmIG1hbnVhbCB0ZXh0IHN3YXBwaW5nIGlzIGRlc2lyZWQsIHtAbGluayBJMThOLnRyYW5zbGF0ZSgpfVxuICogY2FuIGJlIHVzZWQgdG8gcmV0cmlldmUgdGhlIGN1cnJlbnQgdHJhbnNsYXRpb24gZm9yIGFueSB0ZXJtLlxuICpcbiAqIFlvdSBjYW4gYWxzbyB1c2UgdGhlIHtAbGluayBJMThOLm9uTGFuZ3VhZ2VDaGFuZ2VkfSB0byBtYW51YWxseSB1cGRhdGUgdGV4dFxuICogd2hlbiBhIGxhbmd1YWdlIGlzIGNoYW5nZWQgdG8gZm9yIGV4YW1wbGUgdXBkYXRlIGEgbnVtYmVyIGluIGEgc3RyaW5nLlxuICpcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY2xhc3MgSTE4TiB7XG4gICAgLyoqXG4gICAgICoge0BsaW5rIEVtaXR0ZXJ9IGZvciBsYW5ndWFnZSBjaGFuZ2UgZXZlbnRzLlxuICAgICAqXG4gICAgICogRmlyc3QgcGFyYW1ldGVyIHRvIGEgbGlzdGVuZXIgaXMgdGhlIG9sZCBsYW5ndWFnZSBpbmRleCxcbiAgICAgKiBzZWNvbmQgcGFyYW1ldGVyIGlzIHRoZSBuZXcgbGFuZ3VhZ2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBVc2FnZSBmcm9tIGEgd2l0aGluIGEgY29tcG9uZW50OlxuICAgICAqIGBgYGpzXG4gICAgICogdGhpcy5lbmdpbmUuaTE4bi5vbkxhbmd1YWdlQ2hhbmdlZC5hZGQoKG9sZExhbmd1YWdlSW5kZXgsIG5ld0xhbmd1YWdlSW5kZXgpID0+IHtcbiAgICAgKiAgICAgY29uc3Qgb2xkTGFuZ3VhZ2UgPSB0aGlzLmVuZ2luZS5pMThuLmxhbmd1YWdlTmFtZShvbGRMYW5ndWFnZUluZGV4KTtcbiAgICAgKiAgICAgY29uc3QgbmV3TGFuZ3VhZ2UgPSB0aGlzLmVuZ2luZS5pMThuLmxhbmd1YWdlTmFtZShuZXdMYW5ndWFnZUluZGV4KTtcbiAgICAgKiAgICAgY29uc29sZS5sb2coXCJTd2l0Y2hlZCBmcm9tXCIsIG9sZExhbmd1YWdlLCBcInRvXCIsIG5ld0xhbmd1YWdlKTtcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvbkxhbmd1YWdlQ2hhbmdlZCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIFdvbmRlcmxhbmQgRW5naW5lIGluc3RhbmNlLiBAaGlkZGVuICovXG4gICAgX2VuZ2luZTtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBjdXJyZW50IGxhbmd1YWdlIGFuZCBhcHBseSB0cmFuc2xhdGlvbnMgdG8gbGlua2VkIHRleHQgcGFyYW1ldGVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2RlIExhbmd1YWdlIGNvZGUgdG8gc3dpdGNoIHRvXG4gICAgICovXG4gICAgc2V0IGxhbmd1YWdlKGNvZGUpIHtcbiAgICAgICAgaWYgKGNvZGUgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICB3YXNtLl93bF9pMThuX3NldExhbmd1YWdlKHdhc20udGVtcFVURjgoY29kZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgY3VycmVudCBsYW5ndWFnZSBjb2RlLlxuICAgICAqXG4gICAgICovXG4gICAgZ2V0IGxhbmd1YWdlKCkge1xuICAgICAgICBjb25zdCB3YXNtID0gdGhpcy5fZW5naW5lLndhc207XG4gICAgICAgIGNvbnN0IGNvZGUgPSB3YXNtLl93bF9pMThuX2N1cnJlbnRMYW5ndWFnZSgpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gd2FzbS5VVEY4VG9TdHJpbmcoY29kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0cmFuc2xhdGVkIHN0cmluZyBmb3IgYSB0ZXJtIGZvciB0aGUgY3VycmVudGx5IGxvYWRlZCBsYW5ndWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZXJtIFRlcm0gdG8gdHJhbnNsYXRlXG4gICAgICovXG4gICAgdHJhbnNsYXRlKHRlcm0pIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IHdhc20uX3dsX2kxOG5fdHJhbnNsYXRlKHdhc20udGVtcFVURjgodGVybSkpO1xuICAgICAgICBpZiAodHJhbnNsYXRpb24gPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHdhc20uVVRGOFRvU3RyaW5nKHRyYW5zbGF0aW9uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXIgb2YgbGFuZ3VhZ2VzIGluIHRoZSBwcm9qZWN0LlxuICAgICAqXG4gICAgICovXG4gICAgbGFuZ3VhZ2VDb3VudCgpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICByZXR1cm4gd2FzbS5fd2xfaTE4bl9sYW5ndWFnZUNvdW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGxhbmd1YWdlIGNvZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgdGhlIGxhbmd1YWdlIHRvIGdldCB0aGUgY29kZSBmcm9tXG4gICAgICovXG4gICAgbGFuZ3VhZ2VJbmRleChjb2RlKSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgcmV0dXJuIHdhc20uX3dsX2kxOG5fbGFuZ3VhZ2VJbmRleCh3YXNtLnRlbXBVVEY4KGNvZGUpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGEgbGFuZ3VhZ2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiB0aGUgbGFuZ3VhZ2UgdG8gZ2V0IHRoZSBjb2RlIGZyb21cbiAgICAgKi9cbiAgICBsYW5ndWFnZUNvZGUoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgd2FzbSA9IHRoaXMuX2VuZ2luZS53YXNtO1xuICAgICAgICBjb25zdCBjb2RlID0gd2FzbS5fd2xfaTE4bl9sYW5ndWFnZUNvZGUoaW5kZXgpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gd2FzbS5VVEY4VG9TdHJpbmcoY29kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIGxhbmd1YWdlIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgdGhlIGxhbmd1YWdlIHRvIGdldCB0aGUgbmFtZSBmcm9tXG4gICAgICovXG4gICAgbGFuZ3VhZ2VOYW1lKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHdhc20gPSB0aGlzLl9lbmdpbmUud2FzbTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHdhc20uX3dsX2kxOG5fbGFuZ3VhZ2VOYW1lKGluZGV4KTtcbiAgICAgICAgaWYgKG5hbWUgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpO1xuICAgIH1cbn1cbi8qKiBQcm9wZXJ0aWVzIG9mIGEgV2ViWFIgc2Vzc2lvbiAqL1xuZXhwb3J0IGNsYXNzIFhSIHtcbiAgICAvKiogV29uZGVybGFuZCBXQVNNIGJyaWRnZS4gQGhpZGRlbiAqL1xuICAgICN3YXNtO1xuICAgICNtb2RlO1xuICAgIGNvbnN0cnVjdG9yKHdhc20sIG1vZGUpIHtcbiAgICAgICAgdGhpcy4jd2FzbSA9IHdhc207XG4gICAgICAgIHRoaXMuI21vZGUgPSBtb2RlO1xuICAgIH1cbiAgICAvKiogQ3VycmVudCBXZWJYUiBzZXNzaW9uIG1vZGUgKi9cbiAgICBnZXQgc2Vzc2lvbk1vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RlO1xuICAgIH1cbiAgICAvKiogQ3VycmVudCBXZWJYUiBzZXNzaW9uICovXG4gICAgZ2V0IHNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN3YXNtLndlYnhyX3Nlc3Npb247XG4gICAgfVxuICAgIC8qKiBDdXJyZW50IFdlYlhSIGZyYW1lICovXG4gICAgZ2V0IGZyYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jd2FzbS53ZWJ4cl9mcmFtZTtcbiAgICB9XG4gICAgcmVmZXJlbmNlU3BhY2VGb3JUeXBlKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3dhc20ud2VieHJfcmVmU3BhY2VzW3R5cGVdID8/IG51bGw7XG4gICAgfVxuICAgIC8qKiBTZXQgY3VycmVudCByZWZlcmVuY2Ugc3BhY2UgdHlwZSB1c2VkIGZvciByZXRyaWV2aW5nIGV5ZSwgaGVhZCwgaGFuZCBhbmQgam9pbnQgcG9zZXMgKi9cbiAgICBzZXQgY3VycmVudFJlZmVyZW5jZVNwYWNlKHJlZlNwYWNlKSB7XG4gICAgICAgIHRoaXMuI3dhc20ud2VieHJfcmVmU3BhY2UgPSByZWZTcGFjZTtcbiAgICAgICAgdGhpcy4jd2FzbS53ZWJ4cl9yZWZTcGFjZVR5cGUgPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2YgT2JqZWN0LmtleXModGhpcy4jd2FzbS53ZWJ4cl9yZWZTcGFjZXMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4jd2FzbS53ZWJ4cl9yZWZTcGFjZXNbdHlwZV0gPT09IHJlZlNwYWNlKSB7XG4gICAgICAgICAgICAgICAgLyogS2VlcCB0cmFjayBvZiByZWZlcmVuY2Ugc3BhY2UgdHlwZSAqL1xuICAgICAgICAgICAgICAgIHRoaXMuI3dhc20ud2VieHJfcmVmU3BhY2VUeXBlID0gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQ3VycmVudCByZWZlcmVuY2Ugc3BhY2UgdHlwZSB1c2VkIGZvciByZXRyaWV2aW5nIGV5ZSwgaGVhZCwgaGFuZCBhbmQgam9pbnQgcG9zZXMgKi9cbiAgICBnZXQgY3VycmVudFJlZmVyZW5jZVNwYWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jd2FzbS53ZWJ4cl9yZWZTcGFjZTtcbiAgICB9XG4gICAgLyoqIEN1cnJlbnQgV2ViWFIgcmVmZXJlbmNlIHNwYWNlIHR5cGUgb3IgYG51bGxgIGlmIG5vdCBhIGRlZmF1bHQgcmVmZXJlbmNlIHNwYWNlICovXG4gICAgZ2V0IGN1cnJlbnRSZWZlcmVuY2VTcGFjZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiN3YXNtLndlYnhyX3JlZlNwYWNlVHlwZTtcbiAgICB9XG4gICAgLyoqIEN1cnJlbnQgV2ViWFIgYmFzZSBsYXllciAgKi9cbiAgICBnZXQgYmFzZUxheWVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jd2FzbS53ZWJ4cl9iYXNlTGF5ZXI7XG4gICAgfVxuICAgIC8qKiBDdXJyZW50IFdlYlhSIGZyYW1lYnVmZmVyICovXG4gICAgZ2V0IGZyYW1lYnVmZmVycygpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuI3dhc20ud2VieHJfZmJvKSkge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLiN3YXNtLkdMLmZyYW1lYnVmZmVyc1t0aGlzLiN3YXNtLndlYnhyX2Zib11dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLiN3YXNtLndlYnhyX2Ziby5tYXAoKGlkKSA9PiB0aGlzLiN3YXNtLkdMLmZyYW1lYnVmZmVyc1tpZF0pO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBSZXRhaW5FbWl0dGVyIH0gZnJvbSAnLi9pbmRleC5qcyc7XG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnLi9wcm9wZXJ0eS5qcyc7XG5pbXBvcnQgeyBBbmltYXRpb24sIENvbXBvbmVudCwgTWF0ZXJpYWwsIE1lc2gsIFNraW4sIFhSLCB9IGZyb20gJy4vd29uZGVybGFuZC5qcyc7XG4vKipcbiAqIERlZmF1bHQgY29tcG9uZW50IHBhcmFtZXRlciB2YWx1ZSBwZXIgdHlwZS5cbiAqL1xuY29uc3QgX2NvbXBvbmVudERlZmF1bHRzID0gbmV3IE1hcChbXG4gICAgW1R5cGUuQm9vbCwgZmFsc2VdLFxuICAgIFtUeXBlLkludCwgMF0sXG4gICAgW1R5cGUuRmxvYXQsIDAuMF0sXG4gICAgW1R5cGUuU3RyaW5nLCAnJ10sXG4gICAgW1R5cGUuRW51bSwgdW5kZWZpbmVkXSxcbiAgICBbVHlwZS5PYmplY3QsIG51bGxdLFxuICAgIFtUeXBlLk1lc2gsIG51bGxdLFxuICAgIFtUeXBlLlRleHR1cmUsIG51bGxdLFxuICAgIFtUeXBlLk1hdGVyaWFsLCBudWxsXSxcbiAgICBbVHlwZS5BbmltYXRpb24sIG51bGxdLFxuICAgIFtUeXBlLlNraW4sIG51bGxdLFxuICAgIFtUeXBlLkNvbG9yLCBbMC4wLCAwLjAsIDAuMCwgMS4wXV0sXG5dKTtcbi8qKlxuICogU2V0dXAgdGhlIGRlZmF1bHRzIHZhbHVlIG9mIHRoZSBwcm9wZXJ0aWVzIG9uIGEgZ2l2ZW5cbiAqIGNvbXBvbmVudCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0gY3RvciBUaGUgY29tcG9uZW50IGNsYXNzXG4gKi9cbmZ1bmN0aW9uIF9zZXR1cERlZmF1bHRzKGN0b3IpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gY3Rvci5Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IHAgPSBjdG9yLlByb3BlcnRpZXNbbmFtZV07XG4gICAgICAgIGlmIChwLnR5cGUgPT09IFR5cGUuRW51bSkge1xuICAgICAgICAgICAgLyogRW51bSBkZWZhdWx0IGNhbiBiZSBhIHN0cmluZyBvciBhbiBpbmRleC4gQ29udmVydCB0byBhbmQvb3JcbiAgICAgICAgICAgICAqIHNhbml0eS1jaGVjayB0aGUgaW5kZXguICovXG4gICAgICAgICAgICBpZiAocC52YWx1ZXM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8qIERvbid0IHRyeSB0byBsb29rIHVwIHRoZSBkZWZhdWx0IGlmIHRoZSB1c2VyIHNwZWNpZmllZCBhXG4gICAgICAgICAgICAgICAgICogbnVtYmVyIG9yIHdlIGFscmVhZHkgY29udmVydGVkIHRvIG9uZS4gKi9cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHAuZGVmYXVsdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogSWYgdW5kZWZpbmVkLCBtaXNzaW5nIGVsZW1lbnQgb3Igd3JvbmcgdHlwZSB0aGlzIHJldHVybnNcbiAgICAgICAgICAgICAgICAgICAgICogLTEgd2hpY2ggYmVjb21lcyAwIGJlbG93LiBUaGlzIG1hdGNoZXMgZWRpdG9yIGJlaGF2aW9yLiAqL1xuICAgICAgICAgICAgICAgICAgICBwLmRlZmF1bHQgPSBwLnZhbHVlcy5pbmRleE9mKHAuZGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwLmRlZmF1bHQgPCAwIHx8IHAuZGVmYXVsdCA+PSBwLnZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5kZWZhdWx0ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKiBUaGVyZSdzIG5vIGluZGV4IHZhbHVlIHRoYXQgbWFrZXMgc2Vuc2UgKi9cbiAgICAgICAgICAgICAgICBwLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwLmRlZmF1bHQgPSBwLmRlZmF1bHQgPz8gX2NvbXBvbmVudERlZmF1bHRzLmdldChwLnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIGN0b3IucHJvdG90eXBlW25hbWVdID0gcC5kZWZhdWx0O1xuICAgIH1cbn1cbi8qKlxuICogTG93LWxldmVsIHdyYXBwZXIgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgV2ViQXNzZW1ibHkgY29kZS5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBXQVNNIHtcbiAgICAvKipcbiAgICAgKiBFbXNjcmlwdGVuIHdvcmtlciBmaWVsZC5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICB3b3JrZXIgPSAnJztcbiAgICAvKipcbiAgICAgKiBFbXNjcmlwdGVuIHdhc20gZmllbGQuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICovXG4gICAgd2FzbSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogRW1zY3JpcHRlbiBjYW52YXMuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICovXG4gICAgY2FudmFzID0gbnVsbDtcbiAgICAvKiogQ3VycmVudCBXZWJYUiAgKi9cbiAgICAvKipcbiAgICAgKiBFbXNjcmlwdGVuIFdlYlhSIHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICovXG4gICAgd2VieHJfc2Vzc2lvbiA9IG51bGw7XG4gICAgLyoqXG4gICAgICogRW1zY3JpcHRlbiBXZWJYUiByZXF1ZXN0IHNlc3Npb24gY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICovXG4gICAgd2VieHJfcmVxdWVzdFNlc3Npb24gPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEVtc2NyaXB0ZW4gV2ViWFIgZnJhbWUuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICovXG4gICAgd2VieHJfZnJhbWUgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEVtc2NyaXB0ZW4gY3VycmVudCBXZWJYUiByZWZlcmVuY2Ugc3BhY2UuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICovXG4gICAgd2VieHJfcmVmU3BhY2UgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEVtc2NyaXB0ZW4gV2ViWFIgcmVmZXJlbmNlIHNwYWNlcy5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICB3ZWJ4cl9yZWZTcGFjZXMgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEVtc2NyaXB0ZW4gV2ViWFIgY3VycmVudCByZWZlcmVuY2Ugc3BhY2UgdHlwZS5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICB3ZWJ4cl9yZWZTcGFjZVR5cGUgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEVtc2NyaXB0ZW4gV2ViWFIgR0wgcHJvamVjdGlvbiBsYXllci5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICB3ZWJ4cl9iYXNlTGF5ZXIgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEVtc2NyaXB0ZW4gV2ViWFIgZnJhbWVidWZmZXIgc2NhbGUgZmFjdG9yLlxuICAgICAqXG4gICAgICogQG5vdGUgVGhpcyBhcGkgaXMgbWVhbnQgdG8gYmUgdXNlZCBpbnRlcm5hbGx5LlxuICAgICAqL1xuICAgIHdlYnhyX2ZyYW1lYnVmZmVyU2NhbGVGYWN0b3IgPSAxLjA7XG4gICAgLyoqXG4gICAgICogRW1zY3JpcHRlbiBXZWJYUiBmcmFtZWJ1ZmZlcihzKS5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICAvKiB3ZWJ4cl9mYm8gd2lsbCBub3QgZ2V0IG92ZXJ3cml0dGVuIGlmIHdlIGFyZSByZW5kZXJpbmcgdG8gdGhlXG4gICAgICogZGVmYXVsdCBmcmFtZWJ1ZmZlciwgZS5nLiwgd2hlbiB1c2luZyBXZWJYUiBlbXVsYXRvci4gKi9cbiAgICB3ZWJ4cl9mYm8gPSAwO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBXQVNNIG1lbW9yeSB2aWV3IHRvIGEgSmF2YVNjcmlwdCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcHRyIFBvaW50ZXIgc3RhcnRcbiAgICAgKiBAcGFyYW0gcHRyRW5kIFBvaW50ZXIgZW5kXG4gICAgICogQHJldHVybnMgSmF2YVNjcmlwdCBzdHJpbmdcbiAgICAgKi9cbiAgICBVVEY4Vmlld1RvU3RyaW5nO1xuICAgIC8qKiBJZiBgdHJ1ZWAsIGxvZ3Mgd2lsbCBub3Qgc3BhbSB0aGUgY29uc29sZSBvbiBlcnJvci4gKi9cbiAgICBfZGVhY3RpdmF0ZV9jb21wb25lbnRfb25fZXJyb3IgPSBmYWxzZTtcbiAgICAvKiogVGVtcG9yYXJ5IG1lbW9yeSBwb2ludGVyLiAqL1xuICAgIF90ZW1wTWVtID0gbnVsbDtcbiAgICAvKiogVGVtcG9yYXJ5IG1lbW9yeSBzaXplLiAqL1xuICAgIF90ZW1wTWVtU2l6ZSA9IDA7XG4gICAgLyoqIFRlbXBvcmFyeSBmbG9hdCBtZW1vcnkgdmlldy4gKi9cbiAgICBfdGVtcE1lbUZsb2F0ID0gbnVsbDtcbiAgICAvKiogVGVtcG9yYXJ5IGludCBtZW1vcnkgdmlldy4gKi9cbiAgICBfdGVtcE1lbUludCA9IG51bGw7XG4gICAgLyoqIFRlbXBvcmFyeSB1aW50OCBtZW1vcnkgdmlldy4gKi9cbiAgICBfdGVtcE1lbVVpbnQ4ID0gbnVsbDtcbiAgICAvKiogVGVtcG9yYXJ5IHVpbnQzMiBtZW1vcnkgdmlldy4gKi9cbiAgICBfdGVtcE1lbVVpbnQzMiA9IG51bGw7XG4gICAgLyoqIFRlbXBvcmFyeSB1aW50MTYgbWVtb3J5IHZpZXcuICovXG4gICAgX3RlbXBNZW1VaW50MTYgPSBudWxsO1xuICAgIC8qKiBMb2FkaW5nIHNjcmVlbiAuYmluIGZpbGUgZGF0YSAqL1xuICAgIF9sb2FkaW5nU2NyZWVuID0gbnVsbDtcbiAgICAvKiogTGlzdCBvZiBjYWxsYmFja3MgdHJpZ2dlcmVkIHdoZW4gdGhlIHNjZW5lIGlzIGxvYWRlZC4gKi9cbiAgICBfc2NlbmVMb2FkZWRDYWxsYmFjayA9IFtdO1xuICAgIC8qKlxuICAgICAqIE1hdGVyaWFsIGRlZmluaXRpb24gY2FjaGUuIEVhY2ggcGlwZWxpbmUgaGFzIGl0cyBvd25cbiAgICAgKiBhc3NvY2lhdGVkIG1hdGVyaWFsIGRlZmluaXRpb24uXG4gICAgICovXG4gICAgX21hdGVyaWFsRGVmaW5pdGlvbnMgPSBbXTtcbiAgICAvKiogSW1hZ2UgY2FjaGUuICovXG4gICAgX2ltYWdlcyA9IFtdO1xuICAgIC8qKiBDb21wb25lbnQgaW5zdGFuY2VzLiAqL1xuICAgIF9jb21wb25lbnRzID0gW107XG4gICAgLyoqIENvbXBvbmVudCBUeXBlIGluZm8uICovXG4gICAgX2NvbXBvbmVudFR5cGVzID0gW107XG4gICAgLyoqIEluZGV4IHBlciBjb21wb25lbnQgdHlwZSBuYW1lLiAqL1xuICAgIF9jb21wb25lbnRUeXBlSW5kaWNlcyA9IHt9O1xuICAgIC8qKiBXb25kZXJsYW5kIGVuZ2luZSBpbnN0YW5jZS4gKi9cbiAgICBfZW5naW5lID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgdGhpcyBydW50aW1lIGlzIHVzaW5nIHBoeXN4LlxuICAgICAqXG4gICAgICogQG5vdGUgVGhpcyBhcGkgaXMgbWVhbnQgdG8gYmUgdXNlZCBpbnRlcm5hbGx5LlxuICAgICAqL1xuICAgIF93aXRoUGh5c1ggPSBmYWxzZTtcbiAgICAvKiogRGVjb2RlciBmb3IgVVRGOCBgQXJyYXlCdWZmZXJgIHRvIEphdmFTY3JpcHQgc3RyaW5nLiAqL1xuICAgIF91dGY4RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigndXRmOCcpO1xuICAgIC8qKiBMaXN0IG9mIC5iaW4gZmlsZXMgdG8gZGVsYXktbG9hZC4gKi9cbiAgICBfcXVldWVkQmluRmlsZXMgPSBbXTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFdlYkFzc2VtYmx5IDw+IEFQSSBicmlkZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGhyZWFkcyBgdHJ1ZWAgaWYgdGhlIHJ1bnRpbWUgdXNlZCBoYXMgdGhyZWFkcyBzdXBwb3J0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IodGhyZWFkcykge1xuICAgICAgICBpZiAodGhyZWFkcykge1xuICAgICAgICAgICAgdGhpcy5VVEY4Vmlld1RvU3RyaW5nID0gKHMsIGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdXRmOERlY29kZXIuZGVjb2RlKHRoaXMuSEVBUFU4LnNsaWNlKHMsIGUpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5VVEY4Vmlld1RvU3RyaW5nID0gKHMsIGUpID0+IHtcbiAgICAgICAgICAgIGlmICghcylcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXRmOERlY29kZXIuZGVjb2RlKHRoaXMuSEVBUFU4LnN1YmFycmF5KHMsIGUpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNhY2hlIG9mIHRoZSBsaWJyYXJ5XG4gICAgICpcbiAgICAgKiBAbm90ZSBTaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiB0ZWFyaW5nIGRvd24gdGhlIHJ1bnRpbWUuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX21hdGVyaWFsRGVmaW5pdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5faW1hZ2VzID0gW107XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50VHlwZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50VHlwZUluZGljZXMgPSB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGNvbXBvbmVudCBpcyByZWdpc3RlcmVkIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjdG9yICBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudCB0eXBlbmFtZSAoZS5nLiwgYCdjdXJzb3ItY29tcG9uZW50J2ApLlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgY29tcG9uZW50IGlzIHJlZ2lzdGVyZWQsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGlzUmVnaXN0ZXJlZCh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0eXBlIGluIHRoaXMuX2NvbXBvbmVudFR5cGVJbmRpY2VzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGxlZ2FjeSBjb21wb25lbnQgaW4gdGhpcyBFbXNjcmlwdGVuIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQG5vdGUgVGhpcyBhcGkgaXMgbWVhbnQgdG8gYmUgdXNlZCBpbnRlcm5hbGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGVOYW1lIFRoZSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICogQHBhcmFtIHBhcmFtcyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgcGFyYW1ldGVycyAocHJvcGVydGllcykuXG4gICAgICogQHBhcmFtIG9iamVjdCBUaGUgb2JqZWN0J3MgcHJvdG90eXBlLlxuICAgICAqIEByZXR1cm5zIFRoZSByZWdpc3RyYXRpb24gaW5kZXhcbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJDb21wb25lbnRMZWdhY3kodHlwZU5hbWUsIHBhcmFtcywgb2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSBjbGFzcyBDdXN0b21Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgICAgICB9O1xuICAgICAgICBjdG9yLlR5cGVOYW1lID0gdHlwZU5hbWU7XG4gICAgICAgIGN0b3IuUHJvcGVydGllcyA9IHBhcmFtcztcbiAgICAgICAgT2JqZWN0LmFzc2lnbihjdG9yLnByb3RvdHlwZSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdGVyQ29tcG9uZW50KGN0b3IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIGNsYXNzIGNvbXBvbmVudCBpbiB0aGlzIEVtc2NyaXB0ZW4gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIGFwaSBpcyBtZWFudCB0byBiZSB1c2VkIGludGVybmFsbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY3RvciBUaGUgY2xhc3MgdG8gcmVnaXN0ZXIuXG4gICAgICogQHJldHVybnMgVGhlIHJlZ2lzdHJhdGlvbiBpbmRleC5cbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJDb21wb25lbnQoY3Rvcikge1xuICAgICAgICBpZiAoIWN0b3IuVHlwZU5hbWUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIG5hbWUgcHJvdmlkZWQgZm9yIGNvbXBvbmVudC4nKTtcbiAgICAgICAgaWYgKCFjdG9yLnByb3RvdHlwZS5fdHJpZ2dlckluaXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcmVnaXN0ZXJDb21wb25lbnQoKTogQ29tcG9uZW50ICR7Y3Rvci5UeXBlTmFtZX0gbXVzdCBleHRlbmQgQ29tcG9uZW50YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogJ0RlcGVuZGVuY2llcycgaXMgaGFyZC1kZXByZWNhdGVkLCByZW1vdmUgYXQgMS4xXG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGN0b3IuRGVwZW5kZW5jaWVzO1xuICAgICAgICBpZiAoZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRlcGVuZGVuY3kgb2YgZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgICAgICAgICAgLyogRm9yIGRlcGVuZGVuY2llcywgd2Ugc2tpcCBwb3RlbnRpYWwgb3Zlci1yZWdpc3RyYXRpb24uICovXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVnaXN0ZXJlZChkZXBlbmRlbmN5LlR5cGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWdpc3RlckNvbXBvbmVudChkZXBlbmRlbmN5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3NldHVwRGVmYXVsdHMoY3Rvcik7XG4gICAgICAgIGNvbnN0IHR5cGVJbmRleCA9IGN0b3IuVHlwZU5hbWUgaW4gdGhpcy5fY29tcG9uZW50VHlwZUluZGljZXNcbiAgICAgICAgICAgID8gdGhpcy5fY29tcG9uZW50VHlwZUluZGljZXNbY3Rvci5UeXBlTmFtZV1cbiAgICAgICAgICAgIDogdGhpcy5fY29tcG9uZW50VHlwZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlc1t0eXBlSW5kZXhdID0gY3RvcjtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50VHlwZUluZGljZXNbY3Rvci5UeXBlTmFtZV0gPSB0eXBlSW5kZXg7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSZWdpc3RlcmVkIGNvbXBvbmVudCcsIGN0b3IuVHlwZU5hbWUsIGAoY2xhc3MgJHtjdG9yLm5hbWV9KWAsICd3aXRoIGluZGV4JywgdHlwZUluZGV4KTtcbiAgICAgICAgaWYgKGN0b3Iub25SZWdpc3RlcilcbiAgICAgICAgICAgIGN0b3Iub25SZWdpc3Rlcih0aGlzLl9lbmdpbmUpO1xuICAgICAgICByZXR1cm4gdHlwZUluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGxvY2F0ZSB0aGUgcmVxdWVzdGVkIGFtb3VudCBvZiB0ZW1wb3JhcnkgbWVtb3J5XG4gICAgICogaW4gdGhpcyBXQVNNIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgVGhlIG51bWJlciBvZiBieXRlcyB0byBhbGxvY2F0ZVxuICAgICAqL1xuICAgIGFsbG9jYXRlVGVtcE1lbW9yeShzaXplKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdBbGxvY2F0aW5nIHRlbXAgbWVtOicsIHNpemUpO1xuICAgICAgICB0aGlzLl90ZW1wTWVtU2l6ZSA9IHNpemU7XG4gICAgICAgIGlmICh0aGlzLl90ZW1wTWVtKVxuICAgICAgICAgICAgdGhpcy5fZnJlZSh0aGlzLl90ZW1wTWVtKTtcbiAgICAgICAgdGhpcy5fdGVtcE1lbSA9IHRoaXMuX21hbGxvYyh0aGlzLl90ZW1wTWVtU2l6ZSk7XG4gICAgICAgIHRoaXMudXBkYXRlVGVtcE1lbW9yeSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdG9kbzogRGVsZXRlIHRoaXMgYW5kIG9ubHkga2VlcCBgYWxsb2NhdGVUZW1wTWVtb3J5YFxuICAgICAqXG4gICAgICogQHBhcmFtIHNpemUgTnVtYmVyIG9mIGJ5dGVzIHRvIGFsbG9jYXRlXG4gICAgICovXG4gICAgcmVxdWlyZVRlbXBNZW0oc2l6ZSkge1xuICAgICAgICBpZiAodGhpcy5fdGVtcE1lbVNpemUgPj0gc2l6ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLyogR3JvdyBpbiAxa2IgaW5jcmVtZW50cyAqL1xuICAgICAgICB0aGlzLmFsbG9jYXRlVGVtcE1lbW9yeShNYXRoLmNlaWwoc2l6ZSAvIDEwMjQpICogMTAyNCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgdGVtcG9yYXJ5IG1lbW9yeSB2aWV3cy4gVGhpcyBtdXN0IGJlIGNhbGxlZCB3aGVuZXZlciB0aGVcbiAgICAgKiB0ZW1wb3JhcnkgbWVtb3J5IGFkZHJlc3MgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKi9cbiAgICB1cGRhdGVUZW1wTWVtb3J5KCkge1xuICAgICAgICB0aGlzLl90ZW1wTWVtRmxvYXQgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuSEVBUDguYnVmZmVyLCB0aGlzLl90ZW1wTWVtLCB0aGlzLl90ZW1wTWVtU2l6ZSA+PiAyKTtcbiAgICAgICAgdGhpcy5fdGVtcE1lbUludCA9IG5ldyBJbnQzMkFycmF5KHRoaXMuSEVBUDguYnVmZmVyLCB0aGlzLl90ZW1wTWVtLCB0aGlzLl90ZW1wTWVtU2l6ZSA+PiAyKTtcbiAgICAgICAgdGhpcy5fdGVtcE1lbVVpbnQzMiA9IG5ldyBVaW50MzJBcnJheSh0aGlzLkhFQVA4LmJ1ZmZlciwgdGhpcy5fdGVtcE1lbSwgdGhpcy5fdGVtcE1lbVNpemUgPj4gMik7XG4gICAgICAgIHRoaXMuX3RlbXBNZW1VaW50MTYgPSBuZXcgVWludDE2QXJyYXkodGhpcy5IRUFQOC5idWZmZXIsIHRoaXMuX3RlbXBNZW0sIHRoaXMuX3RlbXBNZW1TaXplID4+IDEpO1xuICAgICAgICB0aGlzLl90ZW1wTWVtVWludDggPSBuZXcgVWludDhBcnJheSh0aGlzLkhFQVA4LmJ1ZmZlciwgdGhpcy5fdGVtcE1lbSwgdGhpcy5fdGVtcE1lbVNpemUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdWludDggYnVmZmVyIHZpZXcgb24gdGVtcG9yYXJ5IFdBU00gbWVtb3J5LlxuICAgICAqXG4gICAgICogKipOb3RlKio6IHRoaXMgbWV0aG9kIG1pZ2h0IGFsbG9jYXRlIGlmIHRoZSByZXF1ZXN0ZWQgbWVtb3J5IGlzIGJpZ2dlclxuICAgICAqIHRoYW4gdGhlIGN1cnJlbnQgdGVtcG9yYXJ5IG1lbW9yeSBhbGxvY2F0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiAqKmVsZW1lbnRzKiogcmVxdWlyZWRcbiAgICAgKiBAcmV0dXJucyBBIHtAbGluayBUeXBlZEFycmF5fSBvdmVyIHRoZSBXQVNNIG1lbW9yeVxuICAgICAqL1xuICAgIGdldFRlbXBCdWZmZXJVOChjb3VudCkge1xuICAgICAgICB0aGlzLnJlcXVpcmVUZW1wTWVtKGNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RlbXBNZW1VaW50ODtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHVpbnQxNiBidWZmZXIgdmlldyBvbiB0ZW1wb3JhcnkgV0FTTSBtZW1vcnkuXG4gICAgICpcbiAgICAgKiAqKk5vdGUqKjogdGhpcyBtZXRob2QgbWlnaHQgYWxsb2NhdGUgaWYgdGhlIHJlcXVlc3RlZCBtZW1vcnkgaXMgYmlnZ2VyXG4gICAgICogdGhhbiB0aGUgY3VycmVudCB0ZW1wb3JhcnkgbWVtb3J5IGFsbG9jYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb3VudCBUaGUgbnVtYmVyIG9mICoqZWxlbWVudHMqKiByZXF1aXJlZFxuICAgICAqIEByZXR1cm5zIEEge0BsaW5rIFR5cGVkQXJyYXl9IG92ZXIgdGhlIFdBU00gbWVtb3J5XG4gICAgICovXG4gICAgZ2V0VGVtcEJ1ZmZlclUxNihjb3VudCkge1xuICAgICAgICB0aGlzLnJlcXVpcmVUZW1wTWVtKGNvdW50ICogMik7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wTWVtVWludDE2O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdWludDMyIGJ1ZmZlciB2aWV3IG9uIHRlbXBvcmFyeSBXQVNNIG1lbW9yeS5cbiAgICAgKlxuICAgICAqICoqTm90ZSoqOiB0aGlzIG1ldGhvZCBtaWdodCBhbGxvY2F0ZSBpZiB0aGUgcmVxdWVzdGVkIG1lbW9yeSBpcyBiaWdnZXJcbiAgICAgKiB0aGFuIHRoZSBjdXJyZW50IHRlbXBvcmFyeSBtZW1vcnkgYWxsb2NhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvdW50IFRoZSBudW1iZXIgb2YgKiplbGVtZW50cyoqIHJlcXVpcmVkLlxuICAgICAqIEByZXR1cm5zIEEge0BsaW5rIFR5cGVkQXJyYXl9IG92ZXIgdGhlIFdBU00gbWVtb3J5LlxuICAgICAqL1xuICAgIGdldFRlbXBCdWZmZXJVMzIoY291bnQpIHtcbiAgICAgICAgdGhpcy5yZXF1aXJlVGVtcE1lbShjb3VudCAqIDQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVtcE1lbVVpbnQzMjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGludDMyIGJ1ZmZlciB2aWV3IG9uIHRlbXBvcmFyeSBXQVNNIG1lbW9yeS5cbiAgICAgKlxuICAgICAqICoqTm90ZSoqOiB0aGlzIG1ldGhvZCBtaWdodCBhbGxvY2F0ZSBpZiB0aGUgcmVxdWVzdGVkIG1lbW9yeSBpcyBiaWdnZXJcbiAgICAgKiB0aGFuIHRoZSBjdXJyZW50IHRlbXBvcmFyeSBtZW1vcnkgYWxsb2NhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvdW50IFRoZSBudW1iZXIgb2YgKiplbGVtZW50cyoqIHJlcXVpcmVkLlxuICAgICAqIEByZXR1cm5zIEEge0BsaW5rIFR5cGVkQXJyYXl9IG92ZXIgdGhlIFdBU00gbWVtb3J5LlxuICAgICAqL1xuICAgIGdldFRlbXBCdWZmZXJJMzIoY291bnQpIHtcbiAgICAgICAgdGhpcy5yZXF1aXJlVGVtcE1lbShjb3VudCAqIDQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVtcE1lbUludDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZsb2F0MzIgYnVmZmVyIHZpZXcgb24gdGVtcG9yYXJ5IFdBU00gbWVtb3J5LlxuICAgICAqXG4gICAgICogKipOb3RlKio6IHRoaXMgbWV0aG9kIG1pZ2h0IGFsbG9jYXRlIGlmIHRoZSByZXF1ZXN0ZWQgbWVtb3J5IGlzIGJpZ2dlclxuICAgICAqIHRoYW4gdGhlIGN1cnJlbnQgdGVtcG9yYXJ5IG1lbW9yeSBhbGxvY2F0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY291bnQgVGhlIG51bWJlciBvZiAqKmVsZW1lbnRzKiogcmVxdWlyZWQuXG4gICAgICogQHJldHVybnMgQSB7QGxpbmsgVHlwZWRBcnJheX0gb3ZlciB0aGUgV0FTTSBtZW1vcnkuXG4gICAgICovXG4gICAgZ2V0VGVtcEJ1ZmZlckYzMihjb3VudCkge1xuICAgICAgICB0aGlzLnJlcXVpcmVUZW1wTWVtKGNvdW50ICogNCk7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wTWVtRmxvYXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvcHkgdGhlIHN0cmluZyBpbnRvIHRlbXBvcmFyeSBXQVNNIG1lbW9yeSBhbmQgcmV0cmlldmUgdGhlIHBvaW50ZXIuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIG1ldGhvZCB3aWxsIGNvbXB1dGUgdGhlIHN0cmxlbiBhbmQgYXBwZW5kIGEgYFxcMGAuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGUgcmVzdWx0IHNob3VsZCBiZSB1c2VkICoqZGlyZWN0bHkqKiBvdGhlcndpc2UgaXQgbWlnaHQgZ2V0XG4gICAgICogb3ZlcnJpZGRlbiBieSBhbnkgbmV4dCBjYWxsIG1vZGlmeWluZyB0aGUgdGVtcG9yYXJ5IG1lbW9yeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyB0byB3cml0ZSB0byB0ZW1wb3JhcnkgbWVtb3J5XG4gICAgICogQHJldHVybiBUaGUgdGVtcG9yYXJ5IHBvaW50ZXIgb250byB0aGUgV0FTTSBtZW1vcnlcbiAgICAgKi9cbiAgICB0ZW1wVVRGOChzdHIpIHtcbiAgICAgICAgY29uc3Qgc3RyTGVuID0gdGhpcy5sZW5ndGhCeXRlc1VURjgoc3RyKSArIDE7XG4gICAgICAgIHRoaXMucmVxdWlyZVRlbXBNZW0oc3RyTGVuKTtcbiAgICAgICAgdGhpcy5zdHJpbmdUb1VURjgoc3RyLCB0aGlzLl90ZW1wTWVtLCBzdHJMZW4pO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVtcE1lbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgY29tcG9uZW50IHR5cGUuXG4gICAgICpcbiAgICAgKiBAbm90ZSBUaGlzIG1ldGhvZCB1c2VzIG1hbGxvYyBhbmQgY29waWVzIHRoZSBzdHJpbmdcbiAgICAgKiB0byBhdm9pZCBvdmVyd3JpdGluZyBjYWxsZXIncyB0ZW1wb3JhcnkgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlXG4gICAgICogQHJldHVybiBUaGUgY29tcG9uZW50IHR5cGUgaW5kZXhcbiAgICAgKi9cbiAgICBfdHlwZUluZGV4Rm9yKHR5cGUpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoQnl0ZXMgPSB0aGlzLmxlbmd0aEJ5dGVzVVRGOCh0eXBlKSArIDE7XG4gICAgICAgIGNvbnN0IG1lbSA9IHRoaXMuX21hbGxvYyhsZW5ndGhCeXRlcyk7XG4gICAgICAgIHRoaXMuc3RyaW5nVG9VVEY4KHR5cGUsIG1lbSwgbGVuZ3RoQnl0ZXMpO1xuICAgICAgICBjb25zdCBjb21wb25lbnRUeXBlID0gdGhpcy5fd2xfZ2V0X2NvbXBvbmVudF9tYW5hZ2VyX2luZGV4KG1lbSk7XG4gICAgICAgIHRoaXMuX2ZyZWUobWVtKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFR5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbmFtZSBvZiBjb21wb25lbnQgdHlwZSBzdG9yZWQgYXQgdGhlIGdpdmVuIGluZGV4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHR5cGVJbmRleCBUaGUgdHlwZSBpbmRleFxuICAgICAqIEByZXR1cm4gVGhlIG5hbWUgYXMgYSBzdHJpbmdcbiAgICAgKi9cbiAgICBfdHlwZU5hbWVGb3IodHlwZUluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLlVURjhUb1N0cmluZyh0aGlzLl93bF9jb21wb25lbnRfbWFuYWdlcl9uYW1lKHR5cGVJbmRleCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcnVudGltZSBzdXBwb3J0cyBwaHlzeCBvciBub3QuXG4gICAgICovXG4gICAgZ2V0IHdpdGhQaHlzWCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpdGhQaHlzWDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBlbmdpbmUgaW5zdGFuY2UgaG9sZGluZyB0aGlzIGJyaWRnZS5cbiAgICAgKlxuICAgICAqIEBub3RlIFRoaXMgYXBpIGlzIG1lYW50IHRvIGJlIHVzZWQgaW50ZXJuYWxseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbmdpbmUgVGhlIGVuZ2luZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBfc2V0RW5naW5lKGVuZ2luZSkge1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgfVxuICAgIC8qIFdlYkFzc2VtYmx5IHRvIEpTIGNhbGwgYnJpZGdlLiAqL1xuICAgIF93bGpzX3hyX3Nlc3Npb25fc3RhcnQobW9kZSkge1xuICAgICAgICBpZiAodGhpcy5fZW5naW5lLnhyID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUueHIgPSBuZXcgWFIodGhpcywgbW9kZSk7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUub25YUlNlc3Npb25TdGFydC5ub3RpZnkodGhpcy53ZWJ4cl9zZXNzaW9uLCBtb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfd2xqc194cl9zZXNzaW9uX2VuZCgpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRFbWl0dGVyID0gdGhpcy5fZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQ7XG4gICAgICAgIGlmIChzdGFydEVtaXR0ZXIgaW5zdGFuY2VvZiBSZXRhaW5FbWl0dGVyKVxuICAgICAgICAgICAgc3RhcnRFbWl0dGVyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX2VuZ2luZS5vblhSU2Vzc2lvbkVuZC5ub3RpZnkoKTtcbiAgICAgICAgdGhpcy5fZW5naW5lLnhyID0gbnVsbDtcbiAgICB9XG4gICAgX3dsanNfeHJfZGlzYWJsZSgpIHtcbiAgICAgICAgLyogQHRvZG8gVGhpcyBjb3VsZCBkaXJlY3RseSBiZSBmdWxseSBoYW5kbGVkIGluIEpTLiAqL1xuICAgICAgICB0aGlzLl9lbmdpbmUuYXJTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZW5naW5lLnZyU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIF93bGpzX2FsbG9jYXRlKG51bUNvbXBvbmVudHMpIHtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50cyA9IG5ldyBBcnJheShudW1Db21wb25lbnRzKTtcbiAgICB9XG4gICAgX3dsanNfaW5pdCh3aXRoUGh5c1gpIHtcbiAgICAgICAgdGhpcy5fd2l0aFBoeXNYID0gd2l0aFBoeXNYO1xuICAgICAgICAvKiBUYXJnZXQgbWVtb3J5IGZvciBKUyBBUEkgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIGFycmF5cyAqL1xuICAgICAgICB0aGlzLmFsbG9jYXRlVGVtcE1lbW9yeSgxMDI0KTtcbiAgICB9XG4gICAgX3dsanNfcmVhbGxvY2F0ZShudW1Db21wb25lbnRzKSB7XG4gICAgICAgIGlmIChudW1Db21wb25lbnRzID4gdGhpcy5fY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHMubGVuZ3RoID0gbnVtQ29tcG9uZW50cztcbiAgICAgICAgfVxuICAgIH1cbiAgICBfd2xqc19zY2VuZV9hZGRfbWF0ZXJpYWxfZGVmaW5pdGlvbihkZWZpbml0aW9uSWQpIHtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyogQ2FjaGUgbWF0ZXJpYWwgZGVmaW5pdGlvbiBmb3IgZmFzdGVyIHJlYWQvd3JpdGUgKi9cbiAgICAgICAgY29uc3QgbmJQYXJhbXMgPSB0aGlzLl93bF9tYXRlcmlhbF9kZWZpbml0aW9uX2dldF9jb3VudChkZWZpbml0aW9uSWQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5iUGFyYW1zOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLlVURjhUb1N0cmluZyh0aGlzLl93bF9tYXRlcmlhbF9kZWZpbml0aW9uX2dldF9wYXJhbV9uYW1lKGRlZmluaXRpb25JZCwgaSkpO1xuICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3dsX21hdGVyaWFsX2RlZmluaXRpb25fZ2V0X3BhcmFtX3R5cGUoZGVmaW5pdGlvbklkLCBpKTtcbiAgICAgICAgICAgIGRlZmluaXRpb24uc2V0KG5hbWUsIHtcbiAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHQgJiAweGZmLFxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRDb3VudDogKHQgPj4gOCkgJiAweGZmLFxuICAgICAgICAgICAgICAgICAgICBtZXRhVHlwZTogKHQgPj4gMTYpICYgMHhmZixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWF0ZXJpYWxEZWZpbml0aW9uc1tkZWZpbml0aW9uSWRdID0gZGVmaW5pdGlvbjtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV9ib29sKGMsIHAsIHBlLCB2KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gdGhpcy5VVEY4Vmlld1RvU3RyaW5nKHAsIHBlKTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50c1tjXVtwYXJhbV0gPSB2ICE9PSAwO1xuICAgIH1cbiAgICBfd2xqc19zZXRfY29tcG9uZW50X3BhcmFtX2ludChjLCBwLCBwZSwgdikge1xuICAgICAgICBjb25zdCBwYXJhbSA9IHRoaXMuVVRGOFZpZXdUb1N0cmluZyhwLCBwZSk7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudHNbY11bcGFyYW1dID0gdjtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV9mbG9hdChjLCBwLCBwZSwgdikge1xuICAgICAgICBjb25zdCBwYXJhbSA9IHRoaXMuVVRGOFZpZXdUb1N0cmluZyhwLCBwZSk7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudHNbY11bcGFyYW1dID0gdjtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV9zdHJpbmcoYywgcCwgcGUsIHYsIHZlKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gdGhpcy5VVEY4Vmlld1RvU3RyaW5nKHAsIHBlKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLlVURjhWaWV3VG9TdHJpbmcodiwgdmUpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRzW2NdW3BhcmFtXSA9IHZhbHVlO1xuICAgIH1cbiAgICBfd2xqc19zZXRfY29tcG9uZW50X3BhcmFtX2NvbG9yKGMsIHAsIHBlLCB2KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gdGhpcy5VVEY4Vmlld1RvU3RyaW5nKHAsIHBlKTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50c1tjXVtwYXJhbV0gPSBuZXcgRmxvYXQzMkFycmF5KFswLCA4LCAxNiwgMjRdLm1hcCgocykgPT4gKCh2ID4+PiBzKSAmIDB4ZmYpIC8gMjU1LjApKTtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV9vYmplY3QoYywgcCwgcGUsIHYpIHtcbiAgICAgICAgY29uc3QgcGFyYW0gPSB0aGlzLlVURjhWaWV3VG9TdHJpbmcocCwgcGUpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRzW2NdW3BhcmFtXSA9XG4gICAgICAgICAgICB2ID4gMCA/IHRoaXMuX2VuZ2luZS53cmFwT2JqZWN0KHYpIDogbnVsbDtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV9tZXNoKGMsIHAsIHBlLCB2KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gdGhpcy5VVEY4Vmlld1RvU3RyaW5nKHAsIHBlKTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50c1tjXVtwYXJhbV0gPVxuICAgICAgICAgICAgdiA+IDAgPyBuZXcgTWVzaCh0aGlzLl9lbmdpbmUsIHYpIDogbnVsbDtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV90ZXh0dXJlKGMsIHAsIHBlLCB2KSB7XG4gICAgICAgIGNvbnN0IHBhcmFtID0gdGhpcy5VVEY4Vmlld1RvU3RyaW5nKHAsIHBlKTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50c1tjXVtwYXJhbV0gPVxuICAgICAgICAgICAgdiA+IDAgPyB0aGlzLl9lbmdpbmUudGV4dHVyZXMud3JhcCh2KSA6IG51bGw7XG4gICAgfVxuICAgIF93bGpzX3NldF9jb21wb25lbnRfcGFyYW1fbWF0ZXJpYWwoYywgcCwgcGUsIHYpIHtcbiAgICAgICAgY29uc3QgcGFyYW0gPSB0aGlzLlVURjhWaWV3VG9TdHJpbmcocCwgcGUpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRzW2NdW3BhcmFtXSA9XG4gICAgICAgICAgICB2ID4gMCA/IG5ldyBNYXRlcmlhbCh0aGlzLl9lbmdpbmUsIHYpIDogbnVsbDtcbiAgICB9XG4gICAgX3dsanNfc2V0X2NvbXBvbmVudF9wYXJhbV9hbmltYXRpb24oYywgcCwgcGUsIHYpIHtcbiAgICAgICAgY29uc3QgcGFyYW0gPSB0aGlzLlVURjhWaWV3VG9TdHJpbmcocCwgcGUpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRzW2NdW3BhcmFtXSA9XG4gICAgICAgICAgICB2ID4gMCA/IG5ldyBBbmltYXRpb24odGhpcy5fZW5naW5lLCB2KSA6IG51bGw7XG4gICAgfVxuICAgIF93bGpzX3NldF9jb21wb25lbnRfcGFyYW1fc2tpbihjLCBwLCBwZSwgdikge1xuICAgICAgICBjb25zdCBwYXJhbSA9IHRoaXMuVVRGOFZpZXdUb1N0cmluZyhwLCBwZSk7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudHNbY11bcGFyYW1dID1cbiAgICAgICAgICAgIHYgPiAwID8gbmV3IFNraW4odGhpcy5fZW5naW5lLCB2KSA6IG51bGw7XG4gICAgfVxuICAgIF93bGpzX2dldF9jb21wb25lbnRfdHlwZV9pbmRleChuYW1lUHRyLCBuYW1lRW5kUHRyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRUeXBlSW5kaWNlc1t0aGlzLlVURjhWaWV3VG9TdHJpbmcobmFtZVB0ciwgbmFtZUVuZFB0cildO1xuICAgIH1cbiAgICBfd2xqc19jb21wb25lbnRfY3JlYXRlKGpzTWFuYWdlckluZGV4LCBpbmRleCwgaWQsIHR5cGUsIG9iamVjdCkge1xuICAgICAgICBjb25zdCBjdG9yID0gdGhpcy5fY29tcG9uZW50VHlwZXNbdHlwZV07XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBjdG9yKCkucmVzZXQoKTtcbiAgICAgICAgLyogU2V0cyB0aGUgbWFuYWdlciBhbmQgaWRlbnRpZmllciBmcm9tIHRoZSBvdXRzaWRlLCB0byBzaW1wbGlmeSB0aGUgdXNlcidzIGNvbnN0cnVjdG9yLiAqL1xuICAgICAgICAvKiBAdHMtaWdub3JlICovXG4gICAgICAgIGNvbXBvbmVudC5fZW5naW5lID0gdGhpcy5fZW5naW5lO1xuICAgICAgICBjb21wb25lbnQuX21hbmFnZXIgPSBqc01hbmFnZXJJbmRleDtcbiAgICAgICAgY29tcG9uZW50Ll9pZCA9IGlkO1xuICAgICAgICBjb21wb25lbnQuX29iamVjdCA9IHRoaXMuX2VuZ2luZS53cmFwT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudHNbaW5kZXhdID0gY29tcG9uZW50O1xuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgIH1cbiAgICBfd2xqc19jb21wb25lbnRfaW5pdChjb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuX2NvbXBvbmVudHNbY29tcG9uZW50XTtcbiAgICAgICAgYy5fdHJpZ2dlckluaXQoKTtcbiAgICB9XG4gICAgX3dsanNfY29tcG9uZW50X3VwZGF0ZShjb21wb25lbnQsIGR0KSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLl9jb21wb25lbnRzW2NvbXBvbmVudF07XG4gICAgICAgIGlmICghYykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdXTDogY29tcG9uZW50IHdhcyB1bmRlZmluZWQ6JywgY29tcG9uZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudHNbY29tcG9uZW50XSA9IG5ldyBDb21wb25lbnQodGhpcy5fZW5naW5lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjLl90cmlnZ2VyVXBkYXRlKGR0KTtcbiAgICB9XG4gICAgX3dsanNfY29tcG9uZW50X29uQWN0aXZhdGUoY29tcG9uZW50KSB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLl9jb21wb25lbnRzW2NvbXBvbmVudF07XG4gICAgICAgIGlmIChjKVxuICAgICAgICAgICAgYy5fdHJpZ2dlck9uQWN0aXZhdGUoKTtcbiAgICB9XG4gICAgX3dsanNfY29tcG9uZW50X29uRGVhY3RpdmF0ZShjb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuX2NvbXBvbmVudHNbY29tcG9uZW50XTtcbiAgICAgICAgYy5fdHJpZ2dlck9uRGVhY3RpdmF0ZSgpO1xuICAgIH1cbiAgICBfd2xqc19jb21wb25lbnRfb25EZXN0cm95KGNvbXBvbmVudCkge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5fY29tcG9uZW50c1tjb21wb25lbnRdO1xuICAgICAgICBjLl90cmlnZ2VyT25EZXN0cm95KCk7XG4gICAgfVxuICAgIF93bGpzX3N3YXAoYSwgYikge1xuICAgICAgICBjb25zdCBjb21wb25lbnRBID0gdGhpcy5fY29tcG9uZW50c1thXTtcbiAgICAgICAgdGhpcy5fY29tcG9uZW50c1thXSA9IHRoaXMuX2NvbXBvbmVudHNbYl07XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudHNbYl0gPSBjb21wb25lbnRBO1xuICAgIH1cbiAgICAvKiBKUyB0byBXZWJBc3NlbWJseSBicmlkZ2UuICovXG4gICAgSEVBUDggPSBudWxsO1xuICAgIEhFQVBVOCA9IG51bGw7XG4gICAgSEVBUFUxNiA9IG51bGw7XG4gICAgSEVBUDE2ID0gbnVsbDtcbiAgICBIRUFQVTMyID0gbnVsbDtcbiAgICBIRUFQMzIgPSBudWxsO1xuICAgIEhFQVBGMzIgPSBudWxsO1xuICAgIEhFQVBGNjQgPSBudWxsO1xuICAgIEdMID0gbnVsbDtcbiAgICBhc3NlcnQgPSBudWxsO1xuICAgIF9mcmVlID0gbnVsbDtcbiAgICBfbWFsbG9jID0gbnVsbDtcbiAgICBsZW5ndGhCeXRlc1VURjggPSBudWxsO1xuICAgIHN0cmluZ1RvVVRGOCA9IG51bGw7XG4gICAgVVRGOFRvU3RyaW5nID0gbnVsbDtcbiAgICBhZGRGdW5jdGlvbiA9IG51bGw7XG4gICAgcmVtb3ZlRnVuY3Rpb24gPSBudWxsO1xuICAgIF93bF9zZXRfZXJyb3JfY2FsbGJhY2sgPSBudWxsO1xuICAgIF93bF9hcHBsaWNhdGlvbl92ZXJzaW9uID0gbnVsbDtcbiAgICBfd2xfYXBwbGljYXRpb25fc3RhcnQgPSBudWxsO1xuICAgIF93bF9hcHBsaWNhdGlvbl9yZXNpemUgPSBudWxsO1xuICAgIF93bF9uZXh0VXBkYXRlID0gbnVsbDtcbiAgICBfd2xfbmV4dEZyYW1lID0gbnVsbDtcbiAgICBfd2xfcmVuZGVyZXJfc2V0X21lc2hfbGF5b3V0ID0gbnVsbDtcbiAgICBfd2xfc2NlbmVfZ2V0X2FjdGl2ZV92aWV3cyA9IG51bGw7XG4gICAgX3dsX3NjZW5lX3JheV9jYXN0ID0gbnVsbDtcbiAgICBfd2xfc2NlbmVfYWRkX29iamVjdCA9IG51bGw7XG4gICAgX3dsX3NjZW5lX2FkZF9vYmplY3RzID0gbnVsbDtcbiAgICBfd2xfc2NlbmVfcmVzZXJ2ZV9vYmplY3RzID0gbnVsbDtcbiAgICBfd2xfc2NlbmVfc2V0X2NsZWFyQ29sb3IgPSBudWxsO1xuICAgIF93bF9zY2VuZV9lbmFibGVDb2xvckNsZWFyID0gbnVsbDtcbiAgICBfd2xfc2V0X2xvYWRpbmdfc2NyZWVuX3Byb2dyZXNzID0gbnVsbDtcbiAgICBfd2xfbG9hZF9zY2VuZV9iaW4gPSBudWxsO1xuICAgIF93bF9hcHBlbmRfc2NlbmVfYmluID0gbnVsbDtcbiAgICBfd2xfYXBwZW5kX3NjZW5lX2dsdGYgPSBudWxsO1xuICAgIF93bF9zY2VuZV9yZXNldCA9IG51bGw7XG4gICAgX3dsX2NvbXBvbmVudF9nZXRfb2JqZWN0ID0gbnVsbDtcbiAgICBfd2xfY29tcG9uZW50X3NldEFjdGl2ZSA9IG51bGw7XG4gICAgX3dsX2NvbXBvbmVudF9pc0FjdGl2ZSA9IG51bGw7XG4gICAgX3dsX2NvbXBvbmVudF9yZW1vdmUgPSBudWxsO1xuICAgIF93bF9jb2xsaXNpb25fY29tcG9uZW50X2dldF9jb2xsaWRlciA9IG51bGw7XG4gICAgX3dsX2NvbGxpc2lvbl9jb21wb25lbnRfc2V0X2NvbGxpZGVyID0gbnVsbDtcbiAgICBfd2xfY29sbGlzaW9uX2NvbXBvbmVudF9nZXRfZXh0ZW50cyA9IG51bGw7XG4gICAgX3dsX2NvbGxpc2lvbl9jb21wb25lbnRfZ2V0X2dyb3VwID0gbnVsbDtcbiAgICBfd2xfY29sbGlzaW9uX2NvbXBvbmVudF9zZXRfZ3JvdXAgPSBudWxsO1xuICAgIF93bF9jb2xsaXNpb25fY29tcG9uZW50X3F1ZXJ5X292ZXJsYXBzID0gbnVsbDtcbiAgICBfd2xfdGV4dF9jb21wb25lbnRfZ2V0X2hvcml6b250YWxfYWxpZ25tZW50ID0gbnVsbDtcbiAgICBfd2xfdGV4dF9jb21wb25lbnRfc2V0X2hvcml6b250YWxfYWxpZ25tZW50ID0gbnVsbDtcbiAgICBfd2xfdGV4dF9jb21wb25lbnRfZ2V0X3ZlcnRpY2FsX2FsaWdubWVudCA9IG51bGw7XG4gICAgX3dsX3RleHRfY29tcG9uZW50X3NldF92ZXJ0aWNhbF9hbGlnbm1lbnQgPSBudWxsO1xuICAgIF93bF90ZXh0X2NvbXBvbmVudF9nZXRfY2hhcmFjdGVyX3NwYWNpbmcgPSBudWxsO1xuICAgIF93bF90ZXh0X2NvbXBvbmVudF9zZXRfY2hhcmFjdGVyX3NwYWNpbmcgPSBudWxsO1xuICAgIF93bF90ZXh0X2NvbXBvbmVudF9nZXRfbGluZV9zcGFjaW5nID0gbnVsbDtcbiAgICBfd2xfdGV4dF9jb21wb25lbnRfc2V0X2xpbmVfc3BhY2luZyA9IG51bGw7XG4gICAgX3dsX3RleHRfY29tcG9uZW50X2dldF9lZmZlY3QgPSBudWxsO1xuICAgIF93bF90ZXh0X2NvbXBvbmVudF9zZXRfZWZmZWN0ID0gbnVsbDtcbiAgICBfd2xfdGV4dF9jb21wb25lbnRfZ2V0X3RleHQgPSBudWxsO1xuICAgIF93bF90ZXh0X2NvbXBvbmVudF9zZXRfdGV4dCA9IG51bGw7XG4gICAgX3dsX3RleHRfY29tcG9uZW50X3NldF9tYXRlcmlhbCA9IG51bGw7XG4gICAgX3dsX3RleHRfY29tcG9uZW50X2dldF9tYXRlcmlhbCA9IG51bGw7XG4gICAgX3dsX3ZpZXdfY29tcG9uZW50X2dldF9wcm9qZWN0aW9uX21hdHJpeCA9IG51bGw7XG4gICAgX3dsX3ZpZXdfY29tcG9uZW50X2dldF9uZWFyID0gbnVsbDtcbiAgICBfd2xfdmlld19jb21wb25lbnRfc2V0X25lYXIgPSBudWxsO1xuICAgIF93bF92aWV3X2NvbXBvbmVudF9nZXRfZmFyID0gbnVsbDtcbiAgICBfd2xfdmlld19jb21wb25lbnRfc2V0X2ZhciA9IG51bGw7XG4gICAgX3dsX3ZpZXdfY29tcG9uZW50X2dldF9mb3YgPSBudWxsO1xuICAgIF93bF92aWV3X2NvbXBvbmVudF9zZXRfZm92ID0gbnVsbDtcbiAgICBfd2xfaW5wdXRfY29tcG9uZW50X2dldF90eXBlID0gbnVsbDtcbiAgICBfd2xfaW5wdXRfY29tcG9uZW50X3NldF90eXBlID0gbnVsbDtcbiAgICBfd2xfbGlnaHRfY29tcG9uZW50X2dldF9jb2xvciA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfdHlwZSA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfdHlwZSA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfaW50ZW5zaXR5ID0gbnVsbDtcbiAgICBfd2xfbGlnaHRfY29tcG9uZW50X3NldF9pbnRlbnNpdHkgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfZ2V0X291dGVyQW5nbGUgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfc2V0X291dGVyQW5nbGUgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfZ2V0X2lubmVyQW5nbGUgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfc2V0X2lubmVyQW5nbGUgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfZ2V0X3NoYWRvd3MgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfc2V0X3NoYWRvd3MgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfZ2V0X3NoYWRvd1JhbmdlID0gbnVsbDtcbiAgICBfd2xfbGlnaHRfY29tcG9uZW50X3NldF9zaGFkb3dSYW5nZSA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfc2hhZG93QmlhcyA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfc2hhZG93QmlhcyA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfc2hhZG93Tm9ybWFsQmlhcyA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfc2hhZG93Tm9ybWFsQmlhcyA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9nZXRfc2hhZG93VGV4ZWxTaXplID0gbnVsbDtcbiAgICBfd2xfbGlnaHRfY29tcG9uZW50X3NldF9zaGFkb3dUZXhlbFNpemUgPSBudWxsO1xuICAgIF93bF9saWdodF9jb21wb25lbnRfZ2V0X2Nhc2NhZGVDb3VudCA9IG51bGw7XG4gICAgX3dsX2xpZ2h0X2NvbXBvbmVudF9zZXRfY2FzY2FkZUNvdW50ID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9nZXRfYW5pbWF0aW9uID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9zZXRfYW5pbWF0aW9uID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9nZXRfcGxheUNvdW50ID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9zZXRfcGxheUNvdW50ID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX2NvbXBvbmVudF9nZXRfc3BlZWQgPSBudWxsO1xuICAgIF93bF9hbmltYXRpb25fY29tcG9uZW50X3NldF9zcGVlZCA9IG51bGw7XG4gICAgX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfcGxheSA9IG51bGw7XG4gICAgX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfc3RvcCA9IG51bGw7XG4gICAgX3dsX2FuaW1hdGlvbl9jb21wb25lbnRfcGF1c2UgPSBudWxsO1xuICAgIF93bF9hbmltYXRpb25fY29tcG9uZW50X3N0YXRlID0gbnVsbDtcbiAgICBfd2xfbWVzaF9jb21wb25lbnRfZ2V0X21hdGVyaWFsID0gbnVsbDtcbiAgICBfd2xfbWVzaF9jb21wb25lbnRfc2V0X21hdGVyaWFsID0gbnVsbDtcbiAgICBfd2xfbWVzaF9jb21wb25lbnRfZ2V0X21lc2ggPSBudWxsO1xuICAgIF93bF9tZXNoX2NvbXBvbmVudF9zZXRfbWVzaCA9IG51bGw7XG4gICAgX3dsX21lc2hfY29tcG9uZW50X2dldF9za2luID0gbnVsbDtcbiAgICBfd2xfbWVzaF9jb21wb25lbnRfc2V0X3NraW4gPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X3N0YXRpYyA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfc3RhdGljID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9raW5lbWF0aWMgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X2tpbmVtYXRpYyA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfZ3Jhdml0eSA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfZ3Jhdml0eSA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfc2ltdWxhdGUgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X3NpbXVsYXRlID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9hbGxvd1NpbXVsYXRpb24gPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X2FsbG93U2ltdWxhdGlvbiA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYWxsb3dRdWVyeSA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfYWxsb3dRdWVyeSA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfdHJpZ2dlciA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfdHJpZ2dlciA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfc2hhcGUgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X3NoYXBlID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9zaGFwZV9kYXRhID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9zaGFwZV9kYXRhID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9leHRlbnRzID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9zdGF0aWNGcmljdGlvbiA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfc3RhdGljRnJpY3Rpb24gPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X2R5bmFtaWNGcmljdGlvbiA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfZHluYW1pY0ZyaWN0aW9uID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9ib3VuY2luZXNzID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9ib3VuY2luZXNzID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9saW5lYXJEYW1waW5nID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9saW5lYXJEYW1waW5nID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X2dldF9hbmd1bGFyRGFtcGluZyA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9zZXRfYW5ndWxhckRhbXBpbmcgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X2xpbmVhclZlbG9jaXR5ID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9saW5lYXJWZWxvY2l0eSA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYW5ndWxhclZlbG9jaXR5ID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9hbmd1bGFyVmVsb2NpdHkgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X2dyb3Vwc01hc2sgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X2dyb3Vwc01hc2sgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X2Jsb2Nrc01hc2sgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X2Jsb2Nrc01hc2sgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X2xpbmVhckxvY2tBeGlzID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9saW5lYXJMb2NrQXhpcyA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9nZXRfYW5ndWxhckxvY2tBeGlzID0gbnVsbDtcbiAgICBfd2xfcGh5c3hfY29tcG9uZW50X3NldF9hbmd1bGFyTG9ja0F4aXMgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfZ2V0X21hc3MgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X21hc3MgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfc2V0X21hc3NTcGFjZUluZXJ0aWFUZW5zb3IgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfYWRkRm9yY2UgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfYWRkRm9yY2VBdCA9IG51bGw7XG4gICAgX3dsX3BoeXN4X2NvbXBvbmVudF9hZGRUb3JxdWUgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfYWRkQ2FsbGJhY2sgPSBudWxsO1xuICAgIF93bF9waHlzeF9jb21wb25lbnRfcmVtb3ZlQ2FsbGJhY2sgPSBudWxsO1xuICAgIF93bF9waHlzeF91cGRhdGVfZ2xvYmFsX3Bvc2UgPSBudWxsO1xuICAgIF93bF9waHlzeF9yYXlfY2FzdCA9IG51bGw7XG4gICAgX3dsX3BoeXN4X3NldF9jb2xsaXNpb25fY2FsbGJhY2sgPSBudWxsO1xuICAgIF93bF9tZXNoX2NyZWF0ZSA9IG51bGw7XG4gICAgX3dsX21lc2hfZ2V0X3ZlcnRleERhdGEgPSBudWxsO1xuICAgIF93bF9tZXNoX2dldF92ZXJ0ZXhDb3VudCA9IG51bGw7XG4gICAgX3dsX21lc2hfZ2V0X2luZGV4RGF0YSA9IG51bGw7XG4gICAgX3dsX21lc2hfdXBkYXRlID0gbnVsbDtcbiAgICBfd2xfbWVzaF9nZXRfYm91bmRpbmdTcGhlcmUgPSBudWxsO1xuICAgIF93bF9tZXNoX2dldF9hdHRyaWJ1dGUgPSBudWxsO1xuICAgIF93bF9tZXNoX2Rlc3Ryb3kgPSBudWxsO1xuICAgIF93bF9tZXNoX2dldF9hdHRyaWJ1dGVfdmFsdWVzID0gbnVsbDtcbiAgICBfd2xfbWVzaF9zZXRfYXR0cmlidXRlX3ZhbHVlcyA9IG51bGw7XG4gICAgX3dsX21hdGVyaWFsX2NyZWF0ZSA9IG51bGw7XG4gICAgX3dsX21hdGVyaWFsX2dldF9kZWZpbml0aW9uID0gbnVsbDtcbiAgICBfd2xfbWF0ZXJpYWxfZGVmaW5pdGlvbl9nZXRfY291bnQgPSBudWxsO1xuICAgIF93bF9tYXRlcmlhbF9kZWZpbml0aW9uX2dldF9wYXJhbV9uYW1lID0gbnVsbDtcbiAgICBfd2xfbWF0ZXJpYWxfZGVmaW5pdGlvbl9nZXRfcGFyYW1fdHlwZSA9IG51bGw7XG4gICAgX3dsX21hdGVyaWFsX2dldF9waXBlbGluZSA9IG51bGw7XG4gICAgX3dsX21hdGVyaWFsX2Nsb25lID0gbnVsbDtcbiAgICBfd2xfbWF0ZXJpYWxfZ2V0X3BhcmFtX2luZGV4ID0gbnVsbDtcbiAgICBfd2xfbWF0ZXJpYWxfZ2V0X3BhcmFtX3R5cGUgPSBudWxsO1xuICAgIF93bF9tYXRlcmlhbF9nZXRfcGFyYW1fdmFsdWUgPSBudWxsO1xuICAgIF93bF9tYXRlcmlhbF9zZXRfcGFyYW1fdmFsdWVfdWludCA9IG51bGw7XG4gICAgX3dsX21hdGVyaWFsX3NldF9wYXJhbV92YWx1ZV9mbG9hdCA9IG51bGw7XG4gICAgX3dsX3JlbmRlcmVyX2FkZEltYWdlID0gbnVsbDtcbiAgICBfd2xfdGV4dHVyZV93aWR0aCA9IG51bGw7XG4gICAgX3dsX3RleHR1cmVfaGVpZ2h0ID0gbnVsbDtcbiAgICBfd2xfcmVuZGVyZXJfdXBkYXRlSW1hZ2UgPSBudWxsO1xuICAgIF93bF90ZXh0dXJlX2Rlc3Ryb3kgPSBudWxsO1xuICAgIF93bF9hbmltYXRpb25fZ2V0X2R1cmF0aW9uID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX2dldF90cmFja0NvdW50ID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX3JldGFyZ2V0VG9Ta2luID0gbnVsbDtcbiAgICBfd2xfYW5pbWF0aW9uX3JldGFyZ2V0ID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X25hbWUgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2V0X25hbWUgPSBudWxsO1xuICAgIF93bF9vYmplY3RfcGFyZW50ID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X2dldF9jaGlsZHJlbl9jb3VudCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9nZXRfY2hpbGRyZW4gPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2V0X3BhcmVudCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9yZXNldF9zY2FsaW5nID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3Jlc2V0X3RyYW5zbGF0aW9uX3JvdGF0aW9uID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3Jlc2V0X3JvdGF0aW9uID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3Jlc2V0X3RyYW5zbGF0aW9uID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zbGF0ZSA9IG51bGw7XG4gICAgX3dsX29iamVjdF90cmFuc2xhdGVfb2JqID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zbGF0ZV93b3JsZCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9yb3RhdGVfYXhpc19hbmdsZSA9IG51bGw7XG4gICAgX3dsX29iamVjdF9yb3RhdGVfYXhpc19hbmdsZV9yYWQgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfcm90YXRlX2F4aXNfYW5nbGVfb2JqID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3JvdGF0ZV9heGlzX2FuZ2xlX3JhZF9vYmogPSBudWxsO1xuICAgIF93bF9vYmplY3Rfcm90YXRlX3F1YXQgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfcm90YXRlX3F1YXRfb2JqID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3NjYWxlID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zX2xvY2FsID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X2dldF90cmFuc2xhdGlvbl9sb2NhbCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9zZXRfdHJhbnNsYXRpb25fbG9jYWwgPSBudWxsO1xuICAgIF93bF9vYmplY3RfZ2V0X3RyYW5zbGF0aW9uX3dvcmxkID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3NldF90cmFuc2xhdGlvbl93b3JsZCA9IG51bGw7XG4gICAgX3dsX29iamVjdF90cmFuc193b3JsZCA9IG51bGw7XG4gICAgX3dsX29iamVjdF90cmFuc193b3JsZF90b19sb2NhbCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9zY2FsaW5nX2xvY2FsID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3NjYWxpbmdfd29ybGQgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2V0X3NjYWxpbmdfbG9jYWwgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2V0X3NjYWxpbmdfd29ybGQgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2NhbGluZ193b3JsZF90b19sb2NhbCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9zZXRfcm90YXRpb25fbG9jYWwgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2V0X3JvdGF0aW9uX3dvcmxkID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zZm9ybVZlY3RvcldvcmxkID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zZm9ybVZlY3RvckxvY2FsID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zZm9ybVBvaW50V29ybGQgPSBudWxsO1xuICAgIF93bF9vYmplY3RfdHJhbnNmb3JtUG9pbnRMb2NhbCA9IG51bGw7XG4gICAgX3dsX29iamVjdF90cmFuc2Zvcm1WZWN0b3JJbnZlcnNlV29ybGQgPSBudWxsO1xuICAgIF93bF9vYmplY3RfdHJhbnNmb3JtVmVjdG9ySW52ZXJzZUxvY2FsID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zZm9ybVBvaW50SW52ZXJzZVdvcmxkID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RyYW5zZm9ybVBvaW50SW52ZXJzZUxvY2FsID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X3RvV29ybGRTcGFjZVRyYW5zZm9ybSA9IG51bGw7XG4gICAgX3dsX29iamVjdF90b09iamVjdFNwYWNlVHJhbnNmb3JtID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X2xvb2tBdCA9IG51bGw7XG4gICAgX3dsX3NjZW5lX3JlbW92ZV9vYmplY3QgPSBudWxsO1xuICAgIF93bF9vYmplY3Rfc2V0X2RpcnR5ID0gbnVsbDtcbiAgICBfd2xfZ2V0X2NvbXBvbmVudF9tYW5hZ2VyX2luZGV4ID0gbnVsbDtcbiAgICBfd2xfZ2V0X2pzX2NvbXBvbmVudF9pbmRleCA9IG51bGw7XG4gICAgX3dsX2dldF9qc19jb21wb25lbnRfaW5kZXhfZm9yX2lkID0gbnVsbDtcbiAgICBfd2xfZ2V0X2NvbXBvbmVudF9pZCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9nZXRfY29tcG9uZW50cyA9IG51bGw7XG4gICAgX3dsX29iamVjdF9nZXRfY29tcG9uZW50X3R5cGVzID0gbnVsbDtcbiAgICBfd2xfb2JqZWN0X2FkZF9qc19jb21wb25lbnQgPSBudWxsO1xuICAgIF93bF9vYmplY3RfYWRkX2NvbXBvbmVudCA9IG51bGw7XG4gICAgX3dsX29iamVjdF9pc19jaGFuZ2VkID0gbnVsbDtcbiAgICBfd2xfY29tcG9uZW50X21hbmFnZXJfbmFtZSA9IG51bGw7XG4gICAgX3dsX3NraW5fZ2V0X2pvaW50X2NvdW50ID0gbnVsbDtcbiAgICBfd2xfc2tpbl9qb2ludF9pZHMgPSBudWxsO1xuICAgIF93bF9za2luX2ludmVyc2VfYmluZF90cmFuc2Zvcm1zID0gbnVsbDtcbiAgICBfd2xfc2tpbl9pbnZlcnNlX2JpbmRfc2NhbGluZ3MgPSBudWxsO1xuICAgIF93bF9tYXRoX2N1YmljSGVybWl0ZSA9IG51bGw7XG4gICAgX3dsX2kxOG5fc2V0TGFuZ3VhZ2UgPSBudWxsO1xuICAgIF93bF9pMThuX2N1cnJlbnRMYW5ndWFnZSA9IG51bGw7XG4gICAgX3dsX2kxOG5fdHJhbnNsYXRlID0gbnVsbDtcbiAgICBfd2xfaTE4bl9sYW5ndWFnZUNvdW50ID0gbnVsbDtcbiAgICBfd2xfaTE4bl9sYW5ndWFnZUluZGV4ID0gbnVsbDtcbiAgICBfd2xfaTE4bl9sYW5ndWFnZUNvZGUgPSBudWxsO1xuICAgIF93bF9pMThuX2xhbmd1YWdlTmFtZSA9IG51bGw7XG59XG4iLCAidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgQ29tcG9uZW50LCBUZXh0dXJlLCBNZXNoQ29tcG9uZW50IH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanNcIjtcbmNsYXNzIER5bmFtaWNUZXh0dXJlQ2FjaGUge1xuICAgIHRleHR1cmVzO1xuICAgIGVuZ2luZTtcbiAgICBjb25zdHJ1Y3RvcihlbmdpbmUpIHtcbiAgICAgICAgdGhpcy50ZXh0dXJlcyA9IHt9O1xuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgICB9XG4gICAgbG9hZFRleHR1cmVzKHVybCwgY29sdW1ucywgcm93cykge1xuICAgICAgICBpZiAoIXRoaXMudGV4dHVyZXMuaGFzT3duUHJvcGVydHkodXJsKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlc1t1cmxdID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgIGxldCB0ZXh0dXJlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGltYWdlLnNyYyA9IHVybDtcbiAgICAgICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0ID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJDb3VsZCBub3QgZ2V0IGNvbnRleHRcIik7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzcHJpdGVXaWR0aCA9IGltYWdlLndpZHRoIC8gY29sdW1ucztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNwcml0ZUhlaWdodCA9IGltYWdlLmhlaWdodCAvIHJvd3M7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgcm93czsgeSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGNvbHVtbnM7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYyA9IHRoaXMuY29weVBhcnRPZkNhbnZhcyhjYW52YXMsIHggKiBzcHJpdGVXaWR0aCwgeSAqIHNwcml0ZUhlaWdodCwgc3ByaXRlV2lkdGgsIHNwcml0ZUhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHR1cmVQYyA9IG5ldyBUZXh0dXJlKHRoaXMuZW5naW5lLCBwYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZXMucHVzaCh0ZXh0dXJlUGMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGV4dHVyZXMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0dXJlc1t1cmxdO1xuICAgIH1cbiAgICBjb3B5UGFydE9mQ2FudmFzKGNhbnZhcywgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICBsZXQgY29weSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIGNvcHkud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY29weS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGxldCBjdHgyID0gY29weS5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGN0eDIuZHJhd0ltYWdlKGNhbnZhcywgeCwgeSwgd2lkdGgsIGhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbn1cbmxldCB0ZXh0dXJlQ2FjaGU7XG5leHBvcnQgY2xhc3MgRmxpcGJvb2sgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9IFwiZmxpcGJvb2tcIjtcbiAgICBiYXNlO1xuICAgIHVybCA9IFwiXCI7XG4gICAgdXJsRW1pc3NpdmUgPSBcIlwiO1xuICAgIGNvbHVtbnMgPSA0O1xuICAgIHJvd3MgPSA0O1xuICAgIHNwZWVkID0gOC4wO1xuICAgIHRleHR1cmVzID0gW107XG4gICAgbG9hZGVkID0gZmFsc2U7XG4gICAgaW5kZXggPSAwO1xuICAgIGluaXQoKSB7XG4gICAgICAgIGlmICghdGV4dHVyZUNhY2hlKSB7XG4gICAgICAgICAgICB0ZXh0dXJlQ2FjaGUgPSBuZXcgRHluYW1pY1RleHR1cmVDYWNoZSh0aGlzLmVuZ2luZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRleHR1cmVzUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgdGV4dHVyZXNQcm9taXNlcy5wdXNoKHRleHR1cmVDYWNoZS5sb2FkVGV4dHVyZXModGhpcy51cmwsIHRoaXMuY29sdW1ucywgdGhpcy5yb3dzKSk7XG4gICAgICAgIGlmICh0aGlzLnVybEVtaXNzaXZlKSB7XG4gICAgICAgICAgICB0ZXh0dXJlc1Byb21pc2VzLnB1c2godGV4dHVyZUNhY2hlLmxvYWRUZXh0dXJlcyh0aGlzLnVybEVtaXNzaXZlLCB0aGlzLmNvbHVtbnMsIHRoaXMucm93cykpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKHRleHR1cmVzUHJvbWlzZXMpLnRoZW4oKHRleCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHRoaXMudXJsRW1pc3NpdmUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleFswXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRleHR1cmVzLnB1c2godGhpcy5jcmVhdGVNYXRlcmlhbCh0aGlzLmJhc2UsIHRleFswXVtpXSwgdGV4WzFdW2ldKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXhbMF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlcy5wdXNoKHRoaXMuY3JlYXRlTWF0ZXJpYWwodGhpcy5iYXNlLCB0ZXhbMF1baV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy50ZXh0dXJlcy5sZW5ndGgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY3JlYXRlTWF0ZXJpYWwoYmFzZSwgdGV4dHVyZSwgZW1pc3NpdmVUZXh0dXJlID0gbnVsbCkge1xuICAgICAgICBjb25zdCBtYXQgPSBiYXNlLmNsb25lKCk7XG4gICAgICAgIGlmICghbWF0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGNsb25lIG1hdGVyaWFsXCIpO1xuICAgICAgICBpZiAobWF0LnBpcGVsaW5lID09IFwiRmxhdCBPcGFxdWUgVGV4dHVyZWRcIlxuICAgICAgICAgICAgfHwgbWF0LnBpcGVsaW5lLnN0YXJ0c1dpdGgoXCJGbGF0U29yc2tvb3RcIikpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsYXRNYXQgPSBtYXQ7XG4gICAgICAgICAgICBmbGF0TWF0LmZsYXRUZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgICAgICAgIGlmIChtYXQucGlwZWxpbmUgPT0gXCJGbGF0U29yc2tvb3QgRW1pc3NpdmVcIikge1xuICAgICAgICAgICAgICAgIGZsYXRNYXQuZmxhdFRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICAgICAgICAgIGlmIChlbWlzc2l2ZVRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZmxhdE1hdC5lbWlzc2l2ZVRleHR1cmUgPSBlbWlzc2l2ZVRleHR1cmU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgUGlwZWxpbmUgJHttYXQucGlwZWxpbmV9IG5vdCBzdXBwb3J0ZWQgYnkgZmxpcGJvb2tgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0O1xuICAgIH1cbiAgICBtYXQgPSBudWxsO1xuICAgIHQgPSAwO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLm1hdCA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudChNZXNoQ29tcG9uZW50KTtcbiAgICAgICAgdGhpcy50ID0gTWF0aC5yYW5kb20oKSAqIHRoaXMuc3BlZWQ7XG4gICAgfVxuICAgIHByZXZpb3VzSW5kZXggPSAtMTtcbiAgICB1cGRhdGUoZHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxvYWRlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy50ICs9IGR0ICogdGhpcy5zcGVlZDtcbiAgICAgICAgdGhpcy5pbmRleCA9IH5+dGhpcy50ICUgdGhpcy50ZXh0dXJlcy5sZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLnRleHR1cmVzICYmXG4gICAgICAgICAgICB0aGlzLnRleHR1cmVzLmxlbmd0aCAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2aW91c0luZGV4ICE9IHRoaXMuaW5kZXggJiZcbiAgICAgICAgICAgIHRoaXMubWF0KSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzSW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgICAgdGhpcy5tYXQubWF0ZXJpYWwgPSB0aGlzLnRleHR1cmVzW3RoaXMuaW5kZXhdO1xuICAgICAgICB9XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkubWF0ZXJpYWwoKVxuXSwgRmxpcGJvb2sucHJvdG90eXBlLCBcImJhc2VcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LnN0cmluZyhcIlwiKVxuXSwgRmxpcGJvb2sucHJvdG90eXBlLCBcInVybFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuc3RyaW5nKFwiXCIpXG5dLCBGbGlwYm9vay5wcm90b3R5cGUsIFwidXJsRW1pc3NpdmVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmludCg0KVxuXSwgRmxpcGJvb2sucHJvdG90eXBlLCBcImNvbHVtbnNcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmludCg0KVxuXSwgRmxpcGJvb2sucHJvdG90eXBlLCBcInJvd3NcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmZsb2F0KDguMClcbl0sIEZsaXBib29rLnByb3RvdHlwZSwgXCJzcGVlZFwiLCB2b2lkIDApO1xuIiwgInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qc1wiO1xuZXhwb3J0IGNsYXNzIFByZWZhYiBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3ByZWZhYic7XG4gICAgbmFtZTtcbn1cbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LnN0cmluZygpXG5dLCBQcmVmYWIucHJvdG90eXBlLCBcIm5hbWVcIiwgdm9pZCAwKTtcbjtcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIE1lc2hDb21wb25lbnQsIENvbGxpc2lvbkNvbXBvbmVudCwgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpXCI7XG5pbXBvcnQgeyBQcmVmYWIgfSBmcm9tIFwiLi9wcmVmYWIuanNcIjtcbmV4cG9ydCBjbGFzcyBQcmVmYWJTdG9yYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSBcInByZWZhYi1zdG9yYWdlXCI7XG4gICAgcHJlZmFicyA9IHt9O1xuICAgIHN0YXJ0KCkge1xuICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLm9iamVjdC5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBsZXQgY2hpbGRQcmVmYWIgPSBjaGlsZC5nZXRDb21wb25lbnQoUHJlZmFiKTtcbiAgICAgICAgICAgIGlmIChjaGlsZFByZWZhYikge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlZmFic1tjaGlsZFByZWZhYi5uYW1lXSA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIGNoaWxkLnNldFBvc2l0aW9uV29ybGQoWy0xMDAwLCAtMTAwMCwgLTEwMDBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSBhIHByZWZhYi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmYWJOYW1lIE5hbWUgb2YgdGhlIHByZWZhYiB0byBpbnN0YW50aWF0ZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdDNEfSBwYXJlbnRPYmplY3QgVGhlIG9iamVjdCB0byBwYXJlbnQgdGhlIHByZWZhYiB0byBhZnRlciBpbnN0YW50aWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3QzRHx1bmRlZmluZWR9IFRoZSByb290IG9mIHRoZSBpbnN0YW50aWF0ZWQgcHJlZmFiLlxuICAgICAqL1xuICAgIGluc3RhbnRpYXRlKHByZWZhYk5hbWUsIHBhcmVudE9iamVjdCkge1xuICAgICAgICBsZXQgcHJlZmFiID0gdGhpcy5wcmVmYWJzW3ByZWZhYk5hbWVdO1xuICAgICAgICBpZiAoIXByZWZhYikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInRyeWluZyB0byBjcmVhdGUgXCIgKyBwcmVmYWJOYW1lICsgXCIgYnV0IHRoYXQgaXMgbm90IGEgcmVnaXN0ZXJkIHByZWZhYlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb2JqID0gdGhpcy5lbmdpbmUuc2NlbmUuYWRkT2JqZWN0KHBhcmVudE9iamVjdCk7XG4gICAgICAgIG9iai5uYW1lID0gcHJlZmFiTmFtZTtcbiAgICAgICAgb2JqLnNjYWxlTG9jYWwocHJlZmFiLmdldFNjYWxpbmdMb2NhbCgpKTtcbiAgICAgICAgb2JqLnNldFRyYW5zZm9ybUxvY2FsKHByZWZhYi5nZXRUcmFuc2Zvcm1Mb2NhbCgpKTtcbiAgICAgICAgdmFyIHByZWZhYk1lc2ggPSBwcmVmYWIuZ2V0Q29tcG9uZW50KE1lc2hDb21wb25lbnQpO1xuICAgICAgICBpZiAocHJlZmFiTWVzaCkge1xuICAgICAgICAgICAgbGV0IG5ld01lc2ggPSBvYmouYWRkQ29tcG9uZW50KE1lc2hDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKCFuZXdNZXNoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIm1lc2ggY29tcG9uZW50IGNvdWxkIG5vdCBiZSBhZGRlZCB0byBvYmplY3RcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3TWVzaC5tZXNoID0gcHJlZmFiTWVzaC5tZXNoO1xuICAgICAgICAgICAgbmV3TWVzaC5tYXRlcmlhbCA9IHByZWZhYk1lc2gubWF0ZXJpYWw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZWZhYkNvbGxpc2lvbiA9IHByZWZhYi5nZXRDb21wb25lbnQoQ29sbGlzaW9uQ29tcG9uZW50KTtcbiAgICAgICAgaWYgKHByZWZhYkNvbGxpc2lvbikge1xuICAgICAgICAgICAgbGV0IG5ld0NvbGxpc2lvbiA9IG9iai5hZGRDb21wb25lbnQoQ29sbGlzaW9uQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmICghbmV3Q29sbGlzaW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImNvbGxpc2lvbiBjb21wb25lbnQgY291bGQgbm90IGJlIGFkZGVkIHRvIG9iamVjdFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDb2xsaXNpb24uY29sbGlkZXIgPSBwcmVmYWJDb2xsaXNpb24uY29sbGlkZXI7XG4gICAgICAgICAgICBuZXdDb2xsaXNpb24uZXh0ZW50cyA9IHByZWZhYkNvbGxpc2lvbi5leHRlbnRzO1xuICAgICAgICAgICAgbmV3Q29sbGlzaW9uLmdyb3VwID0gcHJlZmFiQ29sbGlzaW9uLmdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIG9iai5zZXREaXJ0eSgpO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbn1cbiIsICJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanNcIjtcbmNvbnN0IGhhbmRlZG5lc3MgPSBbJ2xlZnQnLCAncmlnaHQnXTtcbmV4cG9ydCBjbGFzcyBTaG9vdEJhc2UgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdzaG9vdC1iYXNlJztcbiAgICBoYXB0aWNzID0gdHJ1ZTtcbiAgICBoYW5kZWRuZXNzID0gMDtcbiAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQuYWRkKChzZXNzaW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoJ3NlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGlmIChlLmlucHV0U291cmNlLmhhbmRlZG5lc3MgPT09IGhhbmRlZG5lc3NbdGhpcy5oYW5kZWRuZXNzXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXB0aWNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnB1bHNlKGUuaW5wdXRTb3VyY2UuZ2FtZXBhZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyBwYXNzIGN1cnJlbnQgcG9zaXRpb24gYW5kIHJvdGF0aW9uIHRvIHNob290XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvb3QodGhpcy5vYmplY3QuZ2V0UG9zaXRpb25Xb3JsZCgpLCB0aGlzLm9iamVjdC5nZXRSb3RhdGlvbldvcmxkKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwdWxzZShnYW1lcGFkKSB7XG4gICAgICAgIHZhciBhY3R1YXRvcjtcbiAgICAgICAgaWYgKCFnYW1lcGFkIHx8ICFnYW1lcGFkLmhhcHRpY0FjdHVhdG9ycykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFjdHVhdG9yID0gZ2FtZXBhZC5oYXB0aWNBY3R1YXRvcnNbMF07XG4gICAgICAgIGlmICghYWN0dWF0b3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGFjdHVhdG9yLnB1bHNlKDEsIDEwMCk7XG4gICAgfVxuICAgIHNob290KHRyYW5zZm9ybSwgcm90YXRpb24pIHsgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuYm9vbCh0cnVlKVxuXSwgU2hvb3RCYXNlLnByb3RvdHlwZSwgXCJoYXB0aWNzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eS5lbnVtKFsnTGVmdCcsICdSaWdodCddKVxuXSwgU2hvb3RCYXNlLnByb3RvdHlwZSwgXCJoYW5kZWRuZXNzXCIsIHZvaWQgMCk7XG47XG4iLCAiLyoqXG4gKiBDb21tb24gdXRpbGl0aWVzXG4gKiBAbW9kdWxlIGdsTWF0cml4XG4gKi9cbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcbmV4cG9ydCB2YXIgQVJSQVlfVFlQRSA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XG5leHBvcnQgdmFyIFJBTkRPTSA9IE1hdGgucmFuZG9tO1xuLyoqXG4gKiBTZXRzIHRoZSB0eXBlIG9mIGFycmF5IHVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmVjdG9ycyBhbmQgbWF0cmljZXNcbiAqXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheUNvbnN0cnVjdG9yIHwgQXJyYXlDb25zdHJ1Y3Rvcn0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xuICBBUlJBWV9UWVBFID0gdHlwZTtcbn1cbnZhciBkZWdyZWUgPSBNYXRoLlBJIC8gMTgwO1xuLyoqXG4gKiBDb252ZXJ0IERlZ3JlZSBUbyBSYWRpYW5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBBbmdsZSBpbiBEZWdyZWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmFkaWFuKGEpIHtcbiAgcmV0dXJuIGEgKiBkZWdyZWU7XG59XG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudHMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHZhbHVlLCB3aXRoaW4gYW4gYWJzb2x1dGVcbiAqIG9yIHJlbGF0aXZlIHRvbGVyYW5jZSBvZiBnbE1hdHJpeC5FUFNJTE9OIChhbiBhYnNvbHV0ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgdmFsdWVzIGxlc3NcbiAqIHRoYW4gb3IgZXF1YWwgdG8gMS4wLCBhbmQgYSByZWxhdGl2ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgbGFyZ2VyIHZhbHVlcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXG4gKiBAcGFyYW0ge051bWJlcn0gYiBUaGUgc2Vjb25kIG51bWJlciB0byB0ZXN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuaWYgKCFNYXRoLmh5cG90KSBNYXRoLmh5cG90ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IDAsXG4gICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgeSArPSBhcmd1bWVudHNbaV0gKiBhcmd1bWVudHNbaV07XG4gIH1cblxuICByZXR1cm4gTWF0aC5zcXJ0KHkpO1xufTsiLCAiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcbiAqIDN4MyBNYXRyaXhcbiAqIEBtb2R1bGUgbWF0M1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQzXG4gKlxuICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gICAgb3V0WzVdID0gMDtcbiAgICBvdXRbNl0gPSAwO1xuICAgIG91dFs3XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbNF0gPSAxO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3BpZXMgdGhlIHVwcGVyLWxlZnQgM3gzIHZhbHVlcyBpbnRvIHRoZSBnaXZlbiBtYXQzLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgM3gzIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgICB0aGUgc291cmNlIDR4NCBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDQob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbNF07XG4gIG91dFs0XSA9IGFbNV07XG4gIG91dFs1XSA9IGFbNl07XG4gIG91dFs2XSA9IGFbOF07XG4gIG91dFs3XSA9IGFbOV07XG4gIG91dFs4XSA9IGFbMTBdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBtYXRyaXggdG8gY2xvbmVcbiAqIEByZXR1cm5zIHttYXQzfSBhIG5ldyAzeDMgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MyB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQzIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEByZXR1cm5zIHttYXQzfSBBIG5ldyBtYXQzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0xMDtcbiAgb3V0WzRdID0gbTExO1xuICBvdXRbNV0gPSBtMTI7XG4gIG91dFs2XSA9IG0yMDtcbiAgb3V0WzddID0gbTIxO1xuICBvdXRbOF0gPSBtMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDMgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDQpXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDUpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDYpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDcpXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDgpXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTEwO1xuICBvdXRbNF0gPSBtMTE7XG4gIG91dFs1XSA9IG0xMjtcbiAgb3V0WzZdID0gbTIwO1xuICBvdXRbN10gPSBtMjE7XG4gIG91dFs4XSA9IG0yMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIHZhciBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMTIgPSBhWzVdO1xuICAgIG91dFsxXSA9IGFbM107XG4gICAgb3V0WzJdID0gYVs2XTtcbiAgICBvdXRbM10gPSBhMDE7XG4gICAgb3V0WzVdID0gYVs3XTtcbiAgICBvdXRbNl0gPSBhMDI7XG4gICAgb3V0WzddID0gYTEyO1xuICB9IGVsc2Uge1xuICAgIG91dFswXSA9IGFbMF07XG4gICAgb3V0WzFdID0gYVszXTtcbiAgICBvdXRbMl0gPSBhWzZdO1xuICAgIG91dFszXSA9IGFbMV07XG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzddO1xuICAgIG91dFs2XSA9IGFbMl07XG4gICAgb3V0WzddID0gYVs1XTtcbiAgICBvdXRbOF0gPSBhWzhdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogSW52ZXJ0cyBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdO1xuICB2YXIgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdO1xuICB2YXIgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdO1xuICB2YXIgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxO1xuICB2YXIgYjExID0gLWEyMiAqIGExMCArIGExMiAqIGEyMDtcbiAgdmFyIGIyMSA9IGEyMSAqIGExMCAtIGExMSAqIGEyMDsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHZhciBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRldCA9IDEuMCAvIGRldDtcbiAgb3V0WzBdID0gYjAxICogZGV0O1xuICBvdXRbMV0gPSAoLWEyMiAqIGEwMSArIGEwMiAqIGEyMSkgKiBkZXQ7XG4gIG91dFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogZGV0O1xuICBvdXRbM10gPSBiMTEgKiBkZXQ7XG4gIG91dFs0XSA9IChhMjIgKiBhMDAgLSBhMDIgKiBhMjApICogZGV0O1xuICBvdXRbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBkZXQ7XG4gIG91dFs2XSA9IGIyMSAqIGRldDtcbiAgb3V0WzddID0gKC1hMjEgKiBhMDAgKyBhMDEgKiBhMjApICogZGV0O1xuICBvdXRbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGRldDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkam9pbnQob3V0LCBhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl07XG4gIHZhciBhMTAgPSBhWzNdLFxuICAgICAgYTExID0gYVs0XSxcbiAgICAgIGExMiA9IGFbNV07XG4gIHZhciBhMjAgPSBhWzZdLFxuICAgICAgYTIxID0gYVs3XSxcbiAgICAgIGEyMiA9IGFbOF07XG4gIG91dFswXSA9IGExMSAqIGEyMiAtIGExMiAqIGEyMTtcbiAgb3V0WzFdID0gYTAyICogYTIxIC0gYTAxICogYTIyO1xuICBvdXRbMl0gPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIG91dFszXSA9IGExMiAqIGEyMCAtIGExMCAqIGEyMjtcbiAgb3V0WzRdID0gYTAwICogYTIyIC0gYTAyICogYTIwO1xuICBvdXRbNV0gPSBhMDIgKiBhMTAgLSBhMDAgKiBhMTI7XG4gIG91dFs2XSA9IGExMCAqIGEyMSAtIGExMSAqIGEyMDtcbiAgb3V0WzddID0gYTAxICogYTIwIC0gYTAwICogYTIxO1xuICBvdXRbOF0gPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdO1xuICB2YXIgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdO1xuICB2YXIgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdO1xuICB2YXIgYjAwID0gYlswXSxcbiAgICAgIGIwMSA9IGJbMV0sXG4gICAgICBiMDIgPSBiWzJdO1xuICB2YXIgYjEwID0gYlszXSxcbiAgICAgIGIxMSA9IGJbNF0sXG4gICAgICBiMTIgPSBiWzVdO1xuICB2YXIgYjIwID0gYls2XSxcbiAgICAgIGIyMSA9IGJbN10sXG4gICAgICBiMjIgPSBiWzhdO1xuICBvdXRbMF0gPSBiMDAgKiBhMDAgKyBiMDEgKiBhMTAgKyBiMDIgKiBhMjA7XG4gIG91dFsxXSA9IGIwMCAqIGEwMSArIGIwMSAqIGExMSArIGIwMiAqIGEyMTtcbiAgb3V0WzJdID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyICogYTIyO1xuICBvdXRbM10gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjA7XG4gIG91dFs0XSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMTtcbiAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xuICBvdXRbNl0gPSBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjA7XG4gIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcbiAgb3V0WzhdID0gYjIwICogYTAyICsgYjIxICogYTEyICsgYjIyICogYTIyO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2xhdGUgYSBtYXQzIGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdLFxuICAgICAgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdLFxuICAgICAgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXTtcbiAgb3V0WzBdID0gYTAwO1xuICBvdXRbMV0gPSBhMDE7XG4gIG91dFsyXSA9IGEwMjtcbiAgb3V0WzNdID0gYTEwO1xuICBvdXRbNF0gPSBhMTE7XG4gIG91dFs1XSA9IGExMjtcbiAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gIG91dFs3XSA9IHggKiBhMDEgKyB5ICogYTExICsgYTIxO1xuICBvdXRbOF0gPSB4ICogYTAyICsgeSAqIGExMiArIGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdDMgYnkgdGhlIGdpdmVuIGFuZ2xlXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XSxcbiAgICAgIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XSxcbiAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xuICBvdXRbMV0gPSBjICogYTAxICsgcyAqIGExMTtcbiAgb3V0WzJdID0gYyAqIGEwMiArIHMgKiBhMTI7XG4gIG91dFszXSA9IGMgKiBhMTAgLSBzICogYTAwO1xuICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcbiAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XG4gIG91dFs2XSA9IGEyMDtcbiAgb3V0WzddID0gYTIxO1xuICBvdXRbOF0gPSBhMjI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0MyBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDN9IG91dFxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XG4gIHZhciB4ID0gdlswXSxcbiAgICAgIHkgPSB2WzFdO1xuICBvdXRbMF0gPSB4ICogYVswXTtcbiAgb3V0WzFdID0geCAqIGFbMV07XG4gIG91dFsyXSA9IHggKiBhWzJdO1xuICBvdXRbM10gPSB5ICogYVszXTtcbiAgb3V0WzRdID0geSAqIGFbNF07XG4gIG91dFs1XSA9IHkgKiBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHYpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMTtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gdlswXTtcbiAgb3V0WzddID0gdlsxXTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBjO1xuICBvdXRbMV0gPSBzO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAtcztcbiAgb3V0WzRdID0gYztcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDMuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiBTY2FsaW5nIHZlY3RvclxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tU2NhbGluZyhvdXQsIHYpIHtcbiAgb3V0WzBdID0gdlswXTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gdlsxXTtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgZnJvbSBhIG1hdDJkIGludG8gYSBtYXQzXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIGNvcHlcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQyZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gYVsyXTtcbiAgb3V0WzRdID0gYVszXTtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gYVs0XTtcbiAgb3V0WzddID0gYVs1XTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB5eCA9IHkgKiB4MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgenggPSB6ICogeDI7XG4gIHZhciB6eSA9IHogKiB5MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgb3V0WzNdID0geXggLSB3ejtcbiAgb3V0WzZdID0genggKyB3eTtcbiAgb3V0WzFdID0geXggKyB3ejtcbiAgb3V0WzRdID0gMSAtIHh4IC0geno7XG4gIG91dFs3XSA9IHp5IC0gd3g7XG4gIG91dFsyXSA9IHp4IC0gd3k7XG4gIG91dFs1XSA9IHp5ICsgd3g7XG4gIG91dFs4XSA9IDEgLSB4eCAtIHl5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIGEgM3gzIG5vcm1hbCBtYXRyaXggKHRyYW5zcG9zZSBpbnZlcnNlKSBmcm9tIHRoZSA0eDQgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxuICpcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsRnJvbU1hdDQob3V0LCBhKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdO1xuICB2YXIgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICB2YXIgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xuICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xuICB2YXIgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICB2YXIgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xuICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xuICB2YXIgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xuICB2YXIgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xuICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xuICB2YXIgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xuICB2YXIgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xuICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG5cbiAgdmFyIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcblxuICBpZiAoIWRldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZGV0ID0gMS4wIC8gZGV0O1xuICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcbiAgb3V0WzFdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XG4gIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xuICBvdXRbM10gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzRdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICBvdXRbNl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gIG91dFs4XSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSAyRCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGggb2YgeW91ciBnbCBjb250ZXh0XG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBvZiBnbCBjb250ZXh0XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XG4gIG91dFswXSA9IDIgLyB3aWR0aDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gLTIgLyBoZWlnaHQ7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IC0xO1xuICBvdXRbN10gPSAxO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0M1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcIm1hdDMoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIsIFwiICsgYVs0XSArIFwiLCBcIiArIGFbNV0gKyBcIiwgXCIgKyBhWzZdICsgXCIsIFwiICsgYVs3XSArIFwiLCBcIiArIGFbOF0gKyBcIilcIjtcbn1cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0pO1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQzJ3NcbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXG4gKlxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgb3V0WzVdID0gYVs1XSAtIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgb3V0WzhdID0gYVs4XSAtIGJbOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICBvdXRbM10gPSBhWzNdICogYjtcbiAgb3V0WzRdID0gYVs0XSAqIGI7XG4gIG91dFs1XSA9IGFbNV0gKiBiO1xuICBvdXRbNl0gPSBhWzZdICogYjtcbiAgb3V0WzddID0gYVs3XSAqIGI7XG4gIG91dFs4XSA9IGFbOF0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQzJ3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXSxcbiAgICAgIGE0ID0gYVs0XSxcbiAgICAgIGE1ID0gYVs1XSxcbiAgICAgIGE2ID0gYVs2XSxcbiAgICAgIGE3ID0gYVs3XSxcbiAgICAgIGE4ID0gYVs4XTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXSxcbiAgICAgIGI0ID0gYls0XSxcbiAgICAgIGI1ID0gYls1XSxcbiAgICAgIGI2ID0gYls2XSxcbiAgICAgIGI3ID0gYls3XSxcbiAgICAgIGI4ID0gYls4XTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmIE1hdGguYWJzKGE2IC0gYjYpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE2KSwgTWF0aC5hYnMoYjYpKSAmJiBNYXRoLmFicyhhNyAtIGI3KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSkgJiYgTWF0aC5hYnMoYTggLSBiOCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTgpLCBNYXRoLmFicyhiOCkpO1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDMubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDMuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogNHg0IE1hdHJpeDxicj5Gb3JtYXQ6IGNvbHVtbi1tYWpvciwgd2hlbiB0eXBlZCBvdXQgaXQgbG9va3MgbGlrZSByb3ctbWFqb3I8YnI+VGhlIG1hdHJpY2VzIGFyZSBiZWluZyBwb3N0IG11bHRpcGxpZWQuXG4gKiBAbW9kdWxlIG1hdDRcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0NFxuICpcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICBvdXRbOV0gPSBhWzldO1xuICBvdXRbMTBdID0gYVsxMF07XG4gIG91dFsxMV0gPSBhWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdO1xuICBvdXRbMTNdID0gYVsxM107XG4gIG91dFsxNF0gPSBhWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQ0IHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcbiAqIEByZXR1cm5zIHttYXQ0fSBBIG5ldyBtYXQ0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIHZhciBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIHZhciBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIHZhciBhMjMgPSBhWzExXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYTAxO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYTAyO1xuICAgIG91dFs5XSA9IGExMjtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGEwMztcbiAgICBvdXRbMTNdID0gYTEzO1xuICAgIG91dFsxNF0gPSBhMjM7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYVsxXTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYVsyXTtcbiAgICBvdXRbOV0gPSBhWzZdO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGFbM107XG4gICAgb3V0WzEzXSA9IGFbN107XG4gICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEludmVydHMgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0O1xuICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0O1xuICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIG91dFswXSA9IGExMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKTtcbiAgb3V0WzFdID0gLShhMDEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikpO1xuICBvdXRbMl0gPSBhMDEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XG4gIG91dFszXSA9IC0oYTAxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzRdID0gLShhMTAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICBvdXRbNV0gPSBhMDAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMik7XG4gIG91dFs2XSA9IC0oYTAwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzddID0gYTAwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTAgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpO1xuICBvdXRbOF0gPSBhMTAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSk7XG4gIG91dFs5XSA9IC0oYTAwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpKTtcbiAgb3V0WzEwXSA9IGEwMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMyAtIGEwMyAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKTtcbiAgb3V0WzExXSA9IC0oYTAwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIzIC0gYTAzICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpKTtcbiAgb3V0WzEyXSA9IC0oYTEwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpKTtcbiAgb3V0WzEzXSA9IGEwMCAqIChhMjEgKiBhMzIgLSBhMjIgKiBhMzEpIC0gYTIwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKTtcbiAgb3V0WzE0XSA9IC0oYTAwICogKGExMSAqIGEzMiAtIGExMiAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpKTtcbiAgb3V0WzE1XSA9IGEwMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdOyAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcblxuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzFdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzRdO1xuICBiMSA9IGJbNV07XG4gIGIyID0gYls2XTtcbiAgYjMgPSBiWzddO1xuICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzhdO1xuICBiMSA9IGJbOV07XG4gIGIyID0gYlsxMF07XG4gIGIzID0gYlsxMV07XG4gIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbOV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG4gIGIwID0gYlsxMl07XG4gIGIxID0gYlsxM107XG4gIGIyID0gYlsxNF07XG4gIGIzID0gYlsxNV07XG4gIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzEzXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgdmFyIGExMCwgYTExLCBhMTIsIGExMztcbiAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gIH0gZWxzZSB7XG4gICAgYTAwID0gYVswXTtcbiAgICBhMDEgPSBhWzFdO1xuICAgIGEwMiA9IGFbMl07XG4gICAgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdO1xuICAgIGExMSA9IGFbNV07XG4gICAgYTEyID0gYVs2XTtcbiAgICBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07XG4gICAgYTIxID0gYVs5XTtcbiAgICBhMjIgPSBhWzEwXTtcbiAgICBhMjMgPSBhWzExXTtcbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcbiAgICBvdXRbM10gPSBhMDM7XG4gICAgb3V0WzRdID0gYTEwO1xuICAgIG91dFs1XSA9IGExMTtcbiAgICBvdXRbNl0gPSBhMTI7XG4gICAgb3V0WzddID0gYTEzO1xuICAgIG91dFs4XSA9IGEyMDtcbiAgICBvdXRbOV0gPSBhMjE7XG4gICAgb3V0WzEwXSA9IGEyMjtcbiAgICBvdXRbMTFdID0gYTIzO1xuICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTtcbiAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgb3V0WzBdID0gYVswXSAqIHg7XG4gIG91dFsxXSA9IGFbMV0gKiB4O1xuICBvdXRbMl0gPSBhWzJdICogeDtcbiAgb3V0WzNdID0gYVszXSAqIHg7XG4gIG91dFs0XSA9IGFbNF0gKiB5O1xuICBvdXRbNV0gPSBhWzVdICogeTtcbiAgb3V0WzZdID0gYVs2XSAqIHk7XG4gIG91dFs3XSA9IGFbN10gKiB5O1xuICBvdXRbOF0gPSBhWzhdICogejtcbiAgb3V0WzldID0gYVs5XSAqIHo7XG4gIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkLCBheGlzKSB7XG4gIHZhciB4ID0gYXhpc1swXSxcbiAgICAgIHkgPSBheGlzWzFdLFxuICAgICAgeiA9IGF4aXNbMl07XG4gIHZhciBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICB2YXIgcywgYywgdDtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgdmFyIGExMCwgYTExLCBhMTIsIGExMztcbiAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcbiAgdmFyIGIwMCwgYjAxLCBiMDI7XG4gIHZhciBiMTAsIGIxMSwgYjEyO1xuICB2YXIgYjIwLCBiMjEsIGIyMjtcblxuICBpZiAobGVuIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGVuID0gMSAvIGxlbjtcbiAgeCAqPSBsZW47XG4gIHkgKj0gbGVuO1xuICB6ICo9IGxlbjtcbiAgcyA9IE1hdGguc2luKHJhZCk7XG4gIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB0ID0gMSAtIGM7XG4gIGEwMCA9IGFbMF07XG4gIGEwMSA9IGFbMV07XG4gIGEwMiA9IGFbMl07XG4gIGEwMyA9IGFbM107XG4gIGExMCA9IGFbNF07XG4gIGExMSA9IGFbNV07XG4gIGExMiA9IGFbNl07XG4gIGExMyA9IGFbN107XG4gIGEyMCA9IGFbOF07XG4gIGEyMSA9IGFbOV07XG4gIGEyMiA9IGFbMTBdO1xuICBhMjMgPSBhWzExXTsgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG5cbiAgYjAwID0geCAqIHggKiB0ICsgYztcbiAgYjAxID0geSAqIHggKiB0ICsgeiAqIHM7XG4gIGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xuICBiMTAgPSB4ICogeSAqIHQgLSB6ICogcztcbiAgYjExID0geSAqIHkgKiB0ICsgYztcbiAgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gIGIyMCA9IHggKiB6ICogdCArIHkgKiBzO1xuICBiMjEgPSB5ICogeiAqIHQgLSB4ICogcztcbiAgYjIyID0geiAqIHogKiB0ICsgYzsgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XG4gIG91dFsxXSA9IGEwMSAqIGIwMCArIGExMSAqIGIwMSArIGEyMSAqIGIwMjtcbiAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XG4gIG91dFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gIG91dFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcbiAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gIG91dFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgaWYgKGEgIT09IG91dCkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XTtcbiAgdmFyIGEyMSA9IGFbOV07XG4gIHZhciBhMjIgPSBhWzEwXTtcbiAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgKyBhMjEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjICsgYTIyICogcztcbiAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEyMCAqIGMgLSBhMTAgKiBzO1xuICBvdXRbOV0gPSBhMjEgKiBjIC0gYTExICogcztcbiAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xuICBvdXRbMTFdID0gYTIzICogYyAtIGExMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTAwID0gYVswXTtcbiAgdmFyIGEwMSA9IGFbMV07XG4gIHZhciBhMDIgPSBhWzJdO1xuICB2YXIgYTAzID0gYVszXTtcbiAgdmFyIGEyMCA9IGFbOF07XG4gIHZhciBhMjEgPSBhWzldO1xuICB2YXIgYTIyID0gYVsxMF07XG4gIHZhciBhMjMgPSBhWzExXTtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xuICBvdXRbMV0gPSBhMDEgKiBjIC0gYTIxICogcztcbiAgb3V0WzJdID0gYTAyICogYyAtIGEyMiAqIHM7XG4gIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xuICBvdXRbOF0gPSBhMDAgKiBzICsgYTIwICogYztcbiAgb3V0WzldID0gYTAxICogcyArIGEyMSAqIGM7XG4gIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcbiAgb3V0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgdmFyIGEwMCA9IGFbMF07XG4gIHZhciBhMDEgPSBhWzFdO1xuICB2YXIgYTAyID0gYVsyXTtcbiAgdmFyIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgb3V0WzldID0gYVs5XTtcbiAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfSAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cblxuICBvdXRbMF0gPSBhMDAgKiBjICsgYTEwICogcztcbiAgb3V0WzFdID0gYTAxICogYyArIGExMSAqIHM7XG4gIG91dFsyXSA9IGEwMiAqIGMgKyBhMTIgKiBzO1xuICBvdXRbM10gPSBhMDMgKiBjICsgYTEzICogcztcbiAgb3V0WzRdID0gYTEwICogYyAtIGEwMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgLSBhMDEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjIC0gYTAyICogcztcbiAgb3V0WzddID0gYTEzICogYyAtIGEwMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSB2WzFdO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gdlsyXTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZSBhcm91bmQgYSBnaXZlbiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZShkZXN0LCBkZXN0LCByYWQsIGF4aXMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCwgYXhpcykge1xuICB2YXIgeCA9IGF4aXNbMF0sXG4gICAgICB5ID0gYXhpc1sxXSxcbiAgICAgIHogPSBheGlzWzJdO1xuICB2YXIgbGVuID0gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbiAgdmFyIHMsIGMsIHQ7XG5cbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxlbiA9IDEgLyBsZW47XG4gIHggKj0gbGVuO1xuICB5ICo9IGxlbjtcbiAgeiAqPSBsZW47XG4gIHMgPSBNYXRoLnNpbihyYWQpO1xuICBjID0gTWF0aC5jb3MocmFkKTtcbiAgdCA9IDEgLSBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IHggKiB4ICogdCArIGM7XG4gIG91dFsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICBvdXRbMl0gPSB6ICogeCAqIHQgLSB5ICogcztcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geCAqIHkgKiB0IC0geiAqIHM7XG4gIG91dFs1XSA9IHkgKiB5ICogdCArIGM7XG4gIG91dFs2XSA9IHogKiB5ICogdCArIHggKiBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4ICogeiAqIHQgKyB5ICogcztcbiAgb3V0WzldID0geSAqIHogKiB0IC0geCAqIHM7XG4gIG91dFsxMF0gPSB6ICogeiAqIHQgKyBjO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWChkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21YUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBjO1xuICBvdXRbNl0gPSBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAtcztcbiAgb3V0WzEwXSA9IGM7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5yb3RhdGVZKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVlSb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSBzO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWlJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gLXM7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB2KSB7XG4gIC8vIFF1YXRlcm5pb24gbWF0aFxuICB2YXIgeCA9IHFbMF0sXG4gICAgICB5ID0gcVsxXSxcbiAgICAgIHogPSBxWzJdLFxuICAgICAgdyA9IHFbM107XG4gIHZhciB4MiA9IHggKyB4O1xuICB2YXIgeTIgPSB5ICsgeTtcbiAgdmFyIHoyID0geiArIHo7XG4gIHZhciB4eCA9IHggKiB4MjtcbiAgdmFyIHh5ID0geCAqIHkyO1xuICB2YXIgeHogPSB4ICogejI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHl6ID0geSAqIHoyO1xuICB2YXIgenogPSB6ICogejI7XG4gIHZhciB3eCA9IHcgKiB4MjtcbiAgdmFyIHd5ID0gdyAqIHkyO1xuICB2YXIgd3ogPSB3ICogejI7XG4gIG91dFswXSA9IDEgLSAoeXkgKyB6eik7XG4gIG91dFsxXSA9IHh5ICsgd3o7XG4gIG91dFsyXSA9IHh6IC0gd3k7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHh5IC0gd3o7XG4gIG91dFs1XSA9IDEgLSAoeHggKyB6eik7XG4gIG91dFs2XSA9IHl6ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHh6ICsgd3k7XG4gIG91dFs5XSA9IHl6IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBmcm9tIGEgZHVhbCBxdWF0LlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IE1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxuICogQHJldHVybnMge21hdDR9IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQyKG91dCwgYSkge1xuICB2YXIgdHJhbnNsYXRpb24gPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgdmFyIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXSxcbiAgICAgIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XTtcbiAgdmFyIG1hZ25pdHVkZSA9IGJ4ICogYnggKyBieSAqIGJ5ICsgYnogKiBieiArIGJ3ICogYnc7IC8vT25seSBzY2FsZSBpZiBpdCBtYWtlcyBzZW5zZVxuXG4gIGlmIChtYWduaXR1ZGUgPiAwKSB7XG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyIC8gbWFnbml0dWRlO1xuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMiAvIG1hZ25pdHVkZTtcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDIgLyBtYWduaXR1ZGU7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyO1xuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDI7XG4gIH1cblxuICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIGEsIHRyYW5zbGF0aW9uKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLFxuICogIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xuICBvdXRbMF0gPSBtYXRbMTJdO1xuICBvdXRbMV0gPSBtYXRbMTNdO1xuICBvdXRbMl0gPSBtYXRbMTRdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXG4gKiAgdGhlIHNhbWUgYXMgdGhlIHNjYWxpbmcgdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gIHZhciBtMTEgPSBtYXRbMF07XG4gIHZhciBtMTIgPSBtYXRbMV07XG4gIHZhciBtMTMgPSBtYXRbMl07XG4gIHZhciBtMjEgPSBtYXRbNF07XG4gIHZhciBtMjIgPSBtYXRbNV07XG4gIHZhciBtMjMgPSBtYXRbNl07XG4gIHZhciBtMzEgPSBtYXRbOF07XG4gIHZhciBtMzIgPSBtYXRbOV07XG4gIHZhciBtMzMgPSBtYXRbMTBdO1xuICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xuICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICBvdXRbMl0gPSBNYXRoLmh5cG90KG0zMSwgbTMyLCBtMzMpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb24ob3V0LCBtYXQpIHtcbiAgdmFyIHNjYWxpbmcgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgZ2V0U2NhbGluZyhzY2FsaW5nLCBtYXQpO1xuICB2YXIgaXMxID0gMSAvIHNjYWxpbmdbMF07XG4gIHZhciBpczIgPSAxIC8gc2NhbGluZ1sxXTtcbiAgdmFyIGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xuICB2YXIgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgdmFyIHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gIHZhciBzbTEzID0gbWF0WzJdICogaXMzO1xuICB2YXIgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgdmFyIHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gIHZhciBzbTIzID0gbWF0WzZdICogaXMzO1xuICB2YXIgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgdmFyIHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gIHZhciBzbTMzID0gbWF0WzEwXSAqIGlzMztcbiAgdmFyIHRyYWNlID0gc20xMSArIHNtMjIgKyBzbTMzO1xuICB2YXIgUyA9IDA7XG5cbiAgaWYgKHRyYWNlID4gMCkge1xuICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICBvdXRbMF0gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20xMSAtIHNtMjIgLSBzbTMzKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgb3V0WzFdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgb3V0WzJdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gIH0gZWxzZSBpZiAoc20yMiA+IHNtMzMpIHtcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgIG91dFszXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgIG91dFswXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgIG91dFsyXSA9IChzbTIzICsgc20zMikgLyBTO1xuICB9IGVsc2Uge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgb3V0WzBdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XG4gIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gb3JpZ2luXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgbmVnYXRpdmVPcmlnaW4pO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IG8gVGhlIG9yaWdpbiB2ZWN0b3IgYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbihvdXQsIHEsIHYsIHMsIG8pIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgdmFyIG94ID0gb1swXTtcbiAgdmFyIG95ID0gb1sxXTtcbiAgdmFyIG96ID0gb1syXTtcbiAgdmFyIG91dDAgPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgdmFyIG91dDEgPSAoeHkgKyB3eikgKiBzeDtcbiAgdmFyIG91dDIgPSAoeHogLSB3eSkgKiBzeDtcbiAgdmFyIG91dDQgPSAoeHkgLSB3eikgKiBzeTtcbiAgdmFyIG91dDUgPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgdmFyIG91dDYgPSAoeXogKyB3eCkgKiBzeTtcbiAgdmFyIG91dDggPSAoeHogKyB3eSkgKiBzejtcbiAgdmFyIG91dDkgPSAoeXogLSB3eCkgKiBzejtcbiAgdmFyIG91dDEwID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFswXSA9IG91dDA7XG4gIG91dFsxXSA9IG91dDE7XG4gIG91dFsyXSA9IG91dDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IG91dDQ7XG4gIG91dFs1XSA9IG91dDU7XG4gIG91dFs2XSA9IG91dDY7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IG91dDg7XG4gIG91dFs5XSA9IG91dDk7XG4gIG91dFsxMF0gPSBvdXQxMDtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdICsgb3ggLSAob3V0MCAqIG94ICsgb3V0NCAqIG95ICsgb3V0OCAqIG96KTtcbiAgb3V0WzEzXSA9IHZbMV0gKyBveSAtIChvdXQxICogb3ggKyBvdXQ1ICogb3kgKyBvdXQ5ICogb3opO1xuICBvdXRbMTRdID0gdlsyXSArIG96IC0gKG91dDIgKiBveCArIG91dDYgKiBveSArIG91dDEwICogb3opO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB5eCA9IHkgKiB4MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgenggPSB6ICogeDI7XG4gIHZhciB6eSA9IHogKiB5MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgb3V0WzFdID0geXggKyB3ejtcbiAgb3V0WzJdID0genggLSB3eTtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geXggLSB3ejtcbiAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gIG91dFs2XSA9IHp5ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHp4ICsgd3k7XG4gIG91dFs5XSA9IHp5IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBmcnVzdHVtIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge051bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJ1c3R1bShvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIHZhciBybCA9IDEgLyAocmlnaHQgLSBsZWZ0KTtcbiAgdmFyIHRiID0gMSAvICh0b3AgLSBib3R0b20pO1xuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMF0gPSBuZWFyICogMiAqIHJsO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBuZWFyICogMiAqIHRiO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAocmlnaHQgKyBsZWZ0KSAqIHJsO1xuICBvdXRbOV0gPSAodG9wICsgYm90dG9tKSAqIHRiO1xuICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gIG91dFsxMV0gPSAtMTtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gZmFyICogbmVhciAqIDIgKiBuZjtcbiAgb3V0WzE1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cbiAqIFRoZSBuZWFyL2ZhciBjbGlwIHBsYW5lcyBjb3JyZXNwb25kIHRvIGEgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZSBaIHJhbmdlIG9mIFstMSwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdML09wZW5HTCdzIGNsaXAgdm9sdW1lLlxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlTk8ob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xuICB9IGVsc2Uge1xuICAgIG91dFsxMF0gPSAtMTtcbiAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0LnBlcnNwZWN0aXZlTk99XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmVOTztcbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggc3VpdGFibGUgZm9yIFdlYkdQVSB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbMCwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdQVS9WdWxrYW4vRGlyZWN0WC9NZXRhbCdzIGNsaXAgdm9sdW1lLlxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlWk8ob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IGZhciAqIG5mO1xuICAgIG91dFsxNF0gPSBmYXIgKiBuZWFyICogbmY7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzEwXSA9IC0xO1xuICAgIG91dFsxNF0gPSAtbmVhcjtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGdlbmVyYXRpbmcgcHJvamVjdGlvbiBtYXRyaWNlcyB0byBiZSB1c2VkXG4gKiB3aXRoIHRoZSBzdGlsbCBleHBlcmllbWVudGFsIFdlYlZSIEFQSS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge09iamVjdH0gZm92IE9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiB1cERlZ3JlZXMsIGRvd25EZWdyZWVzLCBsZWZ0RGVncmVlcywgcmlnaHREZWdyZWVzXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhvdXQsIGZvdiwgbmVhciwgZmFyKSB7XG4gIHZhciB1cFRhbiA9IE1hdGgudGFuKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgZG93blRhbiA9IE1hdGgudGFuKGZvdi5kb3duRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciBsZWZ0VGFuID0gTWF0aC50YW4oZm92LmxlZnREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIHJpZ2h0VGFuID0gTWF0aC50YW4oZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgdmFyIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xuICBvdXRbMF0gPSB4U2NhbGU7XG4gIG91dFsxXSA9IDAuMDtcbiAgb3V0WzJdID0gMC4wO1xuICBvdXRbM10gPSAwLjA7XG4gIG91dFs0XSA9IDAuMDtcbiAgb3V0WzVdID0geVNjYWxlO1xuICBvdXRbNl0gPSAwLjA7XG4gIG91dFs3XSA9IDAuMDtcbiAgb3V0WzhdID0gLSgobGVmdFRhbiAtIHJpZ2h0VGFuKSAqIHhTY2FsZSAqIDAuNSk7XG4gIG91dFs5XSA9ICh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41O1xuICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMTFdID0gLTEuMDtcbiAgb3V0WzEyXSA9IDAuMDtcbiAgb3V0WzEzXSA9IDAuMDtcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7XG4gIG91dFsxNV0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLlxuICogVGhlIG5lYXIvZmFyIGNsaXAgcGxhbmVzIGNvcnJlc3BvbmQgdG8gYSBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlIFogcmFuZ2Ugb2YgWy0xLCAxXSxcbiAqIHdoaWNoIG1hdGNoZXMgV2ViR0wvT3BlbkdMJ3MgY2xpcCB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvTk8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gIHZhciBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm9ydGhvTk99XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG9ydGhvID0gb3J0aG9OTztcbi8qKlxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbMCwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdQVS9WdWxrYW4vRGlyZWN0WC9NZXRhbCdzIGNsaXAgdm9sdW1lLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob1pPKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgdmFyIGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuICB2YXIgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCk7XG4gIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IC0yICogbHI7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IC0yICogYnQ7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IG5lYXIgKiBuZjtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzLlxuICogSWYgeW91IHdhbnQgYSBtYXRyaXggdGhhdCBhY3R1YWxseSBtYWtlcyBhbiBvYmplY3QgbG9vayBhdCBhbm90aGVyIG9iamVjdCwgeW91IHNob3VsZCB1c2UgdGFyZ2V0VG8gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0LCBleWUsIGNlbnRlciwgdXApIHtcbiAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcbiAgdmFyIGV5ZXggPSBleWVbMF07XG4gIHZhciBleWV5ID0gZXllWzFdO1xuICB2YXIgZXlleiA9IGV5ZVsyXTtcbiAgdmFyIHVweCA9IHVwWzBdO1xuICB2YXIgdXB5ID0gdXBbMV07XG4gIHZhciB1cHogPSB1cFsyXTtcbiAgdmFyIGNlbnRlcnggPSBjZW50ZXJbMF07XG4gIHZhciBjZW50ZXJ5ID0gY2VudGVyWzFdO1xuICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcblxuICBpZiAoTWF0aC5hYnMoZXlleCAtIGNlbnRlcngpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJiBNYXRoLmFicyhleWV5IC0gY2VudGVyeSkgPCBnbE1hdHJpeC5FUFNJTE9OICYmIE1hdGguYWJzKGV5ZXogLSBjZW50ZXJ6KSA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gaWRlbnRpdHkob3V0KTtcbiAgfVxuXG4gIHowID0gZXlleCAtIGNlbnRlcng7XG4gIHoxID0gZXlleSAtIGNlbnRlcnk7XG4gIHoyID0gZXlleiAtIGNlbnRlcno7XG4gIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xuICB6MCAqPSBsZW47XG4gIHoxICo9IGxlbjtcbiAgejIgKj0gbGVuO1xuICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XG4gIHgxID0gdXB6ICogejAgLSB1cHggKiB6MjtcbiAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuICBsZW4gPSBNYXRoLmh5cG90KHgwLCB4MSwgeDIpO1xuXG4gIGlmICghbGVuKSB7XG4gICAgeDAgPSAwO1xuICAgIHgxID0gMDtcbiAgICB4MiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbGVuID0gMSAvIGxlbjtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIHkwID0gejEgKiB4MiAtIHoyICogeDE7XG4gIHkxID0gejIgKiB4MCAtIHowICogeDI7XG4gIHkyID0gejAgKiB4MSAtIHoxICogeDA7XG4gIGxlbiA9IE1hdGguaHlwb3QoeTAsIHkxLCB5Mik7XG5cbiAgaWYgKCFsZW4pIHtcbiAgICB5MCA9IDA7XG4gICAgeTEgPSAwO1xuICAgIHkyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHkwICo9IGxlbjtcbiAgICB5MSAqPSBsZW47XG4gICAgeTIgKj0gbGVuO1xuICB9XG5cbiAgb3V0WzBdID0geDA7XG4gIG91dFsxXSA9IHkwO1xuICBvdXRbMl0gPSB6MDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geDE7XG4gIG91dFs1XSA9IHkxO1xuICBvdXRbNl0gPSB6MTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geDI7XG4gIG91dFs5XSA9IHkyO1xuICBvdXRbMTBdID0gejI7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xuICBvdXRbMTNdID0gLSh5MCAqIGV5ZXggKyB5MSAqIGV5ZXkgKyB5MiAqIGV5ZXopO1xuICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgdmFyIGV5ZXggPSBleWVbMF0sXG4gICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgIHVweCA9IHVwWzBdLFxuICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICB1cHogPSB1cFsyXTtcbiAgdmFyIHowID0gZXlleCAtIHRhcmdldFswXSxcbiAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgIHoyID0gZXlleiAtIHRhcmdldFsyXTtcbiAgdmFyIGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB6MCAqPSBsZW47XG4gICAgejEgKj0gbGVuO1xuICAgIHoyICo9IGxlbjtcbiAgfVxuXG4gIHZhciB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejIsXG4gICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG4gIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIG91dFswXSA9IHgwO1xuICBvdXRbMV0gPSB4MTtcbiAgb3V0WzJdID0geDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHowO1xuICBvdXRbOV0gPSB6MTtcbiAgb3V0WzEwXSA9IHoyO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IGV5ZXg7XG4gIG91dFsxM10gPSBleWV5O1xuICBvdXRbMTRdID0gZXllejtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0NChcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiLCBcIiArIGFbNl0gKyBcIiwgXCIgKyBhWzddICsgXCIsIFwiICsgYVs4XSArIFwiLCBcIiArIGFbOV0gKyBcIiwgXCIgKyBhWzEwXSArIFwiLCBcIiArIGFbMTFdICsgXCIsIFwiICsgYVsxMl0gKyBcIiwgXCIgKyBhWzEzXSArIFwiLCBcIiArIGFbMTRdICsgXCIsIFwiICsgYVsxNV0gKyBcIilcIjtcbn1cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0sIGFbOV0sIGFbMTBdLCBhWzExXSwgYVsxMl0sIGFbMTNdLCBhWzE0XSwgYVsxNV0pO1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3NcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgb3V0WzEwXSA9IGFbMTBdIC0gYlsxMF07XG4gIG91dFsxMV0gPSBhWzExXSAtIGJbMTFdO1xuICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdIC0gYlsxM107XG4gIG91dFsxNF0gPSBhWzE0XSAtIGJbMTRdO1xuICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICBvdXRbNF0gPSBhWzRdICogYjtcbiAgb3V0WzVdID0gYVs1XSAqIGI7XG4gIG91dFs2XSA9IGFbNl0gKiBiO1xuICBvdXRbN10gPSBhWzddICogYjtcbiAgb3V0WzhdID0gYVs4XSAqIGI7XG4gIG91dFs5XSA9IGFbOV0gKiBiO1xuICBvdXRbMTBdID0gYVsxMF0gKiBiO1xuICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICBvdXRbMTJdID0gYVsxMl0gKiBiO1xuICBvdXRbMTNdID0gYVsxM10gKiBiO1xuICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICBvdXRbMTVdID0gYVsxNV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XSAqIHNjYWxlO1xuICBvdXRbOV0gPSBhWzldICsgYls5XSAqIHNjYWxlO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXSAqIHNjYWxlO1xuICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXSAqIHNjYWxlO1xuICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXSAqIHNjYWxlO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXSAqIHNjYWxlO1xuICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XSAqIHNjYWxlO1xuICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XSAmJiBhWzldID09PSBiWzldICYmIGFbMTBdID09PSBiWzEwXSAmJiBhWzExXSA9PT0gYlsxMV0gJiYgYVsxMl0gPT09IGJbMTJdICYmIGFbMTNdID09PSBiWzEzXSAmJiBhWzE0XSA9PT0gYlsxNF0gJiYgYVsxNV0gPT09IGJbMTVdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdLFxuICAgICAgYTYgPSBhWzZdLFxuICAgICAgYTcgPSBhWzddO1xuICB2YXIgYTggPSBhWzhdLFxuICAgICAgYTkgPSBhWzldLFxuICAgICAgYTEwID0gYVsxMF0sXG4gICAgICBhMTEgPSBhWzExXTtcbiAgdmFyIGExMiA9IGFbMTJdLFxuICAgICAgYTEzID0gYVsxM10sXG4gICAgICBhMTQgPSBhWzE0XSxcbiAgICAgIGExNSA9IGFbMTVdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICB2YXIgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdLFxuICAgICAgYjYgPSBiWzZdLFxuICAgICAgYjcgPSBiWzddO1xuICB2YXIgYjggPSBiWzhdLFxuICAgICAgYjkgPSBiWzldLFxuICAgICAgYjEwID0gYlsxMF0sXG4gICAgICBiMTEgPSBiWzExXTtcbiAgdmFyIGIxMiA9IGJbMTJdLFxuICAgICAgYjEzID0gYlsxM10sXG4gICAgICBiMTQgPSBiWzE0XSxcbiAgICAgIGIxNSA9IGJbMTVdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkgJiYgTWF0aC5hYnMoYTkgLSBiOSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTkpLCBNYXRoLmFicyhiOSkpICYmIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEwKSwgTWF0aC5hYnMoYjEwKSkgJiYgTWF0aC5hYnMoYTExIC0gYjExKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTEpLCBNYXRoLmFicyhiMTEpKSAmJiBNYXRoLmFicyhhMTIgLSBiMTIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMiksIE1hdGguYWJzKGIxMikpICYmIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEzKSwgTWF0aC5hYnMoYjEzKSkgJiYgTWF0aC5hYnMoYTE0IC0gYjE0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTQpLCBNYXRoLmFicyhiMTQpKSAmJiBNYXRoLmFicyhhMTUgLSBiMTUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNSksIE1hdGguYWJzKGIxNSkpO1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbmltcG9ydCAqIGFzIG1hdDMgZnJvbSBcIi4vbWF0My5qc1wiO1xuaW1wb3J0ICogYXMgdmVjMyBmcm9tIFwiLi92ZWMzLmpzXCI7XG5pbXBvcnQgKiBhcyB2ZWM0IGZyb20gXCIuL3ZlYzQuanNcIjtcbi8qKlxuICogUXVhdGVybmlvblxuICogQG1vZHVsZSBxdWF0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IHF1YXRcbiAqXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgfVxuXG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCBhIHF1YXQgdG8gdGhlIGlkZW50aXR5IHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDA7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxuICogdGhlbiByZXR1cm5zIGl0LlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7XG4gIHJhZCA9IHJhZCAqIDAuNTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICBvdXRbMF0gPSBzICogYXhpc1swXTtcbiAgb3V0WzFdID0gcyAqIGF4aXNbMV07XG4gIG91dFsyXSA9IHMgKiBheGlzWzJdO1xuICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZXRzIHRoZSByb3RhdGlvbiBheGlzIGFuZCBhbmdsZSBmb3IgYSBnaXZlblxuICogIHF1YXRlcm5pb24uIElmIGEgcXVhdGVybmlvbiBpcyBjcmVhdGVkIHdpdGhcbiAqICBzZXRBeGlzQW5nbGUsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lXG4gKiAgdmFsdWVzIGFzIHByb3ZpZGllZCBpbiB0aGUgb3JpZ2luYWwgcGFyYW1ldGVyIGxpc3RcbiAqICBPUiBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB2YWx1ZXMuXG4gKiBFeGFtcGxlOiBUaGUgcXVhdGVybmlvbiBmb3JtZWQgYnkgYXhpcyBbMCwgMCwgMV0gYW5kXG4gKiAgYW5nbGUgLTkwIGlzIHRoZSBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIGZvcm1lZCBieVxuICogIFswLCAwLCAxXSBhbmQgMjcwLiBUaGlzIG1ldGhvZCBmYXZvcnMgdGhlIGxhdHRlci5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dF9heGlzICBWZWN0b3IgcmVjZWl2aW5nIHRoZSBheGlzIG9mIHJvdGF0aW9uXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXR9IHEgICAgIFF1YXRlcm5pb24gdG8gYmUgZGVjb21wb3NlZFxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSByb3RhdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBeGlzQW5nbGUob3V0X2F4aXMsIHEpIHtcbiAgdmFyIHJhZCA9IE1hdGguYWNvcyhxWzNdKSAqIDIuMDtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQgLyAyLjApO1xuXG4gIGlmIChzID4gZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIG91dF9heGlzWzBdID0gcVswXSAvIHM7XG4gICAgb3V0X2F4aXNbMV0gPSBxWzFdIC8gcztcbiAgICBvdXRfYXhpc1syXSA9IHFbMl0gLyBzO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHMgaXMgemVybywgcmV0dXJuIGFueSBheGlzIChubyByb3RhdGlvbiAtIGF4aXMgZG9lcyBub3QgbWF0dGVyKVxuICAgIG91dF9heGlzWzBdID0gMTtcbiAgICBvdXRfYXhpc1sxXSA9IDA7XG4gICAgb3V0X2F4aXNbMl0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJhZDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYW5ndWxhciBkaXN0YW5jZSBiZXR3ZWVuIHR3byB1bml0IHF1YXRlcm5pb25zXG4gKlxuICogQHBhcmFtICB7UmVhZG9ubHlRdWF0fSBhICAgICBPcmlnaW4gdW5pdCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXR9IGIgICAgIERlc3RpbmF0aW9uIHVuaXQgcXVhdGVybmlvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIGJldHdlZW4gdGhlIHR3byBxdWF0ZXJuaW9uc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbmdsZShhLCBiKSB7XG4gIHZhciBkb3Rwcm9kdWN0ID0gZG90KGEsIGIpO1xuICByZXR1cm4gTWF0aC5hY29zKDIgKiBkb3Rwcm9kdWN0ICogZG90cHJvZHVjdCAtIDEpO1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICBieiA9IGJbMl0sXG4gICAgICBidyA9IGJbM107XG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWCBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gIHJhZCAqPSAwLjU7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieCA9IE1hdGguc2luKHJhZCksXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXogKiBieDtcbiAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICByYWQgKj0gMC41O1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnkgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xuICBvdXRbMF0gPSBheCAqIGJ3IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XG4gIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXkgKiBieTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgcmFkICo9IDAuNTtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgdmFyIGJ6ID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XG4gIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xuICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBiejtcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIFcgY29tcG9uZW50IG9mIGEgcXVhdCBmcm9tIHRoZSBYLCBZLCBhbmQgWiBjb21wb25lbnRzLlxuICogQXNzdW1lcyB0aGF0IHF1YXRlcm5pb24gaXMgMSB1bml0IGluIGxlbmd0aC5cbiAqIEFueSBleGlzdGluZyBXIGNvbXBvbmVudCB3aWxsIGJlIGlnbm9yZWQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVXKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSBNYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2YgYSB1bml0IHF1YXRlcm5pb24uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIHZhciByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciBldCA9IE1hdGguZXhwKHcpO1xuICB2YXIgcyA9IHIgPiAwID8gZXQgKiBNYXRoLnNpbihyKSAvIHIgOiAwO1xuICBvdXRbMF0gPSB4ICogcztcbiAgb3V0WzFdID0geSAqIHM7XG4gIG91dFsyXSA9IHogKiBzO1xuICBvdXRbM10gPSBldCAqIE1hdGguY29zKHIpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIG5hdHVyYWwgbG9nYXJpdGhtIG9mIGEgdW5pdCBxdWF0ZXJuaW9uLlxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgdGhlIGV4cG9uZW50aWFsIG9mXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxuKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIHZhciByID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIHZhciB0ID0gciA+IDAgPyBNYXRoLmF0YW4yKHIsIHcpIC8gciA6IDA7XG4gIG91dFswXSA9IHggKiB0O1xuICBvdXRbMV0gPSB5ICogdDtcbiAgb3V0WzJdID0geiAqIHQ7XG4gIG91dFszXSA9IDAuNSAqIE1hdGgubG9nKHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBzY2FsYXIgcG93ZXIgb2YgYSB1bml0IHF1YXRlcm5pb24uXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSB0aGUgZXhwb25lbnRpYWwgb2ZcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgcXVhdGVybmlvbiBieVxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwb3cob3V0LCBhLCBiKSB7XG4gIGxuKG91dCwgYSk7XG4gIHNjYWxlKG91dCwgb3V0LCBiKTtcbiAgZXhwKG91dCwgb3V0KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgLy8gYmVuY2htYXJrczpcbiAgLy8gICAgaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi1zbGVycC1pbXBsZW1lbnRhdGlvbnNcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgdmFyIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIGJ3ID0gYlszXTtcbiAgdmFyIG9tZWdhLCBjb3NvbSwgc2lub20sIHNjYWxlMCwgc2NhbGUxOyAvLyBjYWxjIGNvc2luZVxuXG4gIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidzsgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG5cbiAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgY29zb20gPSAtY29zb207XG4gICAgYnggPSAtYng7XG4gICAgYnkgPSAtYnk7XG4gICAgYnogPSAtYno7XG4gICAgYncgPSAtYnc7XG4gIH0gLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuXG5cbiAgaWYgKDEuMCAtIGNvc29tID4gZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcbiAgICBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XG4gIH0gZWxzZSB7XG4gICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cbiAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgIHNjYWxlMSA9IHQ7XG4gIH0gLy8gY2FsY3VsYXRlIGZpbmFsIHZhbHVlc1xuXG5cbiAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgb3V0WzFdID0gc2NhbGUwICogYXkgKyBzY2FsZTEgKiBieTtcbiAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHVuaXQgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0KSB7XG4gIC8vIEltcGxlbWVudGF0aW9uIG9mIGh0dHA6Ly9wbGFubmluZy5jcy51aXVjLmVkdS9ub2RlMTk4Lmh0bWxcbiAgLy8gVE9ETzogQ2FsbGluZyByYW5kb20gMyB0aW1lcyBpcyBwcm9iYWJseSBub3QgdGhlIGZhc3Rlc3Qgc29sdXRpb25cbiAgdmFyIHUxID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gIHZhciB1MiA9IGdsTWF0cml4LlJBTkRPTSgpO1xuICB2YXIgdTMgPSBnbE1hdHJpeC5SQU5ET00oKTtcbiAgdmFyIHNxcnQxTWludXNVMSA9IE1hdGguc3FydCgxIC0gdTEpO1xuICB2YXIgc3FydFUxID0gTWF0aC5zcXJ0KHUxKTtcbiAgb3V0WzBdID0gc3FydDFNaW51c1UxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUyKTtcbiAgb3V0WzFdID0gc3FydDFNaW51c1UxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUyKTtcbiAgb3V0WzJdID0gc3FydFUxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUzKTtcbiAgb3V0WzNdID0gc3FydFUxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUzKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcbiAgdmFyIGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7IC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXG5cbiAgb3V0WzBdID0gLWEwICogaW52RG90O1xuICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XG4gIG91dFsyXSA9IC1hMiAqIGludkRvdDtcbiAgb3V0WzNdID0gYTMgKiBpbnZEb3Q7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcbiAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiAzeDMgcm90YXRpb24gbWF0cml4LlxuICpcbiAqIE5PVEU6IFRoZSByZXN1bHRhbnQgcXVhdGVybmlvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28geW91IHNob3VsZCBiZSBzdXJlXG4gKiB0byByZW5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbiB5b3Vyc2VsZiB3aGVyZSBuZWNlc3NhcnkuXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gbSByb3RhdGlvbiBtYXRyaXhcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MyhvdXQsIG0pIHtcbiAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXG4gIHZhciBmVHJhY2UgPSBtWzBdICsgbVs0XSArIG1bOF07XG4gIHZhciBmUm9vdDtcblxuICBpZiAoZlRyYWNlID4gMC4wKSB7XG4gICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7IC8vIDJ3XG5cbiAgICBvdXRbM10gPSAwLjUgKiBmUm9vdDtcbiAgICBmUm9vdCA9IDAuNSAvIGZSb290OyAvLyAxLyg0dylcblxuICAgIG91dFswXSA9IChtWzVdIC0gbVs3XSkgKiBmUm9vdDtcbiAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XG4gICAgb3V0WzJdID0gKG1bMV0gLSBtWzNdKSAqIGZSb290O1xuICB9IGVsc2Uge1xuICAgIC8vIHx3fCA8PSAxLzJcbiAgICB2YXIgaSA9IDA7XG4gICAgaWYgKG1bNF0gPiBtWzBdKSBpID0gMTtcbiAgICBpZiAobVs4XSA+IG1baSAqIDMgKyBpXSkgaSA9IDI7XG4gICAgdmFyIGogPSAoaSArIDEpICUgMztcbiAgICB2YXIgayA9IChpICsgMikgJSAzO1xuICAgIGZSb290ID0gTWF0aC5zcXJ0KG1baSAqIDMgKyBpXSAtIG1baiAqIDMgKyBqXSAtIG1bayAqIDMgKyBrXSArIDEuMCk7XG4gICAgb3V0W2ldID0gMC41ICogZlJvb3Q7XG4gICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcbiAgICBvdXRbM10gPSAobVtqICogMyArIGtdIC0gbVtrICogMyArIGpdKSAqIGZSb290O1xuICAgIG91dFtqXSA9IChtW2ogKiAzICsgaV0gKyBtW2kgKiAzICsgal0pICogZlJvb3Q7XG4gICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge3h9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWCBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge3l9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWSBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcGFyYW0ge3p9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWiBheGlzIGluIGRlZ3JlZXMuXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbUV1bGVyKG91dCwgeCwgeSwgeikge1xuICB2YXIgaGFsZlRvUmFkID0gMC41ICogTWF0aC5QSSAvIDE4MC4wO1xuICB4ICo9IGhhbGZUb1JhZDtcbiAgeSAqPSBoYWxmVG9SYWQ7XG4gIHogKj0gaGFsZlRvUmFkO1xuICB2YXIgc3ggPSBNYXRoLnNpbih4KTtcbiAgdmFyIGN4ID0gTWF0aC5jb3MoeCk7XG4gIHZhciBzeSA9IE1hdGguc2luKHkpO1xuICB2YXIgY3kgPSBNYXRoLmNvcyh5KTtcbiAgdmFyIHN6ID0gTWF0aC5zaW4oeik7XG4gIHZhciBjeiA9IE1hdGguY29zKHopO1xuICBvdXRbMF0gPSBzeCAqIGN5ICogY3ogLSBjeCAqIHN5ICogc3o7XG4gIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcbiAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xuICBvdXRbM10gPSBjeCAqIGN5ICogY3ogKyBzeCAqIHN5ICogc3o7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBxdWF0ZW5pb25cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJxdWF0KFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIsIFwiICsgYVszXSArIFwiKVwiO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdGVybmlvbiB0byBjbG9uZVxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgY2xvbmUgPSB2ZWM0LmNsb25lO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZyb21WYWx1ZXMgPSB2ZWM0LmZyb21WYWx1ZXM7XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBxdWF0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBjb3B5ID0gdmVjNC5jb3B5O1xuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNldCA9IHZlYzQuc2V0O1xuLyoqXG4gKiBBZGRzIHR3byBxdWF0J3NcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgYWRkID0gdmVjNC5hZGQ7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNjYWxlID0gdmVjNC5zY2FsZTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZG90ID0gdmVjNC5kb3Q7XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGxlcnAgPSB2ZWM0LmxlcnA7XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgdmFyIGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgcXVhdFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3F1YXJlZExlbmd0aCA9IHZlYzQuc3F1YXJlZExlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0LnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG5vcm1hbGl6ZSA9IHZlYzQubm9ybWFsaXplO1xuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgVGhlIGZpcnN0IHF1YXRlcm5pb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiBUaGUgc2Vjb25kIHF1YXRlcm5pb24uXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgdmFyIGV4YWN0RXF1YWxzID0gdmVjNC5leGFjdEVxdWFscztcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCB2YXIgZXF1YWxzID0gdmVjNC5lcXVhbHM7XG4vKipcbiAqIFNldHMgYSBxdWF0ZXJuaW9uIHRvIHJlcHJlc2VudCB0aGUgc2hvcnRlc3Qgcm90YXRpb24gZnJvbSBvbmVcbiAqIHZlY3RvciB0byBhbm90aGVyLlxuICpcbiAqIEJvdGggdmVjdG9ycyBhcmUgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aC5cbiAqXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb24uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgaW5pdGlhbCB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBkZXN0aW5hdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgdmFyIHJvdGF0aW9uVG8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0bXB2ZWMzID0gdmVjMy5jcmVhdGUoKTtcbiAgdmFyIHhVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygxLCAwLCAwKTtcbiAgdmFyIHlVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcbiAgICB2YXIgZG90ID0gdmVjMy5kb3QoYSwgYik7XG5cbiAgICBpZiAoZG90IDwgLTAuOTk5OTk5KSB7XG4gICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIHhVbml0VmVjMywgYSk7XG4gICAgICBpZiAodmVjMy5sZW4odG1wdmVjMykgPCAwLjAwMDAwMSkgdmVjMy5jcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpO1xuICAgICAgdmVjMy5ub3JtYWxpemUodG1wdmVjMywgdG1wdmVjMyk7XG4gICAgICBzZXRBeGlzQW5nbGUob3V0LCB0bXB2ZWMzLCBNYXRoLlBJKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSBlbHNlIGlmIChkb3QgPiAwLjk5OTk5OSkge1xuICAgICAgb3V0WzBdID0gMDtcbiAgICAgIG91dFsxXSA9IDA7XG4gICAgICBvdXRbMl0gPSAwO1xuICAgICAgb3V0WzNdID0gMTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZlYzMuY3Jvc3ModG1wdmVjMywgYSwgYik7XG4gICAgICBvdXRbMF0gPSB0bXB2ZWMzWzBdO1xuICAgICAgb3V0WzFdID0gdG1wdmVjM1sxXTtcbiAgICAgIG91dFsyXSA9IHRtcHZlYzNbMl07XG4gICAgICBvdXRbM10gPSAxICsgZG90O1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIG91dCk7XG4gICAgfVxuICB9O1xufSgpO1xuLyoqXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xuICpcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCB2YXIgc3FsZXJwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGVtcDEgPSBjcmVhdGUoKTtcbiAgdmFyIHRlbXAyID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gICAgc2xlcnAodGVtcDEsIGEsIGQsIHQpO1xuICAgIHNsZXJwKHRlbXAyLCBiLCBjLCB0KTtcbiAgICBzbGVycChvdXQsIHRlbXAxLCB0ZW1wMiwgMiAqIHQgKiAoMSAtIHQpKTtcbiAgICByZXR1cm4gb3V0O1xuICB9O1xufSgpO1xuLyoqXG4gKiBTZXRzIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiB3aXRoIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlblxuICogYXhlcy4gRWFjaCBheGlzIGlzIGEgdmVjMyBhbmQgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pdCBsZW5ndGggYW5kXG4gKiBwZXJwZW5kaWN1bGFyIHRvIGFsbCBvdGhlciBzcGVjaWZpZWQgYXhlcy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdmlldyAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcmlnaHQgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwicmlnaHRcIiBkaXJlY3Rpb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB1cCAgICB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJ1cFwiIGRpcmVjdGlvblxuICogQHJldHVybnMge3F1YXR9IG91dFxuICovXG5cbmV4cG9ydCB2YXIgc2V0QXhlcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIG1hdHIgPSBtYXQzLmNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKG91dCwgdmlldywgcmlnaHQsIHVwKSB7XG4gICAgbWF0clswXSA9IHJpZ2h0WzBdO1xuICAgIG1hdHJbM10gPSByaWdodFsxXTtcbiAgICBtYXRyWzZdID0gcmlnaHRbMl07XG4gICAgbWF0clsxXSA9IHVwWzBdO1xuICAgIG1hdHJbNF0gPSB1cFsxXTtcbiAgICBtYXRyWzddID0gdXBbMl07XG4gICAgbWF0clsyXSA9IC12aWV3WzBdO1xuICAgIG1hdHJbNV0gPSAtdmlld1sxXTtcbiAgICBtYXRyWzhdID0gLXZpZXdbMl07XG4gICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIGZyb21NYXQzKG91dCwgbWF0cikpO1xuICB9O1xufSgpOyIsICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogMyBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBtb2R1bGUgdmVjM1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjM1xuICpcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSwgeik7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSwgeikge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMzIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMyB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNlaWxcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMzIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gdmVjMydzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICBpZiAobGVuID4gMCkge1xuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICB9XG5cbiAgb3V0WzBdID0gYVswXSAqIGxlbjtcbiAgb3V0WzFdID0gYVsxXSAqIGxlbjtcbiAgb3V0WzJdID0gYVsyXSAqIGxlbjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdO1xuICB2YXIgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdO1xuICBvdXRbMF0gPSBheSAqIGJ6IC0gYXogKiBieTtcbiAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF07XG4gIHZhciBheSA9IGFbMV07XG4gIHZhciBheiA9IGFbMl07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgaGVybWl0ZSBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGVybWl0ZShvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICB2YXIgZmFjdG9yMSA9IGZhY3RvclRpbWVzMiAqICgyICogdCAtIDMpICsgMTtcbiAgdmFyIGZhY3RvcjIgPSBmYWN0b3JUaW1lczIgKiAodCAtIDIpICsgdDtcbiAgdmFyIGZhY3RvcjMgPSBmYWN0b3JUaW1lczIgKiAodCAtIDEpO1xuICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqICgzIC0gMiAqIHQpO1xuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGJlemllciBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYmV6aWVyKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICB2YXIgaW52ZXJzZUZhY3RvciA9IDEgLSB0O1xuICB2YXIgaW52ZXJzZUZhY3RvclRpbWVzVHdvID0gaW52ZXJzZUZhY3RvciAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3JUaW1lczIgPSB0ICogdDtcbiAgdmFyIGZhY3RvcjEgPSBpbnZlcnNlRmFjdG9yVGltZXNUd28gKiBpbnZlcnNlRmFjdG9yO1xuICB2YXIgZmFjdG9yMiA9IDMgKiB0ICogaW52ZXJzZUZhY3RvclRpbWVzVHdvO1xuICB2YXIgZmFjdG9yMyA9IDMgKiBmYWN0b3JUaW1lczIgKiBpbnZlcnNlRmFjdG9yO1xuICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqIHQ7XG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuICB2YXIgciA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wICogTWF0aC5QSTtcbiAgdmFyIHogPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAtIDEuMDtcbiAgdmFyIHpTY2FsZSA9IE1hdGguc3FydCgxLjAgLSB6ICogeikgKiBzY2FsZTtcbiAgb3V0WzBdID0gTWF0aC5jb3MocikgKiB6U2NhbGU7XG4gIG91dFsxXSA9IE1hdGguc2luKHIpICogelNjYWxlO1xuICBvdXRbMl0gPSB6ICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIHZhciB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xuICB3ID0gdyB8fCAxLjA7XG4gIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcbiAgb3V0WzJdID0gKG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSkgLyB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQzLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gdGhlIDN4MyBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgb3V0WzBdID0geCAqIG1bMF0gKyB5ICogbVszXSArIHogKiBtWzZdO1xuICBvdXRbMV0gPSB4ICogbVsxXSArIHkgKiBtWzRdICsgeiAqIG1bN107XG4gIG91dFsyXSA9IHggKiBtWzJdICsgeSAqIG1bNV0gKyB6ICogbVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxuICogQ2FuIGFsc28gYmUgdXNlZCBmb3IgZHVhbCBxdWF0ZXJuaW9ucy4gKE11bHRpcGx5IGl0IHdpdGggdGhlIHJlYWwgcGFydClcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgLy8gYmVuY2htYXJrczogaHR0cHM6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tdHJhbnNmb3JtLXZlYzMtaW1wbGVtZW50YXRpb25zLWZpeGVkXG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM107XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07IC8vIHZhciBxdmVjID0gW3F4LCBxeSwgcXpdO1xuICAvLyB2YXIgdXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCBhKTtcblxuICB2YXIgdXZ4ID0gcXkgKiB6IC0gcXogKiB5LFxuICAgICAgdXZ5ID0gcXogKiB4IC0gcXggKiB6LFxuICAgICAgdXZ6ID0gcXggKiB5IC0gcXkgKiB4OyAvLyB2YXIgdXV2ID0gdmVjMy5jcm9zcyhbXSwgcXZlYywgdXYpO1xuXG4gIHZhciB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eSxcbiAgICAgIHV1dnkgPSBxeiAqIHV2eCAtIHF4ICogdXZ6LFxuICAgICAgdXV2eiA9IHF4ICogdXZ5IC0gcXkgKiB1dng7IC8vIHZlYzMuc2NhbGUodXYsIHV2LCAyICogdyk7XG5cbiAgdmFyIHcyID0gcXcgKiAyO1xuICB1dnggKj0gdzI7XG4gIHV2eSAqPSB3MjtcbiAgdXZ6ICo9IHcyOyAvLyB2ZWMzLnNjYWxlKHV1diwgdXV2LCAyKTtcblxuICB1dXZ4ICo9IDI7XG4gIHV1dnkgKj0gMjtcbiAgdXV2eiAqPSAyOyAvLyByZXR1cm4gdmVjMy5hZGQob3V0LCBhLCB2ZWMzLmFkZChvdXQsIHV2LCB1dXYpKTtcblxuICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcbiAgb3V0WzFdID0geSArIHV2eSArIHV1dnk7XG4gIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB4LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgYiwgcmFkKSB7XG4gIHZhciBwID0gW10sXG4gICAgICByID0gW107IC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cblxuICBwWzBdID0gYVswXSAtIGJbMF07XG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcFsyXSA9IGFbMl0gLSBiWzJdOyAvL3BlcmZvcm0gcm90YXRpb25cblxuICByWzBdID0gcFswXTtcbiAgclsxXSA9IHBbMV0gKiBNYXRoLmNvcyhyYWQpIC0gcFsyXSAqIE1hdGguc2luKHJhZCk7XG4gIHJbMl0gPSBwWzFdICogTWF0aC5zaW4ocmFkKSArIHBbMl0gKiBNYXRoLmNvcyhyYWQpOyAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG5cbiAgb3V0WzBdID0gclswXSArIGJbMF07XG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeS1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMl0gKiBNYXRoLnNpbihyYWQpICsgcFswXSAqIE1hdGguY29zKHJhZCk7XG4gIHJbMV0gPSBwWzFdO1xuICByWzJdID0gcFsyXSAqIE1hdGguY29zKHJhZCkgLSBwWzBdICogTWF0aC5zaW4ocmFkKTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHotYXhpc1xuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzBdICogTWF0aC5jb3MocmFkKSAtIHBbMV0gKiBNYXRoLnNpbihyYWQpO1xuICByWzFdID0gcFswXSAqIE1hdGguc2luKHJhZCkgKyBwWzFdICogTWF0aC5jb3MocmFkKTtcbiAgclsyXSA9IHBbMl07IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDNEIHZlY3RvcnNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKGEsIGIpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIG1hZzEgPSBNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkgKyBheiAqIGF6KSxcbiAgICAgIG1hZzIgPSBNYXRoLnNxcnQoYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6KSxcbiAgICAgIG1hZyA9IG1hZzEgKiBtYWcyLFxuICAgICAgY29zaW5lID0gbWFnICYmIGRvdChhLCBiKSAvIG1hZztcbiAgcmV0dXJuIE1hdGguYWNvcyhNYXRoLm1pbihNYXRoLm1heChjb3NpbmUsIC0xKSwgMSkpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHplcm9cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvKG91dCkge1xuICBvdXRbMF0gPSAwLjA7XG4gIG91dFsxXSA9IDAuMDtcbiAgb3V0WzJdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMyhcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiKVwiO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSk7XG59XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zdWJ0cmFjdH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5tdWx0aXBseX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5kaXZpZGV9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpdiA9IGRpdmlkZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBkaXN0ID0gZGlzdGFuY2U7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkRGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5sZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWRMZW5ndGh9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XG4vKipcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMzcy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMzLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjM3MgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cbiAqIEByZXR1cm5zIHtBcnJheX0gYVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmVjID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgdmFyIGksIGw7XG5cbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMztcbiAgICB9XG5cbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07XG4gICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcbiAgICAgIHZlY1syXSA9IGFbaSArIDJdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgICBhW2kgKyAyXSA9IHZlY1syXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0oKTsiLCAiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcbiAqIDQgRGltZW5zaW9uYWwgVmVjdG9yXG4gKiBAbW9kdWxlIHZlYzRcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzRcbiAqXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFswXSA9IDA7XG4gICAgb3V0WzFdID0gMDtcbiAgICBvdXRbMl0gPSAwO1xuICAgIG91dFszXSA9IDA7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gY2xvbmVcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjNCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHksIHosIHcpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBzb3VyY2UgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6LCB3KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIG91dFszXSA9IHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICogYlsyXTtcbiAgb3V0WzNdID0gYVszXSAqIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgb3V0WzNdID0gYVszXSAvIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNlaWxcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5jZWlsKGFbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XG4gIG91dFszXSA9IE1hdGguZmxvb3IoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5taW4oYVszXSwgYlszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5tYXgoYVszXSwgYlszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byByb3VuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5yb3VuZChhWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5yb3VuZChhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2NhbGVzIGEgdmVjNCBieSBhIHNjYWxhciBudW1iZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF07XG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XG4gIHZhciB3ID0gYlszXSAtIGFbM107XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHosIHcpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICB2YXIgdyA9IGJbM10gLSBhWzNdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIHcgPSBhWzNdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6LCB3KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIHcgPSBhWzNdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG59XG4vKipcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICBvdXRbMF0gPSAtYVswXTtcbiAgb3V0WzFdID0gLWFbMV07XG4gIG91dFsyXSA9IC1hWzJdO1xuICBvdXRbM10gPSAtYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICBvdXRbM10gPSAxLjAgLyBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICB2YXIgdyA9IGFbM107XG4gIHZhciBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IHggKiBsZW47XG4gIG91dFsxXSA9IHkgKiBsZW47XG4gIG91dFsyXSA9IHogKiBsZW47XG4gIG91dFszXSA9IHcgKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl0gKyBhWzNdICogYlszXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0aHJlZSB2ZWN0b3JzIGluIGEgNC1kaW1lbnNpb25hbCBzcGFjZVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSByZXN1bHQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBVIHRoZSBmaXJzdCB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBWIHRoZSBzZWNvbmQgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gVyB0aGUgdGhpcmQgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjNH0gcmVzdWx0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgdSwgdiwgdykge1xuICB2YXIgQSA9IHZbMF0gKiB3WzFdIC0gdlsxXSAqIHdbMF0sXG4gICAgICBCID0gdlswXSAqIHdbMl0gLSB2WzJdICogd1swXSxcbiAgICAgIEMgPSB2WzBdICogd1szXSAtIHZbM10gKiB3WzBdLFxuICAgICAgRCA9IHZbMV0gKiB3WzJdIC0gdlsyXSAqIHdbMV0sXG4gICAgICBFID0gdlsxXSAqIHdbM10gLSB2WzNdICogd1sxXSxcbiAgICAgIEYgPSB2WzJdICogd1szXSAtIHZbM10gKiB3WzJdO1xuICB2YXIgRyA9IHVbMF07XG4gIHZhciBIID0gdVsxXTtcbiAgdmFyIEkgPSB1WzJdO1xuICB2YXIgSiA9IHVbM107XG4gIG91dFswXSA9IEggKiBGIC0gSSAqIEUgKyBKICogRDtcbiAgb3V0WzFdID0gLShHICogRikgKyBJICogQyAtIEogKiBCO1xuICBvdXRbMl0gPSBHICogRSAtIEggKiBDICsgSiAqIEE7XG4gIG91dFszXSA9IC0oRyAqIEQpICsgSCAqIEIgLSBJICogQTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xuICB2YXIgYXggPSBhWzBdO1xuICB2YXIgYXkgPSBhWzFdO1xuICB2YXIgYXogPSBhWzJdO1xuICB2YXIgYXcgPSBhWzNdO1xuICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XG4gIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xuICBvdXRbM10gPSBhdyArIHQgKiAoYlszXSAtIGF3KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7IC8vIE1hcnNhZ2xpYSwgR2VvcmdlLiBDaG9vc2luZyBhIFBvaW50IGZyb20gdGhlIFN1cmZhY2Ugb2YgYVxuICAvLyBTcGhlcmUuIEFubi4gTWF0aC4gU3RhdGlzdC4gNDMgKDE5NzIpLCBuby4gMiwgNjQ1LS02NDYuXG4gIC8vIGh0dHA6Ly9wcm9qZWN0ZXVjbGlkLm9yZy9ldWNsaWQuYW9tcy8xMTc3NjkyNjQ0O1xuXG4gIHZhciB2MSwgdjIsIHYzLCB2NDtcbiAgdmFyIHMxLCBzMjtcblxuICBkbyB7XG4gICAgdjEgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIgLSAxO1xuICAgIHYyID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICBzMSA9IHYxICogdjEgKyB2MiAqIHYyO1xuICB9IHdoaWxlIChzMSA+PSAxKTtcblxuICBkbyB7XG4gICAgdjMgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIgLSAxO1xuICAgIHY0ID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICBzMiA9IHYzICogdjMgKyB2NCAqIHY0O1xuICB9IHdoaWxlIChzMiA+PSAxKTtcblxuICB2YXIgZCA9IE1hdGguc3FydCgoMSAtIHMxKSAvIHMyKTtcbiAgb3V0WzBdID0gc2NhbGUgKiB2MTtcbiAgb3V0WzFdID0gc2NhbGUgKiB2MjtcbiAgb3V0WzJdID0gc2NhbGUgKiB2MyAqIGQ7XG4gIG91dFszXSA9IHNjYWxlICogdjQgKiBkO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBtYXQ0LlxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl0sXG4gICAgICB3ID0gYVszXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0gKiB3O1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSAqIHc7XG4gIG91dFsyXSA9IG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSAqIHc7XG4gIG91dFszXSA9IG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XSAqIHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzQgd2l0aCBhIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgdmFyIHF4ID0gcVswXSxcbiAgICAgIHF5ID0gcVsxXSxcbiAgICAgIHF6ID0gcVsyXSxcbiAgICAgIHF3ID0gcVszXTsgLy8gY2FsY3VsYXRlIHF1YXQgKiB2ZWNcblxuICB2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG4gIHZhciBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogejtcbiAgdmFyIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuICB2YXIgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6OyAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cbiAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgb3V0WzFdID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcbiAgb3V0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcbiAgb3V0WzNdID0gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB6ZXJvXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gemVybyhvdXQpIHtcbiAgb3V0WzBdID0gMC4wO1xuICBvdXRbMV0gPSAwLjA7XG4gIG91dFsyXSA9IDAuMDtcbiAgb3V0WzNdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjNChcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIilcIjtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM107XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpO1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGl2aWRlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBkaXYgPSBkaXZpZGU7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGlzdCA9IGRpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZERpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5zcXVhcmVkTGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xuLyoqXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjNHMuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYSB0aGUgYXJyYXkgb2YgdmVjdG9ycyB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjNC4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gY291bnQgTnVtYmVyIG9mIHZlYzRzIHRvIGl0ZXJhdGUgb3Zlci4gSWYgMCBpdGVyYXRlcyBvdmVyIGVudGlyZSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXG4gKiBAcmV0dXJucyB7QXJyYXl9IGFcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZlYyA9IGNyZWF0ZSgpO1xuICByZXR1cm4gZnVuY3Rpb24gKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xuICAgIHZhciBpLCBsO1xuXG4gICAgaWYgKCFzdHJpZGUpIHtcbiAgICAgIHN0cmlkZSA9IDQ7XG4gICAgfVxuXG4gICAgaWYgKCFvZmZzZXQpIHtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgIH1cblxuICAgIGZvciAoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XG4gICAgICB2ZWNbMF0gPSBhW2ldO1xuICAgICAgdmVjWzFdID0gYVtpICsgMV07XG4gICAgICB2ZWNbMl0gPSBhW2kgKyAyXTtcbiAgICAgIHZlY1szXSA9IGFbaSArIDNdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgICBhW2kgKyAyXSA9IHZlY1syXTtcbiAgICAgIGFbaSArIDNdID0gdmVjWzNdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSgpOyIsICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbmltcG9ydCAqIGFzIHF1YXQgZnJvbSBcIi4vcXVhdC5qc1wiO1xuaW1wb3J0ICogYXMgbWF0NCBmcm9tIFwiLi9tYXQ0LmpzXCI7XG4vKipcbiAqIER1YWwgUXVhdGVybmlvbjxicj5cbiAqIEZvcm1hdDogW3JlYWwsIGR1YWxdPGJyPlxuICogUXVhdGVybmlvbiBmb3JtYXQ6IFhZWlc8YnI+XG4gKiBNYWtlIHN1cmUgdG8gaGF2ZSBub3JtYWxpemVkIGR1YWwgcXVhdGVybmlvbnMsIG90aGVyd2lzZSB0aGUgZnVuY3Rpb25zIG1heSBub3Qgd29yayBhcyBpbnRlbmRlZC48YnI+XG4gKiBAbW9kdWxlIHF1YXQyXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IGR1YWwgcXVhdFxuICpcbiAqIEByZXR1cm5zIHtxdWF0Mn0gYSBuZXcgZHVhbCBxdWF0ZXJuaW9uIFtyZWFsIC0+IHJvdGF0aW9uLCBkdWFsIC0+IHRyYW5zbGF0aW9uXVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIGRxWzBdID0gMDtcbiAgICBkcVsxXSA9IDA7XG4gICAgZHFbMl0gPSAwO1xuICAgIGRxWzRdID0gMDtcbiAgICBkcVs1XSA9IDA7XG4gICAgZHFbNl0gPSAwO1xuICAgIGRxWzddID0gMDtcbiAgfVxuXG4gIGRxWzNdID0gMTtcbiAgcmV0dXJuIGRxO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBxdWF0ZXJuaW9uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBjbG9uZVxuICogQHJldHVybnMge3F1YXQyfSBuZXcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgZHEgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg4KTtcbiAgZHFbMF0gPSBhWzBdO1xuICBkcVsxXSA9IGFbMV07XG4gIGRxWzJdID0gYVsyXTtcbiAgZHFbM10gPSBhWzNdO1xuICBkcVs0XSA9IGFbNF07XG4gIGRxWzVdID0gYVs1XTtcbiAgZHFbNl0gPSBhWzZdO1xuICBkcVs3XSA9IGFbN107XG4gIHJldHVybiBkcTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MSBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MiBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHoyIFogY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtxdWF0Mn0gbmV3IGR1YWwgcXVhdGVybmlvblxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xuICBkcVswXSA9IHgxO1xuICBkcVsxXSA9IHkxO1xuICBkcVsyXSA9IHoxO1xuICBkcVszXSA9IHcxO1xuICBkcVs0XSA9IHgyO1xuICBkcVs1XSA9IHkyO1xuICBkcVs2XSA9IHoyO1xuICBkcVs3XSA9IHcyO1xuICByZXR1cm4gZHE7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGZyb20gdGhlIGdpdmVuIHZhbHVlcyAocXVhdCBhbmQgdHJhbnNsYXRpb24pXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MSBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxuICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50ICh0cmFuc2xhdGlvbilcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudCAodHJhbnNsYXRpb24pXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblZhbHVlcyh4MSwgeTEsIHoxLCB3MSwgeDIsIHkyLCB6Mikge1xuICB2YXIgZHEgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg4KTtcbiAgZHFbMF0gPSB4MTtcbiAgZHFbMV0gPSB5MTtcbiAgZHFbMl0gPSB6MTtcbiAgZHFbM10gPSB3MTtcbiAgdmFyIGF4ID0geDIgKiAwLjUsXG4gICAgICBheSA9IHkyICogMC41LFxuICAgICAgYXogPSB6MiAqIDAuNTtcbiAgZHFbNF0gPSBheCAqIHcxICsgYXkgKiB6MSAtIGF6ICogeTE7XG4gIGRxWzVdID0gYXkgKiB3MSArIGF6ICogeDEgLSBheCAqIHoxO1xuICBkcVs2XSA9IGF6ICogdzEgKyBheCAqIHkxIC0gYXkgKiB4MTtcbiAgZHFbN10gPSAtYXggKiB4MSAtIGF5ICogeTEgLSBheiAqIHoxO1xuICByZXR1cm4gZHE7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBkdWFsIHF1YXQgZnJvbSBhIHF1YXRlcm5pb24gYW5kIGEgdHJhbnNsYXRpb25cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgYSBub3JtYWxpemVkIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB0IHRyYW5sYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgcSwgdCkge1xuICB2YXIgYXggPSB0WzBdICogMC41LFxuICAgICAgYXkgPSB0WzFdICogMC41LFxuICAgICAgYXogPSB0WzJdICogMC41LFxuICAgICAgYnggPSBxWzBdLFxuICAgICAgYnkgPSBxWzFdLFxuICAgICAgYnogPSBxWzJdLFxuICAgICAgYncgPSBxWzNdO1xuICBvdXRbMF0gPSBieDtcbiAgb3V0WzFdID0gYnk7XG4gIG91dFsyXSA9IGJ6O1xuICBvdXRbM10gPSBidztcbiAgb3V0WzRdID0gYXggKiBidyArIGF5ICogYnogLSBheiAqIGJ5O1xuICBvdXRbNV0gPSBheSAqIGJ3ICsgYXogKiBieCAtIGF4ICogYno7XG4gIG91dFs2XSA9IGF6ICogYncgKyBheCAqIGJ5IC0gYXkgKiBieDtcbiAgb3V0WzddID0gLWF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGR1YWwgcXVhdCBmcm9tIGEgdHJhbnNsYXRpb25cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHQgdHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHQpIHtcbiAgb3V0WzBdID0gMDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMTtcbiAgb3V0WzRdID0gdFswXSAqIDAuNTtcbiAgb3V0WzVdID0gdFsxXSAqIDAuNTtcbiAgb3V0WzZdID0gdFsyXSAqIDAuNTtcbiAgb3V0WzddID0gMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGR1YWwgcXVhdCBmcm9tIGEgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gZHVhbCBxdWF0ZXJuaW9uIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSB0aGUgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCBxKSB7XG4gIG91dFswXSA9IHFbMF07XG4gIG91dFsxXSA9IHFbMV07XG4gIG91dFsyXSA9IHFbMl07XG4gIG91dFszXSA9IHFbM107XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGZyb20gYSBtYXRyaXggKDR4NClcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeFxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcbiAgLy9UT0RPIE9wdGltaXplIHRoaXNcbiAgdmFyIG91dGVyID0gcXVhdC5jcmVhdGUoKTtcbiAgbWF0NC5nZXRSb3RhdGlvbihvdXRlciwgYSk7XG4gIHZhciB0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIG1hdDQuZ2V0VHJhbnNsYXRpb24odCwgYSk7XG4gIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgb3V0ZXIsIHQpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgZHVhbCBxdWF0IHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgc291cmNlIGR1YWwgcXVhdGVybmlvblxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgYSBkdWFsIHF1YXQgdG8gdGhlIGlkZW50aXR5IGR1YWwgcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAwO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBkdWFsIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHkxIFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0gejEgWiBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHgyIFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcyIFcgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIHgxLCB5MSwgejEsIHcxLCB4MiwgeTIsIHoyLCB3Mikge1xuICBvdXRbMF0gPSB4MTtcbiAgb3V0WzFdID0geTE7XG4gIG91dFsyXSA9IHoxO1xuICBvdXRbM10gPSB3MTtcbiAgb3V0WzRdID0geDI7XG4gIG91dFs1XSA9IHkyO1xuICBvdXRbNl0gPSB6MjtcbiAgb3V0WzddID0gdzI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdldHMgdGhlIHJlYWwgcGFydCBvZiBhIGR1YWwgcXVhdFxuICogQHBhcmFtICB7cXVhdH0gb3V0IHJlYWwgcGFydFxuICogQHBhcmFtICB7UmVhZG9ubHlRdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb25cbiAqIEByZXR1cm4ge3F1YXR9IHJlYWwgcGFydFxuICovXG5cbmV4cG9ydCB2YXIgZ2V0UmVhbCA9IHF1YXQuY29weTtcbi8qKlxuICogR2V0cyB0aGUgZHVhbCBwYXJ0IG9mIGEgZHVhbCBxdWF0XG4gKiBAcGFyYW0gIHtxdWF0fSBvdXQgZHVhbCBwYXJ0XG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxuICogQHJldHVybiB7cXVhdH0gZHVhbCBwYXJ0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldER1YWwob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbNF07XG4gIG91dFsxXSA9IGFbNV07XG4gIG91dFsyXSA9IGFbNl07XG4gIG91dFszXSA9IGFbN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgcmVhbCBjb21wb25lbnQgb2YgYSBkdWFsIHF1YXQgdG8gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByZWFsIHBhcnRcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHNldFJlYWwgPSBxdWF0LmNvcHk7XG4vKipcbiAqIFNldCB0aGUgZHVhbCBjb21wb25lbnQgb2YgYSBkdWFsIHF1YXQgdG8gdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSBkdWFsIHBhcnRcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0RHVhbChvdXQsIHEpIHtcbiAgb3V0WzRdID0gcVswXTtcbiAgb3V0WzVdID0gcVsxXTtcbiAgb3V0WzZdID0gcVsyXTtcbiAgb3V0WzddID0gcVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2V0cyB0aGUgdHJhbnNsYXRpb24gb2YgYSBub3JtYWxpemVkIGR1YWwgcXVhdFxuICogQHBhcmFtICB7dmVjM30gb3V0IHRyYW5zbGF0aW9uXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvbiB0byBiZSBkZWNvbXBvc2VkXG4gKiBAcmV0dXJuIHt2ZWMzfSB0cmFuc2xhdGlvblxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIGEpIHtcbiAgdmFyIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XSxcbiAgICAgIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXTtcbiAgb3V0WzBdID0gKGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnkpICogMjtcbiAgb3V0WzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcbiAgb3V0WzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNsYXRlcyBhIGR1YWwgcXVhdCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byB0cmFuc2xhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIGF4MSA9IGFbMF0sXG4gICAgICBheTEgPSBhWzFdLFxuICAgICAgYXoxID0gYVsyXSxcbiAgICAgIGF3MSA9IGFbM10sXG4gICAgICBieDEgPSB2WzBdICogMC41LFxuICAgICAgYnkxID0gdlsxXSAqIDAuNSxcbiAgICAgIGJ6MSA9IHZbMl0gKiAwLjUsXG4gICAgICBheDIgPSBhWzRdLFxuICAgICAgYXkyID0gYVs1XSxcbiAgICAgIGF6MiA9IGFbNl0sXG4gICAgICBhdzIgPSBhWzddO1xuICBvdXRbMF0gPSBheDE7XG4gIG91dFsxXSA9IGF5MTtcbiAgb3V0WzJdID0gYXoxO1xuICBvdXRbM10gPSBhdzE7XG4gIG91dFs0XSA9IGF3MSAqIGJ4MSArIGF5MSAqIGJ6MSAtIGF6MSAqIGJ5MSArIGF4MjtcbiAgb3V0WzVdID0gYXcxICogYnkxICsgYXoxICogYngxIC0gYXgxICogYnoxICsgYXkyO1xuICBvdXRbNl0gPSBhdzEgKiBiejEgKyBheDEgKiBieTEgLSBheTEgKiBieDEgKyBhejI7XG4gIG91dFs3XSA9IC1heDEgKiBieDEgLSBheTEgKiBieTEgLSBhejEgKiBiejEgKyBhdzI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcbiAgdmFyIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXSxcbiAgICAgIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XSxcbiAgICAgIGF4MSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnksXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxuICAgICAgYXoxID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCxcbiAgICAgIGF3MSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHF1YXQucm90YXRlWChvdXQsIGEsIHJhZCk7XG4gIGJ4ID0gb3V0WzBdO1xuICBieSA9IG91dFsxXTtcbiAgYnogPSBvdXRbMl07XG4gIGJ3ID0gb3V0WzNdO1xuICBvdXRbNF0gPSBheDEgKiBidyArIGF3MSAqIGJ4ICsgYXkxICogYnogLSBhejEgKiBieTtcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XG4gIG91dFs2XSA9IGF6MSAqIGJ3ICsgYXcxICogYnogKyBheDEgKiBieSAtIGF5MSAqIGJ4O1xuICBvdXRbN10gPSBhdzEgKiBidyAtIGF4MSAqIGJ4IC0gYXkxICogYnkgLSBhejEgKiBiejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgdGhlIFkgYXhpc1xuICpcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGhvdyBmYXIgc2hvdWxkIHRoZSByb3RhdGlvbiBiZVxuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xuICB2YXIgYnggPSAtYVswXSxcbiAgICAgIGJ5ID0gLWFbMV0sXG4gICAgICBieiA9IC1hWzJdLFxuICAgICAgYncgPSBhWzNdLFxuICAgICAgYXggPSBhWzRdLFxuICAgICAgYXkgPSBhWzVdLFxuICAgICAgYXogPSBhWzZdLFxuICAgICAgYXcgPSBhWzddLFxuICAgICAgYXgxID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSxcbiAgICAgIGF5MSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnosXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxuICAgICAgYXcxID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcbiAgcXVhdC5yb3RhdGVZKG91dCwgYSwgcmFkKTtcbiAgYnggPSBvdXRbMF07XG4gIGJ5ID0gb3V0WzFdO1xuICBieiA9IG91dFsyXTtcbiAgYncgPSBvdXRbM107XG4gIG91dFs0XSA9IGF4MSAqIGJ3ICsgYXcxICogYnggKyBheTEgKiBieiAtIGF6MSAqIGJ5O1xuICBvdXRbNV0gPSBheTEgKiBidyArIGF3MSAqIGJ5ICsgYXoxICogYnggLSBheDEgKiBiejtcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XG4gIG91dFs3XSA9IGF3MSAqIGJ3IC0gYXgxICogYnggLSBheTEgKiBieSAtIGF6MSAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGFyb3VuZCB0aGUgWiBheGlzXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgaG93IGZhciBzaG91bGQgdGhlIHJvdGF0aW9uIGJlXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gIHZhciBieCA9IC1hWzBdLFxuICAgICAgYnkgPSAtYVsxXSxcbiAgICAgIGJ6ID0gLWFbMl0sXG4gICAgICBidyA9IGFbM10sXG4gICAgICBheCA9IGFbNF0sXG4gICAgICBheSA9IGFbNV0sXG4gICAgICBheiA9IGFbNl0sXG4gICAgICBhdyA9IGFbN10sXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxuICAgICAgYXkxID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieixcbiAgICAgIGF6MSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngsXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICBxdWF0LnJvdGF0ZVoob3V0LCBhLCByYWQpO1xuICBieCA9IG91dFswXTtcbiAgYnkgPSBvdXRbMV07XG4gIGJ6ID0gb3V0WzJdO1xuICBidyA9IG91dFszXTtcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XG4gIG91dFs1XSA9IGF5MSAqIGJ3ICsgYXcxICogYnkgKyBhejEgKiBieCAtIGF4MSAqIGJ6O1xuICBvdXRbNl0gPSBhejEgKiBidyArIGF3MSAqIGJ6ICsgYXgxICogYnkgLSBheTEgKiBieDtcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYnkgYSBnaXZlbiBxdWF0ZXJuaW9uIChhICogcSlcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgcXVhdGVybmlvbiB0byByb3RhdGUgYnlcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUJ5UXVhdEFwcGVuZChvdXQsIGEsIHEpIHtcbiAgdmFyIHF4ID0gcVswXSxcbiAgICAgIHF5ID0gcVsxXSxcbiAgICAgIHF6ID0gcVsyXSxcbiAgICAgIHF3ID0gcVszXSxcbiAgICAgIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGF3ID0gYVszXTtcbiAgb3V0WzBdID0gYXggKiBxdyArIGF3ICogcXggKyBheSAqIHF6IC0gYXogKiBxeTtcbiAgb3V0WzFdID0gYXkgKiBxdyArIGF3ICogcXkgKyBheiAqIHF4IC0gYXggKiBxejtcbiAgb3V0WzJdID0gYXogKiBxdyArIGF3ICogcXogKyBheCAqIHF5IC0gYXkgKiBxeDtcbiAgb3V0WzNdID0gYXcgKiBxdyAtIGF4ICogcXggLSBheSAqIHF5IC0gYXogKiBxejtcbiAgYXggPSBhWzRdO1xuICBheSA9IGFbNV07XG4gIGF6ID0gYVs2XTtcbiAgYXcgPSBhWzddO1xuICBvdXRbNF0gPSBheCAqIHF3ICsgYXcgKiBxeCArIGF5ICogcXogLSBheiAqIHF5O1xuICBvdXRbNV0gPSBheSAqIHF3ICsgYXcgKiBxeSArIGF6ICogcXggLSBheCAqIHF6O1xuICBvdXRbNl0gPSBheiAqIHF3ICsgYXcgKiBxeiArIGF4ICogcXkgLSBheSAqIHF4O1xuICBvdXRbN10gPSBhdyAqIHF3IC0gYXggKiBxeCAtIGF5ICogcXkgLSBheiAqIHF6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGJ5IGEgZ2l2ZW4gcXVhdGVybmlvbiAocSAqIGEpXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHJvdGF0ZSBieVxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVCeVF1YXRQcmVwZW5kKG91dCwgcSwgYSkge1xuICB2YXIgcXggPSBxWzBdLFxuICAgICAgcXkgPSBxWzFdLFxuICAgICAgcXogPSBxWzJdLFxuICAgICAgcXcgPSBxWzNdLFxuICAgICAgYnggPSBhWzBdLFxuICAgICAgYnkgPSBhWzFdLFxuICAgICAgYnogPSBhWzJdLFxuICAgICAgYncgPSBhWzNdO1xuICBvdXRbMF0gPSBxeCAqIGJ3ICsgcXcgKiBieCArIHF5ICogYnogLSBxeiAqIGJ5O1xuICBvdXRbMV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xuICBvdXRbMl0gPSBxeiAqIGJ3ICsgcXcgKiBieiArIHF4ICogYnkgLSBxeSAqIGJ4O1xuICBvdXRbM10gPSBxdyAqIGJ3IC0gcXggKiBieCAtIHF5ICogYnkgLSBxeiAqIGJ6O1xuICBieCA9IGFbNF07XG4gIGJ5ID0gYVs1XTtcbiAgYnogPSBhWzZdO1xuICBidyA9IGFbN107XG4gIG91dFs0XSA9IHF4ICogYncgKyBxdyAqIGJ4ICsgcXkgKiBieiAtIHF6ICogYnk7XG4gIG91dFs1XSA9IHF5ICogYncgKyBxdyAqIGJ5ICsgcXogKiBieCAtIHF4ICogYno7XG4gIG91dFs2XSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XG4gIG91dFs3XSA9IHF3ICogYncgLSBxeCAqIGJ4IC0gcXkgKiBieSAtIHF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIGEgZ2l2ZW4gYXhpcy4gRG9lcyB0aGUgbm9ybWFsaXNhdGlvbiBhdXRvbWF0aWNhbGx5XG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgaG93IGZhciB0aGUgcm90YXRpb24gc2hvdWxkIGJlXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVBcm91bmRBeGlzKG91dCwgYSwgYXhpcywgcmFkKSB7XG4gIC8vU3BlY2lhbCBjYXNlIGZvciByYWQgPSAwXG4gIGlmIChNYXRoLmFicyhyYWQpIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBjb3B5KG91dCwgYSk7XG4gIH1cblxuICB2YXIgYXhpc0xlbmd0aCA9IE1hdGguaHlwb3QoYXhpc1swXSwgYXhpc1sxXSwgYXhpc1syXSk7XG4gIHJhZCA9IHJhZCAqIDAuNTtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYnggPSBzICogYXhpc1swXSAvIGF4aXNMZW5ndGg7XG4gIHZhciBieSA9IHMgKiBheGlzWzFdIC8gYXhpc0xlbmd0aDtcbiAgdmFyIGJ6ID0gcyAqIGF4aXNbMl0gLyBheGlzTGVuZ3RoO1xuICB2YXIgYncgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYXgxID0gYVswXSxcbiAgICAgIGF5MSA9IGFbMV0sXG4gICAgICBhejEgPSBhWzJdLFxuICAgICAgYXcxID0gYVszXTtcbiAgb3V0WzBdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XG4gIG91dFsxXSA9IGF5MSAqIGJ3ICsgYXcxICogYnkgKyBhejEgKiBieCAtIGF4MSAqIGJ6O1xuICBvdXRbMl0gPSBhejEgKiBidyArIGF3MSAqIGJ6ICsgYXgxICogYnkgLSBheTEgKiBieDtcbiAgb3V0WzNdID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XG4gIHZhciBheCA9IGFbNF0sXG4gICAgICBheSA9IGFbNV0sXG4gICAgICBheiA9IGFbNl0sXG4gICAgICBhdyA9IGFbN107XG4gIG91dFs0XSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XG4gIG91dFs1XSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XG4gIG91dFs2XSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XG4gIG91dFs3XSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIGR1YWwgcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcbiAgb3V0WzddID0gYVs3XSArIGJbN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIGR1YWwgcXVhdCdzXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICB2YXIgYXgwID0gYVswXSxcbiAgICAgIGF5MCA9IGFbMV0sXG4gICAgICBhejAgPSBhWzJdLFxuICAgICAgYXcwID0gYVszXSxcbiAgICAgIGJ4MSA9IGJbNF0sXG4gICAgICBieTEgPSBiWzVdLFxuICAgICAgYnoxID0gYls2XSxcbiAgICAgIGJ3MSA9IGJbN10sXG4gICAgICBheDEgPSBhWzRdLFxuICAgICAgYXkxID0gYVs1XSxcbiAgICAgIGF6MSA9IGFbNl0sXG4gICAgICBhdzEgPSBhWzddLFxuICAgICAgYngwID0gYlswXSxcbiAgICAgIGJ5MCA9IGJbMV0sXG4gICAgICBiejAgPSBiWzJdLFxuICAgICAgYncwID0gYlszXTtcbiAgb3V0WzBdID0gYXgwICogYncwICsgYXcwICogYngwICsgYXkwICogYnowIC0gYXowICogYnkwO1xuICBvdXRbMV0gPSBheTAgKiBidzAgKyBhdzAgKiBieTAgKyBhejAgKiBieDAgLSBheDAgKiBiejA7XG4gIG91dFsyXSA9IGF6MCAqIGJ3MCArIGF3MCAqIGJ6MCArIGF4MCAqIGJ5MCAtIGF5MCAqIGJ4MDtcbiAgb3V0WzNdID0gYXcwICogYncwIC0gYXgwICogYngwIC0gYXkwICogYnkwIC0gYXowICogYnowO1xuICBvdXRbNF0gPSBheDAgKiBidzEgKyBhdzAgKiBieDEgKyBheTAgKiBiejEgLSBhejAgKiBieTEgKyBheDEgKiBidzAgKyBhdzEgKiBieDAgKyBheTEgKiBiejAgLSBhejEgKiBieTA7XG4gIG91dFs1XSA9IGF5MCAqIGJ3MSArIGF3MCAqIGJ5MSArIGF6MCAqIGJ4MSAtIGF4MCAqIGJ6MSArIGF5MSAqIGJ3MCArIGF3MSAqIGJ5MCArIGF6MSAqIGJ4MCAtIGF4MSAqIGJ6MDtcbiAgb3V0WzZdID0gYXowICogYncxICsgYXcwICogYnoxICsgYXgwICogYnkxIC0gYXkwICogYngxICsgYXoxICogYncwICsgYXcxICogYnowICsgYXgxICogYnkwIC0gYXkxICogYngwO1xuICBvdXRbN10gPSBhdzAgKiBidzEgLSBheDAgKiBieDEgLSBheTAgKiBieTEgLSBhejAgKiBiejEgKyBhdzEgKiBidzAgLSBheDEgKiBieDAgLSBheTEgKiBieTAgLSBhejEgKiBiejA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBTY2FsZXMgYSBkdWFsIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0XG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGR1YWwgcXVhdCB0byBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBkdWFsIHF1YXQgYnlcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICBvdXRbNF0gPSBhWzRdICogYjtcbiAgb3V0WzVdID0gYVs1XSAqIGI7XG4gIG91dFs2XSA9IGFbNl0gKiBiO1xuICBvdXRbN10gPSBhWzddICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIGR1YWwgcXVhdCdzIChUaGUgZG90IHByb2R1Y3Qgb2YgdGhlIHJlYWwgcGFydHMpXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRvdCA9IHF1YXQuZG90O1xuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIGR1YWwgcXVhdHMnc1xuICogTk9URTogVGhlIHJlc3VsdGluZyBkdWFsIHF1YXRlcm5pb25zIHdvbid0IGFsd2F5cyBiZSBub3JtYWxpemVkIChUaGUgZXJyb3IgaXMgbW9zdCBub3RpY2VhYmxlIHdoZW4gdCA9IDAuNSlcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3F1YXQyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIG10ID0gMSAtIHQ7XG4gIGlmIChkb3QoYSwgYikgPCAwKSB0ID0gLXQ7XG4gIG91dFswXSA9IGFbMF0gKiBtdCArIGJbMF0gKiB0O1xuICBvdXRbMV0gPSBhWzFdICogbXQgKyBiWzFdICogdDtcbiAgb3V0WzJdID0gYVsyXSAqIG10ICsgYlsyXSAqIHQ7XG4gIG91dFszXSA9IGFbM10gKiBtdCArIGJbM10gKiB0O1xuICBvdXRbNF0gPSBhWzRdICogbXQgKyBiWzRdICogdDtcbiAgb3V0WzVdID0gYVs1XSAqIG10ICsgYls1XSAqIHQ7XG4gIG91dFs2XSA9IGFbNl0gKiBtdCArIGJbNl0gKiB0O1xuICBvdXRbN10gPSBhWzddICogbXQgKyBiWzddICogdDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIGR1YWwgcXVhdC4gSWYgdGhleSBhcmUgbm9ybWFsaXplZCwgY29uanVnYXRlIGlzIGNoZWFwZXJcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIHNxbGVuID0gc3F1YXJlZExlbmd0aChhKTtcbiAgb3V0WzBdID0gLWFbMF0gLyBzcWxlbjtcbiAgb3V0WzFdID0gLWFbMV0gLyBzcWxlbjtcbiAgb3V0WzJdID0gLWFbMl0gLyBzcWxlbjtcbiAgb3V0WzNdID0gYVszXSAvIHNxbGVuO1xuICBvdXRbNF0gPSAtYVs0XSAvIHNxbGVuO1xuICBvdXRbNV0gPSAtYVs1XSAvIHNxbGVuO1xuICBvdXRbNl0gPSAtYVs2XSAvIHNxbGVuO1xuICBvdXRbN10gPSBhWzddIC8gc3FsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIGR1YWwgcXVhdFxuICogSWYgdGhlIGR1YWwgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQyLmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IC1hWzRdO1xuICBvdXRbNV0gPSAtYVs1XTtcbiAgb3V0WzZdID0gLWFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIGR1YWwgcXVhdFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXQgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuZ3RoID0gcXVhdC5sZW5ndGg7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIubGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3F1YXJlZExlbmd0aCA9IHF1YXQuc3F1YXJlZExlbmd0aDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0Mi5zcXVhcmVkTGVuZ3RofVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xuLyoqXG4gKiBOb3JtYWxpemUgYSBkdWFsIHF1YXRcbiAqXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIG1hZ25pdHVkZSA9IHNxdWFyZWRMZW5ndGgoYSk7XG5cbiAgaWYgKG1hZ25pdHVkZSA+IDApIHtcbiAgICBtYWduaXR1ZGUgPSBNYXRoLnNxcnQobWFnbml0dWRlKTtcbiAgICB2YXIgYTAgPSBhWzBdIC8gbWFnbml0dWRlO1xuICAgIHZhciBhMSA9IGFbMV0gLyBtYWduaXR1ZGU7XG4gICAgdmFyIGEyID0gYVsyXSAvIG1hZ25pdHVkZTtcbiAgICB2YXIgYTMgPSBhWzNdIC8gbWFnbml0dWRlO1xuICAgIHZhciBiMCA9IGFbNF07XG4gICAgdmFyIGIxID0gYVs1XTtcbiAgICB2YXIgYjIgPSBhWzZdO1xuICAgIHZhciBiMyA9IGFbN107XG4gICAgdmFyIGFfZG90X2IgPSBhMCAqIGIwICsgYTEgKiBiMSArIGEyICogYjIgKyBhMyAqIGIzO1xuICAgIG91dFswXSA9IGEwO1xuICAgIG91dFsxXSA9IGExO1xuICAgIG91dFsyXSA9IGEyO1xuICAgIG91dFszXSA9IGEzO1xuICAgIG91dFs0XSA9IChiMCAtIGEwICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XG4gICAgb3V0WzVdID0gKGIxIC0gYTEgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcbiAgICBvdXRbNl0gPSAoYjIgLSBhMiAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xuICAgIG91dFs3XSA9IChiMyAtIGEzICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgZHVhbCBxdWF0ZW5pb25cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgZHVhbCBxdWF0ZXJuaW9uIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkdWFsIHF1YXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwicXVhdDIoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIsIFwiICsgYVs0XSArIFwiLCBcIiArIGFbNV0gKyBcIiwgXCIgKyBhWzZdICsgXCIsIFwiICsgYVs3XSArIFwiKVwiO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBkdWFsIHF1YXRlcm5pb25zIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdDJ9IGEgdGhlIGZpcnN0IGR1YWwgcXVhdGVybmlvbi5cbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYiB0aGUgc2Vjb25kIGR1YWwgcXVhdGVybmlvbi5cbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBkdWFsIHF1YXRlcm5pb25zIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN107XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGR1YWwgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0LlxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBiIHRoZSBzZWNvbmQgZHVhbCBxdWF0LlxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIGR1YWwgcXVhdHMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN107XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN107XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpO1xufSIsICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogMiBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBtb2R1bGUgdmVjMlxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjMlxuICpcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzIgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMyIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMyIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICB5ID0gYlsxXSAtIGFbMV07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHkpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHk7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IGFbMF0gKiBsZW47XG4gIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXG4gKiBOb3RlIHRoYXQgdGhlIGNyb3NzIHByb2R1Y3QgbXVzdCBieSBkZWZpbml0aW9uIHByb2R1Y2UgYSAzRCB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcbiAgdmFyIHogPSBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdO1xuICBvdXRbMF0gPSBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHNjYWxlO1xuICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MihvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHk7XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDJkKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXG4gKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bM10gKiB5ICsgbVs2XTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzRdICogeSArIG1bN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDRcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzAnXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzEzXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgMkQgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSB2ZWMyIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgYiwgcmFkKSB7XG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgdmFyIHAwID0gYVswXSAtIGJbMF0sXG4gICAgICBwMSA9IGFbMV0gLSBiWzFdLFxuICAgICAgc2luQyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjb3NDID0gTWF0aC5jb3MocmFkKTsgLy9wZXJmb3JtIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHAwICogY29zQyAtIHAxICogc2luQyArIGJbMF07XG4gIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gMkQgdmVjdG9yc1xuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xuICB2YXIgeDEgPSBhWzBdLFxuICAgICAgeTEgPSBhWzFdLFxuICAgICAgeDIgPSBiWzBdLFxuICAgICAgeTIgPSBiWzFdLFxuICAgICAgLy8gbWFnIGlzIHRoZSBwcm9kdWN0IG9mIHRoZSBtYWduaXR1ZGVzIG9mIGEgYW5kIGJcbiAgbWFnID0gTWF0aC5zcXJ0KHgxICogeDEgKyB5MSAqIHkxKSAqIE1hdGguc3FydCh4MiAqIHgyICsgeTIgKiB5MiksXG4gICAgICAvLyBtYWcgJiYuLiBzaG9ydCBjaXJjdWl0cyBpZiBtYWcgPT0gMFxuICBjb3NpbmUgPSBtYWcgJiYgKHgxICogeDIgKyB5MSAqIHkyKSAvIG1hZzsgLy8gTWF0aC5taW4oTWF0aC5tYXgoY29zaW5lLCAtMSksIDEpIGNsYW1wcyB0aGUgY29zaW5lIGJldHdlZW4gLTEgYW5kIDFcblxuICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSk7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMihcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgZXhhY3RseSBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBkaXYgPSBkaXZpZGU7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGlzdCA9IGRpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZERpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMycyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSAyO1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG59KCk7IiwgInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXRDb21wb25lbnQgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpXCI7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgdmVjMyB9IGZyb20gXCJnbC1tYXRyaXhcIjtcbmV4cG9ydCBjbGFzcyBTbmFwUm90YXRlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSBcInNuYXAtcm90YXRlXCI7XG4gICAgcGxheWVyO1xuICAgIGRlZ3JlZXM7XG4gICAgaW5wdXQgPSBudWxsO1xuICAgIHNuYXBwZWQgPSBmYWxzZTtcbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudChJbnB1dENvbXBvbmVudCk7XG4gICAgICAgIHRoaXMuc25hcHBlZCA9IGZhbHNlO1xuICAgIH1cbiAgICB1cGRhdGUoZHQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlucHV0IHx8XG4gICAgICAgICAgICAhdGhpcy5pbnB1dC54cklucHV0U291cmNlIHx8XG4gICAgICAgICAgICAhdGhpcy5pbnB1dC54cklucHV0U291cmNlLmdhbWVwYWQgfHxcbiAgICAgICAgICAgICF0aGlzLmlucHV0LnhySW5wdXRTb3VyY2UuZ2FtZXBhZC5heGVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudEF4aXMgPSB0aGlzLmlucHV0LnhySW5wdXRTb3VyY2UuZ2FtZXBhZC5heGVzWzJdO1xuICAgICAgICBpZiAoY3VycmVudEF4aXMgPiAtMC4yICYmIGN1cnJlbnRBeGlzIDwgMC4yKSB7XG4gICAgICAgICAgICB0aGlzLnNuYXBwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMoY3VycmVudEF4aXMpIDwgMC44KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhc3RIZWFkUG9zID0gdmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICAgICAgICB0aGlzLnBsYXllci5nZXRQb3NpdGlvbldvcmxkKGxhc3RIZWFkUG9zKTtcbiAgICAgICAgaWYgKGN1cnJlbnRBeGlzIDwgLTAuOCAmJiAhdGhpcy5zbmFwcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5yb3RhdGVBeGlzQW5nbGVEZWdMb2NhbChbMCwgMSwgMF0sIHRoaXMuZGVncmVlcyk7XG4gICAgICAgICAgICB0aGlzLnNuYXBwZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50QXhpcyA+IDAuOCAmJiAhdGhpcy5zbmFwcGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXllci5yb3RhdGVBeGlzQW5nbGVEZWdMb2NhbChbMCwgMSwgMF0sIC10aGlzLmRlZ3JlZXMpO1xuICAgICAgICAgICAgdGhpcy5zbmFwcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VycmVudEhlYWRQb3MgPSB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMCk7XG4gICAgICAgIHRoaXMucGxheWVyLmdldFBvc2l0aW9uV29ybGQoY3VycmVudEhlYWRQb3MpO1xuICAgICAgICBsZXQgbmV3UG9zID0gdmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICAgICAgICB2ZWMzLnN1YihuZXdQb3MsIGxhc3RIZWFkUG9zLCBjdXJyZW50SGVhZFBvcyk7XG4gICAgICAgIHRoaXMucGxheWVyLnRyYW5zbGF0ZUxvY2FsKG5ld1Bvcyk7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkub2JqZWN0KClcbl0sIFNuYXBSb3RhdGUucHJvdG90eXBlLCBcInBsYXllclwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuaW50KDMwKVxuXSwgU25hcFJvdGF0ZS5wcm90b3R5cGUsIFwiZGVncmVlc1wiLCB2b2lkIDApO1xuIiwgInZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbmltcG9ydCB7IENvbXBvbmVudCwgTWVzaENvbXBvbmVudCB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qc1wiO1xuaW1wb3J0IHsgcXVhdDIsIHZlYzMgfSBmcm9tICdnbC1tYXRyaXgnO1xuZXhwb3J0IGNsYXNzIFNub3dQYXJ0aWNsZXMgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdzbm93LXBhcnRpY2xlcyc7XG4gICAgbWVzaDtcbiAgICBtYXRlcmlhbDtcbiAgICBkZWxheTtcbiAgICBtYXhQYXJ0aWNsZXM7XG4gICAgaW5pdGlhbFNwZWVkO1xuICAgIHBhcnRpY2xlU2NhbGU7XG4gICAgc2l6ZTtcbiAgICB0aW1lID0gMC4wO1xuICAgIGNvdW50ID0gMDtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7T2JqZWN0M0RbXX1cbiAgICAgKi9cbiAgICAjb2JqZWN0cyA9IFtdO1xuICAgIC8qKlxuICAgICogQHR5cGUge251bWJlcltdW119XG4gICAgKi9cbiAgICAjdmVsb2NpdGllcyA9IFtdO1xuICAgICNzcGVlZHMgPSBbXTtcbiAgICAjZGlyZWN0aW9uID0gWzAsIDAsIDBdO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLiNvYmplY3RzID0gdGhpcy5lbmdpbmUuc2NlbmUuYWRkT2JqZWN0cyh0aGlzLm1heFBhcnRpY2xlcywgbnVsbCwgdGhpcy5tYXhQYXJ0aWNsZXMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWF4UGFydGljbGVzOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuI3ZlbG9jaXRpZXMucHVzaChbTWF0aC5yYW5kb20oKSAvIDQgLSAuMTI1LCAtTWF0aC5yYW5kb20oKSAtIC4yLCBNYXRoLnJhbmRvbSgpIC8gNCAtIC4xMjVdKTtcbiAgICAgICAgICAgIGxldCBvYmogPSB0aGlzLiNvYmplY3RzW2ldO1xuICAgICAgICAgICAgb2JqLm5hbWUgPSBcInBhcnRpY2xlXCIgKyB0aGlzLmNvdW50LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBsZXQgbWVzaCA9IG9iai5hZGRDb21wb25lbnQoTWVzaENvbXBvbmVudCk7XG4gICAgICAgICAgICBtZXNoLm1lc2ggPSB0aGlzLm1lc2g7XG4gICAgICAgICAgICBtZXNoLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcbiAgICAgICAgICAgIC8qIE1vc3QgZWZmaWNpZW50IHdheSB0byBoaWRlIHRoZSBtZXNoICovXG4gICAgICAgICAgICBvYmouc2NhbGVMb2NhbChbMCwgMCwgMF0pO1xuICAgICAgICB9XG4gICAgICAgIC8qIFRpbWUgdG8gc3Bhd24gcGFydGljbGVzICovXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tYXhQYXJ0aWNsZXM7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5zcGF3bigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZShkdCkge1xuICAgICAgICAvKiBUYXJnZXQgZm9yIHJldHJpZXZpbmcgcGFydGljbGVzIHdvcmxkIGxvY2F0aW9ucyAqL1xuICAgICAgICBsZXQgb3JpZ2luID0gdmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICAgICAgICBsZXQgZGlzdGFuY2UgPSB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4odGhpcy5jb3VudCwgdGhpcy4jb2JqZWN0cy5sZW5ndGgpOyArK2kpIHtcbiAgICAgICAgICAgIC8qIEdldCB0cmFuc2xhdGlvbiBmaXJzdCwgYXMgb2JqZWN0LnRyYW5zbGF0ZSgpIHdpbGwgbWFya1xuICAgICAgICAgICAgICogdGhlIG9iamVjdCBhcyBkaXJ0eSwgd2hpY2ggd2lsbCBjYXVzZSBpdCB0byByZWNhbGN1bGF0ZVxuICAgICAgICAgICAgICogb2JqLnRyYW5zZm9ybVdvcmxkIG9uIGFjY2Vzcy4gV2Ugd2FudCB0byBhdm9pZCB0aGlzIGFuZFxuICAgICAgICAgICAgICogaGF2ZSBpdCBiZSByZWNhbGN1bGF0ZWQgaW4gYmF0Y2ggYXQgdGhlIGVuZCBvZiBmcmFtZVxuICAgICAgICAgICAgICogaW5zdGVhZCAqL1xuICAgICAgICAgICAgcXVhdDIuZ2V0VHJhbnNsYXRpb24ob3JpZ2luLCB0aGlzLiNvYmplY3RzW2ldLmdldFRyYW5zZm9ybVdvcmxkKCkpO1xuICAgICAgICAgICAgLyogQXBwbHkgZ3Jhdml0eSAqL1xuICAgICAgICAgICAgY29uc3QgdmVsID0gdGhpcy4jdmVsb2NpdGllc1tpXTtcbiAgICAgICAgICAgIC8qIENoZWNrIGlmIHBhcnRpY2xlIHdvdWxkIGNvbGxpZGUgKi9cbiAgICAgICAgICAgIGlmICgob3JpZ2luWzBdICsgdmVsWzBdICogZHQpID4gOClcbiAgICAgICAgICAgICAgICBvcmlnaW5bMF0gLT0gMTY7XG4gICAgICAgICAgICBlbHNlIGlmICgob3JpZ2luWzBdICsgdmVsWzBdICogZHQpIDw9IC04KVxuICAgICAgICAgICAgICAgIG9yaWdpblswXSArPSAxNjtcbiAgICAgICAgICAgIGlmICgob3JpZ2luWzJdICsgdmVsWzJdICogZHQpID4gOClcbiAgICAgICAgICAgICAgICBvcmlnaW5bMl0gLT0gMTY7XG4gICAgICAgICAgICBlbHNlIGlmICgob3JpZ2luWzJdICsgdmVsWzJdICogZHQpIDw9IC04KVxuICAgICAgICAgICAgICAgIG9yaWdpblsyXSArPSAxNjtcbiAgICAgICAgICAgIGlmICgob3JpZ2luWzFdICsgdmVsWzFdICogZHQpIDw9IDApIHtcbiAgICAgICAgICAgICAgICAvKiBQc2V1ZG8gZnJpY3Rpb24gKi9cbiAgICAgICAgICAgICAgICBvcmlnaW5bMV0gPSA1O1xuICAgICAgICAgICAgICAgIHRoaXMuI29iamVjdHNbaV0uc2V0UG9zaXRpb25Xb3JsZChvcmlnaW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4odGhpcy5jb3VudCwgdGhpcy4jb2JqZWN0cy5sZW5ndGgpOyArK2kpIHtcbiAgICAgICAgICAgIC8qIEFwcGx5IHZlbG9jaXR5ICovXG4gICAgICAgICAgICB2ZWMzLnNjYWxlKGRpc3RhbmNlLCB0aGlzLiN2ZWxvY2l0aWVzW2ldLCBkdCk7XG4gICAgICAgICAgICB0aGlzLiNvYmplY3RzW2ldLnRyYW5zbGF0ZVdvcmxkKGRpc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogU3Bhd24gYSBwYXJ0aWNsZSAqL1xuICAgIHNwYXduKCkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmNvdW50ICUgdGhpcy5tYXhQYXJ0aWNsZXM7XG4gICAgICAgIGxldCBvYmogPSB0aGlzLiNvYmplY3RzW2luZGV4XTtcbiAgICAgICAgb2JqLnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgIG9iai5zY2FsZUxvY2FsKFt0aGlzLnBhcnRpY2xlU2NhbGUsIHRoaXMucGFydGljbGVTY2FsZSwgdGhpcy5wYXJ0aWNsZVNjYWxlXSk7XG4gICAgICAgIC8qIEFjdGl2YXRlIGNvbXBvbmVudCwgb3RoZXJ3aXNlIGl0IHdpbGwgbm90IHNob3cgdXAhICovXG4gICAgICAgIG9iai5nZXRDb21wb25lbnQoTWVzaENvbXBvbmVudCkuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgb2JqLnRyYW5zbGF0ZVdvcmxkKFsoTWF0aC5yYW5kb20oKSAqIHRoaXMuc2l6ZSkgLSAodGhpcy5zaXplIC8gMiksIChNYXRoLnJhbmRvbSgpICogNSksIChNYXRoLnJhbmRvbSgpICogdGhpcy5zaXplKSAtICh0aGlzLnNpemUgLyAyKV0pO1xuICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkubWVzaCgpXG5dLCBTbm93UGFydGljbGVzLnByb3RvdHlwZSwgXCJtZXNoXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eS5tYXRlcmlhbCgpXG5dLCBTbm93UGFydGljbGVzLnByb3RvdHlwZSwgXCJtYXRlcmlhbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuZmxvYXQoMC4xKVxuXSwgU25vd1BhcnRpY2xlcy5wcm90b3R5cGUsIFwiZGVsYXlcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmludCgxNTAwKVxuXSwgU25vd1BhcnRpY2xlcy5wcm90b3R5cGUsIFwibWF4UGFydGljbGVzXCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eS5mbG9hdCgxNSlcbl0sIFNub3dQYXJ0aWNsZXMucHJvdG90eXBlLCBcImluaXRpYWxTcGVlZFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuZmxvYXQoMC4wMSlcbl0sIFNub3dQYXJ0aWNsZXMucHJvdG90eXBlLCBcInBhcnRpY2xlU2NhbGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmludCgxNilcbl0sIFNub3dQYXJ0aWNsZXMucHJvdG90eXBlLCBcInNpemVcIiwgdm9pZCAwKTtcbjtcbiIsICJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanNcIjtcbmV4cG9ydCBjbGFzcyBUYWdzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndGFncyc7XG4gICAgdGFncztcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIHRoZSB0YWcgdG8gdGVzdFxuICAgICAqL1xuICAgIGhhc1RhZyh0YWcpIHtcbiAgICAgICAgY29uc3QgdGFncyA9IHRoaXMudGFncy5zcGxpdCgvXFxXKy9nKTtcbiAgICAgICAgcmV0dXJuICEhfnRhZ3MuaW5kZXhPZih0YWcpO1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LnN0cmluZygpXG5dLCBUYWdzLnByb3RvdHlwZSwgXCJ0YWdzXCIsIHZvaWQgMCk7XG47XG4iLCAiLyoqXG4gKiBUaGlzIGNvZGUgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgQWxlYSBhbGdvcml0aG07IChDKSAyMDEwIEpvaGFubmVzIEJhYWdcdTAwRjhlLlxuICogQWxlYSBpcyBsaWNlbnNlZCBhY2NvcmRpbmcgdG8gdGhlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTUlUX0xpY2Vuc2UuXG4gKi9cbmNvbnN0IEZSQUMgPSAyLjMyODMwNjQzNjUzODY5NjNlLTEwOyAvKiAyXi0zMiAqL1xuZXhwb3J0IGNsYXNzIFJORyB7XG4gICAgX3NlZWQgPSAwO1xuICAgIF9zMCA9IDA7XG4gICAgX3MxID0gMDtcbiAgICBfczIgPSAwO1xuICAgIF9jID0gMDtcbiAgICBnZXRTZWVkKCkgeyByZXR1cm4gdGhpcy5fc2VlZDsgfVxuICAgIC8qKlxuICAgICAqIFNlZWQgdGhlIG51bWJlciBnZW5lcmF0b3JcbiAgICAgKiBAdHlwZSB7bnVtYmVyfSBzZWVkIC0gU2VlZCB2YWx1ZVxuICAgICAqL1xuICAgIHNldFNlZWQoc2VlZCkge1xuICAgICAgICBzZWVkID0gKHNlZWQgPCAxID8gMSAvIHNlZWQgOiBzZWVkKTtcbiAgICAgICAgdGhpcy5fc2VlZCA9IHNlZWQ7XG4gICAgICAgIHRoaXMuX3MwID0gKHNlZWQgPj4+IDApICogRlJBQztcbiAgICAgICAgc2VlZCA9IChzZWVkICogNjkwNjkgKyAxKSA+Pj4gMDtcbiAgICAgICAgdGhpcy5fczEgPSBzZWVkICogRlJBQztcbiAgICAgICAgc2VlZCA9IChzZWVkICogNjkwNjkgKyAxKSA+Pj4gMDtcbiAgICAgICAgdGhpcy5fczIgPSBzZWVkICogRlJBQztcbiAgICAgICAgdGhpcy5fYyA9IDE7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBQc2V1ZG9yYW5kb20gdmFsdWUgWzAsMSksIHVuaWZvcm1seSBkaXN0cmlidXRlZFxuICAgICAqL1xuICAgIGdldFVuaWZvcm0oKSB7XG4gICAgICAgIGxldCB0ID0gMjA5MTYzOSAqIHRoaXMuX3MwICsgdGhpcy5fYyAqIEZSQUM7XG4gICAgICAgIHRoaXMuX3MwID0gdGhpcy5fczE7XG4gICAgICAgIHRoaXMuX3MxID0gdGhpcy5fczI7XG4gICAgICAgIHRoaXMuX2MgPSB0IHwgMDtcbiAgICAgICAgdGhpcy5fczIgPSB0IC0gdGhpcy5fYztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3MyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXJCb3VuZCBUaGUgbG93ZXIgZW5kIG9mIHRoZSByYW5nZSB0byByZXR1cm4gYSB2YWx1ZSBmcm9tLCBpbmNsdXNpdmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXJCb3VuZCBUaGUgdXBwZXIgZW5kIG9mIHRoZSByYW5nZSB0byByZXR1cm4gYSB2YWx1ZSBmcm9tLCBpbmNsdXNpdmVcbiAgICAgKiBAcmV0dXJucyBQc2V1ZG9yYW5kb20gdmFsdWUgW2xvd2VyQm91bmQsIHVwcGVyQm91bmRdLCB1c2luZyBST1QuUk5HLmdldFVuaWZvcm0oKSB0byBkaXN0cmlidXRlIHRoZSB2YWx1ZVxuICAgICAqL1xuICAgIGdldFVuaWZvcm1JbnQobG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICAgICAgICBsZXQgbWF4ID0gTWF0aC5tYXgobG93ZXJCb3VuZCwgdXBwZXJCb3VuZCk7XG4gICAgICAgIGxldCBtaW4gPSBNYXRoLm1pbihsb3dlckJvdW5kLCB1cHBlckJvdW5kKTtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5nZXRVbmlmb3JtKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWVhbiBNZWFuIHZhbHVlXG4gICAgICogQHBhcmFtIHN0ZGRldiBTdGFuZGFyZCBkZXZpYXRpb24uIH45NSUgb2YgdGhlIGFic29sdXRlIHZhbHVlcyB3aWxsIGJlIGxvd2VyIHRoYW4gMipzdGRkZXYuXG4gICAgICogQHJldHVybnMgQSBub3JtYWxseSBkaXN0cmlidXRlZCBwc2V1ZG9yYW5kb20gdmFsdWVcbiAgICAgKi9cbiAgICBnZXROb3JtYWwobWVhbiA9IDAsIHN0ZGRldiA9IDEpIHtcbiAgICAgICAgbGV0IHUsIHYsIHI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHUgPSAyICogdGhpcy5nZXRVbmlmb3JtKCkgLSAxO1xuICAgICAgICAgICAgdiA9IDIgKiB0aGlzLmdldFVuaWZvcm0oKSAtIDE7XG4gICAgICAgICAgICByID0gdSAqIHUgKyB2ICogdjtcbiAgICAgICAgfSB3aGlsZSAociA+IDEgfHwgciA9PSAwKTtcbiAgICAgICAgbGV0IGdhdXNzID0gdSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgICAgIHJldHVybiBtZWFuICsgZ2F1c3MgKiBzdGRkZXY7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFBzZXVkb3JhbmRvbSB2YWx1ZSBbMSwxMDBdIGluY2x1c2l2ZSwgdW5pZm9ybWx5IGRpc3RyaWJ1dGVkXG4gICAgICovXG4gICAgZ2V0UGVyY2VudGFnZSgpIHtcbiAgICAgICAgcmV0dXJuIDEgKyBNYXRoLmZsb29yKHRoaXMuZ2V0VW5pZm9ybSgpICogMTAwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gcGljayBhIHJhbmRvbSBpdGVtIGZyb21cbiAgICAgKiBAcmV0dXJucyBSYW5kb21seSBwaWNrZWQgaXRlbSwgbnVsbCB3aGVuIGxlbmd0aD0wXG4gICAgICovXG4gICAgZ2V0SXRlbShhcnJheSkge1xuICAgICAgICBpZiAoIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5W01hdGguZmxvb3IodGhpcy5nZXRVbmlmb3JtKCkgKiBhcnJheS5sZW5ndGgpXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgQXJyYXkgdG8gcmFuZG9taXplXG4gICAgICogQHJldHVybnMgTmV3IGFycmF5IHdpdGggcmFuZG9taXplZCBpdGVtc1xuICAgICAqL1xuICAgIHNodWZmbGUoYXJyYXkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBsZXQgY2xvbmUgPSBhcnJheS5zbGljZSgpO1xuICAgICAgICB3aGlsZSAoY2xvbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSBjbG9uZS5pbmRleE9mKHRoaXMuZ2V0SXRlbShjbG9uZSkpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goY2xvbmUuc3BsaWNlKGluZGV4LCAxKVswXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEga2V5ID0gd2hhdGV2ZXIsIHZhbHVlPXdlaWdodCAocmVsYXRpdmUgcHJvYmFiaWxpdHkpXG4gICAgICogQHJldHVybnMgd2hhdGV2ZXJcbiAgICAgKi9cbiAgICBnZXRXZWlnaHRlZFZhbHVlKGRhdGEpIHtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChsZXQgaWQgaW4gZGF0YSkge1xuICAgICAgICAgICAgdG90YWwgKz0gZGF0YVtpZF07XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJhbmRvbSA9IHRoaXMuZ2V0VW5pZm9ybSgpICogdG90YWw7XG4gICAgICAgIGxldCBpZCwgcGFydCA9IDA7XG4gICAgICAgIGZvciAoaWQgaW4gZGF0YSkge1xuICAgICAgICAgICAgcGFydCArPSBkYXRhW2lkXTtcbiAgICAgICAgICAgIGlmIChyYW5kb20gPCBwYXJ0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIGJ5IHNvbWUgZmxvYXRpbmctcG9pbnQgYW5ub3lhbmNlIHdlIGhhdmVcbiAgICAgICAgLy8gcmFuZG9tID49IHRvdGFsLCBqdXN0IHJldHVybiB0aGUgbGFzdCBpZC5cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgUk5HIHN0YXRlLiBVc2VmdWwgZm9yIHN0b3JpbmcgdGhlIHN0YXRlIGFuZCByZS1zZXR0aW5nIGl0IHZpYSBzZXRTdGF0ZS5cbiAgICAgKiBAcmV0dXJucyBJbnRlcm5hbCBzdGF0ZVxuICAgICAqL1xuICAgIGdldFN0YXRlKCkgeyByZXR1cm4gW3RoaXMuX3MwLCB0aGlzLl9zMSwgdGhpcy5fczIsIHRoaXMuX2NdOyB9XG4gICAgLyoqXG4gICAgICogU2V0IGEgcHJldmlvdXNseSByZXRyaWV2ZWQgc3RhdGUuXG4gICAgICovXG4gICAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5fczAgPSBzdGF0ZVswXTtcbiAgICAgICAgdGhpcy5fczEgPSBzdGF0ZVsxXTtcbiAgICAgICAgdGhpcy5fczIgPSBzdGF0ZVsyXTtcbiAgICAgICAgdGhpcy5fYyA9IHN0YXRlWzNdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNsb25lZCBSTkdcbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgbGV0IGNsb25lID0gbmV3IFJORygpO1xuICAgICAgICByZXR1cm4gY2xvbmUuc2V0U3RhdGUodGhpcy5nZXRTdGF0ZSgpKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3Qgcm5nID0gbmV3IFJORygpLnNldFNlZWQoRGF0ZS5ub3coKSk7XG4iLCAiZXhwb3J0IGNsYXNzIE9iamVjdENhY2hlIHtcbiAgICAjb2JqZWN0cztcbiAgICBlbmdpbmU7XG4gICAgbmFtZTtcbiAgICBjYWNoZVNpemU7XG4gICAgaW5kZXg7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dvbmRlcmxhbmRFbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNhY2hlU2l6ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0M0R9IHBhcmVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb21wb25lbnRzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZW5naW5lLCBuYW1lLCBjYWNoZVNpemUsIHBhcmVudCwgY29tcG9uZW50cykge1xuICAgICAgICB0aGlzLmVuZ2luZSA9IGVuZ2luZTtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgY29uc29sZS5sb2coYGNyZWF0aW5nIGNhY2hlOiAke25hbWV9IHdpdGggJHtjYWNoZVNpemV9IGVsZW1lbnRzYCk7XG4gICAgICAgIHRoaXMuY2FjaGVTaXplID0gY2FjaGVTaXplO1xuICAgICAgICB0aGlzLiNvYmplY3RzID0gdGhpcy5lbmdpbmUuc2NlbmUuYWRkT2JqZWN0cyhjYWNoZVNpemUsIHBhcmVudCwgY29tcG9uZW50cyk7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIH1cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIHRoaXMuI29iamVjdHMuZm9yRWFjaChvYmogPT4ge1xuICAgICAgICAgICAgb2JqLmdldENvbXBvbmVudHMoKS5mb3JFYWNoKGMgPT4ge1xuICAgICAgICAgICAgICAgIGMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9iai5wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgb2JqLnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0SXRlbSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPj0gdGhpcy5jYWNoZVNpemUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgQ2FjaGUgJHt0aGlzLm5hbWV9IHJhbiBvdXQgb2Ygc3BhY2VgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb2JqID0gdGhpcy4jb2JqZWN0c1t0aGlzLmluZGV4XTtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBGbGlwYm9vaywgVGFncyB9IGZyb20gXCIuLi9pbmRleC5qc1wiO1xuLyoqXG4gICogQGRlc2NyaXB0aW9uIGNsb25lcyB0aGUgcGFzc2VkIG9iamVjdFxuICAgQHBhcmFtIHtXb25kZXJsYW5kRW5naW5lfSBlbmdpbmUgLSB0aGUgZW5naW5lXG4gICogQHBhcmFtIHtPYmplY3QzRH0gb2JqZWN0IC0gdGhlIG9iamVjdCB0byBjbG9uZVxuICAqIEBwYXJhbSB7T2JqZWN0Q2FjaGV9IGNhY2hlIGFuIG9wdGlvbmFsIGNhY2hlIHRvIHVzZSBmb3IgY2xvbmluZ1xuICAqIEByZXR1cm5zIHtPYmplY3QzRH0gdGhlIGNsb25lZCBvYmplY3RcbiAgKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZU9iamVjdChlbmdpbmUsIG9iamVjdCwgY2FjaGUpIHtcbiAgICBpZiAoIW9iamVjdCB8fCAhb2JqZWN0LnBhcmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImNhbid0IGNsb25lIHVuZGVmaW5lZCBvYmplY3RcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHR5cGUge09iamVjdDNEfSB0aGUgb2JqZWN0IHRoYXQgaXMgY2xvbmVkXG4gICAgICovXG4gICAgbGV0IGNsb25lZDtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2xvbmVkID0gY2FjaGUuZ2V0SXRlbSgpO1xuICAgIH1cbiAgICBpZiAoIWNsb25lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwibm8gY2FjaGUgYXZhaWxhYmxlLCBjbG9uaW5nIG9iamVjdFwiKTtcbiAgICAgICAgY2xvbmVkID0gZW5naW5lLnNjZW5lLmFkZE9iamVjdChvYmplY3QucGFyZW50KTtcbiAgICB9XG4gICAgbGV0IGNvbXBvbmVudHMgPSBvYmplY3QuZ2V0Q29tcG9uZW50cygpO1xuICAgIGNvbnN0IGNvbXAgPSBjbG9uZWQuZ2V0Q29tcG9uZW50cygpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY29tcG9uZW50c1tpXS50eXBlID09IFwibWVzaFwiKSB7XG4gICAgICAgICAgICBjb25zdCBtID0gY29tcC5maW5kKChjKSA9PiBjLnR5cGUgPT0gXCJtZXNoXCIgJiYgYy5hY3RpdmUgPT0gZmFsc2UpO1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgICAgICBtLm1lc2ggPSBvcmlnaW5hbC5tZXNoO1xuICAgICAgICAgICAgICAgIG0ubWF0ZXJpYWwgPSBvcmlnaW5hbC5tYXRlcmlhbDtcbiAgICAgICAgICAgICAgICBtLnNraW4gPSBvcmlnaW5hbC5za2luO1xuICAgICAgICAgICAgICAgIG0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsb25lZC5hZGRDb21wb25lbnQoXCJtZXNoXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzaDogb3JpZ2luYWwubWVzaCxcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWw6IG9yaWdpbmFsLm1hdGVyaWFsLFxuICAgICAgICAgICAgICAgICAgICBza2luOiBvcmlnaW5hbC5za2luLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbXBvbmVudHNbaV0udHlwZSA9PSBcImNvbGxpc2lvblwiKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gY29tcC5maW5kKChjKSA9PiBjLnR5cGUgPT0gXCJjb2xsaXNpb25cIiAmJiBjLmFjdGl2ZSA9PSBmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbCA9IGNvbXBvbmVudHNbaV07XG4gICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgIGMuY29sbGlkZXIgPSBvcmlnaW5hbC5jb2xsaWRlcjtcbiAgICAgICAgICAgICAgICBjLmV4dGVudHMgPSBvcmlnaW5hbC5leHRlbnRzO1xuICAgICAgICAgICAgICAgIGMuZ3JvdXAgPSBvcmlnaW5hbC5ncm91cDtcbiAgICAgICAgICAgICAgICBjLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbG9uZWQuYWRkQ29tcG9uZW50KFwiY29sbGlzaW9uXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGlkZXI6IG9yaWdpbmFsLmNvbGxpZGVyLFxuICAgICAgICAgICAgICAgICAgICBleHRlbnRzOiBvcmlnaW5hbC5leHRlbnRzLFxuICAgICAgICAgICAgICAgICAgICBncm91cDogb3JpZ2luYWwuZ3JvdXAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29tcG9uZW50c1tpXS50eXBlID09IFwiYW5pbWF0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBjb21wLmZpbmQoKGMpID0+IGMudHlwZSA9PSBcImFuaW1hdGlvblwiICYmIGMuYWN0aXZlID09IGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgYy5hbmltYXRpb24gPSBvcmlnaW5hbC5hbmltYXRpb247XG4gICAgICAgICAgICAgICAgYy5wbGF5Q291bnQgPSBvcmlnaW5hbC5wbGF5Q291bnQ7XG4gICAgICAgICAgICAgICAgYy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNsb25lZC5hZGRDb21wb25lbnQoXCJhbmltYXRpb25cIiwge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IG9yaWdpbmFsLmFuaW1hdGlvbixcbiAgICAgICAgICAgICAgICAgICAgcGxheUNvdW50OiBvcmlnaW5hbC5wbGF5Q291bnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29tcG9uZW50c1tpXS50eXBlID09IFwidGFnc1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gY29tcC5maW5kKChjKSA9PiBjLnR5cGUgPT0gXCJ0YWdzXCIgJiYgYy5hY3RpdmUgPT0gZmFsc2UpO1xuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBjb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICBjLnRhZ3MgPSBvcmlnaW5hbC50YWdzO1xuICAgICAgICAgICAgICAgIGMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjbG9uZWQuYWRkQ29tcG9uZW50KFRhZ3MsIHtcbiAgICAgICAgICAgICAgICAgICAgdGFnczogb3JpZ2luYWwudGFncyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb21wb25lbnRzW2ldLnR5cGUgPT0gXCJmbGlwYm9va1wiKSB7XG4gICAgICAgICAgICBjb25zdCBjID0gY29tcC5maW5kKChjKSA9PiBjLnR5cGUgPT0gXCJmbGlwYm9va1wiICYmIGMuYWN0aXZlID09IGZhbHNlKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgYy5iYXNlID0gb3JpZ2luYWwuYmFzZTtcbiAgICAgICAgICAgICAgICBjLnVybCA9IG9yaWdpbmFsLnVybDtcbiAgICAgICAgICAgICAgICBjLnVybEVtaXNzaXZlID0gb3JpZ2luYWwudXJsRW1pc3NpdmU7XG4gICAgICAgICAgICAgICAgYy5jb2x1bW5zID0gb3JpZ2luYWwuY29sdW1ucztcbiAgICAgICAgICAgICAgICBjLnJvd3MgPSBvcmlnaW5hbC5yb3dzO1xuICAgICAgICAgICAgICAgIGMuc3BlZWQgPSBvcmlnaW5hbC5zcGVlZDtcbiAgICAgICAgICAgICAgICBjLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY2xvbmVkLmFkZENvbXBvbmVudChGbGlwYm9vaywge1xuICAgICAgICAgICAgICAgICAgICBiYXNlOiBvcmlnaW5hbC5iYXNlLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IG9yaWdpbmFsLnVybCxcbiAgICAgICAgICAgICAgICAgICAgdXJsRW1pc3NpdmU6IG9yaWdpbmFsLnVybEVtaXNzaXZlLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBvcmlnaW5hbC5jb2x1bW5zLFxuICAgICAgICAgICAgICAgICAgICByb3dzOiBvcmlnaW5hbC5yb3dzLFxuICAgICAgICAgICAgICAgICAgICBzcGVlZDogb3JpZ2luYWwuc3BlZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjID0gY29tcC5maW5kKChjKSA9PiBjLnR5cGUgPT0gY29tcG9uZW50c1tpXS50eXBlICYmIGMuYWN0aXZlID09IGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgYy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xvbmVkLmFkZENvbXBvbmVudChjb21wb25lbnRzW2ldLnR5cGUsIGNvbXBvbmVudHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmFyIGMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHNbaV0pKVxuICAgICAgICAgICAgLy8gZGVsZXRlKGMsJ19pZCcpO1xuICAgICAgICAgICAgLy8gZGVsZXRlKGMsJ19tYW5hZ2VyJyk7XG4gICAgICAgICAgICAvLyBkZWxldGUoYywnX3R5cGUnKTtcbiAgICAgICAgICAgIC8vIGNsb25lZC5hZGRDb21wb25lbnQoY29tcG9uZW50c1tpXS50eXBlLCBjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgcG9zID0gW107XG4gICAgbGV0IHJvdCA9IFtdO1xuICAgIGxldCBzY2FsZSA9IFtdO1xuICAgIG9iamVjdC5nZXRQb3NpdGlvbkxvY2FsKHBvcyk7XG4gICAgb2JqZWN0LmdldFJvdGF0aW9uTG9jYWwocm90KTtcbiAgICBvYmplY3QuZ2V0U2NhbGluZ0xvY2FsKHNjYWxlKTtcbiAgICBjbG9uZWQucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XG4gICAgY2xvbmVkLnNldFBvc2l0aW9uTG9jYWwocG9zKTtcbiAgICBjbG9uZWQuc2V0Um90YXRpb25Mb2NhbChyb3QpO1xuICAgIGNsb25lZC5zZXRTY2FsaW5nTG9jYWwoc2NhbGUpO1xuICAgIGNsb25lZC5uYW1lID0gb2JqZWN0Lm5hbWU7XG4gICAgaWYgKG9iamVjdC5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGRDbG9uZSA9IGNsb25lT2JqZWN0KGVuZ2luZSwgb2JqZWN0LmNoaWxkcmVuW2ldLCBjYWNoZSk7XG4gICAgICAgICAgICBjaGlsZENsb25lLnBhcmVudCA9IGNsb25lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9uZWQuc2V0RGlydHkoKTtcbiAgICByZXR1cm4gY2xvbmVkO1xufVxuLyoqXG4gKiBGaW5kcyBhIGNoaWxkIG9iamVjdCBieSBuYW1lXG4gKiBAcGFyYW0ge09iamVjdDNEfSBvYmplY3QgT2JqZWN0IHRvIGdldCB0aGUgY2hpbGQgZnJvbVxuICogQHBhcmFtIHtzdHJpbmd9IGNoaWxkTmFtZSBUaGUgbmFtZSBvZiB0aGUgY2hpbGQgdG8gZmluZFxuICogQHJldHVybnMge09iamVjdDNEfSBUaGUgY2hpbGQgb2JqZWN0OyBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGZpbmRDaGlsZChvYmplY3QsIGNoaWxkTmFtZSkge1xuICAgIHJldHVybiBvYmplY3QuY2hpbGRyZW4uZmlsdGVyKChvKSA9PiBvLm5hbWUgPT0gY2hpbGROYW1lKVswXTtcbn1cbi8qKlxuICogUmVwbGFjZXMgYSBzdHJpbmcgaW5zaWRlIGFub3RoZXIgc3RyaW5nIGJ5IGluZGV4XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIG9yaWdpbmFsIHN0cmluZyB0byByZXBsYWNlIGEgY2hhcmFjdGVyIGluXG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXggdGhlIHBvc2l0aW9uIG9mIHRoZSBzdGFydCBvZiByZXBsYWNlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHJlcGxhY2VtZW50IHRoZSByZXBsYWNlbWVudCBzdHJpbmdcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VBdChzdHJpbmcsIGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHJldHVybiAoc3RyaW5nLnNsaWNlKDAsIGluZGV4KSArXG4gICAgICAgIHJlcGxhY2VtZW50ICtcbiAgICAgICAgc3RyaW5nLnNsaWNlKGluZGV4ICsgcmVwbGFjZW1lbnQubGVuZ3RoKSk7XG59XG5leHBvcnQgY29uc3Qgd2xVdGlscyA9IHtcbiAgICBjbG9uZU9iamVjdCxcbiAgICBmaW5kQ2hpbGQsXG4gICAgcmVwbGFjZUF0LFxufTtcbiIsICJpbXBvcnQgeyBybmcgfSBmcm9tIFwiLi9ybmcuanNcIjtcbi8qKlxuICogU2h1ZmZsZXMgYXJyYXkgaW4gcGxhY2UuIEVTNiB2ZXJzaW9uXG4gKiBAcGFyYW0ge1tdfSBhcnIgYXJyYXkgdG8gc2h1ZmZsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZUFycmF5KGFycikge1xuICAgIGZvciAobGV0IGkgPSBhcnIubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBqID0gcm5nLmdldFVuaWZvcm1JbnQoMCwgaSArIDEpO1xuICAgICAgICBbYXJyW2ldLCBhcnJbal1dID0gW2FycltqXSwgYXJyW2ldXTtcbiAgICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IEVhc2luZyA9IHtcbiAgICAvKipcbiAgICAgKiBMaW5lYXIgZWFzaW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB0IEEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxIHJlcHJlc2VudGluZyB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgKiBAcmV0dXJucyBUaGUgc2FtZSB2YWx1ZSBhcyBgdGAsIHByb3ZpZGluZyBhIGxpbmVhciBwcm9ncmVzc2lvbi5cbiAgICAgKi9cbiAgICBMaW5lYXI6ICh0KSA9PiB0LFxuICAgIC8qKlxuICAgICAqIFF1YWRyYXRpYyBlYXNlLWluIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB0IEEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxIHJlcHJlc2VudGluZyB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgKiBAcmV0dXJucyBBIHZhbHVlIHJlcHJlc2VudGluZyBhbiBhY2NlbGVyYXRlZCAocXVhZHJhdGljKSBwcm9ncmVzc2lvbiBmcm9tIDAgdG8gMS5cbiAgICAgKi9cbiAgICBJblF1YWQ6ICh0KSA9PiB0ICogdCxcbiAgICAvKipcbiAgICAgKiBRdWFkcmF0aWMgZWFzZS1vdXQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHQgQSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIHRoZSBwcm9ncmVzcyBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAqIEByZXR1cm5zIEEgdmFsdWUgcmVwcmVzZW50aW5nIGEgZGVjZWxlcmF0ZWQgKHF1YWRyYXRpYykgcHJvZ3Jlc3Npb24gZnJvbSAwIHRvIDEuXG4gICAgICovXG4gICAgT3V0UXVhZDogKHQpID0+IDEgLSAoMSAtIHQpICogKDEgLSB0KSxcbiAgICAvKipcbiAgICAgKiBRdWFkcmF0aWMgZWFzZS1pbi1vdXQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHQgQSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIHRoZSBwcm9ncmVzcyBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAqIEByZXR1cm5zIEEgdmFsdWUgdGhhdCBhY2NlbGVyYXRlcyBpbiwgdGhlbiBkZWNlbGVyYXRlcyBvdXQsIHByb3ZpZGluZyBhIHNtb290aCB0cmFuc2l0aW9uIGJldHdlZW4gbW90aW9uIHN0YXRlcy5cbiAgICAgKi9cbiAgICBJbk91dFF1YWQ6ICh0KSA9PiB0IDwgMC41ID8gMiAqIHQgKiB0IDogMSAtIE1hdGgucG93KC0yICogdCArIDIsIDIpIC8gMixcbiAgICAvKipcbiAgICAgKiBDdWJpYyBlYXNlLWluIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB0IEEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxIHJlcHJlc2VudGluZyB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIGFuaW1hdGlvbi5cbiAgICAgKiBAcmV0dXJucyBBIHZhbHVlIHJlcHJlc2VudGluZyBhbiBhY2NlbGVyYXRlZCAoY3ViaWMpIHByb2dyZXNzaW9uIGZyb20gMCB0byAxLlxuICAgICAqL1xuICAgIEluQ3ViaWM6ICh0KSA9PiBNYXRoLnBvdyh0LCAzKSxcbiAgICAvKipcbiAgICAgKiBDdWJpYyBlYXNlLW91dCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gdCBBIHZhbHVlIGJldHdlZW4gMCBhbmQgMSByZXByZXNlbnRpbmcgdGhlIHByb2dyZXNzIG9mIHRoZSBhbmltYXRpb24uXG4gICAgICogQHJldHVybnMgQSB2YWx1ZSByZXByZXNlbnRpbmcgYW4gZGVjZWxlcmF0ZWQgKGN1YmljKSBwcm9ncmVzc2lvbiBmcm9tIDAgdG8gMS5cbiAgICAgKi9cbiAgICBPdXRDdWJpYzogKHQpID0+IE1hdGgucG93KHQgLSAxLCAzKSArIDEsXG4gICAgLyoqXG4gICAgICogQ3ViaWMgZWFzZS1pbi1vdXQgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHQgQSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIHRoZSBwcm9ncmVzcyBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAqIEByZXR1cm5zIEEgdmFsdWUgdGhhdCBhY2NlbGVyYXRlcyBpbiwgdGhlbiBkZWNlbGVyYXRlcyBvdXQsIHByb3ZpZGluZyBhIHNtb290aCB0cmFuc2l0aW9uIGJldHdlZW4gbW90aW9uIHN0YXRlcy5cbiAgICAgKi9cbiAgICBJbk91dEN1YmljOiAodCkgPT4ge1xuICAgICAgICBpZiAodCA8IDAuNSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KDIgKiB0LCAzKSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKE1hdGgucG93KDIgKiB0IC0gMiwgMykgKyAyKSAvIDI7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbi8qKlxuICogUGVyZm9ybXMgbGluZWFyIGludGVycG9sYXRpb24gd2l0aCBvcHRpb25hbCBlYXNpbmcgZnVuY3Rpb24gb24gdHdvIG51bWVyaWMgdmFsdWVzXG4gKiBAcGFyYW0gc3RhcnQgU3RhcnRpbmcgbnVtZXJpYyB2YWx1ZVxuICogQHBhcmFtIGVuZCBFbmRpbmcgbnVtZXJpYyB2YWx1ZVxuICogQHBhcmFtIHQgUHJvZ3Jlc3MgaW5kaWNhdG9yIGJldHdlZW4gc3RhcnRpbmcgYW5kIGVuZGluZyBudW1lcmljIHZhbHVlcywgdHlwaWNhbGx5IHJlcHJlc2VudGVkIGFzIGEgZGVjaW1hbCB3aXRoaW4gcmFuZ2UgWzAsMV1cbiAqIEBwYXJhbSBlYXNpbmcgT3B0aW9uYWwgZWFzaW5nIGZ1bmN0aW9uIHRvIGFwcGx5LiBEZWZhdWx0cyB0byBFYXNpbmcuTGluZWFyIGlmIG5vdCBwcm92aWRlZCBvciBpbnZhbGlkIHR5cGUgc3VwcGxpZWRcbiAqIEByZXR1cm4gSW50ZXJwb2xhdGVkIHJlc3VsdCBiYXNlZCBvbiBwcm92aWRlZCBpbnB1dHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxlcnAoc3RhcnQsIGVuZCwgdCwgZWFzaW5nID0gRWFzaW5nLkxpbmVhcikge1xuICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZWFzaW5nID0gZ2V0RWFzaW5nRnVuY3Rpb24oZWFzaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0ICogKDEgLSBlYXNpbmcodCkpICsgZW5kICogZWFzaW5nKHQpO1xufVxuZnVuY3Rpb24gZ2V0RWFzaW5nRnVuY3Rpb24odHlwZSkge1xuICAgIC8vIERlZmF1bHQgdG8gbGluZWFyIGludGVycG9sYXRpb25cbiAgICByZXR1cm4gdHlwZW9mIHR5cGUgPT09IFwiZnVuY3Rpb25cIiA/IHR5cGUgOiBFYXNpbmcuTGluZWFyO1xufVxuLyoqXG4gKiBDbGFtcHMgaW5wdXQgdmFsdWUgdG8gcHJvdmlkZWQgbWluaW11bSAmIG1heGltdW0gcmFuZ2VcbiAqIEBwYXJhbSB2YWx1ZSBOdW1lcmljIGlucHV0IGZvciBjbGFtcGluZyBvcGVyYXRpb25cbiAqIEBwYXJhbSBtaW4gTWluaW11bSBhbGxvd2VkIHJlc3VsdCBhZnRlciBjbGFtcGluZyApXG4gKiBAcGFyYW0gbWF4IE1heGltdW0gYWxsb3dlZCByZXN1bHQgYWZ0ZXIgY2xhbXBpbmdcbiAqIEByZXR1cm4gUmVzdWx0aW5nIG91dHB1dCB3aXRoaW4gc3BlY2lmaWVkIGNvbnN0cmFpbnQgcmFuZ2UgW21pbixtYXhdXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcCh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgodmFsdWUsIG1pbiksIG1heCk7XG59XG4iLCAiZXhwb3J0IGNsYXNzIFF1ZXVlIHtcbiAgICBpdGVtcyA9IFtdO1xuICAgIGVucXVldWUoaXRlbSkge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2goaXRlbSk7XG4gICAgfVxuICAgIGRlcXVldWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLnNoaWZ0KCk7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aCA9PT0gMDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgcm5nIH0gZnJvbSBcIi4vcm5nLmpzXCI7XG4vKipcbiAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIHRoZSBnaXZlbiBhcnJheSB3aXRoIHRoZSBnaXZlbiB3ZWlnaHRzLlxuICogQHBhcmFtIHtbXX0gYXJyYXkgYXJyYXkgd2l0aCBlbGVtZW50c1xuICogQHBhcmFtIHtbXX0gaXRlbXNXaXRoV2VpZ2h0cyBhcnJheSBvZiB3ZWlnaHRzLCBzaG91bGQgYmUgYXMgbG9uZ3MgYXMgdGhlIGFycmF5XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcm5nV2l0aFdlaWdodChhcnJheSwgaXRlbXNXaXRoV2VpZ2h0cykge1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgdG90YWwgd2VpZ2h0IG9mIGFsbCBpdGVtcy5cbiAgICBsZXQgdG90YWxXZWlnaHQgPSBpdGVtc1dpdGhXZWlnaHRzLnJlZHVjZSgodG90YWwsIGl0ZW1XaXRoV2VpZ2h0KSA9PiB7XG4gICAgICAgIHJldHVybiB0b3RhbCArIGl0ZW1XaXRoV2VpZ2h0O1xuICAgIH0sIDApO1xuICAgIC8vIEdlbmVyYXRlIGEgcmFuZG9tIHZhbHVlIGJldHdlZW4gMCBhbmQgdGhlIHRvdGFsIHdlaWdodC5cbiAgICBsZXQgcmFuZG9tVmFsdWUgPSBybmcuZ2V0VW5pZm9ybUludCgwLCB0b3RhbFdlaWdodCk7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGl0ZW1zIGFuZCBzdWJ0cmFjdCB0aGVpciB3ZWlnaHQgZnJvbSB0aGUgcmFuZG9tIHZhbHVlLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXNXaXRoV2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByYW5kb21WYWx1ZSAtPSBpdGVtc1dpdGhXZWlnaHRzW2ldO1xuICAgICAgICAvLyBXaGVuIHRoZSB2YWx1ZSBiZWNvbWVzIG5lZ2F0aXZlIG9yIHplcm8sXG4gICAgICAgIC8vIHJldHVybiB0aGUgY3VycmVudCBlbGVtZW50IGFzIGl0J3Mgbm93IFwic2VsZWN0ZWRcIi5cbiAgICAgICAgaWYgKHJhbmRvbVZhbHVlIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSZXR1cm4gbnVsbCBpZiBubyBlbGVtZW50cyBmb3VuZCwgdGhvdWdoIGl0IHNob3VsZCBub3QgaGFwcGVuIGluIHByYWN0aWNlLlxuICAgIHJldHVybiBudWxsO1xufVxuIiwgImV4cG9ydCAqIGZyb20gJy4vOHRod2FsbC1jYW1lcmEuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9hbmNob3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jdXJzb3ItdGFyZ2V0LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vY3Vyc29yLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZGVidWctb2JqZWN0LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZGV2aWNlLW9yaWVudGF0aW9uLWxvb2suanMnO1xuZXhwb3J0ICogZnJvbSAnLi9maW5nZXItY3Vyc29yLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZml4ZWQtZm92ZWF0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaGFuZC10cmFja2luZy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2hpdC10ZXN0LWxvY2F0aW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaG93bGVyLWF1ZGlvLWxpc3RlbmVyLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaG93bGVyLWF1ZGlvLXNvdXJjZS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2ltYWdlLXRleHR1cmUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9tb3VzZS1sb29rLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vcGxheWVyLWhlaWdodC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RhcmdldC1mcmFtZXJhdGUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90ZWxlcG9ydC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYWlsLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHdvLWpvaW50LWlrLXNvbHZlci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3ZpZGVvLXRleHR1cmUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi92ci1tb2RlLWFjdGl2ZS1zd2l0Y2guanMnO1xuZXhwb3J0ICogZnJvbSAnLi9wbGFuZS1kZXRlY3Rpb24uanMnO1xuZXhwb3J0ICogZnJvbSAnLi92cm0uanMnO1xuZXhwb3J0ICogZnJvbSAnLi93YXNkLWNvbnRyb2xzLmpzJztcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIFR5cGUgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xuLyoqXG4gKiA4dGh3YWxsIGNhbWVyYSBjb21wb25lbnQuXG4gKlxuICogU2V0cyB1cCB0aGUgOHRod2FsbCBwaXBlbGluZSBhbmQgcmV0cmlldmVzIHRyYWNraW5nIGV2ZW50cyB0byBwbGFjZSBhblxuICogb2JqZWN0IGF0IHRoZSBsb2NhdGlvbiBvZiB0aGUgdHJhY2tlZCBBUiBjYW1lcmEgLyBtb2JpbGUgZGV2aWNlLlxuICpcbiAqIFVzZSB0aGlzIGZvciBTTEFNIHRyYWNraW5nIGJhc2VkIG9uIDh0aHdhbGwuXG4gKlxuICogTWFrZSBzdXJlIHRvIGVuYWJsZSA4dGh3YWxsIGluIFwiUHJvamVjdCBTZXR0aW5nc1wiID4gXCJBUlwiLiBTZWUgYWxzbyB0aGVcbiAqIFtBUiBHZXR0aW5nIFN0YXJ0ZWQgR3VpZGVdKC9nZXR0aW5nLXN0YXJ0ZWQvcXVpY2stc3RhcnQtYXIpXG4gKlxuICpcbiAqIEN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHdvcmxkLXRyYWNraW5nIChTTEFNKSB1c2luZyBCQUNLIGNhbWVyYS5cbiAqXG4gKiAtIHJlbW92ZSBhbnkgb2NjdXJyZW5jZXMgb2YgdGhlIG9sZCA4dGh3YWxsLWNhbWVyYSBjb21wb25lbnQgaW4gdGhlIGVkaXRvclxuICogLSBBZGQgdGhpcyBjb21wb25lbnQgdG8gTm9uVnJDYW1lcmFcbiAqXG4gKiBJTVBPUlRBTlQhXG4gKiAtIHVudGlsIGl0IGdldCdzIGZpeGVkLCBzZWxlY3QgJ2N1c3RvbUluZGV4SHRtbCcgaW4gdGhlIHByb2plY3Qgc2V0dGluZ3NcbiAqIC0gb3BlbiBhIGdlbmVyYXRlZCBpbmRleC5odG1sIGFuZCBjcm9zc29yaWdpbj1cImFub255bW91c1wiIGF0dHJpYnV0ZSB0byB0aGUgPHNjcmlwdD4gdGFnIHdoZXJlIC8vYXBwcy44dGh3YWxsLmNvbS94cndlYiBpcyBsb2FkZWRcbiAqXG4gKlxuICogIyMjIyMjIyMjIFVzaW5nIFVJIG92ZXJsYXlzICMjIyMjIyMjIyMjIyNcbiAqIEJ5IGRlZmF1bHQsIHRoaXMgY29tcG9uZW50IHJlbmRlcnMgb3duIFVJIHRvIGdpdmUgdGhlIHVzZXIgZmVlZGJhY2sgYWJvdXQgcmVqZWN0ZWQgcGVybWlzc2lvbnMgb3IgdHJhY2tpbmcgZXJyb3JzLlxuICogSXQgY2FuIGJlIGNoYW5nZWQgYnkgZW5hYmxpbmcgdXNlQ3VzdG9tVUlPdmVybGF5cyBmbGFnLlxuICpcbiAqIElmIHVzZUN1c3RvbVVJT3ZlcmxheXMgaXMgZW5hYmxlZCwgeW91IGFyZSBleHBlY3RlZCBoYW5kbGUgdGhlIGZvbGxvd2luZyBldmVudHMgZGlzcGF0Y2hlZCBieSB0aGUgd2luZG93IG9iamVjdDpcbiAqIC0gXCI4dGh3YWxsLXJlcXVlc3QtdXNlci1pbnRlcmFjdGlvblwiIC0gdXNlZCBvbmx5IG9uIGlPUyBzYWZhcmkuIFJlcXVlc3QgYSB1c2VyIHRvIHBlcmZvcm0gYW5kIGludGVyYWN0aW9uIHdpdGggdGhlIHBhZ2Ugc28gdGhhdCBqYXZhc2NyaXB0IGlzIGFsbG93ZWQgdG8gYWxsb3dlZCB0byByZXF1ZXN0IGEgbW90aW9uL2NhbWVyYS9taWMgcGVybWlzc2lvbnMuXG4gKiAgTWFrZSBzdXJlIHRoZSB3aW5kb3cgb2JqZWN0IGlzIGRpc3BhdGNoaW5nIGFuICc4dGh3YWxsLXNhZmUtdG8tcmVxdWVzdC1wZXJtaXNzaW9ucycgZXZlbnQgYWZ0ZXIgaW50ZXJhY3Rpb24gaGFzIGhhcHBlbmVkLlxuICogYGBgXG4gKiA8YnV0dG9uIG9uY2xpY2s9XCJ3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJzh0aHdhbGwtc2FmZS10by1yZXF1ZXN0LXBlcm1pc3Npb25zJykpXCI+QWxsb3cgU2Vuc29yczwvYnV0dG9uPlxuICogYGBgXG4gKlxuICogLSBcIjh0aHdhbGwtcGVybWlzc2lvbi1mYWlsXCIgLSB1c2VyIHJlamVjdGVkIGFueSBvZiB0aGUgcGVybWlzc2lvbnNcbiAqXG4gKiAtIFwiOHRod2FsbC1lcnJvclwiIC0gcnVudGltZSA4dGh3YWxsIGVycm9yIG9jY3VycmVkXG4gKi9cbmNsYXNzIEFSQ2FtZXJhOHRod2FsbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJzh0aHdhbGwtY2FtZXJhJztcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHtcbiAgICAgICAgLyoqIE92ZXJyaWRlIHRoZSBXTCBodG1sIG92ZXJsYXlzIGZvciBoYW5kbGluZyBjYW1lcmEvbW90aW9uIHBlcm1pc3Npb25zIGFuZCBlcnJvciBoYW5kbGluZyAqL1xuICAgICAgICB1c2VDdXN0b21VSU92ZXJsYXlzOiB7IHR5cGU6IFR5cGUuQm9vbCwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB9O1xuICAgIC8qIDh0aHdhbGwgY2FtZXJhIHBpcGVsaW5lIG1vZHVsZSBuYW1lICovXG4gICAgbmFtZSA9ICd3b25kZXJsYW5kLWVuZ2luZS04dGh3YWxsLWNhbWVyYSc7XG4gICAgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHZpZXcgPSBudWxsOyAvLyBjYWNoZSBjYW1lcmFcbiAgICBwb3NpdGlvbiA9IFswLCAwLCAwXTsgLy8gY2FjaGUgOHRod2FsbCBjYW0gcG9zaXRpb25cbiAgICByb3RhdGlvbiA9IFswLCAwLCAwLCAtMV07IC8vIGNhY2hlIDh0aHdhbGwgY2FtIHJvdGF0aW9uXG4gICAgZ2xUZXh0dXJlUmVuZGVyZXIgPSBudWxsOyAvLyBjYWNoZSBYUjguR2xUZXh0dXJlUmVuZGVyZXIucGlwZWxpbmVNb2R1bGVcbiAgICBwcm9tcHRGb3JEZXZpY2VNb3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyBUZWxsIGFueW9uZSB3aG8ncyBpbnRlcmVzdGVkIHRoYXQgd2Ugd2FudCB0byBnZXQgc29tZSB1c2VyIGludGVyYWN0aW9uXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJzh0aHdhbGwtcmVxdWVzdC11c2VyLWludGVyYWN0aW9uJykpO1xuICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBzb21lb25lIHJlc3BvbnNlIHRoYXQgdXNlciBpbnRlcmFjdGlvbiBoYXBwZW5lZFxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJzh0aHdhbGwtc2FmZS10by1yZXF1ZXN0LXBlcm1pc3Npb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vdGlvbkV2ZW50ID0gYXdhaXQgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtb3Rpb25FdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBnZXRQZXJtaXNzaW9ucygpIHtcbiAgICAgICAgLy8gaU9TIFwiZmVhdHVyZVwiLiBJZiB3ZSB3YW50IHRvIHJlcXVlc3QgdGhlIERldmljZU1vdGlvbiBwZXJtaXNzaW9uLCB1c2VyIGhhcyB0byBpbnRlcmFjdCB3aXRoIHRoZSBwYWdlIGF0IGZpcnN0ICh0b3VjaCBpdCkuXG4gICAgICAgIC8vIElmIHRoZXJlIHdhcyBubyBpbnRlcmFjdGlvbiBkb25lIHNvIGZhciwgd2Ugd2lsbCByZW5kZXIgYSBIVE1MIG92ZXJsYXkgd2l0aCB3b3VsZCBnZXQgdGhlIHVzZXIgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgc2NyZWVuXG4gICAgICAgIGlmIChEZXZpY2VNb3Rpb25FdmVudCAmJiBEZXZpY2VNb3Rpb25FdmVudC5yZXF1ZXN0UGVybWlzc2lvbikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBEZXZpY2VNb3Rpb25FdmVudC5yZXF1ZXN0UGVybWlzc2lvbigpO1xuICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIG11c3QgaGF2ZSByZWplY3RlZCB0aGUgbW90aW9uIGV2ZW50IG9uIHByZXZpb3VzIHBhZ2UgbG9hZC4gKHNhZmFyaSByZW1lbWJlcnMgdGhpcyBjaG9pY2UpLlxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09ICdncmFudGVkJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vdGlvbkV2ZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIFVzZXIgaGFkIG5vIGludGVyYWN0aW9uIHdpdGggdGhlIHBhZ2Ugc28gZmFyXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2VwdGlvbi5uYW1lID09PSAnTm90QWxsb3dlZEVycm9yJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3Rpb25FdmVudCA9IGF3YWl0IHRoaXMucHJvbXB0Rm9yRGV2aWNlTW90aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3Rpb25FdmVudCAhPT0gJ2dyYW50ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01vdGlvbkV2ZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTW90aW9uRXZlbnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBnZXQgdGhlIGNhbWVyYSBzdHJlYW1cbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHtcbiAgICAgICAgICAgICAgICB2aWRlbzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdWRpbzogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gSWYgd2Ugc3VjY2Vzc2Z1bGx5IGFjcXVpcmVkIHRoZSBjYW1lcmEgc3RyZWFtIC0gd2UgY2FuIHN0b3AgaXQgYW5kIHdhaXQgdW50aWwgOHRod2FsbCByZXF1ZXN0cyBpdCBhZ2FpblxuICAgICAgICAgICAgc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW1lcmEnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoJ3ZpZXcnKTtcbiAgICAgICAgdGhpcy5vblVwZGF0ZSA9IHRoaXMub25VcGRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkF0dGFjaCA9IHRoaXMub25BdHRhY2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkV4Y2VwdGlvbiA9IHRoaXMub25FeGNlcHRpb24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vbkNhbWVyYVN0YXR1c0NoYW5nZSA9IHRoaXMub25DYW1lcmFTdGF0dXNDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudCgndmlldycpO1xuICAgICAgICBpZiAoIXRoaXMudXNlQ3VzdG9tVUlPdmVybGF5cykge1xuICAgICAgICAgICAgT3ZlcmxheXNIYW5kbGVyLmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRQZXJtaXNzaW9ucygpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVXNlciBkaWQgbm90IGdyYW50IHRoZSBjYW1lcmEgb3IgbW90aW9uRXZlbnQgcGVybWlzc2lvbnNcbiAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnOHRod2FsbC1wZXJtaXNzaW9uLWZhaWwnLCB7IGRldGFpbDogZXJyb3IgfSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMud2FpdEZvclhSOCgpO1xuICAgICAgICBYUjguWHJDb250cm9sbGVyLmNvbmZpZ3VyZSh7XG4gICAgICAgICAgICBkaXNhYmxlV29ybGRUcmFja2luZzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdsVGV4dHVyZVJlbmRlcmVyID0gWFI4LkdsVGV4dHVyZVJlbmRlcmVyLnBpcGVsaW5lTW9kdWxlKCk7XG4gICAgICAgIFhSOC5hZGRDYW1lcmFQaXBlbGluZU1vZHVsZXMoW1xuICAgICAgICAgICAgdGhpcy5nbFRleHR1cmVSZW5kZXJlcixcbiAgICAgICAgICAgIFhSOC5YckNvbnRyb2xsZXIucGlwZWxpbmVNb2R1bGUoKSxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBjYW1lcmFDb25maWc6IHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb246IFhSOC5YckNvbmZpZy5jYW1lcmEoKS5CQUNLLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbnZhczogTW9kdWxlLmNhbnZhcyxcbiAgICAgICAgICAgIGFsbG93ZWREZXZpY2VzOiBYUjguWHJDb25maWcuZGV2aWNlKCkuQU5ZLFxuICAgICAgICAgICAgb3duUnVuTG9vcDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIFhSOC5ydW4oY29uZmlnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiA4dGh3YWxsIHBpcGVsaW5lIGZ1bmN0aW9uXG4gICAgICovXG4gICAgb25BdHRhY2gocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZW5naW5lLnNjZW5lLmNvbG9yQ2xlYXJFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGdsID0gTW9kdWxlLmN0eDtcbiAgICAgICAgY29uc3Qgcm90ID0gdGhpcy5vYmplY3Qucm90YXRpb25Xb3JsZDtcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5vYmplY3QuZ2V0VHJhbnNsYXRpb25Xb3JsZChbXSk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBBcnJheS5mcm9tKHBvcyk7XG4gICAgICAgIHRoaXMucm90YXRpb24gPSBBcnJheS5mcm9tKHJvdCk7XG4gICAgICAgIFhSOC5YckNvbnRyb2xsZXIudXBkYXRlQ2FtZXJhUHJvamVjdGlvbk1hdHJpeCh7XG4gICAgICAgICAgICBvcmlnaW46IHsgeDogcG9zWzBdLCB5OiBwb3NbMV0sIHo6IHBvc1syXSB9LFxuICAgICAgICAgICAgZmFjaW5nOiB7IHg6IHJvdFswXSwgeTogcm90WzFdLCB6OiByb3RbMl0sIHc6IHJvdFszXSB9LFxuICAgICAgICAgICAgY2FtOiB7XG4gICAgICAgICAgICAgICAgcGl4ZWxSZWN0V2lkdGg6IE1vZHVsZS5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgcGl4ZWxSZWN0SGVpZ2h0OiBNb2R1bGUuY2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgICAgICBuZWFyQ2xpcFBsYW5lOiB0aGlzLnZpZXcubmVhcixcbiAgICAgICAgICAgICAgICBmYXJDbGlwUGxhbmU6IHRoaXMudmlldy5mYXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmdpbmUuc2NlbmUub25QcmVSZW5kZXIucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRFJBV19GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICAgICAgICBYUjgucnVuUHJlUmVuZGVyKERhdGUubm93KCkpO1xuICAgICAgICAgICAgWFI4LnJ1blJlbmRlcigpOyAvLyA8LS0tIHRlbGwgOHRod2FsbCB0byBkbyBpdCdzIHRoaW5nIChhbHRlcm5hdGl2ZWx5IGNhbGwgdGhpcy5nbFRleHR1cmVSZW5kZXJlci5vblJlbmRlcigpIGlmIHlvdSBvbmx5IGNhcmUgYWJvdXQgY2FtZXJhIGZlZWQgKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbmdpbmUuc2NlbmUub25Qb3N0UmVuZGVyLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgWFI4LnJ1blBvc3RSZW5kZXIoRGF0ZS5ub3coKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIDh0aHdhbGwgcGlwZWxpbmUgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvbkNhbWVyYVN0YXR1c0NoYW5nZShlKSB7XG4gICAgICAgIGlmIChlICYmIGUuc3RhdHVzID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgdGhpcy5vbkV4Y2VwdGlvbihuZXcgRXJyb3IoYENhbWVyYSBmYWlsZWQgd2l0aCBzdGF0dXM6ICR7ZS5zdGF0dXN9YCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogOHRod2FsbCBwaXBlbGluZSBmdW5jdGlvblxuICAgICAqL1xuICAgIG9uVXBkYXRlKGUpIHtcbiAgICAgICAgaWYgKCFlLnByb2Nlc3NDcHVSZXN1bHQucmVhbGl0eSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyByb3RhdGlvbiwgcG9zaXRpb24sIGludHJpbnNpY3MgfSA9IGUucHJvY2Vzc0NwdVJlc3VsdC5yZWFsaXR5O1xuICAgICAgICB0aGlzLnJvdGF0aW9uWzBdID0gcm90YXRpb24ueDtcbiAgICAgICAgdGhpcy5yb3RhdGlvblsxXSA9IHJvdGF0aW9uLnk7XG4gICAgICAgIHRoaXMucm90YXRpb25bMl0gPSByb3RhdGlvbi56O1xuICAgICAgICB0aGlzLnJvdGF0aW9uWzNdID0gcm90YXRpb24udztcbiAgICAgICAgdGhpcy5wb3NpdGlvblswXSA9IHBvc2l0aW9uLng7XG4gICAgICAgIHRoaXMucG9zaXRpb25bMV0gPSBwb3NpdGlvbi55O1xuICAgICAgICB0aGlzLnBvc2l0aW9uWzJdID0gcG9zaXRpb24uejtcbiAgICAgICAgaWYgKGludHJpbnNpY3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3Rpb25NYXRyaXggPSB0aGlzLnZpZXcucHJvamVjdGlvbk1hdHJpeDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgICAgIC8qIFNvbWUgcHJvY2Vzc0NwdVJlc3VsdC5yZWFsaXR5LmludHJpbnNpY3MgYXJlIHNldCB0byBJbmZpbml0eSxcbiAgICAgICAgICAgICAgICAgKiB3aGljaCBicmFrZXMgb3VyIHByb2plY3Rpb25NYXRyaXguIFNvIHdlIGp1c3QgZmlsdGVyIHRob3NlIGVsZW1lbnRzIG91dC4gKi9cbiAgICAgICAgICAgICAgICBpZiAoTnVtYmVyLmlzRmluaXRlKGludHJpbnNpY3NbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3Rpb25NYXRyaXhbaV0gPSBpbnRyaW5zaWNzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gJiYgcm90YXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnJvdGF0aW9uV29ybGQgPSB0aGlzLnJvdGF0aW9uO1xuICAgICAgICAgICAgdGhpcy5vYmplY3Quc2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIDh0aHdhbGwgcGlwZWxpbmUgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvbkV4Y2VwdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCc4dGh3YWxsIGV4Y2VwdGlvbjonLCBlcnJvcik7XG4gICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnOHRod2FsbC1lcnJvcicsIHsgZGV0YWlsOiBlcnJvciB9KSk7XG4gICAgfVxuICAgIHdhaXRGb3JYUjgoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgX3JlaikgPT4ge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5YUjgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigneHJsb2FkZWQnLCAoKSA9PiByZXNvbHZlKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgeyBBUkNhbWVyYTh0aHdhbGwgfTtcbmNvbnN0IE92ZXJsYXlzSGFuZGxlciA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVxdWVzdFVzZXJJbnRlcmFjdGlvbiA9IHRoaXMuaGFuZGxlUmVxdWVzdFVzZXJJbnRlcmFjdGlvbi5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZVBlcm1pc3Npb25GYWlsID0gdGhpcy5oYW5kbGVQZXJtaXNzaW9uRmFpbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUVycm9yID0gdGhpcy5oYW5kbGVFcnJvci5iaW5kKHRoaXMpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignOHRod2FsbC1yZXF1ZXN0LXVzZXItaW50ZXJhY3Rpb24nLCB0aGlzLmhhbmRsZVJlcXVlc3RVc2VySW50ZXJhY3Rpb24pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignOHRod2FsbC1wZXJtaXNzaW9uLWZhaWwnLCB0aGlzLmhhbmRsZVBlcm1pc3Npb25GYWlsKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJzh0aHdhbGwtZXJyb3InLCB0aGlzLmhhbmRsZUVycm9yKTtcbiAgICB9LFxuICAgIGhhbmRsZVJlcXVlc3RVc2VySW50ZXJhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IHRoaXMuc2hvd092ZXJsYXkocmVxdWVzdFBlcm1pc3Npb25PdmVybGF5KTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJzh0aHdhbGwtc2FmZS10by1yZXF1ZXN0LXBlcm1pc3Npb25zJywgKCkgPT4ge1xuICAgICAgICAgICAgb3ZlcmxheS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBoYW5kbGVQZXJtaXNzaW9uRmFpbDogZnVuY3Rpb24gKF9yZWFzb24pIHtcbiAgICAgICAgdGhpcy5zaG93T3ZlcmxheShmYWlsZWRQZXJtaXNzaW9uT3ZlcmxheSk7XG4gICAgfSxcbiAgICBoYW5kbGVFcnJvcjogZnVuY3Rpb24gKF9lcnJvcikge1xuICAgICAgICB0aGlzLnNob3dPdmVybGF5KHJ1bnRpbWVFcnJvck92ZXJsYXkpO1xuICAgIH0sXG4gICAgc2hvd092ZXJsYXk6IGZ1bmN0aW9uIChodG1sQ29udGVudCkge1xuICAgICAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIG92ZXJsYXkuaW5uZXJIVE1MID0gaHRtbENvbnRlbnQ7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheSk7XG4gICAgICAgIHJldHVybiBvdmVybGF5O1xuICAgIH0sXG59O1xuY29uc3QgcmVxdWVzdFBlcm1pc3Npb25PdmVybGF5ID0gYFxuPHN0eWxlPlxuICAjcmVxdWVzdC1wZXJtaXNzaW9uLW92ZXJsYXkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgei1pbmRleDogOTk5O1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIH1cblxuICAucmVxdWVzdC1wZXJtaXNzaW9uLW92ZXJsYXlfdGl0bGUge1xuICAgIG1hcmdpbjogMzBweDtcbiAgICBmb250LXNpemU6IDMycHg7XG4gIH1cblxuICAucmVxdWVzdC1wZXJtaXNzaW9uLW92ZXJsYXlfYnV0dG9uIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTgwMDg2O1xuICAgIGZvbnQtc2l6ZTogMjJweDtcbiAgICBwYWRkaW5nOiAxMHB4IDMwcHg7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcbiAgICBib3JkZXI6IG5vbmU7XG4gIH1cbjwvc3R5bGU+XG5cbjxkaXYgaWQ9XCJyZXF1ZXN0LXBlcm1pc3Npb24tb3ZlcmxheVwiPlxuICA8ZGl2IGNsYXNzPVwicmVxdWVzdC1wZXJtaXNzaW9uLW92ZXJsYXlfdGl0bGVcIj5UaGlzIGFwcCByZXF1aXJlcyB0byB1c2UgeW91ciBjYW1lcmEgYW5kIG1vdGlvbiBzZW5zb3JzPC9kaXY+XG5cbiAgPGJ1dHRvbiBjbGFzcz1cInJlcXVlc3QtcGVybWlzc2lvbi1vdmVybGF5X2J1dHRvblwiIG9uY2xpY2s9XCJ3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJzh0aHdhbGwtc2FmZS10by1yZXF1ZXN0LXBlcm1pc3Npb25zJykpXCI+T0s8L2J1dHRvbj5cbjwvZGl2PmA7XG5jb25zdCBmYWlsZWRQZXJtaXNzaW9uT3ZlcmxheSA9IGBcbjxzdHlsZT5cbiAgI2ZhaWxlZC1wZXJtaXNzaW9uLW92ZXJsYXkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgei1pbmRleDogOTk5O1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIH1cblxuICAuZmFpbGVkLXBlcm1pc3Npb24tb3ZlcmxheV90aXRsZSB7XG4gICAgbWFyZ2luOiAzMHB4O1xuICAgIGZvbnQtc2l6ZTogMzJweDtcbiAgfVxuXG4gIC5mYWlsZWQtcGVybWlzc2lvbi1vdmVybGF5X2J1dHRvbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U4MDA4NjtcbiAgICBmb250LXNpemU6IDIycHg7XG4gICAgcGFkZGluZzogMTBweCAzMHB4O1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gICAgYm9yZGVyOiBub25lO1xuICB9XG48L3N0eWxlPlxuXG48ZGl2IGlkPVwiZmFpbGVkLXBlcm1pc3Npb24tb3ZlcmxheVwiPlxuICA8ZGl2IGNsYXNzPVwiZmFpbGVkLXBlcm1pc3Npb24tb3ZlcmxheV90aXRsZVwiPkZhaWxlZCB0byBncmFudCBwZXJtaXNzaW9ucy4gUmVzZXQgdGhlIHRoZSBwZXJtaXNzaW9ucyBhbmQgcmVmcmVzaCB0aGUgcGFnZS48L2Rpdj5cblxuICA8YnV0dG9uIGNsYXNzPVwiZmFpbGVkLXBlcm1pc3Npb24tb3ZlcmxheV9idXR0b25cIiBvbmNsaWNrPVwid2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXCI+UmVmcmVzaCB0aGUgcGFnZTwvYnV0dG9uPlxuPC9kaXY+YDtcbmNvbnN0IHJ1bnRpbWVFcnJvck92ZXJsYXkgPSBgXG48c3R5bGU+XG4gICN3YWxsLWVycm9yLW92ZXJsYXkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgei1pbmRleDogOTk5O1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIH1cblxuICAud2FsbC1lcnJvci1vdmVybGF5X3RpdGxlIHtcbiAgICBtYXJnaW46IDMwcHg7XG4gICAgZm9udC1zaXplOiAzMnB4O1xuICB9XG5cbiAgLndhbGwtZXJyb3Itb3ZlcmxheV9idXR0b24ge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlODAwODY7XG4gICAgZm9udC1zaXplOiAyMnB4O1xuICAgIHBhZGRpbmc6IDEwcHggMzBweDtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICBib3JkZXItcmFkaXVzOiAxNXB4O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgfVxuPC9zdHlsZT5cblxuPGRpdiBpZD1cIndhbGwtZXJyb3Itb3ZlcmxheVwiPlxuICA8ZGl2IGNsYXNzPVwid2FsbC1lcnJvci1vdmVybGF5X3RpdGxlXCI+RXJyb3IgaGFzIG9jY3VycmVkLiBQbGVhc2UgcmVsb2FkIHRoZSBwYWdlPC9kaXY+XG5cbiAgPGJ1dHRvbiBjbGFzcz1cIndhbGwtZXJyb3Itb3ZlcmxheV9idXR0b25cIiBvbmNsaWNrPVwid2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXCI+UmVsb2FkPC9idXR0b24+XG48L2Rpdj5gO1xuIiwgImNvbnN0IHRlbXBWZWMgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuY29uc3QgdGVtcFF1YXQgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuZXhwb3J0IGZ1bmN0aW9uIHNldFhSUmlnaWRUcmFuc2Zvcm1Mb2NhbChvLCB0cmFuc2Zvcm0pIHtcbiAgICBjb25zdCByID0gdHJhbnNmb3JtLm9yaWVudGF0aW9uO1xuICAgIHRlbXBRdWF0WzBdID0gci54O1xuICAgIHRlbXBRdWF0WzFdID0gci55O1xuICAgIHRlbXBRdWF0WzJdID0gci56O1xuICAgIHRlbXBRdWF0WzNdID0gci53O1xuICAgIGNvbnN0IHQgPSB0cmFuc2Zvcm0ucG9zaXRpb247XG4gICAgdGVtcFZlY1swXSA9IHQueDtcbiAgICB0ZW1wVmVjWzFdID0gdC55O1xuICAgIHRlbXBWZWNbMl0gPSB0Lno7XG4gICAgby5yZXNldFRyYW5zbGF0aW9uUm90YXRpb24oKTtcbiAgICBvLnRyYW5zZm9ybUxvY2FsLnNldCh0ZW1wUXVhdCk7XG4gICAgby50cmFuc2xhdGUodGVtcFZlYyk7XG59XG4iLCAidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbWl0dGVyIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgc2V0WFJSaWdpZFRyYW5zZm9ybUxvY2FsIH0gZnJvbSAnLi91dGlscy93ZWJ4ci5qcyc7XG52YXIgdGVtcFZlYzMgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xudmFyIHRlbXBRdWF0ID0gbmV3IEZsb2F0MzJBcnJheSg0KTtcbi8qKlxuICogU2V0cyB0aGUgbG9jYXRpb24gb2YgdGhlIG9iamVjdCB0byB0aGUgbG9jYXRpb24gb2YgYW4gWFJBbmNob3JcbiAqXG4gKiBDcmVhdGUgYW5jaG9ycyB1c2luZyB0aGUgYEFuY2hvci5jcmVhdGUoKWAgc3RhdGljIGZ1bmN0aW9uLlxuICpcbiAqIEV4YW1wbGUgZm9yIHVzZSB3aXRoIGN1cnNvcjpcbiAqIGBgYGpzXG4gKiBjdXJzb3JUYXJnZXQub25DbGljay5hZGQoKG9iamVjdCwgY3Vyc29yLCBvcmlnaW5hbEV2ZW50KSA9PiB7XG4gKiAgICAgLyogT25seSBldmVudHMgaW4gWFIgd2lsbCBoYXZlIGEgZnJhbWUgYXR0YWNoZWQgKlxcL1xuICogICAgIGlmKCFvcmlnaW5hbEV2ZW50LmZyYW1lKSByZXR1cm47XG4gKiAgICAgQW5jaG9yLmNyZWF0ZShhbmNob3JPYmplY3QsIHt1dWlkOiBpZCwgcGVyc2lzdDogdHJ1ZX0sIG9yaWdpbmFsRXZlbnQuZnJhbWUpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuY2xhc3MgQW5jaG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAnYW5jaG9yJztcbiAgICAvKiBTdGF0aWMgbWFuYWdlbWVudCBvZiBhbGwgYW5jaG9ycyAqL1xuICAgIHN0YXRpYyAjYW5jaG9ycyA9IFtdO1xuICAgIHBlcnNpc3QgPSBmYWxzZTtcbiAgICAvKiogVW5pcXVlIGlkZW50aWZpZXIgdG8gbG9hZCBhIHBlcnNpc3RlbnQgYW5jaG9yIGZyb20sIG9yIGVtcHR5L251bGwgaWYgdW5rbm93biAqL1xuICAgIHV1aWQgPSBudWxsO1xuICAgIC8qKiBUaGUgeHJBbmNob3IsIGlmIGNyZWF0ZWQgKi9cbiAgICB4ckFuY2hvciA9IG51bGw7XG4gICAgLyoqIEVtaXRzIGV2ZW50cyB3aGVuIHRoZSBhbmNob3IgaXMgY3JlYXRlZCBlaXRoZXIgYnkgYmVpbmcgcmVzdG9yZWQgb3IgbmV3bHkgY3JlYXRlZCAqL1xuICAgIG9uQ3JlYXRlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKiogV2hldGhlciB0aGUgYW5jaG9yIGlzIGN1cnJlbnRseSBiZWluZyB0cmFja2VkICovXG4gICAgdmlzaWJsZSA9IGZhbHNlO1xuICAgIC8qKiBFbWl0cyBhbiBldmVudCB3aGVuIHRoaXMgYW5jaG9yIHN0YXJ0cyB0cmFja2luZyAqL1xuICAgIG9uVHJhY2tpbmdGb3VuZCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhpcyBhbmNob3Igc3RvcHMgdHJhY2tpbmcgKi9cbiAgICBvblRyYWNraW5nTG9zdCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIFhSRnJhbWUgdG8gdXNlIGZvciBjcmVhdGluZyB0aGUgYW5jaG9yICovXG4gICAgeHJGcmFtZSA9IG51bGw7XG4gICAgLyoqIFhSSGl0VGVzdFJlc3VsdCB0byB1c2UgZm9yIGNyZWF0aW5nIHRoZSBhbmNob3IgKi9cbiAgICB4ckhpdFJlc3VsdCA9IG51bGw7XG4gICAgLyoqIFJldHJpZXZlIGFsbCBhbmNob3JzIG9mIHRoZSBjdXJyZW50IHNjZW5lICovXG4gICAgc3RhdGljIGdldEFsbEFuY2hvcnMoKSB7XG4gICAgICAgIHJldHVybiBBbmNob3IuI2FuY2hvcnM7XG4gICAgfVxuICAgIHN0YXRpYyAjYWRkQW5jaG9yKGFuY2hvcikge1xuICAgICAgICBBbmNob3IuI2FuY2hvcnMucHVzaChhbmNob3IpO1xuICAgIH1cbiAgICBzdGF0aWMgI3JlbW92ZUFuY2hvcihhbmNob3IpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBBbmNob3IuI2FuY2hvcnMuaW5kZXhPZihhbmNob3IpO1xuICAgICAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBBbmNob3IuI2FuY2hvcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGFuY2hvclxuICAgICAqXG4gICAgICogQHBhcmFtIG8gT2JqZWN0IHRvIGF0dGFjaCB0aGUgY29tcG9uZW50IHRvXG4gICAgICogQHBhcmFtIHBhcmFtcyBQYXJhbWV0ZXJzIGZvciB0aGUgYW5jaG9yIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBmcmFtZSBYUkZyYW1lIHRvIHVzZSBmb3IgYW5jaG9yIGNyYXRpb24sIGlmIG51bGwsIHdpbGwgdXNlIHRoZSBjdXJyZW50IGZyYW1lIGlmIGF2YWlsYWJsZVxuICAgICAqIEBwYXJhbSBoaXRSZXN1bHQgT3B0aW9uYWwgaGl0LXRlc3QgcmVzdWx0IHRvIGNyZWF0ZSB0aGUgYW5jaG9yIHdpdGhcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIGZvciB0aGUgbmV3bHkgY3JlYXRlZCBhbmNob3IgY29tcG9uZW50XG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShvLCBwYXJhbXMsIGZyYW1lLCBoaXRSZXN1bHQpIHtcbiAgICAgICAgY29uc3QgYSA9IG8uYWRkQ29tcG9uZW50KEFuY2hvciwgeyAuLi5wYXJhbXMsIGFjdGl2ZTogZmFsc2UgfSk7XG4gICAgICAgIGlmIChhID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGEueHJIaXRSZXN1bHQgPSBoaXRSZXN1bHQgPz8gbnVsbDtcbiAgICAgICAgYS54ckZyYW1lID0gZnJhbWUgPz8gbnVsbDtcbiAgICAgICAgYS5vbkNyZWF0ZS5vbmNlKCgpID0+ICgoYS54ckZyYW1lID0gbnVsbCksIChhLnhySGl0UmVzdWx0ID0gbnVsbCkpKTtcbiAgICAgICAgYS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYS5vbkNyZWF0ZS5wcm9taXNlKCk7XG4gICAgfVxuICAgICNnZXRGcmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueHJGcmFtZSB8fCB0aGlzLmVuZ2luZS54ci5mcmFtZTtcbiAgICB9XG4gICAgYXN5bmMgI2NyZWF0ZUFuY2hvcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLiNnZXRGcmFtZSgpLmNyZWF0ZUFuY2hvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNyZWF0ZSBhbmNob3IgLSBhbmNob3JzIG5vdCBzdXBwb3J0ZWQsIGRpZCB5b3UgZW5hYmxlIHRoZSAnYW5jaG9ycycgV2ViWFIgZmVhdHVyZT9cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMueHJIaXRSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnhySGl0UmVzdWx0LmNyZWF0ZUFuY2hvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1ZXN0ZWQgYW5jaG9yIG9uIFhSSGl0VGVzdFJlc3VsdCwgYnV0IFdlYlhSIGhpdC10ZXN0IGZlYXR1cmUgaXMgbm90IGF2YWlsYWJsZS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnhySGl0UmVzdWx0LmNyZWF0ZUFuY2hvcigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QuZ2V0VHJhbnNsYXRpb25Xb3JsZCh0ZW1wVmVjMyk7XG4gICAgICAgICAgICB0ZW1wUXVhdC5zZXQodGhpcy5vYmplY3Qucm90YXRpb25Xb3JsZCk7XG4gICAgICAgICAgICBjb25zdCByb3RhdGlvbiA9IHRlbXBRdWF0O1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yUG9zZSA9IG5ldyBYUlJpZ2lkVHJhbnNmb3JtKHsgeDogdGVtcFZlYzNbMF0sIHk6IHRlbXBWZWMzWzFdLCB6OiB0ZW1wVmVjM1syXSB9LCB7IHg6IHJvdGF0aW9uWzBdLCB5OiByb3RhdGlvblsxXSwgejogcm90YXRpb25bMl0sIHc6IHJvdGF0aW9uWzNdIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuI2dldEZyYW1lKCk/LmNyZWF0ZUFuY2hvcihhbmNob3JQb3NlLCB0aGlzLmVuZ2luZS54ci5jdXJyZW50UmVmZXJlbmNlU3BhY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgICNvbkFkZEFuY2hvcihhbmNob3IpIHtcbiAgICAgICAgaWYgKCFhbmNob3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnBlcnNpc3QpIHtcbiAgICAgICAgICAgIGlmIChhbmNob3IucmVxdWVzdFBlcnNpc3RlbnRIYW5kbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFuY2hvci5yZXF1ZXN0UGVyc2lzdGVudEhhbmRsZSgpLnRoZW4oKHV1aWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dWlkID0gdXVpZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jb25DcmVhdGUoYW5jaG9yKTtcbiAgICAgICAgICAgICAgICAgICAgQW5jaG9yLiNhZGRBbmNob3IodGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhbmNob3I6IFBlcnNpc3RlbnQgYW5jaG9ycyBhcmUgbm90IHN1cHBvcnRlZCBieSB5b3VyIGNsaWVudC4gSWdub3JpbmcgcGVyc2lzdCBwcm9wZXJ0eS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNvbkNyZWF0ZShhbmNob3IpO1xuICAgIH1cbiAgICAjb25SZXN0b3JlQW5jaG9yKGFuY2hvcikge1xuICAgICAgICB0aGlzLiNvbkNyZWF0ZShhbmNob3IpO1xuICAgIH1cbiAgICAjb25DcmVhdGUoYW5jaG9yKSB7XG4gICAgICAgIHRoaXMueHJBbmNob3IgPSBhbmNob3I7XG4gICAgICAgIHRoaXMub25DcmVhdGUubm90aWZ5KHRoaXMpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMudXVpZCAmJiB0aGlzLmVuZ2luZS54cikge1xuICAgICAgICAgICAgdGhpcy5wZXJzaXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVuZ2luZS54ci5zZXNzaW9uLnJlc3RvcmVQZXJzaXN0ZW50QW5jaG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FuY2hvcjogUGVyc2lzdGVudCBhbmNob3JzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHlvdXIgY2xpZW50LiBJZ25vcmluZyBwZXJzaXN0IHByb3BlcnR5LicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbmdpbmUueHIuc2Vzc2lvbi5yZXN0b3JlUGVyc2lzdGVudEFuY2hvcih0aGlzLnV1aWQpLnRoZW4odGhpcy4jb25SZXN0b3JlQW5jaG9yLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuI2dldEZyYW1lKCkpIHtcbiAgICAgICAgICAgIHRoaXMuI2NyZWF0ZUFuY2hvcigpLnRoZW4odGhpcy4jb25BZGRBbmNob3IuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuY2hvcnMgY2FuIG9ubHkgYmUgY3JlYXRlZCBkdXJpbmcgdGhlIFhSIGZyYW1lIGluIGFuIGFjdGl2ZSBYUiBzZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMueHJBbmNob3IgfHwgIXRoaXMuZW5naW5lLnhyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKiBXZSBuZWVkIHRvIHVzZSB0aGUgYWN0dWFsIGZyYW1lIGZyb20gdGhlIGRyYXcgY2FsbGJhY2sgaGVyZSAqL1xuICAgICAgICBjb25zdCBwb3NlID0gdGhpcy5lbmdpbmUueHIuZnJhbWUuZ2V0UG9zZSh0aGlzLnhyQW5jaG9yLmFuY2hvclNwYWNlLCB0aGlzLmVuZ2luZS54ci5jdXJyZW50UmVmZXJlbmNlU3BhY2UpO1xuICAgICAgICBjb25zdCB2aXNpYmxlID0gISFwb3NlO1xuICAgICAgICBpZiAodmlzaWJsZSAhPSB0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGU7XG4gICAgICAgICAgICAodmlzaWJsZSA/IHRoaXMub25UcmFja2luZ0ZvdW5kIDogdGhpcy5vblRyYWNraW5nTG9zdCkubm90aWZ5KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NlKSB7XG4gICAgICAgICAgICBzZXRYUlJpZ2lkVHJhbnNmb3JtTG9jYWwodGhpcy5vYmplY3QsIHBvc2UudHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkRlc3Ryb3koKSB7XG4gICAgICAgIEFuY2hvci4jcmVtb3ZlQW5jaG9yKHRoaXMpO1xuICAgIH1cbn1cbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmJvb2woZmFsc2UpXG5dLCBBbmNob3IucHJvdG90eXBlLCBcInBlcnNpc3RcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LnN0cmluZygpXG5dLCBBbmNob3IucHJvdG90eXBlLCBcInV1aWRcIiwgdm9pZCAwKTtcbmV4cG9ydCB7IEFuY2hvciB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgRW1pdHRlciB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4vKipcbiAqIENsaWNrL2hvdmVyL21vdmUvYnV0dG9uIHRhcmdldCBmb3IgW2N1cnNvcl0oI2N1cnNvcikuXG4gKlxuICogVG8gdHJpZ2dlciBjb2RlIHdoZW4gY2xpY2tpbmcsIGhvdmVyaW5nLCB1bmhvdmVyaW5nLCBtb3ZpbmcgY3Vyc29yLCBwcmVzc2luZ1xuICogY3Vyc29yIGJ1dHRvbiBvciByZWxlYXNpbmcgY3Vyc29yIGJ1dHRvbiwgdXNlIGAuYWRkQ2xpY2tGdW5jdGlvbihmKWAsXG4gKiBgLmFkZEhvdmVyRnVuY3Rpb24oZilgLCBgLmFkZFVuSG92ZXJGdW5jdGlvbihmKWAsXG4gKiBgLmFkZE1vdmVGdW5jdGlvbihmKWAsIGAuYWRkRG93bkZ1bmN0aW9uKGYpYCBhbmRcbiAqIGAuYWRkVXBGdW5jdGlvbihmKWAgcmVzcGVjdGl2ZWx5IHdpdGggYW55IGBmdW5jdGlvbiBmKCkge31gLlxuICpcbiAqIFRvIGNhbGwgbWVtYmVycyBvbiBhIGRpZmZlcmVudCBjb21wb25lbnQsIHlvdSBjYW4gc2V0IHVwIGEgY3Vyc29yIHRhcmdldCBsaWtlXG4gKiBzbzpcbiAqXG4gKiBgYGBqc1xuICogc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICogICBsZXQgdGFyZ2V0ID0gdGhpcy5vYmplY3QuYWRkQ29tcG9uZW50KCdjdXJzb3ItdGFyZ2V0Jyk7XG4gKiAgIHRhcmdldC5vbkNsaWNrLmFkZCh0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XG4gKiB9LFxuICogb25DbGljazogZnVuY3Rpb24oKSB7XG4gKiAgIGNvbnNvbGUubG9nKHRoaXMub2JqZWN0Lm5hbWUsIFwid2FzIGNsaWNrZWQhXCIpO1xuICogfVxuICogYGBgXG4gKiAqKkZ1bmN0aW9uczoqKlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB0YXJnZXQgPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoQ3Vyc29yVGFyZ2V0KTtcbiAqIGNvbnN0IGNhbGxiYWNrID0gZnVuY3Rpb24ob2JqZWN0LCBjdXJzb3JDb21wb25lbnQpIHt9O1xuICpcbiAqIHRhcmdldC5vbkhvdmVyLmFkZChjYWxsYmFjayk7XG4gKiB0YXJnZXQub25Ib3Zlci5yZW1vdmUoY2FsbGJhY2spO1xuICpcbiAqIHRhcmdldC5vblVuSG92ZXIuYWRkKGNhbGxiYWNrKTtcbiAqIHRhcmdldC5vblVuSG92ZXIucmVtb3ZlKGNhbGxiYWNrKTtcbiAqXG4gKiB0YXJnZXQub25DbGljay5hZGQoY2FsbGJhY2spO1xuICogdGFyZ2V0Lm9uQ2xpY2sucmVtb3ZlKGNhbGxiYWNrKTtcbiAqXG4gKiB0YXJnZXQub25Nb3ZlLmFkZChjYWxsYmFjayk7XG4gKiB0YXJnZXQub25Nb3ZlLnJlbW92ZShjYWxsYmFjayk7XG4gKlxuICogdGFyZ2V0Lm9uRG93bi5hZGQoY2FsbGJhY2spO1xuICogdGFyZ2V0Lm9uRG93bi5yZW1vdmUoY2FsbGJhY2spO1xuICpcbiAqIHRhcmdldC5vblVwLmFkZChjYWxsYmFjayk7XG4gKiB0YXJnZXQub25VcC5yZW1vdmUoY2FsbGJhY2spO1xuICogYGBgXG4gKlxuICogKipSZXF1aXJlbWVudHM6KipcbiAqIC0gYSBgY29sbGlzaW9uYCBjb21wb25lbnQgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIHNhbWUgb2JqZWN0LlxuICpcbiAqIFNlZSBbQW5pbWF0aW9uIEV4YW1wbGVdKC9zaG93Y2FzZS9hbmltYXRpb24pLlxuICovXG5jbGFzcyBDdXJzb3JUYXJnZXQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdjdXJzb3ItdGFyZ2V0JztcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHt9O1xuICAgIC8qKiBFbWl0dGVyIGZvciBldmVudHMgd2hlbiB0aGUgdGFyZ2V0IGlzIGhvdmVyZWQgKi9cbiAgICBvbkhvdmVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKiogRW1pdHRlciBmb3IgZXZlbnRzIHdoZW4gdGhlIHRhcmdldCBpcyB1bmhvdmVyZWQgKi9cbiAgICBvblVuaG92ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgIC8qKiBFbWl0dGVyIGZvciBldmVudHMgd2hlbiB0aGUgdGFyZ2V0IGlzIGNsaWNrZWQgKi9cbiAgICBvbkNsaWNrID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKiogRW1pdHRlciBmb3IgZXZlbnRzIHdoZW4gdGhlIGN1cnNvciBtb3ZlcyBvbiB0aGUgdGFyZ2V0ICovXG4gICAgb25Nb3ZlID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKiogRW1pdHRlciBmb3IgZXZlbnRzIHdoZW4gdGhlIHVzZXIgcHJlc3NlZCB0aGUgc2VsZWN0IGJ1dHRvbiBvbiB0aGUgdGFyZ2V0ICovXG4gICAgb25Eb3duID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKiogRW1pdHRlciBmb3IgZXZlbnRzIHdoZW4gdGhlIHVzZXIgdW5wcmVzc2VkIHRoZSBzZWxlY3QgYnV0dG9uIG9uIHRoZSB0YXJnZXQgKi9cbiAgICBvblVwID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGVtaXR0ZXIgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICAgdGhpcy5vbkhvdmVyLmFkZChmKTtcbiAgICAgKi9cbiAgICBhZGRIb3ZlckZ1bmN0aW9uKGYpIHtcbiAgICAgICAgdGhpcy5vbkhvdmVyLmFkZChmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBlbWl0dGVyIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgIHRoaXMub25Ib3Zlci5yZW1vdmUoZik7XG4gICAgICovXG4gICAgcmVtb3ZlSG92ZXJGdW5jdGlvbihmKSB7XG4gICAgICAgIHRoaXMub25Ib3Zlci5yZW1vdmUoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICB0aGlzLm9uVW5ob3Zlci5hZGQoZik7XG4gICAgICovXG4gICAgYWRkVW5Ib3ZlckZ1bmN0aW9uKGYpIHtcbiAgICAgICAgdGhpcy5vblVuaG92ZXIuYWRkKGYpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGVtaXR0ZXIgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICAgdGhpcy5vblVuaG92ZXIucmVtb3ZlKGYpO1xuICAgICAqL1xuICAgIHJlbW92ZVVuSG92ZXJGdW5jdGlvbihmKSB7XG4gICAgICAgIHRoaXMub25VbmhvdmVyLnJlbW92ZShmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBlbWl0dGVyIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgIHRoaXMub25DbGljay5hZGQoZik7XG4gICAgICovXG4gICAgYWRkQ2xpY2tGdW5jdGlvbihmKSB7XG4gICAgICAgIHRoaXMub25DbGljay5hZGQoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25DbGljay5yZW1vdmUoZik7XG4gICAgICovXG4gICAgcmVtb3ZlQ2xpY2tGdW5jdGlvbihmKSB7XG4gICAgICAgIHRoaXMub25DbGljay5yZW1vdmUoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25Nb3ZlLmFkZChmKTtcbiAgICAgKi9cbiAgICBhZGRNb3ZlRnVuY3Rpb24oZikge1xuICAgICAgICB0aGlzLm9uTW92ZS5hZGQoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25Nb3ZlLnJlbW92ZShmKTtcbiAgICAgKi9cbiAgICByZW1vdmVNb3ZlRnVuY3Rpb24oZikge1xuICAgICAgICB0aGlzLm9uTW92ZS5yZW1vdmUoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25Eb3duLmFkZChmKTtcbiAgICAgKi9cbiAgICBhZGREb3duRnVuY3Rpb24oZikge1xuICAgICAgICB0aGlzLm9uRG93bi5hZGQoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25Eb3duLnJlbW92ZShmKTtcbiAgICAgKi9cbiAgICByZW1vdmVEb3duRnVuY3Rpb24oZikge1xuICAgICAgICB0aGlzLm9uRG93bi5yZW1vdmUoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25VcC5hZGQoZik7XG4gICAgICovXG4gICAgYWRkVXBGdW5jdGlvbihmKSB7XG4gICAgICAgIHRoaXMub25VcC5hZGQoZik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgZW1pdHRlciBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgICBjb21wb25lbnQub25VcC5yZW1vdmUoZik7XG4gICAgICovXG4gICAgcmVtb3ZlVXBGdW5jdGlvbihmKSB7XG4gICAgICAgIHRoaXMub25VcC5yZW1vdmUoZik7XG4gICAgfVxufVxuZXhwb3J0IHsgQ3Vyc29yVGFyZ2V0IH07XG4iLCAidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFbWl0dGVyIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgc2V0WFJSaWdpZFRyYW5zZm9ybUxvY2FsIH0gZnJvbSAnLi91dGlscy93ZWJ4ci5qcyc7XG4vKipcbiAqIFNldHMgdXAgYSBbV2ViWFIgRGV2aWNlIEFQSSBcIkhpdCBUZXN0XCJdKGh0dHBzOi8vaW1tZXJzaXZlLXdlYi5naXRodWIuaW8vaGl0LXRlc3QvKVxuICogYW5kIHBsYWNlcyB0aGUgb2JqZWN0IHRvIHRoZSBoaXQgbG9jYXRpb24uXG4gKlxuICogKipSZXF1aXJlbWVudHM6KipcbiAqICAtIFNwZWNpZnkgYCdoaXQtdGVzdCdgIGluIHRoZSByZXF1aXJlZCBvciBvcHRpb25hbCBmZWF0dXJlcyBvbiB0aGUgQVIgYnV0dG9uIGluIHlvdXIgaHRtbCBmaWxlLlxuICogICAgU2VlIFtXYXN0ZXBhcGVyYmluIEFSXSgvc2hvd2Nhc2Uvd3BiLWFyKSBhcyBhbiBleGFtcGxlLlxuICovXG5jbGFzcyBIaXRUZXN0TG9jYXRpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdoaXQtdGVzdC1sb2NhdGlvbic7XG4gICAgdGVtcFNjYWxpbmcgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgIHZpc2libGUgPSBmYWxzZTtcbiAgICB4ckhpdFRlc3RTb3VyY2UgPSBudWxsO1xuICAgIC8qKiBSZWZlcmVuY2Ugc3BhY2UgZm9yIGNyZWF0aW5nIHRoZSBoaXQgdGVzdCB3aGVuIHRoZSBzZXNzaW9uIHN0YXJ0cyAqL1xuICAgIHhyUmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEZvciBtYWludGFpbmluZyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eTogV2hldGhlciB0byBzY2FsZSB0aGUgb2JqZWN0IHRvIDAgYW5kIGJhY2suXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIG9uSGl0TG9zdCBhbmQgb25IaXRGb3VuZCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHNjYWxlT2JqZWN0ID0gdHJ1ZTtcbiAgICAvKiogRW1pdHMgYW4gZXZlbnQgd2hlbiB0aGUgaGl0IHRlc3Qgc3dpdGNoZXMgZnJvbSB2aXNpYmxlIHRvIGludmlzaWJsZSAqL1xuICAgIG9uSGl0TG9zdCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIGhpdCB0ZXN0IHN3aXRjaGVzIGZyb20gaW52aXNpYmxlIHRvIHZpc2libGUgKi9cbiAgICBvbkhpdEZvdW5kID0gbmV3IEVtaXR0ZXIoKTtcbiAgICBvblNlc3Npb25TdGFydENhbGxiYWNrID0gbnVsbDtcbiAgICBvblNlc3Npb25FbmRDYWxsYmFjayA9IG51bGw7XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayA9IHRoaXMub25YUlNlc3Npb25TdGFydC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uU2Vzc2lvbkVuZENhbGxiYWNrID0gdGhpcy5vblhSU2Vzc2lvbkVuZC5iaW5kKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5zY2FsZU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy50ZW1wU2NhbGluZy5zZXQodGhpcy5vYmplY3Quc2NhbGluZ0xvY2FsKTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnNjYWxlKFswLCAwLCAwXSk7XG4gICAgICAgICAgICB0aGlzLm9uSGl0TG9zdC5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGVtcFNjYWxpbmcuc2V0KHRoaXMub2JqZWN0LnNjYWxpbmdMb2NhbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3Quc2NhbGUoWzAsIDAsIDBdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5vbkhpdEZvdW5kLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3Quc2NhbGluZ0xvY2FsLnNldCh0aGlzLnRlbXBTY2FsaW5nKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5zZXREaXJ0eSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5hZGQodGhpcy5vblNlc3Npb25TdGFydENhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25FbmQuYWRkKHRoaXMub25TZXNzaW9uRW5kQ2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQucmVtb3ZlKHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayk7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uRW5kLnJlbW92ZSh0aGlzLm9uU2Vzc2lvbkVuZENhbGxiYWNrKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBjb25zdCB3YXNWaXNpYmxlID0gdGhpcy52aXNpYmxlO1xuICAgICAgICBpZiAodGhpcy54ckhpdFRlc3RTb3VyY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lID0gdGhpcy5lbmdpbmUueHJGcmFtZTtcbiAgICAgICAgICAgIGlmICghZnJhbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IGhpdFRlc3RSZXN1bHRzID0gZnJhbWUuZ2V0SGl0VGVzdFJlc3VsdHModGhpcy54ckhpdFRlc3RTb3VyY2UpO1xuICAgICAgICAgICAgaWYgKGhpdFRlc3RSZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgcG9zZSA9IGhpdFRlc3RSZXN1bHRzWzBdLmdldFBvc2UodGhpcy5lbmdpbmUueHIuY3VycmVudFJlZmVyZW5jZVNwYWNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGUgPSAhIXBvc2U7XG4gICAgICAgICAgICAgICAgaWYgKHBvc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0WFJSaWdpZFRyYW5zZm9ybUxvY2FsKHRoaXMub2JqZWN0LCBwb3NlLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyogRW1pdCBldmVudHMgZm9yIHZpc2libGUgc3RhdGUgY2hhbmdlICovXG4gICAgICAgIGlmICh0aGlzLnZpc2libGUgIT0gd2FzVmlzaWJsZSkge1xuICAgICAgICAgICAgKHRoaXMudmlzaWJsZSA/IHRoaXMub25IaXRGb3VuZCA6IHRoaXMub25IaXRMb3N0KS5ub3RpZnkodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SGl0VGVzdFJlc3VsdHMoZnJhbWUgPSB0aGlzLmVuZ2luZS54cj8uZnJhbWUgPz8gbnVsbCkge1xuICAgICAgICBpZiAoIWZyYW1lKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAvKiBNYXkgaGFwcGVuIGlmIHRoZSBoaXQgdGVzdCBzb3VyY2UgY291bGRuJ3QgYmUgY3JlYXRlZCAqL1xuICAgICAgICBpZiAoIXRoaXMueHJIaXRUZXN0U291cmNlKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICByZXR1cm4gZnJhbWUuZ2V0SGl0VGVzdFJlc3VsdHModGhpcy54ckhpdFRlc3RTb3VyY2UpO1xuICAgIH1cbiAgICBvblhSU2Vzc2lvblN0YXJ0KHNlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlc3Npb24ucmVxdWVzdEhpdFRlc3RTb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignaGl0LXRlc3QtbG9jYXRpb246IGhpdCB0ZXN0IGZlYXR1cmUgbm90IGF2YWlsYWJsZS4gRGVhY3RpdmF0aW5nIGNvbXBvbmVudC4nKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvblxuICAgICAgICAgICAgLnJlcXVlc3RIaXRUZXN0U291cmNlKHtcbiAgICAgICAgICAgIHNwYWNlOiB0aGlzLnhyUmVmZXJlbmNlU3BhY2UgPz9cbiAgICAgICAgICAgICAgICB0aGlzLmVuZ2luZS54ci5yZWZlcmVuY2VTcGFjZUZvclR5cGUoJ3ZpZXdlcicpLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKGhpdFRlc3RTb3VyY2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMueHJIaXRUZXN0U291cmNlID0gaGl0VGVzdFNvdXJjZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICB9XG4gICAgb25YUlNlc3Npb25FbmQoKSB7XG4gICAgICAgIGlmICghdGhpcy54ckhpdFRlc3RTb3VyY2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMueHJIaXRUZXN0U291cmNlLmNhbmNlbCgpO1xuICAgICAgICB0aGlzLnhySGl0VGVzdFNvdXJjZSA9IG51bGw7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuYm9vbCh0cnVlKVxuXSwgSGl0VGVzdExvY2F0aW9uLnByb3RvdHlwZSwgXCJzY2FsZU9iamVjdFwiLCB2b2lkIDApO1xuZXhwb3J0IHsgSGl0VGVzdExvY2F0aW9uIH07XG4iLCAidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q29tcG9uZW50LCBFbWl0dGVyLCB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaS9kZWNvcmF0b3JzLmpzJztcbmltcG9ydCB7IHZlYzMsIG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnO1xuaW1wb3J0IHsgQ3Vyc29yVGFyZ2V0IH0gZnJvbSAnLi9jdXJzb3ItdGFyZ2V0LmpzJztcbmltcG9ydCB7IEhpdFRlc3RMb2NhdGlvbiB9IGZyb20gJy4vaGl0LXRlc3QtbG9jYXRpb24uanMnO1xuY29uc3QgdGVtcFZlYyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4vKiogR2xvYmFsIHRhcmdldCBmb3Ige0BsaW5rIEN1cnNvcn0gKi9cbmNsYXNzIEN1cnNvclRhcmdldEVtaXR0ZXJzIHtcbiAgICAvKiogRW1pdHRlciBmb3IgZXZlbnRzIHdoZW4gdGhlIHRhcmdldCBpcyBob3ZlcmVkICovXG4gICAgb25Ib3ZlciA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIEVtaXR0ZXIgZm9yIGV2ZW50cyB3aGVuIHRoZSB0YXJnZXQgaXMgdW5ob3ZlcmVkICovXG4gICAgb25VbmhvdmVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAvKiogRW1pdHRlciBmb3IgZXZlbnRzIHdoZW4gdGhlIHRhcmdldCBpcyBjbGlja2VkICovXG4gICAgb25DbGljayA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIEVtaXR0ZXIgZm9yIGV2ZW50cyB3aGVuIHRoZSBjdXJzb3IgbW92ZXMgb24gdGhlIHRhcmdldCAqL1xuICAgIG9uTW92ZSA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIEVtaXR0ZXIgZm9yIGV2ZW50cyB3aGVuIHRoZSB1c2VyIHByZXNzZWQgdGhlIHNlbGVjdCBidXR0b24gb24gdGhlIHRhcmdldCAqL1xuICAgIG9uRG93biA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIEVtaXR0ZXIgZm9yIGV2ZW50cyB3aGVuIHRoZSB1c2VyIHVucHJlc3NlZCB0aGUgc2VsZWN0IGJ1dHRvbiBvbiB0aGUgdGFyZ2V0ICovXG4gICAgb25VcCA9IG5ldyBFbWl0dGVyKCk7XG59XG4vKipcbiAqIDNEIGN1cnNvciBmb3IgZGVza3RvcC9tb2JpbGUvVlIuXG4gKlxuICogSW1wbGVtZW50cyBhIHJheS1jYXN0aW5nIGN1cnNvciBpbnRvIHRoZSBzY2VuZS4gVG8gcmVhY3QgdG9cbiAqIGNsaWNraW5nL2hvdmVyL3VuaG92ZXIvY3Vyc29yIGRvd24vY3Vyc29yIHVwL21vdmUgdXNlIGFcbiAqIFtjdXJzb3ItdGFyZ2V0XSgjY3Vyc29yLXRhcmdldCkuXG4gKlxuICogRm9yIFZSLCB0aGUgcmF5IGlzIGNhc3QgaW4gZGlyZWN0aW9uIG9mXG4gKiBbdGhpcy5vYmplY3QuZ2V0Rm9yd2FyZCgpXSgvanNhcGkvb2JqZWN0LyNnZXRmb3J3YXJkKS4gRm9yIGRlc2t0b3AgYW5kIG1vYmlsZSwgdGhlXG4gKiBmb3J3YXJkIHZlY3RvciBpcyBpbnZlcnNlLXByb2plY3RlZCB0byBhY2NvdW50IGZvciB3aGVyZSBvbiBzY3JlZW4gdGhlIHVzZXIgY2xpY2tlZC5cbiAqXG4gKiBgLmdsb2JhbFRhcmdldGAgY2FuIGJlIHVzZWQgdG8gY2FsbCBjYWxsYmFja3MgZm9yIGFsbCBvYmplY3RzLCBldmVuIHRob3NlIHRoYXRcbiAqIGRvIG5vdCBoYXZlIGEgY3Vyc29yIHRhcmdldCBhdHRhY2hlZCwgYnV0IG1hdGNoIHRoZSBjb2xsaXNpb24gZ3JvdXAuXG4gKlxuICogYC5oaXRUZXN0VGFyZ2V0YCBjYW4gYmUgdXNlZCB0byBjYWxsIGNhbGxiYWNrcyBXZWJYUiBoaXQgdGVzdCByZXN1bHRzLFxuICpcbiAqIFNlZSBbQW5pbWF0aW9uIEV4YW1wbGVdKC9zaG93Y2FzZS9hbmltYXRpb24pLlxuICovXG5jbGFzcyBDdXJzb3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdjdXJzb3InO1xuICAgIC8qIERlcGVuZGVuY2llcyBpcyBkZXByZWNhdGVkLCBidXQgd2Uga2VlcCBpdCBoZXJlIGZvciBjb21wYXRpYmlsaXR5XG4gICAgICogd2l0aCAxLjAuMC1yYzIgdW50aWwgMS4wLjAgaXMgcmVsZWFzZWQgKi9cbiAgICBzdGF0aWMgRGVwZW5kZW5jaWVzID0gW0hpdFRlc3RMb2NhdGlvbl07XG4gICAgc3RhdGljIG9uUmVnaXN0ZXIoZW5naW5lKSB7XG4gICAgICAgIGVuZ2luZS5yZWdpc3RlckNvbXBvbmVudChIaXRUZXN0TG9jYXRpb24pO1xuICAgIH1cbiAgICBfY29sbGlzaW9uTWFzayA9IDA7XG4gICAgX29uRGVhY3RpdmF0ZUNhbGxiYWNrcyA9IFtdO1xuICAgIF9pbnB1dCA9IG51bGw7XG4gICAgX29yaWdpbiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgX2N1cnNvck9ialNjYWxlID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICBfZGlyZWN0aW9uID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICBfcHJvamVjdGlvbk1hdHJpeCA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xuICAgIF92aWV3Q29tcG9uZW50ID0gbnVsbDtcbiAgICBfaXNEb3duID0gZmFsc2U7XG4gICAgX2xhc3RJc0Rvd24gPSBmYWxzZTtcbiAgICBfYXJUb3VjaERvd24gPSBmYWxzZTtcbiAgICBfbGFzdFBvaW50ZXJQb3MgPSBuZXcgRmxvYXQzMkFycmF5KDIpO1xuICAgIF9sYXN0Q3Vyc29yUG9zT25UYXJnZXQgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgIF9jdXJzb3JSYXlTY2FsZSA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgX2hpdFRlc3RMb2NhdGlvbiA9IG51bGw7XG4gICAgX2hpdFRlc3RPYmplY3QgPSBudWxsO1xuICAgIF9vblNlc3Npb25TdGFydENhbGxiYWNrID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjdXJzb3IgKGFuZCBjdXJzb3JPYmplY3QpIGlzIHZpc2libGUsIGkuZS4gcG9pbnRpbmcgYXQgYW4gb2JqZWN0XG4gICAgICogdGhhdCBtYXRjaGVzIHRoZSBjb2xsaXNpb24gZ3JvdXBcbiAgICAgKi9cbiAgICB2aXNpYmxlID0gdHJ1ZTtcbiAgICAvKiogTWF4aW11bSBkaXN0YW5jZSBmb3IgdGhlIGN1cnNvcidzIHJheSBjYXN0ICovXG4gICAgbWF4RGlzdGFuY2UgPSAxMDA7XG4gICAgLyoqIEN1cnJlbnRseSBob3ZlcmVkIG9iamVjdCAqL1xuICAgIGhvdmVyaW5nT2JqZWN0ID0gbnVsbDtcbiAgICAvKiogQ3Vyc29yVGFyZ2V0IGNvbXBvbmVudCBvZiB0aGUgY3VycmVudGx5IGhvdmVyZWQgb2JqZWN0ICovXG4gICAgaG92ZXJpbmdPYmplY3RUYXJnZXQgPSBudWxsO1xuICAgIC8qKiBXaGV0aGVyIHRoZSBjdXJzb3IgaXMgaG92ZXJpbmcgcmVhbGl0eSB2aWEgaGl0LXRlc3QgKi9cbiAgICBob3ZlcmluZ1JlYWxpdHkgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBHbG9iYWwgdGFyZ2V0IGxldHMgeW91IHJlY2VpdmUgZ2xvYmFsIGN1cnNvciBldmVudHMgb24gYW55IG9iamVjdC5cbiAgICAgKi9cbiAgICBnbG9iYWxUYXJnZXQgPSBuZXcgQ3Vyc29yVGFyZ2V0RW1pdHRlcnMoKTtcbiAgICAvKipcbiAgICAgKiBIaXQgdGVzdCB0YXJnZXQgbGV0cyB5b3UgcmVjZWl2ZSBjdXJzb3IgZXZlbnRzIGZvciBcInJlYWxpdHlcIiwgaWZcbiAgICAgKiBgdXNlV2ViWFJIaXRUZXN0YCBpcyBzZXQgdG8gYHRydWVgLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGN1cnNvci5oaXRUZXN0VGFyZ2V0Lm9uQ2xpY2suYWRkKChoaXQsIGN1cnNvcikgPT4ge1xuICAgICAqICAgICAvLyBVc2VyIGNsaWNrZWQgb24gcmVhbGl0eVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGhpdFRlc3RUYXJnZXQgPSBuZXcgQ3Vyc29yVGFyZ2V0RW1pdHRlcnMoKTtcbiAgICAvKiogV29ybGQgcG9zaXRpb24gb2YgdGhlIGN1cnNvciAqL1xuICAgIGN1cnNvclBvcyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgLyoqIENvbGxpc2lvbiBncm91cCBmb3IgdGhlIHJheSBjYXN0LiBPbmx5IG9iamVjdHMgaW4gdGhpcyBncm91cCB3aWxsIGJlIGFmZmVjdGVkIGJ5IHRoaXMgY3Vyc29yLiAqL1xuICAgIGNvbGxpc2lvbkdyb3VwID0gMTtcbiAgICAvKiogKG9wdGlvbmFsKSBPYmplY3QgdGhhdCB2aXN1YWxpemVzIHRoZSBjdXJzb3IncyByYXkuICovXG4gICAgY3Vyc29yUmF5T2JqZWN0ID0gbnVsbDtcbiAgICAvKiogQXhpcyBhbG9uZyB3aGljaCB0byBzY2FsZSB0aGUgYGN1cnNvclJheU9iamVjdGAuICovXG4gICAgY3Vyc29yUmF5U2NhbGluZ0F4aXMgPSAyO1xuICAgIC8qKiAob3B0aW9uYWwpIE9iamVjdCB0aGF0IHZpc3VhbGl6ZXMgdGhlIGN1cnNvcidzIGhpdCBsb2NhdGlvbi4gKi9cbiAgICBjdXJzb3JPYmplY3QgPSBudWxsO1xuICAgIC8qKiBIYW5kZWRuZXNzIGZvciBWUiBjdXJzb3JzIHRvIGFjY2VwdCB0cmlnZ2VyIGV2ZW50cyBvbmx5IGZyb20gcmVzcGVjdGl2ZSBjb250cm9sbGVyLiAqL1xuICAgIGhhbmRlZG5lc3MgPSAwO1xuICAgIC8qKiBNb2RlIGZvciByYXljYXN0aW5nLCB3aGV0aGVyIHRvIHVzZSBQaHlzWCBvciBzaW1wbGUgY29sbGlzaW9uIGNvbXBvbmVudHMgKi9cbiAgICByYXlDYXN0TW9kZSA9IDA7XG4gICAgLyoqIFdoZXRoZXIgdG8gc2V0IHRoZSBDU1Mgc3R5bGUgb2YgdGhlIG1vdXNlIGN1cnNvciBvbiBkZXNrdG9wICovXG4gICAgc3R5bGVDdXJzb3IgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFVzZSBXZWJYUiBoaXQtdGVzdCBpZiBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBBdHRhY2hlcyBhIGhpdC10ZXN0LWxvY2F0aW9uIGNvbXBvbmVudCB0byB0aGUgY3Vyc29yT2JqZWN0LCB3aGljaCB3aWxsIGJlIHVzZWRcbiAgICAgKiBieSB0aGUgY3Vyc29yIHRvIHNlbmQgZXZlbnRzIHRvIHRoZSBoaXRUZXN0VGFyZ2V0IHdpdGggSGl0VGVzdFJlc3VsdC5cbiAgICAgKi9cbiAgICB1c2VXZWJYUkhpdFRlc3QgPSBmYWxzZTtcbiAgICBfb25WaWV3cG9ydFJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKCF0aGlzLl92aWV3Q29tcG9uZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvKiBQcm9qZWN0aW9uIG1hdHJpeCB3aWxsIGNoYW5nZSBpZiB0aGUgdmlld3BvcnQgaXMgcmVzaXplZCwgd2hpY2ggd2lsbCBhZmZlY3QgdGhlXG4gICAgICAgICAqIHByb2plY3Rpb24gbWF0cml4IGJlY2F1c2Ugb2YgdGhlIGFzcGVjdCByYXRpby4gKi9cbiAgICAgICAgbWF0NC5pbnZlcnQodGhpcy5fcHJvamVjdGlvbk1hdHJpeCwgdGhpcy5fdmlld0NvbXBvbmVudC5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICB9O1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLl9jb2xsaXNpb25NYXNrID0gMSA8PCB0aGlzLmNvbGxpc2lvbkdyb3VwO1xuICAgICAgICBpZiAodGhpcy5oYW5kZWRuZXNzID09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0Q29tcCA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGlmICghaW5wdXRDb21wKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdjdXJzb3IgY29tcG9uZW50IG9uIG9iamVjdCcsIHRoaXMub2JqZWN0Lm5hbWUsICd3YXMgY29uZmlndXJlZCB3aXRoIGhhbmRlZG5lc3MgXCJpbnB1dCBjb21wb25lbnRcIiwgJyArXG4gICAgICAgICAgICAgICAgICAgICdidXQgb2JqZWN0IGhhcyBubyBpbnB1dCBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRlZG5lc3MgPSBpbnB1dENvbXAuaGFuZGVkbmVzcyB8fCAnbm9uZSc7XG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dENvbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRlZG5lc3MgPSBbJ2xlZnQnLCAncmlnaHQnLCAnbm9uZSddW3RoaXMuaGFuZGVkbmVzcyAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXdDb21wb25lbnQgPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoVmlld0NvbXBvbmVudCk7XG4gICAgICAgIGlmICh0aGlzLnVzZVdlYlhSSGl0VGVzdCkge1xuICAgICAgICAgICAgdGhpcy5faGl0VGVzdE9iamVjdCA9IHRoaXMuZW5naW5lLnNjZW5lLmFkZE9iamVjdCh0aGlzLm9iamVjdCk7XG4gICAgICAgICAgICB0aGlzLl9oaXRUZXN0TG9jYXRpb24gPVxuICAgICAgICAgICAgICAgIHRoaXMuX2hpdFRlc3RPYmplY3QuYWRkQ29tcG9uZW50KEhpdFRlc3RMb2NhdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICBzY2FsZU9iamVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSkgPz8gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vblNlc3Npb25TdGFydENhbGxiYWNrID0gdGhpcy5zZXR1cFZSRXZlbnRzLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQuYWRkKHRoaXMuX29uU2Vzc2lvblN0YXJ0Q2FsbGJhY2spO1xuICAgICAgICB0aGlzLmVuZ2luZS5vblJlc2l6ZS5hZGQodGhpcy5fb25WaWV3cG9ydFJlc2l6ZSk7XG4gICAgICAgIHRoaXMuX3NldEN1cnNvclZpc2liaWxpdHkodHJ1ZSk7XG4gICAgICAgIC8qIElmIHRoaXMgb2JqZWN0IGFsc28gaGFzIGEgdmlldyBjb21wb25lbnQsIHdlIHdpbGwgZW5hYmxlIGludmVyc2UtcHJvamVjdGVkIG1vdXNlIGNsaWNrcyxcbiAgICAgICAgICogb3RoZXJ3aXNlIGp1c3QgdXNlIHRoZSBvYmplY3RzIHRyYW5zZm9ybWF0aW9uICovXG4gICAgICAgIGlmICh0aGlzLl92aWV3Q29tcG9uZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuZW5naW5lLmNhbnZhcztcbiAgICAgICAgICAgIGNvbnN0IG9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlck1vdmUgPSB0aGlzLm9uUG9pbnRlck1vdmUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlckRvd24gPSB0aGlzLm9uUG9pbnRlckRvd24uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGNvbnN0IG9uUG9pbnRlclVwID0gdGhpcy5vblBvaW50ZXJVcC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7XG4gICAgICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvblBvaW50ZXJNb3ZlKTtcbiAgICAgICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uUG9pbnRlckRvd24pO1xuICAgICAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uUG9pbnRlclVwKTtcbiAgICAgICAgICAgIHRoaXMuX29uRGVhY3RpdmF0ZUNhbGxiYWNrcy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrKTtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvblBvaW50ZXJNb3ZlKTtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBvblBvaW50ZXJEb3duKTtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgb25Qb2ludGVyVXApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb25WaWV3cG9ydFJlc2l6ZSgpO1xuICAgIH1cbiAgICBfc2V0Q3Vyc29yUmF5VHJhbnNmb3JtKGhpdFBvc2l0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5jdXJzb3JSYXlPYmplY3QpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGRpc3QgPSB2ZWMzLmRpc3QodGhpcy5fb3JpZ2luLCBoaXRQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuY3Vyc29yUmF5T2JqZWN0LnNldFRyYW5zbGF0aW9uTG9jYWwoWzAuMCwgMC4wLCAtZGlzdCAvIDJdKTtcbiAgICAgICAgaWYgKHRoaXMuY3Vyc29yUmF5U2NhbGluZ0F4aXMgIT0gNCkge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JSYXlPYmplY3QucmVzZXRTY2FsaW5nKCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JSYXlTY2FsZVt0aGlzLmN1cnNvclJheVNjYWxpbmdBeGlzXSA9IGRpc3QgLyAyO1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JSYXlPYmplY3Quc2NhbGUodGhpcy5fY3Vyc29yUmF5U2NhbGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zZXRDdXJzb3JWaXNpYmlsaXR5KHZpc2libGUpIHtcbiAgICAgICAgaWYgKHRoaXMudmlzaWJsZSA9PSB2aXNpYmxlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICBpZiAoIXRoaXMuY3Vyc29yT2JqZWN0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5jdXJzb3JPYmplY3Quc2V0U2NhbGluZ1dvcmxkKHRoaXMuX2N1cnNvck9ialNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yT2JqZWN0LmdldFNjYWxpbmdMb2NhbCh0aGlzLl9jdXJzb3JPYmpTY2FsZSk7XG4gICAgICAgICAgICB0aGlzLmN1cnNvck9iamVjdC5zY2FsZShbMCwgMCwgMF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgLyogSWYgaW4gVlIsIHNldCB0aGUgY3Vyc29yIHJheSBiYXNlZCBvbiBvYmplY3QgdHJhbnNmb3JtICovXG4gICAgICAgIC8qIFNpbmNlIEdvb2dsZSBDYXJkYm9hcmQgdGFwIGlzIHJlZ2lzdGVyZWQgYXMgYXJUb3VjaERvd24gd2l0aG91dCBhIGdhbWVwYWQsIHdlIG5lZWQgdG8gY2hlY2sgZm9yIGdhbWVwYWQgcHJlc2VuY2UgKi9cbiAgICAgICAgaWYgKHRoaXMuZW5naW5lLnhyICYmXG4gICAgICAgICAgICB0aGlzLl9hclRvdWNoRG93biAmJlxuICAgICAgICAgICAgdGhpcy5faW5wdXQgJiZcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLnhyLnNlc3Npb24uaW5wdXRTb3VyY2VzWzBdLmhhbmRlZG5lc3MgPT09ICdub25lJyAmJlxuICAgICAgICAgICAgdGhpcy5lbmdpbmUueHIuc2Vzc2lvbi5pbnB1dFNvdXJjZXNbMF0uZ2FtZXBhZCkge1xuICAgICAgICAgICAgLyogV2ViWFIgQVIgaW5wdXQgKi9cbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLmVuZ2luZS54ci5zZXNzaW9uLmlucHV0U291cmNlc1swXS5nYW1lcGFkLmF4ZXM7XG4gICAgICAgICAgICAvKiBTY3JlZW5zcGFjZSBZIGlzIGludmVydGVkICovXG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb25bMF0gPSBwWzBdO1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uWzFdID0gLXBbMV07XG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb25bMl0gPSAtMS4wO1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybUFuZFByb2plY3REaXJlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmVuZ2luZS54ciAmJiB0aGlzLl9pbnB1dCAmJiB0aGlzLl9pbnB1dC54cklucHV0U291cmNlKSB7XG4gICAgICAgICAgICAvKiBXZWJYUiBWUiBpbnB1dCAqL1xuICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uWzBdID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvblsxXSA9IDA7XG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb25bMl0gPSAtMS4wO1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybVRvRGlyZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdmlld0NvbXBvbmVudCkge1xuICAgICAgICAgICAgLyogQXBwbHkgcG90ZW50aWFsbHkgY2hhbmdlZCB0cmFuc2Zvcm0gdG8gbGFzdCBzdG9yZWQgcG9pbnRlclxuICAgICAgICAgICAgICogcG9zaXRpb24gKi9cbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGlyZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYXlDYXN0KG51bGwsIHRoaXMuZW5naW5lLnhyPy5mcmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmN1cnNvck9iamVjdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJpbmdPYmplY3QgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5jdXJzb3JQb3NbMF0gIT0gMCB8fCB0aGlzLmN1cnNvclBvc1sxXSAhPSAwIHx8IHRoaXMuY3Vyc29yUG9zWzJdICE9IDApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yVmlzaWJpbGl0eSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvck9iamVjdC5zZXRUcmFuc2xhdGlvbldvcmxkKHRoaXMuY3Vyc29yUG9zKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRDdXJzb3JSYXlUcmFuc2Zvcm0odGhpcy5jdXJzb3JQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0Q3Vyc29yVmlzaWJpbGl0eShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyogUmV0dXJucyB0aGUgaG92ZXJlZCBjdXJzb3IgdGFyZ2V0LCBpZiBhdmFpbGFibGUgKi9cbiAgICBub3RpZnkoZXZlbnQsIG9yaWdpbmFsRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5ob3ZlcmluZ09iamVjdDtcbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgY29uc3QgY3Vyc29yVGFyZ2V0ID0gdGhpcy5ob3ZlcmluZ09iamVjdFRhcmdldDtcbiAgICAgICAgICAgIGlmIChjdXJzb3JUYXJnZXQpXG4gICAgICAgICAgICAgICAgY3Vyc29yVGFyZ2V0W2V2ZW50XS5ub3RpZnkodGFyZ2V0LCB0aGlzLCBvcmlnaW5hbEV2ZW50ID8/IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbFRhcmdldFtldmVudF0ubm90aWZ5KHRhcmdldCwgdGhpcywgb3JpZ2luYWxFdmVudCA/PyB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhvdmVyQmVoYXZpb3VyKHJheUhpdCwgaGl0VGVzdFJlc3VsdCwgZG9DbGljaywgb3JpZ2luYWxFdmVudCkge1xuICAgICAgICAvKiBPbGQgQVBJIHZlcnNpb24gZG9lcyBub3QgcmV0dXJuIG51bGwgZm9yIG9iamVjdHNbMF0gaWYgbm8gaGl0ICovXG4gICAgICAgIGNvbnN0IGhpdCA9ICF0aGlzLmhvdmVyaW5nUmVhbGl0eSAmJiByYXlIaXQuaGl0Q291bnQgPiAwID8gcmF5SGl0Lm9iamVjdHNbMF0gOiBudWxsO1xuICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaG92ZXJpbmdPYmplY3QgfHwgIXRoaXMuaG92ZXJpbmdPYmplY3QuZXF1YWxzKGhpdCkpIHtcbiAgICAgICAgICAgICAgICAvKiBVbmhvdmVyIHByZXZpb3VzLCBpZiBleGlzdHMgKi9cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ob3ZlcmluZ09iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeSgnb25VbmhvdmVyJywgb3JpZ2luYWxFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8qIEhvdmVyIG5ldyBvYmplY3QgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVyaW5nT2JqZWN0ID0gaGl0O1xuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJpbmdPYmplY3RUYXJnZXQgPSB0aGlzLmhvdmVyaW5nT2JqZWN0LmdldENvbXBvbmVudChDdXJzb3JUYXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0eWxlQ3Vyc29yKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZ2luZS5jYW52YXMuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KCdvbkhvdmVyJywgb3JpZ2luYWxFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3ZlcmluZ09iamVjdCkge1xuICAgICAgICAgICAgLyogUHJldmlvdXNseSBob3ZlcmluZyBvYmplY3QsIG5vdyBob3ZlcmluZyBub3RoaW5nICovXG4gICAgICAgICAgICB0aGlzLm5vdGlmeSgnb25VbmhvdmVyJywgb3JpZ2luYWxFdmVudCk7XG4gICAgICAgICAgICB0aGlzLmhvdmVyaW5nT2JqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaG92ZXJpbmdPYmplY3RUYXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3R5bGVDdXJzb3IpXG4gICAgICAgICAgICAgICAgdGhpcy5lbmdpbmUuY2FudmFzLnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ob3ZlcmluZ09iamVjdCkge1xuICAgICAgICAgICAgLyogb25Eb3duL29uVXAgZm9yIG9iamVjdCAqL1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzRG93biAhPT0gdGhpcy5fbGFzdElzRG93bikge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHRoaXMuX2lzRG93biA/ICdvbkRvd24nIDogJ29uVXAnLCBvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIG9uQ2xpY2sgZm9yIG9iamVjdCAqL1xuICAgICAgICAgICAgaWYgKGRvQ2xpY2spXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ29uQ2xpY2snLCBvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhvdmVyaW5nUmVhbGl0eSkge1xuICAgICAgICAgICAgLyogb25Eb3duL29uVXAgZm9yIGhpdCB0ZXN0ICovXG4gICAgICAgICAgICBpZiAodGhpcy5faXNEb3duICE9PSB0aGlzLl9sYXN0SXNEb3duKSB7XG4gICAgICAgICAgICAgICAgKHRoaXMuX2lzRG93biA/IHRoaXMuaGl0VGVzdFRhcmdldC5vbkRvd24gOiB0aGlzLmhpdFRlc3RUYXJnZXQub25VcCkubm90aWZ5KGhpdFRlc3RSZXN1bHQsIHRoaXMsIG9yaWdpbmFsRXZlbnQgPz8gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIG9uQ2xpY2sgZm9yIGhpdCB0ZXN0ICovXG4gICAgICAgICAgICBpZiAoZG9DbGljaylcbiAgICAgICAgICAgICAgICB0aGlzLmhpdFRlc3RUYXJnZXQub25DbGljay5ub3RpZnkoaGl0VGVzdFJlc3VsdCwgdGhpcywgb3JpZ2luYWxFdmVudCA/PyB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8qIG9uTW92ZSAqL1xuICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ob3ZlcmluZ09iamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJpbmdPYmplY3QudHJhbnNmb3JtUG9pbnRJbnZlcnNlV29ybGQodGVtcFZlYywgdGhpcy5jdXJzb3JQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGVtcFZlYy5zZXQodGhpcy5jdXJzb3JQb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF2ZWMzLmVxdWFscyh0aGlzLl9sYXN0Q3Vyc29yUG9zT25UYXJnZXQsIHRlbXBWZWMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ29uTW92ZScsIG9yaWdpbmFsRXZlbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RDdXJzb3JQb3NPblRhcmdldC5zZXQodGVtcFZlYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5ob3ZlcmluZ1JlYWxpdHkpIHtcbiAgICAgICAgICAgIGlmICghdmVjMy5lcXVhbHModGhpcy5fbGFzdEN1cnNvclBvc09uVGFyZ2V0LCB0aGlzLmN1cnNvclBvcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpdFRlc3RUYXJnZXQub25Nb3ZlLm5vdGlmeShoaXRUZXN0UmVzdWx0LCB0aGlzLCBvcmlnaW5hbEV2ZW50ID8/IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdEN1cnNvclBvc09uVGFyZ2V0LnNldCh0aGlzLmN1cnNvclBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0Q3Vyc29yUG9zT25UYXJnZXQuc2V0KHRoaXMuY3Vyc29yUG9zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0SXNEb3duID0gdGhpcy5faXNEb3duO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXR1cCBldmVudCBsaXN0ZW5lcnMgb24gc2Vzc2lvbiBvYmplY3RcbiAgICAgKiBAcGFyYW0gcyBXZWJYUiBzZXNzaW9uXG4gICAgICpcbiAgICAgKiBTZXRzIHVwICdzZWxlY3QnIGFuZCAnZW5kJyBldmVudHMuXG4gICAgICovXG4gICAgc2V0dXBWUkV2ZW50cyhzKSB7XG4gICAgICAgIGlmICghcylcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3NldHVwVlJFdmVudHMgY2FsbGVkIHdpdGhvdXQgYSB2YWxpZCBzZXNzaW9uJyk7XG4gICAgICAgIC8qIElmIGluIFZSLCBvbmUtdGltZSBiaW5kIHRoZSBsaXN0ZW5lciAqL1xuICAgICAgICBjb25zdCBvblNlbGVjdCA9IHRoaXMub25TZWxlY3QuYmluZCh0aGlzKTtcbiAgICAgICAgcy5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3QnLCBvblNlbGVjdCk7XG4gICAgICAgIGNvbnN0IG9uU2VsZWN0U3RhcnQgPSB0aGlzLm9uU2VsZWN0U3RhcnQuYmluZCh0aGlzKTtcbiAgICAgICAgcy5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIG9uU2VsZWN0U3RhcnQpO1xuICAgICAgICBjb25zdCBvblNlbGVjdEVuZCA9IHRoaXMub25TZWxlY3RFbmQuYmluZCh0aGlzKTtcbiAgICAgICAgcy5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RlbmQnLCBvblNlbGVjdEVuZCk7XG4gICAgICAgIHRoaXMuX29uRGVhY3RpdmF0ZUNhbGxiYWNrcy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5lbmdpbmUueHJTZXNzaW9uKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHMucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2VsZWN0Jywgb25TZWxlY3QpO1xuICAgICAgICAgICAgcy5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIG9uU2VsZWN0U3RhcnQpO1xuICAgICAgICAgICAgcy5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RlbmQnLCBvblNlbGVjdEVuZCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiBBZnRlciBBUiBzZXNzaW9uIHdhcyBlbnRlcmVkLCB0aGUgcHJvamVjdGlvbiBtYXRyaXggY2hhbmdlZCAqL1xuICAgICAgICB0aGlzLl9vblZpZXdwb3J0UmVzaXplKCk7XG4gICAgfVxuICAgIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5yZW1vdmUodGhpcy5fb25TZXNzaW9uU3RhcnRDYWxsYmFjayk7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uUmVzaXplLnJlbW92ZSh0aGlzLl9vblZpZXdwb3J0UmVzaXplKTtcbiAgICAgICAgdGhpcy5fc2V0Q3Vyc29yVmlzaWJpbGl0eShmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLmhvdmVyaW5nT2JqZWN0KVxuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ29uVW5ob3ZlcicsIG51bGwpO1xuICAgICAgICBpZiAodGhpcy5jdXJzb3JSYXlPYmplY3QpXG4gICAgICAgICAgICB0aGlzLmN1cnNvclJheU9iamVjdC5zY2FsZShbMCwgMCwgMF0pO1xuICAgICAgICAvKiBFbnN1cmUgYWxsIGV2ZW50IGxpc3RlbmVycyBhcmUgcmVtb3ZlZCAqL1xuICAgICAgICBmb3IgKGNvbnN0IGYgb2YgdGhpcy5fb25EZWFjdGl2YXRlQ2FsbGJhY2tzKVxuICAgICAgICAgICAgZigpO1xuICAgICAgICB0aGlzLl9vbkRlYWN0aXZhdGVDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgb25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9oaXRUZXN0T2JqZWN0Py5kZXN0cm95KCk7XG4gICAgfVxuICAgIC8qKiAnc2VsZWN0JyBldmVudCBsaXN0ZW5lciAqL1xuICAgIG9uU2VsZWN0KGUpIHtcbiAgICAgICAgaWYgKGUuaW5wdXRTb3VyY2UuaGFuZGVkbmVzcyAhPSB0aGlzLmhhbmRlZG5lc3MpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMucmF5Q2FzdChlLCBlLmZyYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqICdzZWxlY3RzdGFydCcgZXZlbnQgbGlzdGVuZXIgKi9cbiAgICBvblNlbGVjdFN0YXJ0KGUpIHtcbiAgICAgICAgdGhpcy5fYXJUb3VjaERvd24gPSB0cnVlO1xuICAgICAgICBpZiAoZS5pbnB1dFNvdXJjZS5oYW5kZWRuZXNzID09IHRoaXMuaGFuZGVkbmVzcykge1xuICAgICAgICAgICAgdGhpcy5faXNEb3duID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucmF5Q2FzdChlLCBlLmZyYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogJ3NlbGVjdGVuZCcgZXZlbnQgbGlzdGVuZXIgKi9cbiAgICBvblNlbGVjdEVuZChlKSB7XG4gICAgICAgIHRoaXMuX2FyVG91Y2hEb3duID0gZmFsc2U7XG4gICAgICAgIGlmIChlLmlucHV0U291cmNlLmhhbmRlZG5lc3MgPT0gdGhpcy5oYW5kZWRuZXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0Rvd24gPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmF5Q2FzdChlLCBlLmZyYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogJ3BvaW50ZXJtb3ZlJyBldmVudCBsaXN0ZW5lciAqL1xuICAgIG9uUG9pbnRlck1vdmUoZSkge1xuICAgICAgICAvKiBEb24ndCBjYXJlIGFib3V0IHNlY29uZGFyeSBwb2ludGVycyAqL1xuICAgICAgICBpZiAoIWUuaXNQcmltYXJ5KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLnVwZGF0ZU1vdXNlUG9zKGUpO1xuICAgICAgICB0aGlzLnJheUNhc3QoZSwgbnVsbCk7XG4gICAgfVxuICAgIC8qKiAnY2xpY2snIGV2ZW50IGxpc3RlbmVyICovXG4gICAgb25DbGljayhlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VQb3MoZSk7XG4gICAgICAgIHRoaXMucmF5Q2FzdChlLCBudWxsLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqICdwb2ludGVyZG93bicgZXZlbnQgbGlzdGVuZXIgKi9cbiAgICBvblBvaW50ZXJEb3duKGUpIHtcbiAgICAgICAgLyogRG9uJ3QgY2FyZSBhYm91dCBzZWNvbmRhcnkgcG9pbnRlcnMgb3Igbm9uLWxlZnQgY2xpY2tzICovXG4gICAgICAgIGlmICghZS5pc1ByaW1hcnkgfHwgZS5idXR0b24gIT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VQb3MoZSk7XG4gICAgICAgIHRoaXMuX2lzRG93biA9IHRydWU7XG4gICAgICAgIHRoaXMucmF5Q2FzdChlKTtcbiAgICB9XG4gICAgLyoqICdwb2ludGVydXAnIGV2ZW50IGxpc3RlbmVyICovXG4gICAgb25Qb2ludGVyVXAoZSkge1xuICAgICAgICAvKiBEb24ndCBjYXJlIGFib3V0IHNlY29uZGFyeSBwb2ludGVycyBvciBub24tbGVmdCBjbGlja3MgKi9cbiAgICAgICAgaWYgKCFlLmlzUHJpbWFyeSB8fCBlLmJ1dHRvbiAhPT0gMClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy51cGRhdGVNb3VzZVBvcyhlKTtcbiAgICAgICAgdGhpcy5faXNEb3duID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmF5Q2FzdChlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIG1vdXNlIHBvc2l0aW9uIGluIG5vbi1WUiBtb2RlIGFuZCByYXljYXN0IGZvciBuZXcgcG9zaXRpb25cbiAgICAgKiBAcmV0dXJucyBAcmVmIFdMLlJheUhpdCBmb3IgbmV3IHBvc2l0aW9uLlxuICAgICAqL1xuICAgIHVwZGF0ZU1vdXNlUG9zKGUpIHtcbiAgICAgICAgdGhpcy5fbGFzdFBvaW50ZXJQb3NbMF0gPSBlLmNsaWVudFg7XG4gICAgICAgIHRoaXMuX2xhc3RQb2ludGVyUG9zWzFdID0gZS5jbGllbnRZO1xuICAgICAgICB0aGlzLnVwZGF0ZURpcmVjdGlvbigpO1xuICAgIH1cbiAgICB1cGRhdGVEaXJlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IHRoaXMuZW5naW5lLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgLyogR2V0IGRpcmVjdGlvbiBpbiBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlIHNwYWNlIGZyb20gbW91c2UgcG9zaXRpb24gKi9cbiAgICAgICAgY29uc3QgbGVmdCA9IHRoaXMuX2xhc3RQb2ludGVyUG9zWzBdIC8gYm91bmRzLndpZHRoO1xuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLl9sYXN0UG9pbnRlclBvc1sxXSAvIGJvdW5kcy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuX2RpcmVjdGlvblswXSA9IGxlZnQgKiAyIC0gMTtcbiAgICAgICAgdGhpcy5fZGlyZWN0aW9uWzFdID0gLXRvcCAqIDIgKyAxO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb25bMl0gPSAtMS4wO1xuICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3JtQW5kUHJvamVjdERpcmVjdGlvbigpO1xuICAgIH1cbiAgICBhcHBseVRyYW5zZm9ybUFuZFByb2plY3REaXJlY3Rpb24oKSB7XG4gICAgICAgIC8qIFJldmVyc2UtcHJvamVjdCB0aGUgZGlyZWN0aW9uIGludG8gdmlldyBzcGFjZSAqL1xuICAgICAgICB2ZWMzLnRyYW5zZm9ybU1hdDQodGhpcy5fZGlyZWN0aW9uLCB0aGlzLl9kaXJlY3Rpb24sIHRoaXMuX3Byb2plY3Rpb25NYXRyaXgpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZSh0aGlzLl9kaXJlY3Rpb24sIHRoaXMuX2RpcmVjdGlvbik7XG4gICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1Ub0RpcmVjdGlvbigpO1xuICAgIH1cbiAgICBhcHBseVRyYW5zZm9ybVRvRGlyZWN0aW9uKCkge1xuICAgICAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5fZGlyZWN0aW9uLCB0aGlzLl9kaXJlY3Rpb24sIHRoaXMub2JqZWN0LnRyYW5zZm9ybVdvcmxkKTtcbiAgICAgICAgdGhpcy5vYmplY3QuZ2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLl9vcmlnaW4pO1xuICAgIH1cbiAgICByYXlDYXN0KG9yaWdpbmFsRXZlbnQsIGZyYW1lID0gbnVsbCwgZG9DbGljayA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHJheUhpdCA9IHRoaXMucmF5Q2FzdE1vZGUgPT0gMFxuICAgICAgICAgICAgPyB0aGlzLmVuZ2luZS5zY2VuZS5yYXlDYXN0KHRoaXMuX29yaWdpbiwgdGhpcy5fZGlyZWN0aW9uLCB0aGlzLl9jb2xsaXNpb25NYXNrKVxuICAgICAgICAgICAgOiB0aGlzLmVuZ2luZS5waHlzaWNzLnJheUNhc3QodGhpcy5fb3JpZ2luLCB0aGlzLl9kaXJlY3Rpb24sIHRoaXMuX2NvbGxpc2lvbk1hc2ssIHRoaXMubWF4RGlzdGFuY2UpO1xuICAgICAgICBsZXQgaGl0UmVzdWx0RGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgICAgICAgbGV0IGhpdFRlc3RSZXN1bHQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5faGl0VGVzdExvY2F0aW9uPy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9oaXRUZXN0T2JqZWN0LmdldFRyYW5zbGF0aW9uV29ybGQodGhpcy5jdXJzb3JQb3MpO1xuICAgICAgICAgICAgaGl0UmVzdWx0RGlzdGFuY2UgPSB2ZWMzLmRpc3RhbmNlKHRoaXMub2JqZWN0LmdldFRyYW5zbGF0aW9uV29ybGQodGVtcFZlYyksIHRoaXMuY3Vyc29yUG9zKTtcbiAgICAgICAgICAgIGhpdFRlc3RSZXN1bHQgPSB0aGlzLl9oaXRUZXN0TG9jYXRpb24/LmdldEhpdFRlc3RSZXN1bHRzKGZyYW1lKVswXTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaG92ZXJpbmdSZWFsaXR5ID0gZmFsc2U7XG4gICAgICAgIGlmIChyYXlIaXQuaGl0Q291bnQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBkID0gcmF5SGl0LmRpc3RhbmNlc1swXTtcbiAgICAgICAgICAgIGlmIChoaXRSZXN1bHREaXN0YW5jZSA+PSBkKSB7XG4gICAgICAgICAgICAgICAgLyogT3ZlcnJpZGUgY3Vyc29yUG9zIHNldCBieSBoaXQgdGVzdCBsb2NhdGlvbiAqL1xuICAgICAgICAgICAgICAgIHRoaXMuY3Vyc29yUG9zLnNldChyYXlIaXQubG9jYXRpb25zWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvdmVyaW5nUmVhbGl0eSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGl0UmVzdWx0RGlzdGFuY2UgPCBJbmZpbml0eSkge1xuICAgICAgICAgICAgLyogY3Vyc29yUG9zIGFscmVhZHkgc2V0ICovXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvclBvcy5maWxsKDApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChob3ZlcmluZ1JlYWxpdHkgJiYgIXRoaXMuaG92ZXJpbmdSZWFsaXR5KSB7XG4gICAgICAgICAgICB0aGlzLmhpdFRlc3RUYXJnZXQub25Ib3Zlci5ub3RpZnkoaGl0VGVzdFJlc3VsdCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWhvdmVyaW5nUmVhbGl0eSAmJiB0aGlzLmhvdmVyaW5nUmVhbGl0eSkge1xuICAgICAgICAgICAgdGhpcy5oaXRUZXN0VGFyZ2V0Lm9uVW5ob3Zlci5ub3RpZnkoaGl0VGVzdFJlc3VsdCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ob3ZlcmluZ1JlYWxpdHkgPSBob3ZlcmluZ1JlYWxpdHk7XG4gICAgICAgIHRoaXMuaG92ZXJCZWhhdmlvdXIocmF5SGl0LCBoaXRUZXN0UmVzdWx0LCBkb0NsaWNrLCBvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgcmV0dXJuIHJheUhpdDtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eS5pbnQoMSlcbl0sIEN1cnNvci5wcm90b3R5cGUsIFwiY29sbGlzaW9uR3JvdXBcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5Lm9iamVjdCgpXG5dLCBDdXJzb3IucHJvdG90eXBlLCBcImN1cnNvclJheU9iamVjdFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuZW51bShbJ3gnLCAneScsICd6JywgJ25vbmUnXSwgJ3onKVxuXSwgQ3Vyc29yLnByb3RvdHlwZSwgXCJjdXJzb3JSYXlTY2FsaW5nQXhpc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkub2JqZWN0KClcbl0sIEN1cnNvci5wcm90b3R5cGUsIFwiY3Vyc29yT2JqZWN0XCIsIHZvaWQgMCk7XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eS5lbnVtKFsnaW5wdXQgY29tcG9uZW50JywgJ2xlZnQnLCAncmlnaHQnLCAnbm9uZSddLCAnaW5wdXQgY29tcG9uZW50Jylcbl0sIEN1cnNvci5wcm90b3R5cGUsIFwiaGFuZGVkbmVzc1wiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuZW51bShbJ2NvbGxpc2lvbicsICdwaHlzeCddLCAnY29sbGlzaW9uJylcbl0sIEN1cnNvci5wcm90b3R5cGUsIFwicmF5Q2FzdE1vZGVcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmJvb2wodHJ1ZSlcbl0sIEN1cnNvci5wcm90b3R5cGUsIFwic3R5bGVDdXJzb3JcIiwgdm9pZCAwKTtcbl9fZGVjb3JhdGUoW1xuICAgIHByb3BlcnR5LmJvb2woZmFsc2UpXG5dLCBDdXJzb3IucHJvdG90eXBlLCBcInVzZVdlYlhSSGl0VGVzdFwiLCB2b2lkIDApO1xuZXhwb3J0IHsgQ3Vyc29yIH07XG4iLCAidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgcXVhdDIgfSBmcm9tICdnbC1tYXRyaXgnO1xuLyoqXG4gKiBQcmludHMgc29tZSBsaW1pdGVkIGRlYnVnIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QuXG4gKlxuICogSW5mb3JtYXRpb24gY29uc2lzdHMgb2Y6IFRoaXMgb2JqZWN0J3MgbmFtZSwgYW4gb2JqZWN0IHBhcmFtZXRlcidzIG5hbWUsXG4gKiB0aGUgb2JqZWN0J3Mgd29ybGQgdHJhbnNsYXRpb24sIHdvcmxkIHRyYW5zZm9ybSBhbmQgbG9jYWwgdHJhbnNmb3JtLlxuICpcbiAqIE1haW5seSB1c2VkIGJ5IGVuZ2luZSBkZXZlbG9wZXJzIGZvciBkZWJ1ZyBwdXJwb3NlcyBvciBhcyBleGFtcGxlIGNvZGUuXG4gKi9cbmNsYXNzIERlYnVnT2JqZWN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAnZGVidWctb2JqZWN0JztcbiAgICAvKiogQSBzZWNvbmQgb2JqZWN0IHRvIHByaW50IHRoZSBuYW1lIG9mICovXG4gICAgb2JqID0gbnVsbDtcbiAgICBzdGFydCgpIHtcbiAgICAgICAgbGV0IG9yaWdpbiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIHF1YXQyLmdldFRyYW5zbGF0aW9uKG9yaWdpbiwgdGhpcy5vYmplY3QudHJhbnNmb3JtV29ybGQpO1xuICAgICAgICBjb25zb2xlLmxvZygnRGVidWcgb2JqZWN0OicsIHRoaXMub2JqZWN0Lm5hbWUpO1xuICAgICAgICBjb25zb2xlLmxvZygnT3RoZXIgb2JqZWN0OicsIHRoaXMub2JqPy5uYW1lKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1xcdHRyYW5zbGF0aW9uJywgb3JpZ2luKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1xcdHRyYW5zZm9ybVdvcmxkJywgdGhpcy5vYmplY3QudHJhbnNmb3JtV29ybGQpO1xuICAgICAgICBjb25zb2xlLmxvZygnXFx0dHJhbnNmb3JtTG9jYWwnLCB0aGlzLm9iamVjdC50cmFuc2Zvcm1Mb2NhbCk7XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkub2JqZWN0KClcbl0sIERlYnVnT2JqZWN0LnByb3RvdHlwZSwgXCJvYmpcIiwgdm9pZCAwKTtcbmV4cG9ydCB7IERlYnVnT2JqZWN0IH07XG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbi8qKlxuICogRnVuY3Rpb24gdG8gY29udmVydCBhIEV1bGVyIGluIFlYWiBvcmRlciB0byBhIHF1YXRlcm5pb25cbiAqL1xuZnVuY3Rpb24gcXVhdEZyb21FdWxlcllYWihvdXQsIHgsIHksIHopIHtcbiAgICBjb25zdCBjMSA9IE1hdGguY29zKHggLyAyKTtcbiAgICBjb25zdCBjMiA9IE1hdGguY29zKHkgLyAyKTtcbiAgICBjb25zdCBjMyA9IE1hdGguY29zKHogLyAyKTtcbiAgICBjb25zdCBzMSA9IE1hdGguc2luKHggLyAyKTtcbiAgICBjb25zdCBzMiA9IE1hdGguc2luKHkgLyAyKTtcbiAgICBjb25zdCBzMyA9IE1hdGguc2luKHogLyAyKTtcbiAgICBvdXRbMF0gPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG4gICAgb3V0WzFdID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgIG91dFsyXSA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcbiAgICBvdXRbM10gPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG59XG4vKipcbiAqIFJldHJpZXZlIGRldmljZSBvcmllbnRhdGlvbiBmcm9tIGEgbW9iaWxlIGRldmljZSBhbmQgc2V0IHRoZSBvYmplY3Qnc1xuICogb3JpZW50YXRpb24gYWNjb3JkaW5nbHkuXG4gKlxuICogVXNlZnVsIGZvciBtYWdpYyB3aW5kb3cgZXhwZXJpZW5jZXMuXG4gKi9cbmNsYXNzIERldmljZU9yaWVudGF0aW9uTG9vayBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ2RldmljZS1vcmllbnRhdGlvbi1sb29rJztcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHt9O1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLnJvdGF0aW9uWCA9IDA7XG4gICAgICAgIHRoaXMucm90YXRpb25ZID0gMDtcbiAgICAgICAgdGhpcy5sYXN0Q2xpZW50WCA9IC0xO1xuICAgICAgICB0aGlzLmxhc3RDbGllbnRZID0gLTE7XG4gICAgfVxuICAgIGluaXQoKSB7XG4gICAgICAgIC8qIEluaXRpYWxpemUgZGV2aWNlIG9yaWVudGF0aW9uIHdpdGggSWRlbnRpdHkgUXVhdGVybmlvbiAqL1xuICAgICAgICB0aGlzLmRldmljZU9yaWVudGF0aW9uID0gWzAsIDAsIDAsIDFdO1xuICAgICAgICB0aGlzLnNjcmVlbk9yaWVudGF0aW9uID0gd2luZG93LmlubmVySGVpZ2h0ID4gd2luZG93LmlubmVyV2lkdGggPyAwIDogOTA7XG4gICAgICAgIHRoaXMuX29yaWdpbiA9IFswLCAwLCAwXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZW9yaWVudGF0aW9uJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxldCBhbHBoYSA9IGUuYWxwaGEgfHwgMDtcbiAgICAgICAgICAgIGxldCBiZXRhID0gZS5iZXRhIHx8IDA7XG4gICAgICAgICAgICBsZXQgZ2FtbWEgPSBlLmdhbW1hIHx8IDA7XG4gICAgICAgICAgICBjb25zdCB0b1JhZCA9IE1hdGguUEkgLyAxODA7XG4gICAgICAgICAgICBxdWF0RnJvbUV1bGVyWVhaKHRoaXMuZGV2aWNlT3JpZW50YXRpb24sIGJldGEgKiB0b1JhZCwgYWxwaGEgKiB0b1JhZCwgLWdhbW1hICogdG9SYWQpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhpcy5zY3JlZW5PcmllbnRhdGlvbiA9IHdpbmRvdy5vcmllbnRhdGlvbiB8fCAwO1xuICAgICAgICB9LmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICAvKiBEb24ndCB1c2UgZGV2aWNlIG9yaWVudGF0aW9uIGluIFZSICovXG4gICAgICAgIGlmICh0aGlzLmVuZ2luZS54cilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5vYmplY3QuZ2V0VHJhbnNsYXRpb25Mb2NhbCh0aGlzLl9vcmlnaW4pO1xuICAgICAgICB0aGlzLm9iamVjdC5yZXNldFRyYW5zZm9ybSgpO1xuICAgICAgICBpZiAodGhpcy5zY3JlZW5PcmllbnRhdGlvbiAhPSAwKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdC5yb3RhdGVBeGlzQW5nbGVEZWcoWzAsIDAsIC0xXSwgdGhpcy5zY3JlZW5PcmllbnRhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYmplY3Qucm90YXRlKFstTWF0aC5zcXJ0KDAuNSksIDAsIDAsIE1hdGguc3FydCgwLjUpXSk7XG4gICAgICAgIHRoaXMub2JqZWN0LnJvdGF0ZSh0aGlzLmRldmljZU9yaWVudGF0aW9uKTtcbiAgICAgICAgdGhpcy5vYmplY3QudHJhbnNsYXRlKHRoaXMuX29yaWdpbik7XG4gICAgfVxufVxuZXhwb3J0IHsgRGV2aWNlT3JpZW50YXRpb25Mb29rIH07XG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbi8qKlxuICogRW5hYmxlcyBpbnRlcmFjdGlvbiB3aXRoIGN1cnNvci10YXJnZXRzIHRocm91Z2ggY29sbGlzaW9uIG92ZXJsYXBzLFxuICogZS5nLiBvbiB0aGUgdGlwIG9mIGEgZmluZ2VyIG9uIGEgdHJhY2tlZCBoYW5kLlxuICpcbiAqICoqUmVxdWlyZW1lbnRzOioqXG4gKiAgLSBBIGNvbGxpc2lvbiBjb21wb25lbnQgKHVzdWFsbHkgYSBzcGhlcmUgd2l0aCBgMC4wNWAgcmFkaXVzKSBvbiB0aGUgc2FtZSBvYmplY3RcbiAqXG4gKiBAc2luY2UgMC44LjVcbiAqL1xuY2xhc3MgRmluZ2VyQ3Vyc29yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAnZmluZ2VyLWN1cnNvcic7XG4gICAgc3RhdGljIFByb3BlcnRpZXMgPSB7fTtcbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLmxhc3RUYXJnZXQgPSBudWxsO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy50aXAgPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoJ2NvbGxpc2lvbicpO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IG92ZXJsYXBzID0gdGhpcy50aXAucXVlcnlPdmVybGFwcygpO1xuICAgICAgICBsZXQgb3ZlcmxhcEZvdW5kID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdmVybGFwcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgbyA9IG92ZXJsYXBzW2ldLm9iamVjdDtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG8uZ2V0Q29tcG9uZW50KCdjdXJzb3ItdGFyZ2V0Jyk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0YXJnZXQuZXF1YWxzKHRoaXMubGFzdFRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Lm9uSG92ZXIobywgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5vbkNsaWNrKG8sIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdmVybGFwRm91bmQgPSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvdmVybGFwRm91bmQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxhc3RUYXJnZXQpXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VGFyZ2V0Lm9uVW5ob3Zlcih0aGlzLmxhc3RUYXJnZXQub2JqZWN0LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMubGFzdFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RUYXJnZXQgPSBvdmVybGFwRm91bmQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgeyBGaW5nZXJDdXJzb3IgfTtcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIFR5cGUgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xuLyoqXG4gKiBBcHBsaWVzIFtmaXhlZCBmb3ZlYXRpb25dKGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJ4cmxheWVycy0xLyNkb20teHJjb21wb3NpdGlvbmxheWVyLWZpeGVkZm92ZWF0aW9uKVxuICogb25jZSBhIFdlYlhSIHNlc3Npb24gaXMgc3RhcnRlZFxuICpcbiAqIEZpeGVkIGZvdmVhdGlvbiByZWR1Y2VzIHNoYWRpbmcgY29zdCBhdCB0aGUgcGVyaXBoZXJ5IGJ5IHJlbmRlcmluZyBhdCBsb3dlciByZXNvbHV0aW9ucyBhdCB0aGVcbiAqIGVkZ2VzIG9mIHRoZSB1c2VycyB2aXNpb24uXG4gKi9cbmNsYXNzIEZpeGVkRm92ZWF0aW9uIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAnZml4ZWQtZm92ZWF0aW9uJztcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHtcbiAgICAgICAgLyoqIEFtb3VudCB0byBhcHBseSBmcm9tIDAgKG5vbmUpIHRvIDEgKGZ1bGwpICovXG4gICAgICAgIGZpeGVkRm92ZWF0aW9uOiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IDAuNSB9LFxuICAgIH07XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayA9IHRoaXMuc2V0Rml4ZWRGb3ZlYXRpb24uYmluZCh0aGlzKTtcbiAgICB9XG4gICAgb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5hZGQodGhpcy5vblNlc3Npb25TdGFydENhbGxiYWNrKTtcbiAgICB9XG4gICAgb25EZWFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvblN0YXJ0LnJlbW92ZSh0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2spO1xuICAgIH1cbiAgICBzZXRGaXhlZEZvdmVhdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUueHIuYmFzZUxheWVyLmZpeGVkRm92ZWF0aW9uID0gdGhpcy5maXhlZEZvdmVhdGlvbjtcbiAgICB9XG59XG5leHBvcnQgeyBGaXhlZEZvdmVhdGlvbiB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgTWVzaENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyB2ZWMzLCBxdWF0LCBxdWF0MiB9IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgeyBzZXRYUlJpZ2lkVHJhbnNmb3JtTG9jYWwgfSBmcm9tICcuL3V0aWxzL3dlYnhyLmpzJztcbmNvbnN0IE9SREVSRURfSk9JTlRTID0gW1xuICAgICd3cmlzdCcsXG4gICAgJ3RodW1iLW1ldGFjYXJwYWwnLFxuICAgICd0aHVtYi1waGFsYW54LXByb3hpbWFsJyxcbiAgICAndGh1bWItcGhhbGFueC1kaXN0YWwnLFxuICAgICd0aHVtYi10aXAnLFxuICAgICdpbmRleC1maW5nZXItbWV0YWNhcnBhbCcsXG4gICAgJ2luZGV4LWZpbmdlci1waGFsYW54LXByb3hpbWFsJyxcbiAgICAnaW5kZXgtZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlJyxcbiAgICAnaW5kZXgtZmluZ2VyLXBoYWxhbngtZGlzdGFsJyxcbiAgICAnaW5kZXgtZmluZ2VyLXRpcCcsXG4gICAgJ21pZGRsZS1maW5nZXItbWV0YWNhcnBhbCcsXG4gICAgJ21pZGRsZS1maW5nZXItcGhhbGFueC1wcm94aW1hbCcsXG4gICAgJ21pZGRsZS1maW5nZXItcGhhbGFueC1pbnRlcm1lZGlhdGUnLFxuICAgICdtaWRkbGUtZmluZ2VyLXBoYWxhbngtZGlzdGFsJyxcbiAgICAnbWlkZGxlLWZpbmdlci10aXAnLFxuICAgICdyaW5nLWZpbmdlci1tZXRhY2FycGFsJyxcbiAgICAncmluZy1maW5nZXItcGhhbGFueC1wcm94aW1hbCcsXG4gICAgJ3JpbmctZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlJyxcbiAgICAncmluZy1maW5nZXItcGhhbGFueC1kaXN0YWwnLFxuICAgICdyaW5nLWZpbmdlci10aXAnLFxuICAgICdwaW5reS1maW5nZXItbWV0YWNhcnBhbCcsXG4gICAgJ3Bpbmt5LWZpbmdlci1waGFsYW54LXByb3hpbWFsJyxcbiAgICAncGlua3ktZmluZ2VyLXBoYWxhbngtaW50ZXJtZWRpYXRlJyxcbiAgICAncGlua3ktZmluZ2VyLXBoYWxhbngtZGlzdGFsJyxcbiAgICAncGlua3ktZmluZ2VyLXRpcCcsXG5dO1xuY29uc3QgaW52VHJhbnNsYXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuY29uc3QgaW52Um90YXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuLyoqXG4gKiBFYXN5IGhhbmQgdHJhY2tpbmcgdGhyb3VnaCB0aGUgV2ViWFIgRGV2aWNlIEFQSVxuICogW1wiSGFuZCBJbnB1dFwiIEFQSV0oaHR0cHM6Ly9pbW1lcnNpdmUtd2ViLmdpdGh1Yi5pby93ZWJ4ci1oYW5kLWlucHV0LykuXG4gKlxuICogQWxsb3dzIGRpc3BsYXlpbmcgaGFuZHMgZWl0aGVyIGFzIHNwaGVyZS1qb2ludHMgb3Igc2tpbm5lZCBtZXNoLlxuICpcbiAqIFRvIHJlYWN0IHRvIGdyYWJiaW5nLCB1c2UgYHRoaXMuaXNHcmFiYmluZygpYC4gRm9yIG90aGVyIGdlc3R1cmVzLCByZWZlclxuICogdG8gYHRoaXMuam9pbnRzYCAtIGFuIGFycmF5IG9mIFtXTC5PYmplY3RdKC9qc2FwaS9vYmplY3QpIGFuZCB1c2UgdGhlIGpvaW50XG4gKiBpbmRpY2VzIGxpc3RlZCBbaW4gdGhlIFdlYlhSIEhhbmQgSW5wdXQgc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9pbW1lcnNpdmUtd2ViLmdpdGh1Yi5pby93ZWJ4ci1oYW5kLWlucHV0LyNza2VsZXRvbi1qb2ludHMtc2VjdGlvbikuXG4gKlxuICogSXQgaXMgb2Z0ZW4gZGVzaXJlZCB0byB1c2UgZWl0aGVyIGhhbmQgdHJhY2tpbmcgb3IgY29udHJvbGxlcnMsIG5vdCBib3RoLlxuICogVGhpcyBjb21wb25lbnQgcHJvdmlkZXMgYGRlYWN0aXZhdGVDaGlsZHJlbldpdGhvdXRQb3NlYCB0byBoaWRlIHRoZSBoYW5kXG4gKiB0cmFja2luZyB2aXN1YWxpemF0aW9uIGlmIG5vIHBvc2UgaXMgYXZhaWxhYmxlIGFuZCBgY29udHJvbGxlclRvRGVhY3RpdmF0ZWBcbiAqIGZvciBkaXNhYmxpbmcgYW5vdGhlciBvYmplY3Qgb25jZSBhIGhhbmQgdHJhY2tpbmcgcG9zZSAqaXMqIGF2YWlsYWJsZS5cbiAqIE91dHNpZGUgb2YgWFIgc2Vzc2lvbnMsIHRyYWNraW5nIG9yIGNvbnRyb2xsZXJzIGFyZSBuZWl0aGVyIGVuYWJsZWQgbm9yIGRpc2FibGVkXG4gKiB0byBwbGF5IHdlbGwgd2l0aCB0aGUgW3ZyLW1vZGUtYWN0aXZlLXN3aXRjaF0oI3ZyLW1vZGUtYWN0aXZlLXN3aXRjaCkgY29tcG9uZW50LlxuICpcbiAqICoqUmVxdWlyZW1lbnRzOioqXG4gKiAgLSBUbyB1c2UgaGFuZC10cmFja2luZywgZW5hYmxlIFwiam9pbnQgdHJhY2tpbmdcIiBpbiBgY2hyb21lOi8vZmxhZ3NgIG9uXG4gKiAgICBPY3VsdXMgQnJvd3NlciBmb3IgT2N1bHVzIFF1ZXN0L09jdWx1cyBRdWVzdCAyLlxuICpcbiAqIFNlZSBbSGFuZCBUcmFja2luZyBFeGFtcGxlXSgvc2hvd2Nhc2UvaGFuZC10cmFja2luZykuXG4gKi9cbmNsYXNzIEhhbmRUcmFja2luZyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ2hhbmQtdHJhY2tpbmcnO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogSGFuZGVkbmVzcyBkZXRlcm1pbmluZyB3aGV0aGVyIHRvIHJlY2VpdmUgdHJhY2tpbmcgaW5wdXQgZnJvbSByaWdodCBvciBsZWZ0IGhhbmQgKi9cbiAgICAgICAgaGFuZGVkbmVzczogeyB0eXBlOiBUeXBlLkVudW0sIGRlZmF1bHQ6ICdsZWZ0JywgdmFsdWVzOiBbJ2xlZnQnLCAncmlnaHQnXSB9LFxuICAgICAgICAvKiogKG9wdGlvbmFsKSBNZXNoIHRvIHVzZSB0byB2aXN1YWxpemUgam9pbnRzICovXG4gICAgICAgIGpvaW50TWVzaDogeyB0eXBlOiBUeXBlLk1lc2gsIGRlZmF1bHQ6IG51bGwgfSxcbiAgICAgICAgLyoqIE1hdGVyaWFsIHRvIHVzZSBmb3IgZGlzcGxheS4gQXBwbGllZCB0byBlaXRoZXIgdGhlIHNwYXduZWQgc2tpbm5lZCBtZXNoIG9yIHRoZSBqb2ludCBzcGhlcmVzLiAqL1xuICAgICAgICBqb2ludE1hdGVyaWFsOiB7IHR5cGU6IFR5cGUuTWF0ZXJpYWwsIGRlZmF1bHQ6IG51bGwgfSxcbiAgICAgICAgLyoqIChvcHRpb25hbCkgU2tpbiB0byBhcHBseSB0cmFja2VkIGpvaW50IHBvc2VzIHRvLiBJZiBub3QgcHJlc2VudCwgam9pbnQgc3BoZXJlcyB3aWxsIGJlIHVzZWQgZm9yIGRpc3BsYXkgaW5zdGVhZC4gKi9cbiAgICAgICAgaGFuZFNraW46IHsgdHlwZTogVHlwZS5Ta2luLCBkZWZhdWx0OiBudWxsIH0sXG4gICAgICAgIC8qKiBEZWFjdGl2YXRlIGNoaWxkcmVuIGlmIG5vIHBvc2Ugd2FzIHRyYWNrZWQgKi9cbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkcmVuV2l0aG91dFBvc2U6IHsgdHlwZTogVHlwZS5Cb29sLCBkZWZhdWx0OiB0cnVlIH0sXG4gICAgICAgIC8qKiBDb250cm9sbGVyIG9iamVjdHMgdG8gYWN0aXZhdGUgaW5jbHVkaW5nIGNoaWxkcmVuIGlmIG5vIHBvc2UgaXMgYXZhaWxhYmxlICovXG4gICAgICAgIGNvbnRyb2xsZXJUb0RlYWN0aXZhdGU6IHsgdHlwZTogVHlwZS5PYmplY3QgfSxcbiAgICB9O1xuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMuaGFuZGVkbmVzcyA9IFsnbGVmdCcsICdyaWdodCddW3RoaXMuaGFuZGVkbmVzc107XG4gICAgfVxuICAgIGpvaW50cyA9IHt9O1xuICAgIHNlc3Npb24gPSBudWxsO1xuICAgIC8qIFdoZXRoZXIgbGFzdCB1cGRhdGUgaGFkIGEgaGFuZCBwb3NlICovXG4gICAgaGFzUG9zZSA9IGZhbHNlO1xuICAgIF9jaGlsZHJlbkFjdGl2ZSA9IHRydWU7XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghKCdYUkhhbmQnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV2ViWFIgSGFuZCBUcmFja2luZyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci4nKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFuZFNraW4pIHtcbiAgICAgICAgICAgIGxldCBza2luID0gdGhpcy5oYW5kU2tpbjtcbiAgICAgICAgICAgIGxldCBqb2ludElkcyA9IHNraW4uam9pbnRJZHM7XG4gICAgICAgICAgICAvKiBNYXAgdGhlIHdyaXN0ICovXG4gICAgICAgICAgICB0aGlzLmpvaW50c1tPUkRFUkVEX0pPSU5UU1swXV0gPSB0aGlzLmVuZ2luZS53cmFwT2JqZWN0KGpvaW50SWRzWzBdKTtcbiAgICAgICAgICAgIC8qIEluZGV4IGluIE9SREVSRURfSk9JTlRTIHRoYXQgd2UgYXJlIG1hcHBpbmcgdG8gb3VyIGpvaW50cyAqL1xuICAgICAgICAgICAgLyogU2tpcCB0aHVtYjAgam9pbnQsIHN0YXJ0IGF0IHRodW1iMSAqL1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBqb2ludElkcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGxldCBqb2ludCA9IHRoaXMuZW5naW5lLndyYXBPYmplY3Qoam9pbnRJZHNbal0pO1xuICAgICAgICAgICAgICAgIC8qIHRpcCBqb2ludHMgYXJlIG9ubHkgbmVlZGVkIGZvciBqb2ludCByZW5kZXJpbmcsIHNvIHdlIHNraXAgdGhvc2Ugd2hpbGUgbWFwcGluZyAqL1xuICAgICAgICAgICAgICAgIHRoaXMuam9pbnRzW2pvaW50Lm5hbWVdID0gam9pbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKiBJZiB3ZSBoYXZlIGEgaGFuZCBza2luLCBubyBuZWVkIHRvIHNwYXduIHRoZSBqb2ludHMtYmFzZWQgb25lICovXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyogU3Bhd24gam9pbnRzICovXG4gICAgICAgIGNvbnN0IGpvaW50T2JqZWN0cyA9IHRoaXMuZW5naW5lLnNjZW5lLmFkZE9iamVjdHMoT1JERVJFRF9KT0lOVFMubGVuZ3RoLCB0aGlzLm9iamVjdC5wYXJlbnQsIE9SREVSRURfSk9JTlRTLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgT1JERVJFRF9KT0lOVFMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgIGxldCBqb2ludCA9IGpvaW50T2JqZWN0c1tqXTtcbiAgICAgICAgICAgIGpvaW50LmFkZENvbXBvbmVudChNZXNoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgbWVzaDogdGhpcy5qb2ludE1lc2gsXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWw6IHRoaXMuam9pbnRNYXRlcmlhbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5qb2ludHNbT1JERVJFRF9KT0lOVFNbal1dID0gam9pbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKGR0KSB7XG4gICAgICAgIGlmICghdGhpcy5zZXNzaW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lbmdpbmUueHIpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cFZSRXZlbnRzKHRoaXMuZW5naW5lLnhyLnNlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zZXNzaW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmhhc1Bvc2UgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuc2Vzc2lvbiAmJiB0aGlzLnNlc3Npb24uaW5wdXRTb3VyY2VzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2Vzc2lvbi5pbnB1dFNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnB1dFNvdXJjZSA9IHRoaXMuc2Vzc2lvbi5pbnB1dFNvdXJjZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dFNvdXJjZSB8fFxuICAgICAgICAgICAgICAgICAgICAhaW5wdXRTb3VyY2UuaGFuZCB8fFxuICAgICAgICAgICAgICAgICAgICBpbnB1dFNvdXJjZS5oYW5kZWRuZXNzICE9IHRoaXMuaGFuZGVkbmVzcylcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNQb3NlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB3cmlzdFNwYWNlID0gaW5wdXRTb3VyY2UuaGFuZC5nZXQoJ3dyaXN0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKHdyaXN0U3BhY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHRoaXMuZW5naW5lLnhyLmZyYW1lLmdldEpvaW50UG9zZSh3cmlzdFNwYWNlLCB0aGlzLmVuZ2luZS54ci5jdXJyZW50UmVmZXJlbmNlU3BhY2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0WFJSaWdpZFRyYW5zZm9ybUxvY2FsKHRoaXMub2JqZWN0LCBwLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuZ2V0Um90YXRpb25Mb2NhbChpbnZSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgcXVhdC5jb25qdWdhdGUoaW52Um90YXRpb24sIGludlJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5nZXRUcmFuc2xhdGlvbkxvY2FsKGludlRyYW5zbGF0aW9uKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IE9SREVSRURfSk9JTlRTLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGpvaW50TmFtZSA9IE9SREVSRURfSk9JTlRTW2pdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqb2ludCA9IHRoaXMuam9pbnRzW2pvaW50TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChqb2ludCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgam9pbnRQb3NlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgam9pbnRTcGFjZSA9IGlucHV0U291cmNlLmhhbmQuZ2V0KGpvaW50TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqb2ludFNwYWNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqb2ludFBvc2UgPSB0aGlzLmVuZ2luZS54ci5mcmFtZS5nZXRKb2ludFBvc2Uoam9pbnRTcGFjZSwgdGhpcy5lbmdpbmUueHIuY3VycmVudFJlZmVyZW5jZVNwYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoam9pbnRQb3NlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kU2tpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW50LnJlc2V0VHJhbnNsYXRpb25Sb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW50LnRyYW5zbGF0ZShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW50UG9zZS50cmFuc2Zvcm0ucG9zaXRpb24ueCAtIGludlRyYW5zbGF0aW9uWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludFBvc2UudHJhbnNmb3JtLnBvc2l0aW9uLnkgLSBpbnZUcmFuc2xhdGlvblsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnRQb3NlLnRyYW5zZm9ybS5wb3NpdGlvbi56IC0gaW52VHJhbnNsYXRpb25bMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnQucm90YXRlKGludlJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludC5yb3RhdGVPYmplY3QoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludFBvc2UudHJhbnNmb3JtLm9yaWVudGF0aW9uLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW50UG9zZS50cmFuc2Zvcm0ub3JpZW50YXRpb24ueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnRQb3NlLnRyYW5zZm9ybS5vcmllbnRhdGlvbi56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludFBvc2UudHJhbnNmb3JtLm9yaWVudGF0aW9uLncsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRYUlJpZ2lkVHJhbnNmb3JtTG9jYWwoam9pbnQsIGpvaW50UG9zZS50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIExhc3Qgam9pbnQgcmFkaXVzIG9mIGVhY2ggZmluZ2VyIGlzIG51bGwgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gam9pbnRQb3NlLnJhZGl1cyB8fCAwLjAwNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludC5zZXRTY2FsaW5nTG9jYWwoW3IsIHIsIHJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaGFzUG9zZSAmJiB0aGlzLl9jaGlsZHJlbkFjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW5BY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYWN0aXZhdGVDaGlsZHJlbldpdGhvdXRQb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlbkFjdGl2ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sbGVyVG9EZWFjdGl2YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyVG9EZWFjdGl2YXRlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlbkFjdGl2ZSh0cnVlLCB0aGlzLmNvbnRyb2xsZXJUb0RlYWN0aXZhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzUG9zZSAmJiAhdGhpcy5fY2hpbGRyZW5BY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRlYWN0aXZhdGVDaGlsZHJlbldpdGhvdXRQb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlbkFjdGl2ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJUb0RlYWN0aXZhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJUb0RlYWN0aXZhdGUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlbkFjdGl2ZShmYWxzZSwgdGhpcy5jb250cm9sbGVyVG9EZWFjdGl2YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRDaGlsZHJlbkFjdGl2ZShhY3RpdmUsIG9iamVjdCkge1xuICAgICAgICBvYmplY3QgPSBvYmplY3QgfHwgdGhpcy5vYmplY3Q7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGNvbnN0IG8gb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIG8uYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5zZXRDaGlsZHJlbkFjdGl2ZShhY3RpdmUsIG8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzR3JhYmJpbmcoKSB7XG4gICAgICAgIGNvbnN0IGluZGV4VGlwUG9zID0gWzAsIDAsIDBdO1xuICAgICAgICBxdWF0Mi5nZXRUcmFuc2xhdGlvbihpbmRleFRpcFBvcywgdGhpcy5qb2ludHNbJ2luZGV4LWZpbmdlci10aXAnXS50cmFuc2Zvcm1Mb2NhbCk7XG4gICAgICAgIGNvbnN0IHRodW1iVGlwUG9zID0gWzAsIDAsIDBdO1xuICAgICAgICBxdWF0Mi5nZXRUcmFuc2xhdGlvbih0aHVtYlRpcFBvcywgdGhpcy5qb2ludHNbJ3RodW1iLXRpcCddLnRyYW5zZm9ybUxvY2FsKTtcbiAgICAgICAgcmV0dXJuIHZlYzMuc3FyRGlzdCh0aHVtYlRpcFBvcywgaW5kZXhUaXBQb3MpIDwgMC4wMDE7XG4gICAgfVxuICAgIHNldHVwVlJFdmVudHMocykge1xuICAgICAgICB0aGlzLnNlc3Npb24gPSBzO1xuICAgIH1cbn1cbmV4cG9ydCB7IEhhbmRUcmFja2luZyB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgJ2hvd2xlcic7XG4vKipcbiAqIChTcGF0aWFsKSBhdWRpbyBsaXN0ZW5lciBiYXNlZCBvbiBbSG93bGVyLmpzXShodHRwczovL2hvd2xlcmpzLmNvbS8pLlxuICpcbiAqIFJldHJpZXZlcyB0aGUgbG9jYXRpb24gYW5kIG9yaWVudGF0aW9uIG9mIHRoZSBvYmplY3QgYW5kIHBhc3NlcyBpdFxuICogdG8gW0hvd2xlci5wb3MoKV0oaHR0cHM6Ly9naXRodWIuY29tL2dvbGRmaXJlL2hvd2xlci5qcyNwb3N4LXktei1pZClcbiAqIGFuZCBbSG93bGVyLm9yaWVudGF0aW9uKCldKGh0dHBzOi8vZ2l0aHViLmNvbS9nb2xkZmlyZS9ob3dsZXIuanMjb3JpZW50YXRpb254LXktei1pZCkuXG4gKi9cbmNsYXNzIEhvd2xlckF1ZGlvTGlzdGVuZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdob3dsZXItYXVkaW8tbGlzdGVuZXInO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogV2hldGhlciBhdWRpbyBzaG91bGQgYmUgc3BhdGlhbGl6ZWQvcG9zaXRpb25hbC4gKi9cbiAgICAgICAgc3BhdGlhbDogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IHRydWUgfSxcbiAgICB9O1xuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMub3JpZ2luID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgdGhpcy5md2QgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLnVwID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3BhdGlhbClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5vYmplY3QuZ2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLm9yaWdpbik7XG4gICAgICAgIHRoaXMub2JqZWN0LmdldEZvcndhcmQodGhpcy5md2QpO1xuICAgICAgICB0aGlzLm9iamVjdC5nZXRVcCh0aGlzLnVwKTtcbiAgICAgICAgSG93bGVyLnBvcyh0aGlzLm9yaWdpblswXSwgdGhpcy5vcmlnaW5bMV0sIHRoaXMub3JpZ2luWzJdKTtcbiAgICAgICAgSG93bGVyLm9yaWVudGF0aW9uKHRoaXMuZndkWzBdLCB0aGlzLmZ3ZFsxXSwgdGhpcy5md2RbMl0sIHRoaXMudXBbMF0sIHRoaXMudXBbMV0sIHRoaXMudXBbMl0pO1xuICAgIH1cbn1cbmV4cG9ydCB7IEhvd2xlckF1ZGlvTGlzdGVuZXIgfTtcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIFR5cGUgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xuaW1wb3J0ICdob3dsZXInO1xuLyoqXG4gKiAoU3BhdGlhbCkgYXVkaW8gc291cmNlIGJhc2VkIG9uIFtIb3dsZXIuanNdKGh0dHBzOi8vaG93bGVyanMuY29tLykuXG4gKlxuICogQ3JlYXRlcyBhIEhvd2xlciBhdWRpbyBzb3VyY2UsIHBsYXlzIGFuIGF1ZGlvIGZpbGUgb24gaXQgYW5kIHVwZGF0ZXNcbiAqIGl0cyBwb3NpdGlvbi5cbiAqXG4gKiBPcHRpbWl6ZXMgdGhlIHBvc2l0aW9uIHVwZGF0ZSB0byBvbmx5IHVwZGF0ZSBpZiB0aGUgZGlmZmVyZW5jZSB0byBsYXN0XG4gKiBwb3NpdGlvbiBpcyBsYXJnZXIgdGhhbiBoYWxmIGEgY2VudGltZXRlci4gVG8gZm9yY2UgdXBkYXRlcyAoZS5nLiBpZlxuICogdGhlIHNvdW5kIHNvdXJjZSBpcyBfdmVyeV8gY2xvc2UgdG8gdGhlIGxpc3RlbmVyKSxcbiAqIHVzZSBgLnVwZGF0ZVBvc2l0aW9uKClgLlxuICovXG5jbGFzcyBIb3dsZXJBdWRpb1NvdXJjZSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ2hvd2xlci1hdWRpby1zb3VyY2UnO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogVm9sdW1lICovXG4gICAgICAgIHZvbHVtZTogeyB0eXBlOiBUeXBlLkZsb2F0LCBkZWZhdWx0OiAxLjAgfSxcbiAgICAgICAgLyoqIFdoZXRoZXIgYXVkaW8gc2hvdWxkIGJlIHNwYXRpYWxpemVkL3Bvc2l0aW9uYWwgKi9cbiAgICAgICAgc3BhdGlhbDogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IHRydWUgfSxcbiAgICAgICAgLyoqIFdoZXRoZXIgdG8gbG9vcCB0aGUgc291bmQgKi9cbiAgICAgICAgbG9vcDogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgIC8qKiBXaGV0aGVyIHRvIHN0YXJ0IHBsYXlpbmcgYXV0b21hdGljYWxseSAqL1xuICAgICAgICBhdXRvcGxheTogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgIC8qKiBVUkwgdG8gYSBzb3VuZCBmaWxlIHRvIHBsYXkgKi9cbiAgICAgICAgc3JjOiB7IHR5cGU6IFR5cGUuU3RyaW5nLCBkZWZhdWx0OiAnJyB9LFxuICAgIH07XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuYXVkaW8gPSBuZXcgSG93bCh7XG4gICAgICAgICAgICBzcmM6IFt0aGlzLnNyY10sXG4gICAgICAgICAgICBsb29wOiB0aGlzLmxvb3AsXG4gICAgICAgICAgICB2b2x1bWU6IHRoaXMudm9sdW1lLFxuICAgICAgICAgICAgYXV0b3BsYXk6IHRoaXMuYXV0b3BsYXksXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhc3RQbGF5ZWRBdWRpb0lkID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcmlnaW4gPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLmxhc3RPcmlnaW4gPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICBpZiAodGhpcy5zcGF0aWFsICYmIHRoaXMuYXV0b3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMucGxheSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNwYXRpYWwgfHwgIXRoaXMubGFzdFBsYXllZEF1ZGlvSWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMub2JqZWN0LmdldFRyYW5zbGF0aW9uV29ybGQodGhpcy5vcmlnaW4pO1xuICAgICAgICAvKiBPbmx5IGNhbGwgcG9zKCkgaWYgdGhlIHBvc2l0aW9uIG1vdmVkIG1vcmUgdGhhbiBoYWxmIGEgY2VudGltZXRlclxuICAgICAgICAgKiBvdGhlcndpc2UgdGhpcyBnZXRzIHZlcnkgcGVyZm9ybWFuY2UgaGVhdnkuXG4gICAgICAgICAqIFNtYWxsZXIgbW92ZW1lbnQgc2hvdWxkIG9ubHkgYmUgcGVyY2VpdmFibGUgaWYgY2xvc2UgdG8gdGhlXG4gICAgICAgICAqIGVhciBhbnl3YXkuICovXG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLmxhc3RPcmlnaW5bMF0gLSB0aGlzLm9yaWdpblswXSkgPiAwLjAwNSB8fFxuICAgICAgICAgICAgTWF0aC5hYnModGhpcy5sYXN0T3JpZ2luWzFdIC0gdGhpcy5vcmlnaW5bMV0pID4gMC4wMDUgfHxcbiAgICAgICAgICAgIE1hdGguYWJzKHRoaXMubGFzdE9yaWdpblsyXSAtIHRoaXMub3JpZ2luWzJdKSA+IDAuMDA1KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICAgIHRoaXMuYXVkaW8ucG9zKHRoaXMub3JpZ2luWzBdLCB0aGlzLm9yaWdpblsxXSwgdGhpcy5vcmlnaW5bMl0sIHRoaXMubGFzdFBsYXllZEF1ZGlvSWQpO1xuICAgICAgICB0aGlzLmxhc3RPcmlnaW4uc2V0KHRoaXMub3JpZ2luKTtcbiAgICB9XG4gICAgcGxheSgpIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdFBsYXllZEF1ZGlvSWQpXG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnN0b3AodGhpcy5sYXN0UGxheWVkQXVkaW9JZCk7XG4gICAgICAgIHRoaXMubGFzdFBsYXllZEF1ZGlvSWQgPSB0aGlzLmF1ZGlvLnBsYXkoKTtcbiAgICAgICAgaWYgKHRoaXMuc3BhdGlhbClcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RQbGF5ZWRBdWRpb0lkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmF1ZGlvLnN0b3AodGhpcy5sYXN0UGxheWVkQXVkaW9JZCk7XG4gICAgICAgIHRoaXMubGFzdFBsYXllZEF1ZGlvSWQgPSBudWxsO1xuICAgIH1cbiAgICBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgIC8qIFN0b3Agc291bmQgd2hlbiBjb21wb25lbnQgaXMgZGVhY3RpdmF0ZWQgb3IgZGVzdHJveWVkLCBlLmcuXG4gICAgICAgICAqIHdoZW4gc3dpdGNoaW5nIHNjZW5lcyAqL1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICB9XG59XG5leHBvcnQgeyBIb3dsZXJBdWRpb1NvdXJjZSB9O1xuIiwgIi8qKlxuICogU2V0IHRoZSBkaWZmdXNlL2ZsYXQgdGV4dHVyZSBvZiBrbm93biBwaXBlbGluZXMuXG4gKlxuICogQHBhcmFtIG1hdCBNYXRlcmlhbCB0byBzZXQgdGhlIHRleHR1cmUgb25cbiAqIEBwYXJhbSB0ZXh0dXJlIFRleHR1cmUgdG8gc2V0XG4gKiBAcGFyYW0gY3VzdG9tVGV4dHVyZVByb3BlcnR5IFRleHR1cmUgcHJvcGVydHkgdG8gc2V0IG9yIGAnYXV0bydgIHRvIGF1dG9tYXRpY2FsbHlcbiAqICAgICAgZGV0ZWN0IHRoZSByaWdodCB0ZXh0dXJlIHByb3BlcnR5IGJhc2VkIG9uIGtub3duIHBpcGVsaW5lLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSB3YXMgc2V0LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEZpcnN0TWF0ZXJpYWxUZXh0dXJlKG1hdCwgdGV4dHVyZSwgY3VzdG9tVGV4dHVyZVByb3BlcnR5KSB7XG4gICAgaWYgKGN1c3RvbVRleHR1cmVQcm9wZXJ0eSAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbWF0W2N1c3RvbVRleHR1cmVQcm9wZXJ0eV0gPSB0ZXh0dXJlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc2hhZGVyID0gbWF0LnNoYWRlcjtcbiAgICBpZiAoc2hhZGVyID09PSAnRmxhdCBPcGFxdWUgVGV4dHVyZWQnKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbWF0LmZsYXRUZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNoYWRlciA9PT0gJ1Bob25nIE9wYXF1ZSBUZXh0dXJlZCcgfHxcbiAgICAgICAgc2hhZGVyID09PSAnRm9saWFnZScgfHxcbiAgICAgICAgc2hhZGVyID09PSAnUGhvbmcgTm9ybWFsbWFwcGVkJyB8fFxuICAgICAgICBzaGFkZXIgPT09ICdQaG9uZyBMaWdodG1hcHBlZCcpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBtYXQuZGlmZnVzZVRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2hhZGVyID09PSAnUGFydGljbGUnKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbWF0Lm1haW5UZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNoYWRlciA9PT0gJ0Rpc3RhbmNlRmllbGRWZWN0b3InKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbWF0LnZlY3RvclRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2hhZGVyID09PSAnQmFja2dyb3VuZCcgfHwgc2hhZGVyID09PSAnU2t5Jykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIG1hdC50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNoYWRlciA9PT0gJ1BoeXNpY2FsIE9wYXF1ZSBUZXh0dXJlZCcpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBtYXQuYWxiZWRvVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wZXJ0eSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyBzZXRGaXJzdE1hdGVyaWFsVGV4dHVyZSB9IGZyb20gJy4vdXRpbHMvdXRpbHMuanMnO1xuLyoqXG4gKiBEb3dubG9hZHMgYW4gaW1hZ2UgZnJvbSBVUkwgYW5kIGFwcGxpZXMgaXQgYXMgYGRpZmZ1c2VUZXh0dXJlYCBvciBgZmxhdFRleHR1cmVgXG4gKiB0byBhbiBhdHRhY2hlZCBtZXNoIGNvbXBvbmVudC5cbiAqXG4gKiBNYXRlcmlhbHMgZnJvbSB0aGUgZm9sbG93aW5nIHNoYWRlcnMgYXJlIHN1cHBvcnRlZDpcbiAqICAtIFwiUGhvbmcgT3BhcXVlIFRleHR1cmVkXCJcbiAqICAtIFwiRmxhdCBPcGFxdWUgVGV4dHVyZWRcIlxuICogIC0gXCJCYWNrZ3JvdW5kXCJcbiAqICAtIFwiUGh5c2ljYWwgT3BhcXVlIFRleHR1cmVkXCJcbiAqICAtIFwiRm9saWFnZVwiXG4gKi9cbmNsYXNzIEltYWdlVGV4dHVyZSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ2ltYWdlLXRleHR1cmUnO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogVVJMIHRvIGRvd25sb2FkIHRoZSBpbWFnZSBmcm9tICovXG4gICAgICAgIHVybDogUHJvcGVydHkuc3RyaW5nKCksXG4gICAgICAgIC8qKiBNYXRlcmlhbCB0byBhcHBseSB0aGUgdmlkZW8gdGV4dHVyZSB0byAqL1xuICAgICAgICBtYXRlcmlhbDogUHJvcGVydHkubWF0ZXJpYWwoKSxcbiAgICAgICAgLyoqIE5hbWUgb2YgdGhlIHRleHR1cmUgcHJvcGVydHkgdG8gc2V0ICovXG4gICAgICAgIHRleHR1cmVQcm9wZXJ0eTogUHJvcGVydHkuc3RyaW5nKCdhdXRvJyksXG4gICAgfTtcbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGVyaWFsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignaW1hZ2UtdGV4dHVyZTogbWF0ZXJpYWwgcHJvcGVydHkgbm90IHNldCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5naW5lLnRleHR1cmVzXG4gICAgICAgICAgICAubG9hZCh0aGlzLnVybCwgJ2Fub255bW91cycpXG4gICAgICAgICAgICAudGhlbigodGV4dHVyZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWF0ID0gdGhpcy5tYXRlcmlhbDtcbiAgICAgICAgICAgIGlmICghc2V0Rmlyc3RNYXRlcmlhbFRleHR1cmUobWF0LCB0ZXh0dXJlLCB0aGlzLnRleHR1cmVQcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTaGFkZXInLCBtYXQuc2hhZGVyLCAnbm90IHN1cHBvcnRlZCBieSBpbWFnZS10ZXh0dXJlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5lcnIpO1xuICAgIH1cbn1cbmV4cG9ydCB7IEltYWdlVGV4dHVyZSB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyB2ZWMzIH0gZnJvbSAnZ2wtbWF0cml4Jztcbi8qKlxuICogQ29udHJvbHMgdGhlIGNhbWVyYSB0aHJvdWdoIG1vdXNlIG1vdmVtZW50LlxuICpcbiAqIEVmZmljaWVudGx5IGltcGxlbWVudGVkIHRvIGFmZmVjdCBvYmplY3Qgb3JpZW50YXRpb24gb25seVxuICogd2hlbiB0aGUgbW91c2UgbW92ZXMuXG4gKi9cbmNsYXNzIE1vdXNlTG9va0NvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ21vdXNlLWxvb2snO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogTW91c2UgbG9vayBzZW5zaXRpdml0eSAqL1xuICAgICAgICBzZW5zaXRpdHk6IHsgdHlwZTogVHlwZS5GbG9hdCwgZGVmYXVsdDogMC4yNSB9LFxuICAgICAgICAvKiogUmVxdWlyZSBhIG1vdXNlIGJ1dHRvbiB0byBiZSBwcmVzc2VkIHRvIGNvbnRyb2wgdmlldy5cbiAgICAgICAgICogT3RoZXJ3aXNlIHZpZXcgd2lsbCBhbGx3YXlzIGZvbGxvdyBtb3VzZSBtb3ZlbWVudCAqL1xuICAgICAgICByZXF1aXJlTW91c2VEb3duOiB7IHR5cGU6IFR5cGUuQm9vbCwgZGVmYXVsdDogdHJ1ZSB9LFxuICAgICAgICAvKiogSWYgXCJtb3ZlT25DbGlja1wiIGlzIGVuYWJsZWQsIG1vdXNlIGJ1dHRvbiB3aGljaCBzaG91bGRcbiAgICAgICAgICogYmUgaGVsZCBkb3duIHRvIGNvbnRyb2wgdmlldyAqL1xuICAgICAgICBtb3VzZUJ1dHRvbkluZGV4OiB7IHR5cGU6IFR5cGUuSW50IH0sXG4gICAgICAgIC8qKiBFbmFibGVzIHBvaW50ZXIgbG9jayBvbiBcIm1vdXNlZG93blwiIGV2ZW50IG9uIGNhbnZhcyAqL1xuICAgICAgICBwb2ludGVyTG9ja09uQ2xpY2s6IHsgdHlwZTogVHlwZS5Cb29sLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIH07XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50Um90YXRpb25ZID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50Um90YXRpb25YID0gMDtcbiAgICAgICAgdGhpcy5vcmlnaW4gPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLnBhcmVudE9yaWdpbiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIHRoaXMucm90YXRpb25YID0gMDtcbiAgICAgICAgdGhpcy5yb3RhdGlvblkgPSAwO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZSAmJiAodGhpcy5tb3VzZURvd24gfHwgIXRoaXMucmVxdWlyZU1vdXNlRG93bikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0aW9uWSA9ICgtdGhpcy5zZW5zaXRpdHkgKiBlLm1vdmVtZW50WCkgLyAxMDA7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGlvblggPSAoLXRoaXMuc2Vuc2l0aXR5ICogZS5tb3ZlbWVudFkpIC8gMTAwO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFJvdGF0aW9uWCArPSB0aGlzLnJvdGF0aW9uWDtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3RhdGlvblkgKz0gdGhpcy5yb3RhdGlvblk7XG4gICAgICAgICAgICAgICAgLyogMS41MDcgPSBQSS8yID0gOTBcdTAwQjAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3RhdGlvblggPSBNYXRoLm1pbigxLjUwNywgdGhpcy5jdXJyZW50Um90YXRpb25YKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3RhdGlvblggPSBNYXRoLm1heCgtMS41MDcsIHRoaXMuY3VycmVudFJvdGF0aW9uWCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuZ2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLm9yaWdpbik7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5vYmplY3QucGFyZW50O1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmdldFRyYW5zbGF0aW9uV29ybGQodGhpcy5wYXJlbnRPcmlnaW4pO1xuICAgICAgICAgICAgICAgICAgICB2ZWMzLnN1Yih0aGlzLm9yaWdpbiwgdGhpcy5vcmlnaW4sIHRoaXMucGFyZW50T3JpZ2luKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3QucmVzZXRUcmFuc2xhdGlvblJvdGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3Qucm90YXRlQXhpc0FuZ2xlUmFkKFsxLCAwLCAwXSwgdGhpcy5jdXJyZW50Um90YXRpb25YKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5yb3RhdGVBeGlzQW5nbGVSYWQoWzAsIDEsIDBdLCB0aGlzLmN1cnJlbnRSb3RhdGlvblkpO1xuICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0LnRyYW5zbGF0ZSh0aGlzLm9yaWdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmVuZ2luZS5jYW52YXM7XG4gICAgICAgIGlmICh0aGlzLnBvaW50ZXJMb2NrT25DbGljaykge1xuICAgICAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjYW52YXMucmVxdWVzdFBvaW50ZXJMb2NrID1cbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLnJlcXVlc3RQb2ludGVyTG9jayB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLm1velJlcXVlc3RQb2ludGVyTG9jayB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FudmFzLndlYmtpdFJlcXVlc3RQb2ludGVyTG9jaztcbiAgICAgICAgICAgICAgICBjYW52YXMucmVxdWVzdFBvaW50ZXJMb2NrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXF1aXJlTW91c2VEb3duKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb3VzZUJ1dHRvbkluZGV4ID09IDIpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUuYnV0dG9uID09IHRoaXMubW91c2VCdXR0b25JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlRG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ2dyYWJiaW5nJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuYnV0dG9uID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFByZXZlbnQgc2Nyb2xsaW5nICovXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS5idXR0b24gPT0gdGhpcy5tb3VzZUJ1dHRvbkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ2luaXRpYWwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IHsgTW91c2VMb29rQ29tcG9uZW50IH07XG4iLCAidmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xuLyoqXG4gKiBTZXQgcGxheWVyIGhlaWdodCBmb3IgYSBZLW9mZnNldCBhYm92ZSB0aGUgZ3JvdW5kIGZvclxuICogJ2xvY2FsJyBhbmQgJ3ZpZXdlcicgcmVmZXJlbmNlIHNwYWNlcy5cbiAqL1xuY2xhc3MgUGxheWVySGVpZ2h0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAncGxheWVyLWhlaWdodCc7XG4gICAgaGVpZ2h0ID0gMS43NTtcbiAgICBvblNlc3Npb25TdGFydENhbGxiYWNrO1xuICAgIG9uU2Vzc2lvbkVuZENhbGxiYWNrO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLm9iamVjdC5yZXNldFBvc2l0aW9uUm90YXRpb24oKTtcbiAgICAgICAgdGhpcy5vYmplY3QudHJhbnNsYXRlTG9jYWwoWzAuMCwgdGhpcy5oZWlnaHQsIDAuMF0pO1xuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2sgPSB0aGlzLm9uWFJTZXNzaW9uU3RhcnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vblNlc3Npb25FbmRDYWxsYmFjayA9IHRoaXMub25YUlNlc3Npb25FbmQuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgb25BY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5hZGQodGhpcy5vblNlc3Npb25TdGFydENhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25FbmQuYWRkKHRoaXMub25TZXNzaW9uRW5kQ2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQucmVtb3ZlKHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayk7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uRW5kLnJlbW92ZSh0aGlzLm9uU2Vzc2lvbkVuZENhbGxiYWNrKTtcbiAgICB9XG4gICAgb25YUlNlc3Npb25TdGFydCgpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMuZW5naW5lLnhyPy5jdXJyZW50UmVmZXJlbmNlU3BhY2VUeXBlO1xuICAgICAgICBpZiAodHlwZSAhPT0gJ2xvY2FsJyAmJiB0eXBlICE9PSAndmlld2VyJykge1xuICAgICAgICAgICAgdGhpcy5vYmplY3QucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25YUlNlc3Npb25FbmQoKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmVuZ2luZS54cj8uY3VycmVudFJlZmVyZW5jZVNwYWNlVHlwZTtcbiAgICAgICAgaWYgKHR5cGUgIT09ICdsb2NhbCcgJiYgdHlwZSAhPT0gJ3ZpZXdlcicpIHtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5vYmplY3QudHJhbnNsYXRlTG9jYWwoWzAuMCwgdGhpcy5oZWlnaHQsIDAuMF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuZmxvYXQoMC4wKVxuXSwgUGxheWVySGVpZ2h0LnByb3RvdHlwZSwgXCJoZWlnaHRcIiwgdm9pZCAwKTtcbmV4cG9ydCB7IFBsYXllckhlaWdodCB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4vKipcbiAqIFNldHMgdGhlIHRhcmdldCBmcmFtZXJhdGVcbiAqXG4gKiBbVXBkYXRlcyB0aGUgdGFyZ2V0IGZyYW1lcmF0ZV0oaHR0cHM6Ly9pbW1lcnNpdmUtd2ViLmdpdGh1Yi5pby93ZWJ4ci8jZG9tLXhyc2Vzc2lvbi11cGRhdGV0YXJnZXRmcmFtZXJhdGUpXG4gKiB0byB0aGUgY2xvc2VzdCBbc3VwcG9ydGVkIHRhcmdldCBmcmFtZXJhdGVdKGh0dHBzOi8vaW1tZXJzaXZlLXdlYi5naXRodWIuaW8vd2VieHIvI2RvbS14cnNlc3Npb24tc3VwcG9ydGVkRnJhbWVSYXRlcylcbiAqIHRvIHRoZSBnaXZlbiBgZnJhbWVyYXRlYC5cbiAqXG4gKiBUaGUgdGFyZ2V0IGZyYW1lcmF0ZSBpcyB1c2VkIGZvciB0aGUgZGV2aWNlJ3MgVlIgY29tcG9zaXRvciBhcyBhbiBpbmRpY2F0aW9uIG9mIGhvdyBvZnRlbiB0byByZWZyZXNoIHRoZVxuICogc2NyZWVuIHdpdGggbmV3IGltYWdlcy4gVGhpcyBtZWFucyB0aGUgYXBwIHdpbGwgYmUgYXNrZWQgdG8gcHJvZHVjZSBmcmFtZXMgaW4gbW9yZSByZWd1bGFyIGludGVydmFscyxcbiAqIHBvdGVudGlhbGx5IHNwZW5kaW5nIGxlc3MgdGltZSBvbiBmcmFtZXMgdGhhdCBhcmUgbGlrZWx5IHRvIGJlIGRyb3BwZWQuXG4gKlxuICogRm9yIGFwcHMgd2l0aCBoZWF2eSBsb2FkLCBzZXR0aW5nIGEgd2VsbCBtYXRjaGluZyB0YXJnZXQgZnJhbWVyYXRlIGNhbiBpbXByb3ZlIHRoZSBhcHBzIHJlbmRlcmluZyBzdGFiaWxpdHlcbiAqIGFuZCByZWR1Y2Ugc3R1dHRlci5cbiAqXG4gKiBMaWtld2lzZSwgdGhlIHRhcmdldCBmcmFtZXJhdGUgY2FuIGJlIHVzZWQgdG8gZW5hYmxlIDEyMEh6IHJlZnJlc2ggcmF0ZXMgb24gT2N1bHVzIFF1ZXN0IDIgb24gc2ltcGxlciBhcHBzLlxuICovXG5jbGFzcyBUYXJnZXRGcmFtZXJhdGUgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICd0YXJnZXQtZnJhbWVyYXRlJztcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHtcbiAgICAgICAgZnJhbWVyYXRlOiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IDkwLjAgfSxcbiAgICB9O1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2sgPSB0aGlzLnNldFRhcmdldEZyYW1lcmF0ZS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBvbkFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvblN0YXJ0LmFkZCh0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQucmVtb3ZlKHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayk7XG4gICAgfVxuICAgIHNldFRhcmdldEZyYW1lcmF0ZShzKSB7XG4gICAgICAgIGlmIChzLnN1cHBvcnRlZEZyYW1lUmF0ZXMgJiYgcy51cGRhdGVUYXJnZXRGcmFtZVJhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSB0aGlzLmVuZ2luZS54ci5zZXNzaW9uLnN1cHBvcnRlZEZyYW1lUmF0ZXM7XG4gICAgICAgICAgICBhLnNvcnQoKGEsIGIpID0+IE1hdGguYWJzKGEgLSB0aGlzLmZyYW1lcmF0ZSkgLSBNYXRoLmFicyhiIC0gdGhpcy5mcmFtZXJhdGUpKTtcbiAgICAgICAgICAgIHRoaXMuZW5naW5lLnhyLnNlc3Npb24udXBkYXRlVGFyZ2V0RnJhbWVSYXRlKGFbMF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IHsgVGFyZ2V0RnJhbWVyYXRlIH07XG4iLCAiaW1wb3J0IHsgdmVjMywgcXVhdDIgfSBmcm9tICdnbC1tYXRyaXgnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBUeXBlIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbi8qKlxuICogVGVsZXBvcnQgVlIgbG9jb21vdGlvbi5cbiAqXG4gKiBTZWUgW1RlbGVwb3J0IEV4YW1wbGVdKC9zaG93Y2FzZS90ZWxlcG9ydCkuXG4gKi9cbmNsYXNzIFRlbGVwb3J0Q29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndGVsZXBvcnQnO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogT2JqZWN0IHRoYXQgd2lsbCBiZSBwbGFjZWQgYXMgaW5kaWNpYXRpb24gZm9yd2hlcmUgdGhlIHBsYXllciB3aWxsIHRlbGVwb3J0IHRvLiAqL1xuICAgICAgICB0ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3Q6IHsgdHlwZTogVHlwZS5PYmplY3QgfSxcbiAgICAgICAgLyoqIFJvb3Qgb2YgdGhlIHBsYXllciwgdGhlIG9iamVjdCB0aGF0IHdpbGwgYmUgcG9zaXRpb25lZCBvbiB0ZWxlcG9ydGF0aW9uLiAqL1xuICAgICAgICBjYW1Sb290OiB7IHR5cGU6IFR5cGUuT2JqZWN0IH0sXG4gICAgICAgIC8qKiBOb24tdnIgY2FtZXJhIGZvciB1c2Ugb3V0c2lkZSBvZiBWUiAqL1xuICAgICAgICBjYW06IHsgdHlwZTogVHlwZS5PYmplY3QgfSxcbiAgICAgICAgLyoqIExlZnQgZXllIGZvciB1c2UgaW4gVlIqL1xuICAgICAgICBleWVMZWZ0OiB7IHR5cGU6IFR5cGUuT2JqZWN0IH0sXG4gICAgICAgIC8qKiBSaWdodCBleWUgZm9yIHVzZSBpbiBWUiovXG4gICAgICAgIGV5ZVJpZ2h0OiB7IHR5cGU6IFR5cGUuT2JqZWN0IH0sXG4gICAgICAgIC8qKiBIYW5kZWRuZXNzIGZvciBWUiBjdXJzb3JzIHRvIGFjY2VwdCB0cmlnZ2VyIGV2ZW50cyBvbmx5IGZyb20gcmVzcGVjdGl2ZSBjb250cm9sbGVyLiAqL1xuICAgICAgICBoYW5kZWRuZXNzOiB7XG4gICAgICAgICAgICB0eXBlOiBUeXBlLkVudW0sXG4gICAgICAgICAgICB2YWx1ZXM6IFsnaW5wdXQgY29tcG9uZW50JywgJ2xlZnQnLCAncmlnaHQnLCAnbm9uZSddLFxuICAgICAgICAgICAgZGVmYXVsdDogJ2lucHV0IGNvbXBvbmVudCcsXG4gICAgICAgIH0sXG4gICAgICAgIC8qKiBDb2xsaXNpb24gZ3JvdXAgb2YgdmFsaWQgXCJmbG9vclwiIG9iamVjdHMgdGhhdCBjYW4gYmUgdGVsZXBvcnRlZCBvbiAqL1xuICAgICAgICBmbG9vckdyb3VwOiB7IHR5cGU6IFR5cGUuSW50LCBkZWZhdWx0OiAxIH0sXG4gICAgICAgIC8qKiBIb3cgZmFyIHRoZSB0aHVtYnN0aWNrIG5lZWRzIHRvIGJlIHB1c2hlZCB0byBoYXZlIHRoZSB0ZWxlcG9ydCB0YXJnZXQgaW5kaWNhdG9yIHNob3cgdXAgKi9cbiAgICAgICAgdGh1bWJzdGlja0FjdGl2YXRpb25UaHJlc2hob2xkOiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IC0wLjcgfSxcbiAgICAgICAgLyoqIEhvdyBmYXIgdGhlIHRodW1ic3RpY2sgbmVlZHMgdG8gYmUgcmVsZWFzZWQgdG8gZXhlY3V0ZSB0aGUgdGVsZXBvcnQgKi9cbiAgICAgICAgdGh1bWJzdGlja0RlYWN0aXZhdGlvblRocmVzaGhvbGQ6IHsgdHlwZTogVHlwZS5GbG9hdCwgZGVmYXVsdDogMC4zIH0sXG4gICAgICAgIC8qKiBPZmZzZXQgdG8gYXBwbHkgdG8gdGhlIGluZGljYXRvciBvYmplY3QsIGUuZy4gdG8gYXZvaWQgaXQgZnJvbSBaLWZpZ2h0aW5nIHdpdGggdGhlIGZsb29yICovXG4gICAgICAgIGluZGljYXRvcllPZmZzZXQ6IHsgdHlwZTogVHlwZS5GbG9hdCwgZGVmYXVsdDogMC4wMSB9LFxuICAgICAgICAvKiogTW9kZSBmb3IgcmF5Y2FzdGluZywgd2hldGhlciB0byB1c2UgUGh5c1ggb3Igc2ltcGxlIGNvbGxpc2lvbiBjb21wb25lbnRzICovXG4gICAgICAgIHJheUNhc3RNb2RlOiB7XG4gICAgICAgICAgICB0eXBlOiBUeXBlLkVudW0sXG4gICAgICAgICAgICB2YWx1ZXM6IFsnY29sbGlzaW9uJywgJ3BoeXN4J10sXG4gICAgICAgICAgICBkZWZhdWx0OiAnY29sbGlzaW9uJyxcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIE1heCBkaXN0YW5jZSBmb3IgUGh5c1ggcmF5Y2FzdCAqL1xuICAgICAgICBtYXhEaXN0YW5jZTogeyB0eXBlOiBUeXBlLkZsb2F0LCBkZWZhdWx0OiAxMDAuMCB9LFxuICAgIH07XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5fcHJldlRodW1ic3RpY2tBeGlzID0gbmV3IEZsb2F0MzJBcnJheSgyKTtcbiAgICAgICAgdGhpcy5fdGVtcFZlYyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgICAgIHRoaXMuX3RlbXBWZWMwID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICAgICAgdGhpcy5fY3VycmVudEluZGljYXRvclJvdGF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5pbnB1dCA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudCgnaW5wdXQnKTtcbiAgICAgICAgaWYgKCF0aGlzLmlucHV0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHRoaXMub2JqZWN0Lm5hbWUsICdnZW5lcmljLXRlbGVwb3J0LWNvbXBvbmVudC5qczogaW5wdXQgY29tcG9uZW50IGlzIHJlcXVpcmVkIG9uIHRoZSBvYmplY3QnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHRoaXMub2JqZWN0Lm5hbWUsICdnZW5lcmljLXRlbGVwb3J0LWNvbXBvbmVudC5qczogVGVsZXBvcnQgaW5kaWNhdG9yIG1lc2ggaXMgbWlzc2luZycpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5jYW1Sb290KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHRoaXMub2JqZWN0Lm5hbWUsICdnZW5lcmljLXRlbGVwb3J0LWNvbXBvbmVudC5qczogY2FtUm9vdCBub3Qgc2V0Jyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0luZGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbmRpY2F0b3JIaWRkZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmhpdFNwb3QgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgICAgICB0aGlzLl9oYXNIaXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZXh0cmFSb3RhdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGlja0F4ZXMgPSBuZXcgRmxvYXQzMkFycmF5KDIpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FtKSB7XG4gICAgICAgICAgICB0aGlzLmlzTW91c2VJbmRpY2F0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFuZGVkbmVzcyA9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dENvbXAgPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoJ2lucHV0Jyk7XG4gICAgICAgICAgICBpZiAoIWlucHV0Q29tcCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybigndGVsZXBvcnQgY29tcG9uZW50IG9uIG9iamVjdCcsIHRoaXMub2JqZWN0Lm5hbWUsICd3YXMgY29uZmlndXJlZCB3aXRoIGhhbmRlZG5lc3MgXCJpbnB1dCBjb21wb25lbnRcIiwgJyArXG4gICAgICAgICAgICAgICAgICAgICdidXQgb2JqZWN0IGhhcyBubyBpbnB1dCBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRlZG5lc3MgPSBpbnB1dENvbXAuaGFuZGVkbmVzcztcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0ID0gaW5wdXRDb21wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYW5kZWRuZXNzID0gWydsZWZ0JywgJ3JpZ2h0J11bdGhpcy5oYW5kZWRuZXNzIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblNlc3Npb25TdGFydENhbGxiYWNrID0gdGhpcy5zZXR1cFZSRXZlbnRzLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0LmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBvbkFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvblN0YXJ0LmFkZCh0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2spO1xuICAgIH1cbiAgICBvbkRlYWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQucmVtb3ZlKHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayk7XG4gICAgfVxuICAgIC8qIEdldCBjdXJyZW50IGNhbWVyYSBZIHJvdGF0aW9uICovXG4gICAgX2dldENhbVJvdGF0aW9uKCkge1xuICAgICAgICB0aGlzLmV5ZUxlZnQuZ2V0Rm9yd2FyZCh0aGlzLl90ZW1wVmVjKTtcbiAgICAgICAgdGhpcy5fdGVtcFZlY1sxXSA9IDA7XG4gICAgICAgIHZlYzMubm9ybWFsaXplKHRoaXMuX3RlbXBWZWMsIHRoaXMuX3RlbXBWZWMpO1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih0aGlzLl90ZW1wVmVjWzBdLCB0aGlzLl90ZW1wVmVjWzJdKTtcbiAgICB9XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBsZXQgaW5wdXRMZW5ndGggPSAwO1xuICAgICAgICBpZiAodGhpcy5nYW1lcGFkICYmIHRoaXMuZ2FtZXBhZC5heGVzKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50U3RpY2tBeGVzWzBdID0gdGhpcy5nYW1lcGFkLmF4ZXNbMl07XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50U3RpY2tBeGVzWzFdID0gdGhpcy5nYW1lcGFkLmF4ZXNbM107XG4gICAgICAgICAgICBpbnB1dExlbmd0aCA9XG4gICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy5fY3VycmVudFN0aWNrQXhlc1swXSkgKyBNYXRoLmFicyh0aGlzLl9jdXJyZW50U3RpY2tBeGVzWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNJbmRpY2F0aW5nICYmXG4gICAgICAgICAgICB0aGlzLl9wcmV2VGh1bWJzdGlja0F4aXNbMV0gPj0gdGhpcy50aHVtYnN0aWNrQWN0aXZhdGlvblRocmVzaGhvbGQgJiZcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTdGlja0F4ZXNbMV0gPCB0aGlzLnRodW1ic3RpY2tBY3RpdmF0aW9uVGhyZXNoaG9sZCkge1xuICAgICAgICAgICAgdGhpcy5pc0luZGljYXRpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNJbmRpY2F0aW5nICYmXG4gICAgICAgICAgICBpbnB1dExlbmd0aCA8IHRoaXMudGh1bWJzdGlja0RlYWN0aXZhdGlvblRocmVzaGhvbGQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNJbmRpY2F0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnRlbGVwb3J0SW5kaWNhdG9yTWVzaE9iamVjdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNIaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZWxlcG9ydFBsYXllcih0aGlzLmhpdFNwb3QsIHRoaXMuX2V4dHJhUm90YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzSW5kaWNhdGluZyAmJiB0aGlzLnRlbGVwb3J0SW5kaWNhdG9yTWVzaE9iamVjdCAmJiB0aGlzLmlucHV0KSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW4gPSB0aGlzLl90ZW1wVmVjMDtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LmdldFBvc2l0aW9uV29ybGQob3JpZ2luKTtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMub2JqZWN0LmdldEZvcndhcmRXb3JsZCh0aGlzLl90ZW1wVmVjKTtcbiAgICAgICAgICAgIGxldCByYXlIaXQgPSAodGhpcy5yYXlIaXQgPVxuICAgICAgICAgICAgICAgIHRoaXMucmF5Q2FzdE1vZGUgPT0gMFxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZW5naW5lLnNjZW5lLnJheUNhc3Qob3JpZ2luLCBkaXJlY3Rpb24sIDEgPDwgdGhpcy5mbG9vckdyb3VwKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuZW5naW5lLnBoeXNpY3MucmF5Q2FzdChvcmlnaW4sIGRpcmVjdGlvbiwgMSA8PCB0aGlzLmZsb29yR3JvdXAsIHRoaXMubWF4RGlzdGFuY2UpKTtcbiAgICAgICAgICAgIGlmIChyYXlIaXQuaGl0Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JIaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9leHRyYVJvdGF0aW9uID1cbiAgICAgICAgICAgICAgICAgICAgTWF0aC5QSSArXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmF0YW4yKHRoaXMuX2N1cnJlbnRTdGlja0F4ZXNbMF0sIHRoaXMuX2N1cnJlbnRTdGlja0F4ZXNbMV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRpY2F0b3JSb3RhdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldENhbVJvdGF0aW9uKCkgKyAodGhpcy5fZXh0cmFSb3RhdGlvbiAtIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgIHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0LnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0LnJvdGF0ZUF4aXNBbmdsZVJhZChbMCwgMSwgMF0sIHRoaXMuX2N1cnJlbnRJbmRpY2F0b3JSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3QudHJhbnNsYXRlKHJheUhpdC5sb2NhdGlvbnNbMF0pO1xuICAgICAgICAgICAgICAgIHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0LnRyYW5zbGF0ZShbXG4gICAgICAgICAgICAgICAgICAgIDAuMCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JZT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAwLjAsXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3QuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmhpdFNwb3Quc2V0KHJheUhpdC5sb2NhdGlvbnNbMF0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0hpdCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5kaWNhdG9ySGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvckhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0hpdCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0ICYmIHRoaXMuaXNNb3VzZUluZGljYXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZVByZXNzZWQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcmV2VGh1bWJzdGlja0F4aXMuc2V0KHRoaXMuX2N1cnJlbnRTdGlja0F4ZXMpO1xuICAgIH1cbiAgICBzZXR1cFZSRXZlbnRzKHMpIHtcbiAgICAgICAgLyogSWYgaW4gVlIsIG9uZS10aW1lIGJpbmQgdGhlIGxpc3RlbmVyICovXG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHM7XG4gICAgICAgIHMuYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLyogUmVzZXQgY2FjaGUgb25jZSB0aGUgc2Vzc2lvbiBlbmRzIHRvIHJlYmluZCBzZWxlY3QgZXRjLCBpbiBjYXNlXG4gICAgICAgICAgICAgKiBpdCBzdGFydHMgYWdhaW4gKi9cbiAgICAgICAgICAgIHRoaXMuZ2FtZXBhZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnNlc3Npb24gPSBudWxsO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICBpZiAocy5pbnB1dFNvdXJjZXMgJiYgcy5pbnB1dFNvdXJjZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMuaW5wdXRTb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlucHV0U291cmNlID0gcy5pbnB1dFNvdXJjZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0U291cmNlLmhhbmRlZG5lc3MgPT0gdGhpcy5oYW5kZWRuZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZXBhZCA9IGlucHV0U291cmNlLmdhbWVwYWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHMuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXRzb3VyY2VzY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmFkZGVkICYmIGUuYWRkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLmFkZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnB1dFNvdXJjZSA9IGUuYWRkZWRbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dFNvdXJjZS5oYW5kZWRuZXNzID09IHRoaXMuaGFuZGVkbmVzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lcGFkID0gaW5wdXRTb3VyY2UuZ2FtZXBhZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgb25Nb3VzZURvd24oKSB7XG4gICAgICAgIHRoaXMuaXNNb3VzZUluZGljYXRpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBvbk1vdXNlVXAoKSB7XG4gICAgICAgIHRoaXMuaXNNb3VzZUluZGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3QuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl9oYXNIaXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3RlbGVwb3J0UGxheWVyKHRoaXMuaGl0U3BvdCwgMC4wKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbk1vdXNlUHJlc3NlZCgpIHtcbiAgICAgICAgbGV0IG9yaWdpbiA9IFswLCAwLCAwXTtcbiAgICAgICAgdGhpcy5jYW0uZ2V0UG9zaXRpb25Xb3JsZChvcmlnaW4pO1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSB0aGlzLmNhbS5nZXRGb3J3YXJkKHRoaXMuX3RlbXBWZWMpO1xuICAgICAgICBsZXQgcmF5SGl0ID0gKHRoaXMucmF5SGl0ID1cbiAgICAgICAgICAgIHRoaXMucmF5Q2FzdE1vZGUgPT0gMFxuICAgICAgICAgICAgICAgID8gdGhpcy5lbmdpbmUuc2NlbmUucmF5Q2FzdChvcmlnaW4sIGRpcmVjdGlvbiwgMSA8PCB0aGlzLmZsb29yR3JvdXApXG4gICAgICAgICAgICAgICAgOiB0aGlzLmVuZ2luZS5waHlzaWNzLnJheUNhc3Qob3JpZ2luLCBkaXJlY3Rpb24sIDEgPDwgdGhpcy5mbG9vckdyb3VwLCB0aGlzLm1heERpc3RhbmNlKSk7XG4gICAgICAgIGlmIChyYXlIaXQuaGl0Q291bnQgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmluZGljYXRvckhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgZGlyZWN0aW9uWzFdID0gMDtcbiAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKGRpcmVjdGlvbiwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRJbmRpY2F0b3JSb3RhdGlvbiA9XG4gICAgICAgICAgICAgICAgLU1hdGguc2lnbihkaXJlY3Rpb25bMl0pICogTWF0aC5hY29zKGRpcmVjdGlvblswXSkgLSBNYXRoLlBJICogMC41O1xuICAgICAgICAgICAgdGhpcy50ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3QucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnRlbGVwb3J0SW5kaWNhdG9yTWVzaE9iamVjdC5yb3RhdGVBeGlzQW5nbGVSYWQoWzAsIDEsIDBdLCB0aGlzLl9jdXJyZW50SW5kaWNhdG9yUm90YXRpb24pO1xuICAgICAgICAgICAgdGhpcy50ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3QudHJhbnNsYXRlKHJheUhpdC5sb2NhdGlvbnNbMF0pO1xuICAgICAgICAgICAgdGhpcy50ZWxlcG9ydEluZGljYXRvck1lc2hPYmplY3QuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaGl0U3BvdCA9IHJheUhpdC5sb2NhdGlvbnNbMF07XG4gICAgICAgICAgICB0aGlzLl9oYXNIaXQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmluZGljYXRvckhpZGRlbikge1xuICAgICAgICAgICAgICAgIHRoaXMudGVsZXBvcnRJbmRpY2F0b3JNZXNoT2JqZWN0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9ySGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2hhc0hpdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIF90ZWxlcG9ydFBsYXllcihuZXdQb3NpdGlvbiwgcm90YXRpb25Ub0FkZCkge1xuICAgICAgICB0aGlzLmNhbVJvb3Qucm90YXRlQXhpc0FuZ2xlUmFkKFswLCAxLCAwXSwgcm90YXRpb25Ub0FkZCk7XG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLl90ZW1wVmVjO1xuICAgICAgICBjb25zdCBwMSA9IHRoaXMuX3RlbXBWZWMwO1xuICAgICAgICBpZiAodGhpcy5zZXNzaW9uKSB7XG4gICAgICAgICAgICB0aGlzLmV5ZUxlZnQuZ2V0UG9zaXRpb25Xb3JsZChwKTtcbiAgICAgICAgICAgIHRoaXMuZXllUmlnaHQuZ2V0UG9zaXRpb25Xb3JsZChwMSk7XG4gICAgICAgICAgICB2ZWMzLmFkZChwLCBwLCBwMSk7XG4gICAgICAgICAgICB2ZWMzLnNjYWxlKHAsIHAsIDAuNSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhbS5nZXRQb3NpdGlvbldvcmxkKHApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FtUm9vdC5nZXRQb3NpdGlvbldvcmxkKHAxKTtcbiAgICAgICAgdmVjMy5zdWIocCwgcDEsIHApO1xuICAgICAgICBwWzBdICs9IG5ld1Bvc2l0aW9uWzBdO1xuICAgICAgICBwWzFdID0gbmV3UG9zaXRpb25bMV07XG4gICAgICAgIHBbMl0gKz0gbmV3UG9zaXRpb25bMl07XG4gICAgICAgIHRoaXMuY2FtUm9vdC5zZXRQb3NpdGlvbldvcmxkKHApO1xuICAgIH1cbn1cbmV4cG9ydCB7IFRlbGVwb3J0Q29tcG9uZW50IH07XG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50LCBUeXBlLCBNZXNoLCBNZXNoSW5kZXhUeXBlLCBNZXNoQXR0cmlidXRlIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHZlYzMgfSBmcm9tICdnbC1tYXRyaXgnO1xuY29uc3QgZGlyZWN0aW9uID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IG9mZnNldCA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCBub3JtYWwgPSB2ZWMzLmNyZWF0ZSgpO1xuLyoqXG4gKiBEeW5hbWljIG1lc2gtYmFzZWQgdHJhaWxcbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBrZWVwcyB0cmFjayBvZiB0aGUgd29ybGQgcG9zaXRpb24gb2YgdGhlIG9iamVjdCBpdCdzIGFkZGVkIHRvLlxuICogQXQgYSBmaXhlZCBpbnRlcnZhbCB0aGUgd29ybGQgcG9zaXRpb24gaXMgc3RvcmVkIGFzIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIG9mIHRoZSB0cmFpbCBzZWdtZW50cy5cbiAqXG4gKiBUaGUgdHJhaWwgdGFwZXJzIG9mZiBhbG9uZyBpdHMgbGVuZ3RoLiBVViB0ZXh0dXJlIGNvb3JkaW5hdGVzIGFyZSBzZXR1cCBzdWNoIHRoYXQgdGhlXG4gKiBVLWF4aXMgY292ZXJzIHRoZSB3aWR0aCBvZiB0aGUgdHJhaWwgYW5kIHRoZSBWLWF4aXMgY292ZXJzIHRoZSBsZW5ndGggb2YgdGhlIHRyYWlsLlxuICogVGhpcyBhbGxvd3MgdGhlIHRyYWlsJ3MgYXBwZWFyYW5jZSB0byBiZSBkZWZpbmVkIHVzaW5nIGEgdGV4dHVyZS5cbiAqL1xuY2xhc3MgVHJhaWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICd0cmFpbCc7XG4gICAgc3RhdGljIFByb3BlcnRpZXMgPSB7XG4gICAgICAgIC8qKiBUaGUgbWF0ZXJpYWwgdG8gYXBwbHkgdG8gdGhlIHRyYWlsIG1lc2ggKi9cbiAgICAgICAgbWF0ZXJpYWw6IHsgdHlwZTogVHlwZS5NYXRlcmlhbCB9LFxuICAgICAgICAvKiogVGhlIG51bWJlciBvZiBzZWdtZW50cyBpbiB0aGUgdHJhaWwgbWVzaCAqL1xuICAgICAgICBzZWdtZW50czogeyB0eXBlOiBUeXBlLkludCwgZGVmYXVsdDogNTAgfSxcbiAgICAgICAgLyoqIFRoZSB0aW1lIGludGVydmFsIGJlZm9yZSByZWNvcmRpbmcgYSBuZXcgcG9pbnQgKi9cbiAgICAgICAgaW50ZXJ2YWw6IHsgdHlwZTogVHlwZS5GbG9hdCwgZGVmYXVsdDogMC4xIH0sXG4gICAgICAgIC8qKiBUaGUgd2lkdGggb2YgdGhlIHRyYWlsIChpbiB3b3JsZCBzcGFjZSkgKi9cbiAgICAgICAgd2lkdGg6IHsgdHlwZTogVHlwZS5GbG9hdCwgZGVmYXVsdDogMS4wIH0sXG4gICAgICAgIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgdHJhaWwgc2hvdWxkIHRhcGVyIG9mZiAqL1xuICAgICAgICB0YXBlcjogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IHRydWUgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIGRlbHRhIHRpbWUgaW4gc2Vjb25kcywgYWJvdmUgd2hpY2ggdGhlIHRyYWlsIHJlc2V0cy5cbiAgICAgICAgICogVGhpcyBwcmV2ZW50cyB0aGUgdHJhaWwgZnJvbSBqdW1waW5nIGFyb3VuZCB3aGVuIHVwZGF0ZXMgaGFwcGVuXG4gICAgICAgICAqIGluZnJlcXVlbnRseSAoZS5nLiB3aGVuIHRoZSB0YWIgZG9lc24ndCBoYXZlIGZvY3VzKS5cbiAgICAgICAgICovXG4gICAgICAgIHJlc2V0VGhyZXNob2xkOiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IDAuNSB9LFxuICAgIH07XG4gICAgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5wb2ludHMgPSBuZXcgQXJyYXkodGhpcy5zZWdtZW50cyArIDEpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLnBvaW50c1tpXSA9IHZlYzMuY3JlYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogVGhlIHBvaW50cyBhcnJheSBpcyBjaXJjdWxhciwgc28ga2VlcCB0cmFjayBvZiBpdHMgaGVhZCAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRQb2ludE9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMudXAgPSBbMCwgMSwgMF07XG4gICAgICAgIHRoaXMudGltZVRpbGxOZXh0ID0gdGhpcy5pbnRlcnZhbDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMudHJhaWxDb250YWluZXIgPSB0aGlzLmVuZ2luZS5zY2VuZS5hZGRPYmplY3QoKTtcbiAgICAgICAgdGhpcy5tZXNoQ29tcCA9IHRoaXMudHJhaWxDb250YWluZXIuYWRkQ29tcG9uZW50KCdtZXNoJyk7XG4gICAgICAgIHRoaXMubWVzaENvbXAubWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsO1xuICAgICAgICAvKiBFYWNoIHBvaW50IHdpbGwgaGF2ZSB0d28gdmVydGljZXM7IG9uZSBvbiBlaXRoZXIgc2lkZSAqL1xuICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IDIgKiB0aGlzLnBvaW50cy5sZW5ndGg7XG4gICAgICAgIC8qIEVhY2ggc2VnbWVudCBjb25zaXN0cyBvZiB0d28gdHJpYW5nbGVzICovXG4gICAgICAgIHRoaXMuaW5kZXhEYXRhID0gbmV3IFVpbnQzMkFycmF5KDYgKiB0aGlzLnNlZ21lbnRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIHYgPSAwOyBpIDwgdmVydGV4Q291bnQgLSAyOyBpICs9IDIsIHYgKz0gNikge1xuICAgICAgICAgICAgdGhpcy5pbmRleERhdGFcbiAgICAgICAgICAgICAgICAuc3ViYXJyYXkodiwgdiArIDYpXG4gICAgICAgICAgICAgICAgLnNldChbaSArIDEsIGkgKyAwLCBpICsgMiwgaSArIDIsIGkgKyAzLCBpICsgMV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVzaCA9IG5ldyBNZXNoKHRoaXMuZW5naW5lLCB7XG4gICAgICAgICAgICB2ZXJ0ZXhDb3VudDogdmVydGV4Q291bnQsXG4gICAgICAgICAgICBpbmRleERhdGE6IHRoaXMuaW5kZXhEYXRhLFxuICAgICAgICAgICAgaW5kZXhUeXBlOiBNZXNoSW5kZXhUeXBlLlVuc2lnbmVkSW50LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tZXNoQ29tcC5tZXNoID0gdGhpcy5tZXNoO1xuICAgIH1cbiAgICB1cGRhdGVWZXJ0aWNlcygpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5tZXNoLmF0dHJpYnV0ZShNZXNoQXR0cmlidXRlLlBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgdGV4Q29vcmRzID0gdGhpcy5tZXNoLmF0dHJpYnV0ZShNZXNoQXR0cmlidXRlLlRleHR1cmVDb29yZGluYXRlKTtcbiAgICAgICAgY29uc3Qgbm9ybWFscyA9IHRoaXMubWVzaC5hdHRyaWJ1dGUoTWVzaEF0dHJpYnV0ZS5Ob3JtYWwpO1xuICAgICAgICB2ZWMzLnNldChkaXJlY3Rpb24sIDAsIDAsIDApO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucG9pbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyID0gdGhpcy5wb2ludHNbKHRoaXMuY3VycmVudFBvaW50SW5kZXggKyBpICsgMSkgJSB0aGlzLnBvaW50cy5sZW5ndGhdO1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMucG9pbnRzWyh0aGlzLmN1cnJlbnRQb2ludEluZGV4ICsgaSArIDIpICUgdGhpcy5wb2ludHMubGVuZ3RoXTtcbiAgICAgICAgICAgIC8qIFRoZSBsYXN0IHBvaW50IGhhcyBubyBuZXh0LCBzbyByZS11c2UgdGhlIGRpcmVjdGlvbiBvZiB0aGUgcHJldmlvdXMgc2VnbWVudCAqL1xuICAgICAgICAgICAgaWYgKGkgIT09IHRoaXMucG9pbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICB2ZWMzLnN1YihkaXJlY3Rpb24sIG5leHQsIGN1cnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmVjMy5jcm9zcyhvZmZzZXQsIHRoaXMudXAsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZShvZmZzZXQsIG9mZnNldCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lRnJhY3Rpb24gPSAxLjAgLSB0aGlzLnRpbWVUaWxsTmV4dCAvIHRoaXMuaW50ZXJ2YWw7XG4gICAgICAgICAgICBjb25zdCBmcmFjdGlvbiA9IChpIC0gdGltZUZyYWN0aW9uKSAvIHRoaXMuc2VnbWVudHM7XG4gICAgICAgICAgICB2ZWMzLnNjYWxlKG9mZnNldCwgb2Zmc2V0LCAoKHRoaXMudGFwZXIgPyBmcmFjdGlvbiA6IDEuMCkgKiB0aGlzLndpZHRoKSAvIDIuMCk7XG4gICAgICAgICAgICBwb3NpdGlvbnMuc2V0KGkgKiAyLCBbXG4gICAgICAgICAgICAgICAgY3VyclswXSAtIG9mZnNldFswXSxcbiAgICAgICAgICAgICAgICBjdXJyWzFdIC0gb2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgIGN1cnJbMl0gLSBvZmZzZXRbMl0sXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIHBvc2l0aW9ucy5zZXQoaSAqIDIgKyAxLCBbXG4gICAgICAgICAgICAgICAgY3VyclswXSArIG9mZnNldFswXSxcbiAgICAgICAgICAgICAgICBjdXJyWzFdICsgb2Zmc2V0WzFdLFxuICAgICAgICAgICAgICAgIGN1cnJbMl0gKyBvZmZzZXRbMl0sXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxzKSB7XG4gICAgICAgICAgICAgICAgdmVjMy5jcm9zcyhub3JtYWwsIGRpcmVjdGlvbiwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZShub3JtYWwsIG5vcm1hbCk7XG4gICAgICAgICAgICAgICAgbm9ybWFscy5zZXQoaSAqIDIsIG5vcm1hbCk7XG4gICAgICAgICAgICAgICAgbm9ybWFscy5zZXQoaSAqIDIgKyAxLCBub3JtYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRleENvb3Jkcykge1xuICAgICAgICAgICAgICAgIHRleENvb3Jkcy5zZXQoaSAqIDIsIFswLCBmcmFjdGlvbl0pO1xuICAgICAgICAgICAgICAgIHRleENvb3Jkcy5zZXQoaSAqIDIgKyAxLCBbMSwgZnJhY3Rpb25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiBOb3RpZnkgV0xFIHRoYXQgdGhlIG1lc2ggaGFzIGNoYW5nZWQgKi9cbiAgICAgICAgdGhpcy5tZXNoLnVwZGF0ZSgpO1xuICAgIH1cbiAgICByZXNldFRyYWlsKCkge1xuICAgICAgICB0aGlzLm9iamVjdC5nZXRUcmFuc2xhdGlvbldvcmxkKHRoaXMucG9pbnRzWzBdKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmVjMy5jb3B5KHRoaXMucG9pbnRzW2ldLCB0aGlzLnBvaW50c1swXSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50UG9pbnRJbmRleCA9IDA7XG4gICAgICAgIHRoaXMudGltZVRpbGxOZXh0ID0gdGhpcy5pbnRlcnZhbDtcbiAgICB9XG4gICAgdXBkYXRlKGR0KSB7XG4gICAgICAgIHRoaXMudGltZVRpbGxOZXh0IC09IGR0O1xuICAgICAgICBpZiAoZHQgPiB0aGlzLnJlc2V0VGhyZXNob2xkKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0VHJhaWwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50aW1lVGlsbE5leHQgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQb2ludEluZGV4ID0gKHRoaXMuY3VycmVudFBvaW50SW5kZXggKyAxKSAlIHRoaXMucG9pbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMudGltZVRpbGxOZXh0ID0gKHRoaXMudGltZVRpbGxOZXh0ICUgdGhpcy5pbnRlcnZhbCkgKyB0aGlzLmludGVydmFsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub2JqZWN0LmdldFRyYW5zbGF0aW9uV29ybGQodGhpcy5wb2ludHNbdGhpcy5jdXJyZW50UG9pbnRJbmRleF0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVZlcnRpY2VzKCk7XG4gICAgfVxuICAgIG9uQWN0aXZhdGUoKSB7XG4gICAgICAgIHRoaXMucmVzZXRUcmFpbCgpO1xuICAgIH1cbiAgICBvbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudHJhaWxDb250YWluZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1lc2guZGVzdHJveSgpO1xuICAgIH1cbn1cbmV4cG9ydCB7IFRyYWlsIH07XG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wZXJ0eSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyB2ZWMzIH0gZnJvbSAnZ2wtbWF0cml4JztcbmZ1bmN0aW9uIGNsYW1wKHYsIGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4odiwgYikpO1xufVxuY29uc3Qgcm9vdFNjYWxpbmcgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuY29uc3QgdGVtcFF1YXQgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xuY29uc3QgbWlkZGxlUG9zID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbmNvbnN0IGVuZFBvcyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG5jb25zdCB0YXJnZXRQb3MgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuY29uc3QgaGVscGVyUG9zID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbmNvbnN0IHJvb3RUcmFuc2Zvcm0gPSBuZXcgRmxvYXQzMkFycmF5KDgpO1xuY29uc3QgbWlkZGxlVHJhbnNmb3JtID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcbmNvbnN0IGVuZFRyYW5zZm9ybSA9IG5ldyBGbG9hdDMyQXJyYXkoOCk7XG4vKipcbiAqIFNvbHZlIGludmVyc2Uga2luZW1hdGljcyBmb3IgYSB0d28gam9pbnQgY2hhaW5zXG4gKlxuICogSW5zcGlyZWQgYnkgaHR0cDovL3RoZW9yYW5nZWR1Y2suY29tL3BhZ2Uvc2ltcGxlLXR3by1qb2ludFxuICovXG5jb25zdCB0d29Kb2ludElLID0gKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCB0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgY29uc3QgY2EgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgIGNvbnN0IGJhID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICBjb25zdCBhYiA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgY29uc3QgY2IgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuICAgIGNvbnN0IGF4aXMwID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICBjb25zdCBheGlzMSA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgY29uc3QgdGVtcCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyb290LCBtaWRkbGUsIGIsIGMsIHRhcmdldFBvcywgZXBzLCBoZWxwZXIpIHtcbiAgICAgICAgLyogYSA9IFswLCAwLCAwXSwgc2luY2UgZXZlcnl0aGluZyBpcyBjb21wdXRlZCBpbiByb290LXNwYWNlICovXG4gICAgICAgIGJhLnNldChiKTtcbiAgICAgICAgY29uc3QgbGFiID0gdmVjMy5sZW5ndGgoYmEpO1xuICAgICAgICB2ZWMzLnN1Yih0YSwgYiwgYyk7XG4gICAgICAgIGNvbnN0IGxjYiA9IHZlYzMubGVuZ3RoKHRhKTtcbiAgICAgICAgdGEuc2V0KHRhcmdldFBvcyk7XG4gICAgICAgIGNvbnN0IGxhdCA9IGNsYW1wKHZlYzMubGVuZ3RoKHRhKSwgZXBzLCBsYWIgKyBsY2IgLSBlcHMpO1xuICAgICAgICBjYS5zZXQoYyk7XG4gICAgICAgIHZlYzMuc2NhbGUoYWIsIGIsIC0xKTtcbiAgICAgICAgdmVjMy5zdWIoY2IsIGMsIGIpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZShjYSwgY2EpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZShiYSwgYmEpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZShhYiwgYWIpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZShjYiwgY2IpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZSh0YSwgdGEpO1xuICAgICAgICAvKiBTdXBwb3NlZGx5IG51bWVyaWNhbCBlcnJvcnMgY2FuIGNhdXNlIHRoZSBkb3QgdG8gZ28gb3V0IG9mIC0xLCAxIHJhbmdlICovXG4gICAgICAgIGNvbnN0IGFjX2FiXzAgPSBNYXRoLmFjb3MoY2xhbXAodmVjMy5kb3QoY2EsIGJhKSwgLTEsIDEpKTtcbiAgICAgICAgY29uc3QgYmFfYmNfMCA9IE1hdGguYWNvcyhjbGFtcCh2ZWMzLmRvdChhYiwgY2IpLCAtMSwgMSkpO1xuICAgICAgICBjb25zdCBhY19hdF8wID0gTWF0aC5hY29zKGNsYW1wKHZlYzMuZG90KGNhLCB0YSksIC0xLCAxKSk7XG4gICAgICAgIGNvbnN0IGFjX2FiXzEgPSBNYXRoLmFjb3MoY2xhbXAoKGxjYiAqIGxjYiAtIGxhYiAqIGxhYiAtIGxhdCAqIGxhdCkgLyAoLTIgKiBsYWIgKiBsYXQpLCAtMSwgMSkpO1xuICAgICAgICBjb25zdCBiYV9iY18xID0gTWF0aC5hY29zKGNsYW1wKChsYXQgKiBsYXQgLSBsYWIgKiBsYWIgLSBsY2IgKiBsY2IpIC8gKC0yICogbGFiICogbGNiKSwgLTEsIDEpKTtcbiAgICAgICAgaWYgKGhlbHBlcikge1xuICAgICAgICAgICAgdmVjMy5zdWIoYmEsIGhlbHBlciwgYik7XG4gICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZShiYSwgYmEpO1xuICAgICAgICB9XG4gICAgICAgIHZlYzMuY3Jvc3MoYXhpczAsIGNhLCBiYSk7XG4gICAgICAgIHZlYzMubm9ybWFsaXplKGF4aXMwLCBheGlzMCk7XG4gICAgICAgIHZlYzMuY3Jvc3MoYXhpczEsIGMsIHRhcmdldFBvcyk7XG4gICAgICAgIHZlYzMubm9ybWFsaXplKGF4aXMxLCBheGlzMSk7XG4gICAgICAgIG1pZGRsZS50cmFuc2Zvcm1WZWN0b3JJbnZlcnNlTG9jYWwodGVtcCwgYXhpczApO1xuICAgICAgICByb290LnJvdGF0ZUF4aXNBbmdsZVJhZE9iamVjdChheGlzMSwgYWNfYXRfMCk7XG4gICAgICAgIHJvb3Qucm90YXRlQXhpc0FuZ2xlUmFkT2JqZWN0KGF4aXMwLCBhY19hYl8xIC0gYWNfYWJfMCk7XG4gICAgICAgIG1pZGRsZS5yb3RhdGVBeGlzQW5nbGVSYWRPYmplY3QoYXhpczAsIGJhX2JjXzEgLSBiYV9iY18wKTtcbiAgICB9O1xufSkoKTtcbi8qKlxuICogSW52ZXJzZSBraW5lbWF0aWNzIGZvciB0d28tam9pbnQgY2hhaW5zIChlLmcuIGtuZWVzIG9yIGVsYm93cylcbiAqL1xuY2xhc3MgVHdvSm9pbnRJa1NvbHZlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3R3by1qb2ludC1pay1zb2x2ZXInO1xuICAgIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xuICAgICAgICAvKiogUm9vdCBib25lLCBuZXZlciBtb3ZlcyAqL1xuICAgICAgICByb290OiBQcm9wZXJ0eS5vYmplY3QoKSxcbiAgICAgICAgLyoqIEJvbmUgYXR0YWNoZWQgdG8gdGhlIHJvb3QgKi9cbiAgICAgICAgbWlkZGxlOiBQcm9wZXJ0eS5vYmplY3QoKSxcbiAgICAgICAgLyoqIEJvbmUgYXR0YWNoZWQgdG8gdGhlIG1pZGRsZSAqL1xuICAgICAgICBlbmQ6IFByb3BlcnR5Lm9iamVjdCgpLFxuICAgICAgICAvKiogVGFyZ2V0IHRoZSBqb2lucyBzaG91bGQgcmVhY2ggZm9yICovXG4gICAgICAgIHRhcmdldDogUHJvcGVydHkub2JqZWN0KCksXG4gICAgICAgIC8qKiBGbGFnIGZvciBjb3B5aW5nIHJvdGF0aW9uIGZyb20gdGFyZ2V0IHRvIGVuZCAqL1xuICAgICAgICBjb3B5VGFyZ2V0Um90YXRpb246IFByb3BlcnR5LmJvb2wodHJ1ZSksXG4gICAgICAgIC8qKiBIZWxwZXIgb2JqZWN0IHRvIHVzZSB0byBkZXRlcm1pbmUgam9pbnQgcm90YXRpb24gYXhpcyAqL1xuICAgICAgICBoZWxwZXI6IFByb3BlcnR5Lm9iamVjdCgpLFxuICAgIH07XG4gICAgdGltZSA9IDA7XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMucm9vdC5nZXRUcmFuc2Zvcm1Mb2NhbChyb290VHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5taWRkbGUuZ2V0VHJhbnNmb3JtTG9jYWwobWlkZGxlVHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5lbmQuZ2V0VHJhbnNmb3JtTG9jYWwoZW5kVHJhbnNmb3JtKTtcbiAgICB9XG4gICAgdXBkYXRlKGR0KSB7XG4gICAgICAgIHRoaXMudGltZSArPSBkdDtcbiAgICAgICAgLyogUmVzZXQgdG8gb3JpZ2luYWwgcG9zZSBmb3Igc3RhYmlsaXR5ICovXG4gICAgICAgIHRoaXMucm9vdC5zZXRUcmFuc2Zvcm1Mb2NhbChyb290VHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5taWRkbGUuc2V0VHJhbnNmb3JtTG9jYWwobWlkZGxlVHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5lbmQuc2V0VHJhbnNmb3JtTG9jYWwoZW5kVHJhbnNmb3JtKTtcbiAgICAgICAgdGhpcy5yb290LmdldFNjYWxpbmdXb3JsZChyb290U2NhbGluZyk7XG4gICAgICAgIC8qIEdldCBqb2ludCBwb3NpdGlvbnMgaW4gcm9vdC1zcGFjZSAqL1xuICAgICAgICB0aGlzLm1pZGRsZS5nZXRQb3NpdGlvbkxvY2FsKG1pZGRsZVBvcyk7XG4gICAgICAgIHRoaXMuZW5kLmdldFBvc2l0aW9uTG9jYWwoZW5kUG9zKTtcbiAgICAgICAgdGhpcy5taWRkbGUudHJhbnNmb3JtUG9pbnRMb2NhbChlbmRQb3MsIGVuZFBvcyk7XG4gICAgICAgIGlmICh0aGlzLmhlbHBlcikge1xuICAgICAgICAgICAgLyogR2V0IGhlbHBlciBwb3NpdGlvbiBpbiByb290IHNwYWNlICovXG4gICAgICAgICAgICB0aGlzLmhlbHBlci5nZXRQb3NpdGlvbldvcmxkKGhlbHBlclBvcyk7XG4gICAgICAgICAgICB0aGlzLnJvb3QudHJhbnNmb3JtUG9pbnRJbnZlcnNlV29ybGQoaGVscGVyUG9zLCBoZWxwZXJQb3MpO1xuICAgICAgICAgICAgdmVjMy5kaXYoaGVscGVyUG9zLCBoZWxwZXJQb3MsIHJvb3RTY2FsaW5nKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBHZXQgdGFyZ2V0IHBvc2l0aW9uIGluIHJvb3Qgc3BhY2UgKi9cbiAgICAgICAgdGhpcy50YXJnZXQuZ2V0UG9zaXRpb25Xb3JsZCh0YXJnZXRQb3MpO1xuICAgICAgICB0aGlzLnJvb3QudHJhbnNmb3JtUG9pbnRJbnZlcnNlV29ybGQodGFyZ2V0UG9zLCB0YXJnZXRQb3MpO1xuICAgICAgICB2ZWMzLmRpdih0YXJnZXRQb3MsIHRhcmdldFBvcywgcm9vdFNjYWxpbmcpO1xuICAgICAgICB0d29Kb2ludElLKHRoaXMucm9vdCwgdGhpcy5taWRkbGUsIG1pZGRsZVBvcywgZW5kUG9zLCB0YXJnZXRQb3MsIDAuMDEsIHRoaXMuaGVscGVyID8gaGVscGVyUG9zIDogbnVsbCwgdGhpcy50aW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY29weVRhcmdldFJvdGF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmVuZC5zZXRSb3RhdGlvbldvcmxkKHRoaXMudGFyZ2V0LmdldFJvdGF0aW9uV29ybGQodGVtcFF1YXQpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCB7IFR3b0pvaW50SWtTb2x2ZXIgfTtcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIFRleHR1cmUsIFByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHNldEZpcnN0TWF0ZXJpYWxUZXh0dXJlIH0gZnJvbSAnLi91dGlscy91dGlscy5qcyc7XG4vKipcbiAqIERvd25sb2FkcyBhIHZpZGVvIGZyb20gVVJMIGFuZCBhcHBsaWVzIGl0IGFzIGBkaWZmdXNlVGV4dHVyZWAgb3IgYGZsYXRUZXh0dXJlYFxuICogb24gZ2l2ZW4gbWF0ZXJpYWwuXG4gKlxuICogVmlkZW8gdGV4dHVyZXMgbmVlZCB0byBiZSB1cGRhdGVkIHJlZ3VsYXJseSB3aGVuZXZlclxuICogYSBuZXcgZnJhbWUgaXMgYXZhaWxhYmxlLiBUaGlzIGNvbXBvbmVudCBoYW5kbGVzIHRoZVxuICogZGV0ZWN0aW9uIG9mIGEgbmV3IGZyYW1lIGFuZCB1cGRhdGVzIHRoZSB0ZXh0dXJlIHRvXG4gKiByZWZsZWN0IHRoZSB2aWRlbydzIGN1cnJlbnQgZnJhbWUuXG4gKlxuICogTWF0ZXJpYWxzIGZyb20gdGhlIGZvbGxvd2luZyBzaGFkZXJzIGFyZSBzdXBwb3J0ZWQ6XG4gKiAgLSBcIlBob25nIE9wYXF1ZSBUZXh0dXJlZFwiXG4gKiAgLSBcIkZsYXQgT3BhcXVlIFRleHR1cmVkXCJcbiAqICAtIFwiQmFja2dyb3VuZFwiXG4gKiAgLSBcIlBoeXNpY2FsIE9wYXF1ZSBUZXh0dXJlZFwiXG4gKiAgLSBcIkZvbGlhZ2VcIlxuICpcbiAqIFRoZSB2aWRlbyBjYW4gYmUgYWNjZXNzZWQgdGhyb3VnaCBgdGhpcy52aWRlb2A6XG4gKlxuICogYGBganNcbiAqICAgbGV0IHZpZGVvVGV4dHVyZSA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudCgndmlkZW8tdGV4dHVyZScpO1xuICogICB2aWRlb1RleHR1cmUudmlkZW8ucGxheSgpO1xuICogICB2aWRlb1RleHR1cmUudmlkZW8ucGF1c2UoKTtcbiAqIGBgYFxuICpcbiAqIFNlZSBbVmlkZW8gRXhhbXBsZV0oL3Nob3djYXNlL3ZpZGVvKS5cbiAqL1xuY2xhc3MgVmlkZW9UZXh0dXJlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndmlkZW8tdGV4dHVyZSc7XG4gICAgc3RhdGljIFByb3BlcnRpZXMgPSB7XG4gICAgICAgIC8qKiBVUkwgdG8gZG93bmxvYWQgdmlkZW8gZnJvbSAqL1xuICAgICAgICB1cmw6IFByb3BlcnR5LnN0cmluZygpLFxuICAgICAgICAvKiogTWF0ZXJpYWwgdG8gYXBwbHkgdGhlIHZpZGVvIHRleHR1cmUgdG8gKi9cbiAgICAgICAgbWF0ZXJpYWw6IFByb3BlcnR5Lm1hdGVyaWFsKCksXG4gICAgICAgIC8qKiBXaGV0aGVyIHRvIGxvb3AgdGhlIHZpZGVvICovXG4gICAgICAgIGxvb3A6IFByb3BlcnR5LmJvb2wodHJ1ZSksXG4gICAgICAgIC8qKiBXaGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgc3RhcnQgcGxheWluZyB0aGUgdmlkZW8gKi9cbiAgICAgICAgYXV0b3BsYXk6IFByb3BlcnR5LmJvb2wodHJ1ZSksXG4gICAgICAgIC8qKiBXaGV0aGVyIHRvIG11dGUgc291bmQgKi9cbiAgICAgICAgbXV0ZWQ6IFByb3BlcnR5LmJvb2wodHJ1ZSksXG4gICAgICAgIC8qKiBOYW1lIG9mIHRoZSB0ZXh0dXJlIHByb3BlcnR5IHRvIHNldCAqL1xuICAgICAgICB0ZXh0dXJlUHJvcGVydHk6IFByb3BlcnR5LnN0cmluZygnYXV0bycpLFxuICAgIH07XG4gICAgaW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hdGVyaWFsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcigndmlkZW8tdGV4dHVyZTogbWF0ZXJpYWwgcHJvcGVydHkgbm90IHNldCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZnJhbWVVcGRhdGVSZXF1ZXN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy52aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgIHRoaXMudmlkZW8uc3JjID0gdGhpcy51cmw7XG4gICAgICAgIHRoaXMudmlkZW8uY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgICAgdGhpcy52aWRlby5wbGF5c0lubGluZSA9IHRydWU7XG4gICAgICAgIHRoaXMudmlkZW8ubG9vcCA9IHRoaXMubG9vcDtcbiAgICAgICAgdGhpcy52aWRlby5tdXRlZCA9IHRoaXMubXV0ZWQ7XG4gICAgICAgIHRoaXMudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmF1dG9wbGF5KSB7XG4gICAgICAgICAgICBjb25zdCBwbGF5QWZ0ZXJVc2VyR2VzdHVyZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBwbGF5QWZ0ZXJVc2VyR2VzdHVyZSk7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBwbGF5QWZ0ZXJVc2VyR2VzdHVyZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcGxheUFmdGVyVXNlckdlc3R1cmUpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBwbGF5QWZ0ZXJVc2VyR2VzdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXBwbHlUZXh0dXJlKCkge1xuICAgICAgICBjb25zdCBtYXQgPSB0aGlzLm1hdGVyaWFsO1xuICAgICAgICBjb25zdCBzaGFkZXIgPSBtYXQuc2hhZGVyO1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gKHRoaXMudGV4dHVyZSA9IG5ldyBUZXh0dXJlKHRoaXMuZW5naW5lLCB0aGlzLnZpZGVvKSk7XG4gICAgICAgIGlmICghc2V0Rmlyc3RNYXRlcmlhbFRleHR1cmUobWF0LCB0ZXh0dXJlLCB0aGlzLnRleHR1cmVQcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NoYWRlcicsIHNoYWRlciwgJ25vdCBzdXBwb3J0ZWQgYnkgdmlkZW8tdGV4dHVyZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgncmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjaycgaW4gdGhpcy52aWRlbykge1xuICAgICAgICAgICAgdGhpcy52aWRlby5yZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrKHRoaXMudXBkYXRlVmlkZW8uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZVVwZGF0ZVJlcXVlc3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGUoZHQpIHtcbiAgICAgICAgaWYgKHRoaXMubG9hZGVkICYmIHRoaXMuZnJhbWVVcGRhdGVSZXF1ZXN0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHR1cmUudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvKiBBcHBseSB0ZXh0dXJlIG9uIGZpcnN0IGZyYW1lIHVwZGF0ZSByZXF1ZXN0ICovXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBseVRleHR1cmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZnJhbWVVcGRhdGVSZXF1ZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVWaWRlbygpIHtcbiAgICAgICAgdGhpcy5mcmFtZVVwZGF0ZVJlcXVlc3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMudmlkZW8ucmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayh0aGlzLnVwZGF0ZVZpZGVvLmJpbmQodGhpcykpO1xuICAgIH1cbn1cbmV4cG9ydCB7IFZpZGVvVGV4dHVyZSB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG4vKipcbiAqIEFsbG93cyBzd2l0Y2hpbmcgYWxsIG90aGVyIGNvbXBvbmVudHMgb24gYW4gb2JqZWN0IHRvIGFjdGl2ZS9pbmFjdGl2ZVxuICogZGVwZW5kaW5nIG9uIHdoZXRoZXIgYSBWUi9BUiBzZXNzaW9uIGlzIGFjdGl2ZS5cbiAqXG4gKiBVc2VmdWwgZm9yIGhpZGluZyBjb250cm9sbGVycyB1bnRpbCB0aGUgdXNlciBlbnRlcnMgVlIgZm9yIGV4YW1wbGUuXG4gKi9cbmNsYXNzIFZyTW9kZUFjdGl2ZVN3aXRjaCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3ZyLW1vZGUtYWN0aXZlLXN3aXRjaCc7XG4gICAgc3RhdGljIFByb3BlcnRpZXMgPSB7XG4gICAgICAgIC8qKiBXaGVuIGNvbXBvbmVudHMgc2hvdWxkIGJlIGFjdGl2ZTogSW4gVlIgb3Igd2hlbiBub3QgaW4gVlIgKi9cbiAgICAgICAgYWN0aXZhdGVDb21wb25lbnRzOiB7XG4gICAgICAgICAgICB0eXBlOiBUeXBlLkVudW0sXG4gICAgICAgICAgICB2YWx1ZXM6IFsnaW4gVlInLCAnaW4gbm9uLVZSJ10sXG4gICAgICAgICAgICBkZWZhdWx0OiAnaW4gVlInLFxuICAgICAgICB9LFxuICAgICAgICAvKiogV2hldGhlciBjaGlsZCBvYmplY3QncyBjb21wb25lbnRzIHNob3VsZCBiZSBhZmZlY3RlZCAqL1xuICAgICAgICBhZmZlY3RDaGlsZHJlbjogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IHRydWUgfSxcbiAgICB9O1xuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5nZXRDb21wb25lbnRzKHRoaXMub2JqZWN0KTtcbiAgICAgICAgLyogSW5pdGlhbCBhY3RpdmF0aW9uL2RlYWN0aXZhdGlvbiAqL1xuICAgICAgICB0aGlzLm9uWFJTZXNzaW9uRW5kKCk7XG4gICAgICAgIHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayA9IHRoaXMub25YUlNlc3Npb25TdGFydC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLm9uU2Vzc2lvbkVuZENhbGxiYWNrID0gdGhpcy5vblhSU2Vzc2lvbkVuZC5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBvbkFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvblN0YXJ0LmFkZCh0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2spO1xuICAgICAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvbkVuZC5hZGQodGhpcy5vblNlc3Npb25FbmRDYWxsYmFjayk7XG4gICAgfVxuICAgIG9uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5yZW1vdmUodGhpcy5vblNlc3Npb25TdGFydENhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25FbmQucmVtb3ZlKHRoaXMub25TZXNzaW9uRW5kQ2FsbGJhY2spO1xuICAgIH1cbiAgICBnZXRDb21wb25lbnRzKG9iaikge1xuICAgICAgICBjb25zdCBjb21wcyA9IG9iai5nZXRDb21wb25lbnRzKCkuZmlsdGVyKChjKSA9PiBjLnR5cGUgIT09ICd2ci1tb2RlLWFjdGl2ZS1zd2l0Y2gnKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzLmNvbmNhdChjb21wcyk7XG4gICAgICAgIGlmICh0aGlzLmFmZmVjdENoaWxkcmVuKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBvYmouY2hpbGRyZW47XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnRzKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRDb21wb25lbnRzQWN0aXZlKGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBjb21wcyA9IHRoaXMuY29tcG9uZW50cztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29tcHNbaV0uYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uWFJTZXNzaW9uU3RhcnQoKSB7XG4gICAgICAgIHRoaXMuc2V0Q29tcG9uZW50c0FjdGl2ZSh0aGlzLmFjdGl2YXRlQ29tcG9uZW50cyA9PSAwKTtcbiAgICB9XG4gICAgb25YUlNlc3Npb25FbmQoKSB7XG4gICAgICAgIHRoaXMuc2V0Q29tcG9uZW50c0FjdGl2ZSh0aGlzLmFjdGl2YXRlQ29tcG9uZW50cyAhPSAwKTtcbiAgICB9XG59XG5leHBvcnQgeyBWck1vZGVBY3RpdmVTd2l0Y2ggfTtcbiIsICJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG5pbXBvcnQgeyBDb2xsaWRlciwgQ29sbGlzaW9uQ29tcG9uZW50LCBDb21wb25lbnQsIEVtaXR0ZXIsIE1lc2gsIE1lc2hBdHRyaWJ1dGUsIE1lc2hDb21wb25lbnQsIE1lc2hJbmRleFR5cGUsIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgc2V0WFJSaWdpZFRyYW5zZm9ybUxvY2FsIH0gZnJvbSAnLi91dGlscy93ZWJ4ci5qcyc7XG4vLyBGSVhNRTogZWFyY3V0IG92ZXJyaWRlcyBkZWZhdWx0IGV4cG9ydCwgYnJlYWtpbmcgb3VyIHRlc3RzXG5pbXBvcnQgZWFyY3V0IGZyb20gJ2VhcmN1dCc7XG5jb25zdCB0ZW1wVmVjMyA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4vKiogQ29tcHV0ZSBtaW5pbXVtIGFuZCBtYXhpdW0gZXh0ZW50cyBvZiBnaXZlbiBsaXN0IG9mIGNvbnRvdXIgcG9pbnRzICovXG5mdW5jdGlvbiBleHRlbnRzRnJvbUNvbnRvdXIob3V0LCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCA9PSAwKVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIGxldCBhYnNNYXhYID0gTWF0aC5hYnMocG9pbnRzWzBdLngpO1xuICAgIGxldCBhYnNNYXhaID0gTWF0aC5hYnMocG9pbnRzWzBdLnopO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGFic01heFggPSBNYXRoLm1heChhYnNNYXhYLCBNYXRoLmFicyhwb2ludHNbaV0ueCkpO1xuICAgICAgICBhYnNNYXhaID0gTWF0aC5tYXgoYWJzTWF4WiwgTWF0aC5hYnMocG9pbnRzW2ldLnopKTtcbiAgICB9XG4gICAgb3V0WzBdID0gYWJzTWF4WDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IGFic01heFo7XG59XG4vKiogQ2hlY2sgd2hldGhlciB4IGxpZXMgYmV0d2VlbiBhIGFuZCBiICovXG5mdW5jdGlvbiB3aXRoaW4oeCwgYSwgYikge1xuICAgIGlmIChhID4gYilcbiAgICAgICAgcmV0dXJuIHggPCBhICYmIHggPiBiO1xuICAgIHJldHVybiB4ID4gYSAmJiB4IDwgYjtcbn1cbi8qKlxuICogQ2hlY2sgd2hldGhlciBnaXZlbiBwb2ludCBvbiBwbGFuZSdzIGJvdW5kaW5nIGJveCBpcyBpbnNpZGUgcGxhbmUncyBwb2x5Z29uXG4gKlxuICogQHBhcmFtIHAgM0QgcG9pbnQgaW4gcGxhbmUncyBsb2NhbCBzcGFjZSwgWSB2YWx1ZSBpcyBpZ25vcmVkLCBzaW5jZSBpdCBpcyBhc3N1bWVkXG4gKiAgICAgdGhhdCB0aGUgcG9pbnQgd2FzIGNoZWNrZWQgYWdhaW5zdCB0aGUgcGxhbmUncyBib3VuZGluZyBib3guXG4gKiBAcGFyYW0gcGxhbmUgWFJQbGFuZSB0aGF0IGhhcyBgWFJQbGFuZS5wb2x5Z29uYFxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBwb2ludCBsaWVzIG9uIHRoZSBwbGFuZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb2ludExvY2FsT25YUlBsYW5lUG9seWdvbihwLCBwbGFuZSkge1xuICAgIGNvbnN0IHBvaW50cyA9IHBsYW5lLnBvbHlnb247XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAzKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLyogQ291bnQgcmF5IGludGVyc2VjdGlvbnM6IGV2ZW4gPT0gaW5zaWRlLCBvZGQgPT0gb3V0c2lkZSAqL1xuICAgIGNvbnN0IHBYID0gcFswXTtcbiAgICBjb25zdCBwWiA9IHBbMl07XG4gICAgbGV0IGludGVyc2VjdGlvbnMgPSAwO1xuICAgIGZvciAobGV0IG4gPSAwLCBsID0gcG9pbnRzLmxlbmd0aCAtIDE7IG4gPCBwb2ludHMubGVuZ3RoOyArK24pIHtcbiAgICAgICAgY29uc3QgYVggPSBwb2ludHNbbF0ueDtcbiAgICAgICAgY29uc3QgYVogPSBwb2ludHNbbF0uejtcbiAgICAgICAgY29uc3QgcyA9IChwb2ludHNbbl0ueiAtIGFaKSAvIChwb2ludHNbbl0ueCAtIGFYKTtcbiAgICAgICAgY29uc3QgeCA9IE1hdGguYWJzKChwWiAtIGFaKSAvIHMpO1xuICAgICAgICBpZiAoeCA+PSAwLjAgJiYgeCA8PSAxLjAgJiYgd2l0aGluKHggKyBwWCwgYVgsIHBvaW50c1tuXS54KSlcbiAgICAgICAgICAgICsraW50ZXJzZWN0aW9ucztcbiAgICAgICAgbCA9IG47XG4gICAgfVxuICAgIHJldHVybiAoaW50ZXJzZWN0aW9ucyAmIDEpID09IDA7XG59XG4vKipcbiAqIENoZWNrIHdoZXRoZXIgZ2l2ZW4gcG9pbnQgb24gcGxhbmUncyBib3VuZGluZyBib3ggaXMgaW5zaWRlIHBsYW5lJ3MgcG9seWdvblxuICpcbiAqIEBwYXJhbSBwIDNEIHBvaW50IHRvIHRlc3QuIEl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgcG9pbnQgd2FzIGNoZWNrZWQgYWdhaW5zdFxuICogICAgIHRoZSBwbGFuZSdzIGJvdW5kaW5nIGJveCBiZWZvcmVoYW5kLlxuICogQHBhcmFtIHBsYW5lIFhSUGxhbmUgdGhhdCBoYXMgYFhSUGxhbmUucG9seWdvbmBcbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgcG9pbnQgbGllcyBvbiB0aGUgcGxhbmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUG9pbnRXb3JsZE9uWFJQbGFuZVBvbHlnb24ob2JqZWN0LCBwLCBwbGFuZSkge1xuICAgIGlmIChwbGFuZS5wb2x5Z29uLmxlbmd0aCA8IDMpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpc1BvaW50TG9jYWxPblhSUGxhbmVQb2x5Z29uKG9iamVjdC50cmFuc2Zvcm1Qb2ludEludmVyc2VXb3JsZCh0ZW1wVmVjMywgcCksIHBsYW5lKTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgcGxhbmUgbWVzaCBmcm9tIGEgbGlzdCBvZiBjb250b3VyIHBvaW50c1xuICpcbiAqIEBwYXJhbSBlbmdpbmUgRW5naW5lIHRvIGNyZWF0ZSB0aGUgbWVzaCB3aXRoXG4gKiBAcGFyYW0gcG9pbnRzIENvbnRvdXIgcG9pbnRzXG4gKiBAcGFyYW0gbWVzaFRvVXBkYXRlIE9wdGlvbmFsIG1lc2ggdG8gdXBkYXRlIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb25lLlxuICovXG5mdW5jdGlvbiBwbGFuZU1lc2hGcm9tQ29udG91cihlbmdpbmUsIHBvaW50cywgbWVzaFRvVXBkYXRlID0gbnVsbCkge1xuICAgIGNvbnN0IHZlcnRleENvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkodmVydGV4Q291bnQgKiAyKTtcbiAgICBmb3IgKGxldCBpID0gMCwgZCA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgKytpLCBkICs9IDIpIHtcbiAgICAgICAgdmVydGljZXNbZF0gPSBwb2ludHNbaV0ueDtcbiAgICAgICAgdmVydGljZXNbZCArIDFdID0gcG9pbnRzW2ldLno7XG4gICAgfVxuICAgIGNvbnN0IHRyaWFuZ2xlcyA9IGVhcmN1dCh2ZXJ0aWNlcyk7XG4gICAgY29uc3QgbWVzaCA9IG1lc2hUb1VwZGF0ZSB8fFxuICAgICAgICBuZXcgTWVzaChlbmdpbmUsIHtcbiAgICAgICAgICAgIHZlcnRleENvdW50LFxuICAgICAgICAgICAgLyogQXNzdW1wdGlvbiBoZXJlIHRoYXQgd2Ugd2lsbCBuZXZlciBoYXZlIG1vcmUgdGhhbiAyNTYgcG9pbnRzXG4gICAgICAgICAgICAgKiBpbiB0aGUgZGV0ZWN0ZWQgcGxhbmUgbWVzaGVzISAqL1xuICAgICAgICAgICAgaW5kZXhUeXBlOiBNZXNoSW5kZXhUeXBlLlVuc2lnbmVkQnl0ZSxcbiAgICAgICAgICAgIGluZGV4RGF0YTogdHJpYW5nbGVzLFxuICAgICAgICB9KTtcbiAgICBpZiAobWVzaC52ZXJ0ZXhDb3VudCAhPT0gdmVydGV4Q291bnQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCd2ZXJ0ZXhDb3VudCBvZiBtZXNoVG9VcGRhdGUgZGlkIG5vdCBtYXRjaCByZXF1aXJlZCB2ZXJ0ZXhDb3VudCcpO1xuICAgICAgICByZXR1cm4gbWVzaDtcbiAgICB9XG4gICAgY29uc3QgcG9zaXRpb25zID0gbWVzaC5hdHRyaWJ1dGUoTWVzaEF0dHJpYnV0ZS5Qb3NpdGlvbik7XG4gICAgY29uc3QgdGV4dHVyZUNvb3JkcyA9IG1lc2guYXR0cmlidXRlKE1lc2hBdHRyaWJ1dGUuVGV4dHVyZUNvb3JkaW5hdGUpO1xuICAgIGNvbnN0IG5vcm1hbHMgPSBtZXNoLmF0dHJpYnV0ZShNZXNoQXR0cmlidXRlLk5vcm1hbCk7XG4gICAgdGVtcFZlYzNbMV0gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBzID0gMDsgaSA8IHZlcnRleENvdW50OyArK2ksIHMgKz0gMikge1xuICAgICAgICB0ZW1wVmVjM1swXSA9IHZlcnRpY2VzW3NdO1xuICAgICAgICB0ZW1wVmVjM1syXSA9IHZlcnRpY2VzW3MgKyAxXTtcbiAgICAgICAgcG9zaXRpb25zLnNldChpLCB0ZW1wVmVjMyk7XG4gICAgfVxuICAgIHRleHR1cmVDb29yZHM/LnNldCgwLCB2ZXJ0aWNlcyk7XG4gICAgaWYgKG5vcm1hbHMpIHtcbiAgICAgICAgdGVtcFZlYzNbMF0gPSAwO1xuICAgICAgICB0ZW1wVmVjM1sxXSA9IDE7XG4gICAgICAgIHRlbXBWZWMzWzJdID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICAgICAgICBub3JtYWxzLnNldChpLCB0ZW1wVmVjMyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1lc2hUb1VwZGF0ZSlcbiAgICAgICAgbWVzaC51cGRhdGUoKTtcbiAgICByZXR1cm4gbWVzaDtcbn1cbi8qKlxuICogR2VuZXJhdGUgbWVzaGVzIGFuZCBjb2xsaXNpb25zIGZvciBYUlBsYW5lcyB1c2luZyBbV2ViWFIgRGV2aWNlIEFQSSAtIFBsYW5lIERldGVjdGlvbl0oaHR0cHM6Ly9pbW1lcnNpdmUtd2ViLmdpdGh1Yi5pby9yZWFsLXdvcmxkLWdlb21ldHJ5L3BsYW5lLWRldGVjdGlvbi5odG1sKS5cbiAqL1xuY2xhc3MgUGxhbmVEZXRlY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdwbGFuZS1kZXRlY3Rpb24nO1xuICAgIC8qKlxuICAgICAqIE1hdGVyaWFsIHRvIGFzc2lnbiB0byBjcmVhdGVkIHBsYW5lIG1lc2hlcyBvciBgbnVsbGAgaWYgbWVzaGVzIHNob3VsZCBub3QgYmUgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwbGFuZU1hdGVyaWFsID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBDb2xsaXNpb24gbWFzayB0byBhc3NpZ24gdG8gbmV3bHkgY3JlYXRlZCBjb2xsaXNpb24gY29tcG9uZW50cyBvciBhIG5lZ2F0aXZlIHZhbHVlIGlmXG4gICAgICogY29sbGlzaW9uIGNvbXBvbmVudHMgc2hvdWxkIG5vdCBiZSBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNvbGxpc2lvbk1hc2sgPSAtMTtcbiAgICAvKiogTWFwIG9mIGFsbCBwbGFuZXMgYW5kIHRoZWlyIGxhc3QgdXBkYXRlZCB0aW1lc3RhbXBzICovXG4gICAgcGxhbmVzID0gbmV3IE1hcCgpO1xuICAgIC8qKiBPYmplY3RzIGdlbmVyYXRlZCBmb3IgZWFjaCBYUlBsYW5lICovXG4gICAgcGxhbmVPYmplY3RzID0gbmV3IE1hcCgpO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBhIHBsYW5lIHN0YXJ0cyB0cmFja2luZyAqL1xuICAgIG9uUGxhbmVGb3VuZCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgLyoqIENhbGxlZCB3aGVuIGEgcGxhbmUgc3RvcHMgdHJhY2tpbmcgKi9cbiAgICBvblBsYW5lTG9zdCA9IG5ldyBFbWl0dGVyKCk7XG4gICAgdXBkYXRlKCkge1xuICAgICAgICBpZiAoIXRoaXMuZW5naW5lLnhyPy5mcmFtZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodGhpcy5lbmdpbmUueHIuZnJhbWUuZGV0ZWN0ZWRQbGFuZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcigncGxhbmUtZGV0ZWN0aW9uOiBXZWJYUiBmZWF0dXJlIG5vdCBhdmFpbGFibGUuJyk7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgZGV0ZWN0ZWRQbGFuZXMgPSB0aGlzLmVuZ2luZS54ci5mcmFtZS5kZXRlY3RlZFBsYW5lcztcbiAgICAgICAgZm9yIChjb25zdCBbcGxhbmUsIF9dIG9mIHRoaXMucGxhbmVzKSB7XG4gICAgICAgICAgICBpZiAoIWRldGVjdGVkUGxhbmVzLmhhcyhwbGFuZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNwbGFuZUxvc3QocGxhbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRldGVjdGVkUGxhbmVzLmZvckVhY2goKHBsYW5lKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wbGFuZXMuaGFzKHBsYW5lKSkge1xuICAgICAgICAgICAgICAgIGlmIChwbGFuZS5sYXN0Q2hhbmdlZFRpbWUgPiB0aGlzLnBsYW5lcy5nZXQocGxhbmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3BsYW5lVXBkYXRlKHBsYW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNwbGFuZUZvdW5kKHBsYW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuI3BsYW5lVXBkYXRlUG9zZShwbGFuZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAjcGxhbmVMb3N0KHBsYW5lKSB7XG4gICAgICAgIHRoaXMucGxhbmVzLmRlbGV0ZShwbGFuZSk7XG4gICAgICAgIGNvbnN0IG8gPSB0aGlzLnBsYW5lT2JqZWN0cy5nZXQocGxhbmUpO1xuICAgICAgICB0aGlzLm9uUGxhbmVMb3N0Lm5vdGlmeShwbGFuZSwgbyk7XG4gICAgICAgIC8qIFVzZXIgbWlnaHQgZGVzdHJveSB0aGUgb2JqZWN0ICovXG4gICAgICAgIGlmIChvLm9iamVjdElkID4gMClcbiAgICAgICAgICAgIG8uZGVzdHJveSgpO1xuICAgIH1cbiAgICAjcGxhbmVGb3VuZChwbGFuZSkge1xuICAgICAgICB0aGlzLnBsYW5lcy5zZXQocGxhbmUsIHBsYW5lLmxhc3RDaGFuZ2VkVGltZSk7XG4gICAgICAgIGNvbnN0IG8gPSB0aGlzLmVuZ2luZS5zY2VuZS5hZGRPYmplY3QodGhpcy5vYmplY3QpO1xuICAgICAgICB0aGlzLnBsYW5lT2JqZWN0cy5zZXQocGxhbmUsIG8pO1xuICAgICAgICBpZiAodGhpcy5wbGFuZU1hdGVyaWFsKSB7XG4gICAgICAgICAgICBvLmFkZENvbXBvbmVudChNZXNoQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgbWVzaDogcGxhbmVNZXNoRnJvbUNvbnRvdXIodGhpcy5lbmdpbmUsIHBsYW5lLnBvbHlnb24pLFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsOiB0aGlzLnBsYW5lTWF0ZXJpYWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb2xsaXNpb25NYXNrID49IDApIHtcbiAgICAgICAgICAgIGV4dGVudHNGcm9tQ29udG91cih0ZW1wVmVjMywgcGxhbmUucG9seWdvbik7XG4gICAgICAgICAgICB0ZW1wVmVjM1sxXSA9IDAuMDI1O1xuICAgICAgICAgICAgby5hZGRDb21wb25lbnQoQ29sbGlzaW9uQ29tcG9uZW50LCB7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IHRoaXMuY29sbGlzaW9uTWFzayxcbiAgICAgICAgICAgICAgICBjb2xsaWRlcjogQ29sbGlkZXIuQm94LFxuICAgICAgICAgICAgICAgIGV4dGVudHM6IHRlbXBWZWMzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblBsYW5lRm91bmQubm90aWZ5KHBsYW5lLCBvKTtcbiAgICB9XG4gICAgI3BsYW5lVXBkYXRlKHBsYW5lKSB7XG4gICAgICAgIHRoaXMucGxhbmVzLnNldChwbGFuZSwgcGxhbmUubGFzdENoYW5nZWRUaW1lKTtcbiAgICAgICAgY29uc3QgcGxhbmVNZXNoID0gdGhpcy5wbGFuZU9iamVjdHMuZ2V0KHBsYW5lKS5nZXRDb21wb25lbnQoTWVzaENvbXBvbmVudCk7XG4gICAgICAgIGlmICghcGxhbmVNZXNoKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBwbGFuZU1lc2hGcm9tQ29udG91cih0aGlzLmVuZ2luZSwgcGxhbmUucG9seWdvbiwgcGxhbmVNZXNoLm1lc2gpO1xuICAgIH1cbiAgICAjcGxhbmVVcGRhdGVQb3NlKHBsYW5lKSB7XG4gICAgICAgIGNvbnN0IG8gPSB0aGlzLnBsYW5lT2JqZWN0cy5nZXQocGxhbmUpO1xuICAgICAgICBjb25zdCBwb3NlID0gdGhpcy5lbmdpbmUueHIuZnJhbWUuZ2V0UG9zZShwbGFuZS5wbGFuZVNwYWNlLCB0aGlzLmVuZ2luZS54ci5jdXJyZW50UmVmZXJlbmNlU3BhY2UpO1xuICAgICAgICBpZiAoIXBvc2UpIHtcbiAgICAgICAgICAgIG8uYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0WFJSaWdpZFRyYW5zZm9ybUxvY2FsKG8sIHBvc2UudHJhbnNmb3JtKTtcbiAgICB9XG59XG5fX2RlY29yYXRlKFtcbiAgICBwcm9wZXJ0eS5tYXRlcmlhbCgpXG5dLCBQbGFuZURldGVjdGlvbi5wcm90b3R5cGUsIFwicGxhbmVNYXRlcmlhbFwiLCB2b2lkIDApO1xuX19kZWNvcmF0ZShbXG4gICAgcHJvcGVydHkuaW50KClcbl0sIFBsYW5lRGV0ZWN0aW9uLnByb3RvdHlwZSwgXCJjb2xsaXNpb25NYXNrXCIsIHZvaWQgMCk7XG5leHBvcnQgeyBQbGFuZURldGVjdGlvbiB9O1xuIiwgImltcG9ydCB7IENvbXBvbmVudCwgVHlwZSB9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XG5pbXBvcnQgeyB2ZWMzLCBtYXQ0LCBxdWF0LCBxdWF0MiB9IGZyb20gJ2dsLW1hdHJpeCc7XG5jb25zdCBWUk1fUk9MTF9BWEVTID0ge1xuICAgIFg6IFsxLjAsIDAuMCwgMC4wXSxcbiAgICBZOiBbMC4wLCAxLjAsIDAuMF0sXG4gICAgWjogWzAuMCwgMC4wLCAxLjBdLFxufTtcbmNvbnN0IFZSTV9BSU1fQVhFUyA9IHtcbiAgICBQb3NpdGl2ZVg6IFsxLjAsIDAuMCwgMC4wXSxcbiAgICBOZWdhdGl2ZVg6IFstMS4wLCAwLjAsIDAuMF0sXG4gICAgUG9zaXRpdmVZOiBbMC4wLCAxLjAsIDAuMF0sXG4gICAgTmVnYXRpdmVZOiBbMC4wLCAtMS4wLCAwLjBdLFxuICAgIFBvc2l0aXZlWjogWzAuMCwgMC4wLCAxLjBdLFxuICAgIE5lZ2F0aXZlWjogWzAuMCwgMC4wLCAtMS4wXSxcbn07XG4vKipcbiAqIENvbXBvbmVudCBmb3IgbG9hZGluZyBhbmQgaGFuZGxpbmcgVlJNIDEuMCBtb2RlbHMuXG4gKlxuICogUG9zaW5nIG9mIHRoZSBtb2RlbCBzaG91bGQgYmUgZG9uZSBleGNsdXNpdmVseSBieSByb3RhdGluZyB0aGUgYm9uZXMuIFRoZXNlIGNhbiBiZVxuICogYWNjZXNzZWQgdXNpbmcgdGhlIGAuYm9uZXNgIHByb3BlcnR5IGFuZCBmb2xsb3cgdGhlIFZSTSBib25lIG5hbWluZy4gTm90ZSB0aGF0IG5vdFxuICogYWxsIFZSTSBtb2RlbHMgd2lsbCBoYXZlIGFsbCBwb3NzaWJsZSBib25lcy4gVGhlIHJlc3QgcG9zZSAoVC1wb3NlKSBpcyBjYXB0dXJlZCBpblxuICogdGhlIGAucmVzdFBvc2VgIHByb3BlcnR5LiBSZXNldHRpbmcgYSBib25lIHRvIGl0cyByZXN0IHBvc2UgY2FuIGJlIGRvbmUgYXMgZm9sbG93czpcbiAqIGBgYGpzXG4gKiB2cm1Db21wb25lbnQuYm9uZXNbdnJtQm9uZU5hbWVdLnJvdGF0aW9uTG9jYWwgPSB2cm1Db21wb25lbnQucmVzdFBvc2VbdnJtQm9uZU5hbWVdO1xuICogYGBgXG4gKlxuICogTW92aW5nIHRoZSBtb2RlbCB0aHJvdWdoIHRoZSB3b3JsZCBzaG91bGQgYmUgZG9uZSBieSBtb3ZpbmcgdGhlIG9iamVjdCB0aGlzIGNvbXBvbmVudFxuICogaXMgYXR0YWNoZWQgdG8uIEluIG90aGVyIHdvcmRzLCBieSBtb3ZpbmcgdGhlIHJvb3Qgb2YgdGhlIFZSTSBtb2RlbC4gVGhlIGJvbmVzIGFuZCBhbnlcbiAqIGRlc2NlbmRhbnQgb2JqZWN0cyBzaG91bGQgKm5vdCogYmUgdXNlZCB0byBtb3ZlIHRoZSBWUk0gbW9kZWwuXG4gKlxuICogVGhlIGNvcmUgZXh0ZW5zaW9uIGBWUk1DX3ZybWAgYXMgd2VsbCBhcyB0aGVgVlJNQ19zcHJpbmdCb25lYCBhbmQgYFZSTUNfbm9kZV9jb25zdHJhaW50YFxuICogZXh0ZW5zaW9ucyBhcmUgc3VwcG9ydGVkLlxuICpcbiAqICoqTGltaXRhdGlvbnM6KipcbiAqIC0gTm8gc3VwcG9ydCBmb3IgYFZSTUNfbWF0ZXJpYWxfbXRvb25gXG4gKiAtIEV4cHJlc3Npb25zIGFyZW4ndCBzdXBwb3J0ZWRcbiAqIC0gRXhwcmVzc2lvbiBiYXNlZCBsb29rQXQgaXNuJ3Qgc3VwcG9ydGVkXG4gKiAtIE1lc2ggYW5ub3RhdGlvbiBtb2RlIGBhdXRvYCBpcyBub3Qgc3VwcG9ydGVkIChmaXJzdCBwZXJzb24gbW9kZSlcbiAqL1xuY2xhc3MgVnJtIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndnJtJztcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHtcbiAgICAgICAgLyoqIFVSTCB0byBhIFZSTSBmaWxlIHRvIGxvYWQgKi9cbiAgICAgICAgc3JjOiB7IHR5cGU6IFR5cGUuU3RyaW5nIH0sXG4gICAgICAgIC8qKiBPYmplY3QgdGhlIFZSTSBpcyBsb29raW5nIGF0ICovXG4gICAgICAgIGxvb2tBdFRhcmdldDogeyB0eXBlOiBUeXBlLk9iamVjdCB9LFxuICAgIH07XG4gICAgLyoqIE1ldGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIFZSTSBtb2RlbCAqL1xuICAgIG1ldGEgPSBudWxsO1xuICAgIC8qKiBUaGUgaHVtYW5vaWQgYm9uZXMgb2YgdGhlIFZSTSBtb2RlbCAqL1xuICAgIGJvbmVzID0ge1xuICAgICAgICAvKiBUb3JzbyAqL1xuICAgICAgICBoaXBzOiBudWxsLFxuICAgICAgICBzcGluZTogbnVsbCxcbiAgICAgICAgY2hlc3Q6IG51bGwsXG4gICAgICAgIHVwcGVyQ2hlc3Q6IG51bGwsXG4gICAgICAgIG5lY2s6IG51bGwsXG4gICAgICAgIC8qIEhlYWQgKi9cbiAgICAgICAgaGVhZDogbnVsbCxcbiAgICAgICAgbGVmdEV5ZTogbnVsbCxcbiAgICAgICAgcmlnaHRFeWU6IG51bGwsXG4gICAgICAgIGphdzogbnVsbCxcbiAgICAgICAgLyogTGVncyAqL1xuICAgICAgICBsZWZ0VXBwZXJMZWc6IG51bGwsXG4gICAgICAgIGxlZnRMb3dlckxlZzogbnVsbCxcbiAgICAgICAgbGVmdEZvb3Q6IG51bGwsXG4gICAgICAgIGxlZnRUb2VzOiBudWxsLFxuICAgICAgICByaWdodFVwcGVyTGVnOiBudWxsLFxuICAgICAgICByaWdodExvd2VyTGVnOiBudWxsLFxuICAgICAgICByaWdodEZvb3Q6IG51bGwsXG4gICAgICAgIHJpZ2h0VG9lczogbnVsbCxcbiAgICAgICAgLyogQXJtcyAqL1xuICAgICAgICBsZWZ0U2hvdWxkZXI6IG51bGwsXG4gICAgICAgIGxlZnRVcHBlckFybTogbnVsbCxcbiAgICAgICAgbGVmdExvd2VyQXJtOiBudWxsLFxuICAgICAgICBsZWZ0SGFuZDogbnVsbCxcbiAgICAgICAgcmlnaHRTaG91bGRlcjogbnVsbCxcbiAgICAgICAgcmlnaHRVcHBlckFybTogbnVsbCxcbiAgICAgICAgcmlnaHRMb3dlckFybTogbnVsbCxcbiAgICAgICAgcmlnaHRIYW5kOiBudWxsLFxuICAgICAgICAvKiBGaW5nZXJzICovXG4gICAgICAgIGxlZnRUaHVtYk1ldGFjYXJwYWw6IG51bGwsXG4gICAgICAgIGxlZnRUaHVtYlByb3hpbWFsOiBudWxsLFxuICAgICAgICBsZWZ0VGh1bWJEaXN0YWw6IG51bGwsXG4gICAgICAgIGxlZnRJbmRleFByb3hpbWFsOiBudWxsLFxuICAgICAgICBsZWZ0SW5kZXhJbnRlcm1lZGlhdGU6IG51bGwsXG4gICAgICAgIGxlZnRJbmRleERpc3RhbDogbnVsbCxcbiAgICAgICAgbGVmdE1pZGRsZVByb3hpbWFsOiBudWxsLFxuICAgICAgICBsZWZ0TWlkZGxlSW50ZXJtZWRpYXRlOiBudWxsLFxuICAgICAgICBsZWZ0TWlkZGxlRGlzdGFsOiBudWxsLFxuICAgICAgICBsZWZ0UmluZ1Byb3hpbWFsOiBudWxsLFxuICAgICAgICBsZWZ0UmluZ0ludGVybWVkaWF0ZTogbnVsbCxcbiAgICAgICAgbGVmdFJpbmdEaXN0YWw6IG51bGwsXG4gICAgICAgIGxlZnRMaXR0bGVQcm94aW1hbDogbnVsbCxcbiAgICAgICAgbGVmdExpdHRsZUludGVybWVkaWF0ZTogbnVsbCxcbiAgICAgICAgbGVmdExpdHRsZURpc3RhbDogbnVsbCxcbiAgICAgICAgcmlnaHRUaHVtYk1ldGFjYXJwYWw6IG51bGwsXG4gICAgICAgIHJpZ2h0VGh1bWJQcm94aW1hbDogbnVsbCxcbiAgICAgICAgcmlnaHRUaHVtYkRpc3RhbDogbnVsbCxcbiAgICAgICAgcmlnaHRJbmRleFByb3hpbWFsOiBudWxsLFxuICAgICAgICByaWdodEluZGV4SW50ZXJtZWRpYXRlOiBudWxsLFxuICAgICAgICByaWdodEluZGV4RGlzdGFsOiBudWxsLFxuICAgICAgICByaWdodE1pZGRsZVByb3hpbWFsOiBudWxsLFxuICAgICAgICByaWdodE1pZGRsZUludGVybWVkaWF0ZTogbnVsbCxcbiAgICAgICAgcmlnaHRNaWRkbGVEaXN0YWw6IG51bGwsXG4gICAgICAgIHJpZ2h0UmluZ1Byb3hpbWFsOiBudWxsLFxuICAgICAgICByaWdodFJpbmdJbnRlcm1lZGlhdGU6IG51bGwsXG4gICAgICAgIHJpZ2h0UmluZ0Rpc3RhbDogbnVsbCxcbiAgICAgICAgcmlnaHRMaXR0bGVQcm94aW1hbDogbnVsbCxcbiAgICAgICAgcmlnaHRMaXR0bGVJbnRlcm1lZGlhdGU6IG51bGwsXG4gICAgICAgIHJpZ2h0TGl0dGxlRGlzdGFsOiBudWxsLFxuICAgIH07XG4gICAgLyoqIFJvdGF0aW9ucyBvZiB0aGUgYm9uZXMgaW4gdGhlIHJlc3QgcG9zZSAoVC1wb3NlKSAqL1xuICAgIHJlc3RQb3NlID0ge307XG4gICAgLyogQWxsIG5vZGUgY29uc3RyYWludHMsIG9yZGVyZWQgdG8gZGVhbCB3aXRoIGRlcGVuZGVuY2llcyAqL1xuICAgIF9ub2RlQ29uc3RyYWludHMgPSBbXTtcbiAgICAvKiBWUk1DX3NwcmluZ0JvbmUgY2hhaW5zICovXG4gICAgX3NwcmluZ0NoYWlucyA9IFtdO1xuICAgIC8qIFNwaGVyaWNhbCBjb2xsaWRlcnMgZm9yIHNwcmluZyBib25lcyAqL1xuICAgIF9zcGhlcmVDb2xsaWRlcnMgPSBbXTtcbiAgICAvKiBDYXBzdWxlIHNoYXBlZCBjb2xsaWRlcnMgZm9yIHNwcmluZyBib25lcyAqL1xuICAgIF9jYXBzdWxlQ29sbGlkZXJzID0gW107XG4gICAgLyogSW5kaWNhdGVzIHdoaWNoIG1lc2hlcyBhcmUgcmVuZGVyZWQgaW4gZmlyc3QvdGhpcmQgcGVyc29uIHZpZXdzICovXG4gICAgX2ZpcnN0UGVyc29uQW5ub3RhdGlvbnMgPSBbXTtcbiAgICAvKiBDb250YWlucyBkZXRhaWxzIGZvciAoYm9uZSB0eXBlKSBsb29rQXQgYmVoYXZpb3VyICovXG4gICAgX2xvb2tBdCA9IG51bGw7XG4gICAgLyogV2hldGhlciBvciBub3QgdGhlIFZSTSBjb21wb25lbnQgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgd2l0aCBgaW5pdGlhbGl6ZVZybWAgKi9cbiAgICBfaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLl90ZW1wVjMgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgICAgICB0aGlzLl90ZW1wVjNBID0gdmVjMy5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5fdGVtcFYzQiA9IHZlYzMuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMuX3RlbXBRdWF0ID0gcXVhdC5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5fdGVtcFF1YXRBID0gcXVhdC5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5fdGVtcFF1YXRCID0gcXVhdC5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5fdGVtcE1hdDRBID0gbWF0NC5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5fdGVtcFF1YXQyID0gcXVhdDIuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMuX3RhaWxUb1NoYXBlID0gdmVjMy5jcmVhdGUoKTtcbiAgICAgICAgdGhpcy5faGVhZFRvVGFpbCA9IHZlYzMuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMuX2luZXJ0aWEgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgICAgICB0aGlzLl9zdGlmZm5lc3MgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgICAgICB0aGlzLl9leHRlcm5hbCA9IHZlYzMuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMuX3JpZ2h0VmVjdG9yID0gdmVjMy5zZXQodmVjMy5jcmVhdGUoKSwgMSwgMCwgMCk7XG4gICAgICAgIHRoaXMuX3VwVmVjdG9yID0gdmVjMy5zZXQodmVjMy5jcmVhdGUoKSwgMCwgMSwgMCk7XG4gICAgICAgIHRoaXMuX2ZvcndhcmRWZWN0b3IgPSB2ZWMzLnNldCh2ZWMzLmNyZWF0ZSgpLCAwLCAwLCAxKTtcbiAgICAgICAgdGhpcy5faWRlbnRpdHlRdWF0ID0gcXVhdC5pZGVudGl0eShxdWF0LmNyZWF0ZSgpKTtcbiAgICAgICAgdGhpcy5fcmFkMmRlZyA9IDE4MC4wIC8gTWF0aC5QSTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5zcmMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3ZybTogc3JjIHByb3BlcnR5IG5vdCBzZXQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuZ2luZS5zY2VuZVxuICAgICAgICAgICAgLmFwcGVuZCh0aGlzLnNyYywgeyBsb2FkR2x0ZkV4dGVuc2lvbnM6IHRydWUgfSlcbiAgICAgICAgICAgIC50aGVuKCh7IHJvb3QsIGV4dGVuc2lvbnMgfSkgPT4ge1xuICAgICAgICAgICAgcm9vdC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4gKGNoaWxkLnBhcmVudCA9IHRoaXMub2JqZWN0KSk7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXplVnJtKGV4dGVuc2lvbnMpO1xuICAgICAgICAgICAgcm9vdC5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIFZSTSBnbFRGIGV4dGVuc2lvbnMgYW5kIGluaXRpYWxpemVzIHRoZSB2cm0gY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7R0xURkV4dGVuc2lvbnN9IGV4dGVuc2lvbnMgVGhlIGdsVEYgZXh0ZW5zaW9ucyBmb3IgdGhlIFZSTSBtb2RlbFxuICAgICAqL1xuICAgIF9pbml0aWFsaXplVnJtKGV4dGVuc2lvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignVlJNIGNvbXBvbmVudCBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgVlJNQ192cm0gPSBleHRlbnNpb25zLnJvb3RbJ1ZSTUNfdnJtJ107XG4gICAgICAgIGlmICghVlJNQ192cm0pIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdNaXNzaW5nIFZSTSBleHRlbnNpb25zJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFZSTUNfdnJtLnNwZWNWZXJzaW9uICE9PSAnMS4wJykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFVuc3VwcG9ydGVkIFZSTSB2ZXJzaW9uLCBvbmx5IDEuMCBpcyBzdXBwb3J0ZWQsIGJ1dCBlbmNvdW50ZXJlZCAnJHtWUk1DX3ZybS5zcGVjVmVyc2lvbn0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZXRhID0gVlJNQ192cm0ubWV0YTtcbiAgICAgICAgdGhpcy5fcGFyc2VIdW1hbm9pZChWUk1DX3ZybS5odW1hbm9pZCwgZXh0ZW5zaW9ucyk7XG4gICAgICAgIGlmIChWUk1DX3ZybS5maXJzdFBlcnNvbikge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VGaXJzdFBlcnNvbihWUk1DX3ZybS5maXJzdFBlcnNvbiwgZXh0ZW5zaW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFZSTUNfdnJtLmxvb2tBdCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VMb29rQXQoVlJNQ192cm0ubG9va0F0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maW5kQW5kUGFyc2VOb2RlQ29uc3RyYWludHMoZXh0ZW5zaW9ucyk7XG4gICAgICAgIGNvbnN0IHNwcmluZ0JvbmUgPSBleHRlbnNpb25zLnJvb3RbJ1ZSTUNfc3ByaW5nQm9uZSddO1xuICAgICAgICBpZiAoc3ByaW5nQm9uZSkge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VBbmRJbml0aWFsaXplU3ByaW5nQm9uZXMoc3ByaW5nQm9uZSwgZXh0ZW5zaW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfcGFyc2VIdW1hbm9pZChodW1hbm9pZCwgZXh0ZW5zaW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGJvbmVOYW1lIGluIGh1bWFub2lkLmh1bWFuQm9uZXMpIHtcbiAgICAgICAgICAgIGlmICghKGJvbmVOYW1lIGluIHRoaXMuYm9uZXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBVbnJlY29nbml6ZWQgYm9uZSAnJHtib25lTmFtZX0nYCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub2RlID0gaHVtYW5vaWQuaHVtYW5Cb25lc1tib25lTmFtZV0ubm9kZTtcbiAgICAgICAgICAgIGNvbnN0IG9iamVjdElkID0gZXh0ZW5zaW9ucy5pZE1hcHBpbmdbbm9kZV07XG4gICAgICAgICAgICB0aGlzLmJvbmVzW2JvbmVOYW1lXSA9IHRoaXMuZW5naW5lLndyYXBPYmplY3Qob2JqZWN0SWQpO1xuICAgICAgICAgICAgdGhpcy5yZXN0UG9zZVtib25lTmFtZV0gPSBxdWF0LmNvcHkocXVhdC5jcmVhdGUoKSwgdGhpcy5ib25lc1tib25lTmFtZV0ucm90YXRpb25Mb2NhbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3BhcnNlRmlyc3RQZXJzb24oZmlyc3RQZXJzb24sIGV4dGVuc2lvbnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBtZXNoQW5ub3RhdGlvbiBvZiBmaXJzdFBlcnNvbi5tZXNoQW5ub3RhdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFubm90YXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbm9kZTogdGhpcy5lbmdpbmUud3JhcE9iamVjdChleHRlbnNpb25zLmlkTWFwcGluZ1ttZXNoQW5ub3RhdGlvbi5ub2RlXSksXG4gICAgICAgICAgICAgICAgZmlyc3RQZXJzb246IHRydWUsXG4gICAgICAgICAgICAgICAgdGhpcmRQZXJzb246IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3dpdGNoIChtZXNoQW5ub3RhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZmlyc3RQZXJzb25Pbmx5JzpcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbi50aGlyZFBlcnNvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0aGlyZFBlcnNvbk9ubHknOlxuICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uLmZpcnN0UGVyc29uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdGgnOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhdXRvJzpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRmlyc3QgcGVyc29uIG1lc2ggYW5ub3RhdGlvbiB0eXBlICdhdXRvJyBpcyBub3Qgc3VwcG9ydGVkLCB0cmVhdGluZyBhcyAnYm90aCchXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBJbnZhbGlkIG1lc2ggYW5ub3RhdGlvbiB0eXBlICcke21lc2hBbm5vdGF0aW9uLnR5cGV9J2ApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0UGVyc29uQW5ub3RhdGlvbnMucHVzaChhbm5vdGF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcGFyc2VMb29rQXQobG9va0F0KSB7XG4gICAgICAgIGlmIChsb29rQXQudHlwZSAhPT0gJ2JvbmUnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFVuc3VwcG9ydGVkIGxvb2tBdCB0eXBlICcke2xvb2tBdC50eXBlfScsIG9ubHkgJ2JvbmUnIGlzIHN1cHBvcnRlZGApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlUmFuZ2VNYXAgPSAocmFuZ2VNYXApID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5wdXRNYXhWYWx1ZTogcmFuZ2VNYXAuaW5wdXRNYXhWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdXRwdXRTY2FsZTogcmFuZ2VNYXAub3V0cHV0U2NhbGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9sb29rQXQgPSB7XG4gICAgICAgICAgICBvZmZzZXRGcm9tSGVhZEJvbmU6IGxvb2tBdC5vZmZzZXRGcm9tSGVhZEJvbmUgfHwgWzAsIDAsIDBdLFxuICAgICAgICAgICAgaG9yaXpvbnRhbElubmVyOiBwYXJzZVJhbmdlTWFwKGxvb2tBdC5yYW5nZU1hcEhvcml6b250YWxJbm5lciksXG4gICAgICAgICAgICBob3Jpem9udGFsT3V0ZXI6IHBhcnNlUmFuZ2VNYXAobG9va0F0LnJhbmdlTWFwSG9yaXpvbnRhbE91dGVyKSxcbiAgICAgICAgICAgIHZlcnRpY2FsRG93bjogcGFyc2VSYW5nZU1hcChsb29rQXQucmFuZ2VNYXBWZXJ0aWNhbERvd24pLFxuICAgICAgICAgICAgdmVydGljYWxVcDogcGFyc2VSYW5nZU1hcChsb29rQXQucmFuZ2VNYXBWZXJ0aWNhbFVwKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2ZpbmRBbmRQYXJzZU5vZGVDb25zdHJhaW50cyhleHRlbnNpb25zKSB7XG4gICAgICAgIGNvbnN0IHRyYXZlcnNlID0gKG9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgbm9kZUV4dGVuc2lvbnMgPSBleHRlbnNpb25zLm5vZGVbb2JqZWN0Lm9iamVjdElkXTtcbiAgICAgICAgICAgIGlmIChub2RlRXh0ZW5zaW9ucyAmJiAnVlJNQ19ub2RlX2NvbnN0cmFpbnQnIGluIG5vZGVFeHRlbnNpb25zKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUNvbnN0cmFpbnRFeHRlbnNpb24gPSBub2RlRXh0ZW5zaW9uc1snVlJNQ19ub2RlX2NvbnN0cmFpbnQnXTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25zdHJhaW50ID0gbm9kZUNvbnN0cmFpbnRFeHRlbnNpb24uY29uc3RyYWludDtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSwgYXhpcztcbiAgICAgICAgICAgICAgICBpZiAoJ3JvbGwnIGluIGNvbnN0cmFpbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdyb2xsJztcbiAgICAgICAgICAgICAgICAgICAgYXhpcyA9IFZSTV9ST0xMX0FYRVNbY29uc3RyYWludC5yb2xsLnJvbGxBeGlzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2FpbScgaW4gY29uc3RyYWludCkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2FpbSc7XG4gICAgICAgICAgICAgICAgICAgIGF4aXMgPSBWUk1fQUlNX0FYRVNbY29uc3RyYWludC5haW0uYWltQXhpc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdyb3RhdGlvbicgaW4gY29uc3RyYWludCkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ3JvdGF0aW9uJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5lbmdpbmUud3JhcE9iamVjdChleHRlbnNpb25zLmlkTWFwcGluZ1tjb25zdHJhaW50W3R5cGVdLnNvdXJjZV0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub2RlQ29uc3RyYWludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246IG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IGNvbnN0cmFpbnRbdHlwZV0ud2VpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVzdCBwb3NlICovXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvblJlc3RMb2NhbFJvdGF0aW9uOiBxdWF0LmNvcHkocXVhdC5jcmVhdGUoKSwgb2JqZWN0LnJvdGF0aW9uTG9jYWwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlUmVzdExvY2FsUm90YXRpb246IHF1YXQuY29weShxdWF0LmNyZWF0ZSgpLCBzb3VyY2Uucm90YXRpb25Mb2NhbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VSZXN0TG9jYWxSb3RhdGlvbkludjogcXVhdC5pbnZlcnQocXVhdC5jcmVhdGUoKSwgc291cmNlLnJvdGF0aW9uTG9jYWwpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVW5yZWNvZ25pemVkIG9yIGludmFsaWQgVlJNQ19ub2RlX2NvbnN0cmFpbnQsIGlnbm9yaW5nIGl0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBvYmplY3QuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZShjaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRyYXZlcnNlKHRoaXMub2JqZWN0KTtcbiAgICB9XG4gICAgX3BhcnNlQW5kSW5pdGlhbGl6ZVNwcmluZ0JvbmVzKHNwcmluZ0JvbmUsIGV4dGVuc2lvbnMpIHtcbiAgICAgICAgY29uc3QgY29sbGlkZXJzID0gKHNwcmluZ0JvbmUuY29sbGlkZXJzIHx8IFtdKS5tYXAoKGNvbGxpZGVyLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaGFwZVR5cGUgPSAnY2Fwc3VsZScgaW4gY29sbGlkZXIuc2hhcGUgPyAnY2Fwc3VsZScgOiAnc3BoZXJlJztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWQ6IGksXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLmVuZ2luZS53cmFwT2JqZWN0KGV4dGVuc2lvbnMuaWRNYXBwaW5nW2NvbGxpZGVyLm5vZGVdKSxcbiAgICAgICAgICAgICAgICBzaGFwZToge1xuICAgICAgICAgICAgICAgICAgICBpc0NhcHN1bGU6IHNoYXBlVHlwZSA9PT0gJ2NhcHN1bGUnLFxuICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGNvbGxpZGVyLnNoYXBlW3NoYXBlVHlwZV0ucmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGNvbGxpZGVyLnNoYXBlW3NoYXBlVHlwZV0ub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICB0YWlsOiBjb2xsaWRlci5zaGFwZVtzaGFwZVR5cGVdLnRhaWwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjYWNoZToge1xuICAgICAgICAgICAgICAgICAgICBoZWFkOiB2ZWMzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICB0YWlsOiB2ZWMzLmNyZWF0ZSgpLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fc3BoZXJlQ29sbGlkZXJzID0gY29sbGlkZXJzLmZpbHRlcigoYykgPT4gIWMuc2hhcGUuaXNDYXBzdWxlKTtcbiAgICAgICAgdGhpcy5fY2Fwc3VsZUNvbGxpZGVycyA9IGNvbGxpZGVycy5maWx0ZXIoKGMpID0+IGMuc2hhcGUuaXNDYXBzdWxlKTtcbiAgICAgICAgY29uc3QgY29sbGlkZXJHcm91cHMgPSAoc3ByaW5nQm9uZS5jb2xsaWRlckdyb3VwcyB8fCBbXSkubWFwKChncm91cCkgPT4gKHtcbiAgICAgICAgICAgIG5hbWU6IGdyb3VwLm5hbWUsXG4gICAgICAgICAgICBjb2xsaWRlcnM6IGdyb3VwLmNvbGxpZGVycy5tYXAoKGMpID0+IGNvbGxpZGVyc1tjXSksXG4gICAgICAgIH0pKTtcbiAgICAgICAgZm9yIChjb25zdCBzcHJpbmcgb2Ygc3ByaW5nQm9uZS5zcHJpbmdzKSB7XG4gICAgICAgICAgICBjb25zdCBqb2ludHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgam9pbnQgb2Ygc3ByaW5nLmpvaW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwcmluZ0pvaW50ID0ge1xuICAgICAgICAgICAgICAgICAgICBoaXRSYWRpdXM6IDAuMCxcbiAgICAgICAgICAgICAgICAgICAgc3RpZmZuZXNzOiAxLjAsXG4gICAgICAgICAgICAgICAgICAgIGdyYXZpdHlQb3dlcjogMC4wLFxuICAgICAgICAgICAgICAgICAgICBncmF2aXR5RGlyOiBbMC4wLCAtMS4wLCAwLjBdLFxuICAgICAgICAgICAgICAgICAgICBkcmFnRm9yY2U6IDAuNSxcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNwcmluZ0pvaW50LCBqb2ludCk7XG4gICAgICAgICAgICAgICAgc3ByaW5nSm9pbnQubm9kZSA9IHRoaXMuZW5naW5lLndyYXBPYmplY3QoZXh0ZW5zaW9ucy5pZE1hcHBpbmdbc3ByaW5nSm9pbnQubm9kZV0pO1xuICAgICAgICAgICAgICAgIGpvaW50cy5wdXNoKHNwcmluZ0pvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNwcmluZ0NoYWluQ29sbGlkZXJzID0gKHNwcmluZy5jb2xsaWRlckdyb3VwcyB8fCBbXSkuZmxhdE1hcCgoY2cpID0+IGNvbGxpZGVyR3JvdXBzW2NnXS5jb2xsaWRlcnMpO1xuICAgICAgICAgICAgdGhpcy5fc3ByaW5nQ2hhaW5zLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHNwcmluZy5uYW1lLFxuICAgICAgICAgICAgICAgIGNlbnRlcjogc3ByaW5nLmNlbnRlclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuZW5naW5lLndyYXBPYmplY3QoZXh0ZW5zaW9ucy5pZE1hcHBpbmdbc3ByaW5nLmNlbnRlcl0pXG4gICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICBqb2ludHMsXG4gICAgICAgICAgICAgICAgc3BoZXJlQ29sbGlkZXJzOiBzcHJpbmdDaGFpbkNvbGxpZGVycy5maWx0ZXIoKGMpID0+ICFjLnNoYXBlLmlzQ2Fwc3VsZSksXG4gICAgICAgICAgICAgICAgY2Fwc3VsZUNvbGxpZGVyczogc3ByaW5nQ2hhaW5Db2xsaWRlcnMuZmlsdGVyKChjKSA9PiBjLnNoYXBlLmlzQ2Fwc3VsZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvKiBJbml0aWFsaXplIHNwcmluZyBib25lIGpvaW50IHN0YXRlICovXG4gICAgICAgIGZvciAoY29uc3Qgc3ByaW5nQ2hhaW4gb2YgdGhpcy5fc3ByaW5nQ2hhaW5zKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNwcmluZ0NoYWluLmpvaW50cy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcHJpbmdCb25lSm9pbnQgPSBzcHJpbmdDaGFpbi5qb2ludHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRTcHJpbmdCb25lSm9pbnQgPSBzcHJpbmdDaGFpbi5qb2ludHNbaSArIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwcmluZ0JvbmVQb3NpdGlvbiA9IHNwcmluZ0JvbmVKb2ludC5ub2RlLmdldFRyYW5zbGF0aW9uV29ybGQodmVjMy5jcmVhdGUoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRTcHJpbmdCb25lUG9zaXRpb24gPSBjaGlsZFNwcmluZ0JvbmVKb2ludC5ub2RlLmdldFRyYW5zbGF0aW9uV29ybGQodmVjMy5jcmVhdGUoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9uZURpcmVjdGlvbiA9IHZlYzMuc3VidHJhY3QodGhpcy5fdGVtcFYzQSwgc3ByaW5nQm9uZVBvc2l0aW9uLCBjaGlsZFNwcmluZ0JvbmVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZUYWlsOiBjaGlsZFNwcmluZ0JvbmVQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRhaWw6IHZlYzMuY29weSh2ZWMzLmNyZWF0ZSgpLCBjaGlsZFNwcmluZ0JvbmVQb3NpdGlvbiksXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxMb2NhbFJvdGF0aW9uOiBxdWF0LmNvcHkocXVhdC5jcmVhdGUoKSwgc3ByaW5nQm9uZUpvaW50Lm5vZGUucm90YXRpb25Mb2NhbCksXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxMb2NhbFRyYW5zZm9ybUludmVydDogcXVhdDIuaW52ZXJ0KHF1YXQyLmNyZWF0ZSgpLCBzcHJpbmdCb25lSm9pbnQubm9kZS50cmFuc2Zvcm1Mb2NhbCksXG4gICAgICAgICAgICAgICAgICAgIGJvbmVBeGlzOiB2ZWMzLm5vcm1hbGl6ZSh2ZWMzLmNyZWF0ZSgpLCBjaGlsZFNwcmluZ0JvbmVKb2ludC5ub2RlLmdldFRyYW5zbGF0aW9uTG9jYWwodGhpcy5fdGVtcFYzKSksXG4gICAgICAgICAgICAgICAgICAgIC8qIEVuc3VyZSBib25lIGxlbmd0aCBpcyBhdCBsZWFzdCAxY20gdG8gYXZvaWQgaml0dGVyeSBiZWhhdmlvdXIgZnJvbSB6ZXJvLWxlbmd0aCBib25lcyAqL1xuICAgICAgICAgICAgICAgICAgICBib25lTGVuZ3RoOiBNYXRoLm1heCgwLjAxLCB2ZWMzLmxlbmd0aChib25lRGlyZWN0aW9uKSksXG4gICAgICAgICAgICAgICAgICAgIC8qIFRhaWwgcG9zaXRpb25zIGluIGNlbnRlciBzcGFjZSwgaWYgbmVlZGVkICovXG4gICAgICAgICAgICAgICAgICAgIHByZXZUYWlsQ2VudGVyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGFpbENlbnRlcjogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChzcHJpbmdDaGFpbi5jZW50ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUucHJldlRhaWxDZW50ZXIgPSBzcHJpbmdDaGFpbi5jZW50ZXIudHJhbnNmb3JtUG9pbnRJbnZlcnNlV29ybGQodmVjMy5jcmVhdGUoKSwgY2hpbGRTcHJpbmdCb25lUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jdXJyZW50VGFpbENlbnRlciA9IHZlYzMuY29weSh2ZWMzLmNyZWF0ZSgpLCBjaGlsZFNwcmluZ0JvbmVQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNwcmluZ0JvbmVKb2ludC5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZShkdCkge1xuICAgICAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLyogMS4gUmVzb2x2ZSBodW1hbm9pZCBib25lcyAocGVyZm9ybWVkIGJ5IHVzZXIpICovXG4gICAgICAgIC8qIDIuIFJlc29sdmUgTG9va0F0IChib25lIHR5cGUpIGFzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaGVhZCBpcyBkZXRlcm1pbmVkICovXG4gICAgICAgIHRoaXMuX3Jlc29sdmVMb29rQXQoKTtcbiAgICAgICAgLyogMy4gRXhwcmVzc2lvbiB1cGRhdGUgKFRPRE8pICovXG4gICAgICAgIC8qIDQuIEFwcGx5IEV4cHJlc3Npb24gKFRPRE8pICovXG4gICAgICAgIC8qIDUuIFJlc29sdmUgY29uc3RyYWludHMgKi9cbiAgICAgICAgdGhpcy5fcmVzb2x2ZUNvbnN0cmFpbnRzKCk7XG4gICAgICAgIC8qIDYuIFJlc29sdmUgU3ByaW5nIEJvbmUgKi9cbiAgICAgICAgdGhpcy5fdXBkYXRlU3ByaW5nQm9uZXMoZHQpO1xuICAgIH1cbiAgICBfcmFuZ2VNYXAocmFuZ2VNYXAsIGlucHV0KSB7XG4gICAgICAgIGNvbnN0IG1heFZhbHVlID0gcmFuZ2VNYXAuaW5wdXRNYXhWYWx1ZTtcbiAgICAgICAgY29uc3Qgb3V0cHV0U2NhbGUgPSByYW5nZU1hcC5vdXRwdXRTY2FsZTtcbiAgICAgICAgcmV0dXJuIChNYXRoLm1pbihpbnB1dCwgbWF4VmFsdWUpIC8gbWF4VmFsdWUpICogb3V0cHV0U2NhbGU7XG4gICAgfVxuICAgIF9yZXNvbHZlTG9va0F0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvb2tBdCB8fCAhdGhpcy5sb29rQXRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb29rQXRTb3VyY2UgPSB0aGlzLmJvbmVzLmhlYWQudHJhbnNmb3JtUG9pbnRXb3JsZCh0aGlzLl90ZW1wVjNBLCB0aGlzLl9sb29rQXQub2Zmc2V0RnJvbUhlYWRCb25lKTtcbiAgICAgICAgY29uc3QgbG9va0F0VGFyZ2V0ID0gdGhpcy5sb29rQXRUYXJnZXQuZ2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLl90ZW1wVjNCKTtcbiAgICAgICAgY29uc3QgbG9va0F0RGlyZWN0aW9uID0gdmVjMy5zdWIodGhpcy5fdGVtcFYzQSwgbG9va0F0VGFyZ2V0LCBsb29rQXRTb3VyY2UpO1xuICAgICAgICB2ZWMzLm5vcm1hbGl6ZShsb29rQXREaXJlY3Rpb24sIGxvb2tBdERpcmVjdGlvbik7XG4gICAgICAgIC8qIENvbnZlcnQgdGhlIGRpcmVjdGlvbiBpbnRvIExvb2tBdCBzcGFjZSAqL1xuICAgICAgICB0aGlzLmJvbmVzLmhlYWQucGFyZW50LnRyYW5zZm9ybVZlY3RvckludmVyc2VXb3JsZChsb29rQXREaXJlY3Rpb24pO1xuICAgICAgICBjb25zdCB6ID0gdmVjMy5kb3QobG9va0F0RGlyZWN0aW9uLCB0aGlzLl9mb3J3YXJkVmVjdG9yKTtcbiAgICAgICAgY29uc3QgeCA9IHZlYzMuZG90KGxvb2tBdERpcmVjdGlvbiwgdGhpcy5fcmlnaHRWZWN0b3IpO1xuICAgICAgICBjb25zdCB5YXcgPSBNYXRoLmF0YW4yKHgsIHopICogdGhpcy5fcmFkMmRlZztcbiAgICAgICAgY29uc3QgeHogPSBNYXRoLnNxcnQoeCAqIHggKyB6ICogeik7XG4gICAgICAgIGNvbnN0IHkgPSB2ZWMzLmRvdChsb29rQXREaXJlY3Rpb24sIHRoaXMuX3VwVmVjdG9yKTtcbiAgICAgICAgbGV0IHBpdGNoID0gTWF0aC5hdGFuMigteSwgeHopICogdGhpcy5fcmFkMmRlZztcbiAgICAgICAgLyogTGltaXQgcGl0Y2ggKi9cbiAgICAgICAgaWYgKHBpdGNoID4gMCkge1xuICAgICAgICAgICAgcGl0Y2ggPSB0aGlzLl9yYW5nZU1hcCh0aGlzLl9sb29rQXQudmVydGljYWxEb3duLCBwaXRjaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwaXRjaCA9IC10aGlzLl9yYW5nZU1hcCh0aGlzLl9sb29rQXQudmVydGljYWxVcCwgLXBpdGNoKTtcbiAgICAgICAgfVxuICAgICAgICAvKiBMZWZ0IGV5ZSAobGltaXQgeWF3KSAqL1xuICAgICAgICBpZiAodGhpcy5ib25lcy5sZWZ0RXllKSB7XG4gICAgICAgICAgICBsZXQgeWF3TGVmdCA9IHlhdztcbiAgICAgICAgICAgIGlmICh5YXdMZWZ0ID4gMCkge1xuICAgICAgICAgICAgICAgIHlhd0xlZnQgPSB0aGlzLl9yYW5nZU1hcCh0aGlzLl9sb29rQXQuaG9yaXpvbnRhbElubmVyLCB5YXdMZWZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlhd0xlZnQgPSAtdGhpcy5fcmFuZ2VNYXAodGhpcy5fbG9va0F0Lmhvcml6b250YWxPdXRlciwgLXlhd0xlZnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXllUm90YXRpb24gPSBxdWF0LmZyb21FdWxlcih0aGlzLl90ZW1wUXVhdEEsIHBpdGNoLCB5YXdMZWZ0LCAwKTtcbiAgICAgICAgICAgIHRoaXMuYm9uZXMubGVmdEV5ZS5yb3RhdGlvbkxvY2FsID0gcXVhdC5tdWx0aXBseShleWVSb3RhdGlvbiwgdGhpcy5yZXN0UG9zZS5sZWZ0RXllLCBleWVSb3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgLyogUmlnaHQgZXllIChsaW1pdCB5YXcpICovXG4gICAgICAgIGlmICh0aGlzLmJvbmVzLnJpZ2h0RXllKSB7XG4gICAgICAgICAgICBsZXQgeWF3UmlnaHQgPSB5YXc7XG4gICAgICAgICAgICBpZiAoeWF3UmlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgeWF3UmlnaHQgPSB0aGlzLl9yYW5nZU1hcCh0aGlzLl9sb29rQXQuaG9yaXpvbnRhbE91dGVyLCB5YXdSaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5YXdSaWdodCA9IC10aGlzLl9yYW5nZU1hcCh0aGlzLl9sb29rQXQuaG9yaXpvbnRhbElubmVyLCAteWF3UmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXllUm90YXRpb24gPSBxdWF0LmZyb21FdWxlcih0aGlzLl90ZW1wUXVhdEEsIHBpdGNoLCB5YXdSaWdodCwgMCk7XG4gICAgICAgICAgICB0aGlzLmJvbmVzLnJpZ2h0RXllLnJvdGF0aW9uTG9jYWwgPSBxdWF0Lm11bHRpcGx5KGV5ZVJvdGF0aW9uLCB0aGlzLnJlc3RQb3NlLnJpZ2h0RXllLCBleWVSb3RhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3Jlc29sdmVDb25zdHJhaW50cygpIHtcbiAgICAgICAgZm9yIChjb25zdCBub2RlQ29uc3RyYWludCBvZiB0aGlzLl9ub2RlQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVDb25zdHJhaW50KG5vZGVDb25zdHJhaW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfcmVzb2x2ZUNvbnN0cmFpbnQobm9kZUNvbnN0cmFpbnQpIHtcbiAgICAgICAgY29uc3QgZHN0UmVzdFF1YXQgPSBub2RlQ29uc3RyYWludC5kZXN0aW5hdGlvblJlc3RMb2NhbFJvdGF0aW9uO1xuICAgICAgICBjb25zdCBzcmNSZXN0UXVhdEludiA9IG5vZGVDb25zdHJhaW50LnNvdXJjZVJlc3RMb2NhbFJvdGF0aW9uSW52O1xuICAgICAgICBjb25zdCB0YXJnZXRRdWF0ID0gcXVhdC5pZGVudGl0eSh0aGlzLl90ZW1wUXVhdEEpO1xuICAgICAgICBzd2l0Y2ggKG5vZGVDb25zdHJhaW50LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3JvbGwnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFTcmNRdWF0ID0gcXVhdC5tdWx0aXBseSh0aGlzLl90ZW1wUXVhdEEsIHNyY1Jlc3RRdWF0SW52LCBub2RlQ29uc3RyYWludC5zb3VyY2Uucm90YXRpb25Mb2NhbCk7XG4gICAgICAgICAgICAgICAgICAgIC8qIHNvdXJjZSB0byBwYXJlbnQgKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFTcmNRdWF0SW5QYXJlbnQgPSBxdWF0Lm11bHRpcGx5KHRoaXMuX3RlbXBRdWF0QSwgbm9kZUNvbnN0cmFpbnQuc291cmNlUmVzdExvY2FsUm90YXRpb24sIGRlbHRhU3JjUXVhdCk7XG4gICAgICAgICAgICAgICAgICAgIHF1YXQubXVsKGRlbHRhU3JjUXVhdEluUGFyZW50LCBkZWx0YVNyY1F1YXRJblBhcmVudCwgc3JjUmVzdFF1YXRJbnYpO1xuICAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdG8gZGVzdGluYXRpb24gKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZHN0UmVzdFF1YXRJbnYgPSBxdWF0LmludmVydCh0aGlzLl90ZW1wUXVhdEIsIGRzdFJlc3RRdWF0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsdGFTcmNRdWF0SW5Ec3QgPSBxdWF0Lm11bHRpcGx5KHRoaXMuX3RlbXBRdWF0QiwgZHN0UmVzdFF1YXRJbnYsIGRlbHRhU3JjUXVhdEluUGFyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcXVhdC5tdWx0aXBseShkZWx0YVNyY1F1YXRJbkRzdCwgZGVsdGFTcmNRdWF0SW5Ec3QsIGRzdFJlc3RRdWF0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9WZWMgPSB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5fdGVtcFYzQSwgbm9kZUNvbnN0cmFpbnQuYXhpcywgZGVsdGFTcmNRdWF0SW5Ec3QpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcm9tVG9RdWF0ID0gcXVhdC5yb3RhdGlvblRvKHRoaXMuX3RlbXBRdWF0QSwgbm9kZUNvbnN0cmFpbnQuYXhpcywgdG9WZWMpO1xuICAgICAgICAgICAgICAgICAgICBxdWF0Lm11bCh0YXJnZXRRdWF0LCBkc3RSZXN0UXVhdCwgcXVhdC5pbnZlcnQodGhpcy5fdGVtcFF1YXQsIGZyb21Ub1F1YXQpKTtcbiAgICAgICAgICAgICAgICAgICAgcXVhdC5tdWwodGFyZ2V0UXVhdCwgdGFyZ2V0UXVhdCwgZGVsdGFTcmNRdWF0SW5Ec3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FpbSc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkc3RQYXJlbnRXb3JsZFF1YXQgPSBub2RlQ29uc3RyYWludC5kZXN0aW5hdGlvbi5wYXJlbnQucm90YXRpb25Xb3JsZDtcbiAgICAgICAgICAgICAgICAgICAgLyogZnJvbVZlYyA9IGFpbUF4aXMuYXBwbHlRdWF0ZXJuaW9uKCBkc3RQYXJlbnRXb3JsZFF1YXQgKiBkc3RSZXN0UXVhdCApICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyb21WZWMgPSB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5fdGVtcFYzQSwgbm9kZUNvbnN0cmFpbnQuYXhpcywgZHN0UmVzdFF1YXQpO1xuICAgICAgICAgICAgICAgICAgICB2ZWMzLnRyYW5zZm9ybVF1YXQoZnJvbVZlYywgZnJvbVZlYywgZHN0UGFyZW50V29ybGRRdWF0KTtcbiAgICAgICAgICAgICAgICAgICAgLyogdG9WZWMgPSAoIHNyY1dvcmxkUG9zIC0gZHN0V29ybGRQb3MgKS5ub3JtYWxpemVkICovXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvVmVjID0gbm9kZUNvbnN0cmFpbnQuc291cmNlLmdldFRyYW5zbGF0aW9uV29ybGQodGhpcy5fdGVtcFYzQik7XG4gICAgICAgICAgICAgICAgICAgIHZlYzMuc3ViKHRvVmVjLCB0b1ZlYywgbm9kZUNvbnN0cmFpbnQuZGVzdGluYXRpb24uZ2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLl90ZW1wVjMpKTtcbiAgICAgICAgICAgICAgICAgICAgdmVjMy5ub3JtYWxpemUodG9WZWMsIHRvVmVjKTtcbiAgICAgICAgICAgICAgICAgICAgLyogZnJvbVRvUXVhdCA9IFF1YXRlcm5pb24uZnJvbVRvUm90YXRpb24oIGZyb21WZWMsIHRvVmVjICkgKi9cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJvbVRvUXVhdCA9IHF1YXQucm90YXRpb25Ubyh0aGlzLl90ZW1wUXVhdEEsIGZyb21WZWMsIHRvVmVjKTtcbiAgICAgICAgICAgICAgICAgICAgcXVhdC5tdWwodGFyZ2V0UXVhdCwgcXVhdC5pbnZlcnQodGhpcy5fdGVtcFF1YXQsIGRzdFBhcmVudFdvcmxkUXVhdCksIGZyb21Ub1F1YXQpO1xuICAgICAgICAgICAgICAgICAgICBxdWF0Lm11bCh0YXJnZXRRdWF0LCB0YXJnZXRRdWF0LCBkc3RQYXJlbnRXb3JsZFF1YXQpO1xuICAgICAgICAgICAgICAgICAgICBxdWF0Lm11bCh0YXJnZXRRdWF0LCB0YXJnZXRRdWF0LCBkc3RSZXN0UXVhdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncm90YXRpb24nOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3JjRGVsdGFRdWF0ID0gcXVhdC5tdWwodGFyZ2V0UXVhdCwgc3JjUmVzdFF1YXRJbnYsIG5vZGVDb25zdHJhaW50LnNvdXJjZS5yb3RhdGlvbkxvY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgcXVhdC5tdWwodGFyZ2V0UXVhdCwgZHN0UmVzdFF1YXQsIHNyY0RlbHRhUXVhdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8qIEFwcGx5IGNvbnN0cmFpbnQgKi9cbiAgICAgICAgcXVhdC5zbGVycCh0YXJnZXRRdWF0LCBkc3RSZXN0UXVhdCwgdGFyZ2V0UXVhdCwgbm9kZUNvbnN0cmFpbnQud2VpZ2h0KTtcbiAgICAgICAgbm9kZUNvbnN0cmFpbnQuZGVzdGluYXRpb24ucm90YXRpb25Mb2NhbCA9IHRhcmdldFF1YXQ7XG4gICAgfVxuICAgIF91cGRhdGVTcHJpbmdCb25lcyhkdCkge1xuICAgICAgICAvKiBQcmUtY29tcHV0ZSBjb2xsaWRlciBwb3NpdGlvbnMgKi9cbiAgICAgICAgdGhpcy5fc3BoZXJlQ29sbGlkZXJzLmZvckVhY2goKHsgb2JqZWN0LCBzaGFwZSwgY2FjaGUgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdmVjMy5jb3B5KGNhY2hlLmhlYWQsIHNoYXBlLm9mZnNldCk7XG4gICAgICAgICAgICBvYmplY3QudHJhbnNmb3JtVmVjdG9yV29ybGQob2Zmc2V0KTtcbiAgICAgICAgICAgIHZlYzMuYWRkKGNhY2hlLmhlYWQsIG9iamVjdC5nZXRUcmFuc2xhdGlvbldvcmxkKHRoaXMuX3RlbXBWMyksIG9mZnNldCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9jYXBzdWxlQ29sbGlkZXJzLmZvckVhY2goKHsgb2JqZWN0LCBzaGFwZSwgY2FjaGUgfSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2hhcGVDZW50ZXIgPSBvYmplY3QuZ2V0VHJhbnNsYXRpb25Xb3JsZCh0aGlzLl90ZW1wVjNBKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRPZmZzZXQgPSB2ZWMzLmNvcHkoY2FjaGUuaGVhZCwgc2hhcGUub2Zmc2V0KTtcbiAgICAgICAgICAgIG9iamVjdC50cmFuc2Zvcm1WZWN0b3JXb3JsZChoZWFkT2Zmc2V0KTtcbiAgICAgICAgICAgIHZlYzMuYWRkKGNhY2hlLmhlYWQsIHNoYXBlQ2VudGVyLCBoZWFkT2Zmc2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHRhaWxPZmZzZXQgPSB2ZWMzLmNvcHkoY2FjaGUudGFpbCwgc2hhcGUudGFpbCk7XG4gICAgICAgICAgICBvYmplY3QudHJhbnNmb3JtVmVjdG9yV29ybGQodGFpbE9mZnNldCk7XG4gICAgICAgICAgICB2ZWMzLmFkZChjYWNoZS50YWlsLCBzaGFwZUNlbnRlciwgdGFpbE9mZnNldCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiBVcGRhdGUgc3ByaW5nIGNoYWlucyAqL1xuICAgICAgICB0aGlzLl9zcHJpbmdDaGFpbnMuZm9yRWFjaCgoc3ByaW5nQ2hhaW4pID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ByaW5nQ2hhaW4uam9pbnRzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGpvaW50ID0gc3ByaW5nQ2hhaW4uam9pbnRzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFdvcmxkUm90YXRpb24gPSBqb2ludC5ub2RlLnBhcmVudFxuICAgICAgICAgICAgICAgICAgICA/IGpvaW50Lm5vZGUucGFyZW50LnJvdGF0aW9uV29ybGRcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9pZGVudGl0eVF1YXQ7XG4gICAgICAgICAgICAgICAgLyogMS4gRm9yY2VzICovXG4gICAgICAgICAgICAgICAgLyogaW5lcnRpYSA9IChjdXJyZW50VGFpbCAtIHByZXZUYWlsKSAqICgxLjBmIC0gZHJhZ0ZvcmNlKTsgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBpbmVydGlhID0gdGhpcy5faW5lcnRpYTtcbiAgICAgICAgICAgICAgICBpZiAoc3ByaW5nQ2hhaW4uY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlYzMuc3ViKGluZXJ0aWEsIGpvaW50LnN0YXRlLmN1cnJlbnRUYWlsQ2VudGVyLCBqb2ludC5zdGF0ZS5wcmV2VGFpbENlbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIHNwcmluZ0NoYWluLmNlbnRlci50cmFuc2Zvcm1WZWN0b3JXb3JsZChpbmVydGlhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZlYzMuc3ViKGluZXJ0aWEsIGpvaW50LnN0YXRlLmN1cnJlbnRUYWlsLCBqb2ludC5zdGF0ZS5wcmV2VGFpbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZlYzMuc2NhbGUoaW5lcnRpYSwgaW5lcnRpYSwgMS4wIC0gam9pbnQuZHJhZ0ZvcmNlKTtcbiAgICAgICAgICAgICAgICAvKiBzdGlmZm5lc3MgPSBkZWx0YVRpbWUgKiBwYXJlbnRXb3JsZFJvdGF0aW9uICogbG9jYWxSb3RhdGlvbiAqIGJvbmVBeGlzICogc3RpZmZuZXNzRm9yY2U7ICovXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RpZmZuZXNzID0gdmVjMy5jb3B5KHRoaXMuX3N0aWZmbmVzcywgam9pbnQuc3RhdGUuYm9uZUF4aXMpO1xuICAgICAgICAgICAgICAgIHZlYzMudHJhbnNmb3JtUXVhdChzdGlmZm5lc3MsIHN0aWZmbmVzcywgam9pbnQuc3RhdGUuaW5pdGlhbExvY2FsUm90YXRpb24pO1xuICAgICAgICAgICAgICAgIHZlYzMudHJhbnNmb3JtUXVhdChzdGlmZm5lc3MsIHN0aWZmbmVzcywgcGFyZW50V29ybGRSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgdmVjMy5zY2FsZShzdGlmZm5lc3MsIHN0aWZmbmVzcywgZHQgKiBqb2ludC5zdGlmZm5lc3MpO1xuICAgICAgICAgICAgICAgIC8qIGV4dGVybmFsID0gZGVsdGFUaW1lICogZ3Jhdml0eURpciAqIGdyYXZpdHlQb3dlcjsgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBleHRlcm5hbCA9IHZlYzMuc2NhbGUodGhpcy5fZXh0ZXJuYWwsIGpvaW50LmdyYXZpdHlEaXIsIGR0ICogam9pbnQuZ3Jhdml0eVBvd2VyKTtcbiAgICAgICAgICAgICAgICAvKiBuZXh0VGFpbCA9IGN1cnJlbnRUYWlsICsgaW5lcnRpYSArIHN0aWZmbmVzcyArIGV4dGVybmFsOyAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUYWlsID0gdmVjMy5jb3B5KHRoaXMuX3RlbXBWM0EsIGpvaW50LnN0YXRlLmN1cnJlbnRUYWlsKTtcbiAgICAgICAgICAgICAgICB2ZWMzLmFkZChuZXh0VGFpbCwgbmV4dFRhaWwsIGluZXJ0aWEpO1xuICAgICAgICAgICAgICAgIHZlYzMuYWRkKG5leHRUYWlsLCBuZXh0VGFpbCwgc3RpZmZuZXNzKTtcbiAgICAgICAgICAgICAgICB2ZWMzLmFkZChuZXh0VGFpbCwgbmV4dFRhaWwsIGV4dGVybmFsKTtcbiAgICAgICAgICAgICAgICAvKiBjb25zdHJhaW4gdGhlIGxlbmd0aCAqL1xuICAgICAgICAgICAgICAgIC8qIG5leHRUYWlsID0gd29ybGRQb3NpdGlvbiArIChuZXh0VGFpbCAtIHdvcmxkUG9zaXRpb24pLm5vcm1hbGl6ZWQgKiBib25lTGVuZ3RoOyAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmxkUG9zaXRpb24gPSBqb2ludC5ub2RlLmdldFRyYW5zbGF0aW9uV29ybGQodGhpcy5fdGVtcFYzQik7XG4gICAgICAgICAgICAgICAgdmVjMy5zdWIobmV4dFRhaWwsIG5leHRUYWlsLCB3b3JsZFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZShuZXh0VGFpbCwgbmV4dFRhaWwpO1xuICAgICAgICAgICAgICAgIHZlYzMuc2NhbGVBbmRBZGQobmV4dFRhaWwsIHdvcmxkUG9zaXRpb24sIG5leHRUYWlsLCBqb2ludC5zdGF0ZS5ib25lTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvKiAyLiBDb2xsaXNpb24gd2l0aCBjb2xsaWRlcnMgKi9cbiAgICAgICAgICAgICAgICAvKiBTcGhlcmUgY29sbGlkZXJzICovXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7IHNoYXBlLCBjYWNoZSB9IG9mIHNwcmluZ0NoYWluLnNwaGVyZUNvbGxpZGVycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFpbFRvU2hhcGUgPSB0aGlzLl90YWlsVG9TaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BoZXJlQ2VudGVyID0gY2FjaGUuaGVhZDtcbiAgICAgICAgICAgICAgICAgICAgdGFpbFRvU2hhcGUgPSB2ZWMzLnN1Yih0YWlsVG9TaGFwZSwgbmV4dFRhaWwsIHNwaGVyZUNlbnRlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGl1cyA9IHNoYXBlLnJhZGl1cyArIGpvaW50LmhpdFJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdCA9IHZlYzMubGVuZ3RoKHRhaWxUb1NoYXBlKSAtIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPCAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKHRhaWxUb1NoYXBlLCB0YWlsVG9TaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKG5leHRUYWlsLCBuZXh0VGFpbCwgdGFpbFRvU2hhcGUsIC1kaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnN0cmFpbnQgdGhlIGxlbmd0aCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjMy5zdWIobmV4dFRhaWwsIG5leHRUYWlsLCB3b3JsZFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKG5leHRUYWlsLCBuZXh0VGFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKG5leHRUYWlsLCB3b3JsZFBvc2l0aW9uLCBuZXh0VGFpbCwgam9pbnQuc3RhdGUuYm9uZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogQ2Fwc3VsZSBjb2xsaWRlcnMgKi9cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgc2hhcGUsIGNhY2hlIH0gb2Ygc3ByaW5nQ2hhaW4uY2Fwc3VsZUNvbGxpZGVycykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFpbFRvU2hhcGUgPSB0aGlzLl90YWlsVG9TaGFwZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZCA9IGNhY2hlLmhlYWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhaWwgPSBjYWNoZS50YWlsO1xuICAgICAgICAgICAgICAgICAgICAvKiBOYWl2ZWx5IHN0YXJ0IHdpdGggZGlzdGFuY2UgdG8gdGhlIGhlYWQgKi9cbiAgICAgICAgICAgICAgICAgICAgdGFpbFRvU2hhcGUgPSB2ZWMzLnN1Yih0YWlsVG9TaGFwZSwgbmV4dFRhaWwsIGhlYWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkVG9UYWlsID0gdmVjMy5zdWIodGhpcy5faGVhZFRvVGFpbCwgdGFpbCwgaGVhZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRvdCA9IHZlYzMuZG90KGhlYWRUb1RhaWwsIHRhaWxUb1NoYXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlYzMuc3F1YXJlZExlbmd0aChoZWFkVG9UYWlsKSA8PSBkb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIENsb3Nlc3QgdG8gdGFpbCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjMy5zdWIodGFpbFRvU2hhcGUsIG5leHRUYWlsLCB0YWlsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChkb3QgPiAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIENsb3Nlc3QgdG8gbWlkZGxlICovXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMzLnNjYWxlKGhlYWRUb1RhaWwsIGhlYWRUb1RhaWwsIGRvdCAvIHZlYzMuc3F1YXJlZExlbmd0aChoZWFkVG9UYWlsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMzLnN1Yih0YWlsVG9TaGFwZSwgdGFpbFRvU2hhcGUsIGhlYWRUb1RhaWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhZGl1cyA9IHNoYXBlLnJhZGl1cyArIGpvaW50LmhpdFJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdCA9IHZlYzMubGVuZ3RoKHRhaWxUb1NoYXBlKSAtIHJhZGl1cztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3QgPCAwLjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKHRhaWxUb1NoYXBlLCB0YWlsVG9TaGFwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKG5leHRUYWlsLCBuZXh0VGFpbCwgdGFpbFRvU2hhcGUsIC1kaXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvbnN0cmFpbnQgdGhlIGxlbmd0aCAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVjMy5zdWIobmV4dFRhaWwsIG5leHRUYWlsLCB3b3JsZFBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKG5leHRUYWlsLCBuZXh0VGFpbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKG5leHRUYWlsLCB3b3JsZFBvc2l0aW9uLCBuZXh0VGFpbCwgam9pbnQuc3RhdGUuYm9uZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogMy4gQXBwbHlpbmcgcm90YXRpb24gKi9cbiAgICAgICAgICAgICAgICB2ZWMzLmNvcHkoam9pbnQuc3RhdGUucHJldlRhaWwsIGpvaW50LnN0YXRlLmN1cnJlbnRUYWlsKTtcbiAgICAgICAgICAgICAgICB2ZWMzLmNvcHkoam9pbnQuc3RhdGUuY3VycmVudFRhaWwsIG5leHRUYWlsKTtcbiAgICAgICAgICAgICAgICBpZiAoc3ByaW5nQ2hhaW4uY2VudGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZlYzMuY29weShqb2ludC5zdGF0ZS5wcmV2VGFpbENlbnRlciwgam9pbnQuc3RhdGUuY3VycmVudFRhaWxDZW50ZXIpO1xuICAgICAgICAgICAgICAgICAgICB2ZWMzLmNvcHkoam9pbnQuc3RhdGUuY3VycmVudFRhaWxDZW50ZXIsIG5leHRUYWlsKTtcbiAgICAgICAgICAgICAgICAgICAgc3ByaW5nQ2hhaW4uY2VudGVyLnRyYW5zZm9ybVBvaW50SW52ZXJzZVdvcmxkKGpvaW50LnN0YXRlLmN1cnJlbnRUYWlsQ2VudGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogdG8gPSAobmV4dFRhaWwgKiAobm9kZS5wYXJlbnQud29ybGRNYXRyaXggKiBpbml0aWFsTG9jYWxNYXRyaXgpLmludmVyc2UpLm5vcm1hbGl6ZWQgKi9cbiAgICAgICAgICAgICAgICBqb2ludC5ub2RlLnBhcmVudC50cmFuc2Zvcm1Qb2ludEludmVyc2VXb3JsZChuZXh0VGFpbCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFRhaWxEdWFsUXVhdCA9IHF1YXQyLmZyb21UcmFuc2xhdGlvbih0aGlzLl90ZW1wUXVhdDIsIG5leHRUYWlsKTtcbiAgICAgICAgICAgICAgICBxdWF0Mi5tdWx0aXBseShuZXh0VGFpbER1YWxRdWF0LCBqb2ludC5zdGF0ZS5pbml0aWFsTG9jYWxUcmFuc2Zvcm1JbnZlcnQsIG5leHRUYWlsRHVhbFF1YXQpO1xuICAgICAgICAgICAgICAgIHF1YXQyLmdldFRyYW5zbGF0aW9uKG5leHRUYWlsLCBuZXh0VGFpbER1YWxRdWF0KTtcbiAgICAgICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZShuZXh0VGFpbCwgbmV4dFRhaWwpO1xuICAgICAgICAgICAgICAgIC8qIG5vZGUucm90YXRpb24gPSBpbml0aWFsTG9jYWxSb3RhdGlvbiAqIFF1YXRlcm5pb24uZnJvbVRvUXVhdGVybmlvbihib25lQXhpcywgdG8pOyAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IGpvaW50Um90YXRpb24gPSBxdWF0LnJvdGF0aW9uVG8odGhpcy5fdGVtcFF1YXRBLCBqb2ludC5zdGF0ZS5ib25lQXhpcywgbmV4dFRhaWwpO1xuICAgICAgICAgICAgICAgIGpvaW50Lm5vZGUucm90YXRpb25Mb2NhbCA9IHF1YXQubXVsKHRoaXMuX3RlbXBRdWF0QSwgam9pbnQuc3RhdGUuaW5pdGlhbExvY2FsUm90YXRpb24sIGpvaW50Um90YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBmaXJzdFBlcnNvbiBXaGV0aGVyIHRoZSBtb2RlbCBzaG91bGQgcmVuZGVyIGZvciBmaXJzdCBwZXJzb24gb3IgdGhpcmQgcGVyc29uIHZpZXdzXG4gICAgICovXG4gICAgc2V0IGZpcnN0UGVyc29uKGZpcnN0UGVyc29uKSB7XG4gICAgICAgIHRoaXMuX2ZpcnN0UGVyc29uQW5ub3RhdGlvbnMuZm9yRWFjaCgoYW5ub3RhdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZSA9IGZpcnN0UGVyc29uID09IGFubm90YXRpb24uZmlyc3RQZXJzb24gfHxcbiAgICAgICAgICAgICAgICBmaXJzdFBlcnNvbiAhPSBhbm5vdGF0aW9uLnRoaXJkUGVyc29uO1xuICAgICAgICAgICAgYW5ub3RhdGlvbi5ub2RlLmdldENvbXBvbmVudHMoJ21lc2gnKS5mb3JFYWNoKChtZXNoKSA9PiB7XG4gICAgICAgICAgICAgICAgbWVzaC5hY3RpdmUgPSB2aXNpYmxlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCB7IFZybSB9O1xuIiwgImltcG9ydCB7IHZlYzMgfSBmcm9tICdnbC1tYXRyaXgnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBUeXBlIH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmNvbnN0IF9kaXJlY3Rpb24gPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuLyoqXG4gKiBCYXNpYyBtb3ZlbWVudCB3aXRoIFcvQS9TL0Qga2V5cy5cbiAqL1xuY2xhc3MgV2FzZENvbnRyb2xzQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAnd2FzZC1jb250cm9scyc7XG4gICAgc3RhdGljIFByb3BlcnRpZXMgPSB7XG4gICAgICAgIC8qKiBNb3ZlbWVudCBzcGVlZCBpbiBtL3MuICovXG4gICAgICAgIHNwZWVkOiB7IHR5cGU6IFR5cGUuRmxvYXQsIGRlZmF1bHQ6IDAuMSB9LFxuICAgICAgICAvKiogRmxhZyBmb3Igb25seSBtb3ZpbmcgdGhlIG9iamVjdCBvbiB0aGUgZ2xvYmFsIHggJiB6IHBsYW5lcyAqL1xuICAgICAgICBsb2NrWTogeyB0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgIC8qKiBPYmplY3Qgb2Ygd2hpY2ggdGhlIG9yaWVudGF0aW9uIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGZvcndhcmQgZGlyZWN0aW9uICovXG4gICAgICAgIGhlYWRPYmplY3Q6IHsgdHlwZTogVHlwZS5PYmplY3QgfSxcbiAgICB9O1xuICAgIGluaXQoKSB7XG4gICAgICAgIHRoaXMudXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yaWdodCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZWZ0ID0gZmFsc2U7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5wcmVzcy5iaW5kKHRoaXMpKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5yZWxlYXNlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5oZWFkT2JqZWN0ID0gdGhpcy5oZWFkT2JqZWN0IHx8IHRoaXMub2JqZWN0O1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHZlYzMuemVybyhfZGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMudXApXG4gICAgICAgICAgICBfZGlyZWN0aW9uWzJdIC09IDEuMDtcbiAgICAgICAgaWYgKHRoaXMuZG93bilcbiAgICAgICAgICAgIF9kaXJlY3Rpb25bMl0gKz0gMS4wO1xuICAgICAgICBpZiAodGhpcy5sZWZ0KVxuICAgICAgICAgICAgX2RpcmVjdGlvblswXSAtPSAxLjA7XG4gICAgICAgIGlmICh0aGlzLnJpZ2h0KVxuICAgICAgICAgICAgX2RpcmVjdGlvblswXSArPSAxLjA7XG4gICAgICAgIHZlYzMubm9ybWFsaXplKF9kaXJlY3Rpb24sIF9kaXJlY3Rpb24pO1xuICAgICAgICBfZGlyZWN0aW9uWzBdICo9IHRoaXMuc3BlZWQ7XG4gICAgICAgIF9kaXJlY3Rpb25bMl0gKj0gdGhpcy5zcGVlZDtcbiAgICAgICAgdmVjMy50cmFuc2Zvcm1RdWF0KF9kaXJlY3Rpb24sIF9kaXJlY3Rpb24sIHRoaXMuaGVhZE9iamVjdC50cmFuc2Zvcm1Xb3JsZCk7XG4gICAgICAgIGlmICh0aGlzLmxvY2tZKSB7XG4gICAgICAgICAgICBfZGlyZWN0aW9uWzFdID0gMDtcbiAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKF9kaXJlY3Rpb24sIF9kaXJlY3Rpb24pO1xuICAgICAgICAgICAgdmVjMy5zY2FsZShfZGlyZWN0aW9uLCBfZGlyZWN0aW9uLCB0aGlzLnNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9iamVjdC50cmFuc2xhdGVMb2NhbChfZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgcHJlc3MoZSkge1xuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAzOCAvKiB1cCAqLyB8fFxuICAgICAgICAgICAgZS5rZXlDb2RlID09PSA4NyAvKiB3ICovIHx8XG4gICAgICAgICAgICBlLmtleUNvZGUgPT09IDkwIC8qIHogKi8pIHtcbiAgICAgICAgICAgIHRoaXMudXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzkgLyogcmlnaHQgKi8gfHwgZS5rZXlDb2RlID09PSA2OCAvKiBkICovKSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLmtleUNvZGUgPT09IDQwIC8qIGRvd24gKi8gfHwgZS5rZXlDb2RlID09PSA4MyAvKiBzICovKSB7XG4gICAgICAgICAgICB0aGlzLmRvd24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzcgLyogbGVmdCAqLyB8fFxuICAgICAgICAgICAgZS5rZXlDb2RlID09PSA2NSAvKiBhICovIHx8XG4gICAgICAgICAgICBlLmtleUNvZGUgPT09IDgxIC8qIHEgKi8pIHtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVsZWFzZShlKSB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM4IC8qIHVwICovIHx8XG4gICAgICAgICAgICBlLmtleUNvZGUgPT09IDg3IC8qIHcgKi8gfHxcbiAgICAgICAgICAgIGUua2V5Q29kZSA9PT0gOTAgLyogeiAqLykge1xuICAgICAgICAgICAgdGhpcy51cCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMzkgLyogcmlnaHQgKi8gfHwgZS5rZXlDb2RlID09PSA2OCAvKiBkICovKSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09PSA0MCAvKiBkb3duICovIHx8IGUua2V5Q29kZSA9PT0gODMgLyogcyAqLykge1xuICAgICAgICAgICAgdGhpcy5kb3duID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzNyAvKiBsZWZ0ICovIHx8XG4gICAgICAgICAgICBlLmtleUNvZGUgPT09IDY1IC8qIGEgKi8gfHxcbiAgICAgICAgICAgIGUua2V5Q29kZSA9PT0gODEgLyogcSAqLykge1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgeyBXYXNkQ29udHJvbHNDb21wb25lbnQgfTtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIga2luZE9mID0gKGZ1bmN0aW9uKGNhY2hlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih0aGluZykge1xuICAgIHZhciBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG4gIH07XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuZnVuY3Rpb24ga2luZE9mVGVzdCh0eXBlKSB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBmdW5jdGlvbiBpc0tpbmRPZih0aGluZykge1xuICAgIHJldHVybiBraW5kT2YodGhpbmcpID09PSB0eXBlO1xuICB9O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodGhpbmcpIHtcbiAgdmFyIHBhdHRlcm4gPSAnW29iamVjdCBGb3JtRGF0YV0nO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHxcbiAgICB0b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gcGF0dGVybiB8fFxuICAgIChpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSBwYXR0ZXJuKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqL1xuXG5mdW5jdGlvbiBpbmhlcml0cyhjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmaWx0ZXJdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHRvRmxhdE9iamVjdChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlcikge1xuICB2YXIgcHJvcHM7XG4gIHZhciBpO1xuICB2YXIgcHJvcDtcbiAgdmFyIG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLypcbiAqIGRldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIHZhciBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3RcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KHRoaW5nKSB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICB2YXIgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKGlzVW5kZWZpbmVkKGkpKSByZXR1cm4gbnVsbDtcbiAgdmFyIGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIGlzVHlwZWRBcnJheSA9IChmdW5jdGlvbihUeXBlZEFycmF5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NLFxuICBpbmhlcml0czogaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdDogdG9GbGF0T2JqZWN0LFxuICBraW5kT2Y6IGtpbmRPZixcbiAga2luZE9mVGVzdDoga2luZE9mVGVzdCxcbiAgZW5kc1dpdGg6IGVuZHNXaXRoLFxuICB0b0FycmF5OiB0b0FycmF5LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdDogaXNGaWxlTGlzdFxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbnZhciBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbnZhciBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChmdW5jdGlvbihjb2RlKSB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSBmdW5jdGlvbihlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpIHtcbiAgdmFyIGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3NFcnJvcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyBGb3JtRGF0YSgpO1xuXG4gIHZhciBzdGFjayA9IFtdO1xuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZChkYXRhLCBwYXJlbnRLZXkpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChkYXRhKSB8fCB1dGlscy5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihkYXRhKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGFyZW50S2V5KTtcbiAgICAgIH1cblxuICAgICAgc3RhY2sucHVzaChkYXRhKTtcblxuICAgICAgdXRpbHMuZm9yRWFjaChkYXRhLCBmdW5jdGlvbiBlYWNoKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB2YXIgZnVsbEtleSA9IHBhcmVudEtleSA/IHBhcmVudEtleSArICcuJyArIGtleSA6IGtleTtcbiAgICAgICAgdmFyIGFycjtcblxuICAgICAgICBpZiAodmFsdWUgJiYgIXBhcmVudEtleSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh1dGlscy5lbmRzV2l0aChrZXksICdbXScpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSkpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAhdXRpbHMuaXNVbmRlZmluZWQoZWwpICYmIGZvcm1EYXRhLmFwcGVuZChmdWxsS2V5LCBjb252ZXJ0VmFsdWUoZWwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJ1aWxkKHZhbHVlLCBmdWxsS2V5KTtcbiAgICAgIH0pO1xuXG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKHBhcmVudEtleSwgY29udmVydFZhbHVlKGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zvcm1EYXRhO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuL0F4aW9zRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsZWRFcnJvcjtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgdmFyIG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbCcpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcbnZhciBwYXJzZVByb3RvY29sID0gcmVxdWlyZSgnLi4vaGVscGVycy9wYXJzZVByb3RvY29sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkgJiYgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsZWRFcnJvcigpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBbICdodHRwJywgJ2h0dHBzJywgJ2ZpbGUnIF0uaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsICIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5tb2R1bGUuZXhwb3J0cyA9IG51bGw7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25hbCcpO1xudmFyIHRvRm9ybURhdGEgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB2YXIgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG4gICAgdmFyIGNvbnRlbnRUeXBlID0gaGVhZGVycyAmJiBoZWFkZXJzWydDb250ZW50LVR5cGUnXTtcblxuICAgIHZhciBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgKGlzT2JqZWN0UGF5bG9hZCAmJiBjb250ZW50VHlwZSA9PT0gJ211bHRpcGFydC9mb3JtLWRhdGEnKSkge1xuICAgICAgdmFyIF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuICAgICAgcmV0dXJuIHRvRm9ybURhdGEoaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSwgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFBheWxvYWQgfHwgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJykge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiByZXF1aXJlKCcuL2Vudi9Gb3JtRGF0YScpXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYmVmb3JlUmVkaXJlY3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yNy4yXCJcbn07IiwgIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzZXJ0T3B0aW9uczogYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yczogdmFsaWRhdG9yc1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4vYnVpbGRGdWxsUGF0aCcpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9DYW5jZWxlZEVycm9yJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4vaGVscGVycy90b0Zvcm1EYXRhJyk7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vbGliL2NvcmUvQXhpb3NFcnJvcicpO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsICJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwgImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IGZvcm1hdHMgfSBmcm9tICcuLi91dGlscy9mb3JtYXRzLmpzJztcclxuaW1wb3J0IHsgY2hlY2tVc2VyUGxhdGZvcm0gfSBmcm9tICcuLi91dGlscy9oZWxwZXJzLmpzJztcclxuLy9pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xyXG5cclxuY29uc3QgQkVBQ09OX0FQSV9CQVNFID0gJ2h0dHBzOi8vYmVhY29uLnplc3R5Lm1hcmtldCdcclxuY29uc3QgQkVBQ09OX0dSQVBIUUxfVVJJID0gJ2h0dHBzOi8vYmVhY29uMi56ZXN0eS5tYXJrZXQvemdyYXBocWwnXHJcblxyXG5jb25zdCBEQl9FTkRQT0lOVCA9ICdodHRwczovL2FwaS56ZXN0eS5tYXJrZXQvYXBpJztcclxuLy8gVE9ETzogRGV0ZXJtaW5lIGJlc3Qgd2F5IHRvIGVuYWJsZSBzd2l0Y2hpbmcgdG8gc3RhZ2luZ1xyXG5jb25zdCBTVEFHSU5HX0RCX0VORFBPSU5UID0gJ2h0dHBzOi8vYXBpLXN0YWdpbmcuemVzdHkubWFya2V0L2FwaSc7XHJcblxyXG4vL2NvbnN0IHNlc3Npb25JZCA9IHV1aWR2NCgpO1xyXG5cclxuY29uc3QgZmV0Y2hDYW1wYWlnbkFkID0gYXN5bmMgKGFkVW5pdElkLCBmb3JtYXQgPSAndGFsbCcsIHN0eWxlID0gJ3N0YW5kYXJkJykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB1cmwgPSBlbmNvZGVVUkkod2luZG93LnRvcC5sb2NhdGlvbi5ocmVmKS5yZXBsYWNlKC9cXC8kLywgJycpOyAvLyBJZiBVUkwgZW5kcyB3aXRoIGEgc2xhc2gsIHJlbW92ZSBpdFxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KGAke0RCX0VORFBPSU5UfS9hZD9hZF91bml0X2lkPSR7YWRVbml0SWR9JnVybD0ke3VybH1gKTtcclxuICAgIHJldHVybiByZXMuZGF0YTtcclxuICB9IGNhdGNoIHtcclxuICAgIGNvbnNvbGUud2FybignTm8gYWN0aXZlIGNhbXBhaWduIGJhbm5lciBjb3VsZCBiZSBsb2NhdGVkLiBEaXNwbGF5aW5nIGRlZmF1bHQgYmFubmVyLicpXHJcbiAgICByZXR1cm4geyBBZHM6IFt7IGFzc2V0X3VybDogZm9ybWF0c1tmb3JtYXRdLnN0eWxlW3N0eWxlXSwgY3RhX3VybDogJ2h0dHBzOi8vd3d3Lnplc3R5Lm1hcmtldCcgfV0sIENhbXBhaWduSWQ6ICdUZXN0Q2FtcGFpZ24nfTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbmNyZW1lbnQgdGhlIG9uLWxvYWQgZXZlbnQgY291bnQgZm9yIHRoZSBzcGFjZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3BhY2VJZCBUaGUgc3BhY2UgSURcclxuICogQHJldHVybnMgQSBQcm9taXNlIHJlcHJlc2VudGluZyB0aGUgUE9TVCByZXF1ZXN0XHJcbiAqL1xyXG5jb25zdCBzZW5kT25Mb2FkTWV0cmljID0gYXN5bmMgKHNwYWNlSWQsIGNhbXBhaWduSWQgPSBudWxsKSA9PiB7XHJcbiAgY29uc3QgeyBwbGF0Zm9ybSwgY29uZmlkZW5jZSB9ID0gYXdhaXQgY2hlY2tVc2VyUGxhdGZvcm0oKTtcclxuICBcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc3BhY2VDb3VudGVyRW5kcG9pbnQgPSBCRUFDT05fQVBJX0JBU0UgKyBgL2FwaS92MS9zcGFjZS8ke3NwYWNlSWR9YFxyXG4gICAgYXdhaXQgYXhpb3MucHV0KHNwYWNlQ291bnRlckVuZHBvaW50KVxyXG5cclxuICAgIGF3YWl0IGF4aW9zLnBvc3QoXHJcbiAgICAgIEJFQUNPTl9HUkFQSFFMX1VSSSxcclxuICAgICAgeyBxdWVyeTogYG11dGF0aW9uIHsgaW5jcmVtZW50KGV2ZW50VHlwZTogdmlzaXRzLCBzcGFjZUlkOiBcXFwiJHtzcGFjZUlkfVxcXCIsIGNhbXBhaWduSWQ6IFxcXCIke2NhbXBhaWduSWR9XFxcIiwgcGxhdGZvcm06IHsgbmFtZTogJHtwbGF0Zm9ybX0sIGNvbmZpZGVuY2U6ICR7Y29uZmlkZW5jZX0gfSkgeyBtZXNzYWdlIH0gfWAgfSxcclxuICAgICAgeyBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfX1cclxuICAgIClcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBlbWl0IG9ubG9hZCBldmVudFwiLCBlLm1lc3NhZ2UpXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3Qgc2VuZE9uQ2xpY2tNZXRyaWMgPSBhc3luYyAoc3BhY2VJZCwgY2FtcGFpZ25JZCA9IG51bGwpID0+IHtcclxuICBjb25zdCB7IHBsYXRmb3JtLCBjb25maWRlbmNlIH0gPSBhd2FpdCBjaGVja1VzZXJQbGF0Zm9ybSgpO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3Qgc3BhY2VDbGlja0VuZHBvaW50ID0gQkVBQ09OX0FQSV9CQVNFICsgYC9hcGkvdjEvc3BhY2UvY2xpY2svJHtzcGFjZUlkfWBcclxuICAgIGF3YWl0IGF4aW9zLnB1dChzcGFjZUNsaWNrRW5kcG9pbnQpXHJcblxyXG4gICAgYXdhaXQgYXhpb3MucG9zdChcclxuICAgICAgQkVBQ09OX0dSQVBIUUxfVVJJLFxyXG4gICAgICB7IHF1ZXJ5OiBgbXV0YXRpb24geyBpbmNyZW1lbnQoZXZlbnRUeXBlOiBjbGlja3MsIHNwYWNlSWQ6IFxcXCIke3NwYWNlSWR9XFxcIiwgY2FtcGFpZ25JZDogXFxcIiR7Y2FtcGFpZ25JZH1cXFwiLCBwbGF0Zm9ybTogeyBuYW1lOiAke3BsYXRmb3JtfSwgY29uZmlkZW5jZTogJHtjb25maWRlbmNlfSB9KSB7IG1lc3NhZ2UgfSB9YCB9LFxyXG4gICAgICB7IGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9fVxyXG4gICAgKVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiRmFpbGVkIHRvIGVtaXQgb25jbGljayBldmVudFwiLCBlLm1lc3NhZ2UpXHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBhbmFseXRpY3NTZXNzaW9uID0gYXN5bmMgKHNwYWNlSWQsIGNhbXBhaWduSWQpID0+IHtcclxuICBjb25zdCB7IHBsYXRmb3JtLCBjb25maWRlbmNlIH0gPSBhd2FpdCBjaGVja1VzZXJQbGF0Zm9ybSgpO1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBheGlvcy5wb3N0KFxyXG4gICAgICBCRUFDT05fR1JBUEhRTF9VUkksXHJcbiAgICAgIHsgcXVlcnk6IGBtdXRhdGlvbiB7IGluY3JlbWVudChldmVudFR5cGU6IHNlc3Npb24sIHNwYWNlSWQ6IFxcXCIke3NwYWNlSWR9XFxcIiwgY2FtcGFpZ25JZDogXFxcIiR7Y2FtcGFpZ25JZH1cXFwiLCBwbGF0Zm9ybTogeyBuYW1lOiAke3BsYXRmb3JtfSwgY29uZmlkZW5jZTogJHtjb25maWRlbmNlfSB9KSB7IG1lc3NhZ2UgfSB9YCB9LFxyXG4gICAgICB7IGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9fVxyXG4gICAgKVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUubG9nKGBGYWlsZWQgdG8gZW1pdCBzZXNzaW9uIGFuYWx5dGljc2AsIGUubWVzc2FnZSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IGZldGNoQ2FtcGFpZ25BZCwgc2VuZE9uTG9hZE1ldHJpYywgc2VuZE9uQ2xpY2tNZXRyaWMsIGFuYWx5dGljc1Nlc3Npb24gfTtcclxuIiwgImNvbnN0IGFzc2V0c1VSTCA9ICdodHRwczovL3plc3R5LXN0b3JhZ2UtcHJvZC5zMy5hbWF6b25hd3MuY29tL2ltYWdlcy96ZXN0eSc7XHJcblxyXG5jb25zdCBmb3JtYXRzID0ge1xyXG4gICAgJ3RhbGwnOiB7XHJcbiAgICAgICAgd2lkdGg6IDAuNzUsXHJcbiAgICAgICAgaGVpZ2h0OiAxLFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICdzdGFuZGFyZCc6IGAke2Fzc2V0c1VSTH0vemVzdHktYmFubmVyLXRhbGwucG5nYCxcclxuICAgICAgICAgICAgJ21pbmltYWwnOiBgJHthc3NldHNVUkx9L3plc3R5LWJhbm5lci10YWxsLW1pbmltYWwucG5nYCxcclxuICAgICAgICAgICAgJ3RyYW5zcGFyZW50JzogYCR7YXNzZXRzVVJMfS96ZXN0eS1iYW5uZXItdGFsbC10cmFuc3BhcmVudC5wbmdgXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgICd3aWRlJzoge1xyXG4gICAgICAgIHdpZHRoOiA0LFxyXG4gICAgICAgIGhlaWdodDogMSxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAnc3RhbmRhcmQnOiBgJHthc3NldHNVUkx9L3plc3R5LWJhbm5lci13aWRlLnBuZ2AsXHJcbiAgICAgICAgICAgICdtaW5pbWFsJzogYCR7YXNzZXRzVVJMfS96ZXN0eS1iYW5uZXItd2lkZS1taW5pbWFsLnBuZ2AsXHJcbiAgICAgICAgICAgICd0cmFuc3BhcmVudCc6IGAke2Fzc2V0c1VSTH0vemVzdHktYmFubmVyLXdpZGUtdHJhbnNwYXJlbnQucG5nYFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAnc3F1YXJlJzoge1xyXG4gICAgICAgIHdpZHRoOiAxLFxyXG4gICAgICAgIGhlaWdodDogMSxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAnc3RhbmRhcmQnOiBgJHthc3NldHNVUkx9L3plc3R5LWJhbm5lci1zcXVhcmUucG5nYCxcclxuICAgICAgICAgICAgJ21pbmltYWwnOiBgJHthc3NldHNVUkx9L3plc3R5LWJhbm5lci1zcXVhcmUtbWluaW1hbC5wbmdgLFxyXG4gICAgICAgICAgICAndHJhbnNwYXJlbnQnOiBgJHthc3NldHNVUkx9L3plc3R5LWJhbm5lci1zcXVhcmUtdHJhbnNwYXJlbnQucG5nYFxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgZGVmYXVsdEZvcm1hdCA9ICdzcXVhcmUnO1xyXG5jb25zdCBkZWZhdWx0U3R5bGUgPSAnc3RhbmRhcmQnO1xyXG5cclxuZXhwb3J0IHsgZm9ybWF0cywgZGVmYXVsdEZvcm1hdCwgZGVmYXVsdFN0eWxlIH07IiwgImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG4vKipcclxuICogUGFyc2VzIGlwZnM6Ly8gYW5kIGFyOi8vIGxpbmtzIGFuZCBJUEZTIGhhc2hlcyB0byBVUkxzLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJpIFRoZSBpcGZzOi8vIGxpbmsgb3IgSVBGUyBoYXNoLlxyXG4gKiBAcmV0dXJucyBBIGZvcm1hdHRlZCBVUkwgdG8gdGhlIElQRlMgcmVzb3VyY2UuXHJcbiAqL1xyXG5jb25zdCBwYXJzZVByb3RvY29sID0gdXJpID0+IHtcclxuICBpZiAodXJpLnN1YnN0cmluZygwLDQpID09PSBcImlwZnNcIikge1xyXG4gICAgcmV0dXJuIGBodHRwczovL2lwZnMuemVzdHkubWFya2V0L2lwZnMvJHt1cmkuc3Vic3RyaW5nKDcpfWA7XHJcbiAgfSBlbHNlIGlmICh1cmkuc3Vic3RyaW5nKDAsNCkgPT09IFwiaHR0cFwiKSB7XHJcbiAgICByZXR1cm4gdXJpO1xyXG4gIH0gZWxzZSBpZiAodXJpLnN1YnN0cmluZygwLDUpID09PSBcImh0dHBzXCIpIHtcclxuICAgIHJldHVybiB1cmk7XHJcbiAgfSBlbHNlIGlmICh1cmkuc3Vic3RyaW5nKDAsMikgPT09IFwiYXJcIikge1xyXG4gICAgLy8gZ2V0IHJlZGlyZWN0ZWQgdXJsXHJcbiAgICBheGlvcy5nZXQoYGh0dHBzOi8vYXJ3ZWF2ZS5uZXQvJHt1cmkuc3Vic3RyaW5nKDUpfWApXHJcbiAgICAgIC50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy51cmw7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgfSlcclxuXHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIGRlZmF1bHQgdG8gaXBmc1xyXG4gICAgcmV0dXJuIGBodHRwczovL2lwZnMuemVzdHkubWFya2V0L2lwZnMvJHt1cml9YDtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYW4gSVBGUyBnYXRld2F5IHRvIGFsbGV2aWF0ZSByYXRlLXRocm90dGxpbmcgZnJvbSB1c2luZyBvbmx5IGEgc2luZ2xlIGdhdGV3YXkuXHJcbiAqIFNlbGVjdGlvbiBpcyB3ZWlnaHRlZCByYW5kb20gYmFzZWQgb24gYXZlcmFnZSBsYXRlbmN5LlxyXG4gKiBAcmV0dXJucyBBIHdlaWdodGVkIHJhbmRvbSBwdWJsaWMgSVBGUyBnYXRld2F5XHJcbiAqL1xyXG5jb25zdCBnZXRJUEZTR2F0ZXdheSA9ICgpID0+IHtcclxuICAvLyBUZW1wb3JhcmlseSByZS13ZWlnaHRpbmcgZm9yIGVhc2Ugb2YgdGVzdGluZyBkdXJpbmcgVjIgbWlncmF0aW9uXHJcbiAgY29uc3QgZ2F0ZXdheXMgPSBbXHJcbiAgICB7IGdhdGV3YXk6ICdodHRwczovL2lwZnMuZmlsZWJhc2UuaW8nLCB3ZWlnaHQ6IDM0IH0sXHJcbiAgICB7IGdhdGV3YXk6ICdodHRwczovL2Nsb3VkZmxhcmUtaXBmcy5jb20nLCB3ZWlnaHQ6IDMzIH0sXHJcbiAgICB7IGdhdGV3YXk6ICdodHRwczovL2dhdGV3YXkucGluYXRhLmNsb3VkJywgd2VpZ2h0OiAzMyB9LFxyXG4gIF07XHJcblxyXG4gIGNvbnN0IHdlaWdodHMgPSBbXTtcclxuICBsZXQgaTtcclxuICBmb3IgKGkgPSAwOyBpIDwgZ2F0ZXdheXMubGVuZ3RoOyBpKyspIHtcclxuICAgIHdlaWdodHNbaV0gPSBnYXRld2F5c1tpXS53ZWlnaHQgKyAod2VpZ2h0c1tpIC0gMV0gfHwgMCk7XHJcbiAgfVxyXG4gIGNvbnN0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCkgKiB3ZWlnaHRzW3dlaWdodHMubGVuZ3RoIC0gMV07XHJcbiAgZm9yIChpID0gMDsgaSA8IHdlaWdodHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGlmICh3ZWlnaHRzW2ldID4gcmFuZG9tKSBicmVhaztcclxuICB9XHJcbiAgcmV0dXJuIGdhdGV3YXlzW2ldLmdhdGV3YXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGb3IgZWFjaCBvZiB0aGUgZm9sbG93aW5nIGJyb3dzZXIgY2hlY2tpbmcgZnVuY3Rpb25zLCB3ZSBoYXZlIGEgbWF0Y2ggd2l0aCBhXHJcbiAqIGNvbmZpZGVuY2Ugb2YgXCJGdWxsXCIgaWYgYm90aCB0aGUgZmVhdHVyZSBkZXRlY3Rpb24gY2hlY2sgYW5kIHVzZXIgYWdlbnQgY2hlY2tcclxuICogY29tZSBiYWNrIHRydWUuIElmIG9ubHkgb25lIG9mIHRoZW0gY29tZXMgYmFjayB0cnVlLCB3ZSBoYXZlIGEgbWF0Y2ggd2l0aCBhIGNvbmZpZGVuY2VcclxuICogb2YgXCJQYXJ0aWFsXCIuIElmIG5laXRoZXIgYXJlIHRydWUsIG1hdGNoIGlzIGZhbHNlIGFuZCBvdXIgY29uZmlkZW5jZSBpcyBcIk5vbmVcIi5cclxuICovXHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgZmVhdHVyZSBkZXRlY3Rpb24gYW5kIGEgVUEgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHVzZXIgaXMgdXNpbmcgT2N1bHVzIEJyb3dzZXIuXHJcbiAqIEByZXR1cm5zIGFuIG9iamVjdCBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlcmUgaXMgYSBtYXRjaCBhbmQgdGhlIGFzc29jaWF0ZWQgY29uZmlkZW5jZSBsZXZlbC5cclxuICovXHJcbmNvbnN0IGNoZWNrT2N1bHVzQnJvd3NlciA9ICgpID0+IHtcclxuICAvLyBBcyBvZiA1LzI2LzIyLCBvbmx5IE9jdWx1cyBCcm93c2VyIGhhcyBpbXBsZW1lbnRlZCB0aGUgV2ViWFIgSGFuZCBJbnB1dCBNb2R1bGUgYW5kIFdlYlhSIExheWVycyBBUEkuXHJcbiAgY29uc3QgZmVhdHVyZURldGVjdCA9ICh3aW5kb3cuWFJIYW5kICE9IG51bGwgJiYgd2luZG93LlhSTWVkaWFCaW5kaW5nICE9IG51bGwpO1xyXG4gIGNvbnN0IHVhQ2hlY2sgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdPY3VsdXNCcm93c2VyJyk7XHJcbiAgY29uc3QgY29uZmlkZW5jZSA9IGZlYXR1cmVEZXRlY3QgJiYgdWFDaGVjayA/ICdGdWxsJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVEZXRlY3QgfHwgdWFDaGVjayA/ICdQYXJ0aWFsJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICdOb25lJztcclxuICByZXR1cm4geyBtYXRjaDogY29uZmlkZW5jZSAhPT0gJ05vbmUnLCBjb25maWRlbmNlOiBjb25maWRlbmNlIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGZlYXR1cmUgZGV0ZWN0aW9uIGFuZCBhIFVBIGNoZWNrIHRvIGRldGVybWluZSBpZiB1c2VyIGlzIHVzaW5nIFdvbHZpYy5cclxuICogQHJldHVybnMgYW4gb2JqZWN0IGluZGljYXRpbmcgd2hldGhlciB0aGVyZSBpcyBhIG1hdGNoIGFuZCB0aGUgYXNzb2NpYXRlZCBjb25maWRlbmNlIGxldmVsLlxyXG4gKi9cclxuY29uc3QgY2hlY2tXb2x2aWNCcm93c2VyID0gKCkgPT4ge1xyXG4gIC8vIFdoaWxlIFdvbHZpYyBpcyBzdGlsbCBzaGlwcGluZyB3aXRoIGEgR2Vja29WaWV3IGJhY2tlbmQsIHRoaXMgZmVhdHVyZSBkZXRlY3Qgc2hvdWxkIGhvbGQgdHJ1ZS5cclxuICAvLyBPbmNlIHZlcnNpb25zIHdpdGggZGlmZmVyZW50IGJhY2tlbmRzIHN0YXJ0IHNob3dpbmcgdXAgaW4gdGhlIHdpbGQsIHRoaXMgd2lsbCBuZWVkIHJldmlzaXRpbmcuXHJcbiAgY29uc3QgZmVhdHVyZURldGVjdCA9ICh3aW5kb3cubW96SW5uZXJTY3JlZW5YICE9IG51bGwgJiYgd2luZG93LnNwZWVjaFN5bnRoZXNpcyA9PSBudWxsKTtcclxuICBjb25zdCB1YUNoZWNrID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnTW9iaWxlIFZSJykgJiYgIW5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ09jdWx1c0Jyb3dzZXInKTtcclxuICBjb25zdCBjb25maWRlbmNlID0gZmVhdHVyZURldGVjdCAmJiB1YUNoZWNrID8gJ0Z1bGwnIDpcclxuICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZURldGVjdCB8fCB1YUNoZWNrID8gJ1BhcnRpYWwnIDpcclxuICAgICAgICAgICAgICAgICAgICAgJ05vbmUnO1xyXG4gIHJldHVybiB7IG1hdGNoOiBjb25maWRlbmNlICE9PSAnTm9uZScsIGNvbmZpZGVuY2U6IGNvbmZpZGVuY2UgfVxyXG59XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgZmVhdHVyZSBkZXRlY3Rpb24gYW5kIGEgVUEgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHVzZXIgaXMgdXNpbmcgUGljbydzIGJyb3dzZXIuXHJcbiAqIEByZXR1cm5zIGFuIG9iamVjdCBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlcmUgaXMgYSBtYXRjaCBhbmQgdGhlIGFzc29jaWF0ZWQgY29uZmlkZW5jZSBsZXZlbC5cclxuICovXHJcbiBjb25zdCBjaGVja1BpY29Ccm93c2VyID0gYXN5bmMgKCkgPT4ge1xyXG4gIC8vIFBpY28ncyBpbnRlcm5hbCBicm93c2VyIGlzIGEgQ2hyb21pdW0gZm9yayBhbmQgc2VlbXMgdG8gZXhwb3NlIHNvbWUgV2ViWFIgQVIgbW9kdWxlcyxcclxuICAvLyBzbyBwZXJmb3JtIGFuIGlzU2Vzc2lvblN1cHBvcnRlZCgpIGNoZWNrIGZvciBpbW1lcnNpdmUtdnIgYW5kIGltbWVyc2l2ZS1hci5cclxuICBjb25zdCBmZWF0dXJlRGV0ZWN0ID0gbmF2aWdhdG9yLnhyICYmIFxyXG4gICAgKGF3YWl0IG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoJ2ltbWVyc2l2ZS12cicpICYmIGF3YWl0IG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQoJ2ltbWVyc2l2ZS1hcicpKTtcclxuICBjb25zdCB1YUNoZWNrID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnUGljbyBOZW8gMyBMaW5rJyk7XHJcbiAgY29uc3QgY29uZmlkZW5jZSA9IGZlYXR1cmVEZXRlY3QgJiYgdWFDaGVjayA/ICdGdWxsJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVEZXRlY3QgfHwgdWFDaGVjayA/ICdQYXJ0aWFsJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICdOb25lJztcclxuICByZXR1cm4geyBtYXRjaDogY29uZmlkZW5jZSAhPT0gJ05vbmUnLCBjb25maWRlbmNlOiBjb25maWRlbmNlIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGZlYXR1cmUgZGV0ZWN0aW9uIGFuZCBhIFVBIGNoZWNrIHRvIGRldGVybWluZSBpZiB1c2VyIGlzIHVzaW5nIGEgYnJvd3NlciBvbiB0aGVpciBkZXNrdG9wLlxyXG4gKiBAcmV0dXJucyBhbiBvYmplY3QgaW5kaWNhdGluZyB3aGV0aGVyIHRoZXJlIGlzIGEgbWF0Y2ggYW5kIHRoZSBhc3NvY2lhdGVkIGNvbmZpZGVuY2UgbGV2ZWwuXHJcbiAqL1xyXG4gY29uc3QgY2hlY2tEZXNrdG9wQnJvd3NlciA9ICgpID0+IHtcclxuICAvLyBXZSBhcmUgZG9pbmcgYSBjb2Fyc2UgY2hlY2sgaGVyZSBmb3IgbGFjayBvZiB0b3VjaC1jYXBhYmlsaXR5IGFuZCBubyBBbmRyb2lkL01vYmlsZSBzdHJpbmcgaW4gdGhlIFVBLlxyXG4gIGNvbnN0IGZlYXR1cmVEZXRlY3QgPSAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID09PSAwIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID09PSAwKTtcclxuICBjb25zdCB1YUNoZWNrID0gIW5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoJ0FuZHJvaWQnKSAmJiAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnTW9iaWxlJyk7XHJcbiAgY29uc3QgY29uZmlkZW5jZSA9IGZlYXR1cmVEZXRlY3QgJiYgdWFDaGVjayA/ICdGdWxsJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVEZXRlY3QgfHwgdWFDaGVjayA/ICdQYXJ0aWFsJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICdOb25lJztcclxuICByZXR1cm4geyBtYXRjaDogY29uZmlkZW5jZSAhPT0gJ05vbmUnLCBjb25maWRlbmNlOiBjb25maWRlbmNlIH1cclxufVxyXG5cclxuY29uc3QgY2hlY2tVc2VyUGxhdGZvcm0gPSBhc3luYyAoKSA9PiB7XHJcbiAgbGV0IGN1cnJlbnRNYXRjaCA9IHtcclxuICAgIHBsYXRmb3JtOiAnJyxcclxuICAgIGNvbmZpZGVuY2U6ICcnXHJcbiAgfTtcclxuXHJcbiAgaWYgKGNoZWNrT2N1bHVzQnJvd3NlcigpLm1hdGNoKSB7XHJcbiAgICBjdXJyZW50TWF0Y2ggPSB7IHBsYXRmb3JtOiAnT2N1bHVzJywgY29uZmlkZW5jZTogY2hlY2tPY3VsdXNCcm93c2VyKCkuY29uZmlkZW5jZSB9O1xyXG4gIH0gZWxzZSBpZiAoY2hlY2tXb2x2aWNCcm93c2VyKCkubWF0Y2gpIHtcclxuICAgIGN1cnJlbnRNYXRjaCA9IHsgcGxhdGZvcm06ICdXb2x2aWMnLCBjb25maWRlbmNlOiBjaGVja1dvbHZpY0Jyb3dzZXIoKS5jb25maWRlbmNlIH07XHJcbiAgfSBlbHNlIGlmIChhd2FpdCBjaGVja1BpY29Ccm93c2VyKCkubWF0Y2gpIHtcclxuICAgIGN1cnJlbnRNYXRjaCA9IHsgcGxhdGZvcm06ICdQaWNvJywgY29uZmlkZW5jZTogYXdhaXQgY2hlY2tQaWNvQnJvd3NlcigpLmNvbmZpZGVuY2UgfTtcclxuICB9IGVsc2UgaWYgKGNoZWNrRGVza3RvcEJyb3dzZXIoKS5tYXRjaCkge1xyXG4gICAgY3VycmVudE1hdGNoID0geyBwbGF0Zm9ybTogJ0Rlc2t0b3AnLCBjb25maWRlbmNlOiBjaGVja0Rlc2t0b3BCcm93c2VyKCkuY29uZmlkZW5jZSB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBDYW5ub3QgZGV0ZXJtaW5lIHBsYXRmb3JtLCByZXR1cm4gYSBkZWZhdWx0IG9iamVjdFxyXG4gICAgY3VycmVudE1hdGNoID0geyBwbGF0Zm9ybTogJ1Vua25vd24nLCBjb25maWRlbmNlOiAnTm9uZScgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjdXJyZW50TWF0Y2g7XHJcbn1cclxuXHJcbmNvbnN0IG9wZW5VUkwgPSB1cmwgPT4ge1xyXG4gIGlmICghdXJsKSByZXR1cm47XHJcblxyXG4gIC8vIEFyZSB3ZSBvbiBhIGRldmljZSB0aGF0IHdpbGwgZGVlcGxpbms/XHJcbiAgLy8gVGhpcyBtYXkgbmVlZCB0byBiZSBleHBhbmRlZCBpbiB0aGUgZnV0dXJlLlxyXG4gIGlmIChjaGVja09jdWx1c0Jyb3dzZXIoKS5tYXRjaCkge1xyXG4gICAgaWYgKHVybC5pbmNsdWRlcygnaHR0cHM6Ly93d3cub2N1bHVzLmNvbS9leHBlcmllbmNlcy9xdWVzdC8nKSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoY2hlY2tXb2x2aWNCcm93c2VyKCkubWF0Y2gpIHtcclxuICAgIC8vIFdvbHZpYydzIHBvcC11cCBibG9ja2luZyBpcyBtb3JlIGFnZ3Jlc3NpdmUgdGhhbiBvdGhlclxyXG4gICAgLy8gQ2hyb21pdW0tYmFzZWQgWFIgYnJvd3NlcnMsIHByb2JhYmx5IGR1ZSB0byBpdHMgRmlyZWZveFxyXG4gICAgLy8gbGluZWFnZS4gSW4gb3JkZXIgdG8gcHJldmVudCBjbGlja3MgYmVpbmcgY2F1Z2h0IGJ5IGl0LFxyXG4gICAgLy8gY29uc3RydWN0IG91ciBvd24gbW9kYWwgd2luZG93IGFuZCBkaXJlY3RseSBsaW5rIHRoZVxyXG4gICAgLy8geWVzIGJ1dHRvbiB0byB0aGUgd2luZG93Lm9wZW4gY2FsbC5cclxuICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4gICAgY29uc3QgeWVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICBjb25zdCBubyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG5cclxuICAgIG1vZGFsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdyZ2IoMCwgMCwgMCwgMC43NSknXHJcbiAgICBtb2RhbC5zdHlsZS5jb2xvciA9ICd3aGl0ZSc7XHJcbiAgICBtb2RhbC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIG1vZGFsLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcclxuICAgIG1vZGFsLnN0eWxlLnRvcCA9ICc1MCUnO1xyXG4gICAgbW9kYWwuc3R5bGUubGVmdCA9ICc1MCUnO1xyXG4gICAgbW9kYWwuc3R5bGUucGFkZGluZyA9ICc1JSc7XHJcbiAgICBtb2RhbC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnNSUnO1xyXG4gICAgbW9kYWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKSc7XHJcblxyXG4gICAgbWVzc2FnZS5pbm5lckhUTUwgPSBgPGI+VGhpcyBiaWxsYm9hcmQgbGVhZHMgdG8gJHt1cmx9LiBDb250aW51ZT88L2I+YDtcclxuXHJcbiAgICB5ZXMuaW5uZXJUZXh0ID0gJ01vdmUgY3Vyc29yIGJhY2sgaW50byB3aW5kb3cuJztcclxuICAgIHllcy5zdHlsZS53aWR0aCA9ICcxMDB2dyc7XHJcbiAgICB5ZXMuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcclxuICAgIHllcy5vbm1vdXNlZW50ZXIgPSAoKSA9PiB7XHJcbiAgICAgIHllcy5zdHlsZS53aWR0aCA9ICdhdXRvJztcclxuICAgICAgeWVzLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcclxuICAgICAgeWVzLmlubmVyVGV4dCA9ICdZZXMnO1xyXG4gICAgfVxyXG4gICAgeWVzLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xyXG4gICAgICBtb2RhbC5yZW1vdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuby5pbm5lclRleHQgPSAnTm8nO1xyXG4gICAgbm8ub25jbGljayA9ICgpID0+IHtcclxuICAgICAgbW9kYWwucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbW9kYWwuYXBwZW5kKGNvbnRlbnQpO1xyXG4gICAgY29udGVudC5hcHBlbmQobWVzc2FnZSk7XHJcbiAgICBjb250ZW50LmFwcGVuZCh5ZXMpO1xyXG4gICAgY29udGVudC5hcHBlbmQobm8pO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmQobW9kYWwpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcclxufVxyXG5cclxuY29uc3QgdXJsQ29udGFpbnNVVE1QYXJhbXMgPSAodXJsKSA9PiB7XHJcbiAgcmV0dXJuIHVybC5pbmRleE9mKCd1dG1fc291cmNlPScpICE9PSAtMSB8fCB1cmwuaW5kZXhPZigndXRtX2NhbXBhaWduPScpICE9PSAtMSB8fCB1cmwuaW5kZXhPZigndXRtX2NoYW5uZWw9JykgIT09IC0xO1xyXG59XHJcblxyXG5jb25zdCBhcHBlbmRVVE1QYXJhbXMgPSAodXJsLCBzcGFjZUlkKSA9PiB7XHJcbiAgbGV0IG5ld191cmwgPSBuZXcgVVJMKHVybClcclxuICBuZXdfdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3V0bV9zb3VyY2UnLCAnWmVzdHlNYXJrZXQnKTtcclxuICBuZXdfdXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3V0bV9jYW1wYWlnbicsICdaZXN0eUNhbXBhaWduJyk7XHJcbiAgbmV3X3VybC5zZWFyY2hQYXJhbXMuc2V0KCd1dG1fY2hhbm5lbCcsIGBTcGFjZUlkXyR7c3BhY2VJZH1gKTtcclxuICByZXR1cm4gbmV3X3VybC5ocmVmO1xyXG59XHJcblxyXG5leHBvcnQge1xyXG4gIHBhcnNlUHJvdG9jb2wsXHJcbiAgZ2V0SVBGU0dhdGV3YXksXHJcbiAgY2hlY2tPY3VsdXNCcm93c2VyLFxyXG4gIGNoZWNrV29sdmljQnJvd3NlcixcclxuICBjaGVja1BpY29Ccm93c2VyLFxyXG4gIGNoZWNrRGVza3RvcEJyb3dzZXIsXHJcbiAgY2hlY2tVc2VyUGxhdGZvcm0sXHJcbiAgb3BlblVSTCxcclxuICB1cmxDb250YWluc1VUTVBhcmFtcyxcclxuICBhcHBlbmRVVE1QYXJhbXNcclxufTsiLCAie1xyXG4gIFwibmFtZVwiOiBcIkB6ZXN0eW1hcmtldC93b25kZXJsYW5kLXNka1wiLFxyXG4gIFwidmVyc2lvblwiOiBcIjIuMC42XCIsXHJcbiAgXCJkZXNjcmlwdGlvblwiOiBcIldvbmRlcmxhbmQgRW5naW5lIFNESyBmb3IgWmVzdHkgQmFubmVyIGludGVncmF0aW9uLlwiLFxyXG4gIFwibWFpblwiOiBcImRpc3QvemVzdHktd29uZGVybGFuZC1zZGsuanNcIixcclxuICBcImV4cG9ydHNcIjoge1xyXG4gICAgXCIuXCI6IFwiLi9kaXN0L3plc3R5LXdvbmRlcmxhbmQtc2RrLmpzXCIsXHJcbiAgICBcIi4vY29tcGF0XCI6IFwiLi9kaXN0L3plc3R5LXdvbmRlcmxhbmQtc2RrLWNvbXBhdC5qc1wiXHJcbiAgfSxcclxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcclxuICBcInNjcmlwdHNcIjoge1xyXG4gICAgXCJidWlsZFwiOiBcImVzYnVpbGQgc3JjL2luZGV4LmpzIC0tbWluaWZ5IC0tc291cmNlbWFwIC0tZm9ybWF0PWVzbSAtLWJ1bmRsZSAtLW91dGZpbGU9ZGlzdC96ZXN0eS13b25kZXJsYW5kLXNkay5qcyAtLWV4dGVybmFsOkB3b25kZXJsYW5kZW5naW5lLypcIixcclxuICAgIFwiYnVpbGQtY29tcGF0XCI6IFwiZXNidWlsZCBzcmMvb2xkV0xFLmpzIC0tbWluaWZ5IC0tc291cmNlbWFwIC0tYnVuZGxlIC0tb3V0ZmlsZT1kaXN0L3plc3R5LXdvbmRlcmxhbmQtc2RrLWNvbXBhdC5qc1wiLFxyXG4gICAgXCJidWlsZC1kZXZcIjogXCJlc2J1aWxkIHNyYy9pbmRleC5qcyAtLXNvdXJjZW1hcCAtLWZvcm1hdD1lc20gLS1idW5kbGUgLS1vdXRmaWxlPWRpc3QvemVzdHktd29uZGVybGFuZC1zZGsuanMgLS1leHRlcm5hbDpAd29uZGVybGFuZGVuZ2luZS8qXCJcclxuICB9LFxyXG4gIFwid29uZGVybGFuZGVuZ2luZVwiOiB7fSxcclxuICBcImF1dGhvclwiOiBcIlwiLFxyXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiLFxyXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiOiBcIl4xLjAuMCB8fCBeMS4wLjAtcmMuNVwiLFxyXG4gICAgXCJAd29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzXCI6IFwiXjEuMC4wIHx8IF4xLjAuMC1yYy42XCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiZXNidWlsZFwiOiBcIl4wLjE3LjE4XCJcclxuICB9XHJcbn1cclxuIiwgIi8qIGdsb2JhbCBXTCAqL1xyXG5cclxuaW1wb3J0IHsgZmV0Y2hDYW1wYWlnbkFkLCBzZW5kT25Mb2FkTWV0cmljLCBzZW5kT25DbGlja01ldHJpYyB9IGZyb20gJy4uLy4uL3V0aWxzL25ldHdvcmtpbmcnO1xyXG5pbXBvcnQgeyBmb3JtYXRzLCBkZWZhdWx0Rm9ybWF0IH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9ybWF0cyc7XHJcbmltcG9ydCB7IG9wZW5VUkwgfSBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcclxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XHJcbmltcG9ydCB7XHJcbiAgQ29tcG9uZW50LFxyXG4gIENvbGxpZGVyLFxyXG4gIE1lc2hDb21wb25lbnQsXHJcbiAgQ29sbGlzaW9uQ29tcG9uZW50LFxyXG4gIFByb3BlcnR5XHJcbn0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcclxuaW1wb3J0IHsgQ3Vyc29yVGFyZ2V0IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cyc7XHJcblxyXG5jb25zb2xlLmxvZygnWmVzdHkgU0RLIFZlcnNpb246ICcsIHZlcnNpb24pO1xyXG5cclxuY29uc3QgZm9ybWF0c0xpbmsgPSAnaHR0cHM6Ly9jZG4uemVzdHkueHl6L3Nkay96ZXN0eS1mb3JtYXRzLmpzJztcclxuY29uc3QgbmV0d29ya2luZ0xpbmsgPSAnaHR0cHM6Ly9jZG4uemVzdHkueHl6L3Nkay96ZXN0eS1uZXR3b3JraW5nLmpzJztcclxuXHJcbi8qKlxyXG4gKiBbWmVzdHkgTWFya2V0XShodHRwczovL3plc3R5Lm1hcmtldCkgYmFubmVyIGFkIHVuaXRcclxuICpcclxuICogRmV0Y2hlcyBhIGJhbm5lciBhbmQgYXBwbGllcyBpdCB0byBhIHRleHR1cmUuIElmIG5vIGBjdXJzb3ItdGFyZ2V0YCBhbmQgYGNvbGxpc2lvbmBcclxuICogaXMgZm91bmQgb24gdGhlIG9iamVjdCwgdGhleSB3aWxsIGJlIGNyZWF0ZWQgYXV0b21hdGljYWxseSAod2l0aCBib3ggc2hhcGUgaW4gZ3JvdXAgMSkuXHJcbiAqXHJcbiAqIE1ha2Ugc3VyZSB0aGF0IHlvdSBzZXQgdXAgYSBjdXJzb3IgdG8gZW5hYmxlIGNsaWNraW5nLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFplc3R5QmFubmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBzdGF0aWMgVHlwZU5hbWUgPSAnemVzdHktYmFubmVyJztcclxuICBzdGF0aWMgUHJvcGVydGllcyA9IHtcclxuICAgIC8qIFlvdXIgYmFubmVyIGFkIHVuaXQgSUQgKi9cclxuICAgIGFkVW5pdDogUHJvcGVydHkuc3RyaW5nKCcnKSxcclxuICAgIC8qIFRoZSBkZWZhdWx0IGJhbm5lciBmb3JtYXQsIGRldGVybWluZXMgYXNwZWN0IHJhdGlvICovXHJcbiAgICBmb3JtYXQ6IFByb3BlcnR5LmVudW0oWyd0YWxsJywgJ3dpZGUnLCAnc3F1YXJlJ10sICdzcXVhcmUnKSxcclxuICAgIC8qIFRoZSBkZWZhdWx0IGJhbm5lciB2aXN1YWwgc3R5bGUgKi9cclxuICAgIHN0eWxlOiBQcm9wZXJ0eS5lbnVtKFsnc3RhbmRhcmQnLCAnbWluaW1hbCcsICd0cmFuc3BhcmVudCddLCAndHJhbnNwYXJlbnQnKSxcclxuICAgIC8qIFNjYWxlIHdpZHRoIG9mIHRoZSBvYmplY3QgdG8gYmFubmVyIHJhdGlvIChzZWUgZm9ybWF0KSBhbmQgc2V0IHRoZSBjb2xsaWRlciAqL1xyXG4gICAgc2NhbGVUb1JhdGlvOiBQcm9wZXJ0eS5ib29sKHRydWUpLFxyXG4gICAgLyogVGV4dHVyZSBwcm9wZXJ0eSB0byBzZXQgYWZ0ZXIgYmFubmVyIGlzIGxvYWRlZC4gTGVhdmUgXCJhdXRvXCIgdG8gZGV0ZWN0IGZyb21cclxuICAgICoga25vd24gcGlwZWxpbmVzIChQaG9uZyBPcGFxdWUgVGV4dHVyZWQsIEZsYXQgT3BhcXVlIFRleHR1cmVkKSAqL1xyXG4gICAgdGV4dHVyZVByb3BlcnR5OiBQcm9wZXJ0eS5zdHJpbmcoJ2F1dG8nKSxcclxuICAgIC8qIFdoZXRoZXIgdG8gYXNzaWduIHRoZSBiYW5uZXIgdG8gdGhlIGFscGhhTWFza1RleHR1cmUgcHJvcGVydHkgb2YgdGhlIG1hdGVyaWFsICovXHJcbiAgICBhc3NpZ25BbHBoYU1hc2tUZXh0dXJlOiBQcm9wZXJ0eS5ib29sKHRydWUpLFxyXG4gICAgYmVhY29uOiBQcm9wZXJ0eS5ib29sKHRydWUpLFxyXG4gICAgLyogTG9hZCBJUEZTIGdhdGV3YXlzIGFuZCBkZWZhdWx0IGltYWdlIHVyaXMgYXQgcnVudGltZSwgaWYgZmFsc2UgYXQgYnVpbGQgdGltZSAqL1xyXG4gICAgZHluYW1pY0Zvcm1hdHM6IFByb3BlcnR5LmJvb2wodHJ1ZSksXHJcbiAgICAvKiBBdXRvbWF0aWNhbGx5IGNyZWF0ZXMgYSBjb2xsaXNpb24gYW5kIGN1cnNvci10YXJnZXQgY29tcG9uZW50cywgaWYgdGhlcmUgaXNuJ3Qgb25lICovXHJcbiAgICBjcmVhdGVBdXRvbWF0aWNDb2xsaXNpb246IFByb3BlcnR5LmJvb2wodHJ1ZSksXHJcbiAgICAvKiBMb2FkIG5ldHdvcmtpbmcgbG9naWMgYXQgcnVudGltZSwgaWYgZmFsc2UgYXQgYnVpbGQgdGltZSAqL1xyXG4gICAgZHluYW1pY05ldHdvcmtpbmc6IFByb3BlcnR5LmJvb2woZmFsc2UpLFxyXG4gIH07XHJcbiAgc3RhdGljIG9uUmVnaXN0ZXIoZW5naW5lKSB7XHJcbiAgICBlbmdpbmUucmVnaXN0ZXJDb21wb25lbnQoQ3Vyc29yVGFyZ2V0KTtcclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLmZvcm1hdHMgPSBPYmplY3QudmFsdWVzKGZvcm1hdHMpO1xyXG4gICAgdGhpcy5mb3JtYXRLZXlzID0gT2JqZWN0LmtleXMoZm9ybWF0cyk7XHJcbiAgICB0aGlzLnN0eWxlS2V5cyA9IFsnc3RhbmRhcmQnLCAnbWluaW1hbCcsICd0cmFuc3BhcmVudCddO1xyXG4gIH1cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLm1lc2ggPSB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoTWVzaENvbXBvbmVudCk7XHJcbiAgICBpZiAoIXRoaXMubWVzaCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCInemVzdHktYmFubmVyICcgbWlzc2luZyBtZXNoIGNvbXBvbmVudFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jcmVhdGVBdXRvbWF0aWNDb2xsaXNpb24pIHtcclxuICAgICAgdGhpcy5jb2xsaXNpb24gPVxyXG4gICAgICAgIHRoaXMub2JqZWN0LmdldENvbXBvbmVudChDb2xsaXNpb25Db21wb25lbnQpIHx8XHJcbiAgICAgICAgdGhpcy5vYmplY3QuYWRkQ29tcG9uZW50KENvbGxpc2lvbkNvbXBvbmVudCwge1xyXG4gICAgICAgICAgY29sbGlkZXI6IENvbGxpZGVyLkJveCxcclxuICAgICAgICAgIGdyb3VwOiAweDJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuY3Vyc29yVGFyZ2V0ID1cclxuICAgICAgICB0aGlzLm9iamVjdC5nZXRDb21wb25lbnQoQ3Vyc29yVGFyZ2V0KSB8fCB0aGlzLm9iamVjdC5hZGRDb21wb25lbnQoQ3Vyc29yVGFyZ2V0KTtcclxuICAgICAgICB0aGlzLmN1cnNvclRhcmdldC5vbkNsaWNrLmFkZCh0aGlzLm9uQ2xpY2suYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuZHluYW1pY0Zvcm1hdHMpIHtcclxuICAgICAgbGV0IGZvcm1hdHNTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuXHJcbiAgICAgIGZvcm1hdHNTY3JpcHQub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZm9ybWF0c092ZXJyaWRlID0gemVzdHlGb3JtYXRzLmZvcm1hdHM7XHJcbiAgICAgIH07XHJcbiAgICAgIGZvcm1hdHNTY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCBmb3JtYXRzTGluayk7XHJcbiAgICAgIGZvcm1hdHNTY3JpcHQuc2V0QXR0cmlidXRlKCdjcm9zc29yaWdpbicsICdhbm9ueW1vdXMnKTtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtYXRzU2NyaXB0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5keW5hbWljTmV0d29ya2luZykge1xyXG4gICAgICBpbXBvcnQobmV0d29ya2luZ0xpbmspXHJcbiAgICAgICAgLnRoZW4odmFsdWUgPT4ge1xyXG4gICAgICAgICAgdGhpcy56ZXN0eU5ldHdvcmtpbmcgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSk7XHJcbiAgICAgICAgICB0aGlzLnN0YXJ0TG9hZGluZygpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBkeW5hbWljYWxseSByZXRyaWV2ZSBuZXR3b3JraW5nIGNvZGUsIGZhbGxpbmcgYmFjayB0byBidW5kbGVkIHZlcnNpb24uJyk7XHJcbiAgICAgICAgICB0aGlzLmR5bmFtaWNOZXR3b3JraW5nID0gZmFsc2U7XHJcbiAgICAgICAgICB0aGlzLnN0YXJ0TG9hZGluZygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdGFydExvYWRpbmcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXJ0TG9hZGluZygpIHtcclxuICAgIHRoaXMubG9hZEJhbm5lcihcclxuICAgICAgdGhpcy5hZFVuaXQsXHJcbiAgICAgIHRoaXMuZm9ybWF0S2V5c1t0aGlzLmZvcm1hdF0sXHJcbiAgICAgIHRoaXMuc3R5bGVLZXlzW3RoaXMuc3R5bGVdXHJcbiAgICApLnRoZW4oYmFubmVyID0+IHtcclxuICAgICAgdGhpcy5iYW5uZXIgPSBiYW5uZXI7XHJcbiAgICAgIGlmICh0aGlzLnNjYWxlVG9SYXRpbykge1xyXG4gICAgICAgIC8qIE1ha2UgYmFubmVyIGFsd2F5cyAxIG1ldGVyIGhlaWdodCwgYWRqdXN0IHdpZHRoIGFjY29yZGluZyB0byBiYW5uZXIgYXNwZWN0IHJhdGlvICovXHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm9iamVjdC5zY2FsaW5nTG9jYWxbMV07XHJcbiAgICAgICAgdGhpcy5vYmplY3QucmVzZXRTY2FsaW5nKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY3JlYXRlQXV0b21hdGljQ29sbGlzaW9uKSB7XHJcbiAgICAgICAgICB0aGlzLmNvbGxpc2lvbi5leHRlbnRzID0gW1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1hdHNbdGhpcy5mb3JtYXRdLndpZHRoICogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0LFxyXG4gICAgICAgICAgICAwLjFcclxuICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub2JqZWN0LnNjYWxlKFt0aGlzLmZvcm1hdHNbdGhpcy5mb3JtYXRdLndpZHRoICogdGhpcy5oZWlnaHQsIHRoaXMuaGVpZ2h0LCAxLjBdKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBtID0gdGhpcy5tZXNoLm1hdGVyaWFsLmNsb25lKCk7XHJcbiAgICAgIGlmICh0aGlzLnRleHR1cmVQcm9wZXJ0eSA9PT0gJ2F1dG8nKSB7XHJcbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBtLnNoYWRlcjtcclxuICAgICAgICBpZiAocGlwZWxpbmUgPT09ICdQaG9uZyBPcGFxdWUgVGV4dHVyZWQnKSB7XHJcbiAgICAgICAgICBtLmRpZmZ1c2VUZXh0dXJlID0gYmFubmVyLnRleHR1cmU7XHJcbiAgICAgICAgICBtLmFscGhhTWFza1RocmVzaG9sZCA9IDAuMztcclxuICAgICAgICB9IGVsc2UgaWYgKHBpcGVsaW5lID09PSAnRmxhdCBPcGFxdWUgVGV4dHVyZWQnKSB7XHJcbiAgICAgICAgICBtLmZsYXRUZXh0dXJlID0gYmFubmVyLnRleHR1cmU7XHJcbiAgICAgICAgICBtLmFscGhhTWFza1RocmVzaG9sZCA9IDAuODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3IoXHJcbiAgICAgICAgICAgIFwiJ3plc3R5LWJhbm5lcicgdW5hYmxlIHRvIGFwcGx5IGJhbm5lciB0ZXh0dXJlOiB1bnN1cHBvcnRlZCBwaXBlbGluZSBcIiArIHBpcGVsaW5lXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1lc2gubWF0ZXJpYWwgPSBtO1xyXG4gICAgICAgIHRoaXMubWVzaC5tYXRlcmlhbC5hbHBoYU1hc2tUZXh0dXJlID0gYmFubmVyLnRleHR1cmU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5tZXNoLm1hdGVyaWFsW3RoaXMudGV4dHVyZVByb3BlcnR5XSA9IGJhbm5lci50ZXh0dXJlO1xyXG4gICAgICAgIHRoaXMubWVzaC5tYXRlcmlhbC5hbHBoYU1hc2tUZXh0dXJlID0gYmFubmVyLnRleHR1cmU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuYmVhY29uKSB7XHJcbiAgICAgICAgdGhpcy5keW5hbWljTmV0d29ya2luZyA/XHJcbiAgICAgICAgICB0aGlzLnplc3R5TmV0d29ya2luZy5zZW5kT25Mb2FkTWV0cmljKHRoaXMuYWRVbml0LCB0aGlzLmJhbm5lci5jYW1wYWlnbklkKSA6XHJcbiAgICAgICAgICBzZW5kT25Mb2FkTWV0cmljKHRoaXMuYWRVbml0LCB0aGlzLmJhbm5lci5jYW1wYWlnbklkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbkNsaWNrKCkge1xyXG4gICAgaWYgKHRoaXMuYmFubmVyPy51cmwpIHtcclxuICAgICAgaWYgKHRoaXMuZW5naW5lLnhyKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUueHIuc2Vzc2lvbi5lbmQoKS50aGVuKHRoaXMuZXhlY3V0ZUNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZW5naW5lLnhyU2Vzc2lvbikge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLnhyU2Vzc2lvbi5lbmQoKS50aGVuKHRoaXMuZXhlY3V0ZUNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZUNsaWNrKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4ZWN1dGVDbGljaygpIHtcclxuICAgIG9wZW5VUkwodGhpcy5iYW5uZXIudXJsKTtcclxuICAgIGlmICh0aGlzLmJlYWNvbikge1xyXG4gICAgICB0aGlzLmR5bmFtaWNOZXR3b3JraW5nID9cclxuICAgICAgICB0aGlzLnplc3R5TmV0d29ya2luZy5zZW5kT25DbGlja01ldHJpYyh0aGlzLmFkVW5pdCwgdGhpcy5iYW5uZXIuY2FtcGFpZ25JZCkgOlxyXG4gICAgICAgIHNlbmRPbkNsaWNrTWV0cmljKHRoaXMuYWRVbml0LCB0aGlzLmJhbm5lci5jYW1wYWlnbklkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRCYW5uZXIoYWRVbml0LCBmb3JtYXQsIHN0eWxlKSB7XHJcbiAgICBjb25zdCBhY3RpdmVDYW1wYWlnbiA9IHRoaXMuZHluYW1pY05ldHdvcmtpbmcgP1xyXG4gICAgICBhd2FpdCB0aGlzLnplc3R5TmV0d29ya2luZy5mZXRjaENhbXBhaWduQWQoYWRVbml0LCBmb3JtYXQsIHN0eWxlKSA6XHJcbiAgICAgIGF3YWl0IGZldGNoQ2FtcGFpZ25BZChhZFVuaXQsIGZvcm1hdCwgc3R5bGUpO1xyXG5cclxuICAgIGNvbnN0IHsgYXNzZXRfdXJsOiBpbWFnZSwgY3RhX3VybDogdXJsIH0gPSBhY3RpdmVDYW1wYWlnbi5BZHNbMF07XHJcbiAgICB0aGlzLmNhbXBhaWduSWQgPSBhY3RpdmVDYW1wYWlnbi5DYW1wYWlnbklkO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmVuZ2luZS50ZXh0dXJlcy5sb2FkKGltYWdlLCAnJykudGhlbih0ZXh0dXJlID0+IHtcclxuICAgICAgcmV0dXJuIHsgdGV4dHVyZSwgaW1hZ2VTcmM6IGltYWdlLCB1cmwsIGNhbXBhaWduSWQ6IGFjdGl2ZUNhbXBhaWduLkNhbXBhaWduSWQgfTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG5pbXBvcnQgeyBDdXJzb3JUYXJnZXQgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50c1wiO1xyXG5pbXBvcnQge3Byb3BlcnR5fSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qcyc7XHJcbmltcG9ydCB7IERpcmVjdGlvblN5bWJvbCB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyB3bFV0aWxzIH0gZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGhhbmRsZXMgdGhlIGRvb3IgaW50ZXJhY3Rpb25zXHJcbiAqIEBjbGFzcyBEb29ySGFuZGxlclxyXG4gKiBAZXh0ZW5kcyB7Q29tcG9uZW50fVxyXG4gKiBAbWVtYmVyIHtzdHJpbmd9IGRpcmVjdGlvbiAtIFRoZSBkaXJlY3Rpb24gb2YgdGhlIGRvb3JcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEb29ySGFuZGxlciBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGljIFR5cGVOYW1lID0gXCJkb29yLWhhbmRsZXJcIjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHR5cGUge0RpcmVjdGlvblN5bWJvbH0gVGhlIGRpcmVjdGlvbiB0aGUgZG9vciBpcyBmYWNpbmdcclxuICAgKi8gIFxyXG4gIEBwcm9wZXJ0eS5zdHJpbmcoXCJOXCIpXHJcbiAgZGlyZWN0aW9uOkRpcmVjdGlvblN5bWJvbCA9IFwiTlwiO1xyXG5cclxuICAvKipcclxuICAgKiBAdHlwZSB7bnVtYmVyfSBYIHBvc2l0aW9uIG9mIHRoZSByb29tIGJlaGluZCB0aGUgZG9vci5cclxuICAgKi9cclxuICBAcHJvcGVydHkuaW50KDApXHJcbiAgdGFyZ2V0Um9vbVg6bnVtYmVyID0wIDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHR5cGUge251bWJlcn0gWSBwb3NpdGlvbiBvZiB0aGUgcm9vbSBiZWhpbmQgdGhlIGRvb3IuXHJcbiAgICovXHJcbiAgQHByb3BlcnR5LmludCgwKVxyXG4gIHRhcmdldFJvb21ZOm51bWJlciA9IDA7XHJcblxyXG4gIHN0YXJ0KCkge1xyXG4gICAgbGV0IGNoaWxkID0gd2xVdGlscy5maW5kQ2hpbGQodGhpcy5vYmplY3QsIFwiY29sbGlzaW9uT2JqZWN0XCIpO1xyXG4gICAgaWYgKCFjaGlsZCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXCJEb29ySGFuZGxlciBuZWVkcyBhIGNoaWxkIG9iamVjdCB3aXRoIHRoZSBuYW1lICdjb2xsaXNpb25PYmplY3QnXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB0YXJnZXQgPSBjaGlsZC5nZXRDb21wb25lbnQoQ3Vyc29yVGFyZ2V0KTtcclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihcIkRvb3JIYW5kbGVyIG5lZWRzIGEgQ3Vyc29yVGFyZ2V0IGNvbXBvbmVudCBvbiB0aGUgc2FtZSBvYmplY3RcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0YXJnZXQub25DbGljay5hZGQoKCkgPT4ge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7Q29tcG9uZW50LCBNZXNoQ29tcG9uZW50LCBFbWl0dGVyfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xyXG5pbXBvcnQgeyBFYXNpbmcsIGNsYW1wLCBsZXJwIH0gZnJvbSAnQHNvcnNrb290L3dvbmRlcmxhbmQtY29tcG9uZW50cyc7XHJcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xyXG5pbXBvcnQgeyBGbGF0TWF0ZXJpYWwgfSBmcm9tICcuLi90eXBlcy9pbmRleC5qcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRmFkZVNjcmVlbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAnZmFkZS1zY3JlZW4nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRpbWUgaXQgdGFrZXMgdG8gZmFkZSBpbiBvciBvdXQuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkuZmxvYXQoMSlcclxuICAgIGZhZGVJblRpbWU6bnVtYmVyID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIElmIHRydWUsIHRoZSBzY3JlZW4gd2lsbCBmYWRlIGluIGFnYWluIGFmdGVyIGZhZGluZyBvdXQuXHJcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5LmJvb2wodHJ1ZSlcclxuICAgIGNvbnRpbnVvdXM6Ym9vbGVhbiA9IHRydWVcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB3aGVuIHRoZSBmYWRlIGluIHByb2Nlc3MgaXMgY29tcGxldGVkLlxyXG4gICAgICogQHR5cGUge0VtaXR0ZXJ9XHJcbiAgICAgKi9cclxuICAgIEZhZGVJbkNvbXBsZXRlZCE6IEVtaXR0ZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgZmFkZSBvdXQgcHJvY2VzcyBpcyBjb21wbGV0ZWQuXHJcbiAgICAgKiBAdHlwZSB7RW1pdHRlcn1cclxuICAgICAqL1xyXG4gICAgRmFkZU91dENvbXBsZXRlZCE6IEVtaXR0ZXI7XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLkZhZGVJbkNvbXBsZXRlZCA9IG5ldyBFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5GYWRlT3V0Q29tcGxldGVkID0gbmV3IEVtaXR0ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNoIGNvbXBvbmVudCBvZiB0aGUgb2JqZWN0LiBUaGlzIHNob3VsZCBiZSBhIGJsYWNrIHNwaGVyZSBhcm91bmQgdGhlIGhlYWRcclxuICAgICAqIG9mIHRoZSBwbGF5ZXIgdGhhdCBmYWRlcyBpbiBhbmQgb3V0LlxyXG4gICAgICogQHR5cGUge01lc2hDb21wb25lbnR9XHJcbiAgICAgKi8gICAgXHJcbiAgICBtZXNoITpNZXNoQ29tcG9uZW50O1xyXG5cclxuICAgICNpc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgICNkZWx0YVRpbWUgPSAwO1xyXG4gICAgI2lzRmFkaW5nSW4gPSBmYWxzZTtcclxuICAgICNpc0ZhZGluZ091dCA9IGZhbHNlO1xyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGNvbnN0IG1jID0gdGhpcy5vYmplY3QuZ2V0Q29tcG9uZW50KE1lc2hDb21wb25lbnQpO1xyXG4gICAgICAgIGlmKCFtYykgdGhyb3cgbmV3IEVycm9yKCdObyBtZXNoIGNvbXBvbmVudCBmb3VuZCBvbiBvYmplY3QnKTtcclxuICAgICAgICB0aGlzLm1lc2ggPSBtYztcclxuICAgICAgICB0aGlzLm1lc2guYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZmFkZUluKCkge1xyXG4gICAgICAgIHRoaXMubWVzaC5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuI2lzRmFkaW5nSW49IHRydWU7XHJcbiAgICAgICAgdGhpcy4jaXNSdW5uaW5nID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZhZGVPdXQoKSB7XHJcbiAgICAgICAgdGhpcy5tZXNoLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy4jaXNGYWRpbmdPdXQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuI2lzUnVubmluZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGRlbHRhOm51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLiNpc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgbGV0IGFscGhhOm51bWJlcj0wO1xyXG4gICAgICAgICAgICBpZih0aGlzLiNpc0ZhZGluZ0luKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2RlbHRhVGltZSAtPSBkZWx0YSAvIHRoaXMuZmFkZUluVGltZTtcclxuICAgICAgICAgICAgICAgIGFscGhhID0gY2xhbXAobGVycCgwLCAxLCB0aGlzLiNkZWx0YVRpbWUsIEVhc2luZy5JblF1YWQpLCAwLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0aGlzLiNpc0ZhZGluZ091dCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNkZWx0YVRpbWUgKz0gZGVsdGEgLyB0aGlzLmZhZGVJblRpbWU7XHJcbiAgICAgICAgICAgICAgICBhbHBoYSA9IGNsYW1wKGxlcnAoMCwgMSwgdGhpcy4jZGVsdGFUaW1lLCBFYXNpbmcuT3V0UXVhZCksIDAsIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpbmNyZWFzZSBvciBkZWNyZWFzZSBhbHBoYVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYodGhpcy4jZGVsdGFUaW1lID49IDEgfHwgdGhpcy4jZGVsdGFUaW1lIDw9IDApe1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jaXNSdW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNpc0ZhZGluZ0luID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNpc0ZhZGluZ091dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy4jZGVsdGFUaW1lID49IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2RlbHRhVGltZSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5GYWRlT3V0Q29tcGxldGVkLm5vdGlmeSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMuY29udGludW91cyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmFkZUluKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfWVsc2V7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZsYXRNYXRlcmlhbCA9IHRoaXMubWVzaC5tYXRlcmlhbCBhcyBGbGF0TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYXRNYXRlcmlhbClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYXRNYXRlcmlhbC5jb2xvciA9IFswLDAsMCwwXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNkZWx0YVRpbWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRmFkZUluQ29tcGxldGVkLm5vdGlmeSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGZsYXRNYXRlcmlhbCA9IHRoaXMubWVzaC5tYXRlcmlhbCBhcyBGbGF0TWF0ZXJpYWw7XHJcbiAgICAgICAgICAgIGlmIChmbGF0TWF0ZXJpYWwpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGZsYXRNYXRlcmlhbC5jb2xvciA9IFswLDAsMCwgYWxwaGFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufTsiLCAiaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9iamVjdDNELCBQcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGlcIjtcclxuaW1wb3J0IHsgTGV2ZWxHZW5lcmF0b3IgfSBmcm9tIFwiLi9sZXZlbC1nZW5lcmF0b3IuanNcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlLCBTdGF0ZSB9IGZyb20gXCIuLi9jbGFzc2VzL2dhbWVTdGF0ZS5qc1wiO1xyXG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qc1wiO1xyXG5pbXBvcnQgeyBTd29yZCB9IGZyb20gXCIuLi9jbGFzc2VzL2l0ZW1zL3N3b3JkLmpzXCI7XHJcbmltcG9ydCBpcm9uIGZyb20gXCIuLi9jbGFzc2VzL2JlaGF2aW9ycy9pcm9uLmpzXCI7XHJcbmltcG9ydCB7IGNvbnRhaW5lciB9IGZyb20gXCJ0c3lyaW5nZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHN0YXRpYyBUeXBlTmFtZSA9IFwiZ2FtZVwiO1xyXG4gIHN0YXRpYyBQcm9wZXJ0aWVzID0ge1xyXG4gICAgbGV2ZWxHZW5PYmplY3Q6IFByb3BlcnR5Lm9iamVjdCgpLFxyXG4gICAgcGxheWVyT2JqZWN0OiBQcm9wZXJ0eS5vYmplY3QoKSxcclxuICB9O1xyXG5cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICBsZXZlbEdlbk9iamVjdCE6IE9iamVjdDNEO1xyXG5cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICBwbGF5ZXJPYmplY3QhOiBPYmplY3QzRDtcclxuXHJcbiAgI2xldmVsR2VuITogTGV2ZWxHZW5lcmF0b3I7XHJcbiAgZ2FtZVN0YXRlOiBHYW1lU3RhdGU7XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZSA9IGNvbnRhaW5lci5yZXNvbHZlKEdhbWVTdGF0ZSk7XHJcbiAgICBcclxuICAgIGNvbnN0IGxnID0gdGhpcy5sZXZlbEdlbk9iamVjdC5nZXRDb21wb25lbnQoTGV2ZWxHZW5lcmF0b3IpXHJcbiAgICBpZighbGcpe1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZXZlbEdlbmVyYXRvciBub3QgZm91bmQgb24gbGV2ZWxHZW5PYmplY3RcIilcclxuICAgIH1cclxuICAgIHRoaXMuI2xldmVsR2VuID0gbGc7XHJcblxyXG4gICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5hZGQoKCkgPT4gKHRoaXMuZ2FtZVN0YXRlLmlzSW5WUiA9IHRydWUpKTtcclxuICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uRW5kLmFkZCgoKSA9PiAodGhpcy5nYW1lU3RhdGUuaXNJblZSID0gZmFsc2UpKTtcclxuXHJcbiAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvblN0YXJ0LmFkZCgoKSA9PiB7fSk7XHJcblxyXG4gICAgdGhpcy5nYW1lU3RhdGUuc3RhdGUgPSBTdGF0ZS5QbGF5aW5nO1xyXG4gIH1cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLmdhbWVTdGF0ZS5sZXZlbFN1YmplY3Quc3Vic2NyaWJlKChsZXZlbCkgPT4ge1xyXG4gICAgICBsZXQgcmVzdWx0ID0gdGhpcy4jbGV2ZWxHZW4uZ2VuZXJhdGUobGV2ZWwpO1xyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5uYXZpZ2F0ZVRvUm9vbSgwLCAwKTtcclxuIFxyXG4gICAgfVxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRlc3RTd29yZCA9IG5ldyBTd29yZCgpO1xyXG4gICAgdGVzdFN3b3JkLmFkZEJlaGF2aW9yKGlyb24pO1xyXG4gICAgY29uc29sZS5sb2coYCR7dGVzdFN3b3JkLm5hbWV9OiR7dGVzdFN3b3JkLmF0dGFjaygpfWApO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB0aGlzLmdhbWVTdGF0ZS5sZXZlbCA9IDA7XHJcbiAgICB9LCAxMDAwKTsgLy8ganVzdCBkZWxheSB0aGUgc3RhcnQuIFRoaXMgd2lsbCBjaGFuZ2Ugb25jZSB3ZSBoYXZlIGEgbWVudS5cclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIChlKSA9PiB7XHJcbiAgICAgIGxldCBwID0gdGhpcy5nYW1lU3RhdGUuY3VycmVudFJvb207XHJcbiAgICAgIGlmIChlLmNvZGUgPT0gXCJEaWdpdDFcIikgeyAvLyBTT1VUSFxyXG4gICAgICAgIHBbMF0gKz0gMTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yb29tUHJldmlvdXNFeGl0RGlyZWN0aW9uID0gXCJTXCI7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3VycmVudFJvb20gPSBwO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChlLmNvZGUgPT0gXCJEaWdpdDJcIikgeyAvLyBOT1JUSFxyXG4gICAgICAgIHBbMF0gLT0gMTtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yb29tUHJldmlvdXNFeGl0RGlyZWN0aW9uID0gXCJOXCI7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUuY3VycmVudFJvb20gPSBwO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChlLmNvZGUgPT0gXCJEaWdpdDNcIikgeyAvLyBFQVNUXHJcbiAgICAgICAgcFsxXSArPSAxO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLnJvb21QcmV2aW91c0V4aXREaXJlY3Rpb24gPSBcIkVcIjtcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5jdXJyZW50Um9vbSA9IHA7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGUuY29kZSA9PSBcIkRpZ2l0NFwiKSB7IC8vIFdFU1RcclxuICAgICAgICBwWzFdIC09IDE7XHJcbiAgICAgICAgdGhpcy5nYW1lU3RhdGUucm9vbVByZXZpb3VzRXhpdERpcmVjdGlvbiA9IFwiV1wiO1xyXG4gICAgICAgIHRoaXMuZ2FtZVN0YXRlLmN1cnJlbnRSb29tID0gcDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGUuY29kZSA9PSBcIkRpZ2l0NVwiKSB7IC8vIG9wZW4gZmlyc3QgY2hlc3RcclxuICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yb29tPy5pdGVtcz8uZmluZCgoaSkgPT4gaS5uYW1lID09IFwiQ2hlc3RcIik/LmludGVyYWN0KHRoaXMucGxheWVyT2JqZWN0LDAsMCwwKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb3ZlcnJpZGUgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIFxyXG4gIH1cclxufVxyXG4iLCAiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKEMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbkxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZVxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcbldBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBUSVRMRSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UsXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxuXG5TZWUgdGhlIEFwYWNoZSBWZXJzaW9uIDIuMCBMaWNlbnNlIGZvciBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG52YXIgUmVmbGVjdDtcbihmdW5jdGlvbiAoUmVmbGVjdCkge1xuICAgIC8vIE1ldGFkYXRhIFByb3Bvc2FsXG4gICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS9cbiAgICAoZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6XG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMgPT09IFwib2JqZWN0XCIgPyB0aGlzIDpcbiAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKTtcbiAgICAgICAgdmFyIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKFJlZmxlY3QpO1xuICAgICAgICBpZiAodHlwZW9mIHJvb3QuUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcm9vdC5SZWZsZWN0ID0gUmVmbGVjdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKHJvb3QuUmVmbGVjdCwgZXhwb3J0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZhY3RvcnkoZXhwb3J0ZXIpO1xuICAgICAgICBmdW5jdGlvbiBtYWtlRXhwb3J0ZXIodGFyZ2V0LCBwcmV2aW91cykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgeyBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cylcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSkoZnVuY3Rpb24gKGV4cG9ydGVyKSB7XG4gICAgICAgIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgICAgICAvLyBmZWF0dXJlIHRlc3QgZm9yIFN5bWJvbCBzdXBwb3J0XG4gICAgICAgIHZhciBzdXBwb3J0c1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgdmFyIHRvUHJpbWl0aXZlU3ltYm9sID0gc3VwcG9ydHNTeW1ib2wgJiYgdHlwZW9mIFN5bWJvbC50b1ByaW1pdGl2ZSAhPT0gXCJ1bmRlZmluZWRcIiA/IFN5bWJvbC50b1ByaW1pdGl2ZSA6IFwiQEB0b1ByaW1pdGl2ZVwiO1xuICAgICAgICB2YXIgaXRlcmF0b3JTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLml0ZXJhdG9yIDogXCJAQGl0ZXJhdG9yXCI7XG4gICAgICAgIHZhciBzdXBwb3J0c0NyZWF0ZSA9IHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSBcImZ1bmN0aW9uXCI7IC8vIGZlYXR1cmUgdGVzdCBmb3IgT2JqZWN0LmNyZWF0ZSBzdXBwb3J0XG4gICAgICAgIHZhciBzdXBwb3J0c1Byb3RvID0geyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheTsgLy8gZmVhdHVyZSB0ZXN0IGZvciBfX3Byb3RvX18gc3VwcG9ydFxuICAgICAgICB2YXIgZG93bkxldmVsID0gIXN1cHBvcnRzQ3JlYXRlICYmICFzdXBwb3J0c1Byb3RvO1xuICAgICAgICB2YXIgSGFzaE1hcCA9IHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBvYmplY3QgaW4gZGljdGlvbmFyeSBtb2RlIChhLmsuYS4gXCJzbG93XCIgbW9kZSBpbiB2OClcbiAgICAgICAgICAgIGNyZWF0ZTogc3VwcG9ydHNDcmVhdGVcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KE9iamVjdC5jcmVhdGUobnVsbCkpOyB9XG4gICAgICAgICAgICAgICAgOiBzdXBwb3J0c1Byb3RvXG4gICAgICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoeyBfX3Byb3RvX186IG51bGwgfSk7IH1cbiAgICAgICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7fSk7IH0sXG4gICAgICAgICAgICBoYXM6IGRvd25MZXZlbFxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBoYXNPd24uY2FsbChtYXAsIGtleSk7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4ga2V5IGluIG1hcDsgfSxcbiAgICAgICAgICAgIGdldDogZG93bkxldmVsXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KSA/IG1hcFtrZXldIDogdW5kZWZpbmVkOyB9XG4gICAgICAgICAgICAgICAgOiBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIG1hcFtrZXldOyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyBMb2FkIGdsb2JhbCBvciBzaGltIHZlcnNpb25zIG9mIE1hcCwgU2V0LCBhbmQgV2Vha01hcFxuICAgICAgICB2YXIgZnVuY3Rpb25Qcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRnVuY3Rpb24pO1xuICAgICAgICB2YXIgdXNlUG9seWZpbGwgPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudltcIlJFRkxFQ1RfTUVUQURBVEFfVVNFX01BUF9QT0xZRklMTFwiXSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgIHZhciBfTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgTWFwLnByb3RvdHlwZS5lbnRyaWVzID09PSBcImZ1bmN0aW9uXCIgPyBNYXAgOiBDcmVhdGVNYXBQb2x5ZmlsbCgpO1xuICAgICAgICB2YXIgX1NldCA9ICF1c2VQb2x5ZmlsbCAmJiB0eXBlb2YgU2V0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gXCJmdW5jdGlvblwiID8gU2V0IDogQ3JlYXRlU2V0UG9seWZpbGwoKTtcbiAgICAgICAgdmFyIF9XZWFrTWFwID0gIXVzZVBvbHlmaWxsICYmIHR5cGVvZiBXZWFrTWFwID09PSBcImZ1bmN0aW9uXCIgPyBXZWFrTWFwIDogQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCk7XG4gICAgICAgIC8vIFtbTWV0YWRhdGFdXSBpbnRlcm5hbCBzbG90XG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5LW9iamVjdC1pbnRlcm5hbC1tZXRob2RzLWFuZC1pbnRlcm5hbC1zbG90c1xuICAgICAgICB2YXIgTWV0YWRhdGEgPSBuZXcgX1dlYWtNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcGxpZXMgYSBzZXQgb2YgZGVjb3JhdG9ycyB0byBhIHByb3BlcnR5IG9mIGEgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIGRlY29yYXRvcnMgQW4gYXJyYXkgb2YgZGVjb3JhdG9ycy5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSB0byBkZWNvcmF0ZS5cbiAgICAgICAgICogQHBhcmFtIGF0dHJpYnV0ZXMgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgdGhlIHRhcmdldCBrZXkuXG4gICAgICAgICAqIEByZW1hcmtzIERlY29yYXRvcnMgYXJlIGFwcGxpZWQgaW4gcmV2ZXJzZSBvcmRlci5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgRXhhbXBsZSA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcbiAgICAgICAgICogICAgICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIixcbiAgICAgICAgICogICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzQXJyYXkoZGVjb3JhdG9ycykpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGF0dHJpYnV0ZXMpICYmICFJc1VuZGVmaW5lZChhdHRyaWJ1dGVzKSAmJiAhSXNOdWxsKGF0dHJpYnV0ZXMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKElzTnVsbChhdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvcmF0ZVByb3BlcnR5KGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb3JhdGVDb25zdHJ1Y3RvcihkZWNvcmF0b3JzLCB0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVjb3JhdGVcIiwgZGVjb3JhdGUpO1xuICAgICAgICAvLyA0LjEuMiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNyZWZsZWN0Lm1ldGFkYXRhXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGRlZmF1bHQgbWV0YWRhdGEgZGVjb3JhdG9yIGZhY3RvcnkgdGhhdCBjYW4gYmUgdXNlZCBvbiBhIGNsYXNzLCBjbGFzcyBtZW1iZXIsIG9yIHBhcmFtZXRlci5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IFRoZSBrZXkgZm9yIHRoZSBtZXRhZGF0YSBlbnRyeS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgVGhlIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXG4gICAgICAgICAqIEByZXR1cm5zIEEgZGVjb3JhdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgKiBAcmVtYXJrc1xuICAgICAgICAgKiBJZiBgbWV0YWRhdGFLZXlgIGlzIGFscmVhZHkgZGVmaW5lZCBmb3IgdGhlIHRhcmdldCBhbmQgdGFyZ2V0IGtleSwgdGhlXG4gICAgICAgICAqIG1ldGFkYXRhVmFsdWUgZm9yIHRoYXQga2V5IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yLCBUeXBlU2NyaXB0IG9ubHkpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUsIFR5cGVTY3JpcHQgb25seSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgcHJvcGVydHk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSAmJiAhSXNQcm9wZXJ0eUtleShwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJtZXRhZGF0YVwiLCBtZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmUgYSB1bmlxdWUgbWV0YWRhdGEgZW50cnkgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFWYWx1ZSBBIHZhbHVlIHRoYXQgY29udGFpbnMgYXR0YWNoZWQgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdG8gZGVmaW5lIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gZGVjb3JhdG9yIGZhY3RvcnkgYXMgbWV0YWRhdGEtcHJvZHVjaW5nIGFubm90YXRpb24uXG4gICAgICAgICAqICAgICBmdW5jdGlvbiBNeUFubm90YXRpb24ob3B0aW9ucyk6IERlY29yYXRvciB7XG4gICAgICAgICAqICAgICAgICAgcmV0dXJuICh0YXJnZXQsIGtleT8pID0+IFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCB0YXJnZXQsIGtleSk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJkZWZpbmVNZXRhZGF0YVwiLCBkZWZpbmVNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4gaGFzIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGtleSB3YXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluOyBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJoYXNNZXRhZGF0YVwiLCBoYXNNZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIGEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSB0YXJnZXQgb2JqZWN0IGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBrZXkgd2FzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Q7IG90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImhhc093bk1ldGFkYXRhXCIsIGhhc093bk1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0TWV0YWRhdGFcIiwgZ2V0TWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEgdmFsdWUgZm9yIHRoZSBwcm92aWRlZCBtZXRhZGF0YSBrZXkgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgVGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgbWV0YWRhdGEga2V5IGlmIGZvdW5kOyBvdGhlcndpc2UsIGB1bmRlZmluZWRgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0T3duTWV0YWRhdGFcIiwgZ2V0T3duTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgbWV0YWRhdGEga2V5cyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0IG9yIGl0cyBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeU1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE1ldGFkYXRhS2V5c1wiLCBnZXRNZXRhZGF0YUtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdW5pcXVlIG1ldGFkYXRhIGtleXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgQW4gYXJyYXkgb2YgdW5pcXVlIG1ldGFkYXRhIGtleXMuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZ2V0T3duTWV0YWRhdGFLZXlzXCIsIGdldE93bk1ldGFkYXRhS2V5cyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWxldGVzIHRoZSBtZXRhZGF0YSBlbnRyeSBmcm9tIHRoZSB0YXJnZXQgb2JqZWN0IHdpdGggdGhlIHByb3ZpZGVkIGtleS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhS2V5IEEga2V5IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG1ldGFkYXRhIGVudHJ5IHdhcyBmb3VuZCBhbmQgZGVsZXRlZDsgb3RoZXJ3aXNlLCBmYWxzZS5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCBwcm9wZXJ0eUtleSwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICghbWV0YWRhdGFNYXAuZGVsZXRlKG1ldGFkYXRhS2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAobWV0YWRhdGFNYXAuc2l6ZSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBNZXRhZGF0YS5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhLmRlbGV0ZShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0TWV0YWRhdGEuc2l6ZSA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBNZXRhZGF0YS5kZWxldGUodGFyZ2V0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVsZXRlTWV0YWRhdGFcIiwgZGVsZXRlTWV0YWRhdGEpO1xuICAgICAgICBmdW5jdGlvbiBEZWNvcmF0ZUNvbnN0cnVjdG9yKGRlY29yYXRvcnMsIHRhcmdldCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9yc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdGVkID0gZGVjb3JhdG9yKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzQ29uc3RydWN0b3IoZGVjb3JhdGVkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZGVjb3JhdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0b3IgPSBkZWNvcmF0b3JzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChkZWNvcmF0ZWQpICYmICFJc051bGwoZGVjb3JhdGVkKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGRlY29yYXRlZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBkZWNvcmF0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBDcmVhdGUpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IE1ldGFkYXRhLmdldChPKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZCh0YXJnZXRNZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YSA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgTWV0YWRhdGEuc2V0KE8sIHRhcmdldE1ldGFkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IHRhcmdldE1ldGFkYXRhLmdldChQKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUNyZWF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YU1hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuc2V0KFAsIG1ldGFkYXRhTWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YU1hcDtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMS4xIE9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzbWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKCFJc051bGwocGFyZW50KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMi4xIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzb3dubWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhTWFwID0gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCAvKkNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIFRvQm9vbGVhbihtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMy4xIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5Z2V0bWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICghSXNOdWxsKHBhcmVudCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS40LjEgT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjUuMSBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWRlZmluZW93bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyB0cnVlKTtcbiAgICAgICAgICAgIG1ldGFkYXRhTWFwLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjYuMSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeW1ldGFkYXRha2V5c1xuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeU1ldGFkYXRhS2V5cyhPLCBQKSB7XG4gICAgICAgICAgICB2YXIgb3duS2V5cyA9IE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xuICAgICAgICAgICAgdmFyIHBhcmVudEtleXMgPSBPcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICAgICAgICAgICAgaWYgKHBhcmVudEtleXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG93bktleXM7XG4gICAgICAgICAgICBpZiAob3duS2V5cy5sZW5ndGggPD0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50S2V5cztcbiAgICAgICAgICAgIHZhciBzZXQgPSBuZXcgX1NldCgpO1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgb3duS2V5c18xID0gb3duS2V5czsgX2kgPCBvd25LZXlzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IG93bktleXNfMVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcGFyZW50S2V5c18xID0gcGFyZW50S2V5czsgX2EgPCBwYXJlbnRLZXlzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhcmVudEtleXNfMVtfYV07XG4gICAgICAgICAgICAgICAgdmFyIGhhc0tleSA9IHNldC5oYXMoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS43LjEgT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlvd25tZXRhZGF0YWtleXNcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKVxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgdmFyIGtleXNPYmogPSBtZXRhZGF0YU1hcC5rZXlzKCk7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBHZXRJdGVyYXRvcihrZXlzT2JqKTtcbiAgICAgICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHQgPSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLmxlbmd0aCA9IGs7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbmV4dFZhbHVlID0gSXRlcmF0b3JWYWx1ZShuZXh0KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzW2tdID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgSXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA2IEVDTUFTY3JpcHQgRGF0YSBUeXAwZXMgYW5kIFZhbHVlc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWRhdGEtdHlwZXMtYW5kLXZhbHVlc1xuICAgICAgICBmdW5jdGlvbiBUeXBlKHgpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIE51bGwgKi87XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOiByZXR1cm4gMCAvKiBVbmRlZmluZWQgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcImJvb2xlYW5cIjogcmV0dXJuIDIgLyogQm9vbGVhbiAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6IHJldHVybiAzIC8qIFN0cmluZyAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwic3ltYm9sXCI6IHJldHVybiA0IC8qIFN5bWJvbCAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6IHJldHVybiA1IC8qIE51bWJlciAqLztcbiAgICAgICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6IHJldHVybiB4ID09PSBudWxsID8gMSAvKiBOdWxsICovIDogNiAvKiBPYmplY3QgKi87XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIDYgLyogT2JqZWN0ICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS4xIFRoZSBVbmRlZmluZWQgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLXVuZGVmaW5lZC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzVW5kZWZpbmVkKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjIgVGhlIE51bGwgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLW51bGwtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc051bGwoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHggPT09IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNi4xLjUgVGhlIFN5bWJvbCBUeXBlXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMtc3ltYm9sLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNTeW1ib2woeCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS43IFRoZSBPYmplY3QgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc09iamVjdCh4KSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCIgPyB4ICE9PSBudWxsIDogdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEgVHlwZSBDb252ZXJzaW9uXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGUtY29udmVyc2lvblxuICAgICAgICAvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbiAgICAgICAgZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQsIFByZWZlcnJlZFR5cGUpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoVHlwZShpbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDAgLyogVW5kZWZpbmVkICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIE51bGwgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDIgLyogQm9vbGVhbiAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDQgLyogU3ltYm9sICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSA1IC8qIE51bWJlciAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhpbnQgPSBQcmVmZXJyZWRUeXBlID09PSAzIC8qIFN0cmluZyAqLyA/IFwic3RyaW5nXCIgOiBQcmVmZXJyZWRUeXBlID09PSA1IC8qIE51bWJlciAqLyA/IFwibnVtYmVyXCIgOiBcImRlZmF1bHRcIjtcbiAgICAgICAgICAgIHZhciBleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIHRvUHJpbWl0aXZlU3ltYm9sKTtcbiAgICAgICAgICAgIGlmIChleG90aWNUb1ByaW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG4gICAgICAgICAgICAgICAgaWYgKElzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09IFwiZGVmYXVsdFwiID8gXCJudW1iZXJcIiA6IGhpbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xLjEgT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeXRvcHJpbWl0aXZlXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludCkge1xuICAgICAgICAgICAgaWYgKGhpbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmdfMSA9IE8udG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzEuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlT2YuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZiA9IE8udmFsdWVPZjtcbiAgICAgICAgICAgICAgICBpZiAoSXNDYWxsYWJsZSh2YWx1ZU9mKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsdWVPZi5jYWxsKE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHJlc3VsdCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdG9TdHJpbmdfMiA9IE8udG9TdHJpbmc7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodG9TdHJpbmdfMikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvU3RyaW5nXzIuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjIgVG9Cb29sZWFuKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLXRvYm9vbGVhblxuICAgICAgICBmdW5jdGlvbiBUb0Jvb2xlYW4oYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xMiBUb1N0cmluZyhhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9zdHJpbmdcbiAgICAgICAgZnVuY3Rpb24gVG9TdHJpbmcoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgYXJndW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xLjE0IFRvUHJvcGVydHlLZXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbiAgICAgICAgZnVuY3Rpb24gVG9Qcm9wZXJ0eUtleShhcmd1bWVudCkge1xuICAgICAgICAgICAgdmFyIGtleSA9IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAzIC8qIFN0cmluZyAqLyk7XG4gICAgICAgICAgICBpZiAoSXNTeW1ib2woa2V5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgcmV0dXJuIFRvU3RyaW5nKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yIFRlc3RpbmcgYW5kIENvbXBhcmlzb24gT3BlcmF0aW9uc1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10ZXN0aW5nLWFuZC1jb21wYXJpc29uLW9wZXJhdGlvbnNcbiAgICAgICAgLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNhcnJheVxuICAgICAgICBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheVxuICAgICAgICAgICAgICAgID8gQXJyYXkuaXNBcnJheShhcmd1bWVudClcbiAgICAgICAgICAgICAgICA6IGFyZ3VtZW50IGluc3RhbmNlb2YgT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgID8gYXJndW1lbnQgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgICAgICAgICA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuMyBJc0NhbGxhYmxlKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG4gICAgICAgIGZ1bmN0aW9uIElzQ2FsbGFibGUoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ2FsbF1dIGludGVybmFsIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuNCBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG4gICAgICAgIGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgYW4gYXBwcm94aW1hdGlvbiBhcyB3ZSBjYW5ub3QgY2hlY2sgZm9yIFtbQ29uc3RydWN0XV0gaW50ZXJuYWwgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMi43IElzUHJvcGVydHlLZXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzcHJvcGVydHlrZXlcbiAgICAgICAgZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuICAgICAgICAgICAgc3dpdGNoIChUeXBlKGFyZ3VtZW50KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTdHJpbmcgKi86IHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBTeW1ib2wgKi86IHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA3LjMgT3BlcmF0aW9ucyBvbiBPYmplY3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9wZXJhdGlvbnMtb24tb2JqZWN0c1xuICAgICAgICAvLyA3LjMuOSBHZXRNZXRob2QoViwgUClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kXG4gICAgICAgIGZ1bmN0aW9uIEdldE1ldGhvZChWLCBQKSB7XG4gICAgICAgICAgICB2YXIgZnVuYyA9IFZbUF07XG4gICAgICAgICAgICBpZiAoZnVuYyA9PT0gdW5kZWZpbmVkIHx8IGZ1bmMgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICghSXNDYWxsYWJsZShmdW5jKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQgT3BlcmF0aW9ucyBvbiBJdGVyYXRvciBPYmplY3RzXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9wZXJhdGlvbnMtb24taXRlcmF0b3Itb2JqZWN0c1xuICAgICAgICBmdW5jdGlvbiBHZXRJdGVyYXRvcihvYmopIHtcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBHZXRNZXRob2Qob2JqLCBpdGVyYXRvclN5bWJvbCk7XG4gICAgICAgICAgICBpZiAoIUlzQ2FsbGFibGUobWV0aG9kKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IC8vIGZyb20gQ2FsbFxuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbWV0aG9kLmNhbGwob2JqKTtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QoaXRlcmF0b3IpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNCBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8yMDE2LyNzZWMtaXRlcmF0b3J2YWx1ZVxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvclZhbHVlKGl0ZXJSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyUmVzdWx0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC41IEl0ZXJhdG9yU3RlcChpdGVyYXRvcilcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXRlcmF0b3JzdGVwXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yU3RlcChpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IGZhbHNlIDogcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yY2xvc2VcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JDbG9zZShpdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIGYgPSBpdGVyYXRvcltcInJldHVyblwiXTtcbiAgICAgICAgICAgIGlmIChmKVxuICAgICAgICAgICAgICAgIGYuY2FsbChpdGVyYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gOS4xIE9yZGluYXJ5IE9iamVjdCBJbnRlcm5hbCBNZXRob2RzIGFuZCBJbnRlcm5hbCBTbG90c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeS1vYmplY3QtaW50ZXJuYWwtbWV0aG9kcy1hbmQtaW50ZXJuYWwtc2xvdHNcbiAgICAgICAgLy8gOS4xLjEuMSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9yZGluYXJ5Z2V0cHJvdG90eXBlb2ZcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKSB7XG4gICAgICAgICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIE8gIT09IFwiZnVuY3Rpb25cIiB8fCBPID09PSBmdW5jdGlvblByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBUeXBlU2NyaXB0IGRvZXNuJ3Qgc2V0IF9fcHJvdG9fXyBpbiBFUzUsIGFzIGl0J3Mgbm9uLXN0YW5kYXJkLlxuICAgICAgICAgICAgLy8gVHJ5IHRvIGRldGVybWluZSB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3Rvci4gQ29tcGF0aWJsZSBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgICAgIC8vIG11c3QgZWl0aGVyIHNldCBfX3Byb3RvX18gb24gYSBzdWJjbGFzcyBjb25zdHJ1Y3RvciB0byB0aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIC8vIG9yIGVuc3VyZSBlYWNoIGNsYXNzIGhhcyBhIHZhbGlkIGBjb25zdHJ1Y3RvcmAgcHJvcGVydHkgb24gaXRzIHByb3RvdHlwZSB0aGF0XG4gICAgICAgICAgICAvLyBwb2ludHMgYmFjayB0byB0aGUgY29uc3RydWN0b3IuXG4gICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB0aGUgc2FtZSBhcyBGdW5jdGlvbi5bW1Byb3RvdHlwZV1dLCB0aGVuIHRoaXMgaXMgZGVmaW5hdGVseSBpbmhlcml0ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjYXNlIHdoZW4gaW4gRVM2IG9yIHdoZW4gdXNpbmcgX19wcm90b19fIGluIGEgY29tcGF0aWJsZSBicm93c2VyLlxuICAgICAgICAgICAgaWYgKHByb3RvICE9PSBmdW5jdGlvblByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB0aGUgc3VwZXIgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGUsIG51bGwsIG9yIHVuZGVmaW5lZCwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHZhciBwcm90b3R5cGUgPSBPLnByb3RvdHlwZTtcbiAgICAgICAgICAgIHZhciBwcm90b3R5cGVQcm90byA9IHByb3RvdHlwZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKTtcbiAgICAgICAgICAgIGlmIChwcm90b3R5cGVQcm90byA9PSBudWxsIHx8IHByb3RvdHlwZVByb3RvID09PSBPYmplY3QucHJvdG90eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb25zdHJ1Y3RvciB3YXMgbm90IGEgZnVuY3Rpb24sIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICB2YXIgY29uc3RydWN0b3IgPSBwcm90b3R5cGVQcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RydWN0b3IgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHNvbWUga2luZCBvZiBzZWxmLXJlZmVyZW5jZSwgdGhlbiB3ZSBjYW5ub3QgZGV0ZXJtaW5lIHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIGlmIChjb25zdHJ1Y3RvciA9PT0gTylcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGEgcHJldHR5IGdvb2QgZ3Vlc3MgYXQgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIE1hcCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZU1hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIGNhY2hlU2VudGluZWwgPSB7fTtcbiAgICAgICAgICAgIHZhciBhcnJheVNlbnRpbmVsID0gW107XG4gICAgICAgICAgICB2YXIgTWFwSXRlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFwSXRlcmF0b3Ioa2V5cywgdmFsdWVzLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBrZXlzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuICAgICAgICAgICAgICAgIE1hcEl0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9rZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3NlbGVjdG9yKHRoaXMuX2tleXNbaW5kZXhdLCB0aGlzLl92YWx1ZXNbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCArIDEgPj0gdGhpcy5fa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdCwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUudGhyb3cgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUucmV0dXJuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hcEl0ZXJhdG9yO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gTWFwKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hcC5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fa2V5cy5sZW5ndGg7IH0sXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpID49IDA7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgPyB0aGlzLl92YWx1ZXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMuX2tleXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGluZGV4ICsgMTsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXNbaSAtIDFdID0gdGhpcy5fa2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaSAtIDFdID0gdGhpcy5fdmFsdWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cy5sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMuX2NhY2hlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0yO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0S2V5KTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldFZhbHVlKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRFbnRyeSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuX2ZpbmQgPSBmdW5jdGlvbiAoa2V5LCBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlS2V5ICE9PSBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2YodGhpcy5fY2FjaGVLZXkgPSBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUluZGV4IDwgMCAmJiBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXA7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0S2V5KGtleSwgXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWYWx1ZShfLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVudHJ5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgdmFsdWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG5haXZlIFNldCBzaGltXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZVNldFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBTZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZXQucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5zaXplOyB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmhhcyh2YWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5zZXQodmFsdWUsIHZhbHVlKSwgdGhpczsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGhpcy5fbWFwLmRlbGV0ZSh2YWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fbWFwLmNsZWFyKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5rZXlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbWFwLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC52YWx1ZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAuZW50cmllcygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5rZXlzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gU2V0O1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBXZWFrTWFwIHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIFVVSURfU0laRSA9IDE2O1xuICAgICAgICAgICAgdmFyIGtleXMgPSBIYXNoTWFwLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdmFyIHJvb3RLZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlICE9PSB1bmRlZmluZWQgPyBIYXNoTWFwLmhhcyh0YWJsZSwgdGhpcy5fa2V5KSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuZ2V0KHRhYmxlLCB0aGlzLl9rZXkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0aGlzLl9rZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IGRlbGV0ZSB0YWJsZVt0aGlzLl9rZXldIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogbm90IGEgcmVhbCBjbGVhciwganVzdCBtYWtlcyB0aGUgcHJldmlvdXMgZGF0YSB1bnJlYWNoYWJsZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBXZWFrTWFwO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZVVuaXF1ZUtleSgpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IFwiQEBXZWFrTWFwQEBcIiArIENyZWF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoSGFzaE1hcC5oYXMoa2V5cywga2V5KSk7XG4gICAgICAgICAgICAgICAga2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCBjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093bi5jYWxsKHRhcmdldCwgcm9vdEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCByb290S2V5LCB7IHZhbHVlOiBIYXNoTWFwLmNyZWF0ZSgpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Jvb3RLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gRmlsbFJhbmRvbUJ5dGVzKGJ1ZmZlciwgc2l6ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKVxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMHhmZiB8IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEdlblJhbmRvbUJ5dGVzKHNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHNpemUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtc0NyeXB0byAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoc2l6ZSkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRmlsbFJhbmRvbUJ5dGVzKG5ldyBVaW50OEFycmF5KHNpemUpLCBzaXplKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZpbGxSYW5kb21CeXRlcyhuZXcgQXJyYXkoc2l6ZSksIHNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gQ3JlYXRlVVVJRCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IEdlblJhbmRvbUJ5dGVzKFVVSURfU0laRSk7XG4gICAgICAgICAgICAgICAgLy8gbWFyayBhcyByYW5kb20gLSBSRkMgNDEyMiBcdTAwQTcgNC40XG4gICAgICAgICAgICAgICAgZGF0YVs2XSA9IGRhdGFbNl0gJiAweDRmIHwgMHg0MDtcbiAgICAgICAgICAgICAgICBkYXRhWzhdID0gZGF0YVs4XSAmIDB4YmYgfCAweDgwO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IFVVSURfU0laRTsgKytvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ5dGUgPSBkYXRhW29mZnNldF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IDQgfHwgb2Zmc2V0ID09PSA2IHx8IG9mZnNldCA9PT0gOClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIi1cIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ5dGUgPCAxNilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGJ5dGUudG9TdHJpbmcoMTYpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gdXNlcyBhIGhldXJpc3RpYyB1c2VkIGJ5IHY4IGFuZCBjaGFrcmEgdG8gZm9yY2UgYW4gb2JqZWN0IGludG8gZGljdGlvbmFyeSBtb2RlLlxuICAgICAgICBmdW5jdGlvbiBNYWtlRGljdGlvbmFyeShvYmopIHtcbiAgICAgICAgICAgIG9iai5fXyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmouX187XG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICB9XG4gICAgfSk7XG59KShSZWZsZWN0IHx8IChSZWZsZWN0ID0ge30pKTtcbiIsICJpbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XHJcbmltcG9ydCB7IGNvbnRhaW5lciB9IGZyb20gXCJ0c3lyaW5nZVwiO1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPYmplY3QzRCB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGlcIjtcclxuaW1wb3J0IHsgT2JqZWN0Q2FjaGUsIGNsb25lT2JqZWN0IH0gZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgTWF6ZUdlbmVyYXRvciB9IGZyb20gXCIuLi9kdW5nZW9uZ2VuL01hemVHZW5lcmF0b3IuanNcIjtcclxuaW1wb3J0IHsgVGlsZVNldCB9IGZyb20gXCIuLi9kdW5nZW9uZ2VuL3RpbGVzZXQuanNcIjtcclxuaW1wb3J0IHsgUGF0dGVyblNldCB9IGZyb20gXCIuLi9kdW5nZW9uZ2VuL1BhdHRlcm5TZXQuanNcIjtcclxuaW1wb3J0IHsgUm9vbVJlbmRlcmVyIH0gZnJvbSBcIi4uL2R1bmdlb25nZW4vUm9vbVJlbmRlcmVyLmpzXCI7XHJcbmltcG9ydCB7IEZhZGVTY3JlZW4gfSBmcm9tIFwiLi9mYWRlU2NyZWVuLmpzXCI7XHJcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaS9kZWNvcmF0b3JzLmpzXCI7XHJcbmltcG9ydCB7IGdldEludmVydGVkRGlyZWN0aW9uIH0gZnJvbSBcIi4uL2R1bmdlb25nZW4vdXRpbHMvZGlyZWN0aW9uSGVscGVycy5qc1wiO1xyXG5cclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4uL2NsYXNzZXMvZ2FtZVN0YXRlLmpzXCI7XHJcblxyXG5jb25zdCBzaXplID0gOTtcclxuY29uc3QgcGF0dGVyblNpemUgPSAzO1xyXG5cclxuZXhwb3J0IGNsYXNzIExldmVsR2VuZXJhdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBzdGF0aWMgVHlwZU5hbWUgPSBcImxldmVsLWdlbmVyYXRvclwiO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgb2JqZWN0IHVzZWQgdG8gZ2V0IHRoZSBmYWRlIHNjcmVlbiBjb21wb25lbnQgZnJvbS5cclxuICAgKi9cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICBmYWRlU2NyZWVuT2JqZWN0ITogT2JqZWN0M0Q7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBsZXZlbCByb290IG9iamVjdC4gQWxsIGxldmVsIG9iamVjdHMgd2lsbCBiZSBhZGRlZCBhcyBjaGlsZHJlbiBvZiB0aGlzIG9iamVjdC5cclxuICAgKi9cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICBsZXZlbFJvb3QhOiBPYmplY3QzRDtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHJvb3Qgb2JqZWN0IG9mIHRoZSBsaWdodHMuIEF2YWlsYWJsZSBMaWdodHMgYXJlIGNoaWxkcmVuIG9mIHRoaXMuXHJcbiAgICovXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgbGlnaHRzITogT2JqZWN0M0Q7XHJcblxyXG4gIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gIGxldmVsQmxvY2tzITogT2JqZWN0M0Q7XHJcblxyXG4gIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gIGVuZW1pZXMhOiBPYmplY3QzRDtcclxuXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgY2hhcmFjdGVycyE6IE9iamVjdDNEO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgY29tcG9uZW50IHRoYXQgaXMgdXNlZCB0byBmYWRlIHRoZSBzY3JlZW4gdG8gYmxhY2sgYW5kIGJhY2suXHJcbiAgICovXHJcbiAgZmFkZVNjcmVlbkNvbXBvbmVudCE6IEZhZGVTY3JlZW47XHJcblxyXG4gIGdlbmVyYXRvciE6IE1hemVHZW5lcmF0b3I7XHJcbiAgXHJcbiAgbGV2ZWxQYXJlbnQhOiBPYmplY3QzRDtcclxuICBcclxuICB0aWxlc2V0ITogVGlsZVNldDtcclxuICBwYXR0ZXJuU2V0ITogUGF0dGVyblNldDtcclxuICByb29tUmVuZGVyZXIhOiBSb29tUmVuZGVyZXI7XHJcbiAgYmxvY2tDYWNoZSE6IE9iamVjdENhY2hlO1xyXG4gIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gIGdsb2JhbE9iamVjdENhY2hlITogT2JqZWN0Q2FjaGU7XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogb3ZlcnJpZGVzIHRoZSBpbml0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50XHJcbiAgICovXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMuZ2FtZVN0YXRlID0gY29udGFpbmVyLnJlc29sdmUoR2FtZVN0YXRlKTtcclxuICBcclxuICAgIHRoaXMuZ2VuZXJhdG9yID0gbmV3IE1hemVHZW5lcmF0b3Ioc2l6ZSwgc2l6ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBvdmVycmlkZXMgdGhlIHN0YXJ0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50XHJcbiAgICovXHJcbiAgc3RhcnQoKSB7XHJcbiAgICBjb25zdCBmc2MgPSB0aGlzLmZhZGVTY3JlZW5PYmplY3QuZ2V0Q29tcG9uZW50KEZhZGVTY3JlZW4pO1xyXG4gICAgaWYgKCFmc2MpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gRmFkZVNjcmVlbiBjb21wb25lbnQgZm91bmQgb24gZmFkZVNjcmVlbk9iamVjdFwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuZmFkZVNjcmVlbkNvbXBvbmVudCA9IGZzYztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRlcyBhIGxldmVsXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxldmVsIFRoZSBsZXZlbCB0byBnZW5lcmF0ZVxyXG4gICAqIEByZXR1cm5zIHthbnl9XHJcbiAgICovXHJcbiAgZ2VuZXJhdGUobGV2ZWw6IG51bWJlciA9IDAsIHBhcmVudDogT2JqZWN0M0QgfCBudWxsID0gbnVsbCk6IGFueSB7XHJcbiAgICB0aGlzLmxldmVsUGFyZW50ID0gcGFyZW50IHx8IHRoaXMubGV2ZWxSb290O1xyXG5cclxuICAgIHRoaXMudGlsZXNldCA9IG5ldyBUaWxlU2V0KFxyXG4gICAgICB0aGlzLmxldmVsQmxvY2tzLmNoaWxkcmVuLFxyXG4gICAgICB0aGlzLmVuZW1pZXMuY2hpbGRyZW4sXHJcbiAgICAgIHRoaXMuY2hhcmFjdGVycy5jaGlsZHJlbik7XHJcbiAgICB0aGlzLnBhdHRlcm5TZXQgPSBuZXcgUGF0dGVyblNldCgpO1xyXG5cclxuICAgIHRoaXMuZ2VuZXJhdG9yLmdlbmVyYXRlKCk7XHJcblxyXG4gICAgdGhpcy5sZXZlbFBhcmVudC5jaGlsZHJlbi5sZW5ndGggPSAwO1xyXG4gICAgaWYgKCF0aGlzLmdsb2JhbE9iamVjdENhY2hlKSB7XHJcbiAgICAgIHRoaXMuZ2xvYmFsT2JqZWN0Q2FjaGUgPSAgbmV3IE9iamVjdENhY2hlKFxyXG4gICAgICAgIHRoaXMuZW5naW5lLFxyXG4gICAgICAgIFwiYmxvY2tzXCIsXHJcbiAgICAgICAgMjQwMCxcclxuICAgICAgICB0aGlzLmxldmVsUGFyZW50LFxyXG4gICAgICAgIDI0MDAwXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmdsb2JhbE9iamVjdENhY2hlLnJlc2V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yb29tUmVuZGVyZXIgPSBuZXcgUm9vbVJlbmRlcmVyKFxyXG4gICAgICB0aGlzLmVuZ2luZSxcclxuICAgICAgdGhpcy5sZXZlbFBhcmVudCxcclxuICAgICAgdGhpcy50aWxlc2V0LFxyXG4gICAgICB0aGlzLmxpZ2h0cy5jaGlsZHJlbixcclxuICAgICAgdGhpcy5nbG9iYWxPYmplY3RDYWNoZVxyXG4gICAgKTtcclxuICAgIHRoaXMuYmxvY2tDYWNoZSA9IHRoaXMuZ2xvYmFsT2JqZWN0Q2FjaGU7XHJcblxyXG4gICAgdGhpcy5nYW1lU3RhdGUuY3VycmVudFJvb21TdWJqZWN0LnN1YnNjcmliZSgocikgPT4ge1xyXG4gICAgICBjb25zdCBjdXJyZW50Um9vbSA9IHRoaXMuZ2VuZXJhdG9yLmdldFJvb20oclswXSwgclsxXSk7XHJcbiAgICAgIHRoaXMuZmFkZVNjcmVlbkNvbXBvbmVudC5GYWRlT3V0Q29tcGxldGVkLm9uY2UoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYmxvY2tDYWNoZS5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMucm9vbVJlbmRlcmVyLnJlbmRlcihjdXJyZW50Um9vbSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2FtZVN0YXRlLnJvb21QcmV2aW91c0V4aXREaXJlY3Rpb24pIHtcclxuICAgICAgICAgIGxldCBlbnRlckRpcmVjdGlvbiA9IGdldEludmVydGVkRGlyZWN0aW9uKFxyXG4gICAgICAgICAgICB0aGlzLmdhbWVTdGF0ZS5yb29tUHJldmlvdXNFeGl0RGlyZWN0aW9uXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgbGV0IGV4aXQgPSBjdXJyZW50Um9vbS5nZXREb29yKGVudGVyRGlyZWN0aW9uKTtcclxuICAgICAgICAgIGlmIChleGl0KSB7XHJcbiAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZW50ZXJEaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICBjYXNlIFwiTlwiOlxyXG4gICAgICAgICAgICAgICAgZXhpdC55ICs9IDE7XHJcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IDE4MDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgXCJTXCI6XHJcbiAgICAgICAgICAgICAgICBleGl0LnkgLT0gMTtcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGNhc2UgXCJFXCI6XHJcbiAgICAgICAgICAgICAgICBleGl0LnggLT0gMTtcclxuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gOTA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIFwiV1wiOlxyXG4gICAgICAgICAgICAgICAgZXhpdC54ICs9IDE7XHJcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IDI3MDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVN0YXRlLnBsYXllclBvc2l0aW9uID0gW2V4aXQueCwgMCwgZXhpdC55XTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lU3RhdGUucGxheWVyUm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhpcy5mYWRlU2NyZWVuQ29tcG9uZW50LmZhZGVPdXQoKTtcclxuICAgICAgdGhpcy5nYW1lU3RhdGUuc2V0Q3VycmVudFJvb20oY3VycmVudFJvb20pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJEZWJ1Zyh0aGlzLmdlbmVyYXRvcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW5kZXJzIGEgZGVidWcgdmlldyBvZiB0aGUgbWFwXHJcbiAgICogQHBhcmFtIHtNYXplR2VuZXJhdG9yfSBnZW5lcmF0b3JcclxuICAgKi9cclxuICByZW5kZXJEZWJ1ZyhnZW5lcmF0b3I6IE1hemVHZW5lcmF0b3IpIHtcclxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcbiAgICAvLyAgICBjYW52YXMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgY2FudmFzLnN0eWxlLnRvcCA9IFwiMHB4XCI7XHJcbiAgICBjYW52YXMuc3R5bGUubGVmdCA9IFwiMHB4XCI7XHJcbiAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gXCIxMDBcIjtcclxuICAgIC8vc2NhbGUgY2FudmFzIDMwMCUsIG5lYXJlc3QgbmVpZ2hib3JcclxuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IFwiMjU2cHhcIjtcclxuICAgIGNhbnZhcy5zdHlsZS5pbWFnZVJlbmRlcmluZyA9IFwicGl4ZWxhdGVkXCI7XHJcblxyXG4gICAgY2FudmFzLndpZHRoID0gMTAwO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IDEwMDtcclxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHNpemU7IHJvdysrKSB7XHJcbiAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHNpemU7IGNvbCsrKSB7XHJcbiAgICAgICAgLy90aGlzLmNyZWF0ZVRpbGUocm93IC0gc2l6ZSAvIDIsIDAsIGNvbCAtIHNpemUgLyAyLCBcIkZsb29yMDFcIik7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFJvb20gPSBnZW5lcmF0b3IuZ2V0Um9vbShyb3csIGNvbCk7XHJcblxyXG4gICAgICAgIGxldCBwcyA9IDU7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLnBhdHRlcm5TZXQuZ2V0KGN1cnJlbnRSb29tLnRvS2V5KCkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBncmlkUm93ID0gMDsgZ3JpZFJvdyA8IHBzOyBncmlkUm93KyspIHtcclxuICAgICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgY29sdW1ucyBvZiB0aGUgM3gzIGdyaWRcclxuICAgICAgICAgIGZvciAobGV0IGdyaWRDb2x1bW4gPSAwOyBncmlkQ29sdW1uIDwgcHM7IGdyaWRDb2x1bW4rKykge1xyXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHJvdyBhbmQgY29sIHBvc2l0aW9ucyBmb3IgZWFjaCB0aWxlIGluIHRoZSAzeDMgZ3JpZCxcclxuICAgICAgICAgICAgLy8gYWRqdXN0aW5nIHRoZWlyIHBvc2l0aW9ucyBiYXNlZCBvbiB0aGVpciBpbmRpY2VzIHdpdGhpbiB0aGUgZ3JpZC5cclxuICAgICAgICAgICAgY29uc3QgbmV3Um93UG9zID0gcm93ICogcHMgKyBncmlkUm93IC0gKHNpemUgKiBwcykgLyAyO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdDb2xQb3MgPSBjb2wgKiBwcyArIGdyaWRDb2x1bW4gLSAoc2l6ZSAqIHBzKSAvIDI7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGlsZUluZGV4ID0gcGF0dGVybltncmlkUm93XVtncmlkQ29sdW1uXTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSb29tLmlzRW50cmFuY2UpIHtcclxuICAgICAgICAgICAgICB0aWxlSW5kZXggPSA1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Um9vbS5pc0V4aXQpIHtcclxuICAgICAgICAgICAgICB0aWxlSW5kZXggPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Um9vbS5pc1RyZWFzdXJlICYmIHRpbGVJbmRleCA9PSA2KSB7XHJcbiAgICAgICAgICAgICAgdGlsZUluZGV4ID0gNztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdGlsZSA9IHRoaXMudGlsZXNldC5nZXRUaWxlKHRpbGVJbmRleCk7XHJcbiAgICAgICAgICAgIC8vICB0aGlzLmNyZWF0ZVRpbGUobmV3Um93UG9zLCAwLCBuZXdDb2xQb3MsIHRpbGUub2JqZWN0KTtcclxuXHJcbiAgICAgICAgICAgIC8vYWxzbyBkcmF3IHRoZSB0aWxlIGFzIGEgcGl4ZWwgdG8gdGhlIGNhbnZhczpcclxuICAgICAgICAgICAgc3dpdGNoICh0aWxlSW5kZXgpIHtcclxuICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJncmVlblwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJ5ZWxsb3dcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJncmF5XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGlsZUluZGV4ID49IDQpXHJcbiAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KFxyXG4gICAgICAgICAgICAgICAgKG5ld0NvbFBvcyArIChzaXplICogcHMpIC8gMikgKiAyLFxyXG4gICAgICAgICAgICAgICAgKG5ld1Jvd1BvcyArIChzaXplICogcHMpIC8gMikgKiAyLFxyXG4gICAgICAgICAgICAgICAgMixcclxuICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gIH1cclxuXHJcbiBcclxuICBjcmVhdGVUaWxlKHg6bnVtYmVyLCB5Om51bWJlciwgejpudW1iZXIsIHRpbGU6T2JqZWN0M0QpIHtcclxuICAgIGxldCBibG9ja09iaiA9IHRpbGU7XHJcbiAgICBsZXQgb2JqID0gY2xvbmVPYmplY3QodGhpcy5lbmdpbmUsIGJsb2NrT2JqLCB0aGlzLmJsb2NrQ2FjaGUpO1xyXG4gICAgaWYoIW9iail7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBjbG9uZSBvYmplY3Q6IFwiICsgYmxvY2tPYmoubmFtZSk7XHJcbiAgICB9XHJcbiAgICBvYmoucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XHJcbiAgICBvYmouc2V0UG9zaXRpb25Xb3JsZChbeCwgeSwgel0pO1xyXG4gIH1cclxufVxyXG4iLCAidmFyIExpZmVjeWNsZTtcbihmdW5jdGlvbiAoTGlmZWN5Y2xlKSB7XG4gICAgTGlmZWN5Y2xlW0xpZmVjeWNsZVtcIlRyYW5zaWVudFwiXSA9IDBdID0gXCJUcmFuc2llbnRcIjtcbiAgICBMaWZlY3ljbGVbTGlmZWN5Y2xlW1wiU2luZ2xldG9uXCJdID0gMV0gPSBcIlNpbmdsZXRvblwiO1xuICAgIExpZmVjeWNsZVtMaWZlY3ljbGVbXCJSZXNvbHV0aW9uU2NvcGVkXCJdID0gMl0gPSBcIlJlc29sdXRpb25TY29wZWRcIjtcbiAgICBMaWZlY3ljbGVbTGlmZWN5Y2xlW1wiQ29udGFpbmVyU2NvcGVkXCJdID0gM10gPSBcIkNvbnRhaW5lclNjb3BlZFwiO1xufSkoTGlmZWN5Y2xlIHx8IChMaWZlY3ljbGUgPSB7fSkpO1xuZXhwb3J0IGRlZmF1bHQgTGlmZWN5Y2xlO1xuIiwgIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NyZWF0ZUJpbmRpbmcobywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgZXhwb3J0cykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xyXG4gICAgcmVzdWx0LmRlZmF1bHQgPSBtb2Q7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsICJleHBvcnQgdmFyIElOSkVDVElPTl9UT0tFTl9NRVRBREFUQV9LRVkgPSBcImluamVjdGlvblRva2Vuc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmFtSW5mbyh0YXJnZXQpIHtcbiAgICB2YXIgcGFyYW1zID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIHRhcmdldCkgfHwgW107XG4gICAgdmFyIGluamVjdGlvblRva2VucyA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoSU5KRUNUSU9OX1RPS0VOX01FVEFEQVRBX0tFWSwgdGFyZ2V0KSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhpbmplY3Rpb25Ub2tlbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBwYXJhbXNbK2tleV0gPSBpbmplY3Rpb25Ub2tlbnNba2V5XTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGFyYW1zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUluamVjdGlvblRva2VuTWV0YWRhdGEoZGF0YSwgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIF9wcm9wZXJ0eUtleSwgcGFyYW1ldGVySW5kZXgpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3JzID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShJTkpFQ1RJT05fVE9LRU5fTUVUQURBVEFfS0VZLCB0YXJnZXQpIHx8IHt9O1xuICAgICAgICBkZXNjcmlwdG9yc1twYXJhbWV0ZXJJbmRleF0gPSB0cmFuc2Zvcm1cbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHRva2VuOiBkYXRhLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLnRyYW5zZm9ybVRva2VuLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybUFyZ3M6IHRyYW5zZm9ybS5hcmdzIHx8IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGRhdGE7XG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoSU5KRUNUSU9OX1RPS0VOX01FVEFEQVRBX0tFWSwgZGVzY3JpcHRvcnMsIHRhcmdldCk7XG4gICAgfTtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gaXNDbGFzc1Byb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuICEhcHJvdmlkZXIudXNlQ2xhc3M7XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGlzRmFjdG9yeVByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuICEhcHJvdmlkZXIudXNlRmFjdG9yeTtcbn1cbiIsICJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG52YXIgRGVsYXllZENvbnN0cnVjdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWxheWVkQ29uc3RydWN0b3Iod3JhcCkge1xuICAgICAgICB0aGlzLndyYXAgPSB3cmFwO1xuICAgICAgICB0aGlzLnJlZmxlY3RNZXRob2RzID0gW1xuICAgICAgICAgICAgXCJnZXRcIixcbiAgICAgICAgICAgIFwiZ2V0UHJvdG90eXBlT2ZcIixcbiAgICAgICAgICAgIFwic2V0UHJvdG90eXBlT2ZcIixcbiAgICAgICAgICAgIFwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXCIsXG4gICAgICAgICAgICBcImRlZmluZVByb3BlcnR5XCIsXG4gICAgICAgICAgICBcImhhc1wiLFxuICAgICAgICAgICAgXCJzZXRcIixcbiAgICAgICAgICAgIFwiZGVsZXRlUHJvcGVydHlcIixcbiAgICAgICAgICAgIFwiYXBwbHlcIixcbiAgICAgICAgICAgIFwiY29uc3RydWN0XCIsXG4gICAgICAgICAgICBcIm93bktleXNcIlxuICAgICAgICBdO1xuICAgIH1cbiAgICBEZWxheWVkQ29uc3RydWN0b3IucHJvdG90eXBlLmNyZWF0ZVByb3h5ID0gZnVuY3Rpb24gKGNyZWF0ZU9iamVjdCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdGFyZ2V0ID0ge307XG4gICAgICAgIHZhciBpbml0ID0gZmFsc2U7XG4gICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgdmFyIGRlbGF5ZWRPYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWluaXQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNyZWF0ZU9iamVjdChfdGhpcy53cmFwKCkpO1xuICAgICAgICAgICAgICAgIGluaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldCwgdGhpcy5jcmVhdGVIYW5kbGVyKGRlbGF5ZWRPYmplY3QpKTtcbiAgICB9O1xuICAgIERlbGF5ZWRDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY3JlYXRlSGFuZGxlciA9IGZ1bmN0aW9uIChkZWxheWVkT2JqZWN0KSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0ge307XG4gICAgICAgIHZhciBpbnN0YWxsID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGhhbmRsZXJbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFyZ3NbMF0gPSBkZWxheWVkT2JqZWN0KCk7XG4gICAgICAgICAgICAgICAgdmFyIG1ldGhvZCA9IFJlZmxlY3RbbmFtZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkKGFyZ3MpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucmVmbGVjdE1ldGhvZHMuZm9yRWFjaChpbnN0YWxsKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XG4gICAgfTtcbiAgICByZXR1cm4gRGVsYXllZENvbnN0cnVjdG9yO1xufSgpKTtcbmV4cG9ydCB7IERlbGF5ZWRDb25zdHJ1Y3RvciB9O1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5KHdyYXBwZWRDb25zdHJ1Y3Rvcikge1xuICAgIGlmICh0eXBlb2Ygd3JhcHBlZENvbnN0cnVjdG9yID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHQgdG8gYGRlbGF5YCB1bmRlZmluZWQuIENvbnN0cnVjdG9yIG11c3QgYmUgd3JhcHBlZCBpbiBhIGNhbGxiYWNrXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERlbGF5ZWRDb25zdHJ1Y3Rvcih3cmFwcGVkQ29uc3RydWN0b3IpO1xufVxuIiwgImltcG9ydCB7IERlbGF5ZWRDb25zdHJ1Y3RvciB9IGZyb20gXCIuLi9sYXp5LWhlbHBlcnNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc05vcm1hbFRva2VuKHRva2VuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdG9rZW4gPT09IFwic3ltYm9sXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUb2tlbkRlc2NyaXB0b3IoZGVzY3JpcHRvcikge1xuICAgIHJldHVybiAodHlwZW9mIGRlc2NyaXB0b3IgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgXCJ0b2tlblwiIGluIGRlc2NyaXB0b3IgJiZcbiAgICAgICAgXCJtdWx0aXBsZVwiIGluIGRlc2NyaXB0b3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtRGVzY3JpcHRvcihkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgZGVzY3JpcHRvciA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcInRva2VuXCIgaW4gZGVzY3JpcHRvciAmJlxuICAgICAgICBcInRyYW5zZm9ybVwiIGluIGRlc2NyaXB0b3IpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3JUb2tlbih0b2tlbikge1xuICAgIHJldHVybiB0eXBlb2YgdG9rZW4gPT09IFwiZnVuY3Rpb25cIiB8fCB0b2tlbiBpbnN0YW5jZW9mIERlbGF5ZWRDb25zdHJ1Y3Rvcjtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gaXNUb2tlblByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuICEhcHJvdmlkZXIudXNlVG9rZW47XG59XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsdWVQcm92aWRlcihwcm92aWRlcikge1xuICAgIHJldHVybiBwcm92aWRlci51c2VWYWx1ZSAhPSB1bmRlZmluZWQ7XG59XG4iLCAiaW1wb3J0IHsgaXNDbGFzc1Byb3ZpZGVyIH0gZnJvbSBcIi4vY2xhc3MtcHJvdmlkZXJcIjtcbmltcG9ydCB7IGlzVmFsdWVQcm92aWRlciB9IGZyb20gXCIuL3ZhbHVlLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBpc1Rva2VuUHJvdmlkZXIgfSBmcm9tIFwiLi90b2tlbi1wcm92aWRlclwiO1xuaW1wb3J0IHsgaXNGYWN0b3J5UHJvdmlkZXIgfSBmcm9tIFwiLi9mYWN0b3J5LXByb3ZpZGVyXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNQcm92aWRlcihwcm92aWRlcikge1xuICAgIHJldHVybiAoaXNDbGFzc1Byb3ZpZGVyKHByb3ZpZGVyKSB8fFxuICAgICAgICBpc1ZhbHVlUHJvdmlkZXIocHJvdmlkZXIpIHx8XG4gICAgICAgIGlzVG9rZW5Qcm92aWRlcihwcm92aWRlcikgfHxcbiAgICAgICAgaXNGYWN0b3J5UHJvdmlkZXIocHJvdmlkZXIpKTtcbn1cbiIsICJ2YXIgUmVnaXN0cnlCYXNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZWdpc3RyeUJhc2UoKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5TWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RyeU1hcC5lbnRyaWVzKCk7XG4gICAgfTtcbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdGhpcy5lbnN1cmUoa2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJ5TWFwLmdldChrZXkpO1xuICAgIH07XG4gICAgUmVnaXN0cnlCYXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRoaXMuZW5zdXJlKGtleSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX3JlZ2lzdHJ5TWFwLmdldChrZXkpO1xuICAgICAgICByZXR1cm4gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbiAgICB9O1xuICAgIFJlZ2lzdHJ5QmFzZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmUoa2V5KTtcbiAgICAgICAgdGhpcy5fcmVnaXN0cnlNYXAuZ2V0KGtleSkucHVzaCh2YWx1ZSk7XG4gICAgfTtcbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLnNldEFsbCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5TWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlZ2lzdHJ5QmFzZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0aGlzLmVuc3VyZShrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVnaXN0cnlNYXAuZ2V0KGtleSkubGVuZ3RoID4gMDtcbiAgICB9O1xuICAgIFJlZ2lzdHJ5QmFzZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5TWFwLmNsZWFyKCk7XG4gICAgfTtcbiAgICBSZWdpc3RyeUJhc2UucHJvdG90eXBlLmVuc3VyZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9yZWdpc3RyeU1hcC5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0cnlNYXAuc2V0KGtleSwgW10pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUmVnaXN0cnlCYXNlO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IFJlZ2lzdHJ5QmFzZTtcbiIsICJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCBSZWdpc3RyeUJhc2UgZnJvbSBcIi4vcmVnaXN0cnktYmFzZVwiO1xudmFyIFJlZ2lzdHJ5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVnaXN0cnksIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFJlZ2lzdHJ5O1xufShSZWdpc3RyeUJhc2UpKTtcbmV4cG9ydCBkZWZhdWx0IFJlZ2lzdHJ5O1xuIiwgInZhciBSZXNvbHV0aW9uQ29udGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzb2x1dGlvbkNvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuc2NvcGVkUmVzb2x1dGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHJldHVybiBSZXNvbHV0aW9uQ29udGV4dDtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBSZXNvbHV0aW9uQ29udGV4dDtcbiIsICJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkIH0gZnJvbSBcInRzbGliXCI7XG5mdW5jdGlvbiBmb3JtYXREZXBlbmRlbmN5KHBhcmFtcywgaWR4KSB7XG4gICAgaWYgKHBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJhdCBwb3NpdGlvbiAjXCIgKyBpZHg7XG4gICAgfVxuICAgIHZhciBhcmdOYW1lID0gcGFyYW1zLnNwbGl0KFwiLFwiKVtpZHhdLnRyaW0oKTtcbiAgICByZXR1cm4gXCJcXFwiXCIgKyBhcmdOYW1lICsgXCJcXFwiIGF0IHBvc2l0aW9uICNcIiArIGlkeDtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VFcnJvck1lc3NhZ2UobXNnLCBlLCBpbmRlbnQpIHtcbiAgICBpZiAoaW5kZW50ID09PSB2b2lkIDApIHsgaW5kZW50ID0gXCIgICAgXCI7IH1cbiAgICByZXR1cm4gX19zcHJlYWQoW21zZ10sIGUubWVzc2FnZS5zcGxpdChcIlxcblwiKS5tYXAoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGluZGVudCArIGw7IH0pKS5qb2luKFwiXFxuXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVycm9yQ3RvcihjdG9yLCBwYXJhbUlkeCwgZXJyb3IpIHtcbiAgICB2YXIgX2EgPSBfX3JlYWQoY3Rvci50b1N0cmluZygpLm1hdGNoKC9jb25zdHJ1Y3RvclxcKChbXFx3LCBdKylcXCkvKSB8fCBbXSwgMiksIF9iID0gX2FbMV0sIHBhcmFtcyA9IF9iID09PSB2b2lkIDAgPyBudWxsIDogX2I7XG4gICAgdmFyIGRlcCA9IGZvcm1hdERlcGVuZGVuY3kocGFyYW1zLCBwYXJhbUlkeCk7XG4gICAgcmV0dXJuIGNvbXBvc2VFcnJvck1lc3NhZ2UoXCJDYW5ub3QgaW5qZWN0IHRoZSBkZXBlbmRlbmN5IFwiICsgZGVwICsgXCIgb2YgXFxcIlwiICsgY3Rvci5uYW1lICsgXCJcXFwiIGNvbnN0cnVjdG9yLiBSZWFzb246XCIsIGVycm9yKTtcbn1cbiIsICJleHBvcnQgZnVuY3Rpb24gaXNEaXNwb3NhYmxlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZS5kaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgZGlzcG9zZUZ1biA9IHZhbHVlLmRpc3Bvc2U7XG4gICAgaWYgKGRpc3Bvc2VGdW4ubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuIiwgImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IFJlZ2lzdHJ5QmFzZSBmcm9tIFwiLi9yZWdpc3RyeS1iYXNlXCI7XG52YXIgUHJlUmVzb2x1dGlvbkludGVyY2VwdG9ycyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFByZVJlc29sdXRpb25JbnRlcmNlcHRvcnMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUHJlUmVzb2x1dGlvbkludGVyY2VwdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUHJlUmVzb2x1dGlvbkludGVyY2VwdG9ycztcbn0oUmVnaXN0cnlCYXNlKSk7XG5leHBvcnQgeyBQcmVSZXNvbHV0aW9uSW50ZXJjZXB0b3JzIH07XG52YXIgUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcnMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9ycywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9ycygpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcnM7XG59KFJlZ2lzdHJ5QmFzZSkpO1xuZXhwb3J0IHsgUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcnMgfTtcbnZhciBJbnRlcmNlcHRvcnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEludGVyY2VwdG9ycygpIHtcbiAgICAgICAgdGhpcy5wcmVSZXNvbHV0aW9uID0gbmV3IFByZVJlc29sdXRpb25JbnRlcmNlcHRvcnMoKTtcbiAgICAgICAgdGhpcy5wb3N0UmVzb2x1dGlvbiA9IG5ldyBQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9ycygpO1xuICAgIH1cbiAgICByZXR1cm4gSW50ZXJjZXB0b3JzO1xufSgpKTtcbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9ycztcbiIsICJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3JlYWQsIF9fc3ByZWFkLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNDbGFzc1Byb3ZpZGVyLCBpc0ZhY3RvcnlQcm92aWRlciwgaXNOb3JtYWxUb2tlbiwgaXNUb2tlblByb3ZpZGVyLCBpc1ZhbHVlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnNcIjtcbmltcG9ydCB7IGlzUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnMvcHJvdmlkZXJcIjtcbmltcG9ydCB7IGlzQ29uc3RydWN0b3JUb2tlbiwgaXNUb2tlbkRlc2NyaXB0b3IsIGlzVHJhbnNmb3JtRGVzY3JpcHRvciB9IGZyb20gXCIuL3Byb3ZpZGVycy9pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCBSZWdpc3RyeSBmcm9tIFwiLi9yZWdpc3RyeVwiO1xuaW1wb3J0IExpZmVjeWNsZSBmcm9tIFwiLi90eXBlcy9saWZlY3ljbGVcIjtcbmltcG9ydCBSZXNvbHV0aW9uQ29udGV4dCBmcm9tIFwiLi9yZXNvbHV0aW9uLWNvbnRleHRcIjtcbmltcG9ydCB7IGZvcm1hdEVycm9yQ3RvciB9IGZyb20gXCIuL2Vycm9yLWhlbHBlcnNcIjtcbmltcG9ydCB7IERlbGF5ZWRDb25zdHJ1Y3RvciB9IGZyb20gXCIuL2xhenktaGVscGVyc1wiO1xuaW1wb3J0IHsgaXNEaXNwb3NhYmxlIH0gZnJvbSBcIi4vdHlwZXMvZGlzcG9zYWJsZVwiO1xuaW1wb3J0IEludGVyY2VwdG9ycyBmcm9tIFwiLi9pbnRlcmNlcHRvcnNcIjtcbmV4cG9ydCB2YXIgdHlwZUluZm8gPSBuZXcgTWFwKCk7XG52YXIgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIocGFyZW50KSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLl9yZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSgpO1xuICAgICAgICB0aGlzLmludGVyY2VwdG9ycyA9IG5ldyBJbnRlcmNlcHRvcnMoKTtcbiAgICAgICAgdGhpcy5kaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc3Bvc2FibGVzID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHRva2VuLCBwcm92aWRlck9yQ29uc3RydWN0b3IsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyBsaWZlY3ljbGU6IExpZmVjeWNsZS5UcmFuc2llbnQgfTsgfVxuICAgICAgICB0aGlzLmVuc3VyZU5vdERpc3Bvc2VkKCk7XG4gICAgICAgIHZhciBwcm92aWRlcjtcbiAgICAgICAgaWYgKCFpc1Byb3ZpZGVyKHByb3ZpZGVyT3JDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyID0geyB1c2VDbGFzczogcHJvdmlkZXJPckNvbnN0cnVjdG9yIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVyT3JDb25zdHJ1Y3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUb2tlblByb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgdmFyIHBhdGggPSBbdG9rZW5dO1xuICAgICAgICAgICAgdmFyIHRva2VuUHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgICAgIHdoaWxlICh0b2tlblByb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFRva2VuID0gdG9rZW5Qcm92aWRlci51c2VUb2tlbjtcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5pbmNsdWRlcyhjdXJyZW50VG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRva2VuIHJlZ2lzdHJhdGlvbiBjeWNsZSBkZXRlY3RlZCEgXCIgKyBfX3NwcmVhZChwYXRoLCBbY3VycmVudFRva2VuXSkuam9pbihcIiAtPiBcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwYXRoLnB1c2goY3VycmVudFRva2VuKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVnaXN0cmF0aW9uID0gdGhpcy5fcmVnaXN0cnkuZ2V0KGN1cnJlbnRUb2tlbik7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbiAmJiBpc1Rva2VuUHJvdmlkZXIocmVnaXN0cmF0aW9uLnByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlblByb3ZpZGVyID0gcmVnaXN0cmF0aW9uLnByb3ZpZGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5Qcm92aWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLlNpbmdsZXRvbiB8fFxuICAgICAgICAgICAgb3B0aW9ucy5saWZlY3ljbGUgPT0gTGlmZWN5Y2xlLkNvbnRhaW5lclNjb3BlZCB8fFxuICAgICAgICAgICAgb3B0aW9ucy5saWZlY3ljbGUgPT0gTGlmZWN5Y2xlLlJlc29sdXRpb25TY29wZWQpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbHVlUHJvdmlkZXIocHJvdmlkZXIpIHx8IGlzRmFjdG9yeVByb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgbGlmZWN5Y2xlIFxcXCJcIiArIExpZmVjeWNsZVtvcHRpb25zLmxpZmVjeWNsZV0gKyBcIlxcXCIgd2l0aCBWYWx1ZVByb3ZpZGVycyBvciBGYWN0b3J5UHJvdmlkZXJzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5LnNldCh0b2tlbiwgeyBwcm92aWRlcjogcHJvdmlkZXIsIG9wdGlvbnM6IG9wdGlvbnMgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZWdpc3RlclR5cGUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICAgICAgdGhpcy5lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgICAgICBpZiAoaXNOb3JtYWxUb2tlbih0bykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyKGZyb20sIHtcbiAgICAgICAgICAgICAgICB1c2VUb2tlbjogdG9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyKGZyb20sIHtcbiAgICAgICAgICAgIHVzZUNsYXNzOiB0b1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgaW5zdGFuY2UpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3Rlcih0b2tlbiwge1xuICAgICAgICAgICAgdXNlVmFsdWU6IGluc3RhbmNlXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZWdpc3RlclNpbmdsZXRvbiA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgICB0aGlzLmVuc3VyZU5vdERpc3Bvc2VkKCk7XG4gICAgICAgIGlmIChpc05vcm1hbFRva2VuKGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoaXNOb3JtYWxUb2tlbih0bykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3Rlcihmcm9tLCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZVRva2VuOiB0b1xuICAgICAgICAgICAgICAgIH0sIHsgbGlmZWN5Y2xlOiBMaWZlY3ljbGUuU2luZ2xldG9uIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodG8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3Rlcihmcm9tLCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZUNsYXNzOiB0b1xuICAgICAgICAgICAgICAgIH0sIHsgbGlmZWN5Y2xlOiBMaWZlY3ljbGUuU2luZ2xldG9uIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVnaXN0ZXIgYSB0eXBlIG5hbWUgYXMgYSBzaW5nbGV0b24gd2l0aG91dCBhIFwidG9cIiB0b2tlbicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1c2VDbGFzcyA9IGZyb207XG4gICAgICAgIGlmICh0byAmJiAhaXNOb3JtYWxUb2tlbih0bykpIHtcbiAgICAgICAgICAgIHVzZUNsYXNzID0gdG87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXIoZnJvbSwge1xuICAgICAgICAgICAgdXNlQ2xhc3M6IHVzZUNsYXNzXG4gICAgICAgIH0sIHsgbGlmZWN5Y2xlOiBMaWZlY3ljbGUuU2luZ2xldG9uIH0pO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKHRva2VuLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IG5ldyBSZXNvbHV0aW9uQ29udGV4dCgpOyB9XG4gICAgICAgIHRoaXMuZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbiA9IHRoaXMuZ2V0UmVnaXN0cmF0aW9uKHRva2VuKTtcbiAgICAgICAgaWYgKCFyZWdpc3RyYXRpb24gJiYgaXNOb3JtYWxUb2tlbih0b2tlbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byByZXNvbHZlIHVucmVnaXN0ZXJlZCBkZXBlbmRlbmN5IHRva2VuOiBcXFwiXCIgKyB0b2tlbi50b1N0cmluZygpICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhlY3V0ZVByZVJlc29sdXRpb25JbnRlcmNlcHRvcih0b2tlbiwgXCJTaW5nbGVcIik7XG4gICAgICAgIGlmIChyZWdpc3RyYXRpb24pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlc29sdmVSZWdpc3RyYXRpb24ocmVnaXN0cmF0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZVBvc3RSZXNvbHV0aW9uSW50ZXJjZXB0b3IodG9rZW4sIHJlc3VsdCwgXCJTaW5nbGVcIik7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbnN0cnVjdG9yVG9rZW4odG9rZW4pKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jb25zdHJ1Y3QodG9rZW4sIGNvbnRleHQpO1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlUG9zdFJlc29sdXRpb25JbnRlcmNlcHRvcih0b2tlbiwgcmVzdWx0LCBcIlNpbmdsZVwiKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIGNvbnN0cnVjdCBhbiB1bmRlZmluZWQgY29uc3RydWN0b3IuIENvdWxkIG1lYW4gYSBjaXJjdWxhciBkZXBlbmRlbmN5IHByb2JsZW0uIFRyeSB1c2luZyBgZGVsYXlgIGZ1bmN0aW9uLlwiKTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuZXhlY3V0ZVByZVJlc29sdXRpb25JbnRlcmNlcHRvciA9IGZ1bmN0aW9uICh0b2tlbiwgcmVzb2x1dGlvblR5cGUpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIGlmICh0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLmhhcyh0b2tlbikpIHtcbiAgICAgICAgICAgIHZhciByZW1haW5pbmdJbnRlcmNlcHRvcnMgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLmdldEFsbCh0b2tlbikpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmNlcHRvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJjZXB0b3Iub3B0aW9ucy5mcmVxdWVuY3kgIT0gXCJPbmNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0ludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRvci5jYWxsYmFjayh0b2tlbiwgcmVzb2x1dGlvblR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLnByZVJlc29sdXRpb24uc2V0QWxsKHRva2VuLCByZW1haW5pbmdJbnRlcmNlcHRvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmV4ZWN1dGVQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9yID0gZnVuY3Rpb24gKHRva2VuLCByZXN1bHQsIHJlc29sdXRpb25UeXBlKSB7XG4gICAgICAgIHZhciBlXzIsIF9hO1xuICAgICAgICBpZiAodGhpcy5pbnRlcmNlcHRvcnMucG9zdFJlc29sdXRpb24uaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgdmFyIHJlbWFpbmluZ0ludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRoaXMuaW50ZXJjZXB0b3JzLnBvc3RSZXNvbHV0aW9uLmdldEFsbCh0b2tlbikpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmNlcHRvciA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJjZXB0b3Iub3B0aW9ucy5mcmVxdWVuY3kgIT0gXCJPbmNlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZ0ludGVyY2VwdG9ycy5wdXNoKGludGVyY2VwdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpbnRlcmNlcHRvci5jYWxsYmFjayh0b2tlbiwgcmVzdWx0LCByZXNvbHV0aW9uVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnRlcmNlcHRvcnMucG9zdFJlc29sdXRpb24uc2V0QWxsKHRva2VuLCByZW1haW5pbmdJbnRlcmNlcHRvcnMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLnJlc29sdmVSZWdpc3RyYXRpb24gPSBmdW5jdGlvbiAocmVnaXN0cmF0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbi5vcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLlJlc29sdXRpb25TY29wZWQgJiZcbiAgICAgICAgICAgIGNvbnRleHQuc2NvcGVkUmVzb2x1dGlvbnMuaGFzKHJlZ2lzdHJhdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LnNjb3BlZFJlc29sdXRpb25zLmdldChyZWdpc3RyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc1NpbmdsZXRvbiA9IHJlZ2lzdHJhdGlvbi5vcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLlNpbmdsZXRvbjtcbiAgICAgICAgdmFyIGlzQ29udGFpbmVyU2NvcGVkID0gcmVnaXN0cmF0aW9uLm9wdGlvbnMubGlmZWN5Y2xlID09PSBMaWZlY3ljbGUuQ29udGFpbmVyU2NvcGVkO1xuICAgICAgICB2YXIgcmV0dXJuSW5zdGFuY2UgPSBpc1NpbmdsZXRvbiB8fCBpc0NvbnRhaW5lclNjb3BlZDtcbiAgICAgICAgdmFyIHJlc29sdmVkO1xuICAgICAgICBpZiAoaXNWYWx1ZVByb3ZpZGVyKHJlZ2lzdHJhdGlvbi5wcm92aWRlcikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gcmVnaXN0cmF0aW9uLnByb3ZpZGVyLnVzZVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzVG9rZW5Qcm92aWRlcihyZWdpc3RyYXRpb24ucHJvdmlkZXIpKSB7XG4gICAgICAgICAgICByZXNvbHZlZCA9IHJldHVybkluc3RhbmNlXG4gICAgICAgICAgICAgICAgPyByZWdpc3RyYXRpb24uaW5zdGFuY2UgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlZ2lzdHJhdGlvbi5pbnN0YW5jZSA9IHRoaXMucmVzb2x2ZShyZWdpc3RyYXRpb24ucHJvdmlkZXIudXNlVG9rZW4sIGNvbnRleHQpKVxuICAgICAgICAgICAgICAgIDogdGhpcy5yZXNvbHZlKHJlZ2lzdHJhdGlvbi5wcm92aWRlci51c2VUb2tlbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNDbGFzc1Byb3ZpZGVyKHJlZ2lzdHJhdGlvbi5wcm92aWRlcikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gcmV0dXJuSW5zdGFuY2VcbiAgICAgICAgICAgICAgICA/IHJlZ2lzdHJhdGlvbi5pbnN0YW5jZSB8fFxuICAgICAgICAgICAgICAgICAgICAocmVnaXN0cmF0aW9uLmluc3RhbmNlID0gdGhpcy5jb25zdHJ1Y3QocmVnaXN0cmF0aW9uLnByb3ZpZGVyLnVzZUNsYXNzLCBjb250ZXh0KSlcbiAgICAgICAgICAgICAgICA6IHRoaXMuY29uc3RydWN0KHJlZ2lzdHJhdGlvbi5wcm92aWRlci51c2VDbGFzcywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNGYWN0b3J5UHJvdmlkZXIocmVnaXN0cmF0aW9uLnByb3ZpZGVyKSkge1xuICAgICAgICAgICAgcmVzb2x2ZWQgPSByZWdpc3RyYXRpb24ucHJvdmlkZXIudXNlRmFjdG9yeSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gdGhpcy5jb25zdHJ1Y3QocmVnaXN0cmF0aW9uLnByb3ZpZGVyLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVnaXN0cmF0aW9uLm9wdGlvbnMubGlmZWN5Y2xlID09PSBMaWZlY3ljbGUuUmVzb2x1dGlvblNjb3BlZCkge1xuICAgICAgICAgICAgY29udGV4dC5zY29wZWRSZXNvbHV0aW9ucy5zZXQocmVnaXN0cmF0aW9uLCByZXNvbHZlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZXNvbHZlQWxsID0gZnVuY3Rpb24gKHRva2VuLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHsgY29udGV4dCA9IG5ldyBSZXNvbHV0aW9uQ29udGV4dCgpOyB9XG4gICAgICAgIHRoaXMuZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbnMgPSB0aGlzLmdldEFsbFJlZ2lzdHJhdGlvbnModG9rZW4pO1xuICAgICAgICBpZiAoIXJlZ2lzdHJhdGlvbnMgJiYgaXNOb3JtYWxUb2tlbih0b2tlbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byByZXNvbHZlIHVucmVnaXN0ZXJlZCBkZXBlbmRlbmN5IHRva2VuOiBcXFwiXCIgKyB0b2tlbi50b1N0cmluZygpICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhlY3V0ZVByZVJlc29sdXRpb25JbnRlcmNlcHRvcih0b2tlbiwgXCJBbGxcIik7XG4gICAgICAgIGlmIChyZWdpc3RyYXRpb25zKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSByZWdpc3RyYXRpb25zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZXNvbHZlUmVnaXN0cmF0aW9uKGl0ZW0sIGNvbnRleHQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9yKHRva2VuLCByZXN1bHRfMSwgXCJBbGxcIik7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0XzE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IFt0aGlzLmNvbnN0cnVjdCh0b2tlbiwgY29udGV4dCldO1xuICAgICAgICB0aGlzLmV4ZWN1dGVQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9yKHRva2VuLCByZXN1bHQsIFwiQWxsXCIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5pc1JlZ2lzdGVyZWQgPSBmdW5jdGlvbiAodG9rZW4sIHJlY3Vyc2l2ZSkge1xuICAgICAgICBpZiAocmVjdXJzaXZlID09PSB2b2lkIDApIHsgcmVjdXJzaXZlID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgICAgICByZXR1cm4gKHRoaXMuX3JlZ2lzdHJ5Lmhhcyh0b2tlbikgfHxcbiAgICAgICAgICAgIChyZWN1cnNpdmUgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5wYXJlbnQgfHwgZmFsc2UpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuaXNSZWdpc3RlcmVkKHRva2VuLCB0cnVlKSkpO1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgICAgICB0aGlzLl9yZWdpc3RyeS5jbGVhcigpO1xuICAgICAgICB0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLnBvc3RSZXNvbHV0aW9uLmNsZWFyKCk7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmNsZWFySW5zdGFuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8zLCBfYTtcbiAgICAgICAgdGhpcy5lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLl9yZWdpc3RyeS5lbnRyaWVzKCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9kID0gX19yZWFkKF9jLnZhbHVlLCAyKSwgdG9rZW4gPSBfZFswXSwgcmVnaXN0cmF0aW9ucyA9IF9kWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lzdHJ5LnNldEFsbCh0b2tlbiwgcmVnaXN0cmF0aW9uc1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHsgcmV0dXJuICFpc1ZhbHVlUHJvdmlkZXIocmVnaXN0cmF0aW9uLnByb3ZpZGVyKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvbi5pbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5jcmVhdGVDaGlsZENvbnRhaW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfNCwgX2E7XG4gICAgICAgIHRoaXMuZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICAgICAgdmFyIGNoaWxkQ29udGFpbmVyID0gbmV3IEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lcih0aGlzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy5fcmVnaXN0cnkuZW50cmllcygpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBfZCA9IF9fcmVhZChfYy52YWx1ZSwgMiksIHRva2VuID0gX2RbMF0sIHJlZ2lzdHJhdGlvbnMgPSBfZFsxXTtcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9ucy5zb21lKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmxpZmVjeWNsZSA9PT0gTGlmZWN5Y2xlLkNvbnRhaW5lclNjb3BlZDtcbiAgICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZENvbnRhaW5lci5fcmVnaXN0cnkuc2V0QWxsKHRva2VuLCByZWdpc3RyYXRpb25zLm1hcChmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uLm9wdGlvbnMubGlmZWN5Y2xlID09PSBMaWZlY3ljbGUuQ29udGFpbmVyU2NvcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IHJlZ2lzdHJhdGlvbi5wcm92aWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogcmVnaXN0cmF0aW9uLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV80XzEpIHsgZV80ID0geyBlcnJvcjogZV80XzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZENvbnRhaW5lcjtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuYmVmb3JlUmVzb2x1dGlvbiA9IGZ1bmN0aW9uICh0b2tlbiwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyBmcmVxdWVuY3k6IFwiQWx3YXlzXCIgfTsgfVxuICAgICAgICB0aGlzLmludGVyY2VwdG9ycy5wcmVSZXNvbHV0aW9uLnNldCh0b2tlbiwge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuYWZ0ZXJSZXNvbHV0aW9uID0gZnVuY3Rpb24gKHRva2VuLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7IGZyZXF1ZW5jeTogXCJBbHdheXNcIiB9OyB9XG4gICAgICAgIHRoaXMuaW50ZXJjZXB0b3JzLnBvc3RSZXNvbHV0aW9uLnNldCh0b2tlbiwge1xuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByb21pc2VzO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uIChkaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IGRpc3Bvc2FibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChtYXliZVByb21pc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQcm9taXNlLmFsbChwcm9taXNlcyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEludGVybmFsRGVwZW5kZW5jeUNvbnRhaW5lci5wcm90b3R5cGUuZ2V0UmVnaXN0cmF0aW9uID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVnaXN0ZXJlZCh0b2tlbikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RyeS5nZXQodG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldFJlZ2lzdHJhdGlvbih0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmdldEFsbFJlZ2lzdHJhdGlvbnMgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZWdpc3RlcmVkKHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJ5LmdldEFsbCh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0QWxsUmVnaXN0cmF0aW9ucyh0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLmNvbnN0cnVjdCA9IGZ1bmN0aW9uIChjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChjdG9yIGluc3RhbmNlb2YgRGVsYXllZENvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY3Rvci5jcmVhdGVQcm94eShmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc29sdmUodGFyZ2V0LCBjb250ZXh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW1JbmZvID0gdHlwZUluZm8uZ2V0KGN0b3IpO1xuICAgICAgICAgICAgaWYgKCFwYXJhbUluZm8gfHwgcGFyYW1JbmZvLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChjdG9yLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGN0b3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlR5cGVJbmZvIG5vdCBrbm93biBmb3IgXFxcIlwiICsgY3Rvci5uYW1lICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBwYXJhbUluZm8ubWFwKF90aGlzLnJlc29sdmVQYXJhbXMoY29udGV4dCwgY3RvcikpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyAoY3Rvci5iaW5kLmFwcGx5KGN0b3IsIF9fc3ByZWFkKFt2b2lkIDBdLCBwYXJhbXMpKSkoKTtcbiAgICAgICAgfSkoKTtcbiAgICAgICAgaWYgKGlzRGlzcG9zYWJsZShpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgICBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIucHJvdG90eXBlLnJlc29sdmVQYXJhbXMgPSBmdW5jdGlvbiAoY29udGV4dCwgY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHBhcmFtLCBpZHgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNUb2tlbkRlc2NyaXB0b3IocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RyYW5zZm9ybURlc2NyaXB0b3IocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0ubXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChfYSA9IF90aGlzLnJlc29sdmUocGFyYW0udHJhbnNmb3JtKSkudHJhbnNmb3JtLmFwcGx5KF9hLCBfX3NwcmVhZChbX3RoaXMucmVzb2x2ZUFsbChwYXJhbS50b2tlbildLCBwYXJhbS50cmFuc2Zvcm1BcmdzKSkgOiAoX2IgPSBfdGhpcy5yZXNvbHZlKHBhcmFtLnRyYW5zZm9ybSkpLnRyYW5zZm9ybS5hcHBseShfYiwgX19zcHJlYWQoW190aGlzLnJlc29sdmUocGFyYW0udG9rZW4sIGNvbnRleHQpXSwgcGFyYW0udHJhbnNmb3JtQXJncykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfdGhpcy5yZXNvbHZlQWxsKHBhcmFtLnRva2VuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3RoaXMucmVzb2x2ZShwYXJhbS50b2tlbiwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNUcmFuc2Zvcm1EZXNjcmlwdG9yKHBhcmFtKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9jID0gX3RoaXMucmVzb2x2ZShwYXJhbS50cmFuc2Zvcm0sIGNvbnRleHQpKS50cmFuc2Zvcm0uYXBwbHkoX2MsIF9fc3ByZWFkKFtfdGhpcy5yZXNvbHZlKHBhcmFtLnRva2VuLCBjb250ZXh0KV0sIHBhcmFtLnRyYW5zZm9ybUFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc29sdmUocGFyYW0sIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0RXJyb3JDdG9yKGN0b3IsIGlkeCwgZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyLnByb3RvdHlwZS5lbnN1cmVOb3REaXNwb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgY29udGFpbmVyIGhhcyBiZWVuIGRpc3Bvc2VkLCB5b3UgY2Fubm90IGludGVyYWN0IHdpdGggYSBkaXNwb3NlZCBjb250YWluZXJcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXI7XG59KCkpO1xuZXhwb3J0IHZhciBpbnN0YW5jZSA9IG5ldyBJbnRlcm5hbERlcGVuZGVuY3lDb250YWluZXIoKTtcbmV4cG9ydCBkZWZhdWx0IGluc3RhbmNlO1xuIiwgImltcG9ydCB7IGRlZmluZUluamVjdGlvblRva2VuTWV0YWRhdGEgfSBmcm9tIFwiLi4vcmVmbGVjdGlvbi1oZWxwZXJzXCI7XG5mdW5jdGlvbiBpbmplY3QodG9rZW4pIHtcbiAgICByZXR1cm4gZGVmaW5lSW5qZWN0aW9uVG9rZW5NZXRhZGF0YSh0b2tlbik7XG59XG5leHBvcnQgZGVmYXVsdCBpbmplY3Q7XG4iLCAiaW1wb3J0IHsgZ2V0UGFyYW1JbmZvIH0gZnJvbSBcIi4uL3JlZmxlY3Rpb24taGVscGVyc1wiO1xuaW1wb3J0IHsgdHlwZUluZm8gfSBmcm9tIFwiLi4vZGVwZW5kZW5jeS1jb250YWluZXJcIjtcbmZ1bmN0aW9uIGluamVjdGFibGUoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdHlwZUluZm8uc2V0KHRhcmdldCwgZ2V0UGFyYW1JbmZvKHRhcmdldCkpO1xuICAgIH07XG59XG5leHBvcnQgZGVmYXVsdCBpbmplY3RhYmxlO1xuIiwgImltcG9ydCBpbmplY3RhYmxlIGZyb20gXCIuL2luamVjdGFibGVcIjtcbmltcG9ydCB7IGluc3RhbmNlIGFzIGdsb2JhbENvbnRhaW5lciB9IGZyb20gXCIuLi9kZXBlbmRlbmN5LWNvbnRhaW5lclwiO1xuZnVuY3Rpb24gc2luZ2xldG9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGluamVjdGFibGUoKSh0YXJnZXQpO1xuICAgICAgICBnbG9iYWxDb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24odGFyZ2V0KTtcbiAgICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgc2luZ2xldG9uO1xuIiwgImlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5nZXRNZXRhZGF0YSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInRzeXJpbmdlIHJlcXVpcmVzIGEgcmVmbGVjdCBwb2x5ZmlsbC4gUGxlYXNlIGFkZCAnaW1wb3J0IFxcXCJyZWZsZWN0LW1ldGFkYXRhXFxcIicgdG8gdGhlIHRvcCBvZiB5b3VyIGVudHJ5IHBvaW50LlwiKTtcbn1cbmV4cG9ydCB7IExpZmVjeWNsZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9kZWNvcmF0b3JzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mYWN0b3JpZXNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Byb3ZpZGVyc1wiO1xuZXhwb3J0IHsgZGVsYXkgfSBmcm9tIFwiLi9sYXp5LWhlbHBlcnNcIjtcbmV4cG9ydCB7IGluc3RhbmNlIGFzIGNvbnRhaW5lciB9IGZyb20gXCIuL2RlcGVuZGVuY3ktY29udGFpbmVyXCI7XG4iLCAiaW1wb3J0IHsgVGlsZSB9IGZyb20gXCIuL3RpbGUuanNcIjtcclxuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCIuL3Jvb20uanNcIjtcclxuaW1wb3J0IHsgc2h1ZmZsZUFycmF5IH0gZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgUm9vbUNyZWF0b3IgfSBmcm9tIFwiLi9Sb29tQ3JlYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBpbmplY3QgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuXHJcbmNvbnN0IERJUkVDVElPTl9PRkZTRVRTID0ge1xyXG4gIG5vcnRoOiB7IHg6IDAsIHk6IDEgfSxcclxuICBlYXN0OiB7IHg6IDEsIHk6IDAgfSxcclxuICBzb3V0aDogeyB4OiAwLCB5OiAtMSB9LFxyXG4gIHdlc3Q6IHsgeDogLTEsIHk6IDAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBNYXplR2VuZXJhdG9yIHtcclxuICBtYXplV2lkdGg7XHJcbiAgbWF6ZUhlaWdodDtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGdyaWQgb2Ygcm9vbXMgdGhhdCBtYWtlIHVwIHRoZSBsZXZlbC5cclxuICAgKiBAdHlwZSB7Um9vbVtdW119XHJcbiAgICovXHJcbiAgbWF6ZTogUm9vbVtdW10gPSBbW11dO1xyXG5cclxuICBwYXR0ZXJuczogeyBbeDogc3RyaW5nXTogYW55IH07XHJcblxyXG4gIGNvbnN0cmFpbnRzOiBhbnk7XHJcbiAgZmFydGhlc3RSb29tOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyBkaXN0YW5jZTogbnVtYmVyIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc2l6ZVg6IG51bWJlcixcclxuICAgIHNpemVZOiBudW1iZXIsXHJcbiAgICB0aWxlU2V0ID0gbnVsbCxcclxuICAgIGV4dHJhY3RlZFBhdHRlcm5zID0gW10sXHJcbiAgICBjb25zdHJhaW50TWFwcGluZ0ZvckFsbEtleVNldHMgPSBudWxsXHJcbiAgKSB7XHJcbiAgICB0aGlzLm1hemVXaWR0aCA9IHNpemVYO1xyXG4gICAgdGhpcy5tYXplSGVpZ2h0ID0gc2l6ZVk7XHJcblxyXG4gICAgdGhpcy5wYXR0ZXJucyA9IGV4dHJhY3RlZFBhdHRlcm5zO1xyXG4gICAgdGhpcy5jb25zdHJhaW50cyA9IGNvbnN0cmFpbnRNYXBwaW5nRm9yQWxsS2V5U2V0cztcclxuICAgIHRoaXMuI2NyZWF0ZUdyaWQoKTtcclxuXHJcbiAgICB0aGlzLmZhcnRoZXN0Um9vbSA9IHsgeDogMCwgeTogMCwgZGlzdGFuY2U6IDAgfTtcclxuICB9XHJcblxyXG4gICNjcmVhdGVHcmlkKCkge1xyXG4gICAgdGhpcy5tYXplID0gbmV3IEFycmF5KHRoaXMubWF6ZVdpZHRoKTtcclxuXHJcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMubWF6ZVdpZHRoOyB4KyspIHtcclxuICAgICAgdGhpcy5tYXplW3hdID0gbmV3IEFycmF5KHRoaXMubWF6ZUhlaWdodCk7XHJcbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5tYXplSGVpZ2h0OyB5KyspIHtcclxuICAgICAgICB0aGlzLm1hemVbeF1beV0gPSBuZXcgUm9vbSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5tYXplO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBhIHJvb20gZnJvbSB0aGUgZ3JpZCBhdCB0aGUgZ2l2ZW4gaW5kaWNlcy5cclxuICAgKiBAcGFyYW0ge251bWJlcn0geCBYLWluZGV4IG9mIHRoZSByb29tXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgWS1pbmRleCBvZiB0aGUgcm9vbVxyXG4gICAqIEByZXR1cm5zIHtSb29tfSBUaGUgcm9vbSBhdCB0aGUgZ2l2ZW4gaW5kaWNlc1xyXG4gICAqL1xyXG4gIGdldFJvb20oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBSb29tIHtcclxuICAgIHJldHVybiB0aGlzLm1hemVbeF1beV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSBwYXR0ZXJuIGF0IHRoZSBnaXZlbiBpbmRleCBmcm9tIHRoZSBsaXN0IG9mIHBhdHRlcm5zLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHBhdHRlcm4gdG8gZ2V0LlxyXG4gICAqIEByZXR1cm5zIHtUaWxlfSBUaGUgcGF0dGVybiBhdCB0aGUgZ2l2ZW4gaW5kZXguXHJcbiAgICovXHJcbiAgZ2V0UGF0dGVybihpbmRleDogbnVtYmVyKTogVGlsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5wYXR0ZXJuc1tpbmRleF07XHJcbiAgfVxyXG5cclxuICBlbmFibGVEb29ycyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBkaXJlY3Rpb246IHN0cmluZykge1xyXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgY2FzZSBcIm5vcnRoXCI6XHJcbiAgICAgICAgdGhpcy5tYXplW3gxXVt5MV0uZG9vcnMubm9ydGggPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWF6ZVt4MV1beTFdLnRhcmdldFJvb21zLm5vcnRoID0geyB4OiB4MiwgeTogeTIgfTtcclxuICAgICAgICB0aGlzLm1hemVbeDJdW3kyXS5kb29ycy5zb3V0aCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tYXplW3gyXVt5Ml0udGFyZ2V0Um9vbXMuc291dGggPSB7IHg6IHgxLCB5OiB5MSB9O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwiZWFzdFwiOlxyXG4gICAgICAgIHRoaXMubWF6ZVt4MV1beTFdLmRvb3JzLmVhc3QgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWF6ZVt4MV1beTFdLnRhcmdldFJvb21zLmVhc3QgPSB7IHg6IHgyLCB5OiB5MiB9O1xyXG4gICAgICAgIHRoaXMubWF6ZVt4Ml1beTJdLmRvb3JzLndlc3QgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubWF6ZVt4Ml1beTJdLnRhcmdldFJvb21zLndlc3QgPSB7IHg6IHgxLCB5OiB5MSB9O1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIFwic291dGhcIjpcclxuICAgICAgICB0aGlzLm1hemVbeDFdW3kxXS5kb29ycy5zb3V0aCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tYXplW3gxXVt5MV0udGFyZ2V0Um9vbXMuc291dGggPSB7IHg6IHgyLCB5OiB5MiB9O1xyXG4gICAgICAgIHRoaXMubWF6ZVt4Ml1beTJdLmRvb3JzLm5vcnRoID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hemVbeDJdW3kyXS50YXJnZXRSb29tcy5ub3J0aCA9IHsgeDogeDEsIHk6IHkxIH07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgXCJ3ZXN0XCI6XHJcbiAgICAgICAgdGhpcy5tYXplW3gxXVt5MV0uZG9vcnMud2VzdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tYXplW3gxXVt5MV0udGFyZ2V0Um9vbXMud2VzdCA9IHsgeDogeDIsIHk6IHkyIH07XHJcbiAgICAgICAgdGhpcy5tYXplW3gyXVt5Ml0uZG9vcnMuZWFzdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tYXplW3gyXVt5Ml0udGFyZ2V0Um9vbXMuZWFzdCA9IHsgeDogeDEsIHk6IHkxIH07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc1ZhbGlkQ29vcmRpbmF0ZXMoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHJldHVybiB4ID49IDAgJiYgeCA8IHRoaXMubWF6ZVdpZHRoICYmIHkgPj0gMCAmJiB5IDwgdGhpcy5tYXplSGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGUoKSB7XHJcbiAgICB0aGlzLiNnZW5lcmF0ZU1hemVSZWN1cnNpdmVseSgwLCAwKTtcclxuICAgIHRoaXMuZ2V0Um9vbSh0aGlzLmZhcnRoZXN0Um9vbS54LCB0aGlzLmZhcnRoZXN0Um9vbS55KS5pc0V4aXQgPSB0cnVlO1xyXG4gICAgdGhpcy5nZXRSb29tKDAsIDApLmlzRW50cmFuY2UgPSB0cnVlO1xyXG4gICAgY29uc29sZS5sb2coYGRpc3RhbmNlOiR7dGhpcy5mYXJ0aGVzdFJvb20uZGlzdGFuY2V9YCk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIEdlbmVyYXRlcyBhIG1hemUgdXNpbmcgdGhlIHJlY3Vyc2l2ZSBiYWNrdHJhY2tpbmcgYWxnb3JpdGhtLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IFN0YXJ0IFggY29vcmRpbmF0ZVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IFN0YXJ0IFkgY29vcmRpbmF0ZVxyXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHZpc2l0ZWRMaXN0IFRoZSBsaXN0IG9mIHZpc2l0ZWQgcm9vbXMsIG9taXQgdG8gc3RhcnQgYSBuZXcgbGlzdC5cclxuICAgKi9cclxuICAjZ2VuZXJhdGVNYXplUmVjdXJzaXZlbHkoeDogbnVtYmVyLCB5OiBudW1iZXIsIHZpc2l0ZWRMaXN0OiBzdHJpbmdbXSA9IFtdLCBkaXN0YW5jZSA9IDApIHtcclxuICAgIGlmICghdmlzaXRlZExpc3QpIHtcclxuICAgICAgdmlzaXRlZExpc3QgPSBbXTtcclxuICAgIH1cclxuICAgIHZpc2l0ZWRMaXN0LnB1c2goYCR7eH0sJHt5fWApO1xyXG5cclxuICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXHJcbiAgICAgIHsgZHg6IC0xLCBkeTogMCwgZGlyZWN0aW9uOiBcIm5vcnRoXCIgfSxcclxuICAgICAgeyBkeDogMSwgZHk6IDAsIGRpcmVjdGlvbjogXCJzb3V0aFwiIH0sXHJcbiAgICAgIHsgZHg6IDAsIGR5OiAtMSwgZGlyZWN0aW9uOiBcIndlc3RcIiB9LFxyXG4gICAgICB7IGR4OiAwLCBkeTogMSwgZGlyZWN0aW9uOiBcImVhc3RcIiB9LFxyXG4gICAgXTtcclxuXHJcbiAgICBzaHVmZmxlQXJyYXkoZGlyZWN0aW9ucyBhcyBbXSk7XHJcblxyXG4gICAgY29uc3QgY3VycmVudFJvb20gPSB0aGlzLmdldFJvb20oeCwgeSk7XHJcbiAgICBjdXJyZW50Um9vbS5kaXN0YW5jZUZyb21FbnRyYW5jZSA9IGRpc3RhbmNlO1xyXG5cclxuICAgIGlmIChkaXN0YW5jZSAlIDEwID09IDApIHtcclxuICAgICAgY3VycmVudFJvb20uaXNUcmVhc3VyZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBkaXIgb2YgZGlyZWN0aW9ucykge1xyXG4gICAgICBpZiAoIWRpcikgY29udGludWU7IC8vIFdlaXJkLCB3ZSBzaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGJ1dCB3ZSBkby5cclxuICAgICAgY29uc3QgbmV3WCA9IHggKyBkaXIuZHg7XHJcbiAgICAgIGNvbnN0IG5ld1kgPSB5ICsgZGlyLmR5O1xyXG5cclxuICAgICAgaWYgKHRoaXMuaXNWYWxpZENvb3JkaW5hdGVzKG5ld1gsIG5ld1kpICYmICF2aXNpdGVkTGlzdC5pbmNsdWRlcyhgJHtuZXdYfSwke25ld1l9YCkpIHtcclxuICAgICAgICB0aGlzLmVuYWJsZURvb3JzKHgsIHksIG5ld1gsIG5ld1ksIGRpci5kaXJlY3Rpb24pO1xyXG5cclxuICAgICAgICBpZiAoZGlzdGFuY2UgPiB0aGlzLmZhcnRoZXN0Um9vbS5kaXN0YW5jZSkge1xyXG4gICAgICAgICAgdGhpcy5mYXJ0aGVzdFJvb20ueCA9IG5ld1g7XHJcbiAgICAgICAgICB0aGlzLmZhcnRoZXN0Um9vbS55ID0gbmV3WTtcclxuICAgICAgICAgIHRoaXMuZmFydGhlc3RSb29tLmRpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiNnZW5lcmF0ZU1hemVSZWN1cnNpdmVseShuZXdYLCBuZXdZLCB2aXNpdGVkTGlzdCwgZGlzdGFuY2UgKyAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCAiLyoqXHJcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgUm9vbSBjbGFzcy5cclxuICovXHJcblxyXG50eXBlIFJvb21EaXJlY3Rpb25zID0ge1xyXG4gIG5vcnRoOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0gfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gIHdlc3Q6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgc291dGg6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgZWFzdDogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9IHwgbnVsbCB8IHVuZGVmaW5lZDtcclxufTtcclxuXHJcbmltcG9ydCB7IGZpbmRDaGFySW5TdHJpbmdBcnJheSB9IGZyb20gXCIuLi9mb3JGcmFtZXdvcmsvZmluZENoYXJJblN0cmluZ0FycmF5LmpzXCI7XHJcbmltcG9ydCB7IERpcmVjdGlvblN5bWJvbCwgUG9zaXRpb24yRCB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBHZW5lcmljSXRlbSB9IGZyb20gXCIuL29iamVjdHMvR2VuZXJpY0l0ZW0uanNcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgUm9vbVRlbXBsYXRlLFxyXG4gIFJvb21UeXBlcyxcclxuICBjaGVzdERlZmluaXRpb24sXHJcbn0gZnJvbSBcIi4vcm9vbVRlbXBsYXRlcy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJvb20ge1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFRoZSByb29tcyBhIGRvb3Igd2lsbCB0YWtlIHlvdSB0b1xyXG4gICAqIEB0eXBlIHtSb29tRGlyZWN0aW9uc31cclxuICAgKi9cclxuICB0YXJnZXRSb29tczogUm9vbURpcmVjdGlvbnM7XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSB0ZW1wbGF0ZSB1c2VkIHRvIGdlbmVyYXRlIHRoaXMgcm9vbVxyXG4gICAqL1xyXG4gICNyb29tVGVtcGxhdGU6IFJvb21UZW1wbGF0ZSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAvKipcclxuICAgKiBEb2VzIHRoaXMgcm9vbSBoYXZlIGEgZG9vciBpbiBlYWNoIGRpcmVjdGlvbj9cclxuICAgKi9cclxuICBkb29yczogeyBub3J0aDogYm9vbGVhbjsgd2VzdDogYm9vbGVhbjsgc291dGg6IGJvb2xlYW47IGVhc3Q6IGJvb2xlYW4gfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSXMgdGhpcyByb29tIHRoZSBleGl0LCB0aGUgZmluYWwgcm9vbSBvZiB0aGUgZ2FtZT9cclxuICAgKi9cclxuICBpc0V4aXQ6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIElzIHRoaXMgcm9vbSB0aGUgZW50cmFuY2UsIHRoZSBmaXJzdCByb29tIG9mIHRoZSBnYW1lP1xyXG4gICAqL1xyXG4gIGlzRW50cmFuY2U6IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gICAqIElzIHRoaXMgcm9vbSBhIHRyZWFzdXJlIHJvb20/XHJcbiAgICovXHJcbiAgaXNUcmVhc3VyZTogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIHNlZWQgdXNlZCB0byBnZW5lcmF0ZSB0aGlzIHJvb21cclxuICAgKi9cclxuICBzZWVkOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZW4gYSByb29tIGlzIHZpc2l0ZWQgZm9yIHRoZSBmaXJzdCB0aW1lLCBpdCBpcyBpbml0aWFsaXplZFxyXG4gICAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgcm9vbSBpcyBwb3B1bGF0ZWQgd2l0aCBpdGVtcywgZW5lbWllcywgZXRjLCBiYXNlZCBvbiB0aGUgY2hvc2VuIHRlbXBsYXRlXHJcbiAgICogVGhpcyBpcyBkb25lIHRvIGF2b2lkIGhhdmluZyB0byBnZW5lcmF0ZSB0aGUgZW50aXJlIGR1bmdlb24gYXQgb25jZSwgd2hpbGUgbWFraW5nXHJcbiAgICogc3VyZSB0aGUgcm9vbSBzdGF5cyB0aGUgc2FtZSB3aGVuIHJldmlzaXRlZFxyXG4gICAqL1xyXG4gIGlzSW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGRpc3RhbmNlIGZyb20gdGhlIGVudHJhbmNlXHJcbiAgICovXHJcbiAgZGlzdGFuY2VGcm9tRW50cmFuY2U6IG51bWJlcjtcclxuXHJcbiAgY2hlc3RzPzogY2hlc3REZWZpbml0aW9uW107XHJcbiAgaXRlbXM/OiBHZW5lcmljSXRlbVtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZG9vcnMgPSB7IG5vcnRoOiBmYWxzZSwgd2VzdDogZmFsc2UsIHNvdXRoOiBmYWxzZSwgZWFzdDogZmFsc2UgfTtcclxuICAgIHRoaXMudGFyZ2V0Um9vbXMgPSB7IG5vcnRoOiBudWxsLCB3ZXN0OiBudWxsLCBzb3V0aDogbnVsbCwgZWFzdDogbnVsbCB9O1xyXG4gICAgdGhpcy5pc0V4aXQgPSBmYWxzZTtcclxuICAgIHRoaXMuaXNFbnRyYW5jZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5pc1RyZWFzdXJlID0gZmFsc2U7XHJcbiAgICB0aGlzLnNlZWQgPSAwO1xyXG4gICAgdGhpcy5kaXN0YW5jZUZyb21FbnRyYW5jZSA9IDA7XHJcbiAgfVxyXG5cclxuICB0b0tleSgpIHtcclxuICAgIGxldCBrZXkgPSBcIlwiO1xyXG4gICAgaWYgKHRoaXMuZG9vcnMubm9ydGgpIGtleSArPSBcIk5cIjtcclxuICAgIGlmICh0aGlzLmRvb3JzLmVhc3QpIGtleSArPSBcIkVcIjtcclxuICAgIGlmICh0aGlzLmRvb3JzLnNvdXRoKSBrZXkgKz0gXCJTXCI7XHJcbiAgICBpZiAodGhpcy5kb29ycy53ZXN0KSBrZXkgKz0gXCJXXCI7XHJcbiAgICByZXR1cm4ga2V5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyB0aGUgcm9vbSBpbiBhIHNwZWNpZmljIGRpcmVjdGlvblxyXG4gICAqIEBwYXJhbSB7RGlyZWN0aW9uU3ltYm9sfHN0cmluZ30gZGlyZWN0aW9uXHJcbiAgICogQHJldHVybnMge3t4Om51bWJlciwgeTpudW1iZXJ9fG51bGx8dW5kZWZpbmVkfSB0aGUgcm9vbSBpbiB0aGF0IGRpcmVjdGlvbjsgbnVsbCBpZiB0aGVyZSBpcyBubyByb29tIGluIHRoYXQgZGlyZWN0aW9uXHJcbiAgICovXHJcbiAgZ2V0VGFyZ2V0Um9vbShkaXJlY3Rpb246IERpcmVjdGlvblN5bWJvbCB8IHN0cmluZyk6IFBvc2l0aW9uMkQgfCBudWxsIHwgdW5kZWZpbmVkIHtcclxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgXCJOXCI6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0Um9vbXMubm9ydGg7XHJcbiAgICAgIGNhc2UgXCJFXCI6XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0Um9vbXMuZWFzdDtcclxuICAgICAgY2FzZSBcIlNcIjpcclxuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRSb29tcy5zb3V0aDtcclxuICAgICAgY2FzZSBcIldcIjpcclxuICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRSb29tcy53ZXN0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Um9vbVR5cGV9IHRoZSB0eXBlIG9mIHRoZSByb29tXHJcbiAgICovXHJcbiAgZ2V0Um9vbVR5cGUoKSB7XHJcbiAgICBpZiAodGhpcy5pc0VudHJhbmNlKSB7XHJcbiAgICAgIHJldHVybiBSb29tVHlwZXMuRW50cmFuY2U7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5pc0V4aXQpIHtcclxuICAgICAgcmV0dXJuIFJvb21UeXBlcy5FeGl0O1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaXNUcmVhc3VyZSkge1xyXG4gICAgICByZXR1cm4gUm9vbVR5cGVzLlRyZWFzdXJlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJvb21UeXBlcy5Ob3JtYWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Um9vbVRlbXBsYXRlfSByb29tVGVtcGxhdGVcclxuICAgKi9cclxuICBzZXRSb29tVGVtcGxhdGUocm9vbVRlbXBsYXRlOiBSb29tVGVtcGxhdGUpIHtcclxuICAgIGlmICh0aGlzLiNyb29tVGVtcGxhdGUgPT09IG51bGwpIHtcclxuICAgICAgdGhpcy4jcm9vbVRlbXBsYXRlID0gcm9vbVRlbXBsYXRlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS53YXJuKFwiUm9vbVRlbXBsYXRlIGFscmVhZHkgc2V0XCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0Um9vbVRlbXBsYXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuI3Jvb21UZW1wbGF0ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgdGhlIGRvb3IgaW4gYSBzcGVjaWZpYyBkaXJlY3Rpb24gZnJvbSB0aGUgdGVtcGxhdGVcclxuICAgKiBAcGFyYW0ge0RpcmVjdGlvblN5bWJvbH0gZGlyZWN0aW9uXHJcbiAgICogQHJldHVybnMge3t4Om51bWJlciwgeTpudW1iZXJ9fXxudWxsfSB0aGUgWC9ZIGNvb3JkaW5hdGVzIG9mIHRoZSBkb29yOyBvciBudWxsIGlmIHRoZXJlIGlzIG5vIGRvb3IgaW4gdGhhdCBkaXJlY3Rpb25cclxuICAgKi9cclxuICBnZXREb29yKGRpcmVjdGlvbjogRGlyZWN0aW9uU3ltYm9sIHwgc3RyaW5nKTogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9IHwgbnVsbCB7XHJcbiAgICAvLyBnZXQgdGhlIGRvb3IgZnJvbSB0aGUgdGVtcGxhdGVcclxuICAgIGlmICh0aGlzLiNyb29tVGVtcGxhdGUgIT09IG51bGwpIHtcclxuICAgICAgbGV0IHJlc3VsdCA9IGZpbmRDaGFySW5TdHJpbmdBcnJheSh0aGlzLiNyb29tVGVtcGxhdGUucGF0dGVybiwgZGlyZWN0aW9uKTtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSh0ZW1wbGF0ZTogUm9vbVRlbXBsYXRlKSB7XHJcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB7XHJcbiAgICAgIC8vIHJvb20gaXMgYWxyZWFkeSBpbml0aWFsaXplZCwgcHJvYmFibHkgYmVjYXVzZSBpdCB3YXMgdmlzaXRlZCBiZWZvcmVcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRSb29tVGVtcGxhdGUodGVtcGxhdGUpO1xyXG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGdldEl0ZW1zQXRQb3NpdGlvbihwb3NpdGlvbjogUG9zaXRpb24yRCk6IEdlbmVyaWNJdGVtW10gfCB1bmRlZmluZWQge1xyXG4gICAgaWYoIXRoaXMuaXNJbml0aWFsaXplZCl7XHJcbiAgICAgIGNvbnNvbGUud2FybihcIlJvb20gaXMgbm90IGluaXRpYWxpemVkLCBidXQgc2hvdWxkIHNpbmNlIHdlIGFyZSB0cnlpbmcgdG8gZ2V0IGl0ZW1zIGZyb20gaXRcIik7XHJcbiAgICAgIHJldHVybjsgXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGl0ZW1zID0gdGhpcy5pdGVtcz8uZmlsdGVyKChpdGVtKSA9PiB7XHJcbiAgICAgIHJldHVybiBpdGVtLnBvc2l0aW9uLnggPT09IHBvc2l0aW9uLnggJiYgaXRlbS5wb3NpdGlvbi55ID09PSBwb3NpdGlvbi55O1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGl0ZW1zO1xyXG4gIH1cclxufVxyXG4iLCAiLyoqXHJcbiAqIEZpbmRzIGEgY2hhcmFjdGVyIGluIGEgc3RyaW5nIGFycmF5IGFuZCByZXR1cm5zIGl0cyBjb29yZGluYXRlc1xyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBncmlkIFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0Q2hhciBcclxuICogQHJldHVybnMge3t4OiBudW1iZXIsIHk6IG51bWJlcn0gfCBudWxsfSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGNoYXJhY3RlciBpbiB0aGUgZ3JpZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDaGFySW5TdHJpbmdBcnJheShncmlkOiBzdHJpbmdbXSwgdGFyZ2V0Q2hhcjogc3RyaW5nKTogeyB4OiBudW1iZXI7IHk6IG51bWJlcjsgfSB8IG51bGwge1xyXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgZ3JpZC5sZW5ndGg7IHkrKykge1xyXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBncmlkW3ldLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgIGlmIChncmlkW3ldW3hdID09PSB0YXJnZXRDaGFyKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJZiB0aGUgY2hhcmFjdGVyIGlzIG5vdCBmb3VuZCwgcmV0dXJuIG51bGxcclxuICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEZpbmRzIGEgY2hhcmFjdGVyIGJhc2VkIG9uIGl0cyBjb29yZGluYXRlc1xyXG4gICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ2hhckluU3RyaW5nQXJyYXlCeVBvcyhncmlkOiBzdHJpbmdbXSwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBzdHJpbmcgfCBudWxsIHtcclxuICBpZiAoeSA8IDAgfHwgeSA+PSBncmlkLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIGlmKHggPCAwIHx8IHggPj0gZ3JpZFt5XS5sZW5ndGgpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGdyaWRbeV1beF07XHJcbn0iLCAiLyoqXHJcbiAqIEBmaWxlIFRoaXMgZmlsZSBjb250YWlucyB0aGUgUm9vbVJlbmRlcmVyIGNsYXNzLlxyXG4gKiBAcmVxdWlyZXMgdHlwZWRlZnMuanNcclxuICovXHJcblxyXG5pbXBvcnQgeyBSb29tVHlwZSB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJvb21UeXBlczogUmVjb3JkPHN0cmluZywgUm9vbVR5cGU+ID0ge1xyXG4gIEVudHJhbmNlOiBcImVudHJhbmNlXCIsXHJcbiAgRXhpdDogXCJleGl0XCIsXHJcbiAgVHJlYXN1cmU6IFwidHJlYXN1cmVcIixcclxuICBOb3JtYWw6IFwibm9ybWFsXCIsXHJcbn07XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJvb21UZW1wbGF0ZSB7XHJcbiAgXHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIHRoZSBuYW1lIG9mIHRoZSByb29tXHJcbiAgICogQHR5cGUge3N0cmluZyB8IHVuZGVmaW5lZH0gbmFtZVxyXG4gICAqL1xyXG4gIG5hbWU6IHN0cmluZztcclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gdGhlIHR5cGUgb2YgdGhlIHJvb21cclxuICAgKiBAdHlwZSB7Um9vbVR5cGUgfCB1bmRlZmluZWR9IHR5cGVcclxuICAgKi9cclxuICB0eXBlOiBSb29tVHlwZTtcclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gdGhlIHBhdHRlcm4gb2YgdGhlIHJvb21cclxuICAgKiBAdHlwZSB7c3RyaW5nW10gfCB1bmRlZmluZWR9IHBhdHRlcm5cclxuICAgKi9cclxuICBwYXR0ZXJuOiBzdHJpbmdbXTtcclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gdGhlIGhlaWdodCBvZiB0aGUgY2VpbGluZyBpbiB0aWxlcywgcmFuZG9tbHkgY2hvc2VuIGZyb20gdGhpcyBhcnJheVxyXG4gICAqIEB0eXBlIHtudW1iZXJbXX0gY2VpbGluZ0hlaWdodFxyXG4gICAqL1xyXG4gIGNlaWxpbmdIZWlnaHQ6IG51bWJlcltdO1xyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiB3aGV0aGVyIG9yIG5vdCB0aGlzIHJvb20gY2FuIGJlIHJvdGF0ZWRcclxuICAgKiBAdHlwZSB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gY2FuQmVSb3RhdGVkXHJcbiAgICovXHJcbiAgY2FuQmVSb3RhdGVkOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgY2hhcmFjdGVycyB0aGF0IGFyZSBzcGF3bmVkIGluIHRoaXMgcm9vbS5cclxuICAgKiBPbiB0aGUgdGVtcGxhdGUgdGhleSBhcmUgcmVwcmVzZW50ZWQgYnkgYSBudW1iZXIgY29ycmVzcG9uZGluZyBcclxuICAgKiB0byB0aGUgaW5kZXggaW4gdGhlIGNoYXJhY3RlcnMgYXJyYXkuXHJcbiAgICovXHJcbiAgY2hhcmFjdGVycz86IHN0cmluZ1tdO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgcHJvcHMgdGhhdCBhcmUgc3Bhd25lZCBpbiB0aGlzIHJvb20uIFxyXG4gICAqIFByb3BzIHdpbGwgYmUgcGxhY2VkIHJhbmRvbSB3aGVyZWV2ZXIgdGhlcmUncyBhIFAgb24gdGhlIHRlbXBsYXRlLiBcclxuICAgKi8gXHJcbiAgcHJvcHM/OiBwcm9wRGVmaW5pdGlvbltdO1xyXG4gIGNoZXN0cz86IGNoZXN0RGVmaW5pdGlvbltdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIHByb3BEZWZpbml0aW9uIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgY2hhbmNlPzogbnVtYmVyO1xyXG4gIGZhY2VXYWxsPzogYm9vbGVhbjtcclxuICBtdXN0QmVBZ2FpbnN0V2FsbD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgY2hlc3REZWZpbml0aW9uIHtcclxuICBjaGFuY2U/OiBudW1iZXI7XHJcbiAgbWF0ZXJpYWw6IFwiSXJvblwifFwiR29sZFwiLFxyXG4gIHNpemU6IFwiTm9uZVwifFwiU21hbGxcInxcIk1lZGl1bVwifFwiTGFyZ2VcIlxyXG4gIHJvdGF0aW9uOiAwfDkwfDE4MHwyNzA7XHJcbiAgbG9vdHRhYmxlPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogVGhlIHJvb20gdGVtcGxhdGVzLiBXaGVuIGEgcm9vbSBvZiBhIGNlcnRhaW4gdHlwZSBpcyBuZWVkZWQsXHJcbiAqIGEgcmFuZG9tIHJvb20gdGVtcGxhdGUgb2YgdGhhdCB0eXBlIGlzIGNob3NlbiBhbmQgaXQgaXMgcm90YXRlZCBpZiBuZWNlc3NhcnkuXHJcbiAqIEB0eXBlIHtSb29tVGVtcGxhdGVbXX1cclxuICovXHJcbmV4cG9ydCBjb25zdCByb29tVGVtcGxhdGVzOiBSb29tVGVtcGxhdGVbXSA9IFtcclxuICB7XHJcbiAgICBuYW1lOiBcImVudHJhbmNlXCIsXHJcbiAgICB0eXBlOiBSb29tVHlwZXMuRW50cmFuY2UsXHJcbiAgICBjZWlsaW5nSGVpZ2h0OiBbNF0sXHJcbiAgICBjYW5CZVJvdGF0ZWQ6IGZhbHNlLFxyXG4gICAgcGF0dGVybjogW1xyXG4gICAgICBcIiAjIyMjI04jIyMjIyBcIixcclxuICAgICAgXCIjUFAuLi4uLi4uUFAjXCIsXHJcbiAgICAgIFwiI1AuLiUuLi4uLiVQI1wiLFxyXG4gICAgICBcIiNQLjEuQy4uLi4uIyBcIixcclxuICAgICAgXCIjLi4uLi4lLi4uLiMjXCIsXHJcbiAgICAgIFwiVy4uLi4uLi4uLi4uRVwiLFxyXG4gICAgICBcIiNQLi4uLi4uLi4uLiNcIixcclxuICAgICAgXCIjUC4uLi4uLi4yLlAjXCIsXHJcbiAgICAgIFwiIyNQLi4uLiUhLlBQI1wiLFxyXG4gICAgICBcIiAgIyMuLi4uUFBQUCNcIixcclxuICAgICAgXCIgICAgI1MjIyMjIyMgXCIsXHJcbiAgICBdLFxyXG4gICAgY2hhcmFjdGVyczogW1xyXG4gICAgICBcIkxpdHRsZUR1ZGVcIixcclxuICAgICAgXCJNYWdpY0R1ZGVcIlxyXG4gICAgXSxcclxuICAgIHByb3BzOltcclxuICAgICAge25hbWU6XCJCYXJyZWxcIn0sXHJcbiAgICAgIHtuYW1lOlwiQmFycmVsQnJva2VuXCIsIGNoYW5jZTowLjR9LFxyXG4gICAgICB7bmFtZTpcIkJlbmNoXCIsZmFjZVdhbGw6dHJ1ZSwgY2hhbmNlOjAuMX0sXHJcbiAgICAgIHtuYW1lOlwiQmFubmVyXCIsZmFjZVdhbGw6dHJ1ZSwgY2hhbmNlOjAuMywgbXVzdEJlQWdhaW5zdFdhbGw6dHJ1ZX0sXHJcbiAgICBdLFxyXG4gICAgY2hlc3RzOltcclxuICAgICAge21hdGVyaWFsOlwiSXJvblwiLCBzaXplOlwiTGFyZ2VcIiwgcm90YXRpb246MjcwfSxcclxuICAgIF1cclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwibm9ybWFsXCIsXHJcbiAgICB0eXBlOiBSb29tVHlwZXMuTm9ybWFsLFxyXG4gICAgY2VpbGluZ0hlaWdodDogWzMsIDRdLFxyXG4gICAgY2FuQmVSb3RhdGVkOiB0cnVlLFxyXG4gICAgcGF0dGVybjogW1xyXG4gICAgICAgIFwiICNOIyAgIFwiLCBcclxuICAgICAgICBcIiAjLi4jIyBcIiwgXHJcbiAgICAgICAgXCIjWC4uLlgjXCIsIFxyXG4gICAgICAgIFwiVy4uJS4uLkVcIiwgXHJcbiAgICAgICAgXCIjLi4uLlgjXCIsIFxyXG4gICAgICAgIFwiICNTIyMjIFwiXSxcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwibm9ybWFsXCIsXHJcbiAgICB0eXBlOiBSb29tVHlwZXMuTm9ybWFsLFxyXG4gICAgY2VpbGluZ0hlaWdodDogWzUsIDhdLFxyXG4gICAgY2FuQmVSb3RhdGVkOiB0cnVlLFxyXG4gICAgcGF0dGVybjogW1xyXG4gICAgICAgIFwiICAgICNOI1wiLCBcclxuICAgICAgICBcIiAgICMuLi4jXCIsIFxyXG4gICAgICAgIFwiICAjLi4uLi4jXCIsIFxyXG4gICAgICAgIFwiICMuLi4uLi4uI1wiLCBcclxuICAgICAgICBcIiMuLi4uLi4uLi4jXCIsIFxyXG4gICAgICAgIFwiVy4uLi4lLi4uLkVcIixcclxuICAgICAgICBcIiMuLi4uLi4uLi4jXCIsXHJcbiAgICAgICAgXCIgIy4uLi4uLi4jXCIsICBcclxuICAgICAgICBcIiAgIy4uLi4uI1wiLCBcclxuICAgICAgICBcIiAgICMuLi4jXCIsIFxyXG4gICAgICAgIFwiICAgICNTI1wiXSxcclxuICAgICAgICBcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwibm9ybWFsXCIsXHJcbiAgICB0eXBlOiBSb29tVHlwZXMuTm9ybWFsLFxyXG4gICAgY2VpbGluZ0hlaWdodDogWzVdLFxyXG4gICAgY2FuQmVSb3RhdGVkOiB0cnVlLFxyXG4gICAgcGF0dGVybjogWyAgICAgICAgXHJcbiAgICAgICAgXCIgIyMjI04jIyMjXCIsIFxyXG4gICAgICAgIFwiIy4uLi4uLi4uLiNcIixcclxuICAgICAgICBcIiMuLi4uLi4uLi4jXCIsXHJcbiAgICAgICAgXCIjLi5QLi4uUC4uI1wiLFxyXG4gICAgICAgIFwiIy4uLi4uLi4uLiNcIixcclxuICAgICAgICBcIlcuLi4uJS4uLi5FXCIsXHJcbiAgICAgICAgXCIjLi4uLi4uLi4uI1wiLFxyXG4gICAgICAgIFwiIy4uUC4uLlAuLiNcIixcclxuICAgICAgICBcIiMuLi4uLi4uLi4jXCIsXHJcbiAgICAgICAgXCIjLi4uLi4uLi4uI1wiLFxyXG4gICAgICAgIFwiICMjIyNTIyMjI1wiXSxcclxuICAgIHByb3BzOltcclxuICAgICAge25hbWU6XCJQaWxsYXJcIn0sXHJcbiAgICBdXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIm5vcm1hbFwiLFxyXG4gICAgdHlwZTogUm9vbVR5cGVzLk5vcm1hbCxcclxuICAgIGNlaWxpbmdIZWlnaHQ6IFszLCA0XSxcclxuICAgIGNhbkJlUm90YXRlZDogdHJ1ZSxcclxuICAgIHBhdHRlcm46IFtcclxuICAgICAgXCIjIyMjIyAgICBcIixcclxuICAgICAgXCIjLlguI04jIyNcIixcclxuICAgICAgXCIjLiUuLi4uLkVcIixcclxuICAgICAgXCIjLi4uLi4uLiNcIixcclxuICAgICAgXCIjLi4uLi4uLiNcIixcclxuICAgICAgXCJXLi4uLi4lLiNcIixcclxuICAgICAgXCIjLi4uLi4uLiNcIixcclxuICAgICAgXCIjUyMjIyMjIyNcIixcclxuICAgIF0sXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIm5vcm1hbFwiLFxyXG4gICAgdHlwZTogUm9vbVR5cGVzLk5vcm1hbCxcclxuICAgIGNlaWxpbmdIZWlnaHQ6IFszLCA0XSxcclxuICAgIGNhbkJlUm90YXRlZDogdHJ1ZSxcclxuICAgIHBhdHRlcm46IFtcclxuICAgICAgXCIjI04jIyMgICAgXCIsXHJcbiAgICAgIFwiIy4uJS4jIyMjI1wiLFxyXG4gICAgICBcIiNYLi4uLi4uLkVcIixcclxuICAgICAgXCIjLi4uLi4uLi4jXCIsXHJcbiAgICAgIFwiICMuLi4jIyMjI1wiLFxyXG4gICAgICBcIiBXLiUuIyBcIixcclxuICAgICAgXCIgIy4uLiMgXCIsXHJcbiAgICAgIFwiICMjUyMjIFwiLFxyXG4gICAgXSxcclxuICB9LHtcclxuICAgIG5hbWU6IFwiRmluYWwgcm9vbVwiLFxyXG4gICAgdHlwZTogUm9vbVR5cGVzLkV4aXQsXHJcbiAgICBjZWlsaW5nSGVpZ2h0OiBbNF0sXHJcbiAgICBjYW5CZVJvdGF0ZWQ6IGZhbHNlLFxyXG4gICAgcGF0dGVybjogW1xyXG4gICAgICBcIiNOIyMjIyMjIyMjXCIsXHJcbiAgICAgIFwiVy4uJS4uLi4uLiNcIixcclxuICAgICAgXCIjLi4uLi4uLi4uI1wiLFxyXG4gICAgICBcIiMuLi4uLi4uLi4jXCIsXHJcbiAgICAgIFwiIy4uJS4uLiUuLiNcIixcclxuICAgICAgXCIjLi4uLi4uLi4uI1wiLFxyXG4gICAgICBcIiMuLi4uLi4uLi4jXCIsXHJcbiAgICAgIFwiIy4uLi4uLiUuLkVcIixcclxuICAgICAgXCIjIyMjIyMjIyNTI1wiLFxyXG4gICAgXSxcclxuICB9LHtcclxuICAgIG5hbWU6IFwiVHJlYXN1cmUgUm9vbVwiLFxyXG4gICAgdHlwZTogUm9vbVR5cGVzLlRyZWFzdXJlLFxyXG4gICAgY2VpbGluZ0hlaWdodDogWzNdLFxyXG4gICAgY2FuQmVSb3RhdGVkOiBmYWxzZSxcclxuICAgIHBhdHRlcm46IFtcclxuICAgICAgXCIjTiMjIyMjIyMjI1wiLFxyXG4gICAgICBcIlcuLiUuLiMuLi4jXCIsXHJcbiAgICAgIFwiIy4uLi4uIy4uLiNcIixcclxuICAgICAgXCIjLi4uLi4jLi4uI1wiLFxyXG4gICAgICBcIiMuLiUuLi4lLi4jXCIsXHJcbiAgICAgIFwiIy4uLiMuLi4uLiNcIixcclxuICAgICAgXCIjLi4uIy4uLi4uI1wiLFxyXG4gICAgICBcIiMuLi4jLi4lLi5FXCIsXHJcbiAgICAgIFwiIyMjIyMjIyMjUyNcIixcclxuICAgIF0sXHJcbiAgfSxcclxuXTtcclxuaW50ZXJmYWNlIFJvb21UZW1wbGF0ZVBhdHRlcm57XHJcbiAgY2FuVGVsZXBvcnRUb1RpbGU6Ym9vbGVhbjtcclxuICBjYW5JbnRlcmFjdFdpdGhUaWxlOmJvb2xlYW47XHJcbiAgYmVoYXZpb3I/OiBcIkRvb3JcInxcIkNoZXN0XCJ8XCJPcmVcIjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJvb21UZW1wbGF0ZVBhdHRlcm5EZWZpbml0aW9uczpSZWNvcmQ8c3RyaW5nLCBSb29tVGVtcGxhdGVQYXR0ZXJuPiA9IHtcclxuICBOOiB7XHJcbiAgICBjYW5UZWxlcG9ydFRvVGlsZTpmYWxzZSxcclxuICAgIGNhbkludGVyYWN0V2l0aFRpbGU6dHJ1ZSxcclxuICAgIGJlaGF2aW9yOiBcIkRvb3JcIixcclxuICAgIC8vIERvb3IgdG8gdGhlIG5vcnRoXHJcbiAgfSxcclxuICBFOiB7XHJcbiAgICBjYW5UZWxlcG9ydFRvVGlsZTpmYWxzZSxcclxuICAgIGNhbkludGVyYWN0V2l0aFRpbGU6dHJ1ZSxcclxuICAgIGJlaGF2aW9yOiBcIkRvb3JcIixcclxuICAgIC8vIERvb3IgdG8gdGhlIGVhc3RcclxuICB9LFxyXG4gIFM6IHtcclxuICAgIGNhblRlbGVwb3J0VG9UaWxlOmZhbHNlLFxyXG4gICAgY2FuSW50ZXJhY3RXaXRoVGlsZTp0cnVlLFxyXG4gICAgYmVoYXZpb3I6IFwiRG9vclwiLFxyXG4gICAgLy8gRG9vciB0byB0aGUgc291dGhcclxuICB9LFxyXG4gIFc6IHtcclxuICAgIGNhblRlbGVwb3J0VG9UaWxlOmZhbHNlLFxyXG4gICAgY2FuSW50ZXJhY3RXaXRoVGlsZTp0cnVlLFxyXG4gICAgYmVoYXZpb3I6IFwiRG9vclwiLFxyXG4gICAgLy8gRG9vciB0byB0aGUgd2VzdFxyXG4gIH0sXHJcbiAgQzoge1xyXG4gICAgY2FuVGVsZXBvcnRUb1RpbGU6ZmFsc2UsXHJcbiAgICBjYW5JbnRlcmFjdFdpdGhUaWxlOmZhbHNlLFxyXG4gICAgLy8gQ2FtcGZpcmUoIG1heCAxIHBlciByb29tKVxyXG4gIH0sXHJcbiAgXCIuXCI6IHtcclxuICAgIC8vIEVtcHR5IHNwYWNlXHJcbiAgICBjYW5UZWxlcG9ydFRvVGlsZTp0cnVlLFxyXG4gICAgY2FuSW50ZXJhY3RXaXRoVGlsZTpmYWxzZSxcclxuICB9LFxyXG4gIFwiI1wiOiB7XHJcbiAgICBjYW5UZWxlcG9ydFRvVGlsZTpmYWxzZSxcclxuICAgIGNhbkludGVyYWN0V2l0aFRpbGU6ZmFsc2UsXHJcbiAgICAvLyBXYWxsXHJcbiAgfSxcclxuICBcIiVcIjoge1xyXG4gICAgY2FuVGVsZXBvcnRUb1RpbGU6dHJ1ZSxcclxuICAgIGNhbkludGVyYWN0V2l0aFRpbGU6ZmFsc2UsXHJcbiAgICAvLyBUb3JjaCAobGlnaHQpXHJcbiAgfSxcclxuICBYOiB7XHJcbiAgICAvLyBFbmVteSBzcGF3biBwb2ludFxyXG4gICAgY2FuVGVsZXBvcnRUb1RpbGU6dHJ1ZSxcclxuICAgIGNhbkludGVyYWN0V2l0aFRpbGU6ZmFsc2UsXHJcbiAgfSxcclxuICBcIiFcIjoge1xyXG4gICAgLy8gQSBjaGVzdCwgZGV0YWlscyBkZWZpbmVkIGluIHRoZSByb29tIGRlZmluaXRpb25cclxuICAgIGNhblRlbGVwb3J0VG9UaWxlOmZhbHNlLFxyXG4gICAgY2FuSW50ZXJhY3RXaXRoVGlsZTp0cnVlLFxyXG4gICAgYmVoYXZpb3I6IFwiQ2hlc3RcIlxyXG4gIH0sXHJcbiAgUDoge1xyXG4gICAgLy8gUHJvcFxyXG4gICAgY2FuVGVsZXBvcnRUb1RpbGU6ZmFsc2UsXHJcbiAgICBjYW5JbnRlcmFjdFdpdGhUaWxlOmZhbHNlLFxyXG4gIH0sXHJcbiAgTzoge1xyXG4gICAgLy8gT3JlXHJcbiAgICBjYW5UZWxlcG9ydFRvVGlsZTpmYWxzZSxcclxuICAgIGNhbkludGVyYWN0V2l0aFRpbGU6dHJ1ZSxcclxuICAgIGJlaGF2aW9yOlwiT3JlXCJcclxuICB9LFxyXG4gIEc6IHtcclxuICAgIGNhblRlbGVwb3J0VG9UaWxlOmZhbHNlLFxyXG4gICAgY2FuSW50ZXJhY3RXaXRoVGlsZTp0cnVlLFxyXG4gICAgLy8gR2VtXHJcbiAgfSxcclxufTtcclxuIiwgImltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG5pbXBvcnQgeyBUaWxlIH0gZnJvbSBcIi4vdGlsZS5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBzZXQgb2YgdGlsZXMgdXNlZCBieSB0aGUgZ2FtZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUaWxlU2V0IHtcclxuXHJcbiAgXHJcbiAgLyoqXHJcbiAgICogVGhlIHNldCBvZiB0aWxlcy5cclxuICAgKiBAdHlwZSB7U2V0PFRpbGU+fVxyXG4gICAqL1xyXG4gICN0aWxlczogU2V0PFRpbGU+O1xyXG5cclxuICAjZW5lbXlPYmplY3RzOiBPYmplY3QzRFtdO1xyXG4gICNjaGFyYWN0ZXJPYmplY3RzOiBPYmplY3QzRFtdO1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBUaWxlU2V0IGNsYXNzLlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0M0RbXX0gdGlsZU9iamVjdHMgVGhlIGxpc3Qgb2YgV29uZGVybGFuZCBvYmplY3RzIHRoYXQgcmVwcmVzZW50IHRoZSB0aWxlcy5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih0aWxlT2JqZWN0czogT2JqZWN0M0RbXSwgZW5lbXlPYmplY3RzOiBPYmplY3QzRFtdLCBjaGFyYWN0ZXJPYmplY3RzOiBPYmplY3QzRFtdKSB7XHJcbiAgICBcclxuICAgIHRoaXMuI2VuZW15T2JqZWN0cyA9IGVuZW15T2JqZWN0cztcclxuICAgIHRoaXMuI2NoYXJhY3Rlck9iamVjdHMgPSBjaGFyYWN0ZXJPYmplY3RzO1xyXG4gICAgXHJcbiAgICB0aGlzLiN0aWxlcyA9IG5ldyBTZXQoKTtcclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGlsZU9iamVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdGhpcy4jdGlsZXMuYWRkKFxyXG4gICAgICAgIG5ldyBUaWxlKHRpbGVPYmplY3RzW2ldLm5hbWUsIHRpbGVPYmplY3RzW2ldLCB0aGlzLiN0aWxlcy5zaXplKVxyXG4gICAgICApOyAgXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSB0aWxlIGF0IHRoZSBnaXZlbiBpbmRleC5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSB0aWxlIHRvIGdldC5cclxuICAgKiBAcmV0dXJucyB7VGlsZX0gVGhlIHRpbGUgYXQgdGhlIGdpdmVuIGluZGV4LlxyXG4gICAqL1xyXG4gIGdldFRpbGUoaW5kZXg6IG51bWJlcik6IFRpbGUge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLiN0aWxlc11baW5kZXhdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IGEgdGlsZSBieSBpdHMgbmFtZS5cclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxyXG4gICAqIEByZXR1cm5zIHtUaWxlfHVuZGVmaW5lZH0gVGhlIHRpbGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cclxuICAgKi9cclxuICBnZXRUaWxlQnlOYW1lKG5hbWU6IHN0cmluZyk6IFRpbGUgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLiN0aWxlc10uZmluZCgoeCkgPT4geC5uYW1lID09IG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2hhcmFjdGVyKGNoYXJhY3Rlck5hbWU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMuI2NoYXJhY3Rlck9iamVjdHMuZmluZCgoeCkgPT4geC5uYW1lID09PSBjaGFyYWN0ZXJOYW1lKTsgXHJcbiAgfVxyXG5cclxuICByZXNldEFsbENoYXJhY3RlcnMoKSB7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy4jY2hhcmFjdGVyT2JqZWN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0aGlzLiNjaGFyYWN0ZXJPYmplY3RzW2ldLnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmluZHMgYW4gb2JqZWN0IGluIHRoZSBnaXZlbiBsaXN0IG9mIG9iamVjdHMgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cclxuICAgKiBAcGFyYW0ge09iamVjdDNEW119IG9iamVjdHMgbGlzdCBvZiBvYmplY3RzIHRvIHNlYWNoIHRocm91Z2hcclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBvYmplY3QgdG8gZmluZFxyXG4gICAqIEByZXR1cm5zIHtPYmplY3QzRHx1bmRlZmluZWR9IHRoZSBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxyXG4gICAqL1xyXG4gICNmaW5kT2JqZWN0KG9iamVjdHM6IE9iamVjdDNEW10sIG5hbWU6IHN0cmluZyk6IE9iamVjdDNEIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiBvYmplY3RzLmZpbmQoKHgpID0+IHgubmFtZSA9PT0gbmFtZSk7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG4vKipcclxuICogQSB0aWxlIGlzIGEgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIGEgbnVtYmVyIGF0IGEgc3BlY2lmaWMgbG9jYXRpb24gaW4gdGhlIGdyaWQuXHJcbiAqIFRoZSBjZWxscyBpbiB0aGUgbWFpbiAzRCBHcmlkIG9mIHRoZSBnYW1lIGFyZSBtYWRlIGZyb20gcGF0dGVycywgZWFjaCBwYXR0ZXJuIGlzIE54TiB0aWxlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRpbGUge1xyXG5cclxuICAvKipcclxuICAgKiBuYW1lIG9mIHRoZSAzZCBvYmplY3RcclxuICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAqL1xyXG4gIG5hbWU6IHN0cmluZztcclxuXHJcbiAgLyoqXHJcbiAgICogcmVmZXJlbmNlIHRvIHRoZSAzRCBvYmplY3RcclxuICAgKiBAdHlwZSB7T2JqZWN0M0R9XHJcbiAgICovXHJcbiAgb2JqZWN0OiBPYmplY3QzRDtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5kZXggaW4gdGhlIHRpbGVzZXRcclxuICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAqL1xyXG4gIGluZGV4OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgb2JqZWN0OiBPYmplY3QzRCB8IHVuZGVmaW5lZCwgaW5kZXg6IG51bWJlcikge1xyXG5cclxuICAgIGlmKCFvYmplY3Qpe1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvYmplY3QgaXMgdW5kZWZpbmVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKCFuYW1lIHx8IG5hbWUubGVuZ3RoID09IDApe1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJuYW1lIHNob3VsZCBub3QgYmUgZW1wdHlcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gIH1cclxuXHJcbn1cclxuIiwgImltcG9ydCB7IHJvdGF0ZVBhdHRlcm4gfSBmcm9tIFwiLi91dGlscy9leHRyYWN0b3IuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXR0ZXJuU2V0IHtcclxuICAjcGF0dGVybnMgPSBuZXcgTWFwKCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiTlwiLCBbXHJcbiAgICAgIFs2LCA2LCAxLCA2LCA2XSxcclxuICAgICAgWzYsIDEsIDEsIDEsIDZdLFxyXG4gICAgICBbNiwgMSwgMSwgMSwgNl0sXHJcbiAgICAgIFs2LCAxLCAxLCAxLCA2XSxcclxuICAgICAgWzYsIDYsIDYsIDYsIDZdLFxyXG4gICAgXSk7XHJcbiAgICB0aGlzLiNwYXR0ZXJucy5zZXQoXCJFXCIsIHJvdGF0ZVBhdHRlcm4odGhpcy4jcGF0dGVybnMuZ2V0KFwiTlwiKSwgNSkpO1xyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiU1wiLCByb3RhdGVQYXR0ZXJuKHRoaXMuI3BhdHRlcm5zLmdldChcIkVcIiksIDUpKTtcclxuICAgIHRoaXMuI3BhdHRlcm5zLnNldChcIldcIiwgcm90YXRlUGF0dGVybih0aGlzLiNwYXR0ZXJucy5nZXQoXCJTXCIpLCA1KSk7XHJcblxyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiTkVcIiwgW1xyXG4gICAgICBbNiwgNiwgMSwgNiwgNl0sXHJcbiAgICAgIFs2LCAxLCAxLCAxLCA2XSxcclxuICAgICAgWzYsIDEsIDEsIDEsIDFdLFxyXG4gICAgICBbNiwgMSwgMSwgMSwgNl0sXHJcbiAgICAgIFs2LCA2LCA2LCA2LCA2XSxcclxuICAgIF0pO1xyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiRVNcIiwgcm90YXRlUGF0dGVybih0aGlzLiNwYXR0ZXJucy5nZXQoXCJORVwiKSwgNSkpO1xyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiU1dcIiwgcm90YXRlUGF0dGVybih0aGlzLiNwYXR0ZXJucy5nZXQoXCJFU1wiKSwgNSkpO1xyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiTldcIiwgcm90YXRlUGF0dGVybih0aGlzLiNwYXR0ZXJucy5nZXQoXCJTV1wiKSwgNSkpO1xyXG5cclxuICAgIHRoaXMuI3BhdHRlcm5zLnNldChcIk5TXCIsIFtcclxuICAgICAgWzYsIDYsIDEsIDYsIDZdLFxyXG4gICAgICBbNiwgMSwgMSwgMSwgNl0sXHJcbiAgICAgIFs2LCAxLCAxLCAxLCA2XSxcclxuICAgICAgWzYsIDEsIDEsIDEsIDZdLFxyXG4gICAgICBbNiwgNiwgMSwgNiwgNl0sXHJcbiAgICBdKTtcclxuICAgIHRoaXMuI3BhdHRlcm5zLnNldChcIkVXXCIsIHJvdGF0ZVBhdHRlcm4odGhpcy4jcGF0dGVybnMuZ2V0KFwiTlNcIiksIDUpKTtcclxuXHJcbiAgICB0aGlzLiNwYXR0ZXJucy5zZXQoXCJORVNcIiwgW1xyXG4gICAgICBbNiwgNiwgMSwgNiwgNl0sXHJcbiAgICAgIFs2LCAxLCAxLCAxLCA2XSxcclxuICAgICAgWzYsIDEsIDEsIDEsIDFdLFxyXG4gICAgICBbNiwgMSwgMSwgMSwgNl0sXHJcbiAgICAgIFs2LCA2LCAxLCA2LCA2XSxcclxuICAgIF0pO1xyXG4gICAgdGhpcy4jcGF0dGVybnMuc2V0KFwiRVNXXCIsIHJvdGF0ZVBhdHRlcm4odGhpcy4jcGF0dGVybnMuZ2V0KFwiTkVTXCIpLCA1KSk7XHJcbiAgICB0aGlzLiNwYXR0ZXJucy5zZXQoXCJOU1dcIiwgcm90YXRlUGF0dGVybih0aGlzLiNwYXR0ZXJucy5nZXQoXCJFU1dcIiksIDUpKTtcclxuICAgIHRoaXMuI3BhdHRlcm5zLnNldChcIk5FV1wiLCByb3RhdGVQYXR0ZXJuKHRoaXMuI3BhdHRlcm5zLmdldChcIk5TV1wiKSwgNSkpO1xyXG5cclxuICAgIHRoaXMuI3BhdHRlcm5zLnNldChcIk5FU1dcIiwgW1xyXG4gICAgICBbNiwgNiwgMSwgNiwgNl0sXHJcbiAgICAgIFs2LCAxLCAxLCAxLCA2XSxcclxuICAgICAgWzEsIDEsIDEsIDEsIDFdLFxyXG4gICAgICBbNiwgMSwgMSwgMSwgNl0sXHJcbiAgICAgIFs2LCA2LCAxLCA2LCA2XSxcclxuICAgIF0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IHRoZSBwYXR0ZXJuIGZvciB0aGUgZ2l2ZW4ga2V5XHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBcclxuICAgKiBAcmV0dXJucyB7bnVtYmVyW11bXX0gdGhlIHBhdHRlcm4gZm9yIHRoZSBnaXZlbiBrZXlcclxuICAgKi9cclxuXHJcbiAgZ2V0KGtleTogc3RyaW5nKTogbnVtYmVyW11bXSB7XHJcbiAgICBpZiAodGhpcy4jcGF0dGVybnMuaGFzKGtleSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuI3BhdHRlcm5zLmdldChrZXkpO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXR0ZXJuU2V0OiBObyBwYXR0ZXJuIGZvciBrZXkgJHtrZXl9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsICIvLyBGdW5jdGlvbiB0byByb3RhdGUgYSBwYXR0ZXJuIDkwIGRlZ3JlZXMgY2xvY2t3aXNlXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVQYXR0ZXJuKHBhdHRlcm46IGFueVtdW10sIHBhdHRlcm5TaXplOiBudW1iZXIpIHtcclxuICBsZXQgcm90YXRlZFBhdHRlcm46YW55W10gPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm5TaXplOyBpKyspIHtcclxuICAgIHJvdGF0ZWRQYXR0ZXJuLnB1c2goW10pO1xyXG4gICAgZm9yIChsZXQgaiA9IHBhdHRlcm5TaXplIC0gMTsgaiA+PSAwOyBqLS0pIHtcclxuICAgICAgcm90YXRlZFBhdHRlcm5baV0ucHVzaChwYXR0ZXJuW2pdW2ldKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJvdGF0ZWRQYXR0ZXJuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhdHRlcm5zMkQoaW5wdXQ6IHN0cmluZyB8IGFueVtdLCBwYXR0ZXJuU2l6ZTogbnVtYmVyKSB7XHJcbiAgY29uc3Qgd2lkdGggPSBpbnB1dFswXS5sZW5ndGg7XHJcbiAgY29uc3QgaGVpZ2h0ID0gaW5wdXQubGVuZ3RoO1xyXG5cclxuICBsZXQgcGF0dGVybnMgPSBuZXcgTWFwKCk7XHJcblxyXG4gIGZvciAobGV0IHkgPSAwOyB5IDw9IGhlaWdodCAtIHBhdHRlcm5TaXplOyB5KyspIHtcclxuICAgIGZvciAobGV0IHggPSAwOyB4IDw9IHdpZHRoIC0gcGF0dGVyblNpemU7IHgrKykge1xyXG4gICAgICBsZXQgYmFzZVBhdHRlcm4gPSBbXTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVyblNpemU7IGkrKykge1xyXG4gICAgICAgIGxldCByb3cgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhdHRlcm5TaXplOyBqKyspIHtcclxuICAgICAgICAgIHJvdy5wdXNoKGlucHV0W3kgKyBpXVt4ICsgal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiYXNlUGF0dGVybi5wdXNoKHJvdyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjdXJyZW50UGF0dGVybj0gYmFzZVBhdHRlcm47XHJcbiAgICAgIC8vIFJvdGF0ZSBhbmQgYWRkIHRoZSBwYXR0ZXJuIHRvIHRoZSBtYXBcclxuICAgICAgLy8gZm9yIChsZXQgciA9IDA7IHIgPCA0OyByKyspIHtcclxuICAgICAgLy8gICAvLyBGb3VyIGNhcmRpbmFsIGRpcmVjdGlvbnNcclxuXHJcbiAgICAgIC8vICAgaWYgKHIgIT09IDApIHtcclxuICAgICAgLy8gICAgIGN1cnJlbnRQYXR0ZXJuID0gcm90YXRlUGF0dGVybihjdXJyZW50UGF0dGVybixwYXR0ZXJuU2l6ZSk7XHJcbiAgICAgIC8vICAgfVxyXG5cclxuICAgICAgbGV0IGtleSA9IEpTT04uc3RyaW5naWZ5KGN1cnJlbnRQYXR0ZXJuKTtcclxuXHJcbiAgICAgICAgaWYgKCFwYXR0ZXJucy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgcGF0dGVybnMuc2V0KGtleSwgeyBwYXR0ZXJuOiBjdXJyZW50UGF0dGVybiwgd2VpZ2h0OiAxIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBsZXQgdmFsdWUgPSBwYXR0ZXJucy5nZXQoa2V5KTtcclxuICAgICAgICAgIHZhbHVlLndlaWdodCArPSAxO1xyXG4gICAgICAgICAgcGF0dGVybnMuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgLy99XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQXJyYXkuZnJvbShwYXR0ZXJucy52YWx1ZXMoKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UGF0dGVybnNXcmFwKGlucHV0OiBzdHJpbmcgfCBhbnlbXSwgcGF0dGVyblNpemU6IG51bWJlcikge1xyXG4gIGNvbnN0IHdpZHRoID0gaW5wdXRbMF0ubGVuZ3RoO1xyXG4gIGNvbnN0IGhlaWdodCA9IGlucHV0Lmxlbmd0aDtcclxuXHJcbiAgbGV0IHBhdHRlcm5zID0gbmV3IE1hcCgpO1xyXG5cclxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodCA7IHkrKykge1xyXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XHJcbiAgICAgIGxldCBiYXNlUGF0dGVybiA9IFtdO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgbGV0IHJvdyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGF0dGVyblNpemU7IGorKykge1xyXG4gICAgICAgICAgcm93LnB1c2goaW5wdXRbKHggKyBpKSUgaGVpZ2h0XVsoeSArIGopJXdpZHRoXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJhc2VQYXR0ZXJuLnB1c2gocm93KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGN1cnJlbnRQYXR0ZXJuPSBiYXNlUGF0dGVybjtcclxuICAgICAgLy8gUm90YXRlIGFuZCBhZGQgdGhlIHBhdHRlcm4gdG8gdGhlIG1hcFxyXG4gICAgICAvLyBmb3IgKGxldCByID0gMDsgciA8IDQ7IHIrKykge1xyXG4gICAgICAvLyAgIC8vIEZvdXIgY2FyZGluYWwgZGlyZWN0aW9uc1xyXG5cclxuICAgICAgLy8gICBpZiAociAhPT0gMCkge1xyXG4gICAgICAvLyAgICAgY3VycmVudFBhdHRlcm4gPSByb3RhdGVQYXR0ZXJuKGN1cnJlbnRQYXR0ZXJuLHBhdHRlcm5TaXplKTtcclxuICAgICAgLy8gICB9XHJcblxyXG4gICAgICAgIGxldCBrZXkgPSBKU09OLnN0cmluZ2lmeShjdXJyZW50UGF0dGVybik7XHJcblxyXG4gICAgICAgIGlmICghcGF0dGVybnMuaGFzKGtleSkpIHtcclxuICAgICAgICAgIHBhdHRlcm5zLnNldChrZXksIHsgcGF0dGVybjogY3VycmVudFBhdHRlcm4sIHdlaWdodDogMSB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbGV0IHZhbHVlID0gcGF0dGVybnMuZ2V0KGtleSk7XHJcbiAgICAgICAgICB2YWx1ZS53ZWlnaHQgKz0gMTtcclxuICAgICAgICAgIHBhdHRlcm5zLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIC8vfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEFycmF5LmZyb20ocGF0dGVybnMudmFsdWVzKCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFBhdHRlcm5zM0QoaW5wdXQ6IHN0cmluZyB8IGFueVtdLCBwYXR0ZXJuU2l6ZTogbnVtYmVyKSB7XHJcbiAgY29uc3Qgd2lkdGggPSBpbnB1dFswXVswXS5sZW5ndGg7XHJcbiAgY29uc3QgaGVpZ2h0ID0gaW5wdXRbMF0ubGVuZ3RoO1xyXG4gIGNvbnN0IGRlcHRoID0gaW5wdXQubGVuZ3RoO1xyXG5cclxuICBsZXQgcGF0dGVybnMgPSBuZXcgTWFwKCk7XHJcblxyXG4gIGZvciAobGV0IHogPSAwOyB6IDw9IGRlcHRoIC0gcGF0dGVyblNpemU7IHorKykge1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPD0gaGVpZ2h0IC0gcGF0dGVyblNpemU7IHkrKykge1xyXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8PSB3aWR0aCAtIHBhdHRlcm5TaXplOyB4KyspIHtcclxuICAgICAgICBsZXQgcGF0dGVybiA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm5TaXplOyBpKyspIHtcclxuICAgICAgICAgIGxldCBsYXllciA9IFtdO1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXR0ZXJuU2l6ZTsgaisrKSB7XHJcbiAgICAgICAgICAgIGxldCByb3cgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwYXR0ZXJuU2l6ZTsgaysrKSB7XHJcbiAgICAgICAgICAgICAgcm93LnB1c2goaW5wdXRbeiArIGldW3kgKyBqXVt4ICsga10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxheWVyLnB1c2gocm93KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHBhdHRlcm4ucHVzaChsYXllcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQga2V5ID0gSlNPTi5zdHJpbmdpZnkocGF0dGVybik7XHJcblxyXG4gICAgICAgIGlmICghcGF0dGVybnMuaGFzKGtleSkpIHtcclxuICAgICAgICAgIHBhdHRlcm5zLnNldChrZXksIHsgcGF0dGVybjogcGF0dGVybiwgY291bnQ6IDEgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGxldCB2YWx1ZSA9IHBhdHRlcm5zLmdldChrZXkpO1xyXG4gICAgICAgICAgdmFsdWUuY291bnQgKz0gMTtcclxuICAgICAgICAgIHBhdHRlcm5zLnNldChrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbnN0cmFpbnRzKHBhdHRlcm5BOiBzdHJpbmcgfCBhbnlbXSwgcGF0dGVybkI6IGFueVtdW10pIHtcclxuICBjb25zdCBzaXplID0gcGF0dGVybkEubGVuZ3RoO1xyXG5cclxuICAvLyBDaGVjayB0b3BcclxuICBsZXQgdG9wTWF0Y2ggPSB0cnVlO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XHJcbiAgICBcclxuICAgIGlmIChwYXR0ZXJuQVtpXVswXSAhPT0gcGF0dGVybkJbaV1bc2l6ZSAtIDFdKSB7XHJcbiAgICAgIHRvcE1hdGNoID0gZmFsc2U7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgYm90dG9tXHJcbiAgbGV0IGJvdHRvbU1hdGNoID0gdHJ1ZTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xyXG4gICAgaWYgKHBhdHRlcm5BW2ldW3NpemUgLSAxXSAhPT0gcGF0dGVybkJbaV1bMF0pIHtcclxuICAgICAgYm90dG9tTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBsZWZ0XHJcbiAgbGV0IGxlZnRNYXRjaCA9IHRydWU7XHJcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcclxuICAgIGlmIChwYXR0ZXJuQVswXVtqXSAhPT0gcGF0dGVybkJbc2l6ZSAtIDFdW2pdKSB7XHJcbiAgICAgIGxlZnRNYXRjaCA9IGZhbHNlO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIENoZWNrIHJpZ2h0XHJcbiAgbGV0IHJpZ2h0TWF0Y2ggPSB0cnVlO1xyXG4gIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XHJcbiAgICBpZiAocGF0dGVybkFbc2l6ZSAtIDFdW2pdICE9PSBwYXR0ZXJuQlswXVtqXSkge1xyXG4gICAgICByaWdodE1hdGNoID0gZmFsc2U7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHsgbm9ydGg6IHRvcE1hdGNoLCBzb3V0aDogYm90dG9tTWF0Y2gsIHdlc3Q6IGxlZnRNYXRjaCwgZWFzdDogcmlnaHRNYXRjaCB9O1xyXG59XHJcblxyXG4vLyBleHBvcnQgZnVuY3Rpb24gYnVpbGRDb25zdHJhaW50c01hcChwYXR0ZXJuczogYW55W10pIHtcclxuLy8gICBjb25zdCBjb25zdHJhaW50c01hcCA9IG5ldyBNYXAoKTtcclxuXHJcbi8vICAgcGF0dGVybnMuZm9yRWFjaCgocGF0dGVybkRhdGFBOiB7IHBhdHRlcm46IGFueTsgfSwga2V5QTogYW55KSA9PiB7XHJcbi8vICAgICBsZXQgY29uc3RyYWludHNPYmplY3RQZXJQYXR0ZXJuRGlyZWN0aW9uV2lzZSA9IHt9O1xyXG5cclxuLy8gICAgIHBhdHRlcm5zLmZvckVhY2goKHBhdHRlcm5EYXRhQjogeyBwYXR0ZXJuOiBhbnk7IH0sIGtleUI6IGFueSkgPT4ge1xyXG4vLyAgICAgICBjb25zdCBjb25zdHJhaW50c0JldHdlZW5QYXR0ZXJucyA9IGNoZWNrQ29uc3RyYWludHMoXHJcbi8vICAgICAgICAgcGF0dGVybkRhdGFBLnBhdHRlcm4sXHJcbi8vICAgICAgICAgcGF0dGVybkRhdGFCLnBhdHRlcm5cclxuLy8gICAgICAgKTtcclxuXHJcbi8vICAgICAgIC8vY2hlY2sgYWxsIGRpcmVjdGlvbiBhbmQgc3RvcmUgYWNjb3JkaW5nbHlcclxuXHJcbi8vICAgICAgIE9iamVjdC5rZXlzKGNvbnN0cmFpbnRzQmV0d2VlblBhdHRlcm5zKS5mb3JFYWNoKChkaXJlY3Rpb24pID0+IHtcclxuLy8gICAgICAgICBpZiAoY29uc3RyYWludHNCZXR3ZWVuUGF0dGVybnNbZGlyZWN0aW9uXSkge1xyXG4vLyAgICAgICAgICAgaWYgKCFjb25zdHJhaW50c09iamVjdFBlclBhdHRlcm5EaXJlY3Rpb25XaXNlW2RpcmVjdGlvbl0pXHJcbi8vICAgICAgICAgICAgIGNvbnN0cmFpbnRzT2JqZWN0UGVyUGF0dGVybkRpcmVjdGlvbldpc2VbZGlyZWN0aW9uXSA9IFtrZXlCXTtcclxuLy8gICAgICAgICAgIGVsc2UgY29uc3RyYWludHNPYmplY3RQZXJQYXR0ZXJuRGlyZWN0aW9uV2lzZVtkaXJlY3Rpb25dLnB1c2goa2V5Qik7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgICB9KTtcclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIGNvbnN0cmFpbnRzTWFwLnNldChrZXlBLCBjb25zdHJhaW50c09iamVjdFBlclBhdHRlcm5EaXJlY3Rpb25XaXNlKTtcclxuLy8gICB9KTtcclxuXHJcbi8vICAgcmV0dXJuIGNvbnN0cmFpbnRzTWFwO1xyXG4vLyB9XHJcbiIsICIvKipcclxuICogQGZpbGUgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBSb29tUmVuZGVyZXIgY2xhc3MuXHJcbiAqIEByZXF1aXJlcyB0eXBlZGVmcy5qc1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IFdvbmRlcmxhbmRFbmdpbmUsIE9iamVjdDNELCBMaWdodENvbXBvbmVudCB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGlcIjtcclxuaW1wb3J0IHsgT2JqZWN0Q2FjaGUsIFRhZ3MsIGNsb25lT2JqZWN0LCBybmdXaXRoV2VpZ2h0IH0gZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgRG9vckhhbmRsZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kb29yLWhhbmRsZXIuanNcIjtcclxuaW1wb3J0IHsgcm5nIH0gZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgcHJvcERlZmluaXRpb24sIHJvb21UZW1wbGF0ZXMgfSBmcm9tIFwiLi9yb29tVGVtcGxhdGVzLmpzXCI7XHJcbmltcG9ydCB7IFRpbGVTZXQgfSBmcm9tIFwiLi90aWxlc2V0LmpzXCI7XHJcbmltcG9ydCB7IFJvb20gfSBmcm9tIFwiLi9yb29tLmpzXCI7XHJcbmltcG9ydCB7IERpcmVjdGlvblN5bWJvbCB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBUaWxlIH0gZnJvbSBcIi4vdGlsZS5qc1wiO1xyXG5pbXBvcnQgeyBmaW5kQ2hhckluU3RyaW5nQXJyYXkgfSBmcm9tIFwiLi4vZm9yRnJhbWV3b3JrL2ZpbmRDaGFySW5TdHJpbmdBcnJheS5qc1wiO1xyXG5pbXBvcnQgeyBjb250YWluZXIgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuaW1wb3J0IHsgUm9vbUNyZWF0b3IgfSBmcm9tIFwiLi9Sb29tQ3JlYXRvci5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBSb29tIFJlbmRlcmVyIGlzIHJlc3BvbnNpYmxlIGZvciByZW5kZXJpbmcgYSByb29tLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJvb21SZW5kZXJlciB7XHJcbiAgLyoqXHJcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIFdvbmRlcmxhbmQgRW5naW5lXHJcbiAgICogQHR5cGUge1dvbmRlcmxhbmRFbmdpbmV9XHJcbiAgICovXHJcbiAgI2VuZ2luZTogV29uZGVybGFuZEVuZ2luZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBvZiBhbGwgb2JqZWN0cyBpbiB0aGUgcm9vbS5cclxuICAgKiBHZW5lcmF0ZWQgb2JqZWN0cyB3aWxsIGJlIGEgY2hpbGQgb2YgdGhpcyBvYmplY3QuXHJcbiAgICogQHR5cGUge09iamVjdDNEfVxyXG4gICAqL1xyXG4gICNwYXJlbnQ6IE9iamVjdDNEO1xyXG5cclxuICAvKipcclxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgdGlsZXNldFxyXG4gICAqIEB0eXBlIHtUaWxlU2V0fVxyXG4gICAqL1xyXG4gICN0aWxlc2V0OiBUaWxlU2V0O1xyXG5cclxuICAvKipcclxuICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgbGlnaHRzIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgcm9vbVxyXG4gICAqIEB0eXBlIHtPYmplY3QzRFtdfVxyXG4gICAqL1xyXG4gICNsaWdodHM6IE9iamVjdDNEW107XHJcblxyXG4gIC8qKlxyXG4gICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBibG9jayBjYWNoZVxyXG4gICAqIEB0eXBlIHtPYmplY3RDYWNoZX1cclxuICAgKi9cclxuICAjYmxvY2tDYWNoZSE6IE9iamVjdENhY2hlO1xyXG4gIHJvb21DcmVhdG9yOiBSb29tQ3JlYXRvcjtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5zdGFudGlhdGVzIGEgbmV3IFJvb21SZW5kZXJlclxyXG4gICAqIEBwYXJhbSB7V29uZGVybGFuZEVuZ2luZX0gZW5naW5lXHJcbiAgICogQHBhcmFtIHtPYmplY3QzRH0gcGFyZW50XHJcbiAgICogQHBhcmFtIHtPYmplY3QzRFtdfSBsaWdodHNcclxuICAgKiBAcGFyYW0ge1RpbGVTZXR9IHRpbGVzZXRcclxuICAgKiBAcGFyYW0ge09iamVjdENhY2hlfSBibG9ja0NhY2hlXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBlbmdpbmU6IFdvbmRlcmxhbmRFbmdpbmUsXHJcbiAgICBwYXJlbnQ6IE9iamVjdDNELFxyXG4gICAgdGlsZXNldDogVGlsZVNldCxcclxuICAgIGxpZ2h0czogT2JqZWN0M0RbXSxcclxuICAgIGJsb2NrQ2FjaGU6IE9iamVjdENhY2hlXHJcbiAgKSB7XHJcbiAgICB0aGlzLnJvb21DcmVhdG9yID0gY29udGFpbmVyLnJlc29sdmUoUm9vbUNyZWF0b3IpLFxyXG4gICAgdGhpcy4jZW5naW5lID0gZW5naW5lO1xyXG4gICAgdGhpcy4jcGFyZW50ID0gcGFyZW50O1xyXG4gICAgdGhpcy4jdGlsZXNldCA9IHRpbGVzZXQ7XHJcbiAgICB0aGlzLiNsaWdodHMgPSBsaWdodHM7XHJcbiAgICB0aGlzLiNibG9ja0NhY2hlID0gYmxvY2tDYWNoZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbmRlcnMgYSByb29tXHJcbiAgICogQHBhcmFtIHtSb29tfSByb29tIFRoZSByb29tIHRvIHJlbmRlclxyXG4gICAqL1xyXG4gIHJlbmRlcihyb29tOiBSb29tKSB7XHJcbiAgICBcclxuXHJcbiAgICBpZighcm9vbS5pc0luaXRpYWxpemVkKXtcclxuICAgIFxyXG4gICAgICBjb25zdCBwb3NzaXRibGVUZW1wbGF0ZSA9IHJvb21UZW1wbGF0ZXMuZmlsdGVyKCh0KSA9PiB0LnR5cGUgPT0gcm9vbS5nZXRSb29tVHlwZSgpKTtcclxuICAgICAgbGV0IG5ld1RlbXBsYXRlID0gcm5nLmdldEl0ZW0ocG9zc2l0YmxlVGVtcGxhdGUpO1xyXG4gICAgICBpZiAoIW5ld1RlbXBsYXRlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyB0ZW1wbGF0ZSBmb3VuZCBmb3Igcm9vbSB0eXBlICR7cm9vbS5nZXRSb29tVHlwZSgpfWApO1xyXG4gICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLnJvb21DcmVhdG9yLnNldFVwUm9vbShyb29tLCBuZXdUZW1wbGF0ZSk7XHJcblxyXG4gICAgICByb29tLmluaXRpYWxpemUobmV3VGVtcGxhdGUpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgdGVtcGxhdGUgPSByb29tLmdldFJvb21UZW1wbGF0ZSgpO1xyXG5cclxuICAgIGxldCByb29tTGlnaHRzID0gW107XHJcblxyXG4gICAgaWYgKCF0ZW1wbGF0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRlbXBsYXRlIGZvdW5kIGZvciByb29tIHR5cGUgJHtyb29tLmdldFJvb21UeXBlKCl9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgcm9vbWRlc2lnbiA9IHRlbXBsYXRlLnBhdHRlcm47XHJcbiAgICBpZiAoIXJvb21kZXNpZ24pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyByb29tIGRlc2lnbiBmb3VuZCBmb3Igcm9vbSB0eXBlICR7cm9vbS5nZXRSb29tVHlwZSgpfWApO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgcm9vbWRlc2lnbi5sZW5ndGg7IHkrKykge1xyXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHJvb21kZXNpZ25beV0ubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICBmb3IgKGxldCBoID0gMDsgaCA8IHRlbXBsYXRlLmNlaWxpbmdIZWlnaHRbMF07IGgrKykge1xyXG4gICAgICAgICAgbGV0IHRpbGU7XHJcbiAgICAgICAgICBzd2l0Y2ggKHJvb21kZXNpZ25beV1beF0pIHtcclxuICAgICAgICAgICAgY2FzZSBcIiNcIjpcclxuICAgICAgICAgICAgICB0aWxlID0gdGhpcy4jdGlsZXNldC5nZXRUaWxlQnlOYW1lKFwiV2FsbDAxXCIpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiJVwiOiAvLyBMaWdodCwgYnV0IGZsb29yIG9yIHdhbGwgaXMgcmVuZGVyZWQgYXMgd2VsbFxyXG4gICAgICAgICAgICAgIGlmIChoID09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgc3RvcmUgbGlnaHQgb25jZVxyXG4gICAgICAgICAgICAgICAgcm9vbUxpZ2h0cy5wdXNoKFt4LCBoLCB5XSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFwiMVwiOiAvLyBDaGFyYWN0ZXIgMVxyXG4gICAgICAgICAgICBjYXNlIFwiMlwiOiAvLyBDaGFyYWN0ZXIgMlxyXG4gICAgICAgICAgICBjYXNlIFwiM1wiOiAvLyBDaGFyYWN0ZXIgM1xyXG4gICAgICAgICAgICBjYXNlIFwiQ1wiOiAvLyBDYW1wZmlyZSwgYnV0IGZsb29yIG9yIHdhbGwgaXMgcmVuZGVyZWQgYXMgd2VsbFxyXG4gICAgICAgICAgICBjYXNlIFwiWFwiOiAvLyBFbWVteSwgYnV0IGZsb29yIG9yIHdhbGwgaXMgcmVuZGVyZWQgYXMgd2VsbFxyXG4gICAgICAgICAgICBjYXNlIFwiUFwiOiAvLyBQcm9wXHJcbiAgICAgICAgICAgIGNhc2UgXCIhXCI6IC8vIENoZXN0XHJcbiAgICAgICAgICAgIGNhc2UgXCIuXCI6XHJcbiAgICAgICAgICAgICAgaWYgKGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShcIkZsb29yMDFcIik7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoID09IHRlbXBsYXRlLmNlaWxpbmdIZWlnaHRbMF0gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aWxlID0gdGhpcy4jdGlsZXNldC5nZXRUaWxlQnlOYW1lKFwiQ2VpbGluZzAxXCIpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJOXCI6XHJcbiAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuI3JlbmRlckZsb29yT3JXYWxsKGgsIHJvb20uZG9vcnMubm9ydGgpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiRVwiOlxyXG4gICAgICAgICAgICAgIHRpbGUgPSB0aGlzLiNyZW5kZXJGbG9vck9yV2FsbChoLCByb29tLmRvb3JzLmVhc3QpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiU1wiOlxyXG4gICAgICAgICAgICAgIHRpbGUgPSB0aGlzLiNyZW5kZXJGbG9vck9yV2FsbChoLCByb29tLmRvb3JzLnNvdXRoKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIldcIjpcclxuICAgICAgICAgICAgICB0aWxlID0gdGhpcy4jcmVuZGVyRmxvb3JPcldhbGwoaCwgcm9vbS5kb29ycy53ZXN0KTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0aWxlKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIGEgdGlsZSBpZiB3ZSBoYXZlIGEgdGlsZS5cclxuICAgICAgICAgICAgbGV0IG5ld09iaiA9IHRoaXMuY3JlYXRlVGlsZSh4LCBoLCB5LCB0aWxlLm9iamVjdCk7XHJcbiAgICAgICAgICAgIGlmICghbmV3T2JqKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBObyBvYmplY3QgZm91bmQgZm9yIHRpbGUgJHt0aWxlLm5hbWV9YCk7XHJcbiAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiNhZGREb29ycyhyb29tLCByb29tZGVzaWduKTtcclxuICAgIHRoaXMuI3NldHVwTGlnaHRzKHJvb21MaWdodHMsIHJvb20pO1xyXG4gICAgdGhpcy4jY3JlYXRlSW50ZXJpb3Iocm9vbSwgcm9vbWRlc2lnbik7XHJcbiAgICB0aGlzLiNhZGRDaGFyYWN0ZXJzKHJvb20sIHJvb21kZXNpZ24pO1xyXG4gIH1cclxuXHJcbiAgI2FkZERvb3JzKHJvb206IFJvb20sIHJvb21kZXNpZ246IHN0cmluZ1tdKSB7XHJcbiAgICBpZiAocm9vbS5kb29ycy5ub3J0aCkge1xyXG4gICAgICBsZXQgZG9vciA9IGZpbmRDaGFySW5TdHJpbmdBcnJheShyb29tZGVzaWduLCBcIk5cIikhO1xyXG4gICAgICBsZXQgdGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShcIkRvb3JcIikhO1xyXG4gICAgICBsZXQgbmV3T2JqID0gdGhpcy5jcmVhdGVUaWxlKGRvb3IueCwgMCwgZG9vci55LCB0aWxlLm9iamVjdCk7XHJcbiAgICAgIG5ld09iai5yb3RhdGVBeGlzQW5nbGVEZWdPYmplY3QoWzAsIDEsIDBdLCAxODApO1xyXG4gICAgICB0aGlzLnNldHVwRG9vcihuZXdPYmosIHJvb20uZ2V0VGFyZ2V0Um9vbShcIk5cIiksIFwiTlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm9vbS5kb29ycy5zb3V0aCkge1xyXG4gICAgICBsZXQgZG9vciA9IGZpbmRDaGFySW5TdHJpbmdBcnJheShyb29tZGVzaWduLCBcIlNcIikhO1xyXG4gICAgICBsZXQgdGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShcIkRvb3JcIikhO1xyXG4gICAgICBsZXQgbmV3T2JqID0gdGhpcy5jcmVhdGVUaWxlKGRvb3IueCwgMCwgZG9vci55LCB0aWxlLm9iamVjdCk7XHJcbiAgICAgIHRoaXMuc2V0dXBEb29yKG5ld09iaiwgcm9vbS5nZXRUYXJnZXRSb29tKFwiU1wiKSwgXCJTXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyb29tLmRvb3JzLmVhc3QpIHtcclxuICAgICAgbGV0IGRvb3IgPSBmaW5kQ2hhckluU3RyaW5nQXJyYXkocm9vbWRlc2lnbiwgXCJFXCIpITtcclxuICAgICAgbGV0IHRpbGUgPSB0aGlzLiN0aWxlc2V0LmdldFRpbGVCeU5hbWUoXCJEb29yXCIpITtcclxuICAgICAgbGV0IG5ld09iaiA9IHRoaXMuY3JlYXRlVGlsZShkb29yLngsIDAsIGRvb3IueSwgdGlsZS5vYmplY3QpO1xyXG4gICAgICBuZXdPYmoucm90YXRlQXhpc0FuZ2xlRGVnT2JqZWN0KFswLCAxLCAwXSwgOTApO1xyXG4gICAgICB0aGlzLnNldHVwRG9vcihuZXdPYmosIHJvb20uZ2V0VGFyZ2V0Um9vbShcIkVcIiksIFwiRVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocm9vbS5kb29ycy53ZXN0KSB7XHJcbiAgICAgIGxldCBkb29yID0gZmluZENoYXJJblN0cmluZ0FycmF5KHJvb21kZXNpZ24sIFwiV1wiKSE7XHJcbiAgICAgIGxldCB0aWxlID0gdGhpcy4jdGlsZXNldC5nZXRUaWxlQnlOYW1lKFwiRG9vclwiKSE7XHJcbiAgICAgIGxldCBuZXdPYmogPSB0aGlzLmNyZWF0ZVRpbGUoZG9vci54LCAwLCBkb29yLnksIHRpbGUub2JqZWN0KTtcclxuICAgICAgbmV3T2JqLnJvdGF0ZUF4aXNBbmdsZURlZ09iamVjdChbMCwgMSwgMF0sIDI3MCk7XHJcbiAgICAgIHRoaXMuc2V0dXBEb29yKG5ld09iaiwgcm9vbS5nZXRUYXJnZXRSb29tKFwiV1wiKSwgXCJXXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgI2FkZENoYXJhY3RlcnMocm9vbTogUm9vbSwgcm9vbWRlc2lnbjogc3RyaW5nW10pIHtcclxuICAgIHRoaXMuI3RpbGVzZXQucmVzZXRBbGxDaGFyYWN0ZXJzKCk7XHJcblxyXG4gICAgY29uc3Qgcm9vbVRlbXBsYXRlID0gcm9vbS5nZXRSb29tVGVtcGxhdGUoKTtcclxuXHJcbiAgICBpZiAoIXJvb21UZW1wbGF0ZSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXCJgTm8gcm9vbSB0ZW1wbGF0ZSBmb3VuZCBmb3IgY3VycmVudCByb29tXCIpO1xyXG4gICAgICByZXR1cm47IC8vIGNhbid0IGRvIGFueXRoaW5nIHdpdGhvdXQgYSB0ZW1wbGF0ZS5cclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXJvb21UZW1wbGF0ZS5jaGFyYWN0ZXJzIHx8IHJvb21UZW1wbGF0ZS5jaGFyYWN0ZXJzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgIHJldHVybjsgLy8gbm8gY2hhcmFjdGVycyB0byBhZGRcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY2hhcmFjdGVyMVBvcyA9IGZpbmRDaGFySW5TdHJpbmdBcnJheShyb29tZGVzaWduLCBcIjFcIik7XHJcbiAgICBpZiAoY2hhcmFjdGVyMVBvcykge1xyXG4gICAgICBjb25zdCBjaGFyYWN0ZXJOYW1lID0gcm9vbVRlbXBsYXRlLmNoYXJhY3RlcnMhWzBdO1xyXG4gICAgICBjb25zdCBjaGFyYWN0ZXIgPSB0aGlzLiN0aWxlc2V0LmdldENoYXJhY3RlcihjaGFyYWN0ZXJOYW1lKTtcclxuICAgICAgY2hhcmFjdGVyPy5zZXRQb3NpdGlvbldvcmxkKFtjaGFyYWN0ZXIxUG9zLngsIDAuNSwgY2hhcmFjdGVyMVBvcy55XSk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNoYXJhY3RlcjJQb3MgPSBmaW5kQ2hhckluU3RyaW5nQXJyYXkocm9vbWRlc2lnbiwgXCIyXCIpO1xyXG4gICAgaWYgKGNoYXJhY3RlcjJQb3MpIHtcclxuICAgICAgY29uc3QgY2hhcmFjdGVyTmFtZSA9IHJvb21UZW1wbGF0ZS5jaGFyYWN0ZXJzIVsxXTtcclxuICAgICAgY29uc3QgY2hhcmFjdGVyID0gdGhpcy4jdGlsZXNldC5nZXRDaGFyYWN0ZXIoY2hhcmFjdGVyTmFtZSk7XHJcbiAgICAgIGNoYXJhY3Rlcj8uc2V0UG9zaXRpb25Xb3JsZChbY2hhcmFjdGVyMlBvcy54LCAwLjUsIGNoYXJhY3RlcjJQb3MueV0pO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjaGFyYWN0ZXIzUG9zID0gZmluZENoYXJJblN0cmluZ0FycmF5KHJvb21kZXNpZ24sIFwiM1wiKTtcclxuICAgIGlmIChjaGFyYWN0ZXIzUG9zKSB7XHJcbiAgICAgIGNvbnN0IGNoYXJhY3Rlck5hbWUgPSByb29tVGVtcGxhdGUuY2hhcmFjdGVycyFbMV07XHJcbiAgICAgIGNvbnN0IGNoYXJhY3RlciA9IHRoaXMuI3RpbGVzZXQuZ2V0Q2hhcmFjdGVyKGNoYXJhY3Rlck5hbWUpO1xyXG4gICAgICBjaGFyYWN0ZXI/LnNldFBvc2l0aW9uV29ybGQoW2NoYXJhY3RlcjNQb3MueCwgMC41LCBjaGFyYWN0ZXIzUG9zLnldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHVwIHRoZSBzY3JpcHRzIGZvciB0aGUgZG9vciwgYWRkaW5nIGEgbmV3IG9uZSBpZiBuZWVkZWQuXHJcbiAgICogQHBhcmFtIHtPYmplY3QzRH0gbmV3T2JqIHRoZSBuZXdseSBjcmVhdGVkIG9iamVjdCAodGhlIGRvb3IpXHJcbiAgICogQHBhcmFtIHsqfSByb29tXHJcbiAgICogQHBhcmFtIHtEaXJlY3Rpb25TeW1ib2x9IGRpcmVjdGlvblxyXG4gICAqL1xyXG4gIHNldHVwRG9vcihuZXdPYmo6IE9iamVjdDNELCByb29tOiBhbnksIGRpcmVjdGlvbjogRGlyZWN0aW9uU3ltYm9sKSB7XHJcbiAgICBsZXQgb2xkQ29tcCA9IG5ld09iai5nZXRDb21wb25lbnQoRG9vckhhbmRsZXIpO1xyXG4gICAgaWYgKG9sZENvbXApIHtcclxuICAgICAgb2xkQ29tcC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICAgIG9sZENvbXAudGFyZ2V0Um9vbVggPSByb29tLng7XHJcbiAgICAgIG9sZENvbXAudGFyZ2V0Um9vbVkgPSByb29tLnk7XHJcbiAgICAgIG9sZENvbXAuYWN0aXZlID0gdHJ1ZTtcclxuICAgIH0gZWxzZVxyXG4gICAgICBuZXdPYmouYWRkQ29tcG9uZW50KERvb3JIYW5kbGVyLCB7XHJcbiAgICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb24sXHJcbiAgICAgICAgdGFyZ2V0Um9vbVg6IHJvb20ueCxcclxuICAgICAgICB0YXJnZXRSb29tWTogcm9vbS55LFxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbmRlcnMgYSBmbG9vciB0aWxlIHdoZW4gdGhlcmUncyBhIGRvb3J3YXkgb3Igd2FsbCBkZXBlbmRpbmcgb24gdGhlIGhlaWdodCBhbmQgaWYgaXQgdGhlcmUncyBhIGRvb3Igb3Igbm90XHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc0Rvb3JcclxuICAgKiBAcmV0dXJucyB7VGlsZX1cclxuICAgKi9cclxuICAjcmVuZGVyRmxvb3JPcldhbGwoaDogbnVtYmVyLCBoYXNEb29yOiBib29sZWFuKTogVGlsZSB8IHVuZGVmaW5lZCB7XHJcbiAgICBpZiAoaCA9PT0gMCkge1xyXG4gICAgICBpZiAoaGFzRG9vcikge1xyXG4gICAgICAgIGNvbnN0IGZsb29yVGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShcIkZsb29yMDFcIik7XHJcbiAgICAgICAgaWYgKCFmbG9vclRpbGUpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGZsb29yIHRpbGUgZm91bmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmbG9vclRpbGU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgd2FsbFRpbGUgPSB0aGlzLiN0aWxlc2V0LmdldFRpbGVCeU5hbWUoXCJXYWxsMDFcIik7XHJcbiAgICAgICAgaWYgKCF3YWxsVGlsZSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gd2FsbCB0aWxlIGZvdW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd2FsbFRpbGU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaCA9PT0gMSkge1xyXG4gICAgICBpZiAoIWhhc0Rvb3IpIHtcclxuICAgICAgICBjb25zdCB3YWxsVGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShcIldhbGwwMVwiKTtcclxuICAgICAgICBpZiAoIXdhbGxUaWxlKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB3YWxsIHRpbGUgZm91bmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3YWxsVGlsZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHdhbGxUaWxlID0gdGhpcy4jdGlsZXNldC5nZXRUaWxlQnlOYW1lKFwiV2FsbDAxXCIpO1xyXG4gICAgICBpZiAoIXdhbGxUaWxlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gd2FsbCB0aWxlIGZvdW5kXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB3YWxsVGlsZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdXAgdGhlIGxpZ2h0cyBpbiBhIHJvb21cclxuICAgKiBAcGFyYW0ge251bWJlcltdW119IHJvb21MaWdodHNcclxuICAgKiBAcGFyYW0geyp9IHJvb21cclxuICAgKi9cclxuXHJcbiAgI3NldHVwTGlnaHRzKHJvb21MaWdodHM6IG51bWJlcltdW10sIHJvb206IGFueSkge1xyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuI2xpZ2h0cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgY29uc3QgbGlnaHQgPSB0aGlzLiNsaWdodHNbaW5kZXhdO1xyXG4gICAgICBsaWdodC5yZXNldFBvc2l0aW9uUm90YXRpb24oKTtcclxuICAgICAgaWYgKHJvb21MaWdodHNbaW5kZXhdKSB7XHJcbiAgICAgICAgbGlnaHQuZ2V0Q29tcG9uZW50KExpZ2h0Q29tcG9uZW50KSEuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICBsaWdodC5zZXRQb3NpdGlvbldvcmxkKFtyb29tTGlnaHRzW2luZGV4XVswXSwgMiwgcm9vbUxpZ2h0c1tpbmRleF1bMl1dKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsaWdodC5nZXRDb21wb25lbnQoTGlnaHRDb21wb25lbnQpIS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy4jbGlnaHRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgaW50ZXJpb3Igb2YgYSByb29tXHJcbiAgICogQHBhcmFtIHtSb29tfSByb29tXHJcbiAgICogQHBhcmFtIHsqfSByb29tZGVzaWduXHJcbiAgICovXHJcbiAgI2NyZWF0ZUludGVyaW9yKHJvb206IFJvb20sIHJvb21kZXNpZ246IGFueSkge1xyXG4gICAgY29uc3Qgcm9vbVJORyA9IHJuZy5jbG9uZSgpLnNldFNlZWQoMSk7IC8vcm9vbS5zZWVkKTtcclxuXHJcbiAgICBsZXQgaGFzRmlyZXBpdCA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgcm9vbWRlc2lnbi5sZW5ndGg7IHkrKykge1xyXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHJvb21kZXNpZ25beV0ubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICBsZXQgdGlsZTtcclxuICAgICAgICBsZXQgcm90YXRpb24gPSAwO1xyXG4gICAgICAgIHN3aXRjaCAocm9vbWRlc2lnblt5XVt4XSkge1xyXG4gICAgICAgICAgY2FzZSBcIlBcIjogLy8gcHJvcFxyXG4gICAgICAgICAgICAvLyB0b2RvOiB1c2Ugd2VpZ2h0ZWQgcmFuZG9tXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gcm9vbS5nZXRSb29tVGVtcGxhdGUoKSEucHJvcHM7XHJcbiAgICAgICAgICAgIGlmICghcHJvcHMpIHtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwcm9wQ2hhbmNlcyA9IHByb3BzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCBwKSA9PiB7XHJcbiAgICAgICAgICAgICAgYWNjW3AubmFtZV0gPSBwLmNoYW5jZSA/PyAxO1xyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgbGV0IHByb3BuYW1lID0gcm9vbVJORy5nZXRXZWlnaHRlZFZhbHVlKHByb3BDaGFuY2VzKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzLmZpbmQoKHApID0+IHAubmFtZSA9PT0gcHJvcG5hbWUpITtcclxuICAgICAgICAgICAgdGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShwcm9wLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHByb3AubXVzdEJlQWdhaW5zdFdhbGwpIHtcclxuICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICByb29tZGVzaWduW3kgLSAxXVt4XSAhPT0gXCIjXCIgJiZcclxuICAgICAgICAgICAgICAgIHJvb21kZXNpZ25beSArIDFdW3hdICE9PSBcIiNcIiAmJlxyXG4gICAgICAgICAgICAgICAgcm9vbWRlc2lnblt5XVt4IC0gMV0gIT09IFwiI1wiICYmXHJcbiAgICAgICAgICAgICAgICByb29tZGVzaWduW3ldW3ggKyAxXSAhPT0gXCIjXCJcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBub3QgbmV4dCB0byBhIHdhbGwsIHNraXAgdGhlIHByb3AuXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcC5mYWNlV2FsbCkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXHJcbiAgICAgICAgICAgICAgICB7IHg6IDAsIHk6IC0xLCByb3RhdGlvbjogMTgwIH0sXHJcbiAgICAgICAgICAgICAgICB7IHg6IDEsIHk6IDAsIHJvdGF0aW9uOiA5MCB9LFxyXG4gICAgICAgICAgICAgICAgeyB4OiAtMSwgeTogMCwgcm90YXRpb246IDI3MCB9LFxyXG4gICAgICAgICAgICAgICAgeyB4OiAwLCB5OiAxLCByb3RhdGlvbjogMCB9LFxyXG4gICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgbGV0IHBvc3NpYmxlUm90YXRpb25zID0gW107XHJcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBkaXIgb2YgZGlyZWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvb21kZXNpZ25beSArIGRpci55XVt4ICsgZGlyLnhdID09PSBcIiNcIikge1xyXG4gICAgICAgICAgICAgICAgICBwb3NzaWJsZVJvdGF0aW9ucy5wdXNoKGRpcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmIChwb3NzaWJsZVJvdGF0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHJvb21STkcuZ2V0SXRlbShwb3NzaWJsZVJvdGF0aW9ucykucm90YXRpb247XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSBcIkNcIjogLy8gQ2FtcGZpcmUgL0ZpcmVwaXRcclxuICAgICAgICAgICAgaWYgKCFoYXNGaXJlcGl0KSB7XHJcbiAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShcIkZpcmVwaXRcIik7XHJcbiAgICAgICAgICAgICAgaGFzRmlyZXBpdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlIFwiIVwiOlxyXG4gICAgICAgICAgICBjb25zdCBjaGVzdHMgPSByb29tLmdldFJvb21UZW1wbGF0ZSgpIS5jaGVzdHM7XHJcbiAgICAgICAgICAgIGlmICghY2hlc3RzKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gY2hlc3RzIGluIHJvb20gdGVtcGxhdGUsIGJ1dCB0aGVyZSdzIGEgY2hlc3QgaW4gdGhlIHJvb20gZGVzaWduLlwiKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjaGVzdENoYW5jZXMgPSBjaGVzdHMucmVkdWNlKChhY2M6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4sIHApID0+IHtcclxuICAgICAgICAgICAgICBhY2NbYENoZXN0XyR7cC5tYXRlcmlhbH1fJHtwLnNpemV9YF0gPSBwLmNoYW5jZSA/PyAxO1xyXG4gICAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgbGV0IGNoZXN0bmFtZSA9IHJvb21STkcuZ2V0V2VpZ2h0ZWRWYWx1ZShjaGVzdENoYW5jZXMpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY2hlc3QgPSBjaGVzdHMuZmluZChcclxuICAgICAgICAgICAgICAoYykgPT4gYy5tYXRlcmlhbCA9PT0gY2hlc3RuYW1lIS5zcGxpdChcIl9cIilbMV0gJiYgYy5zaXplID09PSBjaGVzdG5hbWUhLnNwbGl0KFwiX1wiKVsyXVxyXG4gICAgICAgICAgICApITtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGFkZCBzb21ldGhpbmcgdG8gYWRkIGxvb3QgdG8gdGhlIGNoZXN0LlxyXG5cclxuICAgICAgICAgICAgdGlsZSA9IHRoaXMuI3RpbGVzZXQuZ2V0VGlsZUJ5TmFtZShjaGVzdG5hbWUhKTtcclxuICAgICAgICAgICAgcm90YXRpb24gPSBjaGVzdC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRpbGUpIHtcclxuICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIGEgdGlsZSBpZiB3ZSBoYXZlIGEgdGlsZS5cclxuICAgICAgICAgIGxldCBuZXdPYmogPSB0aGlzLmNyZWF0ZVRpbGUoeCwgMCwgeSwgdGlsZS5vYmplY3QpO1xyXG4gICAgICAgICAgbmV3T2JqLnJvdGF0ZUF4aXNBbmdsZURlZ09iamVjdChbMCwgMSwgMF0sIHJvdGF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHsqfSB4XHJcbiAgICogQHBhcmFtIHsqfSB5XHJcbiAgICogQHBhcmFtIHsqfSB6XHJcbiAgICogQHBhcmFtIHsqfSB0aWxlXHJcbiAgICogQHJldHVybnMgT2JqZWN0M0RcclxuICAgKi9cclxuICBjcmVhdGVUaWxlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHRpbGU6IE9iamVjdDNEKSB7XHJcbiAgICBsZXQgYmxvY2tPYmogPSB0aWxlO1xyXG4gICAgbGV0IG9iaiA9IGNsb25lT2JqZWN0KHRoaXMuI2VuZ2luZSwgYmxvY2tPYmosIHRoaXMuI2Jsb2NrQ2FjaGUpO1xyXG4gICAgaWYgKCFvYmopIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2xvbmluZyBvYmplY3QgZmFpbGVkXCIpO1xyXG4gICAgfVxyXG4gICAgb2JqLnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xyXG4gICAgb2JqLnNldFBvc2l0aW9uV29ybGQoW3gsIHksIHpdKTtcclxuICAgIHJldHVybiBvYmo7XHJcbiAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBpbmplY3QsIHNpbmdsZXRvbiB9IGZyb20gXCJ0c3lyaW5nZVwiO1xyXG5pbXBvcnQgeyBSb29tSXRlbUNyZWF0b3IgfSBmcm9tIFwiLi9yb29tSXRlbUNyZWF0b3IuanNcIjtcclxuaW1wb3J0IHsgUm9vbSB9IGZyb20gXCIuL3Jvb20uanNcIjtcclxuaW1wb3J0IHsgUm9vbVRlbXBsYXRlIH0gZnJvbSBcIi4vcm9vbVRlbXBsYXRlcy5qc1wiO1xyXG5cclxuQHNpbmdsZXRvbigpXHJcbmV4cG9ydCBjbGFzcyBSb29tQ3JlYXRvcntcclxuICAgIFxyXG4gICAgY29uc3RydWN0b3IoQGluamVjdChSb29tSXRlbUNyZWF0b3IpIHByaXZhdGUgcm9vbUl0ZW1DcmVhdG9yOiBSb29tSXRlbUNyZWF0b3Ipe1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzZXRVcFJvb20ocm9vbTpSb29tLCB0ZW1wbGF0ZTpSb29tVGVtcGxhdGUpOmJvb2xlYW57XHJcbiAgICAgICAgcm9vbS5pbml0aWFsaXplKHRlbXBsYXRlKVxyXG4gICAgICAgIHJvb20uaXRlbXMgPSB0aGlzLnJvb21JdGVtQ3JlYXRvci5jcmVhdGVJdGVtcyh0ZW1wbGF0ZSxyb29tKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBSb29tVGVtcGxhdGUsIFJvb21UZW1wbGF0ZVBhdHRlcm5EZWZpbml0aW9ucywgY2hlc3REZWZpbml0aW9uIH0gZnJvbSBcIi4vcm9vbVRlbXBsYXRlcy5qc1wiO1xyXG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIi4vcm9vbS5qc1wiO1xyXG5pbXBvcnQgeyBEaXJlY3Rpb25TeW1ib2wgfSBmcm9tIFwiLi4vdHlwZXMvc2ltcGxlVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgRG9vciB9IGZyb20gXCIuL29iamVjdHMvZG9vci5qc1wiO1xyXG5pbXBvcnQgeyBHZW5lcmljSXRlbSB9IGZyb20gXCIuL29iamVjdHMvR2VuZXJpY0l0ZW0uanNcIjtcclxuXHJcbmltcG9ydCB7IGluamVjdCwgc2luZ2xldG9uIH0gZnJvbSBcInRzeXJpbmdlXCI7XHJcbmltcG9ydCB7IENoZXN0Q3JlYXRvciB9IGZyb20gXCIuL0NoZXN0Q3JlYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBybmcgfSAgZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgc2hvd0ludmVudG9yeSB9IGZyb20gXCIuL29iamVjdHMvYmVoYXZpb3JzL3Nob3dJbnZlbnRvcnkuanNcIjtcclxuXHJcbkBzaW5nbGV0b24oKVxyXG5leHBvcnQgY2xhc3MgUm9vbUl0ZW1DcmVhdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAaW5qZWN0KENoZXN0Q3JlYXRvcikgcHJpdmF0ZSBjaGVzdENyZWF0b3I6IENoZXN0Q3JlYXRvcil7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlSXRlbXModGVtcGxhdGU6Um9vbVRlbXBsYXRlLCByb29tOlJvb20pOkdlbmVyaWNJdGVtW117XHJcbiAgICAgICAgbGV0IGl0ZW1zOkdlbmVyaWNJdGVtW10gPSBbXTtcclxuICAgICAgICBjb25zdCBjdXJyZW50Um5nID0gcm5nLmNsb25lKCkuc2V0U2VlZChyb29tLnNlZWQpO1xyXG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGVtcGxhdGUucGF0dGVybi5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRlbXBsYXRlLnBhdHRlcm5beV0ubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICBpZiAoUm9vbVRlbXBsYXRlUGF0dGVybkRlZmluaXRpb25zW3RlbXBsYXRlLnBhdHRlcm5beV1beF1dPy5iZWhhdmlvcikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ZW1wbGF0ZS5wYXR0ZXJuW3ldW3hdKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJOXCI6XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJTXCI6XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJFXCI6XHJcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJXXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRpcmVjdGlvbiA9IHRlbXBsYXRlLnBhdHRlcm5beV1beF0gYXMgRGlyZWN0aW9uU3ltYm9sO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSByb29tLmdldFRhcmdldFJvb20oZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KXtcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0xvY2FsID0gbmV3IERvb3IoZGlyZWN0aW9uLCB0YXJnZXQsIHsgeDogeCwgeTogeSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3TG9jYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgY2FzZSBcIiFcIjogLy9jaGVzdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0ZW1wbGF0ZS5jaGVzdHMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gY2hlc3QgZGVmaW5pdGlvbiBmb3VuZCBmb3Igcm9vbSB0ZW1wbGF0ZSwgYnV0IGEgY2hlc3Qgd2FzIGZvdW5kIGluIHRoZSBwYXR0ZXJuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoZXN0ID0gY3VycmVudFJuZy5nZXRJdGVtKHRlbXBsYXRlLmNoZXN0cykgYXMgY2hlc3REZWZpbml0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGVzdEl0ZW0gPSB0aGlzLmNoZXN0Q3JlYXRvci5jcmVhdGVDaGVzdCh7IHg6IHgsIHk6IHkgfSwgY2hlc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNoZXN0SXRlbS5hZGRCZWhhdmlvcihzaG93SW52ZW50b3J5KTtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGNoZXN0SXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IFR1cm5CYXNlZEVudGl0eSB9IGZyb20gXCIuLi8uLi9jbGFzc2VzL2Jhc2UvdHVybmJhc2VkLmpzXCI7XHJcblxyXG5pbnRlcmZhY2UgQmVoYXZpb3Ige1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbiAgaW5pdGlhbGl6ZT86ICgpID0+IHZvaWQ7XHJcbiAgW2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGlzIHRoZSBiYXNlIG9mIGFsbCBiZWhhdmlvcnMuXHJcbiAqIFRoZSBpZGVhIGlzIHRoYXQgYWxsIGJlaGF2aW9ycyBoYXZlIGEgY29tbW9uIGJhc2UgY2xhc3MsXHJcbiAqIHNvIHRoYXQgdGhleSBjYW4gYmUgc3RvcmVkIGluIGEgbGlzdCBhbmQgaXRlcmF0ZWQgb3Zlci5cclxuICogRXZlcnkgb2JqZWN0LCBlbmVteSwgd2VhcG9uLCBldGMuIGNhbiBoYXZlIGEgbGlzdCBvZiBiZWhhdmlvcnMuXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmVoYXZpb3JCYXNlIHtcclxuICBba2V5OiBzdHJpbmddOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgX2JlaGF2aW9ySGFuZGxlcnM6IHsgW2hhbmRsZXJOYW1lOiBzdHJpbmddOiBBcnJheTwoLi4uYXJnczogYW55W10pID0+IGFueT4gfSA9IHt9O1xyXG4gIHByaXZhdGUgX2JlaGF2aW9yczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICBhZGRCZWhhdmlvckhhbmRsZXIoaGFuZGxlck5hbWU6IHN0cmluZywgaGFuZGxlcjogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkpOiB2b2lkIHtcclxuICAgIGlmICghdGhpcy5fYmVoYXZpb3JIYW5kbGVyc1toYW5kbGVyTmFtZV0pIHtcclxuICAgICAgdGhpcy5fYmVoYXZpb3JIYW5kbGVyc1toYW5kbGVyTmFtZV0gPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9iZWhhdmlvckhhbmRsZXJzW2hhbmRsZXJOYW1lXS5wdXNoKGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgZXhlY3V0ZUJlaGF2aW9yKGhhbmRsZXJOYW1lOiBzdHJpbmcsIHJldDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XHJcbiAgICBpZiAodGhpcy5fYmVoYXZpb3JIYW5kbGVycyAmJiB0aGlzLl9iZWhhdmlvckhhbmRsZXJzW2hhbmRsZXJOYW1lXSkge1xyXG4gICAgICB0aGlzLl9iZWhhdmlvckhhbmRsZXJzW2hhbmRsZXJOYW1lXS5mb3JFYWNoKChoYW5kbGVyKSA9PiB7XHJcbiAgICAgICAgYXJncyA9IFtyZXQsIC4uLmFyZ3NdO1xyXG4gICAgICAgIHJldCA9IGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIHdyYXBGdW5jdGlvbihoYW5kbGVyTmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuX2JlaGF2aW9ySGFuZGxlcnMgfHwgIXRoaXMuX2JlaGF2aW9ySGFuZGxlcnNbaGFuZGxlck5hbWVdKSB7XHJcbiAgICAgIGNvbnN0IG9yaWdpbmFsRnVuY3Rpb24gPSB0aGlzW2hhbmRsZXJOYW1lXTtcclxuICAgICAgXHJcbiAgICAgIC8vIE1ha2Ugc3VyZSB0byBhbm5vdGF0ZSB0aGUgd3JhcHBlZCBmdW5jdGlvbiBjb3JyZWN0bHlcclxuICAgICAgdGhpc1toYW5kbGVyTmFtZV0gPSAoLi4uYXJnczogYW55W10pID0+IHtcclxuICAgICAgICBjb25zdCByZXQgPSBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGVCZWhhdmlvcihoYW5kbGVyTmFtZSwgcmV0LCAuLi5hcmdzKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZEJlaGF2aW9yKHRlbXBsYXRlOiBCZWhhdmlvcik6IEJlaGF2aW9yQmFzZSB7XHJcbiAgICBjb25zdCBiZWhhdmlvckNsb25lID0geyAuLi50ZW1wbGF0ZSB9O1xyXG5cclxuICAgIGNvbnN0IG5hbWUgPSBiZWhhdmlvckNsb25lLm5hbWU7XHJcblxyXG4gICAgZGVsZXRlIGJlaGF2aW9yQ2xvbmUubmFtZTtcclxuXHJcbiAgICBiZWhhdmlvckNsb25lLmluaXRpYWxpemUhLmFwcGx5KHRoaXMpO1xyXG5cclxuICAgIGRlbGV0ZSBiZWhhdmlvckNsb25lLmluaXRpYWxpemU7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoYmVoYXZpb3JDbG9uZSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIHRoaXMud3JhcEZ1bmN0aW9uKGtleSk7XHJcbiAgICAgIHRoaXMuYWRkQmVoYXZpb3JIYW5kbGVyKGtleSwgYmVoYXZpb3JDbG9uZVtrZXldKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2JlaGF2aW9ycy5wdXNoKG5hbWUhKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi9pdGVtLmpzXCI7XHJcbmltcG9ydCB7IEJlaGF2aW9yQmFzZSB9IGZyb20gXCIuL2JlaGF2aW9yQmFzZS5qc1wiO1xyXG5pbXBvcnQgeyBQb3NpdGlvbjJEIH0gZnJvbSBcIi4uLy4uL3R5cGVzL3Bvc2l0aW9uLmpzXCI7XHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG5cclxudHlwZSBSYXJpdHkgPSBcImNvbW1vblwiIHwgXCJyYXJlXCIgfCBcImVwaWNcIiB8IFwibGVnZW5kYXJ5XCI7XHJcbnR5cGUgSXRlbVR5cGUgPSBcIndlYXBvblwiIHwgXCJjb250YWluZXJcIiB8IFwiaXRlbVwiIHwgXCJzaGllbGRcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHZW5lcmljSXRlbSBleHRlbmRzIEJlaGF2aW9yQmFzZSBpbXBsZW1lbnRzIEl0ZW0ge1xyXG4gICBcclxuICBpZDogbnVtYmVyO1xyXG4gIG5hbWU6IHN0cmluZzsgIFxyXG4gIGFjdGl2ZTogYm9vbGVhbjtcclxuICB0eXBlOiBJdGVtVHlwZTsgIFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgcmFyaXR5OiBSYXJpdHk7XHJcbiAgcG9zaXRpb246UG9zaXRpb24yRCA9IHt4OjAsIHk6MH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJhcml0eTpSYXJpdHk9XCJjb21tb25cIiwgcG9zaXRpb246UG9zaXRpb24yRD17eDowLCB5OjB9KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5pZCA9ICtuZXcgRGF0ZSgpO1xyXG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgIHRoaXMudHlwZSA9IFwiaXRlbVwiOyAgICBcclxuICAgIHRoaXMubmFtZSA9IFwiTmFtZWxlc3MgSXRlbVwiO1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiaXQgaXMgbm90aGluZyBzcGVjaWFsXCI7XHJcbiAgICB0aGlzLnJhcml0eSA9IHJhcml0eTtcclxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICB9XHJcblxyXG4gIGRhbWFnZSgpOm51bWJlciB7IHJldHVybiAwIH1cclxuXHJcbiAgcHJvdGVjdGlvbigpOm51bWJlciB7IHJldHVybiAwO31cclxuXHJcbiAgcmFuZ2UoKTpudW1iZXIge3JldHVybiAwO31cclxuXHJcbiAgaW50ZXJhY3Qob2JqOk9iamVjdDNELCB4Om51bWJlciwgeTpudW1iZXIsIHo6bnVtYmVyKSB7fVxyXG5cclxuICBhdHRhY2soKXt9XHJcblxyXG4gIHR1cm4oKSB7fVxyXG5cclxuICBlcXVpcCgpIHt9XHJcblxyXG4gIHVuZXF1aXAoKSB7fVxyXG5cclxuICByZWZyZXNoKCkge31cclxuXHJcbiAgb3ZlcigpOmJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVVST8oKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbn1cclxuIiwgIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXG5cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xuICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xufVxuXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XG4gIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XG4gICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG4gICAgICB9XG4gICAgICByZXR1cm4gdDtcbiAgfVxuICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgdFtwXSA9IHNbcF07XG4gIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgfVxuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19lc0RlY29yYXRlKGN0b3IsIGRlc2NyaXB0b3JJbiwgZGVjb3JhdG9ycywgY29udGV4dEluLCBpbml0aWFsaXplcnMsIGV4dHJhSW5pdGlhbGl6ZXJzKSB7XG4gIGZ1bmN0aW9uIGFjY2VwdChmKSB7IGlmIChmICE9PSB2b2lkIDAgJiYgdHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZ1bmN0aW9uIGV4cGVjdGVkXCIpOyByZXR1cm4gZjsgfVxuICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xuICB2YXIgdGFyZ2V0ID0gIWRlc2NyaXB0b3JJbiAmJiBjdG9yID8gY29udGV4dEluW1wic3RhdGljXCJdID8gY3RvciA6IGN0b3IucHJvdG90eXBlIDogbnVsbDtcbiAgdmFyIGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9ySW4gfHwgKHRhcmdldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSkgOiB7fSk7XG4gIHZhciBfLCBkb25lID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbi5hY2Nlc3MpIGNvbnRleHQuYWNjZXNzW3BdID0gY29udGV4dEluLmFjY2Vzc1twXTtcbiAgICAgIGNvbnRleHQuYWRkSW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoZikgeyBpZiAoZG9uZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgaW5pdGlhbGl6ZXJzIGFmdGVyIGRlY29yYXRpb24gaGFzIGNvbXBsZXRlZFwiKTsgZXh0cmFJbml0aWFsaXplcnMucHVzaChhY2NlcHQoZiB8fCBudWxsKSk7IH07XG4gICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcbiAgICAgIGlmIChraW5kID09PSBcImFjY2Vzc29yXCIpIHtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuZ2V0KSkgZGVzY3JpcHRvci5nZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5zZXQpKSBkZXNjcmlwdG9yLnNldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF8gPSBhY2NlcHQocmVzdWx0KSkge1xuICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgICAgIGVsc2UgZGVzY3JpcHRvcltrZXldID0gXztcbiAgICAgIH1cbiAgfVxuICBpZiAodGFyZ2V0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBjb250ZXh0SW4ubmFtZSwgZGVzY3JpcHRvcik7XG4gIGRvbmUgPSB0cnVlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcnVuSW5pdGlhbGl6ZXJzKHRoaXNBcmcsIGluaXRpYWxpemVycywgdmFsdWUpIHtcbiAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5pdGlhbGl6ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IHVzZVZhbHVlID8gaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZywgdmFsdWUpIDogaW5pdGlhbGl6ZXJzW2ldLmNhbGwodGhpc0FyZyk7XG4gIH1cbiAgcmV0dXJuIHVzZVZhbHVlID8gdmFsdWUgOiB2b2lkIDA7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19wcm9wS2V5KHgpIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiID8geCA6IFwiXCIuY29uY2F0KHgpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0RnVuY3Rpb25OYW1lKGYsIG5hbWUsIHByZWZpeCkge1xuICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZiwgXCJuYW1lXCIsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4LCBcIiBcIiwgbmFtZSkgOiBuYW1lIH0pO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcbiAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gIH1cbn1cblxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gIG9bazJdID0gbVtrXTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcbiAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xuICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgfVxuICB9O1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xuICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gIGlmICghbSkgcmV0dXJuIG87XG4gIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICB0cnkge1xuICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gIH1cbiAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gIGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICB9XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XG4gIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xuICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxuICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXG4gICAgICAgICAgcltrXSA9IGFbal07XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xuICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgfVxuICB9XG4gIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XG4gIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xuICB2YXIgaSwgcDtcbiAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogZmFsc2UgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cbiAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcbiAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cbiAgcmV0dXJuIGNvb2tlZDtcbn07XG5cbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gIG9bXCJkZWZhdWx0XCJdID0gdjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XG4gIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xuICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJtXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIG1ldGhvZCBpcyBub3Qgd3JpdGFibGVcIik7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgcmV0dXJuIChraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlciwgdmFsdWUpIDogZiA/IGYudmFsdWUgPSB2YWx1ZSA6IHN0YXRlLnNldChyZWNlaXZlciwgdmFsdWUpKSwgdmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4oc3RhdGUsIHJlY2VpdmVyKSB7XG4gIGlmIChyZWNlaXZlciA9PT0gbnVsbCB8fCAodHlwZW9mIHJlY2VpdmVyICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiByZWNlaXZlciAhPT0gXCJmdW5jdGlvblwiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB1c2UgJ2luJyBvcGVyYXRvciBvbiBub24tb2JqZWN0XCIpO1xuICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG59O1xuIiwgIi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWU6IGFueSk6IHZhbHVlIGlzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55IHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsICIvKipcbiAqIFVzZWQgdG8gY3JlYXRlIEVycm9yIHN1YmNsYXNzZXMgdW50aWwgdGhlIGNvbW11bml0eSBtb3ZlcyBhd2F5IGZyb20gRVM1LlxuICpcbiAqIFRoaXMgaXMgYmVjYXVzZSBjb21waWxpbmcgZnJvbSBUeXBlU2NyaXB0IGRvd24gdG8gRVM1IGhhcyBpc3N1ZXMgd2l0aCBzdWJjbGFzc2luZyBFcnJvcnNcbiAqIGFzIHdlbGwgYXMgb3RoZXIgYnVpbHQtaW4gdHlwZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTIxMjNcbiAqXG4gKiBAcGFyYW0gY3JlYXRlSW1wbCBBIGZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBhY3R1YWwgY29uc3RydWN0b3IgaW1wbGVtZW50YXRpb24uIFRoZSByZXR1cm5lZFxuICogZnVuY3Rpb24gc2hvdWxkIGJlIGEgbmFtZWQgZnVuY3Rpb24gdGhhdCBjYWxscyBgX3N1cGVyYCBpbnRlcm5hbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzczxUPihjcmVhdGVJbXBsOiAoX3N1cGVyOiBhbnkpID0+IGFueSk6IFQge1xuICBjb25zdCBfc3VwZXIgPSAoaW5zdGFuY2U6IGFueSkgPT4ge1xuICAgIEVycm9yLmNhbGwoaW5zdGFuY2UpO1xuICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH07XG5cbiAgY29uc3QgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gIGN0b3JGdW5jLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gIHJldHVybiBjdG9yRnVuYztcbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcblxuZXhwb3J0IGludGVyZmFjZSBVbnN1YnNjcmlwdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICByZWFkb25seSBlcnJvcnM6IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVuc3Vic2NyaXB0aW9uRXJyb3JDdG9yIHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbC4gRG8gbm90IGNvbnN0cnVjdCBlcnJvciBpbnN0YW5jZXMuXG4gICAqIENhbm5vdCBiZSB0YWdnZWQgYXMgaW50ZXJuYWw6IGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvcnhqcy9pc3N1ZXMvNjI2OVxuICAgKi9cbiAgbmV3IChlcnJvcnM6IGFueVtdKTogVW5zdWJzY3JpcHRpb25FcnJvcjtcbn1cblxuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBvbmUgb3IgbW9yZSBlcnJvcnMgaGF2ZSBvY2N1cnJlZCBkdXJpbmcgdGhlXG4gKiBgdW5zdWJzY3JpYmVgIG9mIGEge0BsaW5rIFN1YnNjcmlwdGlvbn0uXG4gKi9cbmV4cG9ydCBjb25zdCBVbnN1YnNjcmlwdGlvbkVycm9yOiBVbnN1YnNjcmlwdGlvbkVycm9yQ3RvciA9IGNyZWF0ZUVycm9yQ2xhc3MoXG4gIChfc3VwZXIpID0+XG4gICAgZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwodGhpczogYW55LCBlcnJvcnM6IChFcnJvciB8IHN0cmluZylbXSkge1xuICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgID8gYCR7ZXJyb3JzLmxlbmd0aH0gZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcbiR7ZXJyb3JzLm1hcCgoZXJyLCBpKSA9PiBgJHtpICsgMX0pICR7ZXJyLnRvU3RyaW5nKCl9YCkuam9pbignXFxuICAnKX1gXG4gICAgICAgIDogJyc7XG4gICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9XG4pO1xuIiwgIi8qKlxuICogUmVtb3ZlcyBhbiBpdGVtIGZyb20gYW4gYXJyYXksIG11dGF0aW5nIGl0LlxuICogQHBhcmFtIGFyciBUaGUgYXJyYXkgdG8gcmVtb3ZlIHRoZSBpdGVtIGZyb21cbiAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIHJlbW92ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlPFQ+KGFycjogVFtdIHwgdW5kZWZpbmVkIHwgbnVsbCwgaXRlbTogVCkge1xuICBpZiAoYXJyKSB7XG4gICAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IFVuc3Vic2NyaXB0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25MaWtlLCBUZWFyZG93bkxvZ2ljLCBVbnN1YnNjcmliYWJsZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGRpc3Bvc2FibGUgcmVzb3VyY2UsIHN1Y2ggYXMgdGhlIGV4ZWN1dGlvbiBvZiBhbiBPYnNlcnZhYmxlLiBBXG4gKiBTdWJzY3JpcHRpb24gaGFzIG9uZSBpbXBvcnRhbnQgbWV0aG9kLCBgdW5zdWJzY3JpYmVgLCB0aGF0IHRha2VzIG5vIGFyZ3VtZW50XG4gKiBhbmQganVzdCBkaXNwb3NlcyB0aGUgcmVzb3VyY2UgaGVsZCBieSB0aGUgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgc3Vic2NyaXB0aW9ucyBtYXkgYmUgZ3JvdXBlZCB0b2dldGhlciB0aHJvdWdoIHRoZSBgYWRkKClgXG4gKiBtZXRob2QsIHdoaWNoIHdpbGwgYXR0YWNoIGEgY2hpbGQgU3Vic2NyaXB0aW9uIHRvIHRoZSBjdXJyZW50IFN1YnNjcmlwdGlvbi5cbiAqIFdoZW4gYSBTdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLCBhbGwgaXRzIGNoaWxkcmVuIChhbmQgaXRzIGdyYW5kY2hpbGRyZW4pXG4gKiB3aWxsIGJlIHVuc3Vic2NyaWJlZCBhcyB3ZWxsLlxuICpcbiAqIEBjbGFzcyBTdWJzY3JpcHRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvbiBpbXBsZW1lbnRzIFN1YnNjcmlwdGlvbkxpa2Uge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgcHVibGljIHN0YXRpYyBFTVBUWSA9ICgoKSA9PiB7XG4gICAgY29uc3QgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gZW1wdHk7XG4gIH0pKCk7XG5cbiAgLyoqXG4gICAqIEEgZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIHRoaXMgU3Vic2NyaXB0aW9uIGhhcyBhbHJlYWR5IGJlZW4gdW5zdWJzY3JpYmVkLlxuICAgKi9cbiAgcHVibGljIGNsb3NlZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX3BhcmVudGFnZTogU3Vic2NyaXB0aW9uW10gfCBTdWJzY3JpcHRpb24gfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgcmVnaXN0ZXJlZCBmaW5hbGl6ZXJzIHRvIGV4ZWN1dGUgdXBvbiB1bnN1YnNjcmlwdGlvbi4gQWRkaW5nIGFuZCByZW1vdmluZyBmcm9tIHRoaXNcbiAgICogbGlzdCBvY2N1cnMgaW4gdGhlIHtAbGluayAjYWRkfSBhbmQge0BsaW5rICNyZW1vdmV9IG1ldGhvZHMuXG4gICAqL1xuICBwcml2YXRlIF9maW5hbGl6ZXJzOiBFeGNsdWRlPFRlYXJkb3duTG9naWMsIHZvaWQ+W10gfCBudWxsID0gbnVsbDtcblxuICAvKipcbiAgICogQHBhcmFtIGluaXRpYWxUZWFyZG93biBBIGZ1bmN0aW9uIGV4ZWN1dGVkIGZpcnN0IGFzIHBhcnQgb2YgdGhlIGZpbmFsaXphdGlvblxuICAgKiBwcm9jZXNzIHRoYXQgaXMga2lja2VkIG9mZiB3aGVuIHtAbGluayAjdW5zdWJzY3JpYmV9IGlzIGNhbGxlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5pdGlhbFRlYXJkb3duPzogKCkgPT4gdm9pZCkge31cblxuICAvKipcbiAgICogRGlzcG9zZXMgdGhlIHJlc291cmNlcyBoZWxkIGJ5IHRoZSBzdWJzY3JpcHRpb24uIE1heSwgZm9yIGluc3RhbmNlLCBjYW5jZWxcbiAgICogYW4gb25nb2luZyBPYnNlcnZhYmxlIGV4ZWN1dGlvbiBvciBjYW5jZWwgYW55IG90aGVyIHR5cGUgb2Ygd29yayB0aGF0XG4gICAqIHN0YXJ0ZWQgd2hlbiB0aGUgU3Vic2NyaXB0aW9uIHdhcyBjcmVhdGVkLlxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgbGV0IGVycm9yczogYW55W10gfCB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG5cbiAgICAgIC8vIFJlbW92ZSB0aGlzIGZyb20gaXQncyBwYXJlbnRzLlxuICAgICAgY29uc3QgeyBfcGFyZW50YWdlIH0gPSB0aGlzO1xuICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHBhcmVudCBvZiBfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfcGFyZW50YWdlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGluaXRpYWxUZWFyZG93bjogaW5pdGlhbEZpbmFsaXplciB9ID0gdGhpcztcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB7IF9maW5hbGl6ZXJzIH0gPSB0aGlzO1xuICAgICAgaWYgKF9maW5hbGl6ZXJzKSB7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplcnMgPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGZpbmFsaXplciBvZiBfZmluYWxpemVycykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBleGVjRmluYWxpemVyKGZpbmFsaXplcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgPz8gW107XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICBlcnJvcnMgPSBbLi4uZXJyb3JzLCAuLi5lcnIuZXJyb3JzXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGZpbmFsaXplciB0byB0aGlzIHN1YnNjcmlwdGlvbiwgc28gdGhhdCBmaW5hbGl6YXRpb24gd2lsbCBiZSB1bnN1YnNjcmliZWQvY2FsbGVkXG4gICAqIHdoZW4gdGhpcyBzdWJzY3JpcHRpb24gaXMgdW5zdWJzY3JpYmVkLiBJZiB0aGlzIHN1YnNjcmlwdGlvbiBpcyBhbHJlYWR5IHtAbGluayAjY2xvc2VkfSxcbiAgICogYmVjYXVzZSBpdCBoYXMgYWxyZWFkeSBiZWVuIHVuc3Vic2NyaWJlZCwgdGhlbiB3aGF0ZXZlciBmaW5hbGl6ZXIgaXMgcGFzc2VkIHRvIGl0XG4gICAqIHdpbGwgYXV0b21hdGljYWxseSBiZSBleGVjdXRlZCAodW5sZXNzIHRoZSBmaW5hbGl6ZXIgaXRzZWxmIGlzIGFsc28gYSBjbG9zZWQgc3Vic2NyaXB0aW9uKS5cbiAgICpcbiAgICogQ2xvc2VkIFN1YnNjcmlwdGlvbnMgY2Fubm90IGJlIGFkZGVkIGFzIGZpbmFsaXplcnMgdG8gYW55IHN1YnNjcmlwdGlvbi4gQWRkaW5nIGEgY2xvc2VkXG4gICAqIHN1YnNjcmlwdGlvbiB0byBhIGFueSBzdWJzY3JpcHRpb24gd2lsbCByZXN1bHQgaW4gbm8gb3BlcmF0aW9uLiAoQSBub29wKS5cbiAgICpcbiAgICogQWRkaW5nIGEgc3Vic2NyaXB0aW9uIHRvIGl0c2VsZiwgb3IgYWRkaW5nIGBudWxsYCBvciBgdW5kZWZpbmVkYCB3aWxsIG5vdCBwZXJmb3JtIGFueVxuICAgKiBvcGVyYXRpb24gYXQgYWxsLiAoQSBub29wKS5cbiAgICpcbiAgICogYFN1YnNjcmlwdGlvbmAgaW5zdGFuY2VzIHRoYXQgYXJlIGFkZGVkIHRvIHRoaXMgaW5zdGFuY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGVtc2VsdmVzXG4gICAqIGlmIHRoZXkgYXJlIHVuc3Vic2NyaWJlZC4gRnVuY3Rpb25zIGFuZCB7QGxpbmsgVW5zdWJzY3JpYmFibGV9IG9iamVjdHMgdGhhdCB5b3Ugd2lzaCB0byByZW1vdmVcbiAgICogd2lsbCBuZWVkIHRvIGJlIHJlbW92ZWQgbWFudWFsbHkgd2l0aCB7QGxpbmsgI3JlbW92ZX1cbiAgICpcbiAgICogQHBhcmFtIHRlYXJkb3duIFRoZSBmaW5hbGl6YXRpb24gbG9naWMgdG8gYWRkIHRvIHRoaXMgc3Vic2NyaXB0aW9uLlxuICAgKi9cbiAgYWRkKHRlYXJkb3duOiBUZWFyZG93bkxvZ2ljKTogdm9pZCB7XG4gICAgLy8gT25seSBhZGQgdGhlIGZpbmFsaXplciBpZiBpdCdzIG5vdCB1bmRlZmluZWRcbiAgICAvLyBhbmQgZG9uJ3QgYWRkIGEgc3Vic2NyaXB0aW9uIHRvIGl0c2VsZi5cbiAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAvLyBJZiB0aGlzIHN1YnNjcmlwdGlvbiBpcyBhbHJlYWR5IGNsb3NlZCxcbiAgICAgICAgLy8gZXhlY3V0ZSB3aGF0ZXZlciBmaW5hbGl6ZXIgaXMgaGFuZGVkIHRvIGl0IGF1dG9tYXRpY2FsbHkuXG4gICAgICAgIGV4ZWNGaW5hbGl6ZXIodGVhcmRvd24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgLy8gV2UgZG9uJ3QgYWRkIGNsb3NlZCBzdWJzY3JpcHRpb25zLCBhbmQgd2UgZG9uJ3QgYWRkIHRoZSBzYW1lIHN1YnNjcmlwdGlvblxuICAgICAgICAgIC8vIHR3aWNlLiBTdWJzY3JpcHRpb24gdW5zdWJzY3JpYmUgaXMgaWRlbXBvdGVudC5cbiAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnMgPz8gW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgdG8gc2VlIGlmIGEgdGhpcyBzdWJzY3JpcHRpb24gYWxyZWFkeSBoYXMgYSBwYXJ0aWN1bGFyIHBhcmVudC5cbiAgICogVGhpcyB3aWxsIHNpZ25hbCB0aGF0IHRoaXMgc3Vic2NyaXB0aW9uIGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQgdG8gdGhlIHBhcmVudCBpbiBxdWVzdGlvbi5cbiAgICogQHBhcmFtIHBhcmVudCB0aGUgcGFyZW50IHRvIGNoZWNrIGZvclxuICAgKi9cbiAgcHJpdmF0ZSBfaGFzUGFyZW50KHBhcmVudDogU3Vic2NyaXB0aW9uKSB7XG4gICAgY29uc3QgeyBfcGFyZW50YWdlIH0gPSB0aGlzO1xuICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgcGFyZW50IHRvIHRoaXMgc3Vic2NyaXB0aW9uIHNvIGl0IGNhbiBiZSByZW1vdmVkIGZyb20gdGhlIHBhcmVudCBpZiBpdFxuICAgKiB1bnN1YnNjcmliZXMgb24gaXQncyBvd24uXG4gICAqXG4gICAqIE5PVEU6IFRISVMgQVNTVU1FUyBUSEFUIHtAbGluayBfaGFzUGFyZW50fSBIQVMgQUxSRUFEWSBCRUVOIENIRUNLRUQuXG4gICAqIEBwYXJhbSBwYXJlbnQgVGhlIHBhcmVudCBzdWJzY3JpcHRpb24gdG8gYWRkXG4gICAqL1xuICBwcml2YXRlIF9hZGRQYXJlbnQocGFyZW50OiBTdWJzY3JpcHRpb24pIHtcbiAgICBjb25zdCB7IF9wYXJlbnRhZ2UgfSA9IHRoaXM7XG4gICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGEgY2hpbGQgd2hlbiBpdCBpcyByZW1vdmVkIHZpYSB7QGxpbmsgI3JlbW92ZX0uXG4gICAqIEBwYXJhbSBwYXJlbnQgVGhlIHBhcmVudCB0byByZW1vdmVcbiAgICovXG4gIHByaXZhdGUgX3JlbW92ZVBhcmVudChwYXJlbnQ6IFN1YnNjcmlwdGlvbikge1xuICAgIGNvbnN0IHsgX3BhcmVudGFnZSB9ID0gdGhpcztcbiAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBmaW5hbGl6ZXIgZnJvbSB0aGlzIHN1YnNjcmlwdGlvbiB0aGF0IHdhcyBwcmV2aW91c2x5IGFkZGVkIHdpdGggdGhlIHtAbGluayAjYWRkfSBtZXRob2QuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgU3Vic2NyaXB0aW9uYCBpbnN0YW5jZXMsIHdoZW4gdW5zdWJzY3JpYmVkLCB3aWxsIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZW1zZWx2ZXNcbiAgICogZnJvbSBldmVyeSBvdGhlciBgU3Vic2NyaXB0aW9uYCB0aGV5IGhhdmUgYmVlbiBhZGRlZCB0by4gVGhpcyBtZWFucyB0aGF0IHVzaW5nIHRoZSBgcmVtb3ZlYCBtZXRob2RcbiAgICogaXMgbm90IGEgY29tbW9uIHRoaW5nIGFuZCBzaG91bGQgYmUgdXNlZCB0aG91Z2h0ZnVsbHkuXG4gICAqXG4gICAqIElmIHlvdSBhZGQgdGhlIHNhbWUgZmluYWxpemVyIGluc3RhbmNlIG9mIGEgZnVuY3Rpb24gb3IgYW4gdW5zdWJzY3JpYmFibGUgb2JqZWN0IHRvIGEgYFN1YnNjcmlwdGlvbmAgaW5zdGFuY2VcbiAgICogbW9yZSB0aGFuIG9uY2UsIHlvdSB3aWxsIG5lZWQgdG8gY2FsbCBgcmVtb3ZlYCB0aGUgc2FtZSBudW1iZXIgb2YgdGltZXMgdG8gcmVtb3ZlIGFsbCBpbnN0YW5jZXMuXG4gICAqXG4gICAqIEFsbCBmaW5hbGl6ZXIgaW5zdGFuY2VzIGFyZSByZW1vdmVkIHRvIGZyZWUgdXAgbWVtb3J5IHVwb24gdW5zdWJzY3JpcHRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB0ZWFyZG93biBUaGUgZmluYWxpemVyIHRvIHJlbW92ZSBmcm9tIHRoaXMgc3Vic2NyaXB0aW9uXG4gICAqL1xuICByZW1vdmUodGVhcmRvd246IEV4Y2x1ZGU8VGVhcmRvd25Mb2dpYywgdm9pZD4pOiB2b2lkIHtcbiAgICBjb25zdCB7IF9maW5hbGl6ZXJzIH0gPSB0aGlzO1xuICAgIF9maW5hbGl6ZXJzICYmIGFyclJlbW92ZShfZmluYWxpemVycywgdGVhcmRvd24pO1xuXG4gICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWU6IGFueSk6IHZhbHVlIGlzIFN1YnNjcmlwdGlvbiB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXI6IFVuc3Vic2NyaWJhYmxlIHwgKCgpID0+IHZvaWQpKSB7XG4gIGlmIChpc0Z1bmN0aW9uKGZpbmFsaXplcikpIHtcbiAgICBmaW5hbGl6ZXIoKTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZU5vdGlmaWNhdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFRoZSB7QGxpbmsgR2xvYmFsQ29uZmlnfSBvYmplY3QgZm9yIFJ4SlMuIEl0IGlzIHVzZWQgdG8gY29uZmlndXJlIHRoaW5nc1xuICogbGlrZSBob3cgdG8gcmVhY3Qgb24gdW5oYW5kbGVkIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbmZpZzogR2xvYmFsQ29uZmlnID0ge1xuICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gIFByb21pc2U6IHVuZGVmaW5lZCxcbiAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuXG4vKipcbiAqIFRoZSBnbG9iYWwgY29uZmlndXJhdGlvbiBvYmplY3QgZm9yIFJ4SlMsIHVzZWQgdG8gY29uZmlndXJlIHRoaW5nc1xuICogbGlrZSBob3cgdG8gcmVhY3Qgb24gdW5oYW5kbGVkIGVycm9ycy4gQWNjZXNzaWJsZSB2aWEge0BsaW5rIGNvbmZpZ31cbiAqIG9iamVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHbG9iYWxDb25maWcge1xuICAvKipcbiAgICogQSByZWdpc3RyYXRpb24gcG9pbnQgZm9yIHVuaGFuZGxlZCBlcnJvcnMgZnJvbSBSeEpTLiBUaGVzZSBhcmUgZXJyb3JzIHRoYXRcbiAgICogY2Fubm90IHdlcmUgbm90IGhhbmRsZWQgYnkgY29uc3VtaW5nIGNvZGUgaW4gdGhlIHVzdWFsIHN1YnNjcmlwdGlvbiBwYXRoLiBGb3JcbiAgICogZXhhbXBsZSwgaWYgeW91IGhhdmUgdGhpcyBjb25maWd1cmVkLCBhbmQgeW91IHN1YnNjcmliZSB0byBhbiBvYnNlcnZhYmxlIHdpdGhvdXRcbiAgICogcHJvdmlkaW5nIGFuIGVycm9yIGhhbmRsZXIsIGVycm9ycyBmcm9tIHRoYXQgc3Vic2NyaXB0aW9uIHdpbGwgZW5kIHVwIGhlcmUuIFRoaXNcbiAgICogd2lsbCBfYWx3YXlzXyBiZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkgb24gYW5vdGhlciBqb2IgaW4gdGhlIHJ1bnRpbWUuIFRoaXMgaXMgYmVjYXVzZVxuICAgKiB3ZSBkbyBub3Qgd2FudCBlcnJvcnMgdGhyb3duIGluIHRoaXMgdXNlci1jb25maWd1cmVkIGhhbmRsZXIgdG8gaW50ZXJmZXJlIHdpdGggdGhlXG4gICAqIGJlaGF2aW9yIG9mIHRoZSBsaWJyYXJ5LlxuICAgKi9cbiAgb25VbmhhbmRsZWRFcnJvcjogKChlcnI6IGFueSkgPT4gdm9pZCkgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHJlZ2lzdHJhdGlvbiBwb2ludCBmb3Igbm90aWZpY2F0aW9ucyB0aGF0IGNhbm5vdCBiZSBzZW50IHRvIHN1YnNjcmliZXJzIGJlY2F1c2UgdGhleVxuICAgKiBoYXZlIGNvbXBsZXRlZCwgZXJyb3JlZCBvciBoYXZlIGJlZW4gZXhwbGljaXRseSB1bnN1YnNjcmliZWQuIEJ5IGRlZmF1bHQsIG5leHQsIGNvbXBsZXRlXG4gICAqIGFuZCBlcnJvciBub3RpZmljYXRpb25zIHNlbnQgdG8gc3RvcHBlZCBzdWJzY3JpYmVycyBhcmUgbm9vcHMuIEhvd2V2ZXIsIHNvbWV0aW1lcyBjYWxsZXJzXG4gICAqIG1pZ2h0IHdhbnQgYSBkaWZmZXJlbnQgYmVoYXZpb3IuIEZvciBleGFtcGxlLCB3aXRoIHNvdXJjZXMgdGhhdCBhdHRlbXB0IHRvIHJlcG9ydCBlcnJvcnNcbiAgICogdG8gc3RvcHBlZCBzdWJzY3JpYmVycywgYSBjYWxsZXIgY2FuIGNvbmZpZ3VyZSBSeEpTIHRvIHRocm93IGFuIHVuaGFuZGxlZCBlcnJvciBpbnN0ZWFkLlxuICAgKiBUaGlzIHdpbGwgX2Fsd2F5c18gYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5IG9uIGFub3RoZXIgam9iIGluIHRoZSBydW50aW1lLiBUaGlzIGlzIGJlY2F1c2VcbiAgICogd2UgZG8gbm90IHdhbnQgZXJyb3JzIHRocm93biBpbiB0aGlzIHVzZXItY29uZmlndXJlZCBoYW5kbGVyIHRvIGludGVyZmVyZSB3aXRoIHRoZVxuICAgKiBiZWhhdmlvciBvZiB0aGUgbGlicmFyeS5cbiAgICovXG4gIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogKChub3RpZmljYXRpb246IE9ic2VydmFibGVOb3RpZmljYXRpb248YW55Piwgc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxhbnk+KSA9PiB2b2lkKSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBwcm9taXNlIGNvbnN0cnVjdG9yIHVzZWQgYnkgZGVmYXVsdCBmb3Ige0BsaW5rIE9ic2VydmFibGUjdG9Qcm9taXNlIHRvUHJvbWlzZX0gYW5kIHtAbGluayBPYnNlcnZhYmxlI2ZvckVhY2ggZm9yRWFjaH1cbiAgICogbWV0aG9kcy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgQXMgb2YgdmVyc2lvbiA4LCBSeEpTIHdpbGwgbm8gbG9uZ2VyIHN1cHBvcnQgdGhpcyBzb3J0IG9mIGluamVjdGlvbiBvZiBhXG4gICAqIFByb21pc2UgY29uc3RydWN0b3IuIElmIHlvdSBuZWVkIGEgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbiBvdGhlciB0aGFuIG5hdGl2ZSBwcm9taXNlcyxcbiAgICogcGxlYXNlIHBvbHlmaWxsL3BhdGNoIFByb21pc2UgYXMgeW91IHNlZSBhcHByb3ByaWF0ZS4gV2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICAgKi9cbiAgUHJvbWlzZT86IFByb21pc2VDb25zdHJ1Y3Rvckxpa2U7XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHR1cm5zIG9uIHN5bmNocm9ub3VzIGVycm9yIHJldGhyb3dpbmcsIHdoaWNoIGlzIGEgZGVwcmVjYXRlZCBiZWhhdmlvclxuICAgKiBpbiB2NiBhbmQgaGlnaGVyLiBUaGlzIGJlaGF2aW9yIGVuYWJsZXMgYmFkIHBhdHRlcm5zIGxpa2Ugd3JhcHBpbmcgYSBzdWJzY3JpYmVcbiAgICogY2FsbCBpbiBhIHRyeS9jYXRjaCBibG9jay4gSXQgYWxzbyBlbmFibGVzIHByb2R1Y2VyIGludGVyZmVyZW5jZSwgYSBuYXN0eSBidWdcbiAgICogd2hlcmUgYSBtdWx0aWNhc3QgY2FuIGJlIGJyb2tlbiBmb3IgYWxsIG9ic2VydmVycyBieSBhIGRvd25zdHJlYW0gY29uc3VtZXIgd2l0aFxuICAgKiBhbiB1bmhhbmRsZWQgZXJyb3IuIERPIE5PVCBVU0UgVEhJUyBGTEFHIFVOTEVTUyBJVCdTIE5FRURFRCBUTyBCVVkgVElNRVxuICAgKiBGT1IgTUlHUkFUSU9OIFJFQVNPTlMuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIEFzIG9mIHZlcnNpb24gOCwgUnhKUyB3aWxsIG5vIGxvbmdlciBzdXBwb3J0IHN5bmNocm9ub3VzIHRocm93aW5nXG4gICAqIG9mIHVuaGFuZGxlZCBlcnJvcnMuIEFsbCBlcnJvcnMgd2lsbCBiZSB0aHJvd24gb24gYSBzZXBhcmF0ZSBjYWxsIHN0YWNrIHRvIHByZXZlbnQgYmFkXG4gICAqIGJlaGF2aW9ycyBkZXNjcmliZWQgYWJvdmUuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAgICovXG4gIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGVuYWJsZXMgYW4gYXMtb2YteWV0IHVuZG9jdW1lbnRlZCBmZWF0dXJlIGZyb20gdjU6IFRoZSBhYmlsaXR5IHRvIGFjY2Vzc1xuICAgKiBgdW5zdWJzY3JpYmUoKWAgdmlhIGB0aGlzYCBjb250ZXh0IGluIGBuZXh0YCBmdW5jdGlvbnMgY3JlYXRlZCBpbiBvYnNlcnZlcnMgcGFzc2VkXG4gICAqIHRvIGBzdWJzY3JpYmVgLlxuICAgKlxuICAgKiBUaGlzIGlzIGJlaW5nIHJlbW92ZWQgYmVjYXVzZSB0aGUgcGVyZm9ybWFuY2Ugd2FzIHNldmVyZWx5IHByb2JsZW1hdGljLCBhbmQgaXQgY291bGQgYWxzbyBjYXVzZVxuICAgKiBpc3N1ZXMgd2hlbiB0eXBlcyBvdGhlciB0aGFuIFBPSk9zIGFyZSBwYXNzZWQgdG8gc3Vic2NyaWJlIGFzIHN1YnNjcmliZXJzLCBhcyB0aGV5IHdpbGwgbGlrZWx5IGhhdmVcbiAgICogdGhlaXIgYHRoaXNgIGNvbnRleHQgb3ZlcndyaXR0ZW4uXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIEFzIG9mIHZlcnNpb24gOCwgUnhKUyB3aWxsIG5vIGxvbmdlciBzdXBwb3J0IGFsdGVyaW5nIHRoZVxuICAgKiBjb250ZXh0IG9mIG5leHQgZnVuY3Rpb25zIHByb3ZpZGVkIGFzIHBhcnQgb2YgYW4gb2JzZXJ2ZXIgdG8gU3Vic2NyaWJlLiBJbnN0ZWFkLFxuICAgKiB5b3Ugd2lsbCBoYXZlIGFjY2VzcyB0byBhIHN1YnNjcmlwdGlvbiBvciBhIHNpZ25hbCBvciB0b2tlbiB0aGF0IHdpbGwgYWxsb3cgeW91IHRvIGRvIHRoaW5ncyBsaWtlXG4gICAqIHVuc3Vic2NyaWJlIGFuZCB0ZXN0IGNsb3NlZCBzdGF0dXMuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAgICovXG4gIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogYm9vbGVhbjtcbn1cbiIsICJpbXBvcnQgdHlwZSB7IFRpbWVySGFuZGxlIH0gZnJvbSAnLi90aW1lckhhbmRsZSc7XG50eXBlIFNldFRpbWVvdXRGdW5jdGlvbiA9IChoYW5kbGVyOiAoKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyLCAuLi5hcmdzOiBhbnlbXSkgPT4gVGltZXJIYW5kbGU7XG50eXBlIENsZWFyVGltZW91dEZ1bmN0aW9uID0gKGhhbmRsZTogVGltZXJIYW5kbGUpID0+IHZvaWQ7XG5cbmludGVyZmFjZSBUaW1lb3V0UHJvdmlkZXIge1xuICBzZXRUaW1lb3V0OiBTZXRUaW1lb3V0RnVuY3Rpb247XG4gIGNsZWFyVGltZW91dDogQ2xlYXJUaW1lb3V0RnVuY3Rpb247XG4gIGRlbGVnYXRlOlxuICAgIHwge1xuICAgICAgICBzZXRUaW1lb3V0OiBTZXRUaW1lb3V0RnVuY3Rpb247XG4gICAgICAgIGNsZWFyVGltZW91dDogQ2xlYXJUaW1lb3V0RnVuY3Rpb247XG4gICAgICB9XG4gICAgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjb25zdCB0aW1lb3V0UHJvdmlkZXI6IFRpbWVvdXRQcm92aWRlciA9IHtcbiAgLy8gV2hlbiBhY2Nlc3NpbmcgdGhlIGRlbGVnYXRlLCB1c2UgdGhlIHZhcmlhYmxlIHJhdGhlciB0aGFuIGB0aGlzYCBzbyB0aGF0XG4gIC8vIHRoZSBmdW5jdGlvbnMgY2FuIGJlIGNhbGxlZCB3aXRob3V0IGJlaW5nIGJvdW5kIHRvIHRoZSBwcm92aWRlci5cbiAgc2V0VGltZW91dChoYW5kbGVyOiAoKSA9PiB2b2lkLCB0aW1lb3V0PzogbnVtYmVyLCAuLi5hcmdzKSB7XG4gICAgY29uc3QgeyBkZWxlZ2F0ZSB9ID0gdGltZW91dFByb3ZpZGVyO1xuICAgIGlmIChkZWxlZ2F0ZT8uc2V0VGltZW91dCkge1xuICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQoaGFuZGxlciwgdGltZW91dCwgLi4uYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGhhbmRsZXIsIHRpbWVvdXQsIC4uLmFyZ3MpO1xuICB9LFxuICBjbGVhclRpbWVvdXQoaGFuZGxlKSB7XG4gICAgY29uc3QgeyBkZWxlZ2F0ZSB9ID0gdGltZW91dFByb3ZpZGVyO1xuICAgIHJldHVybiAoZGVsZWdhdGU/LmNsZWFyVGltZW91dCB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSBhcyBhbnkpO1xuICB9LFxuICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbiIsICJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5cbi8qKlxuICogSGFuZGxlcyBhbiBlcnJvciBvbiBhbm90aGVyIGpvYiBlaXRoZXIgd2l0aCB0aGUgdXNlci1jb25maWd1cmVkIHtAbGluayBvblVuaGFuZGxlZEVycm9yfSxcbiAqIG9yIGJ5IHRocm93aW5nIGl0IG9uIHRoYXQgbmV3IGpvYiBzbyBpdCBjYW4gYmUgcGlja2VkIHVwIGJ5IGB3aW5kb3cub25lcnJvcmAsIGBwcm9jZXNzLm9uKCdlcnJvcicpYCwgZXRjLlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciB0aGVyZSBpcyBhbiBlcnJvciB0aGF0IGlzIG91dC1vZi1iYW5kIHdpdGggdGhlIHN1YnNjcmlwdGlvblxuICogb3Igd2hlbiBhbiBlcnJvciBoaXRzIGEgdGVybWluYWwgYm91bmRhcnkgb2YgdGhlIHN1YnNjcmlwdGlvbiBhbmQgbm8gZXJyb3IgaGFuZGxlciB3YXMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIGVyciB0aGUgZXJyb3IgdG8gcmVwb3J0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnI6IGFueSkge1xuICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgY29uc3QgeyBvblVuaGFuZGxlZEVycm9yIH0gPSBjb25maWc7XG4gICAgaWYgKG9uVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgIC8vIEV4ZWN1dGUgdGhlIHVzZXItY29uZmlndXJlZCBlcnJvciBoYW5kbGVyLlxuICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaHJvdyBzbyBpdCBpcyBwaWNrZWQgdXAgYnkgdGhlIHJ1bnRpbWUncyB1bmNhdWdodCBlcnJvciBtZWNoYW5pc20uXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9KTtcbn1cbiIsICIvKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eSAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7IH1cbiIsICJpbXBvcnQgeyBDb21wbGV0ZU5vdGlmaWNhdGlvbiwgTmV4dE5vdGlmaWNhdGlvbiwgRXJyb3JOb3RpZmljYXRpb24gfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBBIGNvbXBsZXRpb24gb2JqZWN0IG9wdGltaXplZCBmb3IgbWVtb3J5IHVzZSBhbmQgY3JlYXRlZCB0byBiZSB0aGVcbiAqIHNhbWUgXCJzaGFwZVwiIGFzIG90aGVyIG5vdGlmaWNhdGlvbnMgaW4gdjguXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IENPTVBMRVRFX05PVElGSUNBVElPTiA9ICgoKSA9PiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkgYXMgQ29tcGxldGVOb3RpZmljYXRpb24pKCk7XG5cbi8qKlxuICogSW50ZXJuYWwgdXNlIG9ubHkuIENyZWF0ZXMgYW4gb3B0aW1pemVkIGVycm9yIG5vdGlmaWNhdGlvbiB0aGF0IGlzIHRoZSBzYW1lIFwic2hhcGVcIlxuICogYXMgb3RoZXIgbm90aWZpY2F0aW9ucy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3I6IGFueSk6IEVycm9yTm90aWZpY2F0aW9uIHtcbiAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignRScsIHVuZGVmaW5lZCwgZXJyb3IpIGFzIGFueTtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCB1c2Ugb25seS4gQ3JlYXRlcyBhbiBvcHRpbWl6ZWQgbmV4dCBub3RpZmljYXRpb24gdGhhdCBpcyB0aGUgc2FtZSBcInNoYXBlXCJcbiAqIGFzIG90aGVyIG5vdGlmaWNhdGlvbnMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHROb3RpZmljYXRpb248VD4odmFsdWU6IFQpIHtcbiAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpIGFzIE5leHROb3RpZmljYXRpb248VD47XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IGFsbCBub3RpZmljYXRpb25zIGNyZWF0ZWQgaW50ZXJuYWxseSBoYXZlIHRoZSBzYW1lIFwic2hhcGVcIiBpbiB2OC5cbiAqXG4gKiBUT0RPOiBUaGlzIGlzIG9ubHkgZXhwb3J0ZWQgdG8gc3VwcG9ydCBhIGNyYXp5IGxlZ2FjeSB0ZXN0IGluIGBncm91cEJ5YC5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKGtpbmQ6ICdOJyB8ICdFJyB8ICdDJywgdmFsdWU6IGFueSwgZXJyb3I6IGFueSkge1xuICByZXR1cm4ge1xuICAgIGtpbmQsXG4gICAgdmFsdWUsXG4gICAgZXJyb3IsXG4gIH07XG59XG4iLCAiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcblxubGV0IGNvbnRleHQ6IHsgZXJyb3JUaHJvd246IGJvb2xlYW47IGVycm9yOiBhbnkgfSB8IG51bGwgPSBudWxsO1xuXG4vKipcbiAqIEhhbmRsZXMgZGVhbGluZyB3aXRoIGVycm9ycyBmb3Igc3VwZXItZ3Jvc3MgbW9kZS4gQ3JlYXRlcyBhIGNvbnRleHQsIGluIHdoaWNoXG4gKiBhbnkgc3luY2hyb25vdXNseSB0aHJvd24gZXJyb3JzIHdpbGwgYmUgcGFzc2VkIHRvIHtAbGluayBjYXB0dXJlRXJyb3J9LiBXaGljaFxuICogd2lsbCByZWNvcmQgdGhlIGVycm9yIHN1Y2ggdGhhdCBpdCB3aWxsIGJlIHJldGhyb3duIGFmdGVyIHRoZSBjYWxsIGJhY2sgaXMgY29tcGxldGUuXG4gKiBUT0RPOiBSZW1vdmUgaW4gdjhcbiAqIEBwYXJhbSBjYiBBbiBpbW1lZGlhdGVseSBleGVjdXRlZCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yQ29udGV4dChjYjogKCkgPT4gdm9pZCkge1xuICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICBjb25zdCBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICBpZiAoaXNSb290KSB7XG4gICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgfVxuICAgIGNiKCk7XG4gICAgaWYgKGlzUm9vdCkge1xuICAgICAgY29uc3QgeyBlcnJvclRocm93biwgZXJyb3IgfSA9IGNvbnRleHQhO1xuICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgdGhlIGdlbmVyYWwgbm9uLWRlcHJlY2F0ZWQgcGF0aCBmb3IgZXZlcnlvbmUgdGhhdFxuICAgIC8vIGlzbid0IGNyYXp5IGVub3VnaCB0byB1c2Ugc3VwZXItZ3Jvc3MgbW9kZSAodXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZylcbiAgICBjYigpO1xuICB9XG59XG5cbi8qKlxuICogQ2FwdHVyZXMgZXJyb3JzIG9ubHkgaW4gc3VwZXItZ3Jvc3MgbW9kZS5cbiAqIEBwYXJhbSBlcnIgdGhlIGVycm9yIHRvIGNhcHR1cmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcHR1cmVFcnJvcihlcnI6IGFueSkge1xuICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcgJiYgY29udGV4dCkge1xuICAgIGNvbnRleHQuZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgT2JzZXJ2ZXIsIE9ic2VydmFibGVOb3RpZmljYXRpb24gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcblxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGludGVyZmFjZSBhbmQgZXh0ZW5kcyB0aGVcbiAqIHtAbGluayBTdWJzY3JpcHRpb259IGNsYXNzLiBXaGlsZSB0aGUge0BsaW5rIE9ic2VydmVyfSBpcyB0aGUgcHVibGljIEFQSSBmb3JcbiAqIGNvbnN1bWluZyB0aGUgdmFsdWVzIG9mIGFuIHtAbGluayBPYnNlcnZhYmxlfSwgYWxsIE9ic2VydmVycyBnZXQgY29udmVydGVkIHRvXG4gKiBhIFN1YnNjcmliZXIsIGluIG9yZGVyIHRvIHByb3ZpZGUgU3Vic2NyaXB0aW9uLWxpa2UgY2FwYWJpbGl0aWVzIHN1Y2ggYXNcbiAqIGB1bnN1YnNjcmliZWAuIFN1YnNjcmliZXIgaXMgYSBjb21tb24gdHlwZSBpbiBSeEpTLCBhbmQgY3J1Y2lhbCBmb3JcbiAqIGltcGxlbWVudGluZyBvcGVyYXRvcnMsIGJ1dCBpdCBpcyByYXJlbHkgdXNlZCBhcyBhIHB1YmxpYyBBUEkuXG4gKlxuICogQGNsYXNzIFN1YnNjcmliZXI8VD5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmliZXI8VD4gZXh0ZW5kcyBTdWJzY3JpcHRpb24gaW1wbGVtZW50cyBPYnNlcnZlcjxUPiB7XG4gIC8qKlxuICAgKiBBIHN0YXRpYyBmYWN0b3J5IGZvciBhIFN1YnNjcmliZXIsIGdpdmVuIGEgKHBvdGVudGlhbGx5IHBhcnRpYWwpIGRlZmluaXRpb25cbiAgICogb2YgYW4gT2JzZXJ2ZXIuXG4gICAqIEBwYXJhbSBuZXh0IFRoZSBgbmV4dGAgY2FsbGJhY2sgb2YgYW4gT2JzZXJ2ZXIuXG4gICAqIEBwYXJhbSBlcnJvciBUaGUgYGVycm9yYCBjYWxsYmFjayBvZiBhblxuICAgKiBPYnNlcnZlci5cbiAgICogQHBhcmFtIGNvbXBsZXRlIFRoZSBgY29tcGxldGVgIGNhbGxiYWNrIG9mIGFuXG4gICAqIE9ic2VydmVyLlxuICAgKiBAcmV0dXJuIEEgU3Vic2NyaWJlciB3cmFwcGluZyB0aGUgKHBhcnRpYWxseSBkZWZpbmVkKVxuICAgKiBPYnNlcnZlciByZXByZXNlbnRlZCBieSB0aGUgZ2l2ZW4gYXJndW1lbnRzLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKiBAZGVwcmVjYXRlZCBEbyBub3QgdXNlLiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguIFRoZXJlIGlzIG5vIHJlcGxhY2VtZW50IGZvciB0aGlzXG4gICAqIG1ldGhvZCwgYW5kIHRoZXJlIGlzIG5vIHJlYXNvbiB0byBiZSBjcmVhdGluZyBpbnN0YW5jZXMgb2YgYFN1YnNjcmliZXJgIGRpcmVjdGx5LlxuICAgKiBJZiB5b3UgaGF2ZSBhIHNwZWNpZmljIHVzZSBjYXNlLCBwbGVhc2UgZmlsZSBhbiBpc3N1ZS5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGU8VD4obmV4dD86ICh4PzogVCkgPT4gdm9pZCwgZXJyb3I/OiAoZT86IGFueSkgPT4gdm9pZCwgY29tcGxldGU/OiAoKSA9PiB2b2lkKTogU3Vic2NyaWJlcjxUPiB7XG4gICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbCwgZG8gbm90IHVzZSBkaXJlY3RseS4gV2lsbCBiZSBtYWRlIGludGVybmFsIGluIHY4LiAqL1xuICBwcm90ZWN0ZWQgaXNTdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG4gIC8qKiBAZGVwcmVjYXRlZCBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIGRvIG5vdCB1c2UgZGlyZWN0bHkuIFdpbGwgYmUgbWFkZSBpbnRlcm5hbCBpbiB2OC4gKi9cbiAgcHJvdGVjdGVkIGRlc3RpbmF0aW9uOiBTdWJzY3JpYmVyPGFueT4gfCBPYnNlcnZlcjxhbnk+OyAvLyB0aGlzIGBhbnlgIGlzIHRoZSBlc2NhcGUgaGF0Y2ggdG8gZXJhc2UgZXh0cmEgdHlwZSBwYXJhbSAoZS5nLiBSKVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIGRvIG5vdCB1c2UgZGlyZWN0bHkuIFdpbGwgYmUgbWFkZSBpbnRlcm5hbCBpbiB2OC5cbiAgICogVGhlcmUgaXMgbm8gcmVhc29uIHRvIGRpcmVjdGx5IGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiBTdWJzY3JpYmVyLiBUaGlzIHR5cGUgaXMgZXhwb3J0ZWQgZm9yIHR5cGluZ3MgcmVhc29ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlc3RpbmF0aW9uPzogU3Vic2NyaWJlcjxhbnk+IHwgT2JzZXJ2ZXI8YW55Pikge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICB0aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAvLyBBdXRvbWF0aWNhbGx5IGNoYWluIHN1YnNjcmlwdGlvbnMgdG9nZXRoZXIgaGVyZS5cbiAgICAgIC8vIGlmIGRlc3RpbmF0aW9uIGlzIGEgU3Vic2NyaXB0aW9uLCB0aGVuIGl0IGlzIGEgU3Vic2NyaWJlci5cbiAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgZGVzdGluYXRpb24uYWRkKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgbm90aWZpY2F0aW9ucyBvZiB0eXBlIGBuZXh0YCBmcm9tXG4gICAqIHRoZSBPYnNlcnZhYmxlLCB3aXRoIGEgdmFsdWUuIFRoZSBPYnNlcnZhYmxlIG1heSBjYWxsIHRoaXMgbWV0aG9kIDAgb3IgbW9yZVxuICAgKiB0aW1lcy5cbiAgICogQHBhcmFtIHtUfSBbdmFsdWVdIFRoZSBgbmV4dGAgdmFsdWUuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBuZXh0KHZhbHVlPzogVCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX25leHQodmFsdWUhKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHtAbGluayBPYnNlcnZlcn0gY2FsbGJhY2sgdG8gcmVjZWl2ZSBub3RpZmljYXRpb25zIG9mIHR5cGUgYGVycm9yYCBmcm9tXG4gICAqIHRoZSBPYnNlcnZhYmxlLCB3aXRoIGFuIGF0dGFjaGVkIGBFcnJvcmAuIE5vdGlmaWVzIHRoZSBPYnNlcnZlciB0aGF0XG4gICAqIHRoZSBPYnNlcnZhYmxlIGhhcyBleHBlcmllbmNlZCBhbiBlcnJvciBjb25kaXRpb24uXG4gICAqIEBwYXJhbSB7YW55fSBbZXJyXSBUaGUgYGVycm9yYCBleGNlcHRpb24uXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBlcnJvcihlcnI/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB7QGxpbmsgT2JzZXJ2ZXJ9IGNhbGxiYWNrIHRvIHJlY2VpdmUgYSB2YWx1ZWxlc3Mgbm90aWZpY2F0aW9uIG9mIHR5cGVcbiAgICogYGNvbXBsZXRlYCBmcm9tIHRoZSBPYnNlcnZhYmxlLiBOb3RpZmllcyB0aGUgT2JzZXJ2ZXIgdGhhdCB0aGUgT2JzZXJ2YWJsZVxuICAgKiBoYXMgZmluaXNoZWQgc2VuZGluZyBwdXNoLWJhc2VkIG5vdGlmaWNhdGlvbnMuXG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBjb21wbGV0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICB1bnN1YnNjcmliZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICBzdXBlci51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGwhO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfbmV4dCh2YWx1ZTogVCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2Vycm9yKGVycjogYW55KTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfY29tcGxldGUoKTogdm9pZCB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgYmluZCBpcyBjYXB0dXJlZCBoZXJlIGJlY2F1c2Ugd2Ugd2FudCB0byBiZSBhYmxlIHRvIGhhdmVcbiAqIGNvbXBhdGliaWxpdHkgd2l0aCBtb25vaWQgbGlicmFyaWVzIHRoYXQgdGVuZCB0byB1c2UgYSBtZXRob2QgbmFtZWRcbiAqIGBiaW5kYC4gSW4gcGFydGljdWxhciwgYSBsaWJyYXJ5IGNhbGxlZCBNb25pbyByZXF1aXJlcyB0aGlzLlxuICovXG5jb25zdCBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbiBiaW5kPEZuIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGZuOiBGbiwgdGhpc0FyZzogYW55KTogRm4ge1xuICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG5cbi8qKlxuICogSW50ZXJuYWwgb3B0aW1pemF0aW9uIG9ubHksIERPIE5PVCBFWFBPU0UuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQ29uc3VtZXJPYnNlcnZlcjxUPiBpbXBsZW1lbnRzIE9ic2VydmVyPFQ+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJ0aWFsT2JzZXJ2ZXI6IFBhcnRpYWw8T2JzZXJ2ZXI8VD4+KSB7fVxuXG4gIG5leHQodmFsdWU6IFQpOiB2b2lkIHtcbiAgICBjb25zdCB7IHBhcnRpYWxPYnNlcnZlciB9ID0gdGhpcztcbiAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlcnJvcihlcnI6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IHsgcGFydGlhbE9ic2VydmVyIH0gPSB0aGlzO1xuICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBsZXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgcGFydGlhbE9ic2VydmVyIH0gPSB0aGlzO1xuICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2FmZVN1YnNjcmliZXI8VD4gZXh0ZW5kcyBTdWJzY3JpYmVyPFQ+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgb2JzZXJ2ZXJPck5leHQ/OiBQYXJ0aWFsPE9ic2VydmVyPFQ+PiB8ICgodmFsdWU6IFQpID0+IHZvaWQpIHwgbnVsbCxcbiAgICBlcnJvcj86ICgoZT86IGFueSkgPT4gdm9pZCkgfCBudWxsLFxuICAgIGNvbXBsZXRlPzogKCgpID0+IHZvaWQpIHwgbnVsbFxuICApIHtcbiAgICBzdXBlcigpO1xuXG4gICAgbGV0IHBhcnRpYWxPYnNlcnZlcjogUGFydGlhbDxPYnNlcnZlcjxUPj47XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgLy8gVGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgZnVuY3Rpb24sIG5vdCBhbiBvYnNlcnZlci4gVGhlIG5leHRcbiAgICAgIC8vIHR3byBhcmd1bWVudHMgKmNvdWxkKiBiZSBvYnNlcnZlcnMsIG9yIHRoZXkgY291bGQgYmUgZW1wdHkuXG4gICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCA/PyB1bmRlZmluZWQpIGFzICgoKHZhbHVlOiBUKSA9PiB2b2lkKSB8IHVuZGVmaW5lZCksXG4gICAgICAgIGVycm9yOiBlcnJvciA/PyB1bmRlZmluZWQsXG4gICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSA/PyB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgZmlyc3QgYXJndW1lbnQgaXMgYSBwYXJ0aWFsIG9ic2VydmVyLlxuICAgICAgbGV0IGNvbnRleHQ6IGFueTtcbiAgICAgIGlmICh0aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIGRlcHJlY2F0ZWQgcGF0aCB0aGF0IG1hZGUgYHRoaXMudW5zdWJzY3JpYmUoKWAgYXZhaWxhYmxlIGluXG4gICAgICAgIC8vIG5leHQgaGFuZGxlciBmdW5jdGlvbnMgcGFzc2VkIHRvIHN1YnNjcmliZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWhpbmQgYSBmbGFnXG4gICAgICAgIC8vIG5vdywgYXMgaXQgaXMgKnZlcnkqIHNsb3cuXG4gICAgICAgIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgY29udGV4dC51bnN1YnNjcmliZSA9ICgpID0+IHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0KSxcbiAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dCksXG4gICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHQpLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIFwibm9ybWFsXCIgcGF0aC4gSnVzdCB1c2UgdGhlIHBhcnRpYWwgb2JzZXJ2ZXIgZGlyZWN0bHkuXG4gICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdyYXAgdGhlIHBhcnRpYWwgb2JzZXJ2ZXIgdG8gZW5zdXJlIGl0J3MgYSBmdWxsIG9ic2VydmVyLCBhbmRcbiAgICAvLyBtYWtlIHN1cmUgcHJvcGVyIGVycm9yIGhhbmRsaW5nIGlzIGFjY291bnRlZCBmb3IuXG4gICAgdGhpcy5kZXN0aW5hdGlvbiA9IG5ldyBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3I6IGFueSkge1xuICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICBjYXB0dXJlRXJyb3IoZXJyb3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIElkZWFsIHBhdGgsIHdlIHJlcG9ydCB0aGlzIGFzIGFuIHVuaGFuZGxlZCBlcnJvcixcbiAgICAvLyB3aGljaCBpcyB0aHJvd24gb24gYSBuZXcgY2FsbCBzdGFjay5cbiAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBlcnJvciBoYW5kbGVyIHVzZWQgd2hlbiBubyBlcnJvciBoYW5kbGVyIHdhcyBzdXBwbGllZFxuICogdG8gdGhlIFNhZmVTdWJzY3JpYmVyIC0tIG1lYW5pbmcgbm8gZXJyb3IgaGFuZGxlciB3YXMgc3VwcGxpZWRcbiAqIGRvIHRoZSBgc3Vic2NyaWJlYCBjYWxsIG9uIG91ciBvYnNlcnZhYmxlLlxuICogQHBhcmFtIGVyciBUaGUgZXJyb3IgdG8gaGFuZGxlXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyOiBhbnkpIHtcbiAgdGhyb3cgZXJyO1xufVxuXG4vKipcbiAqIEEgaGFuZGxlciBmb3Igbm90aWZpY2F0aW9ucyB0aGF0IGNhbm5vdCBiZSBzZW50IHRvIGEgc3RvcHBlZCBzdWJzY3JpYmVyLlxuICogQHBhcmFtIG5vdGlmaWNhdGlvbiBUaGUgbm90aWZpY2F0aW9uIGJlaW5nIHNlbnRcbiAqIEBwYXJhbSBzdWJzY3JpYmVyIFRoZSBzdG9wcGVkIHN1YnNjcmliZXJcbiAqL1xuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb246IE9ic2VydmFibGVOb3RpZmljYXRpb248YW55Piwgc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxhbnk+KSB7XG4gIGNvbnN0IHsgb25TdG9wcGVkTm90aWZpY2F0aW9uIH0gPSBjb25maWc7XG4gIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dCgoKSA9PiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSk7XG59XG5cbi8qKlxuICogVGhlIG9ic2VydmVyIHVzZWQgYXMgYSBzdHViIGZvciBzdWJzY3JpcHRpb25zIHdoZXJlIHRoZSB1c2VyIGRpZCBub3RcbiAqIHBhc3MgYW55IGFyZ3VtZW50cyB0byBgc3Vic2NyaWJlYC4gQ29tZXMgd2l0aCB0aGUgZGVmYXVsdCBlcnJvciBoYW5kbGluZ1xuICogYmVoYXZpb3IuXG4gKi9cbmV4cG9ydCBjb25zdCBFTVBUWV9PQlNFUlZFUjogUmVhZG9ubHk8T2JzZXJ2ZXI8YW55Pj4gJiB7IGNsb3NlZDogdHJ1ZSB9ID0ge1xuICBjbG9zZWQ6IHRydWUsXG4gIG5leHQ6IG5vb3AsXG4gIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICBjb21wbGV0ZTogbm9vcCxcbn07XG4iLCAiLyoqXG4gKiBTeW1ib2wub2JzZXJ2YWJsZSBvciBhIHN0cmluZyBcIkBAb2JzZXJ2YWJsZVwiLiBVc2VkIGZvciBpbnRlcm9wXG4gKlxuICogQGRlcHJlY2F0ZWQgV2Ugd2lsbCBubyBsb25nZXIgYmUgZXhwb3J0aW5nIHRoaXMgc3ltYm9sIGluIHVwY29taW5nIHZlcnNpb25zIG9mIFJ4SlMuXG4gKiBJbnN0ZWFkIHBvbHlmaWxsIGFuZCB1c2UgU3ltYm9sLm9ic2VydmFibGUgZGlyZWN0bHkgKm9yKiB1c2UgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3ltYm9sLW9ic2VydmFibGVcbiAqL1xuZXhwb3J0IGNvbnN0IG9ic2VydmFibGU6IHN0cmluZyB8IHN5bWJvbCA9ICgoKSA9PiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZScpKCk7XG4iLCAiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHRha2VzIG9uZSBwYXJhbWV0ZXIgYW5kIGp1c3QgcmV0dXJucyBpdC4gU2ltcGx5IHB1dCxcbiAqIHRoaXMgaXMgbGlrZSBgPFQ+KHg6IFQpOiBUID0+IHhgLlxuICpcbiAqICMjIEV4YW1wbGVzXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgaW4gc29tZSBjYXNlcyB3aGVuIHVzaW5nIHRoaW5ncyBsaWtlIGBtZXJnZU1hcGBcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaW50ZXJ2YWwsIHRha2UsIG1hcCwgcmFuZ2UsIG1lcmdlTWFwLCBpZGVudGl0eSB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IHNvdXJjZSQgPSBpbnRlcnZhbCgxMDAwKS5waXBlKHRha2UoNSkpO1xuICpcbiAqIGNvbnN0IHJlc3VsdCQgPSBzb3VyY2UkLnBpcGUoXG4gKiAgIG1hcChpID0+IHJhbmdlKGkpKSxcbiAqICAgbWVyZ2VNYXAoaWRlbnRpdHkpIC8vIHNhbWUgYXMgbWVyZ2VNYXAoeCA9PiB4KVxuICogKTtcbiAqXG4gKiByZXN1bHQkLnN1YnNjcmliZSh7XG4gKiAgIG5leHQ6IGNvbnNvbGUubG9nXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE9yIHdoZW4geW91IHdhbnQgdG8gc2VsZWN0aXZlbHkgYXBwbHkgYW4gb3BlcmF0b3JcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaW50ZXJ2YWwsIHRha2UsIGlkZW50aXR5IH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3Qgc2hvdWxkTGltaXQgPSAoKSA9PiBNYXRoLnJhbmRvbSgpIDwgMC41O1xuICpcbiAqIGNvbnN0IHNvdXJjZSQgPSBpbnRlcnZhbCgxMDAwKTtcbiAqXG4gKiBjb25zdCByZXN1bHQkID0gc291cmNlJC5waXBlKHNob3VsZExpbWl0KCkgPyB0YWtlKDUpIDogaWRlbnRpdHkpO1xuICpcbiAqIHJlc3VsdCQuc3Vic2NyaWJlKHtcbiAqICAgbmV4dDogY29uc29sZS5sb2dcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHggQW55IHZhbHVlIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvblxuICogQHJldHVybnMgVGhlIHZhbHVlIHBhc3NlZCBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIHRvIHRoaXMgZnVuY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5PFQ+KHg6IFQpOiBUIHtcbiAgcmV0dXJuIHg7XG59XG4iLCAiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmltcG9ydCB7IFVuYXJ5RnVuY3Rpb24gfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwaXBlKCk6IHR5cGVvZiBpZGVudGl0eTtcbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQsIEE+KGZuMTogVW5hcnlGdW5jdGlvbjxULCBBPik6IFVuYXJ5RnVuY3Rpb248VCwgQT47XG5leHBvcnQgZnVuY3Rpb24gcGlwZTxULCBBLCBCPihmbjE6IFVuYXJ5RnVuY3Rpb248VCwgQT4sIGZuMjogVW5hcnlGdW5jdGlvbjxBLCBCPik6IFVuYXJ5RnVuY3Rpb248VCwgQj47XG5leHBvcnQgZnVuY3Rpb24gcGlwZTxULCBBLCBCLCBDPihmbjE6IFVuYXJ5RnVuY3Rpb248VCwgQT4sIGZuMjogVW5hcnlGdW5jdGlvbjxBLCBCPiwgZm4zOiBVbmFyeUZ1bmN0aW9uPEIsIEM+KTogVW5hcnlGdW5jdGlvbjxULCBDPjtcbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQsIEEsIEIsIEMsIEQ+KFxuICBmbjE6IFVuYXJ5RnVuY3Rpb248VCwgQT4sXG4gIGZuMjogVW5hcnlGdW5jdGlvbjxBLCBCPixcbiAgZm4zOiBVbmFyeUZ1bmN0aW9uPEIsIEM+LFxuICBmbjQ6IFVuYXJ5RnVuY3Rpb248QywgRD5cbik6IFVuYXJ5RnVuY3Rpb248VCwgRD47XG5leHBvcnQgZnVuY3Rpb24gcGlwZTxULCBBLCBCLCBDLCBELCBFPihcbiAgZm4xOiBVbmFyeUZ1bmN0aW9uPFQsIEE+LFxuICBmbjI6IFVuYXJ5RnVuY3Rpb248QSwgQj4sXG4gIGZuMzogVW5hcnlGdW5jdGlvbjxCLCBDPixcbiAgZm40OiBVbmFyeUZ1bmN0aW9uPEMsIEQ+LFxuICBmbjU6IFVuYXJ5RnVuY3Rpb248RCwgRT5cbik6IFVuYXJ5RnVuY3Rpb248VCwgRT47XG5leHBvcnQgZnVuY3Rpb24gcGlwZTxULCBBLCBCLCBDLCBELCBFLCBGPihcbiAgZm4xOiBVbmFyeUZ1bmN0aW9uPFQsIEE+LFxuICBmbjI6IFVuYXJ5RnVuY3Rpb248QSwgQj4sXG4gIGZuMzogVW5hcnlGdW5jdGlvbjxCLCBDPixcbiAgZm40OiBVbmFyeUZ1bmN0aW9uPEMsIEQ+LFxuICBmbjU6IFVuYXJ5RnVuY3Rpb248RCwgRT4sXG4gIGZuNjogVW5hcnlGdW5jdGlvbjxFLCBGPlxuKTogVW5hcnlGdW5jdGlvbjxULCBGPjtcbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQsIEEsIEIsIEMsIEQsIEUsIEYsIEc+KFxuICBmbjE6IFVuYXJ5RnVuY3Rpb248VCwgQT4sXG4gIGZuMjogVW5hcnlGdW5jdGlvbjxBLCBCPixcbiAgZm4zOiBVbmFyeUZ1bmN0aW9uPEIsIEM+LFxuICBmbjQ6IFVuYXJ5RnVuY3Rpb248QywgRD4sXG4gIGZuNTogVW5hcnlGdW5jdGlvbjxELCBFPixcbiAgZm42OiBVbmFyeUZ1bmN0aW9uPEUsIEY+LFxuICBmbjc6IFVuYXJ5RnVuY3Rpb248RiwgRz5cbik6IFVuYXJ5RnVuY3Rpb248VCwgRz47XG5leHBvcnQgZnVuY3Rpb24gcGlwZTxULCBBLCBCLCBDLCBELCBFLCBGLCBHLCBIPihcbiAgZm4xOiBVbmFyeUZ1bmN0aW9uPFQsIEE+LFxuICBmbjI6IFVuYXJ5RnVuY3Rpb248QSwgQj4sXG4gIGZuMzogVW5hcnlGdW5jdGlvbjxCLCBDPixcbiAgZm40OiBVbmFyeUZ1bmN0aW9uPEMsIEQ+LFxuICBmbjU6IFVuYXJ5RnVuY3Rpb248RCwgRT4sXG4gIGZuNjogVW5hcnlGdW5jdGlvbjxFLCBGPixcbiAgZm43OiBVbmFyeUZ1bmN0aW9uPEYsIEc+LFxuICBmbjg6IFVuYXJ5RnVuY3Rpb248RywgSD5cbik6IFVuYXJ5RnVuY3Rpb248VCwgSD47XG5leHBvcnQgZnVuY3Rpb24gcGlwZTxULCBBLCBCLCBDLCBELCBFLCBGLCBHLCBILCBJPihcbiAgZm4xOiBVbmFyeUZ1bmN0aW9uPFQsIEE+LFxuICBmbjI6IFVuYXJ5RnVuY3Rpb248QSwgQj4sXG4gIGZuMzogVW5hcnlGdW5jdGlvbjxCLCBDPixcbiAgZm40OiBVbmFyeUZ1bmN0aW9uPEMsIEQ+LFxuICBmbjU6IFVuYXJ5RnVuY3Rpb248RCwgRT4sXG4gIGZuNjogVW5hcnlGdW5jdGlvbjxFLCBGPixcbiAgZm43OiBVbmFyeUZ1bmN0aW9uPEYsIEc+LFxuICBmbjg6IFVuYXJ5RnVuY3Rpb248RywgSD4sXG4gIGZuOTogVW5hcnlGdW5jdGlvbjxILCBJPlxuKTogVW5hcnlGdW5jdGlvbjxULCBJPjtcbmV4cG9ydCBmdW5jdGlvbiBwaXBlPFQsIEEsIEIsIEMsIEQsIEUsIEYsIEcsIEgsIEk+KFxuICBmbjE6IFVuYXJ5RnVuY3Rpb248VCwgQT4sXG4gIGZuMjogVW5hcnlGdW5jdGlvbjxBLCBCPixcbiAgZm4zOiBVbmFyeUZ1bmN0aW9uPEIsIEM+LFxuICBmbjQ6IFVuYXJ5RnVuY3Rpb248QywgRD4sXG4gIGZuNTogVW5hcnlGdW5jdGlvbjxELCBFPixcbiAgZm42OiBVbmFyeUZ1bmN0aW9uPEUsIEY+LFxuICBmbjc6IFVuYXJ5RnVuY3Rpb248RiwgRz4sXG4gIGZuODogVW5hcnlGdW5jdGlvbjxHLCBIPixcbiAgZm45OiBVbmFyeUZ1bmN0aW9uPEgsIEk+LFxuICAuLi5mbnM6IFVuYXJ5RnVuY3Rpb248YW55LCBhbnk+W11cbik6IFVuYXJ5RnVuY3Rpb248VCwgdW5rbm93bj47XG5cbi8qKlxuICogcGlwZSgpIGNhbiBiZSBjYWxsZWQgb24gb25lIG9yIG1vcmUgZnVuY3Rpb25zLCBlYWNoIG9mIHdoaWNoIGNhbiB0YWtlIG9uZSBhcmd1bWVudCAoXCJVbmFyeUZ1bmN0aW9uXCIpXG4gKiBhbmQgdXNlcyBpdCB0byByZXR1cm4gYSB2YWx1ZS5cbiAqIEl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRha2VzIG9uZSBhcmd1bWVudCwgcGFzc2VzIGl0IHRvIHRoZSBmaXJzdCBVbmFyeUZ1bmN0aW9uLCBhbmQgdGhlblxuICogcGFzc2VzIHRoZSByZXN1bHQgdG8gdGhlIG5leHQgb25lLCBwYXNzZXMgdGhhdCByZXN1bHQgdG8gdGhlIG5leHQgb25lLCBhbmQgc28gb24uICBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoLi4uZm5zOiBBcnJheTxVbmFyeUZ1bmN0aW9uPGFueSwgYW55Pj4pOiBVbmFyeUZ1bmN0aW9uPGFueSwgYW55PiB7XG4gIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBmdW5jdGlvbiBwaXBlRnJvbUFycmF5PFQsIFI+KGZuczogQXJyYXk8VW5hcnlGdW5jdGlvbjxULCBSPj4pOiBVbmFyeUZ1bmN0aW9uPFQsIFI+IHtcbiAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaWRlbnRpdHkgYXMgVW5hcnlGdW5jdGlvbjxhbnksIGFueT47XG4gIH1cblxuICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmbnNbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQ6IFQpOiBSIHtcbiAgICByZXR1cm4gZm5zLnJlZHVjZSgocHJldjogYW55LCBmbjogVW5hcnlGdW5jdGlvbjxULCBSPikgPT4gZm4ocHJldiksIGlucHV0IGFzIGFueSk7XG4gIH07XG59XG4iLCAiaW1wb3J0IHsgT3BlcmF0b3IgfSBmcm9tICcuL09wZXJhdG9yJztcbmltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBUZWFyZG93bkxvZ2ljLCBPcGVyYXRvckZ1bmN0aW9uLCBTdWJzY3JpYmFibGUsIE9ic2VydmVyIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBwaXBlRnJvbUFycmF5IH0gZnJvbSAnLi91dGlsL3BpcGUnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2YgYW55IHNldCBvZiB2YWx1ZXMgb3ZlciBhbnkgYW1vdW50IG9mIHRpbWUuIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgYnVpbGRpbmcgYmxvY2tcbiAqIG9mIFJ4SlMuXG4gKlxuICogQGNsYXNzIE9ic2VydmFibGU8VD5cbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2VydmFibGU8VD4gaW1wbGVtZW50cyBTdWJzY3JpYmFibGU8VD4ge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsLCBkbyBub3QgdXNlIGRpcmVjdGx5LiBXaWxsIGJlIG1hZGUgaW50ZXJuYWwgaW4gdjguXG4gICAqL1xuICBzb3VyY2U6IE9ic2VydmFibGU8YW55PiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsLCBkbyBub3QgdXNlIGRpcmVjdGx5LiBXaWxsIGJlIG1hZGUgaW50ZXJuYWwgaW4gdjguXG4gICAqL1xuICBvcGVyYXRvcjogT3BlcmF0b3I8YW55LCBUPiB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHN1YnNjcmliZSB0aGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiB0aGUgT2JzZXJ2YWJsZSBpc1xuICAgKiBpbml0aWFsbHkgc3Vic2NyaWJlZCB0by4gVGhpcyBmdW5jdGlvbiBpcyBnaXZlbiBhIFN1YnNjcmliZXIsIHRvIHdoaWNoIG5ldyB2YWx1ZXNcbiAgICogY2FuIGJlIGBuZXh0YGVkLCBvciBhbiBgZXJyb3JgIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJhaXNlIGFuIGVycm9yLCBvclxuICAgKiBgY29tcGxldGVgIGNhbiBiZSBjYWxsZWQgdG8gbm90aWZ5IG9mIGEgc3VjY2Vzc2Z1bCBjb21wbGV0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3Vic2NyaWJlPzogKHRoaXM6IE9ic2VydmFibGU8VD4sIHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pID0+IFRlYXJkb3duTG9naWMpIHtcbiAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgfVxuICB9XG5cbiAgLy8gSEFDSzogU2luY2UgVHlwZVNjcmlwdCBpbmhlcml0cyBzdGF0aWMgcHJvcGVydGllcyB0b28sIHdlIGhhdmUgdG9cbiAgLy8gZmlnaHQgYWdhaW5zdCBUeXBlU2NyaXB0IGhlcmUgc28gU3ViamVjdCBjYW4gaGF2ZSBhIGRpZmZlcmVudCBzdGF0aWMgY3JlYXRlIHNpZ25hdHVyZVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBPYnNlcnZhYmxlIGJ5IGNhbGxpbmcgdGhlIE9ic2VydmFibGUgY29uc3RydWN0b3JcbiAgICogQG93bmVyIE9ic2VydmFibGVcbiAgICogQG1ldGhvZCBjcmVhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3Vic2NyaWJlPyB0aGUgc3Vic2NyaWJlciBmdW5jdGlvbiB0byBiZSBwYXNzZWQgdG8gdGhlIE9ic2VydmFibGUgY29uc3RydWN0b3JcbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gYSBuZXcgb2JzZXJ2YWJsZVxuICAgKiBAbm9jb2xsYXBzZVxuICAgKiBAZGVwcmVjYXRlZCBVc2UgYG5ldyBPYnNlcnZhYmxlKClgIGluc3RlYWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGU6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55ID0gPFQ+KHN1YnNjcmliZT86IChzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KSA9PiBUZWFyZG93bkxvZ2ljKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFQ+KHN1YnNjcmliZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgT2JzZXJ2YWJsZSwgd2l0aCB0aGlzIE9ic2VydmFibGUgaW5zdGFuY2UgYXMgdGhlIHNvdXJjZSwgYW5kIHRoZSBwYXNzZWRcbiAgICogb3BlcmF0b3IgZGVmaW5lZCBhcyB0aGUgbmV3IG9ic2VydmFibGUncyBvcGVyYXRvci5cbiAgICogQG1ldGhvZCBsaWZ0XG4gICAqIEBwYXJhbSBvcGVyYXRvciB0aGUgb3BlcmF0b3IgZGVmaW5pbmcgdGhlIG9wZXJhdGlvbiB0byB0YWtlIG9uIHRoZSBvYnNlcnZhYmxlXG4gICAqIEByZXR1cm4gYSBuZXcgb2JzZXJ2YWJsZSB3aXRoIHRoZSBPcGVyYXRvciBhcHBsaWVkXG4gICAqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbCwgZG8gbm90IHVzZSBkaXJlY3RseS4gV2lsbCBiZSBtYWRlIGludGVybmFsIGluIHY4LlxuICAgKiBJZiB5b3UgaGF2ZSBpbXBsZW1lbnRlZCBhbiBvcGVyYXRvciB1c2luZyBgbGlmdGAsIGl0IGlzIHJlY29tbWVuZGVkIHRoYXQgeW91IGNyZWF0ZSBhblxuICAgKiBvcGVyYXRvciBieSBzaW1wbHkgcmV0dXJuaW5nIGBuZXcgT2JzZXJ2YWJsZSgpYCBkaXJlY3RseS4gU2VlIFwiQ3JlYXRpbmcgbmV3IG9wZXJhdG9ycyBmcm9tXG4gICAqIHNjcmF0Y2hcIiBzZWN0aW9uIGhlcmU6IGh0dHBzOi8vcnhqcy5kZXYvZ3VpZGUvb3BlcmF0b3JzXG4gICAqL1xuICBsaWZ0PFI+KG9wZXJhdG9yPzogT3BlcmF0b3I8VCwgUj4pOiBPYnNlcnZhYmxlPFI+IHtcbiAgICBjb25zdCBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGU8Uj4oKTtcbiAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICB9XG5cbiAgc3Vic2NyaWJlKG9ic2VydmVyT3JOZXh0PzogUGFydGlhbDxPYnNlcnZlcjxUPj4gfCAoKHZhbHVlOiBUKSA9PiB2b2lkKSk6IFN1YnNjcmlwdGlvbjtcbiAgLyoqIEBkZXByZWNhdGVkIEluc3RlYWQgb2YgcGFzc2luZyBzZXBhcmF0ZSBjYWxsYmFjayBhcmd1bWVudHMsIHVzZSBhbiBvYnNlcnZlciBhcmd1bWVudC4gU2lnbmF0dXJlcyB0YWtpbmcgc2VwYXJhdGUgY2FsbGJhY2sgYXJndW1lbnRzIHdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvc3Vic2NyaWJlLWFyZ3VtZW50cyAqL1xuICBzdWJzY3JpYmUobmV4dD86ICgodmFsdWU6IFQpID0+IHZvaWQpIHwgbnVsbCwgZXJyb3I/OiAoKGVycm9yOiBhbnkpID0+IHZvaWQpIHwgbnVsbCwgY29tcGxldGU/OiAoKCkgPT4gdm9pZCkgfCBudWxsKTogU3Vic2NyaXB0aW9uO1xuICAvKipcbiAgICogSW52b2tlcyBhbiBleGVjdXRpb24gb2YgYW4gT2JzZXJ2YWJsZSBhbmQgcmVnaXN0ZXJzIE9ic2VydmVyIGhhbmRsZXJzIGZvciBub3RpZmljYXRpb25zIGl0IHdpbGwgZW1pdC5cbiAgICpcbiAgICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlVzZSBpdCB3aGVuIHlvdSBoYXZlIGFsbCB0aGVzZSBPYnNlcnZhYmxlcywgYnV0IHN0aWxsIG5vdGhpbmcgaXMgaGFwcGVuaW5nLjwvc3Bhbj5cbiAgICpcbiAgICogYHN1YnNjcmliZWAgaXMgbm90IGEgcmVndWxhciBvcGVyYXRvciwgYnV0IGEgbWV0aG9kIHRoYXQgY2FsbHMgT2JzZXJ2YWJsZSdzIGludGVybmFsIGBzdWJzY3JpYmVgIGZ1bmN0aW9uLiBJdFxuICAgKiBtaWdodCBiZSBmb3IgZXhhbXBsZSBhIGZ1bmN0aW9uIHRoYXQgeW91IHBhc3NlZCB0byBPYnNlcnZhYmxlJ3MgY29uc3RydWN0b3IsIGJ1dCBtb3N0IG9mIHRoZSB0aW1lIGl0IGlzXG4gICAqIGEgbGlicmFyeSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggZGVmaW5lcyB3aGF0IHdpbGwgYmUgZW1pdHRlZCBieSBhbiBPYnNlcnZhYmxlLCBhbmQgd2hlbiBpdCBiZSB3aWxsIGVtaXR0ZWQuIFRoaXMgbWVhbnNcbiAgICogdGhhdCBjYWxsaW5nIGBzdWJzY3JpYmVgIGlzIGFjdHVhbGx5IHRoZSBtb21lbnQgd2hlbiBPYnNlcnZhYmxlIHN0YXJ0cyBpdHMgd29yaywgbm90IHdoZW4gaXQgaXMgY3JlYXRlZCwgYXMgaXQgaXMgb2Z0ZW5cbiAgICogdGhlIHRob3VnaHQuXG4gICAqXG4gICAqIEFwYXJ0IGZyb20gc3RhcnRpbmcgdGhlIGV4ZWN1dGlvbiBvZiBhbiBPYnNlcnZhYmxlLCB0aGlzIG1ldGhvZCBhbGxvd3MgeW91IHRvIGxpc3RlbiBmb3IgdmFsdWVzXG4gICAqIHRoYXQgYW4gT2JzZXJ2YWJsZSBlbWl0cywgYXMgd2VsbCBhcyBmb3Igd2hlbiBpdCBjb21wbGV0ZXMgb3IgZXJyb3JzLiBZb3UgY2FuIGFjaGlldmUgdGhpcyBpbiB0d29cbiAgICogb2YgdGhlIGZvbGxvd2luZyB3YXlzLlxuICAgKlxuICAgKiBUaGUgZmlyc3Qgd2F5IGlzIGNyZWF0aW5nIGFuIG9iamVjdCB0aGF0IGltcGxlbWVudHMge0BsaW5rIE9ic2VydmVyfSBpbnRlcmZhY2UuIEl0IHNob3VsZCBoYXZlIG1ldGhvZHNcbiAgICogZGVmaW5lZCBieSB0aGF0IGludGVyZmFjZSwgYnV0IG5vdGUgdGhhdCBpdCBzaG91bGQgYmUganVzdCBhIHJlZ3VsYXIgSmF2YVNjcmlwdCBvYmplY3QsIHdoaWNoIHlvdSBjYW4gY3JlYXRlXG4gICAqIHlvdXJzZWxmIGluIGFueSB3YXkgeW91IHdhbnQgKEVTNiBjbGFzcywgY2xhc3NpYyBmdW5jdGlvbiBjb25zdHJ1Y3Rvciwgb2JqZWN0IGxpdGVyYWwgZXRjLikuIEluIHBhcnRpY3VsYXIsIGRvXG4gICAqIG5vdCBhdHRlbXB0IHRvIHVzZSBhbnkgUnhKUyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRvIGNyZWF0ZSBPYnNlcnZlcnMgLSB5b3UgZG9uJ3QgbmVlZCB0aGVtLiBSZW1lbWJlciBhbHNvXG4gICAqIHRoYXQgeW91ciBvYmplY3QgZG9lcyBub3QgaGF2ZSB0byBpbXBsZW1lbnQgYWxsIG1ldGhvZHMuIElmIHlvdSBmaW5kIHlvdXJzZWxmIGNyZWF0aW5nIGEgbWV0aG9kIHRoYXQgZG9lc24ndFxuICAgKiBkbyBhbnl0aGluZywgeW91IGNhbiBzaW1wbHkgb21pdCBpdC4gTm90ZSBob3dldmVyLCBpZiB0aGUgYGVycm9yYCBtZXRob2QgaXMgbm90IHByb3ZpZGVkIGFuZCBhbiBlcnJvciBoYXBwZW5zLFxuICAgKiBpdCB3aWxsIGJlIHRocm93biBhc3luY2hyb25vdXNseS4gRXJyb3JzIHRocm93biBhc3luY2hyb25vdXNseSBjYW5ub3QgYmUgY2F1Z2h0IHVzaW5nIGB0cnlgL2BjYXRjaGAuIEluc3RlYWQsXG4gICAqIHVzZSB0aGUge0BsaW5rIG9uVW5oYW5kbGVkRXJyb3J9IGNvbmZpZ3VyYXRpb24gb3B0aW9uIG9yIHVzZSBhIHJ1bnRpbWUgaGFuZGxlciAobGlrZSBgd2luZG93Lm9uZXJyb3JgIG9yXG4gICAqIGBwcm9jZXNzLm9uKCdlcnJvcilgKSB0byBiZSBub3RpZmllZCBvZiB1bmhhbmRsZWQgZXJyb3JzLiBCZWNhdXNlIG9mIHRoaXMsIGl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgcHJvdmlkZVxuICAgKiBhbiBgZXJyb3JgIG1ldGhvZCB0byBhdm9pZCBtaXNzaW5nIHRocm93biBlcnJvcnMuXG4gICAqXG4gICAqIFRoZSBzZWNvbmQgd2F5IGlzIHRvIGdpdmUgdXAgb24gT2JzZXJ2ZXIgb2JqZWN0IGFsdG9nZXRoZXIgYW5kIHNpbXBseSBwcm92aWRlIGNhbGxiYWNrIGZ1bmN0aW9ucyBpbiBwbGFjZSBvZiBpdHMgbWV0aG9kcy5cbiAgICogVGhpcyBtZWFucyB5b3UgY2FuIHByb3ZpZGUgdGhyZWUgZnVuY3Rpb25zIGFzIGFyZ3VtZW50cyB0byBgc3Vic2NyaWJlYCwgd2hlcmUgdGhlIGZpcnN0IGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnRcbiAgICogb2YgYSBgbmV4dGAgbWV0aG9kLCB0aGUgc2Vjb25kIG9mIGFuIGBlcnJvcmAgbWV0aG9kIGFuZCB0aGUgdGhpcmQgb2YgYSBgY29tcGxldGVgIG1ldGhvZC4gSnVzdCBhcyBpbiBjYXNlIG9mIGFuIE9ic2VydmVyLFxuICAgKiBpZiB5b3UgZG8gbm90IG5lZWQgdG8gbGlzdGVuIGZvciBzb21ldGhpbmcsIHlvdSBjYW4gb21pdCBhIGZ1bmN0aW9uIGJ5IHBhc3NpbmcgYHVuZGVmaW5lZGAgb3IgYG51bGxgLFxuICAgKiBzaW5jZSBgc3Vic2NyaWJlYCByZWNvZ25pemVzIHRoZXNlIGZ1bmN0aW9ucyBieSB3aGVyZSB0aGV5IHdlcmUgcGxhY2VkIGluIGZ1bmN0aW9uIGNhbGwuIFdoZW4gaXQgY29tZXNcbiAgICogdG8gdGhlIGBlcnJvcmAgZnVuY3Rpb24sIGFzIHdpdGggYW4gT2JzZXJ2ZXIsIGlmIG5vdCBwcm92aWRlZCwgZXJyb3JzIGVtaXR0ZWQgYnkgYW4gT2JzZXJ2YWJsZSB3aWxsIGJlIHRocm93biBhc3luY2hyb25vdXNseS5cbiAgICpcbiAgICogWW91IGNhbiwgaG93ZXZlciwgc3Vic2NyaWJlIHdpdGggbm8gcGFyYW1ldGVycyBhdCBhbGwuIFRoaXMgbWF5IGJlIHRoZSBjYXNlIHdoZXJlIHlvdSdyZSBub3QgaW50ZXJlc3RlZCBpbiB0ZXJtaW5hbCBldmVudHNcbiAgICogYW5kIHlvdSBhbHNvIGhhbmRsZWQgZW1pc3Npb25zIGludGVybmFsbHkgYnkgdXNpbmcgb3BlcmF0b3JzIChlLmcuIHVzaW5nIGB0YXBgKS5cbiAgICpcbiAgICogV2hpY2hldmVyIHN0eWxlIG9mIGNhbGxpbmcgYHN1YnNjcmliZWAgeW91IHVzZSwgaW4gYm90aCBjYXNlcyBpdCByZXR1cm5zIGEgU3Vic2NyaXB0aW9uIG9iamVjdC5cbiAgICogVGhpcyBvYmplY3QgYWxsb3dzIHlvdSB0byBjYWxsIGB1bnN1YnNjcmliZWAgb24gaXQsIHdoaWNoIGluIHR1cm4gd2lsbCBzdG9wIHRoZSB3b3JrIHRoYXQgYW4gT2JzZXJ2YWJsZSBkb2VzIGFuZCB3aWxsIGNsZWFuXG4gICAqIHVwIGFsbCByZXNvdXJjZXMgdGhhdCBhbiBPYnNlcnZhYmxlIHVzZWQuIE5vdGUgdGhhdCBjYW5jZWxsaW5nIGEgc3Vic2NyaXB0aW9uIHdpbGwgbm90IGNhbGwgYGNvbXBsZXRlYCBjYWxsYmFja1xuICAgKiBwcm92aWRlZCB0byBgc3Vic2NyaWJlYCBmdW5jdGlvbiwgd2hpY2ggaXMgcmVzZXJ2ZWQgZm9yIGEgcmVndWxhciBjb21wbGV0aW9uIHNpZ25hbCB0aGF0IGNvbWVzIGZyb20gYW4gT2JzZXJ2YWJsZS5cbiAgICpcbiAgICogUmVtZW1iZXIgdGhhdCBjYWxsYmFja3MgcHJvdmlkZWQgdG8gYHN1YnNjcmliZWAgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseS5cbiAgICogSXQgaXMgYW4gT2JzZXJ2YWJsZSBpdHNlbGYgdGhhdCBkZWNpZGVzIHdoZW4gdGhlc2UgZnVuY3Rpb25zIHdpbGwgYmUgY2FsbGVkLiBGb3IgZXhhbXBsZSB7QGxpbmsgb2Z9XG4gICAqIGJ5IGRlZmF1bHQgZW1pdHMgYWxsIGl0cyB2YWx1ZXMgc3luY2hyb25vdXNseS4gQWx3YXlzIGNoZWNrIGRvY3VtZW50YXRpb24gZm9yIGhvdyBnaXZlbiBPYnNlcnZhYmxlXG4gICAqIHdpbGwgYmVoYXZlIHdoZW4gc3Vic2NyaWJlZCBhbmQgaWYgaXRzIGRlZmF1bHQgYmVoYXZpb3IgY2FuIGJlIG1vZGlmaWVkIHdpdGggYSBgc2NoZWR1bGVyYC5cbiAgICpcbiAgICogIyMjIyBFeGFtcGxlc1xuICAgKlxuICAgKiBTdWJzY3JpYmUgd2l0aCBhbiB7QGxpbmsgZ3VpZGUvb2JzZXJ2ZXIgT2JzZXJ2ZXJ9XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XG4gICAqXG4gICAqIGNvbnN0IHN1bU9ic2VydmVyID0ge1xuICAgKiAgIHN1bTogMCxcbiAgICogICBuZXh0KHZhbHVlKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQWRkaW5nOiAnICsgdmFsdWUpO1xuICAgKiAgICAgdGhpcy5zdW0gPSB0aGlzLnN1bSArIHZhbHVlO1xuICAgKiAgIH0sXG4gICAqICAgZXJyb3IoKSB7XG4gICAqICAgICAvLyBXZSBhY3R1YWxseSBjb3VsZCBqdXN0IHJlbW92ZSB0aGlzIG1ldGhvZCxcbiAgICogICAgIC8vIHNpbmNlIHdlIGRvIG5vdCByZWFsbHkgY2FyZSBhYm91dCBlcnJvcnMgcmlnaHQgbm93LlxuICAgKiAgIH0sXG4gICAqICAgY29tcGxldGUoKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnU3VtIGVxdWFsczogJyArIHRoaXMuc3VtKTtcbiAgICogICB9XG4gICAqIH07XG4gICAqXG4gICAqIG9mKDEsIDIsIDMpIC8vIFN5bmNocm9ub3VzbHkgZW1pdHMgMSwgMiwgMyBhbmQgdGhlbiBjb21wbGV0ZXMuXG4gICAqICAgLnN1YnNjcmliZShzdW1PYnNlcnZlcik7XG4gICAqXG4gICAqIC8vIExvZ3M6XG4gICAqIC8vICdBZGRpbmc6IDEnXG4gICAqIC8vICdBZGRpbmc6IDInXG4gICAqIC8vICdBZGRpbmc6IDMnXG4gICAqIC8vICdTdW0gZXF1YWxzOiA2J1xuICAgKiBgYGBcbiAgICpcbiAgICogU3Vic2NyaWJlIHdpdGggZnVuY3Rpb25zICh7QGxpbmsgZGVwcmVjYXRpb25zL3N1YnNjcmliZS1hcmd1bWVudHMgZGVwcmVjYXRlZH0pXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGltcG9ydCB7IG9mIH0gZnJvbSAncnhqcydcbiAgICpcbiAgICogbGV0IHN1bSA9IDA7XG4gICAqXG4gICAqIG9mKDEsIDIsIDMpLnN1YnNjcmliZShcbiAgICogICB2YWx1ZSA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQWRkaW5nOiAnICsgdmFsdWUpO1xuICAgKiAgICAgc3VtID0gc3VtICsgdmFsdWU7XG4gICAqICAgfSxcbiAgICogICB1bmRlZmluZWQsXG4gICAqICAgKCkgPT4gY29uc29sZS5sb2coJ1N1bSBlcXVhbHM6ICcgKyBzdW0pXG4gICAqICk7XG4gICAqXG4gICAqIC8vIExvZ3M6XG4gICAqIC8vICdBZGRpbmc6IDEnXG4gICAqIC8vICdBZGRpbmc6IDInXG4gICAqIC8vICdBZGRpbmc6IDMnXG4gICAqIC8vICdTdW0gZXF1YWxzOiA2J1xuICAgKiBgYGBcbiAgICpcbiAgICogQ2FuY2VsIGEgc3Vic2NyaXB0aW9uXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGltcG9ydCB7IGludGVydmFsIH0gZnJvbSAncnhqcyc7XG4gICAqXG4gICAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGludGVydmFsKDEwMDApLnN1YnNjcmliZSh7XG4gICAqICAgbmV4dChudW0pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKG51bSlcbiAgICogICB9LFxuICAgKiAgIGNvbXBsZXRlKCkge1xuICAgKiAgICAgLy8gV2lsbCBub3QgYmUgY2FsbGVkLCBldmVuIHdoZW4gY2FuY2VsbGluZyBzdWJzY3JpcHRpb24uXG4gICAqICAgICBjb25zb2xlLmxvZygnY29tcGxldGVkIScpO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqXG4gICAqIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgKiAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgKiAgIGNvbnNvbGUubG9nKCd1bnN1YnNjcmliZWQhJyk7XG4gICAqIH0sIDI1MDApO1xuICAgKlxuICAgKiAvLyBMb2dzOlxuICAgKiAvLyAwIGFmdGVyIDFzXG4gICAqIC8vIDEgYWZ0ZXIgMnNcbiAgICogLy8gJ3Vuc3Vic2NyaWJlZCEnIGFmdGVyIDIuNXNcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7T2JzZXJ2ZXJ8RnVuY3Rpb259IG9ic2VydmVyT3JOZXh0IChvcHRpb25hbCkgRWl0aGVyIGFuIG9ic2VydmVyIHdpdGggbWV0aG9kcyB0byBiZSBjYWxsZWQsXG4gICAqIG9yIHRoZSBmaXJzdCBvZiB0aHJlZSBwb3NzaWJsZSBoYW5kbGVycywgd2hpY2ggaXMgdGhlIGhhbmRsZXIgZm9yIGVhY2ggdmFsdWUgZW1pdHRlZCBmcm9tIHRoZSBzdWJzY3JpYmVkXG4gICAqIE9ic2VydmFibGUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVycm9yIChvcHRpb25hbCkgQSBoYW5kbGVyIGZvciBhIHRlcm1pbmFsIGV2ZW50IHJlc3VsdGluZyBmcm9tIGFuIGVycm9yLiBJZiBubyBlcnJvciBoYW5kbGVyIGlzIHByb3ZpZGVkLFxuICAgKiB0aGUgZXJyb3Igd2lsbCBiZSB0aHJvd24gYXN5bmNocm9ub3VzbHkgYXMgdW5oYW5kbGVkLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wbGV0ZSAob3B0aW9uYWwpIEEgaGFuZGxlciBmb3IgYSB0ZXJtaW5hbCBldmVudCByZXN1bHRpbmcgZnJvbSBzdWNjZXNzZnVsIGNvbXBsZXRpb24uXG4gICAqIEByZXR1cm4ge1N1YnNjcmlwdGlvbn0gYSBzdWJzY3JpcHRpb24gcmVmZXJlbmNlIHRvIHRoZSByZWdpc3RlcmVkIGhhbmRsZXJzXG4gICAqIEBtZXRob2Qgc3Vic2NyaWJlXG4gICAqL1xuICBzdWJzY3JpYmUoXG4gICAgb2JzZXJ2ZXJPck5leHQ/OiBQYXJ0aWFsPE9ic2VydmVyPFQ+PiB8ICgodmFsdWU6IFQpID0+IHZvaWQpIHwgbnVsbCxcbiAgICBlcnJvcj86ICgoZXJyb3I6IGFueSkgPT4gdm9pZCkgfCBudWxsLFxuICAgIGNvbXBsZXRlPzogKCgpID0+IHZvaWQpIHwgbnVsbFxuICApOiBTdWJzY3JpcHRpb24ge1xuICAgIGNvbnN0IHN1YnNjcmliZXIgPSBpc1N1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQpID8gb2JzZXJ2ZXJPck5leHQgOiBuZXcgU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG5cbiAgICBlcnJvckNvbnRleHQoKCkgPT4ge1xuICAgICAgY29uc3QgeyBvcGVyYXRvciwgc291cmNlIH0gPSB0aGlzO1xuICAgICAgc3Vic2NyaWJlci5hZGQoXG4gICAgICAgIG9wZXJhdG9yXG4gICAgICAgICAgPyAvLyBXZSdyZSBkZWFsaW5nIHdpdGggYSBzdWJzY3JpcHRpb24gaW4gdGhlXG4gICAgICAgICAgICAvLyBvcGVyYXRvciBjaGFpbiB0byBvbmUgb2Ygb3VyIGxpZnRlZCBvcGVyYXRvcnMuXG4gICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgID8gLy8gSWYgYHNvdXJjZWAgaGFzIGEgdmFsdWUsIGJ1dCBgb3BlcmF0b3JgIGRvZXMgbm90LCBzb21ldGhpbmcgdGhhdFxuICAgICAgICAgICAgLy8gaGFkIGludGltYXRlIGtub3dsZWRnZSBvZiBvdXIgQVBJLCBsaWtlIG91ciBgU3ViamVjdGAsIG11c3QgaGF2ZVxuICAgICAgICAgICAgLy8gc2V0IGl0LiBXZSdyZSBnb2luZyB0byBqdXN0IGNhbGwgYF9zdWJzY3JpYmVgIGRpcmVjdGx5LlxuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgOiAvLyBJbiBhbGwgb3RoZXIgY2FzZXMsIHdlJ3JlIGxpa2VseSB3cmFwcGluZyBhIHVzZXItcHJvdmlkZWQgaW5pdGlhbGl6ZXJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uLCBzbyB3ZSBuZWVkIHRvIGNhdGNoIGVycm9ycyBhbmQgaGFuZGxlIHRoZW0gYXBwcm9wcmlhdGVseS5cbiAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgX3RyeVN1YnNjcmliZShzaW5rOiBTdWJzY3JpYmVyPFQ+KTogVGVhcmRvd25Mb2dpYyB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIHJldHVybiBhbnl0aGluZyBpbiB0aGlzIGNhc2UsXG4gICAgICAvLyBiZWNhdXNlIGl0J3MganVzdCBnb2luZyB0byB0cnkgdG8gYGFkZCgpYCB0byBhIHN1YnNjcmlwdGlvblxuICAgICAgLy8gYWJvdmUuXG4gICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYXMgYSBOT04tQ0FOQ0VMTEFCTEUgbWVhbnMgb2Ygc3Vic2NyaWJpbmcgdG8gYW4gb2JzZXJ2YWJsZSwgZm9yIHVzZSB3aXRoXG4gICAqIEFQSXMgdGhhdCBleHBlY3QgcHJvbWlzZXMsIGxpa2UgYGFzeW5jL2F3YWl0YC4gWW91IGNhbm5vdCB1bnN1YnNjcmliZSBmcm9tIHRoaXMuXG4gICAqXG4gICAqICoqV0FSTklORyoqOiBPbmx5IHVzZSB0aGlzIHdpdGggb2JzZXJ2YWJsZXMgeW91ICprbm93KiB3aWxsIGNvbXBsZXRlLiBJZiB0aGUgc291cmNlXG4gICAqIG9ic2VydmFibGUgZG9lcyBub3QgY29tcGxldGUsIHlvdSB3aWxsIGVuZCB1cCB3aXRoIGEgcHJvbWlzZSB0aGF0IGlzIGh1bmcgdXAsIGFuZFxuICAgKiBwb3RlbnRpYWxseSBhbGwgb2YgdGhlIHN0YXRlIG9mIGFuIGFzeW5jIGZ1bmN0aW9uIGhhbmdpbmcgb3V0IGluIG1lbW9yeS4gVG8gYXZvaWRcbiAgICogdGhpcyBzaXR1YXRpb24sIGxvb2sgaW50byBhZGRpbmcgc29tZXRoaW5nIGxpa2Uge0BsaW5rIHRpbWVvdXR9LCB7QGxpbmsgdGFrZX0sXG4gICAqIHtAbGluayB0YWtlV2hpbGV9LCBvciB7QGxpbmsgdGFrZVVudGlsfSBhbW9uZ3N0IG90aGVycy5cbiAgICpcbiAgICogIyMjIyBFeGFtcGxlXG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGltcG9ydCB7IGludGVydmFsLCB0YWtlIH0gZnJvbSAncnhqcyc7XG4gICAqXG4gICAqIGNvbnN0IHNvdXJjZSQgPSBpbnRlcnZhbCgxMDAwKS5waXBlKHRha2UoNCkpO1xuICAgKlxuICAgKiBhc3luYyBmdW5jdGlvbiBnZXRUb3RhbCgpIHtcbiAgICogICBsZXQgdG90YWwgPSAwO1xuICAgKlxuICAgKiAgIGF3YWl0IHNvdXJjZSQuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAqICAgICB0b3RhbCArPSB2YWx1ZTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdvYnNlcnZhYmxlIC0+ICcgKyB2YWx1ZSk7XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgcmV0dXJuIHRvdGFsO1xuICAgKiB9XG4gICAqXG4gICAqIGdldFRvdGFsKCkudGhlbihcbiAgICogICB0b3RhbCA9PiBjb25zb2xlLmxvZygnVG90YWw6ICcgKyB0b3RhbClcbiAgICogKTtcbiAgICpcbiAgICogLy8gRXhwZWN0ZWQ6XG4gICAqIC8vICdvYnNlcnZhYmxlIC0+IDAnXG4gICAqIC8vICdvYnNlcnZhYmxlIC0+IDEnXG4gICAqIC8vICdvYnNlcnZhYmxlIC0+IDInXG4gICAqIC8vICdvYnNlcnZhYmxlIC0+IDMnXG4gICAqIC8vICdUb3RhbDogNidcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBuZXh0IGEgaGFuZGxlciBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBvYnNlcnZhYmxlXG4gICAqIEByZXR1cm4gYSBwcm9taXNlIHRoYXQgZWl0aGVyIHJlc29sdmVzIG9uIG9ic2VydmFibGUgY29tcGxldGlvbiBvclxuICAgKiAgcmVqZWN0cyB3aXRoIHRoZSBoYW5kbGVkIGVycm9yXG4gICAqL1xuICBmb3JFYWNoKG5leHQ6ICh2YWx1ZTogVCkgPT4gdm9pZCk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBuZXh0IGEgaGFuZGxlciBmb3IgZWFjaCB2YWx1ZSBlbWl0dGVkIGJ5IHRoZSBvYnNlcnZhYmxlXG4gICAqIEBwYXJhbSBwcm9taXNlQ3RvciBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHVzZWQgdG8gaW5zdGFudGlhdGUgdGhlIFByb21pc2VcbiAgICogQHJldHVybiBhIHByb21pc2UgdGhhdCBlaXRoZXIgcmVzb2x2ZXMgb24gb2JzZXJ2YWJsZSBjb21wbGV0aW9uIG9yXG4gICAqICByZWplY3RzIHdpdGggdGhlIGhhbmRsZWQgZXJyb3JcbiAgICogQGRlcHJlY2F0ZWQgUGFzc2luZyBhIFByb21pc2UgY29uc3RydWN0b3Igd2lsbCBubyBsb25nZXIgYmUgYXZhaWxhYmxlXG4gICAqIGluIHVwY29taW5nIHZlcnNpb25zIG9mIFJ4SlMuIFRoaXMgaXMgYmVjYXVzZSBpdCBhZGRzIHdlaWdodCB0byB0aGUgbGlicmFyeSwgZm9yIHZlcnlcbiAgICogbGl0dGxlIGJlbmVmaXQuIElmIHlvdSBuZWVkIHRoaXMgZnVuY3Rpb25hbGl0eSwgaXQgaXMgcmVjb21tZW5kZWQgdGhhdCB5b3UgZWl0aGVyXG4gICAqIHBvbHlmaWxsIFByb21pc2UsIG9yIHlvdSBjcmVhdGUgYW4gYWRhcHRlciB0byBjb252ZXJ0IHRoZSByZXR1cm5lZCBuYXRpdmUgcHJvbWlzZVxuICAgKiB0byB3aGF0ZXZlciBwcm9taXNlIGltcGxlbWVudGF0aW9uIHlvdSB3YW50ZWQuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAgICovXG4gIGZvckVhY2gobmV4dDogKHZhbHVlOiBUKSA9PiB2b2lkLCBwcm9taXNlQ3RvcjogUHJvbWlzZUNvbnN0cnVjdG9yTGlrZSk6IFByb21pc2U8dm9pZD47XG5cbiAgZm9yRWFjaChuZXh0OiAodmFsdWU6IFQpID0+IHZvaWQsIHByb21pc2VDdG9yPzogUHJvbWlzZUNvbnN0cnVjdG9yTGlrZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuXG4gICAgcmV0dXJuIG5ldyBwcm9taXNlQ3Rvcjx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyPFQ+KHtcbiAgICAgICAgbmV4dDogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSkgYXMgUHJvbWlzZTx2b2lkPjtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9zdWJzY3JpYmUoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxhbnk+KTogVGVhcmRvd25Mb2dpYyB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlPy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gIH1cblxuICAvKipcbiAgICogQW4gaW50ZXJvcCBwb2ludCBkZWZpbmVkIGJ5IHRoZSBlczctb2JzZXJ2YWJsZSBzcGVjIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbiAgICogQG1ldGhvZCBTeW1ib2wub2JzZXJ2YWJsZVxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSB0aGlzIGluc3RhbmNlIG9mIHRoZSBvYnNlcnZhYmxlXG4gICAqL1xuICBbU3ltYm9sX29ic2VydmFibGVdKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4gIHBpcGUoKTogT2JzZXJ2YWJsZTxUPjtcbiAgcGlwZTxBPihvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4pOiBPYnNlcnZhYmxlPEE+O1xuICBwaXBlPEEsIEI+KG9wMTogT3BlcmF0b3JGdW5jdGlvbjxULCBBPiwgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+KTogT2JzZXJ2YWJsZTxCPjtcbiAgcGlwZTxBLCBCLCBDPihvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4sIG9wMjogT3BlcmF0b3JGdW5jdGlvbjxBLCBCPiwgb3AzOiBPcGVyYXRvckZ1bmN0aW9uPEIsIEM+KTogT2JzZXJ2YWJsZTxDPjtcbiAgcGlwZTxBLCBCLCBDLCBEPihcbiAgICBvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4sXG4gICAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICAgIG9wMzogT3BlcmF0b3JGdW5jdGlvbjxCLCBDPixcbiAgICBvcDQ6IE9wZXJhdG9yRnVuY3Rpb248QywgRD5cbiAgKTogT2JzZXJ2YWJsZTxEPjtcbiAgcGlwZTxBLCBCLCBDLCBELCBFPihcbiAgICBvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4sXG4gICAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICAgIG9wMzogT3BlcmF0b3JGdW5jdGlvbjxCLCBDPixcbiAgICBvcDQ6IE9wZXJhdG9yRnVuY3Rpb248QywgRD4sXG4gICAgb3A1OiBPcGVyYXRvckZ1bmN0aW9uPEQsIEU+XG4gICk6IE9ic2VydmFibGU8RT47XG4gIHBpcGU8QSwgQiwgQywgRCwgRSwgRj4oXG4gICAgb3AxOiBPcGVyYXRvckZ1bmN0aW9uPFQsIEE+LFxuICAgIG9wMjogT3BlcmF0b3JGdW5jdGlvbjxBLCBCPixcbiAgICBvcDM6IE9wZXJhdG9yRnVuY3Rpb248QiwgQz4sXG4gICAgb3A0OiBPcGVyYXRvckZ1bmN0aW9uPEMsIEQ+LFxuICAgIG9wNTogT3BlcmF0b3JGdW5jdGlvbjxELCBFPixcbiAgICBvcDY6IE9wZXJhdG9yRnVuY3Rpb248RSwgRj5cbiAgKTogT2JzZXJ2YWJsZTxGPjtcbiAgcGlwZTxBLCBCLCBDLCBELCBFLCBGLCBHPihcbiAgICBvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4sXG4gICAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICAgIG9wMzogT3BlcmF0b3JGdW5jdGlvbjxCLCBDPixcbiAgICBvcDQ6IE9wZXJhdG9yRnVuY3Rpb248QywgRD4sXG4gICAgb3A1OiBPcGVyYXRvckZ1bmN0aW9uPEQsIEU+LFxuICAgIG9wNjogT3BlcmF0b3JGdW5jdGlvbjxFLCBGPixcbiAgICBvcDc6IE9wZXJhdG9yRnVuY3Rpb248RiwgRz5cbiAgKTogT2JzZXJ2YWJsZTxHPjtcbiAgcGlwZTxBLCBCLCBDLCBELCBFLCBGLCBHLCBIPihcbiAgICBvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4sXG4gICAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICAgIG9wMzogT3BlcmF0b3JGdW5jdGlvbjxCLCBDPixcbiAgICBvcDQ6IE9wZXJhdG9yRnVuY3Rpb248QywgRD4sXG4gICAgb3A1OiBPcGVyYXRvckZ1bmN0aW9uPEQsIEU+LFxuICAgIG9wNjogT3BlcmF0b3JGdW5jdGlvbjxFLCBGPixcbiAgICBvcDc6IE9wZXJhdG9yRnVuY3Rpb248RiwgRz4sXG4gICAgb3A4OiBPcGVyYXRvckZ1bmN0aW9uPEcsIEg+XG4gICk6IE9ic2VydmFibGU8SD47XG4gIHBpcGU8QSwgQiwgQywgRCwgRSwgRiwgRywgSCwgST4oXG4gICAgb3AxOiBPcGVyYXRvckZ1bmN0aW9uPFQsIEE+LFxuICAgIG9wMjogT3BlcmF0b3JGdW5jdGlvbjxBLCBCPixcbiAgICBvcDM6IE9wZXJhdG9yRnVuY3Rpb248QiwgQz4sXG4gICAgb3A0OiBPcGVyYXRvckZ1bmN0aW9uPEMsIEQ+LFxuICAgIG9wNTogT3BlcmF0b3JGdW5jdGlvbjxELCBFPixcbiAgICBvcDY6IE9wZXJhdG9yRnVuY3Rpb248RSwgRj4sXG4gICAgb3A3OiBPcGVyYXRvckZ1bmN0aW9uPEYsIEc+LFxuICAgIG9wODogT3BlcmF0b3JGdW5jdGlvbjxHLCBIPixcbiAgICBvcDk6IE9wZXJhdG9yRnVuY3Rpb248SCwgST5cbiAgKTogT2JzZXJ2YWJsZTxJPjtcbiAgcGlwZTxBLCBCLCBDLCBELCBFLCBGLCBHLCBILCBJPihcbiAgICBvcDE6IE9wZXJhdG9yRnVuY3Rpb248VCwgQT4sXG4gICAgb3AyOiBPcGVyYXRvckZ1bmN0aW9uPEEsIEI+LFxuICAgIG9wMzogT3BlcmF0b3JGdW5jdGlvbjxCLCBDPixcbiAgICBvcDQ6IE9wZXJhdG9yRnVuY3Rpb248QywgRD4sXG4gICAgb3A1OiBPcGVyYXRvckZ1bmN0aW9uPEQsIEU+LFxuICAgIG9wNjogT3BlcmF0b3JGdW5jdGlvbjxFLCBGPixcbiAgICBvcDc6IE9wZXJhdG9yRnVuY3Rpb248RiwgRz4sXG4gICAgb3A4OiBPcGVyYXRvckZ1bmN0aW9uPEcsIEg+LFxuICAgIG9wOTogT3BlcmF0b3JGdW5jdGlvbjxILCBJPixcbiAgICAuLi5vcGVyYXRpb25zOiBPcGVyYXRvckZ1bmN0aW9uPGFueSwgYW55PltdXG4gICk6IE9ic2VydmFibGU8dW5rbm93bj47XG4gIC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3RpdGNoIHRvZ2V0aGVyIGZ1bmN0aW9uYWwgb3BlcmF0b3JzIGludG8gYSBjaGFpbi5cbiAgICogQG1ldGhvZCBwaXBlXG4gICAqIEByZXR1cm4ge09ic2VydmFibGV9IHRoZSBPYnNlcnZhYmxlIHJlc3VsdCBvZiBhbGwgb2YgdGhlIG9wZXJhdG9ycyBoYXZpbmdcbiAgICogYmVlbiBjYWxsZWQgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBwYXNzZWQgaW4uXG4gICAqXG4gICAqICMjIEV4YW1wbGVcbiAgICpcbiAgICogYGBgdHNcbiAgICogaW1wb3J0IHsgaW50ZXJ2YWwsIGZpbHRlciwgbWFwLCBzY2FuIH0gZnJvbSAncnhqcyc7XG4gICAqXG4gICAqIGludGVydmFsKDEwMDApXG4gICAqICAgLnBpcGUoXG4gICAqICAgICBmaWx0ZXIoeCA9PiB4ICUgMiA9PT0gMCksXG4gICAqICAgICBtYXAoeCA9PiB4ICsgeCksXG4gICAqICAgICBzY2FuKChhY2MsIHgpID0+IGFjYyArIHgpXG4gICAqICAgKVxuICAgKiAgIC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcGlwZSguLi5vcGVyYXRpb25zOiBPcGVyYXRvckZ1bmN0aW9uPGFueSwgYW55PltdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShvcGVyYXRpb25zKSh0aGlzKTtcbiAgfVxuXG4gIC8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuICAvKiogQGRlcHJlY2F0ZWQgUmVwbGFjZWQgd2l0aCB7QGxpbmsgZmlyc3RWYWx1ZUZyb219IGFuZCB7QGxpbmsgbGFzdFZhbHVlRnJvbX0uIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvdG8tcHJvbWlzZSAqL1xuICB0b1Byb21pc2UoKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPjtcbiAgLyoqIEBkZXByZWNhdGVkIFJlcGxhY2VkIHdpdGgge0BsaW5rIGZpcnN0VmFsdWVGcm9tfSBhbmQge0BsaW5rIGxhc3RWYWx1ZUZyb219LiBXaWxsIGJlIHJlbW92ZWQgaW4gdjguIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL3RvLXByb21pc2UgKi9cbiAgdG9Qcm9taXNlKFByb21pc2VDdG9yOiB0eXBlb2YgUHJvbWlzZSk6IFByb21pc2U8VCB8IHVuZGVmaW5lZD47XG4gIC8qKiBAZGVwcmVjYXRlZCBSZXBsYWNlZCB3aXRoIHtAbGluayBmaXJzdFZhbHVlRnJvbX0gYW5kIHtAbGluayBsYXN0VmFsdWVGcm9tfS4gV2lsbCBiZSByZW1vdmVkIGluIHY4LiBEZXRhaWxzOiBodHRwczovL3J4anMuZGV2L2RlcHJlY2F0aW9ucy90by1wcm9taXNlICovXG4gIHRvUHJvbWlzZShQcm9taXNlQ3RvcjogUHJvbWlzZUNvbnN0cnVjdG9yTGlrZSk6IFByb21pc2U8VCB8IHVuZGVmaW5lZD47XG4gIC8qIHRzbGludDplbmFibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byB0aGlzIE9ic2VydmFibGUgYW5kIGdldCBhIFByb21pc2UgcmVzb2x2aW5nIG9uXG4gICAqIGBjb21wbGV0ZWAgd2l0aCB0aGUgbGFzdCBlbWlzc2lvbiAoaWYgYW55KS5cbiAgICpcbiAgICogKipXQVJOSU5HKio6IE9ubHkgdXNlIHRoaXMgd2l0aCBvYnNlcnZhYmxlcyB5b3UgKmtub3cqIHdpbGwgY29tcGxldGUuIElmIHRoZSBzb3VyY2VcbiAgICogb2JzZXJ2YWJsZSBkb2VzIG5vdCBjb21wbGV0ZSwgeW91IHdpbGwgZW5kIHVwIHdpdGggYSBwcm9taXNlIHRoYXQgaXMgaHVuZyB1cCwgYW5kXG4gICAqIHBvdGVudGlhbGx5IGFsbCBvZiB0aGUgc3RhdGUgb2YgYW4gYXN5bmMgZnVuY3Rpb24gaGFuZ2luZyBvdXQgaW4gbWVtb3J5LiBUbyBhdm9pZFxuICAgKiB0aGlzIHNpdHVhdGlvbiwgbG9vayBpbnRvIGFkZGluZyBzb21ldGhpbmcgbGlrZSB7QGxpbmsgdGltZW91dH0sIHtAbGluayB0YWtlfSxcbiAgICoge0BsaW5rIHRha2VXaGlsZX0sIG9yIHtAbGluayB0YWtlVW50aWx9IGFtb25nc3Qgb3RoZXJzLlxuICAgKlxuICAgKiBAbWV0aG9kIHRvUHJvbWlzZVxuICAgKiBAcGFyYW0gW3Byb21pc2VDdG9yXSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHVzZWQgdG8gaW5zdGFudGlhdGVcbiAgICogdGhlIFByb21pc2VcbiAgICogQHJldHVybiBBIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBsYXN0IHZhbHVlIGVtaXQsIG9yXG4gICAqIHJlamVjdHMgb24gYW4gZXJyb3IuIElmIHRoZXJlIHdlcmUgbm8gZW1pc3Npb25zLCBQcm9taXNlXG4gICAqIHJlc29sdmVzIHdpdGggdW5kZWZpbmVkLlxuICAgKiBAZGVwcmVjYXRlZCBSZXBsYWNlZCB3aXRoIHtAbGluayBmaXJzdFZhbHVlRnJvbX0gYW5kIHtAbGluayBsYXN0VmFsdWVGcm9tfS4gV2lsbCBiZSByZW1vdmVkIGluIHY4LiBEZXRhaWxzOiBodHRwczovL3J4anMuZGV2L2RlcHJlY2F0aW9ucy90by1wcm9taXNlXG4gICAqL1xuICB0b1Byb21pc2UocHJvbWlzZUN0b3I/OiBQcm9taXNlQ29uc3RydWN0b3JMaWtlKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG5cbiAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCB2YWx1ZTogVCB8IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuc3Vic2NyaWJlKFxuICAgICAgICAoeDogVCkgPT4gKHZhbHVlID0geCksXG4gICAgICAgIChlcnI6IGFueSkgPT4gcmVqZWN0KGVyciksXG4gICAgICAgICgpID0+IHJlc29sdmUodmFsdWUpXG4gICAgICApO1xuICAgIH0pIGFzIFByb21pc2U8VCB8IHVuZGVmaW5lZD47XG4gIH1cbn1cblxuLyoqXG4gKiBEZWNpZGVzIGJldHdlZW4gYSBwYXNzZWQgcHJvbWlzZSBjb25zdHJ1Y3RvciBmcm9tIGNvbnN1bWluZyBjb2RlLFxuICogQSBkZWZhdWx0IGNvbmZpZ3VyZWQgcHJvbWlzZSBjb25zdHJ1Y3RvciwgYW5kIHRoZSBuYXRpdmUgcHJvbWlzZVxuICogY29uc3RydWN0b3IgYW5kIHJldHVybnMgaXQuIElmIG5vdGhpbmcgY2FuIGJlIGZvdW5kLCBpdCB3aWxsIHRocm93XG4gKiBhbiBlcnJvci5cbiAqIEBwYXJhbSBwcm9taXNlQ3RvciBUaGUgb3B0aW9uYWwgcHJvbWlzZSBjb25zdHJ1Y3RvciB0byBwYXNzZWQgYnkgY29uc3VtaW5nIGNvZGVcbiAqL1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3I6IFByb21pc2VDb25zdHJ1Y3Rvckxpa2UgfCB1bmRlZmluZWQpIHtcbiAgcmV0dXJuIHByb21pc2VDdG9yID8/IGNvbmZpZy5Qcm9taXNlID8/IFByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXI8VD4odmFsdWU6IGFueSk6IHZhbHVlIGlzIE9ic2VydmVyPFQ+IHtcbiAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcjxUPih2YWx1ZTogYW55KTogdmFsdWUgaXMgU3Vic2NyaWJlcjxUPiB7XG4gIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB8fCAoaXNPYnNlcnZlcih2YWx1ZSkgJiYgaXNTdWJzY3JpcHRpb24odmFsdWUpKTtcbn1cbiIsICJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcblxuZXhwb3J0IGludGVyZmFjZSBPYmplY3RVbnN1YnNjcmliZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JDdG9yIHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbC4gRG8gbm90IGNvbnN0cnVjdCBlcnJvciBpbnN0YW5jZXMuXG4gICAqIENhbm5vdCBiZSB0YWdnZWQgYXMgaW50ZXJuYWw6IGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvcnhqcy9pc3N1ZXMvNjI2OVxuICAgKi9cbiAgbmV3ICgpOiBPYmplY3RVbnN1YnNjcmliZWRFcnJvcjtcbn1cblxuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiBhbiBhY3Rpb24gaXMgaW52YWxpZCBiZWNhdXNlIHRoZSBvYmplY3QgaGFzIGJlZW5cbiAqIHVuc3Vic2NyaWJlZC5cbiAqXG4gKiBAc2VlIHtAbGluayBTdWJqZWN0fVxuICogQHNlZSB7QGxpbmsgQmVoYXZpb3JTdWJqZWN0fVxuICpcbiAqIEBjbGFzcyBPYmplY3RVbnN1YnNjcmliZWRFcnJvclxuICovXG5leHBvcnQgY29uc3QgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3I6IE9iamVjdFVuc3Vic2NyaWJlZEVycm9yQ3RvciA9IGNyZWF0ZUVycm9yQ2xhc3MoXG4gIChfc3VwZXIpID0+XG4gICAgZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKHRoaXM6IGFueSkge1xuICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9XG4pO1xuIiwgImltcG9ydCB7IE9wZXJhdG9yIH0gZnJvbSAnLi9PcGVyYXRvcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBFTVBUWV9TVUJTQ1JJUFRJT04gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYnNlcnZlciwgU3Vic2NyaXB0aW9uTGlrZSwgVGVhcmRvd25Mb2dpYyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcblxuLyoqXG4gKiBBIFN1YmplY3QgaXMgYSBzcGVjaWFsIHR5cGUgb2YgT2JzZXJ2YWJsZSB0aGF0IGFsbG93cyB2YWx1ZXMgdG8gYmVcbiAqIG11bHRpY2FzdGVkIHRvIG1hbnkgT2JzZXJ2ZXJzLiBTdWJqZWN0cyBhcmUgbGlrZSBFdmVudEVtaXR0ZXJzLlxuICpcbiAqIEV2ZXJ5IFN1YmplY3QgaXMgYW4gT2JzZXJ2YWJsZSBhbmQgYW4gT2JzZXJ2ZXIuIFlvdSBjYW4gc3Vic2NyaWJlIHRvIGFcbiAqIFN1YmplY3QsIGFuZCB5b3UgY2FuIGNhbGwgbmV4dCB0byBmZWVkIHZhbHVlcyBhcyB3ZWxsIGFzIGVycm9yIGFuZCBjb21wbGV0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YmplY3Q8VD4gZXh0ZW5kcyBPYnNlcnZhYmxlPFQ+IGltcGxlbWVudHMgU3Vic2NyaXB0aW9uTGlrZSB7XG4gIGNsb3NlZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgY3VycmVudE9ic2VydmVyczogT2JzZXJ2ZXI8VD5bXSB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBAZGVwcmVjYXRlZCBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIGRvIG5vdCB1c2UgZGlyZWN0bHkuIFdpbGwgYmUgbWFkZSBpbnRlcm5hbCBpbiB2OC4gKi9cbiAgb2JzZXJ2ZXJzOiBPYnNlcnZlcjxUPltdID0gW107XG4gIC8qKiBAZGVwcmVjYXRlZCBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIGRvIG5vdCB1c2UgZGlyZWN0bHkuIFdpbGwgYmUgbWFkZSBpbnRlcm5hbCBpbiB2OC4gKi9cbiAgaXNTdG9wcGVkID0gZmFsc2U7XG4gIC8qKiBAZGVwcmVjYXRlZCBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIGRvIG5vdCB1c2UgZGlyZWN0bHkuIFdpbGwgYmUgbWFkZSBpbnRlcm5hbCBpbiB2OC4gKi9cbiAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgLyoqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbCwgZG8gbm90IHVzZSBkaXJlY3RseS4gV2lsbCBiZSBtYWRlIGludGVybmFsIGluIHY4LiAqL1xuICB0aHJvd25FcnJvcjogYW55ID0gbnVsbDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFwic3ViamVjdFwiIGJ5IGJhc2ljYWxseSBnbHVpbmcgYW4gb2JzZXJ2ZXIgdG8gYW4gb2JzZXJ2YWJsZS5cbiAgICpcbiAgICogQG5vY29sbGFwc2VcbiAgICogQGRlcHJlY2F0ZWQgUmVjb21tZW5kZWQgeW91IGRvIG5vdCB1c2UuIFdpbGwgYmUgcmVtb3ZlZCBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuIFBsYW5zIGZvciByZXBsYWNlbWVudCBzdGlsbCB1bmRlciBkaXNjdXNzaW9uLlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZTogKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkgPSA8VD4oZGVzdGluYXRpb246IE9ic2VydmVyPFQ+LCBzb3VyY2U6IE9ic2VydmFibGU8VD4pOiBBbm9ueW1vdXNTdWJqZWN0PFQ+ID0+IHtcbiAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3Q8VD4oZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gTk9URTogVGhpcyBtdXN0IGJlIGhlcmUgdG8gb2JzY3VyZSBPYnNlcnZhYmxlJ3MgY29uc3RydWN0b3IuXG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKiBAZGVwcmVjYXRlZCBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiBkZXRhaWwsIGRvIG5vdCB1c2UgZGlyZWN0bHkuIFdpbGwgYmUgbWFkZSBpbnRlcm5hbCBpbiB2OC4gKi9cbiAgbGlmdDxSPihvcGVyYXRvcjogT3BlcmF0b3I8VCwgUj4pOiBPYnNlcnZhYmxlPFI+IHtcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yIGFzIGFueTtcbiAgICByZXR1cm4gc3ViamVjdCBhcyBhbnk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHByb3RlY3RlZCBfdGhyb3dJZkNsb3NlZCgpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgIH1cbiAgfVxuXG4gIG5leHQodmFsdWU6IFQpIHtcbiAgICBlcnJvckNvbnRleHQoKCkgPT4ge1xuICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICBpZiAoIXRoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgIHRoaXMuY3VycmVudE9ic2VydmVycyA9IEFycmF5LmZyb20odGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qgb2JzZXJ2ZXIgb2YgdGhpcy5jdXJyZW50T2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGVycm9yKGVycjogYW55KSB7XG4gICAgZXJyb3JDb250ZXh0KCgpID0+IHtcbiAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgY29uc3QgeyBvYnNlcnZlcnMgfSA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkhLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBsZXRlKCkge1xuICAgIGVycm9yQ29udGV4dCgoKSA9PiB7XG4gICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgeyBvYnNlcnZlcnMgfSA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkhLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKCkge1xuICAgIHRoaXMuaXNTdG9wcGVkID0gdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbCE7XG4gIH1cblxuICBnZXQgb2JzZXJ2ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXJzPy5sZW5ndGggPiAwO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KTogVGVhcmRvd25Mb2dpYyB7XG4gICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgIHJldHVybiBzdXBlci5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBwcm90ZWN0ZWQgX3N1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KTogU3Vic2NyaXB0aW9uIHtcbiAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHByb3RlY3RlZCBfaW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxhbnk+KSB7XG4gICAgY29uc3QgeyBoYXNFcnJvciwgaXNTdG9wcGVkLCBvYnNlcnZlcnMgfSA9IHRoaXM7XG4gICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gbnVsbDtcbiAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbigoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgYXJyUmVtb3ZlKG9ic2VydmVycywgc3Vic2NyaWJlcik7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIHByb3RlY3RlZCBfY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPGFueT4pIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCB0aHJvd25FcnJvciwgaXNTdG9wcGVkIH0gPSB0aGlzO1xuICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgfSBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBPYnNlcnZhYmxlIHdpdGggdGhpcyBTdWJqZWN0IGFzIHRoZSBzb3VyY2UuIFlvdSBjYW4gZG8gdGhpc1xuICAgKiB0byBjcmVhdGUgY3VzdG9tIE9ic2VydmVyLXNpZGUgbG9naWMgb2YgdGhlIFN1YmplY3QgYW5kIGNvbmNlYWwgaXQgZnJvbVxuICAgKiBjb2RlIHRoYXQgdXNlcyB0aGUgT2JzZXJ2YWJsZS5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gT2JzZXJ2YWJsZSB0aGF0IHRoZSBTdWJqZWN0IGNhc3RzIHRvXG4gICAqL1xuICBhc09ic2VydmFibGUoKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgY29uc3Qgb2JzZXJ2YWJsZTogYW55ID0gbmV3IE9ic2VydmFibGU8VD4oKTtcbiAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgcmV0dXJuIG9ic2VydmFibGU7XG4gIH1cbn1cblxuLyoqXG4gKiBAY2xhc3MgQW5vbnltb3VzU3ViamVjdDxUPlxuICovXG5leHBvcnQgY2xhc3MgQW5vbnltb3VzU3ViamVjdDxUPiBleHRlbmRzIFN1YmplY3Q8VD4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICAvKiogQGRlcHJlY2F0ZWQgSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsLCBkbyBub3QgdXNlIGRpcmVjdGx5LiBXaWxsIGJlIG1hZGUgaW50ZXJuYWwgaW4gdjguICovXG4gICAgcHVibGljIGRlc3RpbmF0aW9uPzogT2JzZXJ2ZXI8VD4sXG4gICAgc291cmNlPzogT2JzZXJ2YWJsZTxUPlxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICB9XG5cbiAgbmV4dCh2YWx1ZTogVCkge1xuICAgIHRoaXMuZGVzdGluYXRpb24/Lm5leHQ/Lih2YWx1ZSk7XG4gIH1cblxuICBlcnJvcihlcnI6IGFueSkge1xuICAgIHRoaXMuZGVzdGluYXRpb24/LmVycm9yPy4oZXJyKTtcbiAgfVxuXG4gIGNvbXBsZXRlKCkge1xuICAgIHRoaXMuZGVzdGluYXRpb24/LmNvbXBsZXRlPy4oKTtcbiAgfVxuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgcHJvdGVjdGVkIF9zdWJzY3JpYmUoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPik6IFN1YnNjcmlwdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuc291cmNlPy5zdWJzY3JpYmUoc3Vic2NyaWJlcikgPz8gRU1QVFlfU1VCU0NSSVBUSU9OO1xuICB9XG59XG4iLCAiaW1wb3J0IEdhbWVHbG9iYWxzIGZyb20gXCIuLi9nbG9iYWxzLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGV2ZWxTdGF0ZSB7XHJcblxyXG4gICAgLy8gY29uc3RydWN0b3IoKSB7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gI2xldmVsID0gMDtcclxuXHJcbiAgICAvLyBpbml0TGV2ZWxTdGF0ZShsZXZlbCkge1xyXG4gICAgLy8gICAgIHRoaXMuI2xldmVsID0gbGV2ZWw7XHJcbiAgICAgICAgXHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ2luaXRMZXZlbFN0YXRlJyk7XHJcbiAgICAvLyAgICAgLy90aGlzLmN1cnJlbnRMZXZlbERhdGEgPSBjbG9uZShMZXZlbERhdGFbbGV2ZWxdKTtcclxuICAgIC8vICAgIC8vIEdhbWVHbG9iYWxzLnBhcnRpY2xlUG9vbC5yZXNldCgpO1xyXG4gICAgLy8gfVxyXG59XHJcbiIsICJpbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XHJcbmltcG9ydCB7IHNpbmdsZXRvbiB9IGZyb20gXCJ0c3lyaW5nZVwiO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcclxuXHJcbmltcG9ydCB7IExldmVsU3RhdGUgfSBmcm9tIFwiLi9sZXZlbFN0YXRlLmpzXCI7XHJcbmltcG9ydCB7IERpcmVjdGlvblN5bWJvbCB9IGZyb20gXCIuLi90eXBlcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBSb29tIH0gZnJvbSBcIi4uL2R1bmdlb25nZW4vcm9vbS5qc1wiO1xyXG5pbXBvcnQgeyBmaW5kQ2hhckluU3RyaW5nQXJyYXlCeVBvcyB9IGZyb20gXCIuLi9mb3JGcmFtZXdvcmsvZmluZENoYXJJblN0cmluZ0FycmF5LmpzXCI7XHJcbmltcG9ydCB7IFJvb21UZW1wbGF0ZVBhdHRlcm5EZWZpbml0aW9ucyB9IGZyb20gXCIuLi9kdW5nZW9uZ2VuL3Jvb21UZW1wbGF0ZXMuanNcIjtcclxuaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpXCI7XHJcblxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBTdGF0ZSA9IHtcclxuICBJbml0OiAtMSxcclxuICBUaXRsZTogMCxcclxuICBQYXVzZTogMSxcclxuICBQbGF5aW5nOiAyLFxyXG4gIEVuZDogMyxcclxuICBDb21wbGV0ZTogNCxcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgR2FtZVN0YXRlQmFzZXtcclxuXHJcbn1cclxuXHJcbkBzaW5nbGV0b24oKVxyXG5leHBvcnQgY2xhc3MgR2FtZVN0YXRlIGltcGxlbWVudHMgR2FtZVN0YXRlQmFzZSB7XHJcbiAgXHJcbiAgcm9vbTogUm9vbSB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucGxheWVyUG9zaXRpb25TdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHRoaXMucGxheWVyUm90YXRpb25TdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHRoaXMuaXNJblZSU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICB0aGlzLmxldmVsU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICB0aGlzLmF2YWlsYWJsZVRhcmdldHNTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgICB0aGlzLmxldmVsU3RhdGUgPSBuZXcgTGV2ZWxTdGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuY3VycmVudFJvb21TdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRSb29tU3ViamVjdC5zdWJzY3JpYmUoKHJvb20pID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJjdXJyZW50Um9vbVN1YmplY3RcIiwgcm9vbSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnN0YXRlU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIm5ldyBHYW1lIFN0YXRlIGNyZWF0ZWRcIik7XHJcbiAgfVxyXG5cclxuICBsZXZlbFN0YXRlOiBMZXZlbFN0YXRlO1xyXG5cclxuICBzdGF0ZVN1YmplY3Q6IFN1YmplY3Q8bnVtYmVyPjtcclxuICBfc3RhdGUgPSBTdGF0ZS5Jbml0O1xyXG4gIHNldCBzdGF0ZSh2YWx1ZSkge1xyXG4gICAgdGhpcy5fc3RhdGUgPSB2YWx1ZTtcclxuICAgIHRoaXMuc3RhdGVTdWJqZWN0Lm5leHQodmFsdWUpO1xyXG4gIH1cclxuICBnZXQgc3RhdGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgfVxyXG5cclxuICBhdmFpbGFibGVUYXJnZXRzU3ViamVjdDogU3ViamVjdDxudW1iZXI+O1xyXG4gIF9hdmFpbGFibGVUYXJnZXRzID0gMDtcclxuICBzZXQgYXZhaWxhYmxlVGFyZ2V0cyh2YWx1ZSkge1xyXG4gICAgdGhpcy5fYXZhaWxhYmxlVGFyZ2V0cyA9IHZhbHVlO1xyXG4gICAgdGhpcy5hdmFpbGFibGVUYXJnZXRzU3ViamVjdC5uZXh0KHZhbHVlKTtcclxuICB9XHJcbiAgZ2V0IGF2YWlsYWJsZVRhcmdldHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYXZhaWxhYmxlVGFyZ2V0cztcclxuICB9XHJcblxyXG4gIGxldmVsU3ViamVjdDogU3ViamVjdDxudW1iZXI+O1xyXG4gIF9sZXZlbCA9IDA7XHJcbiAgc2V0IGxldmVsKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9sZXZlbCA9IHZhbHVlO1xyXG4gICAgdGhpcy5sZXZlbFN1YmplY3QubmV4dCh2YWx1ZSk7XHJcbiAgfVxyXG4gIGdldCBsZXZlbCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9sZXZlbDtcclxuICB9XHJcblxyXG4gIHBsYXllclBvc2l0aW9uU3ViamVjdDogU3ViamVjdDxudW1iZXJbXT47XHJcbiAgX3BsYXllclBvc2l0aW9uID0gWzAsIDAsIDBdO1xyXG4gIHNldCBwbGF5ZXJQb3NpdGlvbih2YWx1ZSkge1xyXG4gICAgdGhpcy5fcHJldmlvdXNQbGF5ZXJQb3NpdGlvbiA9IHRoaXMuX3BsYXllclBvc2l0aW9uO1xyXG4gICAgdGhpcy5fcGxheWVyUG9zaXRpb24gPSB2YWx1ZTtcclxuICAgIHRoaXMucGxheWVyUG9zaXRpb25TdWJqZWN0Lm5leHQodmFsdWUpO1xyXG4gIH1cclxuICBnZXQgcGxheWVyUG9zaXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcGxheWVyUG9zaXRpb247XHJcbiAgfVxyXG4gIF9wcmV2aW91c1BsYXllclBvc2l0aW9uID0gWzAsIDAsIDBdO1xyXG4gIGdldCBwcmV2aW91c1BsYXllclBvc2l0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzUGxheWVyUG9zaXRpb247XHJcbiAgfVxyXG5cclxuICBwbGF5ZXJSb3RhdGlvblN1YmplY3Q6IFN1YmplY3Q8bnVtYmVyPjtcclxuICBfcGxheWVyUm90YXRpb24gPSAwO1xyXG4gIHNldCBwbGF5ZXJSb3RhdGlvbih2YWx1ZSkge1xyXG4gICAgdGhpcy5fcHJldmlvdXNQbGF5ZXJSb3RhdGlvbiA9IHRoaXMuX3BsYXllclJvdGF0aW9uO1xyXG4gICAgdGhpcy5fcGxheWVyUm90YXRpb24gPSB2YWx1ZTtcclxuICAgIHRoaXMucGxheWVyUm90YXRpb25TdWJqZWN0Lm5leHQodmFsdWUpO1xyXG4gIH1cclxuICBnZXQgcGxheWVyUm90YXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcGxheWVyUm90YXRpb247XHJcbiAgfVxyXG5cclxuICBfcHJldmlvdXNQbGF5ZXJSb3RhdGlvbiA9IDA7XHJcbiAgZ2V0IHByZXZpb3VzUGxheWVyUm90YXRpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNQbGF5ZXJSb3RhdGlvbjtcclxuICB9XHJcblxyXG4gIGlzSW5WUlN1YmplY3Q6IFN1YmplY3Q8Ym9vbGVhbj47XHJcbiAgX2lzSW5WUiA9IGZhbHNlO1xyXG4gIHNldCBpc0luVlIodmFsdWUpIHtcclxuICAgIHRoaXMuX2lzSW5WUiA9IHZhbHVlO1xyXG4gICAgdGhpcy5pc0luVlJTdWJqZWN0Lm5leHQodmFsdWUpO1xyXG4gIH1cclxuICBnZXQgaXNJblZSKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzSW5WUjtcclxuICB9XHJcblxyXG4gIGN1cnJlbnRSb29tU3ViamVjdDogU3ViamVjdDxudW1iZXJbXT47XHJcbiAgX2N1cnJlbnRSb29tID0gWzAsMF07XHJcbiAgc2V0IGN1cnJlbnRSb29tKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9jdXJyZW50Um9vbSA9IHZhbHVlO1xyXG4gICAgdGhpcy5jdXJyZW50Um9vbVN1YmplY3QubmV4dCh2YWx1ZSk7XHJcbiAgfVxyXG4gIGdldCBjdXJyZW50Um9vbSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jdXJyZW50Um9vbTtcclxuICB9XHJcblxyXG4gIG9mZlRhcmdldCgpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgb3Igbm90IHRoZSBwbGF5ZXIgaXMgY3VycmVudGx5IG5hdmlnYXRpbmcgdG8gYSByb29tXHJcbiAgICovXHJcbiAgbmF2aWdhdGluZyA9IGZhbHNlO1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgZGlyZWN0aW9uIHRoZSBwbGF5ZXIgZW50ZXJlZCB0aGUgcm9vbSBmcm9tXHJcbiAgICovXHJcbiAgcm9vbVByZXZpb3VzRXhpdERpcmVjdGlvbjogRGlyZWN0aW9uU3ltYm9sIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5hdmlnYXRlIHRvIGEgcm9vbVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb29teCB0aGUgeCBwb3NpdGlvbiBvbiB0aGUgbWFwIG9mIHRoZSByb29tIHRvIG5hdmlnYXRlIHRvXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvb215IHRoZSB5IHBvc2l0aW9uIG9uIHRoZSBtYXAgb2YgdGhlIHJvb20gdG8gbmF2aWdhdGUgdG9cclxuICAgKiBAcGFyYW0ge0RpcmVjdGlvblN5bWJvbHxudWxsfSBkaXJlY3Rpb24gdGhlIGRpcmVjdGlvbiB0aGUgcGxheWVyIGV4aXRlZCB0aGUgcm9vbSBmcm9tLCBpZiBudWxsIHRoZSBwbGF5ZXIgd2lsbCBiZSB0ZWxlcG9ydGVkIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHJvb20gKHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIGF0IHRoZSBzdGFydClcclxuICAgKi9cclxuICBuYXZpZ2F0ZVRvUm9vbShyb29teDogbnVtYmVyLCByb29teTogbnVtYmVyLCBkaXJlY3Rpb246IERpcmVjdGlvblN5bWJvbCB8IG51bGwgPSBudWxsKSB7XHJcbiAgICBpZiAodGhpcy5uYXZpZ2F0aW5nKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubmF2aWdhdGluZyA9IHRydWU7XHJcblxyXG4gICAgaWYgKGRpcmVjdGlvbikge1xyXG4gICAgICB0aGlzLnJvb21QcmV2aW91c0V4aXREaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBsYXllclBvc2l0aW9uID0gWzMsIDAsIDddO1xyXG4gICAgICB0aGlzLnBsYXllclJvdGF0aW9uID0gMjcwO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY3VycmVudFJvb20gPSBbcm9vbXgsIHJvb215XTtcclxuXHJcbiAgICAvLyB1c2UgZGlyZWN0aW9uIHRvIHRlbGVwb3J0IHRvIHRoZSBjb3JyZWN0IGxvY2F0aW9uIGluIHRoZSBuZXcgcm9vbVxyXG5cclxuICAgIHRoaXMubmF2aWdhdGluZyA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXMgaXQgcG9zc2libGUgdG8gdGVsZXBvcnQgdG8gdGhlIGdpdmVuIHBvc2l0aW9uP1xyXG4gICAqIEBwYXJhbSB4XHJcbiAgICogQHBhcmFtIHlcclxuICAgKiBAcGFyYW0gelxyXG4gICAqIEByZXR1cm5zIHRydWUgaWYgaXQgaXMgcG9zc2libGUgdG8gdGVsZXBvcnQgdG8gdGhlIGdpdmVuIHBvc2l0aW9uXHJcbiAgICovXHJcbiAgY2FuUGljayh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKSB7XHJcbiAgICBpZiAoIXRoaXMucm9vbSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnJvb20uZ2V0Um9vbVRlbXBsYXRlKCk7XHJcbiAgICBpZiAoIXRlbXBsYXRlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYG5vIHRlbXBsYXRlIGZvdW5kIGZvciBjdXJyZW50IHJvb20uIE9kZC4uLiBXZSdyZSBpbiBpdC5gKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYXIgPSBmaW5kQ2hhckluU3RyaW5nQXJyYXlCeVBvcyh0ZW1wbGF0ZS5wYXR0ZXJuLCBNYXRoLmZsb29yKHgpLCBNYXRoLmZsb29yKHopKTtcclxuICAgIGlmKCFjaGFyKXtcclxuICAgICAgLy8gc29tZWhvdyB0aGVyZSdzIE5PIGNoYXIgYXQgdGhpcyBwb3NpdGlvblxyXG4gICAgICBjb25zb2xlLndhcm4oYG5vIGNoYXIgZm91bmQgYXQgcG9zaXRpb24gJHt4fSwke3p9IGluIHRlbXBsYXRlICR7dGVtcGxhdGUubmFtZX1gKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IFJvb21UZW1wbGF0ZVBhdHRlcm5EZWZpbml0aW9uc1tjaGFyXTtcclxuXHJcbiAgICBpZihkZWZpbml0aW9uLmJlaGF2aW9yID09PSBcIkRvb3JcIil7XHJcbiAgICAgIHJldHVybiAoY2hhciA9PT0gXCJOXCIgJiYgdGhpcy5yb29tLmRvb3JzLm5vcnRoKSB8fFxyXG4gICAgICAoY2hhciA9PT0gXCJFXCIgJiYgdGhpcy5yb29tLmRvb3JzLmVhc3QpIHx8XHJcbiAgICAgIChjaGFyID09PSBcIlNcIiAmJiB0aGlzLnJvb20uZG9vcnMuc291dGgpIHx8XHJcbiAgICAgIChjaGFyID09PSBcIldcIiAmJiB0aGlzLnJvb20uZG9vcnMud2VzdCk7IFxyXG4gICAgfWVsc2V7XHJcbiAgICAgIHJldHVybiBkZWZpbml0aW9uLmNhblRlbGVwb3J0VG9UaWxlIHx8IGRlZmluaXRpb24uY2FuSW50ZXJhY3RXaXRoVGlsZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBpY2sob2JqOk9iamVjdDNELCB4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyKSB7XHJcbiAgICBpZiAoIXRoaXMucm9vbSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnJvb20uZ2V0Um9vbVRlbXBsYXRlKCk7XHJcbiAgICBpZiAoIXRlbXBsYXRlKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYG5vIHRlbXBsYXRlIGZvdW5kIGZvciBjdXJyZW50IHJvb20uIE9kZC4uLiBXZSdyZSBpbiBpdC5gKTtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoYXIgPSBmaW5kQ2hhckluU3RyaW5nQXJyYXlCeVBvcyh0ZW1wbGF0ZS5wYXR0ZXJuLCBNYXRoLmZsb29yKHgpLCBNYXRoLmZsb29yKHopKTtcclxuICAgIGlmKCFjaGFyKXtcclxuICAgICAgLy8gc29tZWhvdyB0aGVyZSdzIE5PIGNoYXIgYXQgdGhpcyBwb3NpdGlvblxyXG4gICAgICBjb25zb2xlLndhcm4oYG5vIGNoYXIgZm91bmQgYXQgcG9zaXRpb24gJHt4fSwke3p9IGluIHRlbXBsYXRlICR7dGVtcGxhdGUubmFtZX1gKTtcclxuICAgICAgcmV0dXJuIDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXQgdGhlIGl0ZW1zIGluIHRoZXJlIGZvciB0aGUgZ2l2ZW4gcG9zaXRpb25cclxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5yb29tLmdldEl0ZW1zQXRQb3NpdGlvbih7eDpNYXRoLmZsb29yKHgpLCB5Ok1hdGguZmxvb3Ioeil9KTtcclxuICAgXHJcbiAgICBpZighaXRlbXMgfHwgaXRlbXMubGVuZ3RoID09PSAwKXtcclxuICAgICAgaWYoUm9vbVRlbXBsYXRlUGF0dGVybkRlZmluaXRpb25zW2NoYXJdLmNhblRlbGVwb3J0VG9UaWxlKXtcclxuICAgICAgICB0aGlzLnNldFBsYXllclBvc2l0aW9uKHgseik7XHJcbiAgICAgIH07XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGl0ZW0uaW50ZXJhY3Qob2JqLCB4LCB5LCB6KTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbiAgICAvLyBleGVjdXRlIGJlaGF2aW9yIHBpY2tlZCBvbiB0aWxlXHJcbiAgICAgIFxyXG4gICAgICAvLyBmb3IgYSBkb29yIHRoaXMgc2hvdWxkIGJlIG5hdmlnYXRpbmcgdG8gdGhlIG5leHQgcm9vbVxyXG4gICAgICAvLyBmb3IgYSBmbG9vciB0aWxlIHRoaXMgc2hvdWxkIGJlIHRlbGVwb3J0aW5nIHRvIHRoYXQgbG9jYXRpb25cclxuICAgICAgLy8gZm9yIGEgY2hlc3QgdGhpcyBzaG91bGQgYmUgb3BlbmluZyB0aGUgY2hlc3RcclxuICAgICAgLy8gZm9yIGEgY2hhcmFjdGVyIHRoaXMgc2hvdWxkIGJlIHRhbGtpbmcgdG8gdGhlIGNoYXJhY3RlclxyXG4gICAgICAvLyBldGNcclxuICAgICAgLy8gYnV0IGhvdz8gU29tZWhvdyB0aGVyZSBzaG91bGQgYmUgYSBsaW5rIHRvIHRoZSByb29tIHRlbXBsYXRlLCB0aGUgdGlsZXMgXHJcbiAgICAgIC8vIGFuZCB0aGUgb2JqZWN0cyBpbiB0aGUgcm9vbS5cclxuICAgICAgLy8gbWF5YmUgdGhlIHJvb20gdGVtcGxhdGUgc2hvdWxkIGhhdmUgYSBsaXN0IG9mIG9iamVjdHMgaW4gdGhlIHJvb20/XHJcbiAgICAgIC8vIHdvdWxkIGl0IGJlIHBvc3NpYmxlIHRvIHN0b3JlIHRoZW0gaW4gYSAyRCBhcnJheT9cclxuICAgICAgLy8gc28gd2UgY2FuIGp1c3QgcmVxdWVzdCBYLFkgYW5kIGdldCB0aGUgb2JqZWN0LCBhbmQgZXhlY3V0ZSB0aGUgYmVoYXZpb3I/XHJcbiAgICAgIFxyXG4gICAgXHJcblxyXG4gICAgLy9kZWZpbml0aW9uLmJlaGF2aW9yO1xyXG5cclxuXHJcbiAgICByZXR1cm47XHJcbiAgICAvLyBsZXQgdGFncyA9IG9iai5nZXRDb21wb25lbnQoVGFncyk7XHJcbiAgICAvLyBpZiAoIXRhZ3MpIHJldHVybjtcclxuICAgIC8vIGxldCBwb3NpdGlvbiA9IHRoaXMucGxheWVyUG9zaXRpb247XHJcbiAgICAvLyAvL3RoaXMucGxheWVyLmdldFRyYW5zbGF0aW9uV29ybGQocG9zaXRpb24pO1xyXG4gICBcclxuICAgIC8vIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgLy8gICBjYXNlIHRhZ3MuaGFzVGFnKFwiZmxvb3JcIik6XHJcbiAgICAvLyAgICAgZ2xvYmFscy5zb3VuZEZ4UGxheWVyLnBsYXlTb3VuZChTb3VuZHMudGVsZXBvcnQpO1xyXG4gICAgLy8gICAgIHRoaXMucGxheWVyUG9zaXRpb24gPSBbeCwgcG9zaXRpb25bMV0sIHpdO1xyXG4gICAgLy8gICAgIGJyZWFrO1xyXG4gICAgLy8gICBjYXNlIHRhZ3MuaGFzVGFnKFwiYnV0dG9uXCIpOlxyXG4gICAgLy8gICAgIGJyZWFrO1xyXG4gICAgLy8gICBjYXNlIHRhZ3MuaGFzVGFnKFwiY2hlc3RcIik6XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coYHBpY2tpbmcgY2hlc3Qgbm90IGltcGxlbWVudGVkIHlldC4gJHt4fSwgJHt6fWApO1xyXG4gICAgLy8gICAgIGJyZWFrO1xyXG4gICAgLy8gICBjYXNlIHRhZ3MuaGFzVGFnKFwiZG9vclwiKTpcclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhcInBpY2tpbmcgZG9vciBub3QgaW1wbGVtZW50ZWQgeWV0XCIpO1xyXG4gICAgLy8gICAgIGJyZWFrO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbiAgc2V0Q3VycmVudFJvb20oY3VycmVudFJvb206IFJvb20pIHtcclxuICAgIHRoaXMucm9vbSA9IGN1cnJlbnRSb29tO1xyXG4gIH1cclxuXHJcbiAgc2V0UGxheWVyUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIHRoaXMucGxheWVyUG9zaXRpb24gPSBbeCwgdGhpcy5wbGF5ZXJQb3NpdGlvblsxXSwgeV07XHJcbn1cclxufVxyXG4iLCAiaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpXCI7XHJcbmltcG9ydCBnbG9iYWxzIGZyb20gXCIuLi8uLi9nbG9iYWxzLmpzXCI7XHJcbmltcG9ydCB7IERpcmVjdGlvblN5bWJvbCwgUG9zaXRpb24yRCB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xyXG5pbXBvcnQgeyBHZW5lcmljSXRlbSB9IGZyb20gXCIuL0dlbmVyaWNJdGVtLmpzXCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuLi8uLi9jbGFzc2VzL2dhbWVTdGF0ZS5qc1wiO1xyXG5pbXBvcnQgeyBjb250YWluZXIgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEb29yIGV4dGVuZHMgR2VuZXJpY0l0ZW17XHJcbiAgICBcclxuICAgIGRpcmVjdGlvbjpEaXJlY3Rpb25TeW1ib2w7XHJcbiAgICB0YXJnZXRSb29tOlBvc2l0aW9uMkQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgZGlyZWN0aW9uOkRpcmVjdGlvblN5bWJvbCwgXHJcbiAgICAgICAgdGFyZ2V0Um9vbTpQb3NpdGlvbjJELFxyXG4gICAgICAgIGN1cnJlbnRQb3NpdGlvbjpQb3NpdGlvbjJEKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHN1cGVyLm5hbWUgPSBcIkRvb3JcIjtcclxuICAgICAgICBzdXBlci50eXBlID0gXCJpdGVtXCI7XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XHJcbiAgICAgICAgdGhpcy50YXJnZXRSb29tID0gdGFyZ2V0Um9vbTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uID0gY3VycmVudFBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGludGVyYWN0KG9iajpPYmplY3QzRCwgeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcil7XHJcbiAgICAgICAgY29uc3QgZ2FtZVN0YXRlID0gY29udGFpbmVyLnJlc29sdmUoR2FtZVN0YXRlKTtcclxuICAgICAgICBnYW1lU3RhdGUubmF2aWdhdGVUb1Jvb20odGhpcy50YXJnZXRSb29tLngsIHRoaXMudGFyZ2V0Um9vbS55LCB0aGlzLmRpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG59IiwgImltcG9ydCB7IFBvc2l0aW9uMkQgfSBmcm9tIFwiLi4vdHlwZXMvcG9zaXRpb24uanNcIjtcclxuaW1wb3J0IHsgTG9vdFRhYmxlIH0gZnJvbSBcIi4vbG9vdC9sb290VGFibGVCYXNlLmpzXCI7XHJcbmltcG9ydCB7IGNoZXN0RGVmaW5pdGlvbiB9IGZyb20gXCIuL3Jvb21UZW1wbGF0ZXMuanNcIjtcclxuaW1wb3J0IHsgR2VuZXJpY0l0ZW0gfSBmcm9tIFwiLi9vYmplY3RzL0dlbmVyaWNJdGVtLmpzXCI7XHJcbmltcG9ydCB7IGluamVjdCwgc2luZ2xldG9uIH0gZnJvbSBcInRzeXJpbmdlXCI7XHJcbmltcG9ydCB7IENoZXN0IH0gZnJvbSBcIi4vb2JqZWN0cy9jaGVzdC5qc1wiO1xyXG5cclxuXHJcbkBzaW5nbGV0b24oKVxyXG5leHBvcnQgY2xhc3MgQ2hlc3RDcmVhdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAaW5qZWN0KExvb3RUYWJsZSkgcHJpdmF0ZSBsb290VGFibGU6IExvb3RUYWJsZSkge1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNoZXN0KHBvc2l0aW9uOiBQb3NpdGlvbjJELCBjaGVzdERlZmluaXRpb246IGNoZXN0RGVmaW5pdGlvbik6IEdlbmVyaWNJdGVtIHtcclxuICAgICAgICBjb25zdCBjaGVzdEl0ZW0gPSBuZXcgQ2hlc3QoXCJzbWFsbFwiLCBcImNvbW1vblwiLCAzLCB0aGlzLmxvb3RUYWJsZSk7XHJcbiAgICAgICAgY2hlc3RJdGVtLnBvc2l0aW9uID0gcG9zaXRpb247XHJcbiAgICAgICAgY2hlc3RJdGVtLm5hbWUgPSBcIkNoZXN0XCI7XHJcblxyXG4gICAgICAgIHJldHVybiBjaGVzdEl0ZW07XHJcbiAgICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEdlbmVyaWNJdGVtIH0gZnJvbSBcIi4uLy4uL2R1bmdlb25nZW4vb2JqZWN0cy9HZW5lcmljSXRlbS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNoaWVsZCBleHRlbmRzIEdlbmVyaWNJdGVte1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBzdXBlci5uYW1lID0gXCJTaGllbGRcIjtcclxuICAgICAgICBzdXBlci50eXBlID0gXCJzaGllbGRcIjtcclxuICAgIH1cclxufSIsICJpbXBvcnQgeyBHZW5lcmljSXRlbSB9IGZyb20gXCIuLi8uLi9kdW5nZW9uZ2VuL29iamVjdHMvR2VuZXJpY0l0ZW0uanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTd29yZCBleHRlbmRzIEdlbmVyaWNJdGVte1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBzdXBlci5uYW1lID0gXCJTd29yZFwiO1xyXG4gICAgICAgIHN1cGVyLnR5cGUgPSBcIndlYXBvblwiO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIGF0dGFjaygpOiBudW1iZXJ7XHJcbiAgICAgICAgcmV0dXJuIDU7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgZGFtYWdlKCk6IG51bWJlcntcclxuICAgICAgICByZXR1cm4gc3VwZXIuZGFtYWdlKCk7XHJcbiAgICB9XHJcblxyXG59IiwgImltcG9ydCB7IFNoaWVsZCB9IGZyb20gXCIuLi8uLi9jbGFzc2VzL2l0ZW1zL3NoaWVsZC5qc1wiO1xyXG5pbXBvcnQgeyBTd29yZCB9IGZyb20gXCIuLi8uLi9jbGFzc2VzL2l0ZW1zL3N3b3JkLmpzXCI7XHJcbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi4vb2JqZWN0cy9pdGVtLmpzXCI7XHJcbmltcG9ydCB7IGluamVjdGFibGUgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9vdFRhYmxlRW50cnkge1xyXG4gIGl0ZW06IEl0ZW07XHJcbiAgd2VpZ2h0OiBudW1iZXI7IC8vIFRoZSBoaWdoZXIgdGhlIHdlaWdodCwgdGhlIG1vcmUgbGlrZWx5IHRoaXMgaXRlbSB3aWxsIGRyb3BcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMb290VGFibGVCYXNlIHtcclxuICBsb290RW50cmllczogTWFwPHN0cmluZywgTG9vdFRhYmxlRW50cnlbXT47XHJcbn1cclxudHlwZSBsb290VHlwZXMgPSBcImNvbW1vblwiIHwgXCJyYXJlXCIgfCBcImVwaWNcIiB8IFwibGVnZW5kYXJ5XCIgfFwiZW50cnlcIjtcclxuXHJcbkBpbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExvb3RUYWJsZSBpbXBsZW1lbnRzIExvb3RUYWJsZUJhc2Uge1xyXG5cclxuICBsb290RW50cmllczogTWFwPGxvb3RUeXBlcywgTG9vdFRhYmxlRW50cnlbXT47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCl7XHJcbiAgLy9AaW5qZWN0KEl0ZW1DcmVhdG9yKSBwcml2YXRlIGl0ZW1DcmVhdG9yOiBJdGVtQ3JlYXRvcikge1xyXG4gICAgdGhpcy5sb290RW50cmllcyA9IG5ldyBNYXAoW1xyXG4gICAgICBbXCJlbnRyeVwiLCBbXHJcbiAgICAgIC8vICB7IGl0ZW06IHRoaXMuaXRlbUNyZWF0b3IuY3JlYXRlSXRlbShuZXcgU3dvcmQoKSkgLCB3ZWlnaHQ6IDEgfSxcclxuICAgICAgICB7IGl0ZW06IG5ldyBTaGllbGQoKSwgd2VpZ2h0OiAxIH0sXHJcbiAgICAgIF1dLFxyXG4gICAgICBbXCJyYXJlXCIsIFtcclxuICAgICAgICB7IGl0ZW06IG5ldyBTd29yZCgpLCB3ZWlnaHQ6IDEgfSxcclxuICAgICAgICB7IGl0ZW06IG5ldyBTd29yZCgpLCB3ZWlnaHQ6IDEgfSxcclxuICAgICAgXV1cclxuICAgIF0pO1xyXG4gIH1cclxuICBcclxuICBnZXRJdGVtcyh0eXBlOmxvb3RUeXBlcyk6IEl0ZW1bXSB7XHJcbiAgICByZXR1cm4gdGhpcy5sb290RW50cmllcy5nZXQodHlwZSkhLm1hcChlPT5lLml0ZW0pO1xyXG4gIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgT2JqZWN0M0QgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpXCI7XHJcbmltcG9ydCB7IExvb3RUYWJsZUJhc2UgfSBmcm9tIFwiLi4vbG9vdC9sb290VGFibGVCYXNlLmpzXCI7XHJcbmltcG9ydCB7IEdlbmVyaWNJdGVtIH0gZnJvbSBcIi4vR2VuZXJpY0l0ZW0uanNcIjtcclxuaW1wb3J0IHsgSXRlbSB9IGZyb20gXCIuL2l0ZW0uanNcIjtcclxuaW1wb3J0IHsgY29udGFpbmVyLCBpbmplY3RhYmxlIH0gZnJvbSBcInRzeXJpbmdlXCI7XHJcblxyXG4vKlxyXG4qIGEgY29udGFpbmVyIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBob2xkIGl0ZW1zXHJcbiovXHJcbmV4cG9ydCBpbnRlcmZhY2UgY29udGFpbmVye1xyXG4gICAgbWF4SXRlbXM6IG51bWJlcjtcclxuICAgIGl0ZW1zOiBBcnJheTxJdGVtPnxudWxsO1xyXG4gICAgaGFzQmVlbk9wZW5lZDogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBjaGVzdCBleHRlbmRzIGNvbnRhaW5lcnsgXHJcbiAgICBjaGVzdFR5cGU6IHN0cmluZzsgLy8gc21hbGwsIG1lZGl1bSwgbGFyZ2VcclxuICAgIGNoZXN0VmFsdWU6IHN0cmluZzsgLy8gY29tbW9uLCByYXJlLCBlcGljLCBsZWdlbmRhcnlcclxuICAgIGhhc0JlZW5PcGVuZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVzdCBleHRlbmRzIEdlbmVyaWNJdGVtIGltcGxlbWVudHMgY2hlc3R7XHJcbiAgICBjaGVzdFR5cGU6IHN0cmluZztcclxuICAgIGNoZXN0VmFsdWU6IHN0cmluZztcclxuICAgIG1heEl0ZW1zOiBudW1iZXI7XHJcbiAgICBpdGVtczogQXJyYXk8SXRlbT58bnVsbDtcclxuICAgIGhhc0JlZW5PcGVuZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IoY2hlc3RUeXBlOiBzdHJpbmcsIGNoZXN0VmFsdWU6IHN0cmluZywgbWF4SXRlbXM6IG51bWJlciwgbG9vdFRhYmxlOkxvb3RUYWJsZUJhc2Upe1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5jaGVzdFR5cGUgPSBjaGVzdFR5cGU7XHJcbiAgICAgICAgdGhpcy5jaGVzdFZhbHVlID0gY2hlc3RWYWx1ZTtcclxuICAgICAgICB0aGlzLm1heEl0ZW1zID0gbWF4SXRlbXM7XHJcbiAgICAgICAgdGhpcy5sb290VGFibGUgPSBsb290VGFibGU7XHJcbiAgICAgICAgdGhpcy5oYXNCZWVuT3BlbmVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgaW50ZXJhY3Qob2JqOiBPYmplY3QzRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcikge1xyXG4gICAgICAgICBpZighdGhpcy5oYXNCZWVuT3BlbmVkIHx8IHRoaXMuaXRlbXMgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzQmVlbk9wZW5lZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUNoZXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmxvb3RUYWJsZS5nZXRJdGVtcyhcImVudHJ5XCIpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuaXRlbXMpO1xyXG4gICAgICAgIC8vIGRvIHNvbWV0aGluZyB0byB2aXN1YWxpemUgdGhlIGl0ZW1zIGluIHRoZSBjaGVzdDtcclxuICAgICAgICAvL3JldHVybiB0aGlzLml0ZW1zITtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRpYWxpemVDaGVzdCgpe1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuIiwgImltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG5pbXBvcnQgeyBjb250YWluZXIgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuaW1wb3J0IHsgSW50ZXJuYWxVSU1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vLi4vdWkvY2xhc3Nlcy9JbnRlcm5hbFVJTWFuYWdlci5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNob3dJbnZlbnRvcnkgPSB7XHJcbiAgICBuYW1lOiBcIlNob3cgSW52ZW50b3J5XCIsXHJcblxyXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRoaXMubmFtZSA9IGBTaG93IEludmVudG9yeWA7XHJcbiAgICB9LFxyXG5cclxuICAgIGludGVyYWN0OmZ1bmN0aW9uKHJldDphbnksIG9iajpPYmplY3QzRCwgeDpudW1iZXIsIHk6bnVtYmVyLCB6Om51bWJlcil7XHJcbiAgICAgICAgY29uc3QgaW50ZXJuYWxVSU1hbmFnZXIgPSBjb250YWluZXIucmVzb2x2ZShJbnRlcm5hbFVJTWFuYWdlcik7XHJcbiAgICAgICAgaW50ZXJuYWxVSU1hbmFnZXIub3BlbihcIkludmVudG9yeVwiLCBbeCwgeSwgel0pO1xyXG4gICAgfVxyXG4gIH07IiwgImltcG9ydCB7IGluamVjdGFibGUgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuaW1wb3J0IHsgVWlNYW5hZ2VyIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvdWktbWFuYWdlci5qc1wiO1xyXG5pbXBvcnQgeyBOdW1iZXJBcnJheSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGlcIjtcclxuXHJcbkBpbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEludGVybmFsVUlNYW5hZ2Vye1xyXG4gICAgdWlNYW5hZ2VyOiBVaU1hbmFnZXI7XHJcbiAgICBcclxuICAgIHJlZ2lzdGVyQ29tcG9uZW50KHVpTWFuYWdlcjpVaU1hbmFnZXIpe1xyXG4gICAgICAgIHRoaXMudWlNYW5hZ2VyID0gdWlNYW5hZ2VyO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4obmFtZTpzdHJpbmcsIHBvc2l0aW9uOlJlYWRvbmx5PE51bWJlckFycmF5Pik6dm9pZFxyXG4gICAge1xyXG4gICAgICAgIGlmKHRoaXMudWlNYW5hZ2VyKXtcclxuICAgICAgICAgICAgdGhpcy51aU1hbmFnZXIub3BlbihuYW1lLCBwb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwgImltcG9ydCB7IERpcmVjdGlvblN5bWJvbCB9IGZyb20gXCIuLi8uLi90eXBlcy9pbmRleC5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIEludmVydHMgYSBkaXJlY3Rpb25cclxuICogQHBhcmFtIHtEaXJlY3Rpb25TeW1ib2x9IGRpcmVjdGlvbiBEaXJlY3Rpb24gdG8gaW52ZXJ0XHJcbiAqIEByZXR1cm5zIHtEaXJlY3Rpb25TeW1ib2x9IEludmVydGVkIERpcmVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEludmVydGVkRGlyZWN0aW9uKGRpcmVjdGlvbjpEaXJlY3Rpb25TeW1ib2wpOkRpcmVjdGlvblN5bWJvbHtcclxuICAgIHN3aXRjaChkaXJlY3Rpb24pe1xyXG4gICAgICAgIGNhc2UgXCJOXCI6IHJldHVybiBcIlNcIjtcclxuICAgICAgICBjYXNlIFwiU1wiOiByZXR1cm4gXCJOXCI7XHJcbiAgICAgICAgY2FzZSBcIkVcIjogcmV0dXJuIFwiV1wiO1xyXG4gICAgICAgIGNhc2UgXCJXXCI6IHJldHVybiBcIkVcIjtcclxuICAgIH1cclxufVxyXG4iLCAiY29uc3QgaXJvbiA9IHtcclxuICAgIG5hbWU6IFwiSXJvblwiLFxyXG4gICAgXHJcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gYElyb24gJHt0aGlzLm5hbWV9YDtcclxuICAgIH0sXHJcblxyXG4gICAgYXR0YWNrKGFjYyA9IDApIHtcclxuICAgICAgICBpZiAoYWNjID4gMCkge1xyXG4gICAgICAgICAgICBhY2MgKz0gMVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWNjXHJcbiAgICB9LFxyXG5cclxuICAgIHByb3RlY3Rpb24oYWNjID0gMCkge1xyXG4gICAgICAgIGlmIChhY2MgPiAwKSB7XHJcbiAgICAgICAgICAgIGFjYyArPSAxXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhY2NcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaXJvbiIsICJpbXBvcnQge0NvbXBvbmVudCwgT2JqZWN0M0R9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XHJcbmltcG9ydCB7cHJvcGVydHl9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaS9kZWNvcmF0b3JzLmpzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBMb29rQXQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ2xvb2stYXQnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHBsYXllciBvYmplY3QgdGhhdCB0aGUgb2JqZWN0IGxvb2tzIGF0XHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gICAgdGFyZ2V0ITpPYmplY3QzRDtcclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgbGV0IHBvcyA9IHRoaXMudGFyZ2V0LmdldFBvc2l0aW9uV29ybGQoKTtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3QubG9va0F0KFtwb3NbMF0sMCxwb3NbMl1dKTtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3Qucm90YXRlQXhpc0FuZ2xlRGVnT2JqZWN0KFswLCAxLCAwXSwgMTgwKTtcclxuICAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufTsiLCAiaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xyXG5pbXBvcnQgeyBjb250YWluZXIgfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgT2JqZWN0M0QsIG1hdGggfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpXCI7XHJcbmltcG9ydCB7IHZlYzIsIHZlYzN9IGZyb20gXCJnbC1tYXRyaXhcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlLCBTdGF0ZSB9IGZyb20gXCIuLi9jbGFzc2VzL2dhbWVTdGF0ZS5qc1wiO1xyXG5pbXBvcnQgeyBUYWdzIH0gZnJvbSBcIkBzb3Jza29vdC93b25kZXJsYW5kLWNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tIFwiQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanNcIjtcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGlja1RhcmdldCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGljIFR5cGVOYW1lID0gXCJwaWNrLXRhcmdldFwiO1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIEB0eXBlIHtPYmplY3QzRH1cclxuICAgKi8gXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgYWxsb3dlZFBpY2tlck1lc2hPYmplY3QhOiBPYmplY3QzRDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHR5cGUge09iamVjdDNEfVxyXG4gICAqL1xyXG4gIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gIG5vdEFsbG93ZWRQaWNrZXJNZXNoT2JqZWN0ITogT2JqZWN0M0Q7XHJcblxyXG4gIC8qKlxyXG4gICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICovXHJcbiAgQHByb3BlcnR5LmludCgxPDwyKVxyXG4gIGZsb29yR3JvdXA6IG51bWJlciA9IDE8PDI7XHJcblxyXG4gIC8qKlxyXG4gICAqIEB0eXBlIHtPYmplY3QzRH1cclxuICAgKi9cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICBwbGF5ZXIhOiBPYmplY3QzRDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHR5cGUge09iamVjdDNEfVxyXG4gICAqL1xyXG4gIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gIG5hdkNvbnRyb2xsZXJPYmplY3QhOiBPYmplY3QzRDtcclxuICBwaWNraW5nQWN0aXZlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgaW5wdXQ6IGFueTtcclxuICBpbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIGhpdFNwb3Q6IGFueTtcclxuICBoaXRPYmplY3Q6IGFueTtcclxuICBpbmRpY2F0b3JIaWRkZW46IGFueTtcclxuICBnYW1lU3RhdGU6IEdhbWVTdGF0ZTtcclxuXHJcbiAgaW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZ2FtZVN0YXRlID0gY29udGFpbmVyLnJlc29sdmUoR2FtZVN0YXRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhlIHBpY2tpbmcgaXMgYWN0aXZlIG9yIG5vdFxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxyXG4gICAqL1xyXG4gICNjYW5UcmlnZ2VyKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWYWxpZGF0ZXMgd2hldGhlciB0aGUgb2JqZWN0IGNhbiBiZSBwaWNrZWQgb3Igbm90XHJcbiAgICogQHBhcmFtIHtPYmplY3QzRH0gb2JqIFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IFxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB6IFxyXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgb2JqZWN0IGNhbiBiZSBwaWNrZWQgb3Igbm90XHJcbiAgICovXHJcbiAgI3BpY2tpbmdBbGxvd2VkKG9iajogT2JqZWN0M0QsIHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIGxldCB0YWdzID0gb2JqLmdldENvbXBvbmVudChUYWdzKTtcclxuICAgIGlmICghdGFncykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuc3RhdGUgIT09IFN0YXRlLlBsYXlpbmcpIHtcclxuICAgICAgaWYgKHRhZ3MuaGFzVGFnKFwiYnV0dG9uXCIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmdhbWVTdGF0ZS5jYW5QaWNrKHgsIHksIHopO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhhbmRsZXMgdGhlIHBpY2tpbmcgb2YgYW4gb2JqZWN0XHJcbiAgICogQHBhcmFtIHtPYmplY3QzRH0gb2JqIFRoZSBvYmplY3QgdGhhdCBpcyBwaWNrZWRcclxuICAgKiBAcGFyYW0ge051bWJlcn0geCBcclxuICAgKiBAcGFyYW0ge051bWJlcn0geSBcclxuICAgKiBAcGFyYW0ge051bWJlcn0geiBcclxuICAgKi9cclxuICAjcGlja2VkKG9iajogT2JqZWN0M0QsIHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmdhbWVTdGF0ZS5waWNrKG9iaiwgeCwgeSwgeik7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHN0YXJ0KCkge1xyXG4gICAgdGhpcy5waWNraW5nQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5pbnB1dCA9IHRoaXMub2JqZWN0LmdldENvbXBvbmVudChcImlucHV0XCIpO1xyXG4gICAgaWYoIXRoaXMuaW5wdXQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIk5vIGlucHV0IGNvbXBvbmVudCBmb3VuZCBvbiBvYmplY3Qgd2l0aCBwaWNrLXRhcmdldCBjb21wb25lbnRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4jaGlkZUluZGljYXRvcnMoKTtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gIH1cclxuICBcclxuICBmb3JjZU5vdEFsbG93ZWQgPSBmYWxzZTtcclxuXHJcbiAgdXBkYXRlKGR0Om51bWJlcikge1xyXG4gICAgXHJcbiAgICBsZXQgeHJJbnB1dFNvdXJjZSA9IHRoaXMuaW5wdXQueHJJbnB1dFNvdXJjZTtcclxuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCB8fCAheHJJbnB1dFNvdXJjZSB8fCAheHJJbnB1dFNvdXJjZS5nYW1lcGFkIHx8IFxyXG4gICAgICAheHJJbnB1dFNvdXJjZS5nYW1lcGFkLmJ1dHRvbnMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYnV0dG9uUHJlc3NlZCA9IHhySW5wdXRTb3VyY2UuZ2FtZXBhZC5idXR0b25zWzBdLnByZXNzZWQ7XHJcbiAgICBpZiAoYnV0dG9uUHJlc3NlZCAmJiB0aGlzLnBpY2tpbmdBY3RpdmUgPT09IGZhbHNlICYmIHRoaXMuI2NhblRyaWdnZXIoKSkge1xyXG4gICAgICB0aGlzLnBpY2tpbmdBY3RpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYnV0dG9uUHJlc3NlZCAmJiB0aGlzLnBpY2tpbmdBY3RpdmUgPT09IHRydWUpIHtcclxuICAgICAgdGhpcy5waWNraW5nQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgIGlmICh0aGlzLmhpdFNwb3QpIHtcclxuICAgICAgICBjb25zdCBoaXRQb3MgPSB0aGlzLmhpdE9iamVjdC5nZXRQb3NpdGlvbldvcmxkKCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGhpdFBvc1swXTtcclxuICAgICAgICBjb25zdCB5ID0gaGl0UG9zWzJdO1xyXG4gICAgICAgIGlmICh0aGlzLiNwaWNraW5nQWxsb3dlZCh0aGlzLmhpdE9iamVjdCwgeCwgMCwgeSkgJiYgIXRoaXMuZm9yY2VOb3RBbGxvd2VkKSB7XHJcbiAgICAgICAgICB0aGlzLiNwaWNrZWQodGhpcy5oaXRPYmplY3QsIHgsIDAsIHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmluZGljYXRvckhpZGRlbikge1xyXG4gICAgICAgICAgdGhpcy4jaGlkZUluZGljYXRvcnMoKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhpdFNwb3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5waWNraW5nQWN0aXZlKSB7XHJcbiAgICAgIGNvbnN0IG9iamVjdFBvc2l0aW9uID0gdGhpcy5vYmplY3QuZ2V0UG9zaXRpb25Xb3JsZCgpOyBcclxuICAgICAgY29uc3Qgb2JqZWN0Um90YXRpb24gPSB0aGlzLm9iamVjdC5nZXRSb3RhdGlvbldvcmxkKCk7IFxyXG5cclxuICAgICAgbGV0IG9yaWdpbiA9IHZlYzMuY2xvbmUob2JqZWN0UG9zaXRpb24pO1xyXG5cclxuICAgICAgbGV0IGRlZmF1bHRGb3J3YXJkID0gdmVjMy5mcm9tVmFsdWVzKDAsIDAsIC0xKTtcclxuICAgICAgbGV0IGZvcndhcmREaXJlY3Rpb24gPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICB2ZWMzLnRyYW5zZm9ybVF1YXQoZm9yd2FyZERpcmVjdGlvbiwgZGVmYXVsdEZvcndhcmQsIG9iamVjdFJvdGF0aW9uKTtcclxuXHJcbiAgICAgIGxldCByYXlIaXQgPSB0aGlzLmVuZ2luZS5zY2VuZS5yYXlDYXN0KFxyXG4gICAgICAgIG9yaWdpbixcclxuICAgICAgICBmb3J3YXJkRGlyZWN0aW9uLFxyXG4gICAgICAgIDEgPDwgdGhpcy5mbG9vckdyb3VwXHJcbiAgICAgICk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAocmF5SGl0LmhpdENvdW50ID4gMCkge1xyXG4gICAgICAgIGlmICh0aGlzLmluZGljYXRvckhpZGRlbikge1xyXG4gICAgICAgICAgdGhpcy5pbmRpY2F0b3JIaWRkZW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5oaXRTcG90ID0gcmF5SGl0LmxvY2F0aW9uc1swXTtcclxuICAgICAgICB0aGlzLmhpdE9iamVjdCA9IHJheUhpdC5vYmplY3RzWzBdO1xyXG4gICAgICAgIGNvbnN0IGhpdFBvcyA9IHRoaXMuaGl0T2JqZWN0LmdldFBvc2l0aW9uV29ybGQoKTtcclxuICAgICAgICBjb25zdCB4ID0gaGl0UG9zWzBdO1xyXG4gICAgICAgIGNvbnN0IHkgPSBoaXRQb3NbMl07XHJcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMucGxheWVyLmdldFBvc2l0aW9uV29ybGQoKTtcclxuICAgICAgICBsZXQgcHBvcyA9IHZlYzIuZnJvbVZhbHVlcyhNYXRoLnJvdW5kKHBvc1swXSksIE1hdGgucm91bmQocG9zWzJdKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYodmVjMi5kaXN0YW5jZShwcG9zLCBbeCwgeV0pID4gMS42KSB7XHJcbiAgICAgICAgICAgdGhpcy5mb3JjZU5vdEFsbG93ZWQgPSB0cnVlO1xyXG4gICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICB0aGlzLmZvcmNlTm90QWxsb3dlZCA9IGZhbHNlO1xyXG4gICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuI3Nob3dJbmRpY2F0b3IodGhpcy5oaXRPYmplY3QsIHgsIDAsIHksIHRoaXMuZm9yY2VOb3RBbGxvd2VkKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIXRoaXMuaW5kaWNhdG9ySGlkZGVuKSB7XHJcbiAgICAgICAgICB0aGlzLiNoaWRlSW5kaWNhdG9ycygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhpdFNwb3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5oaXRPYmplY3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhpZGVzIHRoZSBpbmRpY2F0b3JzXHJcbiAgICovXHJcbiAgI2hpZGVJbmRpY2F0b3JzKCkge1xyXG4gICAgdGhpcy5hbGxvd2VkUGlja2VyTWVzaE9iamVjdC5zZXRQb3NpdGlvbldvcmxkKFsxMDAwLCAtMTAwMCwgMTAwMF0pO1xyXG4gICAgdGhpcy5ub3RBbGxvd2VkUGlja2VyTWVzaE9iamVjdC5zZXRQb3NpdGlvbldvcmxkKFsxMDAwLCAtMTAwMCwgMTAwMF0pO1xyXG4gICAgdGhpcy5pbmRpY2F0b3JIaWRkZW4gPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2hvd3MgdGhlIGluZGljYXRvciBmb3IgdGhlIG9iamVjdFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0M0R9IG9iaiB0aGUgdGFyZ2V0ZWQgb2JqZWN0XHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHggXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkgXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHogXHJcbiAgICovXHJcbiAgI3Nob3dJbmRpY2F0b3Iob2JqOiBPYmplY3QzRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgZm9yY2VOb3RBbGxvd2VkOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIFxyXG4gICAgaWYoZm9yY2VOb3RBbGxvd2VkKXsgLy8gaXQncyBub3QgYWxsb3cgZXZlciBpZiB3ZSBmb3JjZSBpdFxyXG4gICAgICB0aGlzLmFsbG93ZWRQaWNrZXJNZXNoT2JqZWN0LnNldFBvc2l0aW9uV29ybGQoWzEwMDAsIC0xMDAwLCAxMDAwXSk7XHJcbiAgICAgIHRoaXMubm90QWxsb3dlZFBpY2tlck1lc2hPYmplY3QucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XHJcbiAgICAgIHRoaXMubm90QWxsb3dlZFBpY2tlck1lc2hPYmplY3Quc2V0UG9zaXRpb25Xb3JsZChbeCwgMC4wMSwgel0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRhZ3MgPSBvYmouZ2V0Q29tcG9uZW50KFRhZ3MpO1xyXG4gICAgaWYgKCF0YWdzKSByZXR1cm47XHJcbiAgICBzd2l0Y2ggKHRydWUpIHtcclxuICAgICAgY2FzZSB0YWdzLmhhc1RhZyhcImZsb29yXCIpOlxyXG4gICAgICAgIGlmICh0aGlzLiNwaWNraW5nQWxsb3dlZChvYmosIHgsIHksIHopKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdEFsbG93ZWRQaWNrZXJNZXNoT2JqZWN0LnNldFBvc2l0aW9uV29ybGQoW1xyXG4gICAgICAgICAgICAxMDAwLCAtMTAwMCwgMTAwMCxcclxuICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgdGhpcy5hbGxvd2VkUGlja2VyTWVzaE9iamVjdC5yZXNldFBvc2l0aW9uUm90YXRpb24oKTtcclxuICAgICAgICAgIHRoaXMuYWxsb3dlZFBpY2tlck1lc2hPYmplY3Quc2V0UG9zaXRpb25Xb3JsZChbeCwgMC4wMSwgel0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmFsbG93ZWRQaWNrZXJNZXNoT2JqZWN0LnNldFBvc2l0aW9uV29ybGQoWzEwMDAsIC0xMDAwLCAxMDAwXSk7XHJcbiAgICAgICAgICB0aGlzLm5vdEFsbG93ZWRQaWNrZXJNZXNoT2JqZWN0LnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xyXG4gICAgICAgICAgdGhpcy5ub3RBbGxvd2VkUGlja2VyTWVzaE9iamVjdC5zZXRQb3NpdGlvbldvcmxkKFt4LCAwLjAxLCB6XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIHRhZ3MuaGFzVGFnKFwiYnV0dG9uXCIpOlxyXG4gICAgICAgIC8vICAgbGV0IGJ1dHRvbkNvbnRyb2xsZXIgPSBvYmouZ2V0Q29tcG9uZW50KCdidXR0b24tY29udHJvbGxlcicpO1xyXG4gICAgICAgIC8vICAgaWYoYnV0dG9uQ29udHJvbGxlcil7XHJcbiAgICAgICAgLy8gICAgIGJ1dHRvbkNvbnRyb2xsZXIuaG92ZXIoKTtcclxuICAgICAgICAvLyAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSB0YWdzLmhhc1RhZyhcImRvb3JcIik6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsICJpbXBvcnQge0NvbXBvbmVudH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcclxuaW1wb3J0IHsgcHJvcGVydHkgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qcyc7XHJcblxyXG4vKipcclxuICogU2V0IHBsYXllciBoZWlnaHQgZm9yIGEgWS1vZmZzZXQgYWJvdmUgdGhlIGdyb3VuZCBmb3JcclxuICogJ2xvY2FsJyBhbmQgJ3ZpZXdlcicgcmVmZXJlbmNlIHNwYWNlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBQbGF5ZXJIZWlnaHQyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICdwbGF5ZXItaGVpZ2h0Mic7XHJcblxyXG4gICAgQHByb3BlcnR5LmZsb2F0KClcclxuICAgIGhlaWdodDogbnVtYmVyID0gMS43NTtcclxuICAgIFxyXG4gICAgb25TZXNzaW9uU3RhcnRDYWxsYmFjayE6ICgpID0+IHZvaWQ7XHJcbiAgICBvblNlc3Npb25FbmRDYWxsYmFjayE6ICgpID0+IHZvaWQ7XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5vYmplY3QucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5vYmplY3QudHJhbnNsYXRlTG9jYWwoWzAuMCwgdGhpcy5oZWlnaHQsIDAuMF0pO1xyXG5cclxuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0Q2FsbGJhY2sgPSB0aGlzLm9uWFJTZXNzaW9uU3RhcnQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uU2Vzc2lvbkVuZENhbGxiYWNrID0gdGhpcy5vblhSU2Vzc2lvbkVuZC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25TdGFydC5hZGQodGhpcy5vblNlc3Npb25TdGFydENhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLmVuZ2luZS5vblhSU2Vzc2lvbkVuZC5hZGQodGhpcy5vblNlc3Npb25FbmRDYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EZWFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMuZW5naW5lLm9uWFJTZXNzaW9uU3RhcnQucmVtb3ZlKHRoaXMub25TZXNzaW9uU3RhcnRDYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUub25YUlNlc3Npb25FbmQucmVtb3ZlKHRoaXMub25TZXNzaW9uRW5kQ2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIG9uWFJTZXNzaW9uU3RhcnQoKSB7XHJcbiAgICAgICAgaWYgKCFbJ2xvY2FsJywgJ3ZpZXdlciddLmluY2x1ZGVzKHRoaXMuZW5naW5lLnhyPy5jdXJyZW50UmVmZXJlbmNlU3BhY2VUeXBlISkpIHtcclxuICAgICAgICAgICAgdGhpcy5vYmplY3QucmVzZXRQb3NpdGlvblJvdGF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uWFJTZXNzaW9uRW5kKCkge1xyXG4gICAgICAgIGlmICghWydsb2NhbCcsICd2aWV3ZXInXS5pbmNsdWRlcyh0aGlzLmVuZ2luZS54cj8uY3VycmVudFJlZmVyZW5jZVNwYWNlVHlwZSEpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2JqZWN0LnJlc2V0UG9zaXRpb25Sb3RhdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLm9iamVjdC50cmFuc2xhdGVMb2NhbChbMC4wLCB0aGlzLmhlaWdodCwgMC4wXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwgImltcG9ydCBcInJlZmxlY3QtbWV0YWRhdGFcIjtcclxuaW1wb3J0IHsgY29udGFpbmVyIH0gZnJvbSBcInRzeXJpbmdlXCI7XHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9iamVjdDNELCBQcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGlcIjtcclxuXHJcbmltcG9ydCB7IHZlYzMgfSBmcm9tIFwiZ2wtbWF0cml4XCI7XHJcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaS9kZWNvcmF0b3JzLmpzXCI7XHJcbmltcG9ydCB7IEdhbWVTdGF0ZSB9IGZyb20gXCIuLi9jbGFzc2VzL2dhbWVTdGF0ZS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvcnNrb290VGVsZXBvcnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHN0YXRpYyBUeXBlTmFtZSA9IFwic29yc2tvb3QtdGVsZXBvcnRcIjtcclxuICBzdGF0aWMgUHJvcGVydGllcyA9IHtcclxuICAgIC8qKiBSb290IG9mIHRoZSBwbGF5ZXIsIHRoZSBvYmplY3QgdGhhdCB3aWxsIGJlIHBvc2l0aW9uZWQgb24gdGVsZXBvcnRhdGlvbi4gKi9cclxuICAgIGNhbVJvb3Q6IFByb3BlcnR5Lm9iamVjdCgpLFxyXG4gICAgLyoqIE5vbi12ciBjYW1lcmEgZm9yIHVzZSBvdXRzaWRlIG9mIFZSICovXHJcbiAgICBjYW06IFByb3BlcnR5Lm9iamVjdCgpLFxyXG4gICAgLyoqIExlZnQgZXllIGZvciB1c2UgaW4gVlIqL1xyXG4gICAgZXllTGVmdDogUHJvcGVydHkub2JqZWN0KCksXHJcbiAgICAvKiogUmlnaHQgZXllIGZvciB1c2UgaW4gVlIqL1xyXG4gICAgZXllUmlnaHQ6IFByb3BlcnR5Lm9iamVjdCgpLFxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIExlZnQgZXllIGZvciB1c2UgaW4gVlJcclxuICAgKiBAdHlwZSB7T2JqZWN0M0R9XHJcbiAgICovXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgZXllTGVmdCE6IE9iamVjdDNEO1xyXG4gIC8qKlxyXG4gICAqIFJpZ2h0IGV5ZSBmb3IgdXNlIGluIFZSXHJcbiAgICogQHR5cGUge09iamVjdDNEfVxyXG4gICAqL1xyXG4gIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gIGV5ZVJpZ2h0ITogT2JqZWN0M0Q7XHJcbiAgLyoqXHJcbiAgICogTm9uLXZyIGNhbWVyYSBmb3IgdXNlIG91dHNpZGUgb2YgVlJcclxuICAgKiBAdHlwZSB7T2JqZWN0M0R9XHJcbiAgICovXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgY2FtITogT2JqZWN0M0Q7XHJcbiAgLyoqXHJcbiAgICogUm9vdCBvZiB0aGUgcGxheWVyLCB0aGUgb2JqZWN0IHRoYXQgd2lsbCBiZSBwb3NpdGlvbmVkIG9uIHRlbGVwb3J0YXRpb25cclxuICAgKiBAdHlwZSB7T2JqZWN0M0R9XHJcbiAgICovXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgY2FtUm9vdCE6IE9iamVjdDNEO1xyXG4gIFxyXG4gIHByaXZhdGUgX3RlbXBWZWM6IEZsb2F0MzJBcnJheT0gbmV3IEZsb2F0MzJBcnJheSgzKTtcclxuICBwcml2YXRlIF90ZW1wVmVjMDogRmxvYXQzMkFycmF5PSBuZXcgRmxvYXQzMkFycmF5KDMpO1xyXG4gIGdhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy5nYW1lU3RhdGUgPSBjb250YWluZXIucmVzb2x2ZShHYW1lU3RhdGUpO1xyXG4gICAgdGhpcy5nYW1lU3RhdGUucGxheWVyUG9zaXRpb25TdWJqZWN0LnN1YnNjcmliZSgocG9zKSA9PiB7XHJcbiAgICAgIHRoaXMuI3RlbGVwb3J0UGxheWVyKHBvcyk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMuZ2FtZVN0YXRlLnBsYXllclJvdGF0aW9uU3ViamVjdC5zdWJzY3JpYmUoKHJvdGF0aW9uKSA9PiB7XHJcbiAgICAgIHRoaXMuI3JvdGF0ZVBsYXllcihyb3RhdGlvbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gICN0ZWxlcG9ydFBsYXllcihuZXdQb3NpdGlvbjogbnVtYmVyW10pIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLl90ZW1wVmVjO1xyXG4gICAgY29uc3QgcDEgPSB0aGlzLl90ZW1wVmVjMDtcclxuXHJcbiAgICBpZiAodGhpcy5nYW1lU3RhdGUuaXNJblZSKSB7XHJcbiAgICAgIHRoaXMuZXllTGVmdC5nZXRQb3NpdGlvbldvcmxkKHApO1xyXG4gICAgICB0aGlzLmV5ZVJpZ2h0LmdldFBvc2l0aW9uV29ybGQocDEpO1xyXG5cclxuICAgICAgdmVjMy5hZGQocCwgcCwgcDEpO1xyXG4gICAgICB2ZWMzLnNjYWxlKHAsIHAsIDAuNSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNhbS5nZXRQb3NpdGlvbldvcmxkKHApO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2FtUm9vdC5nZXRQb3NpdGlvbldvcmxkKHAxKTtcclxuICAgIHZlYzMuc3ViKHAsIHAxLCBwKTtcclxuICAgIHBbMF0gKz0gbmV3UG9zaXRpb25bMF07XHJcbiAgICBwWzFdID0gbmV3UG9zaXRpb25bMV07XHJcbiAgICBwWzJdICs9IG5ld1Bvc2l0aW9uWzJdO1xyXG4gICAgdGhpcy5jYW1Sb290LnNldFBvc2l0aW9uV29ybGQocCk7XHJcbiAgfVxyXG5cclxuICAjcm90YXRlUGxheWVyKHJvdGF0aW9uVG9BZGQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5jYW1Sb290LnJlc2V0Um90YXRpb24oKTtcclxuICAgIHRoaXMuY2FtUm9vdC5yb3RhdGVBeGlzQW5nbGVEZWdPYmplY3QoWzAsIDEsIDBdLCByb3RhdGlvblRvQWRkKTtcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7Q29tcG9uZW50LCBQcm9wZXJ0eX0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcbmltcG9ydCB7IHByb3BlcnR5IH0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xuXG4vKipcbiAqIHR1cm5NYW5hZ2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBUdXJuTWFuYWdlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3R1cm5NYW5hZ2VyJztcbiAgICBcbiAgICBAcHJvcGVydHkuZmxvYXQoNS4wKVxuICAgIHR1cm5EdXJhdGlvbjogbnVtYmVyID0gNS4wOyAvLyBFYWNoIHR1cm4gbGFzdHMgZm9yIDUgc2Vjb25kc1xuICAgIFxuICAgIEBwcm9wZXJ0eS5pbnQoNSlcbiAgICBzdGVwc1BlclR1cm46IG51bWJlciA9IDU7IC8vIE51bWJlciBvZiBzdGVwcyBwZXIgdHVyblxuXG4gICAgcHJpdmF0ZSB0aW1lU2luY2VMYXN0U3RlcDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIHN0ZXBzVGFrZW46IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBpc1R1cm5JblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSB0dXJuQ291bnRlcjogbnVtYmVyID0gMDtcblxuICAgIG92ZXJyaWRlIHVwZGF0ZShkdDogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1R1cm5JblByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLmlzVHVybkluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zdGVwc1Rha2VuID0gMDtcbiAgICAgICAgICAgIHRoaXMudGltZVNpbmNlTGFzdFN0ZXAgPSAwO1xuICAgICAgICAgICAgdGhpcy50dXJuQ291bnRlcisrO1xuICAgICAgICAgICAgdGhpcy5uZXdUdXJuKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc1R1cm5JblByb2dyZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVTaW5jZUxhc3RTdGVwICs9IGR0O1xuXG4gICAgICAgICAgICBjb25zdCBzdGVwSW50ZXJ2YWwgPSB0aGlzLnR1cm5EdXJhdGlvbiAvIHRoaXMuc3RlcHNQZXJUdXJuO1xuXG4gICAgICAgICAgICB3aGlsZSAodGhpcy50aW1lU2luY2VMYXN0U3RlcCA+PSBzdGVwSW50ZXJ2YWwgJiYgdGhpcy5zdGVwc1Rha2VuIDwgdGhpcy5zdGVwc1BlclR1cm4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZXBGdW5jdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RlcHNUYWtlbisrO1xuICAgICAgICAgICAgICAgIHRoaXMudGltZVNpbmNlTGFzdFN0ZXAgLT0gc3RlcEludGVydmFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5zdGVwc1Rha2VuID09IHRoaXMuc3RlcHNQZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgLy8gRW5kIG9mIGN1cnJlbnQgdHVyblxuICAgICAgICAgICAgICAgIHRoaXMuaXNUdXJuSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW5kVHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RlcEZ1bmN0aW9uKCkge1xuICAgICBcbiAgICB9XG5cbiAgICBuZXdUdXJuKCl7XG4gICAgIFxuICAgIH1cblxuICAgIGVuZFR1cm4oKXtcbiAgICAgXG4gICAgfVxufVxuIiwgImltcG9ydCBcInJlZmxlY3QtbWV0YWRhdGFcIjtcclxuaW1wb3J0IHsgY29udGFpbmVyIH0gZnJvbSBcInRzeXJpbmdlXCI7XHJcbmltcG9ydCB7IENoZXN0Q3JlYXRvciB9IGZyb20gXCIuLi9kdW5nZW9uZ2VuL0NoZXN0Q3JlYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBMb290VGFibGUgfSBmcm9tIFwiLi4vZHVuZ2Vvbmdlbi9sb290L2xvb3RUYWJsZUJhc2UuanNcIjtcclxuaW1wb3J0IHsgSXRlbUNyZWF0b3IgfSBmcm9tIFwiLi4vZHVuZ2Vvbmdlbi9sb290L0l0ZW1DcmVhdG9yLmpzXCI7XHJcbmltcG9ydCB7IFJvb21JdGVtQ3JlYXRvciB9IGZyb20gXCIuLi9kdW5nZW9uZ2VuL3Jvb21JdGVtQ3JlYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBHYW1lU3RhdGUgfSBmcm9tIFwiLi4vY2xhc3Nlcy9nYW1lU3RhdGUuanNcIjtcclxuaW1wb3J0IHsgUm9vbUNyZWF0b3IgfSBmcm9tIFwiLi4vZHVuZ2Vvbmdlbi9Sb29tQ3JlYXRvci5qc1wiO1xyXG5pbXBvcnQgeyBJbnRlcm5hbFVJTWFuYWdlciB9IGZyb20gXCIuLi91aS9jbGFzc2VzL0ludGVybmFsVUlNYW5hZ2VyLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVwZW5kZW5jeVJlZ2lzdHJhciB7XHJcbiAgcHVibGljIHN0YXRpYyByZWdpc3RlckRlcGVuZGVuY2llcygpOiB2b2lkIHtcclxuICAgIGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbihHYW1lU3RhdGUsIEdhbWVTdGF0ZSk7XHJcbiAgICBjb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24oQ2hlc3RDcmVhdG9yLCBDaGVzdENyZWF0b3IpO1xyXG4gICAgY29udGFpbmVyLnJlZ2lzdGVyU2luZ2xldG9uKExvb3RUYWJsZSwgTG9vdFRhYmxlKTtcclxuICAgIGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbihSb29tSXRlbUNyZWF0b3IsIFJvb21JdGVtQ3JlYXRvcik7XHJcbiAgICBjb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24oSXRlbUNyZWF0b3IsIEl0ZW1DcmVhdG9yKTtcclxuICAgIGNvbnRhaW5lci5yZWdpc3RlclNpbmdsZXRvbihSb29tQ3JlYXRvciwgUm9vbUNyZWF0b3IpO1xyXG4gICAgXHJcbiAgICBjb250YWluZXIucmVnaXN0ZXJTaW5nbGV0b24oSW50ZXJuYWxVSU1hbmFnZXIsIEludGVybmFsVUlNYW5hZ2VyKTtcclxuICB9XHJcbn1cclxuIiwgImltcG9ydCB7IEdlbmVyaWNJdGVtIH0gZnJvbSBcIi4uL29iamVjdHMvR2VuZXJpY0l0ZW0uanNcIjtcclxuaW1wb3J0IHsgQmVoYXZpb3JCYXNlIH0gZnJvbSBcIi4uL29iamVjdHMvYmVoYXZpb3JCYXNlLmpzXCI7XHJcbmltcG9ydCB7IEl0ZW0gfSBmcm9tIFwiLi4vb2JqZWN0cy9pdGVtLmpzXCI7XHJcbmltcG9ydCB7IHNpbmdsZXRvbiB9IGZyb20gXCJ0c3lyaW5nZVwiO1xyXG5cclxuQHNpbmdsZXRvbigpXHJcbmV4cG9ydCBjbGFzcyBJdGVtQ3JlYXRvciBpbXBsZW1lbnRzIEl0ZW1DcmVhdG9yQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlSXRlbShiYXNlSXRlbTogR2VuZXJpY0l0ZW0sIGJlaGF2aW9yczogQmVoYXZpb3JCYXNlW10gfCBudWxsID0gbnVsbCk6IEl0ZW0ge1xyXG4gICAgY29uc3QgaXRlbSA9IGJhc2VJdGVtO1xyXG4gICAgaWYgKGJlaGF2aW9ycyAhPSBudWxsICYmIGJlaGF2aW9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAoY29uc3QgYmVoYXZpb3Igb2YgYmVoYXZpb3JzKSB7XHJcbiAgICAgICAgaXRlbS5hZGRCZWhhdmlvcihiZWhhdmlvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJdGVtQ3JlYXRvckJhc2V7XHJcbiAgY3JlYXRlSXRlbShiYXNlSXRlbTpHZW5lcmljSXRlbSwgYmVoYXZpb3JzOkJlaGF2aW9yQmFzZVtdfG51bGwpOiBJdGVtO1xyXG4gIGNyZWF0ZUl0ZW0oYmFzZUl0ZW06R2VuZXJpY0l0ZW0pOiBJdGVtO1xyXG59XHJcblxyXG4iLCAiaW1wb3J0IHtDb21wb25lbnQsIFR5cGV9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVGlsZURlc2NyaXB0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3RpbGUtZGVzY3JpcHRvcic7XHJcbiAgICBzdGF0aWMgUHJvcGVydGllcyA9IHtcclxuICAgICAgICBjYW5Sb3RhdGU6IHt0eXBlOiBUeXBlLkJvb2wsIGRlZmF1bHQ6IHRydWV9LFxyXG4gICAgICAgIGNhbk1pcnJvcjoge3R5cGU6IFR5cGUuQm9vbCwgZGVmYXVsdDogdHJ1ZX0sXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6bnVtYmVyKSB7XHJcbiAgICB9XHJcblxyXG59OyIsICJpbXBvcnQgeyBTb3VuZGZ4UGxheWVyIH0gZnJvbSBcIi4vdXRpbHMvc291bmRmeC1wbGF5ZXIuanNcIjtcclxuaW1wb3J0IHsgTXVzaWNQbGF5ZXIgfSBmcm9tIFwiLi91dGlscy9tdXNpYy1wbGF5ZXIuanNcIjtcclxuaW1wb3J0IHsgR2FtZVN0YXRlIH0gZnJvbSBcIi4vY2xhc3Nlcy9nYW1lU3RhdGUuanNcIjtcclxuaW1wb3J0IHsgT2JqZWN0Q2FjaGUgfSBmcm9tIFwiQHNvcnNrb290L3dvbmRlcmxhbmQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBzaW5nbGV0b24gfSBmcm9tIFwidHN5cmluZ2VcIjtcclxuXHJcbkBzaW5nbGV0b24oKVxyXG5jbGFzcyBHYW1lR2xvYmFscyB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBHYW1lR2xvYmFscyB8IG51bGwgPSBudWxsO1xyXG5cclxuICAvL2dhbWVTdGF0ZTogR2FtZVN0YXRlO1xyXG4gIHNvdW5kRnhQbGF5ZXI6IFNvdW5kZnhQbGF5ZXI7XHJcbiAgLy9tdXNpY1BsYXllcjogTXVzaWNQbGF5ZXI7XHJcbiAgLy8gcGFydGljbGVQb29sOiBudWxsO1xyXG4gIGdsb2JhbE9iamVjdENhY2hlOiBPYmplY3RDYWNoZSB8IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy90aGlzLmdhbWVTdGF0ZSA9IGNvbnRhaW5lci5yZXNvbHZlPEdhbWVTdGF0ZT4oR2FtZVN0YXRlKTtcclxuICAgIHRoaXMuc291bmRGeFBsYXllciA9IG5ldyBTb3VuZGZ4UGxheWVyKCk7XHJcbiAgICAvL3RoaXMubXVzaWNQbGF5ZXIgPSBuZXcgTXVzaWNQbGF5ZXIoKTtcclxuICAgIC8vICB0aGlzLnBhcnRpY2xlUG9vbD0gbnVsbDtcclxuICAgIHRoaXMuZ2xvYmFsT2JqZWN0Q2FjaGUgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBHYW1lR2xvYmFscyB7XHJcbiAgICBpZiAoR2FtZUdsb2JhbHMuX2luc3RhbmNlID09PSBudWxsKSB7XHJcbiAgICAgIEdhbWVHbG9iYWxzLl9pbnN0YW5jZSA9IG5ldyBHYW1lR2xvYmFscygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEdhbWVHbG9iYWxzLl9pbnN0YW5jZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVHbG9iYWxzLmluc3RhbmNlO1xyXG4iLCAiXHJcbmV4cG9ydCBjb25zdCBTb3VuZHMgPSB7XHJcbiAgICBjbGljazowLFxyXG4gICAgbW92ZWJveDoxLFxyXG4gICAgdGVsZXBvcnQ6MixcclxuICAgIGJveHN0b3A6M1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU291bmRmeFBsYXllcntcclxuICAgIGluaXRpYWxpemVkOiBib29sZWFuO1xyXG4gICAgY3VycmVudFNmeEluZGV4OiBudW1iZXI7XHJcbiAgICBhdWRpb3Bvb2w6IEhUTUxBdWRpb0VsZW1lbnRbXTtcclxuICAgIHBhbm5lck5vZGVzOiBQYW5uZXJOb2RlW107XHJcbiAgICBhdWRpb0NvbnRleHQ6IGFueTtcclxuICAgIHNvdW5kcyE6IEhUTUxBdWRpb0VsZW1lbnRbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7ICAgICAgICAgIFxyXG4gICAgICAgIHRoaXMuY3VycmVudFNmeEluZGV4ID0wO1xyXG4gICAgICAgIHRoaXMuYXVkaW9wb29sID0gW107XHJcbiAgICAgICAgdGhpcy5wYW5uZXJOb2RlcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRBdWRpbygpIHtcclxuICAgICAgICBpZiAodGhpcy5hdWRpb0NvbnRleHQpIHJldHVybjtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNvdW5kcz0gW1xyXG4gICAgICAgICAgICBuZXcgQXVkaW8oJ3NmeC9jbGljay5tcDMnKSxcclxuICAgICAgICAgICAgbmV3IEF1ZGlvKCdzZngvbW92ZWJveC5tcDMnKSxcclxuICAgICAgICAgICAgbmV3IEF1ZGlvKCdzZngvdGVsZXBvcnQubXAzJyksXHJcbiAgICAgICAgICAgIG5ldyBBdWRpbygnc2Z4L2JveHN0b3AubXAzJylcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dC5saXN0ZW5lci51cFkudmFsdWUgPSAxOyAgICAgICAgXHJcbiAgICAgICAgbGV0IGdhaW4gPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XHJcbiAgICAgICAgZ2Fpbi5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICBcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI1OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oKTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5hdWRpb3Bvb2wucHVzaChhdWRpbyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoYXVkaW8pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcG4gPSBuZXcgUGFubmVyTm9kZSh0aGlzLmF1ZGlvQ29udGV4dCwge1xyXG4gICAgICAgICAgICAgICAgcGFubmluZ01vZGVsOiAnSFJURicsXHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZU1vZGVsOiAnZXhwb25lbnRpYWwnLFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuY29ubmVjdChwbik7XHJcbiAgICAgICAgICAgIHBuLmNvbm5lY3QoZ2Fpbik7XHJcbiAgICAgICAgICAgIHRoaXMucGFubmVyTm9kZXMucHVzaChwbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlTb3VuZChhdWRpb0luZGV4Om51bWJlciwgcG9zPzpudW1iZXJbXSkge1xyXG4gICAgICAgIGlmKCF0aGlzLmF1ZGlvQ29udGV4dCkgcmV0dXJuO1xyXG4gICAgICAgIGlmKCFwb3MgfHwgIXBvc1swXSB8fCBpc05hTihwb3NbMF0pKXtcclxuICAgICAgICAgICAgcG9zPVswLDAsMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMucGFubmVyTm9kZXNbdGhpcy5jdXJyZW50U2Z4SW5kZXhdLnBvc2l0aW9uWC52YWx1ZSA9IHBvc1swXTtcclxuICAgICAgICB0aGlzLnBhbm5lck5vZGVzW3RoaXMuY3VycmVudFNmeEluZGV4XS5wb3NpdGlvblkudmFsdWUgPSBwb3NbMV07XHJcbiAgICAgICAgdGhpcy5wYW5uZXJOb2Rlc1t0aGlzLmN1cnJlbnRTZnhJbmRleF0ucG9zaXRpb25aLnZhbHVlID0gcG9zWzJdO1xyXG5cclxuICAgICAgICB0aGlzLmF1ZGlvcG9vbFt0aGlzLmN1cnJlbnRTZnhJbmRleF0uc3JjID0gdGhpcy5zb3VuZHNbYXVkaW9JbmRleF0uc3JjOyAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hdWRpb3Bvb2xbdGhpcy5jdXJyZW50U2Z4SW5kZXhdLnBsYXkoKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRTZnhJbmRleCA9ICh0aGlzLmN1cnJlbnRTZnhJbmRleCArIDEpICUgMjU7XHJcbiAgICB9XHJcbn07XHJcbiIsICJpbXBvcnQgeyBDb21wb25lbnQsIE9iamVjdDNEIH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG5pbXBvcnQgeyBwcm9wZXJ0eSB9IGZyb20gXCJAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qc1wiO1xyXG5pbXBvcnQgeyBVaUJ1dHRvbiB9IGZyb20gXCIuL3VpLWJ1dHRvbi5qc1wiO1xyXG5pbXBvcnQgeyBVaU1hbmFnZXIgfSBmcm9tIFwiLi91aS1tYW5hZ2VyLmpzXCI7XHJcblxyXG4vKipcclxuICogdWktYnV0dG9uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVWlBY3Rpb25DbG9zZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgc3RhdGljIFR5cGVOYW1lID0gXCJ1aS1hY3Rpb24tY2xvc2VcIjtcclxuXHJcbiAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgdWlCdXR0b25PYmplY3Q6IE9iamVjdDNEO1xyXG5cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICB1aVJvb3RPYmplY3Q6IE9iamVjdDNEO1xyXG5cclxuICBAcHJvcGVydHkub2JqZWN0KClcclxuICB1aU1hbmFnZXJPYmplY3Q6IE9iamVjdDNEO1xyXG5cclxuICBwcml2YXRlIHVpQnV0dG9uOiBVaUJ1dHRvbjtcclxuICBwcml2YXRlIHVpTWFuYWdlcjogVWlNYW5hZ2VyO1xyXG5cclxuICBzdGFydCgpOiB2b2lkIHtcclxuICAgIGNvbnN0IGJ1dCA9IHRoaXMudWlCdXR0b25PYmplY3QuZ2V0Q29tcG9uZW50KFVpQnV0dG9uKTtcclxuICAgIGlmICghYnV0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGJ1dHRvbiBjb21wb25lbnQgZm91bmQgb24gYnV0dG9uIG1lc2ggb2JqZWN0XCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51aUJ1dHRvbiA9IGJ1dDtcclxuXHJcbiAgICBjb25zdCB1aW1hbiA9IHRoaXMudWlNYW5hZ2VyT2JqZWN0LmdldENvbXBvbmVudChVaU1hbmFnZXIpO1xyXG4gICAgaWYgKCF1aW1hbikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHVpIG1hbmFnZXIgY29tcG9uZW50IGZvdW5kIG9uIHVpIG1hbmFnZXIgb2JqZWN0XCIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51aU1hbmFnZXIgPSB1aW1hbjtcclxuXHJcbiAgICBpZighdGhpcy51aVJvb3RPYmplY3QpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB1aSByb290IG9iamVjdCBzZXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy51aUJ1dHRvbi5wcmVzc2VkLmFkZCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51aU1hbmFnZXIuY2xvc2VBbGwoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCAiaW1wb3J0IHtDb21wb25lbnQsIEVtaXR0ZXIsIE1hdGVyaWFsLCBNZXNoQ29tcG9uZW50LCBOdW1iZXJBcnJheSwgT2JqZWN0M0QsIFdvbmRlcmxhbmRFbmdpbmV9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaSc7XHJcbmltcG9ydCB7cHJvcGVydHl9IGZyb20gJ0B3b25kZXJsYW5kZW5naW5lL2FwaS9kZWNvcmF0b3JzLmpzJztcclxuaW1wb3J0IHsgQ3Vyc29yLCBDdXJzb3JUYXJnZXQsIEV2ZW50VHlwZXMgfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9jb21wb25lbnRzJztcclxuXHJcbi8qKlxyXG4gKiB1aS1idXR0b25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBVaUJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndWktYnV0dG9uJztcclxuXHJcbiAgICBAcHJvcGVydHkubWF0ZXJpYWwoKVxyXG4gICAgaG92ZXJNYXRlcmlhbDogTWF0ZXJpYWw7XHJcblxyXG4gICAgQHByb3BlcnR5Lm9iamVjdCgpXHJcbiAgICBidXR0b25NZXNoT2JqZWN0OiBPYmplY3QzRDtcclxuXHJcbiAgICBAcHJvcGVydHkub2JqZWN0KClcclxuICAgIGJ1dHRvblRhcmdldE9iamVjdDogT2JqZWN0M0Q7XHJcblxyXG4gICAgcHJlc3NlZCE6IEVtaXR0ZXI7XHJcblxyXG4gICAgcmV0dXJuUG9zOiBOdW1iZXJBcnJheTtcclxuICAgIG1lc2g6IE1lc2hDb21wb25lbnQ7XHJcbiAgICBkZWZhdWx0TWF0ZXJpYWw6IE1hdGVyaWFsO1xyXG4gICAgdGFyZ2V0OiBDdXJzb3JUYXJnZXQ7XHJcblxyXG4gICAgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnByZXNzZWQgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLmJ1dHRvbk1lc2hPYmplY3QuZ2V0Q29tcG9uZW50KE1lc2hDb21wb25lbnQpO1xyXG4gICAgICAgIGlmKCFtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWVzaCBjb21wb25lbnQgZm91bmQgb24gYnV0dG9uIG1lc2ggb2JqZWN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWVzaCA9IG07XHJcblxyXG4gICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tZXNoLm1hdGVyaWFsO1xyXG4gICAgICAgIGlmKCFtYXRlcmlhbCl7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gbWF0ZXJpYWwgZm91bmQgb24gYnV0dG9uIG1lc2ggb2JqZWN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGVmYXVsdE1hdGVyaWFsID0gbWF0ZXJpYWw7XHJcblxyXG4gICAgICAgIHRoaXMuYnV0dG9uTWVzaE9iamVjdC5nZXRQb3NpdGlvbkxvY2FsKHRoaXMucmV0dXJuUG9zKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5idXR0b25UYXJnZXRPYmplY3QuZ2V0Q29tcG9uZW50KEN1cnNvclRhcmdldCk7ICAgICAgICBcclxuICAgICAgICBpZighdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY3Vyc29yIHRhcmdldCBmb3VuZCBvbiBidXR0b24gYW5kIGNvdWxkIG5vdCBhZGQgb25lJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuXHJcbiAgICAgICAgdGhpcy5yZXR1cm5Qb3MgPSB0aGlzLmJ1dHRvbk1lc2hPYmplY3QuZ2V0UG9zaXRpb25Mb2NhbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXQub25Ib3Zlci5hZGQodGhpcy5vbkhvdmVyLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0Lm9uVW5ob3Zlci5hZGQodGhpcy5vblVuaG92ZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy50YXJnZXQub25Eb3duLmFkZCh0aGlzLm9uRG93bi5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnRhcmdldC5vblVwLmFkZCh0aGlzLm9uVXAuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EZWFjdGl2YXRlKCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0Lm9uSG92ZXIucmVtb3ZlKHRoaXMub25Ib3Zlcik7XHJcbiAgICAgICAgdGhpcy50YXJnZXQub25VbmhvdmVyLnJlbW92ZSh0aGlzLm9uVW5ob3Zlcik7XHJcbiAgICAgICAgdGhpcy50YXJnZXQub25Eb3duLnJlbW92ZSh0aGlzLm9uRG93bik7XHJcbiAgICAgICAgdGhpcy50YXJnZXQub25VcC5yZW1vdmUodGhpcy5vblVwKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIC8qIENhbGxlZCBldmVyeSBmcmFtZS4gKi9cclxuICAgIH1cclxuXHJcbiAgICBvbkhvdmVyKG9iajNEXzpPYmplY3QzRCwgY3Vyc29yOkN1cnNvciwgZXZlbnRUeXBlczpFdmVudFR5cGVzfHVuZGVmaW5lZCl7XHJcbiAgICAgICAgdGhpcy5tZXNoLm1hdGVyaWFsID0gdGhpcy5ob3Zlck1hdGVyaWFsO1xyXG4gICAgICAgLy8gaGFwdGljRmVlZGJhY2soY3Vyc29yLm9iamVjdCwgMC41LCA1MCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25VbmhvdmVyKG9iajNEXzpPYmplY3QzRCwgY3Vyc29yOkN1cnNvciwgZXZlbnRUeXBlczpFdmVudFR5cGVzfHVuZGVmaW5lZCl7XHJcbiAgICAgICAgdGhpcy5tZXNoLm1hdGVyaWFsID0gdGhpcy5kZWZhdWx0TWF0ZXJpYWw7XHJcbiAgICAgICAvLyBoYXB0aWNGZWVkYmFjayhjdXJzb3Iub2JqZWN0LCAwLjMsIDUwKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRvd24ob2JqM0RfOk9iamVjdDNELCBjdXJzb3I6Q3Vyc29yLCBldmVudFR5cGVzOkV2ZW50VHlwZXN8dW5kZWZpbmVkKXtcclxuICAgICAgICAvL3RoaXMuc291bmRDbGljay5wbGF5KCk7XHJcbiAgICAgICAgdGhpcy5idXR0b25NZXNoT2JqZWN0LnRyYW5zbGF0ZUxvY2FsKFswLjAsIC0wLjEsIDAuMF0pO1xyXG4gICAgICAgLy8gaGFwdGljRmVlZGJhY2soY3Vyc29yLm9iamVjdCwgMS4wLCAyMCk7XHJcbiAgICB9XHJcbiAgICBvblVwKG9iajNEXzpPYmplY3QzRCwgY3Vyc29yOkN1cnNvciwgZXZlbnRUeXBlczpFdmVudFR5cGVzfHVuZGVmaW5lZCl7XHJcbiAgICAgICAvLyB0aGlzLnNvdW5kVW5DbGljay5wbGF5KCk7XHJcbiAgICAgICAgdGhpcy5idXR0b25NZXNoT2JqZWN0LnNldFBvc2l0aW9uTG9jYWwodGhpcy5yZXR1cm5Qb3MpO1xyXG4gICAgICAgIHRoaXMucHJlc3NlZC5ub3RpZnkoKTtcclxuICAgICAgLy8gIGhhcHRpY0ZlZWRiYWNrKGN1cnNvci5vYmplY3QsIDAuNywgMjApO1xyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQge0NvbXBvbmVudCwgTnVtYmVyQXJyYXksIE9iamVjdDNEfSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGknO1xyXG5pbXBvcnQge3Byb3BlcnR5fSBmcm9tICdAd29uZGVybGFuZGVuZ2luZS9hcGkvZGVjb3JhdG9ycy5qcyc7XHJcbmltcG9ydCB7IGNvbnRhaW5lciB9IGZyb20gJ3RzeXJpbmdlJztcclxuaW1wb3J0IHsgSW50ZXJuYWxVSU1hbmFnZXIgfSBmcm9tICcuLi9jbGFzc2VzL0ludGVybmFsVUlNYW5hZ2VyLmpzJztcclxuXHJcbi8qKlxyXG4gKiB1aU1hbmFnZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVaU1hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgc3RhdGljIFR5cGVOYW1lID0gJ3VpLW1hbmFnZXInO1xyXG5cclxuICAgIEBwcm9wZXJ0eS5vYmplY3QoKVxyXG4gICAgdWlDb2xsZWN0aW9uOiBPYmplY3QzRDtcclxuXHJcbiAgICBwcml2YXRlIHVpRWxlbWVudHM6IE9iamVjdDNEW10gPSBbXTtcclxuICAgIGN1cnJlbnRWaXNpYmxlVUk6IHN0cmluZyB8IG51bGw7XHJcbiAgICBcclxuICAgIHN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmKCF0aGlzLnVpQ29sbGVjdGlvbikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHVpIGNvbGxlY3Rpb24gc2V0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMudWlDb2xsZWN0aW9uLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLnNldFBvc2l0aW9uV29ybGQoWzAsIC0xMDAwMCwgMF0pO1xyXG4gICAgICAgICAgICB0aGlzLnVpRWxlbWVudHMucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbnRlcm5hbFVJTWFuYWdlciA9IGNvbnRhaW5lci5yZXNvbHZlKEludGVybmFsVUlNYW5hZ2VyKTtcclxuICAgICAgICBpbnRlcm5hbFVJTWFuYWdlci5yZWdpc3RlckNvbXBvbmVudCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKG5hbWU6c3RyaW5nLCBwb3NpdGlvbjpSZWFkb25seTxOdW1iZXJBcnJheT4pOnZvaWRcclxuICAgIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy51aUVsZW1lbnRzLmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQubmFtZSA9PT0gbmFtZSk7XHJcbiAgICAgICAgaWYoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyB1aSBlbGVtZW50IGZvdW5kIHdpdGggbmFtZSAke25hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuY3VycmVudFZpc2libGVVSSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZpc2libGVVSSA9IG5hbWU7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0UG9zaXRpb25Xb3JsZChwb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIGFsbCBVSSBlbGVtZW50cywgYnkgbW92aW5nIHRoZW0gZmFyIGF3YXkuXHJcbiAgICAgKi9cclxuICAgIGNsb3NlQWxsKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgdWlSb290T2JqZWN0IG9mIHRoaXMudWlFbGVtZW50cykge1xyXG4gICAgICAgICAgICAgIHVpUm9vdE9iamVjdC5zZXRQb3NpdGlvbldvcmxkKFswLCAtMTAwMDAsIDBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmlzaWJsZVVJID0gbnVsbDtcclxuICAgIH1cclxufVxyXG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIkB3b25kZXJsYW5kZW5naW5lL2FwaVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVpQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIHN0YXRpYyBUeXBlTmFtZSA9ICd1aS1jb21wb25lbnQnO1xyXG5cclxufSIsICJpbXBvcnQge0NvbXBvbmVudCwgV29uZGVybGFuZEVuZ2luZX0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpJztcclxuaW1wb3J0IHtwcm9wZXJ0eX0gZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvYXBpL2RlY29yYXRvcnMuanMnO1xyXG5cclxuLyoqXHJcbiAqIHVpLXBhbmVsXHJcbiAqIERvZXMgbm90IG11Y2ggYXQgdGhlIG1vbWVudC4gSnVzdCBhIHBsYWNlaG9sZGVyIGZvciBub3cuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVWlQYW5lbCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBzdGF0aWMgVHlwZU5hbWUgPSAndWktcGFuZWwnO1xyXG5cclxufVxyXG4iLCAiaW1wb3J0ICogYXMgX19zb3Jza29vdF93b25kZXJsYW5kX2NvbXBvbmVudHMgZnJvbSAnQHNvcnNrb290L3dvbmRlcmxhbmQtY29tcG9uZW50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX19zb3Jza29vdF93b25kZXJsYW5kX2NvbXBvbmVudHMpO1xuaW1wb3J0ICogYXMgX193b25kZXJsYW5kZW5naW5lX2NvbXBvbmVudHMgZnJvbSAnQHdvbmRlcmxhbmRlbmdpbmUvY29tcG9uZW50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX193b25kZXJsYW5kZW5naW5lX2NvbXBvbmVudHMpO1xuaW1wb3J0ICogYXMgX196ZXN0eW1hcmtldF93b25kZXJsYW5kX3NkayBmcm9tICdAemVzdHltYXJrZXQvd29uZGVybGFuZC1zZGsnO1xuX3JlZ2lzdGVyRWRpdG9yKF9femVzdHltYXJrZXRfd29uZGVybGFuZF9zZGspO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2Rvb3JfaGFuZGxlcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvY29tcG9uZW50cy9kb29yLWhhbmRsZXIudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfY29tcG9uZW50c19kb29yX2hhbmRsZXJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2ZhZGVTY3JlZW5fdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2NvbXBvbmVudHMvZmFkZVNjcmVlbi50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2ZhZGVTY3JlZW5fdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2dhbWVfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2NvbXBvbmVudHMvZ2FtZS50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2dhbWVfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2xldmVsX2dlbmVyYXRvcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvY29tcG9uZW50cy9sZXZlbC1nZW5lcmF0b3IudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfY29tcG9uZW50c19sZXZlbF9nZW5lcmF0b3JfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2xvb2tfYXRfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2NvbXBvbmVudHMvbG9vay1hdC50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX2xvb2tfYXRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX3BpY2tfdGFyZ2V0X3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy9jb21wb25lbnRzL3BpY2stdGFyZ2V0LnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX2NvbXBvbmVudHNfcGlja190YXJnZXRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX3BsYXllcl9oZWlnaHQyX3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy9jb21wb25lbnRzL3BsYXllci1oZWlnaHQyLnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX2NvbXBvbmVudHNfcGxheWVyX2hlaWdodDJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX3RlbGVwb3J0X3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy9jb21wb25lbnRzL3RlbGVwb3J0LnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX2NvbXBvbmVudHNfdGVsZXBvcnRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb25lbnRzX3R1cm5NYW5hZ2VyX3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy9jb21wb25lbnRzL3R1cm5NYW5hZ2VyLnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX2NvbXBvbmVudHNfdHVybk1hbmFnZXJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19jb21wb3NpdGlvblJvb3RfZGVwZW5kZW5jeVJlZ2lzdHJhcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvY29tcG9zaXRpb25Sb290L2RlcGVuZGVuY3lSZWdpc3RyYXIudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfY29tcG9zaXRpb25Sb290X2RlcGVuZGVuY3lSZWdpc3RyYXJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX0NoZXN0Q3JlYXRvcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvZHVuZ2Vvbmdlbi9DaGVzdENyZWF0b3IudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfZHVuZ2Vvbmdlbl9DaGVzdENyZWF0b3JfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX01hemVHZW5lcmF0b3JfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vTWF6ZUdlbmVyYXRvci50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX01hemVHZW5lcmF0b3JfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX1BhdHRlcm5TZXRfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vUGF0dGVyblNldC50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX1BhdHRlcm5TZXRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX1Jvb21DcmVhdG9yX3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy9kdW5nZW9uZ2VuL1Jvb21DcmVhdG9yLnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX2R1bmdlb25nZW5fUm9vbUNyZWF0b3JfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX1Jvb21SZW5kZXJlcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvZHVuZ2Vvbmdlbi9Sb29tUmVuZGVyZXIudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfZHVuZ2Vvbmdlbl9Sb29tUmVuZGVyZXJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX2NvbXBvbmVudHNfdGlsZUNvbXBvbmVudF90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvZHVuZ2Vvbmdlbi9jb21wb25lbnRzL3RpbGVDb21wb25lbnQudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfZHVuZ2Vvbmdlbl9jb21wb25lbnRzX3RpbGVDb21wb25lbnRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX29iamVjdHNfYmVoYXZpb3JzX3Nob3dJbnZlbnRvcnlfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vb2JqZWN0cy9iZWhhdmlvcnMvc2hvd0ludmVudG9yeS50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX29iamVjdHNfYmVoYXZpb3JzX3Nob3dJbnZlbnRvcnlfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3Jvb21fdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vcm9vbS50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3Jvb21fdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3Jvb21JdGVtQ3JlYXRvcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvZHVuZ2Vvbmdlbi9yb29tSXRlbUNyZWF0b3IudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfZHVuZ2Vvbmdlbl9yb29tSXRlbUNyZWF0b3JfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3Jvb21UZW1wbGF0ZXNfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vcm9vbVRlbXBsYXRlcy50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3Jvb21UZW1wbGF0ZXNfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3RpbGVfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vdGlsZS50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3RpbGVfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3RpbGVzZXRfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vdGlsZXNldC50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3RpbGVzZXRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3V0aWxzX2RpcmVjdGlvbkhlbHBlcnNfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL2R1bmdlb25nZW4vdXRpbHMvZGlyZWN0aW9uSGVscGVycy50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3V0aWxzX2RpcmVjdGlvbkhlbHBlcnNfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19kdW5nZW9uZ2VuX3V0aWxzX2V4dHJhY3Rvcl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvZHVuZ2Vvbmdlbi91dGlscy9leHRyYWN0b3IudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfZHVuZ2Vvbmdlbl91dGlsc19leHRyYWN0b3JfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc19nbG9iYWxzX3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy9nbG9iYWxzLnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX2dsb2JhbHNfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jbGFzc2VzX0ludGVybmFsVUlNYW5hZ2VyX3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy91aS9jbGFzc2VzL0ludGVybmFsVUlNYW5hZ2VyLnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX3VpX2NsYXNzZXNfSW50ZXJuYWxVSU1hbmFnZXJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jb21wb25lbnRzX3VpX2FjdGlvbl9jbG9zZV90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvdWkvY29tcG9uZW50cy91aS1hY3Rpb24tY2xvc2UudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfdWlfY29tcG9uZW50c191aV9hY3Rpb25fY2xvc2VfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jb21wb25lbnRzX3VpX2J1dHRvbl90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvdWkvY29tcG9uZW50cy91aS1idXR0b24udHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfdWlfY29tcG9uZW50c191aV9idXR0b25fdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jb21wb25lbnRzX3VpX2NvbXBvbmVudF90cyBmcm9tICdFOi9EZXYvUnVuZXNPZlRoZURlZXAvanMvdWkvY29tcG9uZW50cy91aS1jb21wb25lbnQudHMnO1xuX3JlZ2lzdGVyRWRpdG9yKF9FX19EZXZfUnVuZXNPZlRoZURlZXBfanNfdWlfY29tcG9uZW50c191aV9jb21wb25lbnRfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jb21wb25lbnRzX3VpX21hbmFnZXJfdHMgZnJvbSAnRTovRGV2L1J1bmVzT2ZUaGVEZWVwL2pzL3VpL2NvbXBvbmVudHMvdWktbWFuYWdlci50cyc7XG5fcmVnaXN0ZXJFZGl0b3IoX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jb21wb25lbnRzX3VpX21hbmFnZXJfdHMpO1xuaW1wb3J0ICogYXMgX0VfX0Rldl9SdW5lc09mVGhlRGVlcF9qc191aV9jb21wb25lbnRzX3VpX3BhbmVsX3RzIGZyb20gJ0U6L0Rldi9SdW5lc09mVGhlRGVlcC9qcy91aS9jb21wb25lbnRzL3VpLXBhbmVsLnRzJztcbl9yZWdpc3RlckVkaXRvcihfRV9fRGV2X1J1bmVzT2ZUaGVEZWVwX2pzX3VpX2NvbXBvbmVudHNfdWlfcGFuZWxfdHMpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7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LENBQUMsSUFBSSxDQUFDO0FBQzNDLFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssZUFBZSxFQUFFLGNBQWMsQ0FBQyxFQUFDLElBQUksRUFBRSxZQUFXLENBQUMsSUFBSSxDQUFDO0FBQzdELFlBQUFBLE1BQUssZUFBZSxFQUFFLGNBQWMsQ0FBQyxFQUFDLElBQUksRUFBRSxZQUFXLENBQUMsSUFBSSxDQUFDO0FBQzdELFlBQUFBLE1BQUssV0FBVyxFQUFFLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBRSxRQUFPLENBQUMsSUFBSSxDQUFDO0FBQ2pELFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssWUFBWSxFQUFFLFdBQVcsQ0FBQyxFQUFDLElBQUksRUFBRSxTQUFRLENBQUMsSUFBSSxDQUFDO0FBQ3BELFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssVUFBVSxFQUFFLFNBQVMsQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFNLENBQUMsSUFBSSxDQUFDO0FBQzlDLFlBQUFBLE1BQUssWUFBWSxFQUFFLFdBQVcsQ0FBQyxFQUFDLElBQUksRUFBRSxTQUFRLENBQUMsSUFBSSxDQUFDO0FBQ3BELFlBQUFBLE1BQUssWUFB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ckNPLFdBQVMsU0FBUztBQUN2QixRQUFJLE1BQU0sSUFBYSxXQUFXLENBQUM7QUFFbkMsUUFBYSxjQUFjLGNBQWM7QUFDdkMsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQUEsSUFDWDtBQUVBLFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFdBQU87QUFBQSxFQUNUOzs7QUM1QkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsa0JBQUFDO0FBQUEsSUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWU8sV0FBU0MsVUFBUztBQUN2QixRQUFJLE1BQU0sSUFBYSxXQUFXLEVBQUU7QUFFcEMsUUFBYSxjQUFjLGNBQWM7QUFDdkMsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksRUFBRSxJQUFJO0FBQ1YsVUFBSSxFQUFFLElBQUk7QUFDVixVQUFJLEVBQUUsSUFBSTtBQUNWLFVBQUksRUFBRSxJQUFJO0FBQUEsSUFDWjtBQUVBLFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsV0FBTztBQUFBLEVBQ1Q7QUFRTyxXQUFTLE1BQU0sR0FBRztBQUN2QixRQUFJLE1BQU0sSUFBYSxXQUFXLEVBQUU7QUFDcEMsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsV0FBTztBQUFBLEVBQ1Q7QUFTTyxXQUFTLEtBQUssS0FBSyxHQUFHO0FBQzNCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNkLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNkLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNkLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNkLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNkLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNkLFdBQU87QUFBQSxFQUNUO0FBdUJPLFdBQVMsV0FBVyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQ3pHLFFBQUksTUFBTSxJQUFhLFdBQVcsRUFBRTtBQUNwQyxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFdBQU87QUFBQSxFQUNUO0FBd0JPLFdBQVMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDdkcsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixXQUFPO0FBQUEsRUFDVDtBQVFPLFdBQVMsU0FBUyxLQUFLO0FBQzVCLFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsV0FBTztBQUFBLEVBQ1Q7QUFTTyxXQUFTLFVBQVUsS0FBSyxHQUFHO0FBRWhDLFFBQUksUUFBUSxHQUFHO0FBQ2IsVUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUM7QUFDYixVQUFJLE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUM7QUFDYixVQUFJLE1BQU0sRUFBRSxFQUFFO0FBQ2QsVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO0FBQ2IsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixVQUFJLENBQUMsSUFBSSxFQUFFLEVBQUU7QUFDYixVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUk7QUFDVixVQUFJLEVBQUUsSUFBSTtBQUNWLFVBQUksRUFBRSxJQUFJO0FBQUEsSUFDWixPQUFPO0FBQ0wsVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO0FBQ2IsVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxFQUFFO0FBQ2IsVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ2IsVUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ2IsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQUEsSUFDaEI7QUFFQSxXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVMsT0FBTyxLQUFLLEdBQUc7QUFDN0IsUUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQztBQUNiLFFBQUksTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUM7QUFDYixRQUFJLE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFO0FBQ2QsUUFBSSxNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRTtBQUNkLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBRTVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFFNUUsUUFBSSxDQUFDLEtBQUs7QUFDUixhQUFPO0FBQUEsSUFDVDtBQUVBLFVBQU0sSUFBTTtBQUNaLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksQ0FBQyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLFFBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELFFBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELFFBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELFFBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELFFBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELFFBQUksRUFBRSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELFdBQU87QUFBQSxFQUNUO0FBU08sV0FBUyxRQUFRLEtBQUssR0FBRztBQUM5QixRQUFJLE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDO0FBQ2IsUUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQztBQUNiLFFBQUksTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUU7QUFDZCxRQUFJLE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFO0FBQ2QsUUFBSSxDQUFDLElBQUksT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ2xHLFFBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BHLFFBQUksQ0FBQyxJQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNsRyxRQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNwRyxRQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNwRyxRQUFJLENBQUMsSUFBSSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDbEcsUUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDcEcsUUFBSSxDQUFDLElBQUksT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ2xHLFFBQUksQ0FBQyxJQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNsRyxRQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNwRyxRQUFJLEVBQUUsSUFBSSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDbkcsUUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDckcsUUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDckcsUUFBSSxFQUFFLElBQUksT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ25HLFFBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3JHLFFBQUksRUFBRSxJQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNuRyxXQUFPO0FBQUEsRUFDVDtBQVFPLFdBQVMsWUFBWSxHQUFHO0FBQzdCLFFBQUksTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUM7QUFDYixRQUFJLE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDO0FBQ2IsUUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRTtBQUNkLFFBQUksTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUU7QUFDZCxRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixRQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsUUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLFFBQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUU1QixXQUFPLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBLEVBQzNFO0FBVU8sV0FBUyxTQUFTLEtBQUssR0FBRyxHQUFHO0FBQ2xDLFFBQUksTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUM7QUFDYixRQUFJLE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDO0FBQ2IsUUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRTtBQUNkLFFBQUksTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUU7QUFFZCxRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxRQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLO0FBQy9DLFFBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUs7QUFDL0MsUUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxTQUFLLEVBQUUsQ0FBQztBQUNSLFNBQUssRUFBRSxDQUFDO0FBQ1IsU0FBSyxFQUFFLENBQUM7QUFDUixTQUFLLEVBQUUsQ0FBQztBQUNSLFFBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUs7QUFDL0MsUUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxRQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLO0FBQy9DLFFBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUs7QUFDL0MsU0FBSyxFQUFFLENBQUM7QUFDUixTQUFLLEVBQUUsQ0FBQztBQUNSLFNBQUssRUFBRSxFQUFFO0FBQ1QsU0FBSyxFQUFFLEVBQUU7QUFDVCxRQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLO0FBQy9DLFFBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUs7QUFDL0MsUUFBSSxFQUFFLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxRQUFJLEVBQUUsSUFBSSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLO0FBQ2hELFNBQUssRUFBRSxFQUFFO0FBQ1QsU0FBSyxFQUFFLEVBQUU7QUFDVCxTQUFLLEVBQUUsRUFBRTtBQUNULFNBQUssRUFBRSxFQUFFO0FBQ1QsUUFBSSxFQUFFLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxRQUFJLEVBQUUsSUFBSSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLO0FBQ2hELFFBQUksRUFBRSxJQUFJLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUs7QUFDaEQsUUFBSSxFQUFFLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVMsVUFBVSxLQUFLLEdBQUcsR0FBRztBQUNuQyxRQUFJLElBQUksRUFBRSxDQUFDLEdBQ1AsSUFBSSxFQUFFLENBQUMsR0FDUCxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUksS0FBSyxLQUFLLEtBQUs7QUFDbkIsUUFBSSxLQUFLLEtBQUssS0FBSztBQUNuQixRQUFJLEtBQUssS0FBSyxLQUFLO0FBRW5CLFFBQUksTUFBTSxLQUFLO0FBQ2IsVUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFO0FBQy9DLFVBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUMvQyxVQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUU7QUFDaEQsVUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFO0FBQUEsSUFDbEQsT0FBTztBQUNMLFlBQU0sRUFBRSxDQUFDO0FBQ1QsWUFBTSxFQUFFLENBQUM7QUFDVCxZQUFNLEVBQUUsQ0FBQztBQUNULFlBQU0sRUFBRSxDQUFDO0FBQ1QsWUFBTSxFQUFFLENBQUM7QUFDVCxZQUFNLEVBQUUsQ0FBQztBQUNULFlBQU0sRUFBRSxDQUFDO0FBQ1QsWUFBTSxFQUFFLENBQUM7QUFDVCxZQUFNLEVBQUUsQ0FBQztBQUNULFlBQU0sRUFBRSxDQUFDO0FBQ1QsWUFBTSxFQUFFLEVBQUU7QUFDVixZQUFNLEVBQUUsRUFBRTtBQUNWLFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxDQUFDLElBQUk7QUFDVCxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQ1QsVUFBSSxFQUFFLElBQUk7QUFDVixVQUFJLEVBQUUsSUFBSTtBQUNWLFVBQUksRUFBRSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLEVBQUUsRUFBRTtBQUM1QyxVQUFJLEVBQUUsSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxFQUFFLEVBQUU7QUFDNUMsVUFBSSxFQUFFLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksRUFBRSxFQUFFO0FBQzVDLFVBQUksRUFBRSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLEVBQUUsRUFBRTtBQUFBLElBQzlDO0FBRUEsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTLE1BQU0sS0FBSyxHQUFHLEdBQUc7QUFD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QUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ2QsVUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQUEsSUFDaEI7QUFHQSxRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixRQUFJLENBQUMsSUFBSSxNQUFNLElBQUksTUFBTTtBQUN6QixXQUFPO0FBQUEsRUFDVDtBQWFPLFdBQVMsZ0JBQWdCLEtBQUssR0FBRztBQUN0QyxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDYixRQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDYixRQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDYixRQUFJLEVBQUUsSUFBSTtBQUNWLFdBQU87QUFBQSxFQUNUO0FBYU8sV0FBUyxZQUFZLEtBQUssR0FBRztBQUNsQyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFD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LFFBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxPQUFPO0FBQzNCLFFBQUksQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUNyQixRQUFJLENBQUMsS0FBSyxLQUFLLE1BQU07QUFDckIsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsS0FBSyxLQUFLLE1BQU07QUFDckIsUUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLE9BQU87QUFDM0IsUUFBSSxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQ3JCLFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLEtBQUssS0FBSyxNQUFNO0FBQ3JCLFFBQUksQ0FBQyxLQUFLLEtBQUssTUFBTTtBQUNyQixRQUFJLEVBQUUsS0FBSyxLQUFLLEtBQUssT0FBTztBQUM1QixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNiLFFBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNiLFFBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNiLFFBQUksRUFBRSxJQUFJO0FBQ1YsV0FBTztBQUFBLEVBQ1Q7QUFzQk8sV0FBUyxtQ0FBbUMsS0FBS0EsSUFBRyxHQUFHLEdBQUcsR0FBRztBQUVsRSxRQUFJLElBQUlBLEdBQUUsQ0FBQyxHQUNQLElBQUlBLEdBQUUsQ0FBQyxHQUNQLElBQUlBLEdBQUUsQ0FBQyxHQUNQLElBQUlBLEdBQUUsQ0FBQztBQUNYLFFBQUksS0FBSyxJQUFJO0FBQ2IsUUFBSSxLQUFLLElBQUk7QUFDYixRQUFJLEtBQUssSUFBSTtBQUNiLFFBQUksS0FBSyxJQUFJO0FBQ2IsUUFBSSxLQUFLLElBQUk7QUFDYixRQUFJLEtBQUssSUFBSTtBQUNiLFFBQUksS0FBSyxJQUFJO0FBQ2IsUUFBSSxLQUFLLElBQUk7QUFDYixRQUFJLEtBQUssSUFBSTtBQUNiLFFBQUksS0FBSyxJQUFJO0FBQ2IsUUFBSSxLQUFLLElBQUk7QUFDYixRQUFJLEtBQUssSUFBSTtBQUNiLFFBQUksS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLEtBQUssRUFBRSxD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UUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUs7QUFDeEIsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUs7QUFDeEIsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUs7QUFDeEIsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsUUFBSSxFQUFFLElBQUk7QUFDVixRQUFJLEVBQUUsSUFBSTtBQUNWLFFBQUksRUFBRSxJQUFJO0FBQ1YsV0FBTztBQUFBLEVBQ1Q7QUFRTyxXQUFTLElBQUksR0FBRztBQUNyQixXQUFPLFVBQVUsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLEVBQUUsSUFBSSxPQUFPLEVBQUUsRUFBRSxJQUFJLE9BQU8sRUFBRSxFQUFFLElBQUksT0FBTyxFQUFFLEVBQUUsSUFBSSxPQUFPLEVBQUUsRUFBRSxJQUFJLE9BQU8sRUFBRSxFQUFFLElBQUk7QUFBQSxFQUNsUDtBQVFPLFdBQVMsS0FBSyxHQUFHO0FBQ3RCLFdBQU8sS0FBSyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO0FBQUEsRUFDeEg7QUFVTyxXQUFTLElBQUksS0FBSyxHQUFHLEdBQUc7QUFDN0IsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUN0QixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDdEIsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ3RCLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUN0QixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDdEIsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ3RCLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBUyxTQUFTLEtBQUssR0FBRyxHQUFHO0FBQ2xDLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDdEIsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ3RCLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUN0QixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDdEIsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQ3RCLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUN0QixXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVMsZUFBZSxLQUFLLEdBQUcsR0FBRztBQUN4QyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNsQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNsQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNsQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNsQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNsQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSTtBQUNsQixXQUFPO0FBQUEsRUFDVDtBQVdPLFdBQVMscUJBQXFCLEtBQUssR0FBRyxHQUFHRyxRQUFPO0FBQ3JELFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJQTtBQUN2QixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSUE7QUFDdkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUlBO0FBQ3ZCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJQTtBQUN2QixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSUE7QUFDdkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUlBO0FBQ3ZCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJQTtBQUN2QixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSUE7QUFDdkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUlBO0FBQ3ZCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJQTtBQUN2QixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSUE7QUFDMUIsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUlBO0FBQzFCLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJQTtBQUMxQixRQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsSUFBSUE7QUFDMUIsUUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLElBQUlBO0FBQzFCLFFBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxJQUFJQTtBQUMxQixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVMsWUFBWSxHQUFHLEdBQUc7QUFDaEMsV0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUU7QUFBQSxFQUNoUztBQVNPLFdBQVMsT0FBTyxHQUFHLEdBQUc7QUFDM0IsUUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQztBQUNaLFFBQUksS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFO0FBQ2QsUUFBSSxNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRTtBQUNkLFFBQUksS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRTtBQUNkLFFBQUksTUFBTSxFQUFFLEVBQUUsR0FDVixNQUFNLEVBQUUsRUFBRSxHQUNWLE1BQU0sRUFBRSxFQUFFLEdBQ1YsTUFBTSxFQUFFLEVBQUU7QUFDZCxXQUFPLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxNQUFNLEdBQUcsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFB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QyxJQUFJLElBQUksTUFBTTtBQUNuQixRQUFJLENBQUMsSUFBSSxJQUFJLE1BQU07QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTQyxTQUFRLEtBQUssR0FBRyxHQUFHLEtBQUs7QUFDdEMsUUFBSSxJQUFJLENBQUMsR0FDTCxJQUFJLENBQUM7QUFFVCxNQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakIsTUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pCLE1BQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUVqQixNQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDVixNQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHO0FBQ2pELE1BQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLEdBQUc7QUFFakQsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTQyxTQUFRLEtBQUssR0FBRyxHQUFHLEtBQUs7QUFDdEMsUUFBSSxJQUFJLENBQUMsR0FDTCxJQUFJLENBQUM7QUFFVCxNQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakIsTUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pCLE1BQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUVqQixNQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksR0FBRyxJ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QUFDNUMsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUM1QyxXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLFNBQVEsS0FBSyxHQUFHLEtBQUs7QUFDbkMsV0FBTztBQUNQLFFBQUksS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsR0FDakIsS0FBSyxLQUFLLElBQUksR0FBRztBQUNyQixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLFNBQVEsS0FBSyxHQUFHLEtBQUs7QUFDbkMsV0FBTztBQUNQLFFBQUksS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsR0FDakIsS0FBSyxLQUFLLElBQUksR0FBRztBQUNyQixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLFNBQVEsS0FBSyxHQUFHLEtBQUs7QUFDbkMsV0FBTztBQUNQLFFBQUksS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLEtBQUssS0FBSyxJQUFJLEdBQUcsR0FDakIsS0FBSyxLQUFLLElBQUksR0FBRztBQUNyQixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSztBQUN4QixXQUFPO0FBQUEsRUFDVDtBQVdPLFdBQVMsV0FBVyxLQUFLLEdBQUc7QUFDakMsUUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUNQLElBQUksRUFBRSxDQUFDLEdBQ1AsSUFBSSxFQUFFLENBQUM7QUFDWCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLElBQU0sSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztBQUN4RCxXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVMsSUFBSSxLQUFLLEdBQUc7QUFDMUIsUUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUNQLElBQUksRUFBRSxDQUFDLEdBQ1AsSUFBSSxFQUFFLENBQUMsR0FDUCxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUM7QUFDdkMsUUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ25CLFFBQUksSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUk7QUFDdkMsUUFBSSxDQUFDLElBQUksSUFBSTtBQUNiLFFBQUksQ0FBQyxJQUFJLElBQUk7QUFDYixRQUFJLENBQUMsSUFBSSxJQUFJO0FBQ2IsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQztBQUN4QixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVMsR0FBRyxLQUFLLEdBQUc7QUFDekIsUUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUNQLElBQUksRUFBRSxDQUFDLEdBQ1AsSUFBSSxFQUFFLENBQUMsR0FDUCxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUM7QUFDdkMsUUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSTtBQUN2QyxRQUFJLENBQUMsSUFBSSxJQUFJO0FBQ2IsUUFBSSxDQUFDLElBQUksSUFBSTtBQUNiLFFBQUksQ0FBQyxJQUFJLElBQUk7QUFDYixRQUFJLENBQUMsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUM7QUFDckQsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTLElBQUksS0FBSyxHQUFHLEdBQUc7QUFDN0IsT0FBRyxLQUFLLENBQUM7QUFDVCxJQUFBQyxPQUFNLEtBQUssS0FBSyxDQUFDO0FBQ2pCLFFBQUksS0FBSyxHQUFHO0FBQ1osV0FBTztBQUFBLEVBQ1Q7QUFXTyxXQUFTLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRztBQUdsQyxRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQztBQUNaLFFBQUksT0FBTyxPQUFPLE9BQU8sUUFBUTtBQUVqQyxZQUFRLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFFM0MsUUFBSSxRQUFRLEdBQUs7QUFDZixjQUFRLENBQUM7QUFDVCxXQUFLLENBQUM7QUFDTixXQUFLLENBQUM7QUFDTixXQUFLLENBQUM7QUFDTixXQUFLLENBQUM7QUFBQSxJQUNSO0FBR0EsUUFBSSxJQUFNLFFBQWlCLFNBQVM7QUFFbEMsY0FBUSxLQUFLLEtBQUssS0FBSztBQUN2QixjQUFRLEtBQUssSUFBSSxLQUFLO0FBQ3RCLGVBQVMsS0FBSyxLQUFLLElBQU0sS0FBSyxLQUFLLElBQUk7QUFDdkMsZUFBUyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUk7QUFBQSxJQUNqQyxPQUFPO0FBR0wsZUFBUyxJQUFNO0FBQ2YsZUFBUztBQUFBLElBQ1g7QUFHQSxRQUFJLENBQUMsSUFBSSxTQUFTLEtBQUssU0FBUztBQUNoQyxRQUFJLENBQUMsSUFBSSxTQUFTLEtBQUssU0FBUztBQUNoQyxRQUFJLENBQUMsSUFBSSxTQUFTLEtBQUssU0FBUztBQUNoQyxRQUFJLENBQUMsSUFBSSxTQUFTLEtBQUssU0FBUztBQUNoQyxXQUFPO0FBQUEsRUFDVDtBQVFPLFdBQVNDLFFBQU8sS0FBSztBQUcxQixRQUFJLEtBQWMsT0FBTztBQUN6QixRQUFJLEtBQWMsT0FBTztBQUN6QixRQUFJLEtBQWMsT0FBTztBQUN6QixRQUFJLGVBQWUsS0FBSyxLQUFLLElBQUksRUFBRTtBQUNuQyxRQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7QUFDekIsUUFBSSxDQUFDLElBQUksZUFBZSxLQUFLLElBQUksSUFBTSxLQUFLLEtBQUssRUFBRTtBQUNuRCxRQUFJLENBQUMsSUFBSSxlQUFlLEtBQUssSUFBSSxJQUFNLEtBQUssS0FBSyxFQUFFO0FBQ25ELFFBQUksQ0FBQyxJQUFJLFNBQVMsS0FBSyxJQUFJLElBQU0sS0FBSyxLQUFLLEVBQUU7QUFDN0MsUUFBSSxDQUFDLElBQUksU0FBUyxLQUFLLElBQUksSUFBTSxLQUFLLEtBQUssRUFBRTtBQUM3QyxXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVNDLFFBQU8sS0FBSyxHQUFHO0FBQzdCLFFBQUksS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJUCxPQUFNLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDN0MsUUFBSSxTQUFTQSxPQUFNLElBQU1BLE9BQU07QUFFL0IsUUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO0FBQ2YsUUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO0FBQ2YsUUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO0FBQ2YsUUFBSSxDQUFDLElBQUksS0FBSztBQUNkLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBUyxVQUFVLEtBQUssR0FBRztBQUNoQyxRQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2IsUUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDYixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQWFPLFdBQVMsU0FBUyxLQUFLLEdBQUc7QUFHL0IsUUFBSSxTQUFTLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixRQUFJO0FBRUosUUFBSSxTQUFTLEdBQUs7QUFFaEIsY0FBUSxLQUFLLEtBQUssU0FBUyxDQUFHO0FBRTlCLFVBQUksQ0FBQyxJQUFJLE1BQU07QUFDZixjQUFRLE1BQU07QUFFZCxVQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSztBQUN6QixVQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSztBQUN6QixVQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSztBQUFBLElBQzNCLE9BQU87QUFFTCxVQUFJLElBQUk7QUFDUixVQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUFHLFlBQUk7QUFDckIsVUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDO0FBQUcsWUFBSTtBQUM3QixVQUFJLEtBQUssSUFBSSxLQUFLO0FBQ2xCLFVBQUksS0FBSyxJQUFJLEtBQUs7QUFDbEIsY0FBUSxLQUFLLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBRztBQUNsRSxVQUFJLENBQUMsSUFBSSxNQUFNO0FBQ2YsY0FBUSxNQUFNO0FBQ2QsVUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSztBQUN6QyxVQUFJLENBQUMsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLO0FBQ3pDLFVBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUs7QUFBQSxJQUMzQztBQUVBLFdBQU87QUFBQSxFQUNUO0FBWU8sV0FBUyxVQUFVLEtBQUssR0FBRyxHQUFHLEdBQUc7QUFDdEMsUUFBSSxZQUFZLE1BQU0sS0FBSyxLQUFLO0FBQ2hDLFNBQUs7QUFDTCxTQUFLO0FBQ0wsU0FBSztBQUNMLFFBQUksS0FBSyxLQUFLLElBQUksQ0FBQztBQUNuQixRQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDbkIsUUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ25CLFFBQUksS0FBSyxLQUFLLElBQUksQ0FBQztBQUNuQixRQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDbkIsUUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUNsQyxRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDbEMsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQ2xDLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUNsQyxXQUFPO0FBQUEsRUFDVDtBQVFPLFdBQVNRLEtBQUksR0FBRztBQUNyQixXQUFPLFVBQVUsRUFBRSxDQUFDLElBQUksT0FBTyxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxDQUFDLElBQUk7QUFBQSxFQUNwRTtBQVNPLE1BQUlDLFNBQWFBO0FBWWpCLE1BQUlDLGNBQWtCQTtBQVV0QixNQUFJQyxRQUFZQTtBQWFoQixNQUFJQyxPQUFXQTtBQVdmLE1BQUlDLE9BQVdBO0FBTWYsTUFBSUMsT0FBTWI7QUFXVixNQUFJSSxTQUFhQTtBQVVqQixNQUFJTCxPQUFXQTtBQVlmLE1BQUllLFFBQVlBO0FBUWhCLE1BQUlDLFVBQWNBO0FBTWxCLE1BQUlDLE9BQU1EO0FBU1YsTUFBSUUsaUJBQXFCQTtBQU16QixNQUFJQyxVQUFTRDtBQVViLE1BQUlFLGFBQWlCQTtBQVNyQixNQUFJQyxlQUFtQkE7QUFTdkIsTUFBSUMsVUFBY0E7QUFhbEIsTUFBSSxhQUFhLFdBQVk7QUFDbEMsUUFBSSxVQUFlekIsUUFBTztBQUMxQixRQUFJLFlBQWlCYSxZQUFXLEdBQUcsR0FBRyxDQUFDO0FBQ3ZDLFFBQUksWUFBaUJBLFlBQVcsR0FBRyxHQUFHLENBQUM7QUFDdkMsV0FBTyxTQUFVLEtBQUssR0FBRyxHQUFHO0FBQzFCLFVBQUlWLE9BQVcsSUFBSSxHQUFHLENBQUM7QUFFdkIsVUFBSUEsT0FBTSxXQUFXO0FBQ25CLFFBQUssTUFBTSxTQUFTLFdBQVcsQ0FBQztBQUNoQyxZQUFTLElBQUksT0FBTyxJQUFJO0FBQVUsVUFBSyxNQUFNLFNBQVMsV0FBVyxDQUFDO0FBQ2xFLFFBQUssVUFBVSxTQUFTLE9BQU87QUFDL0IscUJBQWEsS0FBSyxTQUFTLEtBQUssRUFBRTtBQUNsQyxlQUFPO0FBQUEsTUFDVCxXQUFXQSxPQUFNLFVBQVU7QUFDekIsWUFBSSxDQUFDLElBQUk7QUFDVCxZQUFJLENBQUMsSUFBSTtBQUNULFlBQUksQ0FBQyxJQUFJO0FBQ1QsWUFBSSxDQUFDLElBQUk7QUFDVCxlQUFPO0FBQUEsTUFDVCxPQUFPO0FBQ0wsUUFBSyxNQUFNLFNBQVMsR0FBRyxDQUFDO0FBQ3hCLFlBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQztBQUNsQixZQUFJLENBQUMsSUFBSSxRQUFRLENBQUM7QUFDbEIsWUFBSSxDQUFDLElBQUksUUFBUSxDQUFDO0FBQ2xCLFlBQUksQ0FBQyxJQUFJLElBQUlBO0FBQ2IsZUFBT29CLFdBQVUsS0FBSyxHQUFHO0FBQUEsTUFDM0I7QUFBQSxJQUNGO0FBQUEsRUFDRixFQUFFO0FBYUssTUFBSSxTQUFTLFdBQVk7QUFDOUIsUUFBSSxRQUFRdkIsUUFBTztBQUNuQixRQUFJLFFBQVFBLFFBQU87QUFDbkIsV0FBTyxTQUFVLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHO0FBQ25DLFlBQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNwQixZQUFNLE9BQU8sR0FBRyxHQUFHLENBQUM7QUFDcEIsWUFBTSxLQUFLLE9BQU8sT0FBTyxJQUFJLEtBQUssSUFBSSxFQUFFO0FBQ3hDLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRixFQUFFO0FBWUssTUFBSSxVQUFVLFdBQVk7QUFDL0IsUUFBSSxPQUFZLE9BQU87QUFDdkIsV0FBTyxTQUFVLEtBQUssTUFBTSxPQUFPLElBQUk7QUFDckMsV0FBSyxDQUFDLElBQUksTUFBTSxDQUFDO0FBQ2pCLFdBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQztBQUNqQixXQUFLLENBQUMsSUFBSSxNQUFNLENBQUM7QUFDakIsV0FBSyxDQUFDLElBQUksR0FBRyxDQUFDO0FBQ2QsV0FBSyxDQUFDLElBQUksR0FBRyxDQUFDO0FBQ2QsV0FBSyxDQUFDLElBQUksR0FBRyxDQUFDO0FBQ2QsV0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDakIsV0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDakIsV0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDakIsYUFBT3VCLFdBQVUsS0FBSyxTQUFTLEtBQUssSUFBSSxDQUFDO0FBQUEsSUFDM0M7QUFBQSxFQUNGLEVBQUU7OztBR3JzQkY7QUFBQTtBQUFBLGVBQUFHO0FBQUEsSUFBQSxhQUFBQztBQUFBLElBQUEsaUJBQUFDO0FBQUEsSUFBQSxZQUFBQztBQUFBLElBQUEsY0FBQUM7QUFBQSxJQUFBLFdBQUFDO0FBQUEsSUFBQSxjQUFBQztBQUFBLElBQUEsbUJBQUFDO0FBQUEsSUFBQTtBQUFBLHdCQUFBQztBQUFBLElBQUEsK0JBQUFDO0FBQUEsSUFBQTtBQUFBLDJCQUFBQztBQUFBLElBQUEsa0JBQUFDO0FBQUEsSUFBQTtBQUFBO0FBQUEsMEJBQUFDO0FBQUEsSUFBQSxnQkFBQUM7QUFBQSxJQUFBLGNBQUFDO0FBQUEsSUFBQSxXQUFBQztBQUFBLElBQUEsY0FBQUM7QUFBQSxJQUFBLFlBQUFDO0FBQUEsSUFBQSxXQUFBQztBQUFBLElBQUEsZ0JBQUFDO0FBQUEsSUFBQSxpQkFBQUM7QUFBQSxJQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUFBQztBQUFBLElBQUEsZUFBQUM7QUFBQSxJQUFBLGVBQUFDO0FBQUEsSUFBQSxhQUFBQztBQUFBLElBQUEsV0FBQUM7QUFBQSxJQUFBO0FBQUE7QUFBQSxrQkFBQUM7QUFBQSxJQUFBLHFCQUFBQztBQUFBLElBQUEsV0FBQUM7QUFBQSxJQUFBLGlCQUFBQztBQUFBO0FBaUJPLFdBQVNDLFVBQVM7QUFDdkIsUUFBSSxLQUFLLElBQWEsV0FBVyxDQUFDO0FBRWxDLFFBQWEsY0FBYyxjQUFjO0FBQ3ZDLFNBQUcsQ0FBQyxJQUFJO0FBQ1IsU0FBRyxDQUFDLElBQUk7QUFDUixTQUFHLENBQUMsSUFBSTtBQUNSLFNBQUcsQ0FBQyxJQUFJO0FBQ1IsU0FBRyxDQUFDLElBQUk7QUFDUixTQUFHLENBQUMsSUFBSTtBQUNSLFNBQUcsQ0FBQyxJQUFJO0FBQUEsSUFDVjtBQUVBLE9BQUcsQ0FBQyxJQUFJO0FBQ1IsV0FBTztBQUFBLEVBQ1Q7QUFTTyxXQUFTQyxPQUFNLEdBQUc7QUFDdkIsUUFBSSxLQUFLLElBQWEsV0FBVyxDQUFDO0FBQ2xDLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLE9BQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLFdBQU87QUFBQSxFQUNUO0FBZ0JPLFdBQVNDLFlBQVcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQ3pELFFBQUksS0FBSyxJQUFhLFdBQVcsQ0FBQztBQUNsQyxPQUFHLENBQUMsSUFBSTtBQUNSLE9BQUcsQ0FBQyxJQUFJO0FBQ1IsT0FBRyxDQUFDLElBQUk7QUFDUixPQUFHLENBQUMsSUFBSTtBQUNSLE9BQUcsQ0FBQyxJQUFJO0FBQ1IsT0FBRyxDQUFDLElBQUk7QUFDUixPQUFHLENBQUMsSUFBSTtBQUNSLE9BQUcsQ0FBQyxJQUFJO0FBQ1IsV0FBTztBQUFBLEVBQ1Q7QUFlTyxXQUFTLDhCQUE4QixJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQ3hFLFFBQUksS0FBSyxJQUFhLFdBQVcsQ0FBQztBQUNsQyxPQUFHLENBQUMsSUFBSTtBQUNSLE9BQUcsQ0FBQyxJQUFJO0FBQ1IsT0FBRyxDQUFDLElBQUk7QUFDUixPQUFHLENBQUMsSUFBSTtBQUNSLFFBQUksS0FBSyxLQUFLLEtBQ1YsS0FBSyxLQUFLLEtBQ1YsS0FBSyxLQUFLO0FBQ2QsT0FBRyxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQ2pDLE9BQUcsQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUNqQyxPQUFHLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDakMsT0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDbEMsV0FBTztBQUFBLEVBQ1Q7QUFXTyxXQUFTQyx5QkFBd0IsS0FBS0MsSUFBRyxHQUFHO0FBQ2pELFFBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxLQUNaLEtBQUssRUFBRSxDQUFDLElBQUksS0FDWixLQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQ1osS0FBS0EsR0FBRSxDQUFDLEdBQ1IsS0FBS0EsR0FBRSxDQUFDLEdBQ1IsS0FBS0EsR0FBRSxDQUFDLEdBQ1IsS0FBS0EsR0FBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDbEMsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQ2xDLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUNsQyxRQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUNuQyxXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLGlCQUFnQixLQUFLLEdBQUc7QUFDdEMsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSTtBQUNULFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsY0FBYSxLQUFLRixJQUFHO0FBQ25DLFFBQUksQ0FBQyxJQUFJQSxHQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSUEsR0FBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUlBLEdBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJQSxHQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBUyxTQUFTLEtBQUssR0FBRztBQUUvQixRQUFJLFFBQWFKLFFBQU87QUFDeEIsSUFBSyxZQUFZLE9BQU8sQ0FBQztBQUN6QixRQUFJLElBQUksSUFBYSxXQUFXLENBQUM7QUFDakMsSUFBSyxlQUFlLEdBQUcsQ0FBQztBQUN4QixJQUFBRyx5QkFBd0IsS0FBSyxPQUFPLENBQUM7QUFDckMsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTSSxNQUFLLEtBQUssR0FBRztBQUMzQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQVFPLFdBQVNDLFVBQVMsS0FBSztBQUM1QixRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFpQk8sV0FBU0MsS0FBSSxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSTtBQUN2RCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFRTyxNQUFJLFVBQWVGO0FBUW5CLFdBQVMsUUFBUSxLQUFLLEdBQUc7QUFDOUIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ1osV0FBTztBQUFBLEVBQ1Q7QUFVTyxNQUFJLFVBQWVBO0FBVW5CLFdBQVMsUUFBUSxLQUFLSCxJQUFHO0FBQzlCLFFBQUksQ0FBQyxJQUFJQSxHQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSUEsR0FBRSxDQUFDO0FBQ1osUUFBSSxDQUFDLElBQUlBLEdBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJQSxHQUFFLENBQUM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQVFPLFdBQVNNLGdCQUFlLEtBQUssR0FBRztBQUNyQyxRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUNULEtBQUssQ0FBQyxFQUFFLENBQUMsR0FDVCxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQ1QsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU07QUFDbkQsUUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNO0FBQ25ELFFBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssTUFBTTtBQUNuRCxXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLFdBQVUsS0FBSyxHQUFHLEdBQUc7QUFDbkMsUUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLElBQUksS0FDYixNQUFNLEVBQUUsQ0FBQyxJQUFJLEtBQ2IsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUNiLE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDO0FBQ2IsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM3QyxRQUFJLENBQUMsSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM3QyxRQUFJLENBQUMsSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM3QyxRQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzlDLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsU0FBUSxLQUFLLEdBQUcsS0FBSztBQUNuQyxRQUFJLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FDVCxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQ1QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUNULEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixNQUFNLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssSUFDekMsTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQ3pDLE1BQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUN6QyxNQUFN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LFFBQUksSUFBSSxLQUFLLElBQUksR0FBRztBQUNwQixRQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSTtBQUN2QixRQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSTtBQUN2QixRQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSTtBQUN2QixRQUFJLEtBQUssS0FBSyxJQUFJLEdBQUc7QUFDckIsUUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxJQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU07QUFDaEQsUUFBSSxDQUFDLElBQUksTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTTtBQUNoRCxRQUFJLENBQUMsSUFBSSxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNO0FBQ2hELFFBQUksQ0FBQyxJQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU07QUFDaEQsUUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQztBQUNaLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDNUMsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUM1QyxRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQzVDLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDNUMsV0FBTztBQUFBLEVBQ1Q7QUFXTyxXQUFTUSxLQUFJLEtBQUssR0FBRyxHQUFHO0FBQzdCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNuQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTQyxVQUFTLEtBQUssR0FBRyxHQUFHO0FBQ2xDLFFBQUksTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUMsR0FDVCxNQUFNLEVBQUUsQ0FBQyxHQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1QsTUFBTSxFQUFFLENBQUM7QUFDYixRQUFJLENBQUMsSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQ25ELFFBQUksQ0FBQyxJQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDbkQsUUFBSSxDQUFDLElBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUNuRCxRQUFJLENBQUMsSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxN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QUNSLEtBQUssRUFBRSxDQUFDO0FBQ1osV0FBTyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFBQSxFQUM1cUI7OztBQ2wwQkE7QUFBQTtBQUFBLGVBQUFDO0FBQUEsSUFBQSxhQUFBQztBQUFBLElBQUEsWUFBQUM7QUFBQSxJQUFBLGFBQUFDO0FBQUEsSUFBQSxZQUFBQztBQUFBLElBQUEsY0FBQUM7QUFBQSxJQUFBLGFBQUFDO0FBQUEsSUFBQSxZQUFBQztBQUFBLElBQUEsZ0JBQUFDO0FBQUEsSUFBQSxXQUFBQztBQUFBLElBQUEsY0FBQUM7QUFBQSxJQUFBLFdBQUFDO0FBQUEsSUFBQSxjQUFBQztBQUFBLElBQUEsbUJBQUFDO0FBQUEsSUFBQSxhQUFBQztBQUFBLElBQUEsZUFBQUM7QUFBQSxJQUFBLGtCQUFBQztBQUFBLElBQUEsZUFBQUM7QUFBQSxJQUFBLFdBQUFDO0FBQUEsSUFBQSxjQUFBQztBQUFBLElBQUEsWUFBQUM7QUFBQSxJQUFBLFdBQUFDO0FBQUEsSUFBQSxXQUFBQztBQUFBLElBQUEsV0FBQUM7QUFBQSxJQUFBLGdCQUFBQztBQUFBLElBQUEsY0FBQUM7QUFBQSxJQUFBLGlCQUFBQztBQUFBLElBQUEsY0FBQUM7QUFBQSxJQUFBLGNBQUFDO0FBQUEsSUFBQSxhQUFBQztBQUFBLElBQUEsYUFBQUM7QUFBQSxJQUFBLG1CQUFBQztBQUFBLElBQUEsV0FBQUM7QUFBQSxJQUFBLGVBQUFDO0FBQUEsSUFBQSxjQUFBQztBQUFBLElBQUEsdUJBQUFDO0FBQUEsSUFBQSxxQkFBQUM7QUFBQSxJQUFBLFdBQUFDO0FBQUEsSUFBQSxXQUFBQztBQUFBLElBQUEsZ0JBQUFDO0FBQUEsSUFBQTtBQUFBO0FBQUEseUJBQUFDO0FBQUEsSUFBQSxxQkFBQUM7QUFBQSxJQUFBLFlBQUFDO0FBQUE7QUFZTyxXQUFTQyxVQUFTO0FBQ3ZCLFFBQUksTUFBTSxJQUFhLFdBQVcsQ0FBQztBQUVuQyxRQUFhLGNBQWMsY0FBYztBQUN2QyxVQUFJLENBQUMsSUFBSTtBQUNULFVBQUksQ0FBQyxJQUFJO0FBQUEsSUFDWDtBQUVBLFdBQU87QUFBQSxFQUNUO0FBUU8sV0FBU0MsT0FBTSxHQUFHO0FBQ3ZCLFFBQUksTUFBTSxJQUFhLFdBQVcsQ0FBQztBQUNuQyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVNDLFlBQVcsR0FBRyxHQUFHO0FBQy9CLFFBQUksTUFBTSxJQUFhLFdBQVcsQ0FBQztBQUNuQyxRQUFJLENBQUMsSUFBSTtBQUNULFFBQUksQ0FBQyxJQUFJO0FBQ1QsV0FBTztBQUFBLEVBQ1Q7QUFTTyxXQUFTQyxNQUFLLEtBQUssR0FBRztBQUMzQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDWixXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLEtBQUksS0FBSyxHQUFHLEdBQUc7QUFDN0IsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsS0FBSSxLQUFLLEdBQUcsR0FBRztBQUM3QixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsVUFBUyxLQUFLLEdBQUcsR0FBRztBQUNsQyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsVUFBUyxLQUFLLEdBQUcsR0FBRztBQUNsQyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsUUFBTyxLQUFLLEdBQUcsR0FBRztBQUNoQyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLFdBQU87QUFBQSxFQUNUO0FBU08sV0FBU0MsTUFBSyxLQUFLLEdBQUc7QUFDM0IsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQztBQUN2QixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVNDLE9BQU0sS0FBSyxHQUFHO0FBQzVCLFFBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFFLENBQUMsQ0FBQztBQUN4QixRQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDeEIsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTQyxLQUFJLEtBQUssR0FBRyxHQUFHO0FBQzdCLFFBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUM1QixRQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDNUIsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTQyxLQUFJLEtBQUssR0FBRyxHQUFHO0FBQzdCLFFBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUM1QixRQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDNUIsV0FBTztBQUFBLEVBQ1Q7QUFTTyxXQUFTQyxPQUFNLEtBQUssR0FBRztBQUM1QixRQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDeEIsUUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBU0MsT0FBTSxLQUFLLEdBQUcsR0FBRztBQUMvQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSTtBQUNoQixXQUFPO0FBQUEsRUFDVDtBQVdPLFdBQVNDLGFBQVksS0FBSyxHQUFHLEdBQUdELFFBQU87QUFDNUMsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUlBO0FBQ3ZCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJQTtBQUN2QixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVNFLFVBQVMsR0FBRyxHQUFHO0FBQzdCLFFBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FDZCxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNsQixXQUFPLEtBQUssTUFBTSxHQUFHLENBQUM7QUFBQSxFQUN4QjtBQVNPLFdBQVNDLGlCQUFnQixHQUFHLEdBQUc7QUFDcEMsUUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUNkLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2xCLFdBQU8sSUFBSSxJQUFJLElBQUk7QUFBQSxFQUNyQjtBQVFPLFdBQVNDLFFBQU8sR0FBRztBQUN4QixRQUFJLElBQUksRUFBRSxDQUFDLEdBQ1AsSUFBSSxFQUFFLENBQUM7QUFDWCxXQUFPLEtBQUssTUFBTSxHQUFHLENBQUM7QUFBQSxFQUN4QjtBQVFPLFdBQVNDLGVBQWMsR0FBRztBQUMvQixRQUFJLElBQUksRUFBRSxDQUFDLEdBQ1AsSUFBSSxFQUFFLENBQUM7QUFDWCxXQUFPLElBQUksSUFBSSxJQUFJO0FBQUEsRUFDckI7QUFTTyxXQUFTQyxRQUFPLEtBQUssR0FBRztBQUM3QixRQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2IsV0FBTztBQUFBLEVBQ1Q7QUFTTyxXQUFTQyxTQUFRLEtBQUssR0FBRztBQUM5QixRQUFJLENBQUMsSUFBSSxJQUFNLEVBQUUsQ0FBQztBQUNsQixRQUFJLENBQUMsSUFBSSxJQUFNLEVBQUUsQ0FBQztBQUNsQixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVNDLFdBQVUsS0FBSyxHQUFHO0FBQ2hDLFFBQUksSUFBSSxFQUFFLENBQUMsR0FDUCxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUlDLE9BQU0sSUFBSSxJQUFJLElBQUk7QUFFdEIsUUFBSUEsT0FBTSxHQUFHO0FBRVgsTUFBQUEsT0FBTSxJQUFJLEtBQUssS0FBS0EsSUFBRztBQUFBLElBQ3pCO0FBRUEsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUlBO0FBQ2hCLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJQTtBQUNoQixXQUFPO0FBQUEsRUFDVDtBQVNPLFdBQVNDLEtBQUksR0FBRyxHQUFHO0FBQ3hCLFdBQU8sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQUEsRUFDakM7QUFXTyxXQUFTQyxPQUFNLEtBQUssR0FBRyxHQUFHO0FBQy9CLFFBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEMsUUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUk7QUFDbEIsUUFBSSxDQUFDLElBQUk7QUFDVCxXQUFPO0FBQUEsRUFDVDtBQVdPLFdBQVNDLE1BQUssS0FBSyxHQUFHLEdBQUcsR0FBRztBQUNqQyxRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUM7QUFDWixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLElBQUk7QUFDMUIsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUUsQ0FBQyxJQUFJO0FBQzFCLFdBQU87QUFBQSxFQUNUO0FBU08sV0FBU0MsUUFBTyxLQUFLYixRQUFPO0FBQ2pDLElBQUFBLFNBQVFBLFVBQVM7QUFDakIsUUFBSSxJQUFhLE9BQU8sSUFBSSxJQUFNLEtBQUs7QUFDdkMsUUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSUE7QUFDdkIsUUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSUE7QUFDdkIsV0FBTztBQUFBLEVBQ1Q7QUFVTyxXQUFTLGNBQWMsS0FBSyxHQUFHLEdBQUc7QUFDdkMsUUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUNQLElBQUksRUFBRSxDQUFDO0FBQ1gsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSTtBQUMzQixRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJO0FBQzNCLFdBQU87QUFBQSxFQUNUO0FBVU8sV0FBUyxlQUFlLEtBQUssR0FBRyxHQUFHO0FBQ3hDLFFBQUksSUFBSSxFQUFFLENBQUMsR0FDUCxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7QUFDbEMsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNsQyxXQUFPO0FBQUEsRUFDVDtBQVdPLFdBQVNjLGVBQWMsS0FBSyxHQUFHLEdBQUc7QUFDdkMsUUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUNQLElBQUksRUFBRSxDQUFDO0FBQ1gsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNsQyxRQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ2xDLFdBQU87QUFBQSxFQUNUO0FBWU8sV0FBU0MsZUFBYyxLQUFLLEdBQUcsR0FBRztBQUN2QyxRQUFJLElBQUksRUFBRSxDQUFDO0FBQ1gsUUFBSSxJQUFJLEVBQUUsQ0FBQztBQUNYLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUU7QUFDbkMsUUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQUUsRUFBRTtBQUNuQyxXQUFPO0FBQUEsRUFDVDtBQVVPLFdBQVNDLFFBQU8sS0FBSyxHQUFHLEdBQUcsS0FBSztBQUVyQyxRQUFJLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQ2YsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsR0FDZixPQUFPLEtBQUssSUFBSSxHQUFHLEdBQ25CLE9BQU8sS0FBSyxJQUFJLEdBQUc7QUFFdkIsUUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUM7QUFDcEMsUUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUM7QUFDcEMsV0FBTztBQUFBLEVBQ1Q7QUFRTyxXQUFTQyxPQUFNLEdBQUcsR0FBRztBQUMxQixRQUFJLEtBQUssRUFBRSxDQUFDLEdBQ1IsS0FBSyxFQUFFLENBQUMsR0FDUixLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDLEdBRVosTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxFQUFFLEdBRWhFLFNBQVMsUUFBUSxLQUFLLEtBQUssS0FBSyxNQUFNO0FBRXRDLFdBQU8sS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLElBQUksUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQUEsRUFDcEQ7QUFRTyxXQUFTQyxNQUFLLEtBQUs7QUFDeEIsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUNULFdBQU87QUFBQSxFQUNUO0FBUU8sV0FBU0MsS0FBSSxHQUFHO0FBQ3JCLFdBQU8sVUFBVSxFQUFFLENBQUMsSUFBSSxPQUFPLEVBQUUsQ0FBQyxJQUFJO0FBQUEsRUFDeEM7QUFTTyxXQUFTQyxhQUFZLEdBQUcsR0FBRztBQUNoQyxXQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUFBLEVBQ3RDO0FBU08sV0FBU0MsUUFBTyxHQUFHLEdBQUc7QUFDM0IsUUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDO0FBQ1osUUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUNSLEtBQUssRUFBRSxDQUFDO0FBQ1osV0FBTyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFBQSxFQUM5SztBQU1PLE1BQUlaLE9BQU1MO0FBTVYsTUFBSWtCLE9BQU05QjtBQU1WLE1BQUkrQixPQUFNOUI7QUFNVixNQUFJK0IsT0FBTTlCO0FBTVYsTUFBSStCLFFBQU92QjtBQU1YLE1BQUl3QixXQUFVdkI7QUFNZCxNQUFJd0IsVUFBU3RCO0FBY2IsTUFBSXVCLFdBQVUsV0FBWTtBQUMvQixRQUFJLE1BQU0xQyxRQUFPO0FBQ2pCLFdBQU8sU0FBVSxHQUFHLFFBQVEyQyxTQUFRLE9BQU8sSUFBSSxLQUFLO0FBQ2xELFVBQUksR0FBR0M7QUFFUCxVQUFJLENBQUMsUUFBUTtBQUNYLGlCQUFTO0FBQUEsTUFDWDtBQUVBLFVBQUksQ0FBQ0QsU0FBUTtBQUNYLFFBQUFBLFVBQVM7QUFBQSxNQUNYO0FBRUEsVUFBSSxPQUFPO0FBQ1QsUUFBQUMsS0FBSSxLQUFLLElBQUksUUFBUSxTQUFTRCxTQUFRLEVBQUUsTUFBTTtBQUFBLE1BQ2hELE9BQU87QUFDTCxRQUFBQyxLQUFJLEVBQUU7QUFBQSxNQUNSO0FBRUEsV0FBSyxJQUFJRCxTQUFRLElBQUlDLElBQUcsS0FBSyxRQUFRO0FBQ25DLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNaLFlBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0FBQ2hCLFdBQUcsS0FBSyxLQUFLLEdBQUc7QUFDaEIsVUFBRSxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ1osVUFBRSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7QUFBQSxNQUNsQjtBQUVBLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRixFQUFFOzs7QUMvbUJGLE1BQUlDLGNBQTBDLFNBQVUsWUFBWSxRQUFRLEtBQUssTUFBTTtBQUNuRixRQUFJLElBQUksVUFBVSxRQUFRLElBQUksSUFBSSxJQUFJLFNBQVMsU0FBUyxPQUFPLE9BQU8sT0FBTyx5QkFBeUIsUUFBUSxHQUFHLElBQUksTUFBTTtBQUMzSCxRQUFJLE9BQU8sWUFBWSxZQUFZLE9BQU8sUUFBUSxhQUFhO0FBQVksVUFBSSxRQUFRLFNBQVMsWUFBWSxRQUFRLEtBQUssSUFBSTtBQUFBO0FBQ3hILGVBQVMsSUFBSSxXQUFXLFNBQVMsR0FBRyxLQUFLLEdBQUc7QUFBSyxZQUFJLElBQUksV0FBVyxDQUFDO0FBQUcsZUFBSyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsR0FBRyxNQUFNO0FBQ2hKLFdBQU8sSUFBSSxLQUFLLEtBQUssT0FBTyxlQUFlLFFBQVEsS0FBSyxDQUFDLEdBQUc7QUFBQSxFQUNoRTtBQUlPLE1BQU0sYUFBTixjQUF5QixVQUFVO0FBQUEsSUFFdEM7QUFBQSxJQUNBO0FBQUEsSUFDQSxRQUFRO0FBQUEsSUFDUixVQUFVO0FBQUEsSUFDVixRQUFRO0FBQ0osV0FBSyxRQUFRLEtBQUssT0FBTyxhQUFhLGNBQWM7QUFDcEQsV0FBSyxVQUFVO0FBQUEsSUFDbkI7QUFBQSxJQUNBLE9BQU8sSUFBSTtBQUNQLFVBQUksQ0FBQyxLQUFLLFNBQ04sQ0FBQyxLQUFLLE1BQU0saUJBQ1osQ0FBQyxLQUFLLE1BQU0sY0FBYyxXQUMxQixDQUFDLEtBQUssTUFBTSxjQUFjLFFBQVEsTUFBTTtBQUN4QztBQUFBLE1BQ0o7QUFDQSxZQUFNLGNBQWMsS0FBSyxNQUFNLGNBQWMsUUFBUSxLQUFLLENBQUM7QUFDM0QsVUFBSSxjQUFjLFFBQVEsY0FBYyxLQUFLO0FBQ3pDLGFBQUssVUFBVTtBQUNmO0FBQUEsTUFDSjtBQUNBLFVBQUksS0FBSyxJQUFJLFdBQVcsSUFBSSxLQUFLO0FBQzdCO0FBQUEsTUFDSjtBQUNBLFVBQUksY0FBYyxhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDekMsV0FBSyxPQUFPLGlCQUFpQixXQUFXO0FBQ3hDLFVBQUksY0FBYyxRQUFRLENBQUMsS0FBSyxTQUFTO0FBQ3JDLGFBQUssT0FBTyx3QkFBd0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssT0FBTztBQUMzRCxhQUFLLFVBQVU7QUFBQSxNQUNuQjtBQUNBLFVBQUksY0FBYyxPQUFPLENBQUMsS0FBSyxTQUFTO0FBQ3BDLGFBQUssT0FBTyx3QkFBd0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxPQUFPO0FBQzVELGFBQUssVUFBVTtBQUFBLE1BQ25CO0FBQ0EsVUFBSSxpQkFBaUIsYUFBSyxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQzVDLFdBQUssT0FBTyxpQkFBaUIsY0FBYztBQUMzQyxVQUFJLFNBQVMsYUFBSyxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQ3BDLG1CQUFLLElBQUksUUFBUSxhQUFhLGNBQWM7QUFDNUMsV0FBSyxPQUFPLGVBQWUsTUFBTTtBQUFBLElBQ3JDO0FBQUEsRUFDSjtBQXhDSSxnQkFEUyxZQUNGLFlBQVc7QUF5Q3RCLEVBQUFBLFlBQVc7QUFBQSxJQUNQLFNBQVMsT0FBTztBQUFBLEVBQ3BCLEdBQUcsV0FBVyxXQUFXLFVBQVUsTUFBTTtBQUN6QyxFQUFBQSxZQUFXO0FBQUEsSUFDUCxTQUFTLElBQUksRUFBRTtBQUFBLEVBQ25CLEdBQUcsV0FBVyxXQUFXLFdBQVcsTUFBTTs7O0FDeEQxQyxNQUFJQyxjQUEwQyxTQUFVLFlBQVksUUFBUSxLQUFLLE1BQU07QUFDbkYsUUFBSSxJQUFJLFVBQVUsUUFBUSxJQUFJLElBQUksSUFBSSxTQUFTLFNBQVMsT0FBTyxPQUFPLE9BQU8seUJBQXlCLFFBQVEsR0FBRyxJQUFJLE1BQU07QUFDM0gsUUFBSSxPQUFPLFlBQVksWUFBWSxPQUFPLFFBQVEsYUFBYTtBQUFZLFVBQUksUUFBUSxTQUFTLFlBQVksUUFBUSxLQUFLLElBQUk7QUFBQTtBQUN4SCxlQUFTLElBQUksV0FBVyxTQUFTLEdBQUcsS0FBSyxHQUFHO0FBQUssWUFBSSxJQUFJLFdBQVcsQ0FBQztBQUFHLGVBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLEdBQUcsTUFBTTtBQUNoSixXQUFPLElBQUksS0FBSyxLQUFLLE9BQU8sZUFBZSxRQUFRLEtBQUssQ0FBQyxHQUFHO0FBQUEsRUFDaEU7QUFMQTtBQVNPLE1BQU0sZ0JBQU4sY0FBNEIsVUFBVTtBQUFBLElBQXRDO0FBQUE7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFPO0FBQ1AsbUNBQVE7QUFJUjtBQUFBO0FBQUE7QUFBQSxtQ0FBVyxDQUFDO0FBSVo7QUFBQTtBQUFBO0FBQUEsc0NBQWMsQ0FBQztBQUNmLGtDQUFVLENBQUM7QUFDWCxxQ0FBYSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUE7QUFBQSxJQUNyQixRQUFRO0FBQ0oseUJBQUssVUFBVyxLQUFLLE9BQU8sTUFBTSxXQUFXLEtBQUssY0FBYyxNQUFNLEtBQUssWUFBWTtBQUN2RixlQUFTLElBQUksR0FBRyxJQUFJLEtBQUssY0FBYyxFQUFFLEdBQUc7QUFDeEMsMkJBQUssYUFBWSxLQUFLLENBQUMsS0FBSyxPQUFPLElBQUksSUFBSSxPQUFNLENBQUMsS0FBSyxPQUFPLElBQUksS0FBSSxLQUFLLE9BQU8sSUFBSSxJQUFJLEtBQUksQ0FBQztBQUMvRixZQUFJLE1BQU0sbUJBQUssVUFBUyxDQUFDO0FBQ3pCLFlBQUksT0FBTyxhQUFhLEtBQUssTUFBTSxTQUFTO0FBQzVDLFlBQUksT0FBTyxJQUFJLGFBQWEsYUFBYTtBQUN6QyxhQUFLLE9BQU8sS0FBSztBQUNqQixhQUFLLFdBQVcsS0FBSztBQUVyQixZQUFJLFdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBQUEsTUFDNUI7QUFFQSxlQUFTLElBQUksR0FBRyxJQUFJLEtBQUssY0FBYyxFQUFFLEdBQUc7QUFDeEMsYUFBSyxNQUFNO0FBQUEsTUFDZjtBQUFBLElBQ0o7QUFBQSxJQUNBLE9BQU8sSUFBSTtBQUVQLFVBQUksU0FBUyxhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDcEMsVUFBSUMsWUFBVyxhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDdEMsZUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLElBQUksS0FBSyxPQUFPLG1CQUFLLFVBQVMsTUFBTSxHQUFHLEVBQUUsR0FBRztBQU1qRSxzQkFBTSxlQUFlLFFBQVEsbUJBQUssVUFBUyxDQUFDLEVBQUUsa0JBQWtCLENBQUM7QUFFakUsY0FBTSxNQUFNLG1CQUFLLGFBQVksQ0FBQztBQUU5QixZQUFLLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQU07QUFDNUIsaUJBQU8sQ0FBQyxLQUFLO0FBQUEsaUJBQ1AsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksTUFBTztBQUNsQyxpQkFBTyxDQUFDLEtBQUs7QUFDakIsWUFBSyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFNO0FBQzVCLGlCQUFPLENBQUMsS0FBSztBQUFBLGlCQUNQLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLE1BQU87QUFDbEMsaUJBQU8sQ0FBQyxLQUFLO0FBQ2pCLFlBQUssT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksTUFBTyxHQUFHO0FBRWhDLGlCQUFPLENBQUMsSUFBSTtBQUNaLDZCQUFLLFVBQVMsQ0FBQyxFQUFFLGlCQUFpQixNQUFNO0FBQUEsUUFDNUM7QUFBQSxNQUNKO0FBQ0EsZUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLElBQUksS0FBSyxPQUFPLG1CQUFLLFVBQVMsTUFBTSxHQUFHLEVBQUUsR0FBRztBQUVqRSxxQkFBSyxNQUFNQSxXQUFVLG1CQUFLLGFBQVksQ0FBQyxHQUFHLEVBQUU7QUFDNUMsMkJBQUssVUFBUyxDQUFDLEVBQUUsZUFBZUEsU0FBUTtBQUFBLE1BQzVDO0FBQUEsSUFDSjtBQUFBO0FBQUEsSUFFQSxRQUFRO0FBQ0osVUFBSSxRQUFRLEtBQUssUUFBUSxLQUFLO0FBQzlCLFVBQUksTUFBTSxtQkFBSyxVQUFTLEtBQUs7QUFDN0IsVUFBSSxlQUFlO0FBQ25CLFVBQUksV0FBVyxDQUFDLEtBQUssZUFBZSxLQUFLLGVBQWUsS0FBSyxhQUFhLENBQUM7QUFFM0UsVUFBSSxhQUFhLGFBQWEsRUFBRSxTQUFTO0FBQ3pDLFVBQUksZUFBZSxDQUFFLEtBQUssT0FBTyxJQUFJLEtBQUssT0FBUyxLQUFLLE9BQU8sR0FBSyxLQUFLLE9BQU8sSUFBSSxHQUFLLEtBQUssT0FBTyxJQUFJLEtBQUssT0FBUyxLQUFLLE9BQU8sQ0FBRSxDQUFDO0FBQ3RJLFdBQUssU0FBUztBQUFBLElBQ2xCO0FBQUEsRUFDSjtBQXJFSTtBQUlBO0FBQ0E7QUFDQTtBQW5CQSxnQkFEUyxlQUNGLFlBQVc7QUFtRnRCLEVBQUFELFlBQVc7QUFBQSxJQUNQLFNBQVMsS0FBSztBQUFBLEVBQ2xCLEdBQUcsY0FBYyxXQUFXLFFBQVEsTUFBTTtBQUMxQyxFQUFBQSxZQUFXO0FBQUEsSUFDUCxTQUFTLFNBQVM7QUFBQSxFQUN0QixHQUFHLGNBQWMsV0FBVyxZQUFZLE1BQU07QUFDOUMsRUFBQUEsWUFBVztBQUFBLElBQ1AsU0FBUyxNQUFNLEdBQUc7QUFBQSxFQUN0QixHQUFHLGNBQWMsV0FBVyxTQUFTLE1BQU07QUFDM0MsRUFBQUEsWUFBVztBQUFBLElBQ1AsU0FBUyxJQUFJLElBQUk7QUFBQSxFQUNyQixHQUFHLGNBQWMsV0FBVyxnQkFBZ0IsTUFBTTtBQUNsRCxFQUFBQSxZQUFXO0FBQUEsSUFDUCxTQUFTLE1BQU0sRUFBRTtBQUFBLEVBQ3JCLEdBQUcsY0FBYyxXQUFXLGdCQUFnQixNQUFNO0FBQ2xELEVBQUFBLFlBQVc7QUFBQSxJQUNQLFNBQVMsTUFBTSxJQUFJO0FBQUEsRUFDdkIsR0FBRyxjQUFjLFdBQVcsaUJBQWlCLE1BQU07QUFDbkQsRUFBQUEsWUFBVztBQUFBLElBQ1AsU0FBUyxJQUFJLEVBQUU7QUFBQSxFQUNuQixHQUFHLGNBQWMsV0FBVyxRQUFRLE1BQU07OztBQ2pIMUMsTUFBSUUsY0FBMEMsU0FBVSxZQUFZLFFBQVEsS0FBSyxNQUFNO0FBQ25GLFFBQUksSUFBSSxVQUFVLFFBQVEsSUFBSSxJQUFJLElBQUksU0FBUyxTQUFTLE9BQU8sT0FBTyxPQUFPLHlCQUF5QixRQUFRLEdBQUcsSUFBSSxNQUFNO0FBQzNILFFBQUksT0FBTyxZQUFZLFlBQVksT0FBTyxRQUFRLGFBQWE7QUFBWSxVQUFJLFFBQVEsU0FBUyxZQUFZLFFBQVEsS0FBSyxJQUFJO0FBQUE7QUFDeEgsZUFBUyxJQUFJLFdBQVcsU0FBUyxHQUFHLEtBQUssR0FBRztBQUFLLFlBQUksSUFBSSxXQUFXLENBQUM7QUFBRyxlQUFLLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRSxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxHQUFHLE1BQU07QUFDaEosV0FBTyxJQUFJLEtBQUssS0FBSyxPQUFPLGVBQWUsUUFBUSxLQUFLLENBQUMsR0FBRztBQUFBLEVBQ2hFO0FBR08sTUFBTSxPQUFOLGNBQW1CLFVBQVU7QUFBQSxJQUVoQztBQUFBO0FBQUE7QUFBQTtBQUFBLElBSUEsT0FBTyxLQUFLO0FBQ1IsWUFBTSxPQUFPLEtBQUssS0FBSyxNQUFNLE1BQU07QUFDbkMsYUFBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsR0FBRztBQUFBLElBQzlCO0FBQUEsRUFDSjtBQVRJLGdCQURTLE1BQ0YsWUFBVztBQVV0QixFQUFBQSxZQUFXO0FBQUEsSUFDUCxTQUFTLE9BQU87QUFBQSxFQUNwQixHQUFHLEtBQUssV0FBVyxRQUFRLE1BQU07OztBQ2pCakMsTUFBTSxPQUFPO0FBQ04sTUFBTSxNQUFOLE1BQVU7QUFBQSxJQUNiLFFBQVE7QUFBQSxJQUNSLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLEtBQUs7QUFBQSxJQUNMLFVBQVU7QUFBRSxhQUFPLEtBQUs7QUFBQSxJQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUsvQixRQUFRLE1BQU07QUFDVixhQUFRLE9BQU8sSUFBSSxJQUFJLE9BQU87QUFDOUIsV0FBSyxRQUFRO0FBQ2IsV0FBSyxPQUFPLFNBQVMsS0FBSztBQUMxQixhQUFRLE9BQU8sUUFBUSxNQUFPO0FBQzlCLFdBQUssTUFBTSxPQUFPO0FBQ2xCLGFBQVEsT0FBTyxRQUFRLE1BQU87QUFDOUIsV0FBSyxNQUFNLE9BQU87QUFDbEIsV0FBSyxLQUFLO0FBQ1YsYUFBTztBQUFBLElBQ1g7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlBLGFBQWE7QUFDVCxVQUFJLElBQUksVUFBVSxLQUFLLE1BQU0sS0FBSyxLQUFLO0FBQ3ZDLFdBQUssTUFBTSxLQUFLO0FBQ2hCLFdBQUssTUFBTSxLQUFLO0FBQ2hCLFdBQUssS0FBSyxJQUFJO0FBQ2QsV0FBSyxNQUFNLElBQUksS0FBSztBQUNwQixhQUFPLEtBQUs7QUFBQSxJQUNoQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BLGNBQWMsWUFBWSxZQUFZO0FBQ2xDLFVBQUlDLE9BQU0sS0FBSyxJQUFJLFlBQVksVUFBVTtBQUN6QyxVQUFJQyxPQUFNLEtBQUssSUFBSSxZQUFZLFVBQVU7QUFDekMsYUFBTyxLQUFLLE1BQU0sS0FBSyxXQUFXLEtBQUtELE9BQU1DLE9BQU0sRUFBRSxJQUFJQTtBQUFBLElBQzdEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTUEsVUFBVSxPQUFPLEdBQUcsU0FBUyxHQUFHO0FBQzVCLFVBQUksR0FBRyxHQUFHO0FBQ1YsU0FBRztBQUNDLFlBQUksSUFBSSxLQUFLLFdBQVcsSUFBSTtBQUM1QixZQUFJLElBQUksS0FBSyxXQUFXLElBQUk7QUFDNUIsWUFBSSxJQUFJLElBQUksSUFBSTtBQUFBLE1BQ3BCLFNBQVMsSUFBSSxLQUFLLEtBQUs7QUFDdkIsVUFBSSxRQUFRLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzlDLGFBQU8sT0FBTyxRQUFRO0FBQUEsSUFDMUI7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlBLGdCQUFnQjtBQUNaLGFBQU8sSUFBSSxLQUFLLE1BQU0sS0FBSyxXQUFXLElBQUksR0FBRztBQUFBLElBQ2pEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLFFBQVEsT0FBTztBQUNYLFVBQUksQ0FBQyxNQUFNLFFBQVE7QUFDZixlQUFPO0FBQUEsTUFDWDtBQUNBLGFBQU8sTUFBTSxLQUFLLE1BQU0sS0FBSyxXQUFXLElBQUksTUFBTSxNQUFNLENBQUM7QUFBQSxJQUM3RDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQSxRQUFRLE9BQU87QUFDWCxVQUFJLFNBQVMsQ0FBQztBQUNkLFVBQUlDLFNBQVEsTUFBTSxNQUFNO0FBQ3hCLGFBQU9BLE9BQU0sUUFBUTtBQUNqQixZQUFJLFFBQVFBLE9BQU0sUUFBUSxLQUFLLFFBQVFBLE1BQUssQ0FBQztBQUM3QyxlQUFPLEtBQUtBLE9BQU0sT0FBTyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFBQSxNQUN6QztBQUNBLGFBQU87QUFBQSxJQUNYO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLGlCQUFpQixNQUFNO0FBQ25CLFVBQUksUUFBUTtBQUNaLGVBQVNDLE9BQU0sTUFBTTtBQUNqQixpQkFBUyxLQUFLQSxHQUFFO0FBQUEsTUFDcEI7QUFDQSxVQUFJQyxVQUFTLEtBQUssV0FBVyxJQUFJO0FBQ2pDLFVBQUksSUFBSSxPQUFPO0FBQ2YsV0FBSyxNQUFNLE1BQU07QUFDYixnQkFBUSxLQUFLLEVBQUU7QUFDZixZQUFJQSxVQUFTLE1BQU07QUFDZixpQkFBTztBQUFBLFFBQ1g7QUFBQSxNQUNKO0FBR0EsYUFBTztBQUFBLElBQ1g7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsV0FBVztBQUFFLGFBQU8sQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEVBQUU7QUFBQSxJQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFJN0QsU0FBUyxPQUFPO0FBQ1osV0FBSyxNQUFNLE1BQU0sQ0FBQztBQUNsQixXQUFLLE1BQU0sTUFBTSxDQUFDO0FBQ2xCLFdBQUssTUFBTSxNQUFNLENBQUM7QUFDbEIsV0FBSyxLQUFLLE1BQU0sQ0FBQztBQUNqQixhQUFPO0FBQUEsSUFDWDtBQUFBO0FBQUE7QUFBQTtBQUFBLElBSUEsUUFBUTtBQUNKLFVBQUlGLFNBQVEsSUFBSSxJQUFJO0FBQ3BCLGFBQU9BLE9BQU0sU0FBUyxLQUFLLFNBQVMsQ0FBQztBQUFBLElBQ3pDO0FBQUEsRUFDSjtBQUNPLE1BQU0sTUFBTSxJQUFJLElBQUksRUFBRSxRQUFRLEtBQUssSUFBSSxDQUFDOzs7QUN4SXhDLE1BQU0sY0FBTixNQUFrQjtBQUFBLElBQ3JCO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVNBLFlBQVksUUFBUSxNQUFNLFdBQVcsUUFBUSxZQUFZO0FBQ3JELFdBQUssU0FBUztBQUNkLFdBQUssT0FBTztBQUNaLGNBQVEsSUFBSSxtQkFBbUIsYUFBYSxvQkFBb0I7QUFDaEUsV0FBSyxZQUFZO0FBQ2pCLFdBQUssV0FBVyxLQUFLLE9BQU8sTUFBTSxXQUFXLFdBQVcsUUFBUSxVQUFVO0FBQzFFLFdBQUssUUFBUTtBQUFBLElBQ2pCO0FBQUEsSUFDQSxRQUFRO0FBQ0osV0FBSyxRQUFRO0FBQ2IsV0FBSyxTQUFTLFFBQVEsU0FBTztBQUN6QixZQUFJLGNBQWMsRUFBRSxRQUFRLE9BQUs7QUFDN0IsWUFBRSxTQUFTO0FBQUEsUUFDZixDQUFDO0FBQ0QsWUFBSSxTQUFTO0FBQ2IsWUFBSSxzQkFBc0I7QUFBQSxNQUM5QixDQUFDO0FBQUEsSUFDTDtBQUFBLElBQ0EsVUFBVTtBQUNOLFVBQUksS0FBSyxTQUFTLEtBQUssV0FBVztBQUM5QixnQkFBUSxLQUFLLFNBQVMsS0FBSyx1QkFBdUI7QUFDbEQ7QUFBQSxNQUNKO0FBQ0EsVUFBSSxNQUFNLEtBQUssU0FBUyxLQUFLLEtBQUs7QUFDbEMsV0FBSztBQUNMLGFBQU87QUFBQSxJQUNYO0FBQUEsRUFDSjs7O0FDakNPLFdBQVMsWUFBWSxRQUFRLFFBQVEsT0FBTztBQUMvQyxRQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sUUFBUTtBQUMzQixjQUFRLElBQUksOEJBQThCO0FBQzFDO0FBQUEsSUFDSjtBQUlBLFFBQUk7QUFDSixRQUFJLE9BQU87QUFDUCxlQUFTLE1BQU0sUUFBUTtBQUFBLElBQzNCO0FBQ0EsUUFBSSxDQUFDLFFBQVE7QUFDVCxjQUFRLE1BQU0sb0NBQW9DO0FBQ2xELGVBQVMsT0FBTyxNQUFNLFVBQVUsT0FBTyxNQUFNO0FBQUEsSUFDakQ7QUFDQSxRQUFJLGFBQWEsT0FBTyxjQUFjO0FBQ3RDLFVBQU0sT0FBTyxPQUFPLGNBQWM7QUFDbEMsYUFBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUN4QyxVQUFJLFdBQVcsQ0FBQyxFQUFFLFFBQVEsUUFBUTtBQUM5QixjQUFNLElBQUksS0FBSyxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsVUFBVSxFQUFFLFVBQVUsS0FBSztBQUNoRSxjQUFNLFdBQVcsV0FBVyxDQUFDO0FBQzdCLFlBQUksR0FBRztBQUNILFlBQUUsT0FBTyxTQUFTO0FBQ2xCLFlBQUUsV0FBVyxTQUFTO0FBQ3RCLFlBQUUsT0FBTyxTQUFTO0FBQ2xCLFlBQUUsU0FBUztBQUFBLFFBQ2YsT0FDSztBQUNELGlCQUFPLGFBQWEsUUFBUTtBQUFBLFlBQ3hCLE1BQU0sU0FBUztBQUFBLFlBQ2YsVUFBVSxTQUFTO0FBQUEsWUFDbkIsTUFBTSxTQUFTO0FBQUEsVUFDbkIsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKLFdBQ1MsV0FBVyxDQUFDLEVBQUUsUUFBUSxhQUFhO0FBQ3hDLGNBQU0sSUFBSSxLQUFLLEtBQUssQ0FBQ0csT0FBTUEsR0FBRSxRQUFRLGVBQWVBLEdBQUUsVUFBVSxLQUFLO0FBQ3JFLGNBQU0sV0FBVyxXQUFXLENBQUM7QUFDN0IsWUFBSSxHQUFHO0FBQ0gsWUFBRSxXQUFXLFNBQVM7QUFDdEIsWUFBRSxVQUFVLFNBQVM7QUFDckIsWUFBRSxRQUFRLFNBQVM7QUFDbkIsWUFBRSxTQUFTO0FBQUEsUUFDZixPQUNLO0FBQ0QsaUJBQU8sYUFBYSxhQUFhO0FBQUEsWUFDN0IsVUFBVSxTQUFTO0FBQUEsWUFDbkIsU0FBUyxTQUFTO0FBQUEsWUFDbEIsT0FBTyxTQUFTO0FBQUEsVUFDcEIsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKLFdBQ1MsV0FBVyxDQUFDLEVBQUUsUUFBUSxhQUFhO0FBQ3hDLGNBQU0sSUFBSSxLQUFLLEtBQUssQ0FBQ0EsT0FBTUEsR0FBRSxRQUFRLGVBQWVBLEdBQUUsVUFBVSxLQUFLO0FBQ3JFLGNBQU0sV0FBVyxXQUFXLENBQUM7QUFDN0IsWUFBSSxHQUFHO0FBQ0gsWUFBRSxZQUFZLFNBQVM7QUFDdkIsWUFBRSxZQUFZLFNBQVM7QUFDdkIsWUFBRSxTQUFTO0FBQUEsUUFDZjtBQUVJLGlCQUFPLGFBQWEsYUFBYTtBQUFBLFlBQzdCLFdBQVcsU0FBUztBQUFBLFlBQ3BCLFdBQVcsU0FBUztBQUFBLFVBQ3hCLENBQUM7QUFBQSxNQUNULFdBQ1MsV0FBVyxDQUFDLEVBQUUsUUFBUSxRQUFRO0FBQ25DLGNBQU0sSUFBSSxLQUFLLEtBQUssQ0FBQ0EsT0FBTUEsR0FBRSxRQUFRLFVBQVVBLEdBQUUsVUFBVSxLQUFLO0FBQ2hFLGNBQU0sV0FBVyxXQUFXLENBQUM7QUFDN0IsWUFBSSxHQUFHO0FBQ0gsWUFBRSxPQUFPLFNBQVM7QUFDbEIsWUFBRSxTQUFTO0FBQUEsUUFDZjtBQUVJLGlCQUFPLGFBQWEsTUFBTTtBQUFBLFlBQ3RCLE1BQU0sU0FBUztBQUFBLFVBQ25CLENBQUM7QUFBQSxNQUNULFdBQ1MsV0FBVyxDQUFDLEVBQUUsUUFBUSxZQUFZO0FBQ3ZDLGNBQU0sSUFBSSxLQUFLLEtBQUssQ0FBQ0EsT0FBTUEsR0FBRSxRQUFRLGNBQWNBLEdBQUUsVUFBVSxLQUFLO0FBQ3BFLGNBQU0sV0FBVyxXQUFXLENBQUM7QUFDN0IsWUFBSSxHQUFHO0FBQ0gsWUFBRSxPQUFPLFNBQVM7QUFDbEIsWUFBRSxNQUFNLFNBQVM7QUFDakIsWUFBRSxjQUFjLFNBQVM7QUFDekIsWUFBRSxVQUFVLFNBQVM7QUFDckIsWUFBRSxPQUFPLFNBQVM7QUFDbEIsWUFBRSxRQUFRLFNBQVM7QUFDbkIsWUFBRSxTQUFTO0FBQUEsUUFDZjtBQUVJLGlCQUFPLGFBQWEsVUFBVTtBQUFBLFlBQzFCLE1BQU0sU0FBUztBQUFBLFlBQ2YsS0FBSyxTQUFTO0FBQUEsWUFDZCxhQUFhLFNBQVM7QUFBQSxZQUN0QixTQUFTLFNBQVM7QUFBQSxZQUNsQixNQUFNLFNBQVM7QUFBQSxZQUNmLE9BQU8sU0FBUztBQUFBLFVBQ3BCLENBQUM7QUFBQSxNQUNULE9BQ0s7QUFDRCxjQUFNLElBQUksS0FBSyxLQUFLLENBQUNBLE9BQU1BLEdBQUUsUUFBUSxXQUFXLENBQUMsRUFBRSxRQUFRQSxHQUFFLFVBQVUsS0FBSztBQUM1RSxZQUFJLEdBQUc7QUFDSCxZQUFFLFNBQVM7QUFBQSxRQUNmLE9BQ0s7QUFDRCxpQkFBTyxhQUFhLFdBQVcsQ0FBQyxFQUFFLE1BQU0sV0FBVyxDQUFDLENBQUM7QUFBQSxRQUN6RDtBQUFBLE1BTUo7QUFBQSxJQUNKO0FBQ0EsUUFBSSxNQUFNLENBQUM7QUFDWCxRQUFJLE1BQU0sQ0FBQztBQUNYLFFBQUlDLFNBQVEsQ0FBQztBQUNiLFdBQU8saUJBQWlCLEdBQUc7QUFDM0IsV0FBTyxpQkFBaUIsR0FBRztBQUMzQixXQUFPLGdCQUFnQkEsTUFBSztBQUM1QixXQUFPLHNCQUFzQjtBQUM3QixXQUFPLGlCQUFpQixHQUFHO0FBQzNCLFdBQU8saUJBQWlCLEdBQUc7QUFDM0IsV0FBTyxnQkFBZ0JBLE1BQUs7QUFDNUIsV0FBTyxPQUFPLE9BQU87QUFDckIsUUFBSSxPQUFPLFNBQVMsU0FBUyxHQUFHO0FBQzVCLGVBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxTQUFTLFFBQVEsS0FBSztBQUM3QyxZQUFJLGFBQWEsWUFBWSxRQUFRLE9BQU8sU0FBUyxDQUFDLEdBQUcsS0FBSztBQUM5RCxtQkFBVyxTQUFTO0FBQUEsTUFDeEI7QUFBQSxJQUNKO0FBQ0EsV0FBTyxTQUFTO0FBQ2hCLFdBQU87QUFBQSxFQUNYO0FBT0EsV0FBUyxVQUFVLFFBQVEsV0FBVztBQUNsQyxXQUFPLE9BQU8sU0FBUyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsU0FBUyxFQUFFLENBQUM7QUFBQSxFQUMvRDtBQVFBLFdBQVMsVUFBVSxRQUFRLE9BQU8sYUFBYTtBQUMzQyxXQUFRLE9BQU8sTUFBTSxHQUFHLEtBQUssSUFDekIsY0FDQSxPQUFPLE1BQU0sUUFBUSxZQUFZLE1BQU07QUFBQSxFQUMvQztBQUNPLE1BQU0sVUFBVTtBQUFBLElBQ25CO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNKOzs7QUNwS08sV0FBUyxhQUFhLEtBQUs7QUFDOUIsYUFBUyxJQUFJLElBQUksU0FBUyxHQUFHLElBQUksR0FBRyxLQUFLO0FBQ3JDLFlBQU0sSUFBSSxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDcEMsT0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFBQSxJQUN0QztBQUFBLEVBQ0o7OztBQ1ZPLE1BQU0sU0FBUztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1sQixRQUFRLENBQUMsTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1mLFFBQVEsQ0FBQyxNQUFNLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNbkIsU0FBUyxDQUFDLE1BQU0sS0FBSyxJQUFJLE1BQU0sSUFBSTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1uQyxXQUFXLENBQUMsTUFBTSxJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEdBQUcsQ0FBQyxJQUFJO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTXRFLFNBQVMsQ0FBQyxNQUFNLEtBQUssSUFBSSxHQUFHLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNN0IsVUFBVSxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNdEMsWUFBWSxDQUFDLE1BQU07QUFDZixVQUFJLElBQUksS0FBSztBQUNULGVBQU8sS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLElBQUk7QUFBQSxNQUNoQyxPQUNLO0FBQ0QsZ0JBQVEsS0FBSyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLO0FBQUEsTUFDMUM7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQVNPLFdBQVNDLE1BQUssT0FBTyxLQUFLLEdBQUcsU0FBUyxPQUFPLFFBQVE7QUFDeEQsUUFBSSxPQUFPLFdBQVcsWUFBWTtBQUM5QixlQUFTLGtCQUFrQixNQUFNO0FBQUEsSUFDckM7QUFDQSxXQUFPLFNBQVMsSUFBSSxPQUFPLENBQUMsS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUFBLEVBQ25EO0FBQ0EsV0FBUyxrQkFBa0IsTUFBTTtBQUU3QixXQUFPLE9BQU8sU0FBUyxhQUFhLE9BQU8sT0FBTztBQUFBLEVBQ3REO0FBUU8sV0FBUyxNQUFNLE9BQU9DLE1BQUtDLE1BQUs7QUFDbkMsV0FBTyxLQUFLLElBQUksS0FBSyxJQUFJLE9BQU9ELElBQUcsR0FBR0MsSUFBRztBQUFBLEVBQzdDOzs7QUM5RU8sTUFBTSxRQUFOLE1BQVk7QUFBQSxJQUNmLFFBQVEsQ0FBQztBQUFBLElBQ1QsUUFBUSxNQUFNO0FBQ1YsV0FBSyxNQUFNLEtBQUssSUFBSTtBQUFBLElBQ3hCO0FBQUEsSUFDQSxVQUFVO0FBQ04sYUFBTyxLQUFLLE1BQU0sTUFBTTtBQUFBLElBQzVCO0FBQUEsSUFDQSxVQUFVO0FBQ04sYUFBTyxLQUFLLE1BQU0sV0FBVztBQUFBLElBQ2pDO0FBQUEsRUFDSjs7O0FDSk8sV0FBUyxjQUFjLE9BQU8sa0JBQWtCO0FBRW5ELFFBQUksY0FBYyxpQkFBaUIsT0FBTyxDQUFDLE9BQU8sbUJBQW1CO0FBQ2pFLGFBQU8sUUFBUTtBQUFBLElBQ25CLEdBQUcsQ0FBQztBQUVKLFFBQUksY0FBYyxJQUFJLGNBQWMsR0FBRyxXQUFXO0FBRWxELGFBQVMsSUFBSSxHQUFHLElBQUksaUJBQWlCLFFBQVEsS0FBSztBQUM5QyxxQkFBZSxpQkFBaUIsQ0FBQztBQUdqQyxVQUFJLGVBQWUsR0FBRztBQUNsQixlQUFPLE1BQU0sQ0FBQztBQUFBLE1BQ2xCO0FBQUEsSUFDSjtBQUVBLFdBQU87QUFBQSxFQUNYOzs7QUN6QkEsTUFBQUMsZ0JBQUE7QUFBQSxXQUFBQSxlQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUNzQ0EsTUFBTSxrQkFBTixjQUE4QixVQUFVO0FBQUE7QUFBQSxJQU9wQyxPQUFPO0FBQUEsSUFDUCxVQUFVO0FBQUEsSUFDVixPQUFPO0FBQUE7QUFBQSxJQUNQLFdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBO0FBQUEsSUFDbkIsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUU7QUFBQTtBQUFBLElBQ3ZCLG9CQUFvQjtBQUFBO0FBQUEsSUFDcEIsd0JBQXdCO0FBQ3BCLGFBQU8sSUFBSSxRQUFRLE9BQU8sU0FBUyxXQUFXO0FBRTFDLGVBQU8sY0FBYyxJQUFJLE1BQU0sa0NBQWtDLENBQUM7QUFFbEUsZUFBTyxpQkFBaUIsdUNBQXVDLFlBQVk7QUFDdkUsY0FBSTtBQUNBLGtCQUFNLGNBQWMsTUFBTSxrQkFBa0Isa0JBQWtCO0FBQzlELG9CQUFRLFdBQVc7QUFBQSxVQUN2QixTQUNPLFdBQVA7QUFDSSxtQkFBTyxTQUFTO0FBQUEsVUFDcEI7QUFBQSxRQUNKLENBQUM7QUFBQSxNQUNMLENBQUM7QUFBQSxJQUNMO0FBQUEsSUFDQSxNQUFNLGlCQUFpQjtBQUduQixVQUFJLHFCQUFxQixrQkFBa0IsbUJBQW1CO0FBQzFELFlBQUk7QUFDQSxnQkFBTSxTQUFTLE1BQU0sa0JBQWtCLGtCQUFrQjtBQUV6RCxjQUFJLFdBQVcsV0FBVztBQUN0QixrQkFBTSxJQUFJLE1BQU0sYUFBYTtBQUFBLFVBQ2pDO0FBQUEsUUFDSixTQUNPLFdBQVA7QUFFSSxjQUFJLFVBQVUsU0FBUyxtQkFBbUI7QUFDdEMsa0JBQU0sY0FBYyxNQUFNLEtBQUssc0JBQXNCO0FBQ3JELGdCQUFJLGdCQUFnQixXQUFXO0FBQzNCLG9CQUFNLElBQUksTUFBTSxhQUFhO0FBQUEsWUFDakM7QUFBQSxVQUNKLE9BQ0s7QUFDRCxrQkFBTSxJQUFJLE1BQU0sYUFBYTtBQUFBLFVBQ2pDO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFDQSxVQUFJO0FBRUEsY0FBTSxTQUFTLE1BQU0sVUFBVSxhQUFhLGFBQWE7QUFBQSxVQUNyRCxPQUFPO0FBQUEsVUFDUCxPQUFPO0FBQUEsUUFDWCxDQUFDO0FBRUQsZUFBTyxVQUFVLEVBQUUsUUFBUSxDQUFDLFVBQVU7QUFDbEMsZ0JBQU0sS0FBSztBQUFBLFFBQ2YsQ0FBQztBQUFBLE1BQ0wsU0FDTyxXQUFQO0FBQ0ksY0FBTSxJQUFJLE1BQU0sUUFBUTtBQUFBLE1BQzVCO0FBQUEsSUFDSjtBQUFBLElBQ0EsT0FBTztBQUNILFdBQUssT0FBTyxLQUFLLE9BQU8sYUFBYSxNQUFNO0FBQzNDLFdBQUssV0FBVyxLQUFLLFNBQVMsS0FBSyxJQUFJO0FBQ3ZDLFdBQUssV0FBVyxLQUFLLFNBQVMsS0FBSyxJQUFJO0FBQ3ZDLFdBQUssY0FBYyxLQUFLLFlBQVksS0FBSyxJQUFJO0FBQzdDLFdBQUssdUJBQXVCLEtBQUsscUJBQXFCLEtBQUssSUFBSTtBQUFBLElBQ25FO0FBQUEsSUFDQSxNQUFNLFFBQVE7QUFDVixXQUFLLE9BQU8sS0FBSyxPQUFPLGFBQWEsTUFBTTtBQUMzQyxVQUFJLENBQUMsS0FBSyxxQkFBcUI7QUFDM0Isd0JBQWdCLEtBQUs7QUFBQSxNQUN6QjtBQUNBLFVBQUk7QUFDQSxjQUFNLEtBQUssZUFBZTtBQUFBLE1BQzlCLFNBQ08sT0FBUDtBQUVJLGVBQU8sY0FBYyxJQUFJLFlBQVksMkJBQTJCLEVBQUUsUUFBUSxNQUFNLENBQUMsQ0FBQztBQUNsRjtBQUFBLE1BQ0o7QUFDQSxZQUFNLEtBQUssV0FBVztBQUN0QixVQUFJLGFBQWEsVUFBVTtBQUFBLFFBQ3ZCLHNCQUFzQjtBQUFBLE1BQzFCLENBQUM7QUFDRCxXQUFLLG9CQUFvQixJQUFJLGtCQUFrQixlQUFlO0FBQzlELFVBQUkseUJBQXlCO0FBQUEsUUFDekIsS0FBSztBQUFBLFFBQ0wsSUFBSSxhQUFhLGVBQWU7QUFBQSxRQUNoQztBQUFBLE1BQ0osQ0FBQztBQUNELFlBQU1DLFVBQVM7QUFBQSxRQUNYLGNBQWM7QUFBQSxVQUNWLFdBQVcsSUFBSSxTQUFTLE9BQU8sRUFBRTtBQUFBLFFBQ3JDO0FBQUEsUUFDQSxRQUFRLE9BQU87QUFBQSxRQUNmLGdCQUFnQixJQUFJLFNBQVMsT0FBTyxFQUFFO0FBQUEsUUFDdEMsWUFBWTtBQUFBLE1BQ2hCO0FBQ0EsVUFBSSxJQUFJQSxPQUFNO0FBQUEsSUFDbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsU0FBUyxRQUFRO0FBQ2IsV0FBSyxVQUFVO0FBQ2YsV0FBSyxPQUFPLE1BQU0sb0JBQW9CO0FBQ3RDLFlBQU0sS0FBSyxPQUFPO0FBQ2xCLFlBQU0sTUFBTSxLQUFLLE9BQU87QUFDeEIsWUFBTSxNQUFNLEtBQUssT0FBTyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlDLFdBQUssV0FBVyxNQUFNLEtBQUssR0FBRztBQUM5QixXQUFLLFdBQVcsTUFBTSxLQUFLLEdBQUc7QUFDOUIsVUFBSSxhQUFhLDZCQUE2QjtBQUFBLFFBQzFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRTtBQUFBLFFBQzFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFO0FBQUEsUUFDckQsS0FBSztBQUFBLFVBQ0QsZ0JBQWdCLE9BQU8sT0FBTztBQUFBLFVBQzlCLGlCQUFpQixPQUFPLE9BQU87QUFBQSxVQUMvQixlQUFlLEtBQUssS0FBSztBQUFBLFVBQ3pCLGNBQWMsS0FBSyxLQUFLO0FBQUEsUUFDNUI7QUFBQSxNQUNKLENBQUM7QUFDRCxXQUFLLE9BQU8sTUFBTSxZQUFZLEtBQUssTUFBTTtBQUNyQyxXQUFHLGdCQUFnQixHQUFHLGtCQUFrQixJQUFJO0FBQzVDLFlBQUksYUFBYSxLQUFLLElBQUksQ0FBQztBQUMzQixZQUFJLFVBQVU7QUFBQSxNQUNsQixDQUFDO0FBQ0QsV0FBSyxPQUFPLE1BQU0sYUFBYSxLQUFLLE1BQU07QUFDdEMsWUFBSSxjQUFjLEtBQUssSUFBSSxDQUFDO0FBQUEsTUFDaEMsQ0FBQztBQUFBLElBQ0w7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EscUJBQXFCLEdBQUc7QUFDcEIsVUFBSSxLQUFLLEVBQUUsV0FBVyxVQUFVO0FBQzVCLGFBQUssWUFBWSxJQUFJLE1BQU0sOEJBQThCLEVBQUUsUUFBUSxDQUFDO0FBQUEsTUFDeEU7QUFBQSxJQUNKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLFNBQVMsR0FBRztBQUNSLFVBQUksQ0FBQyxFQUFFLGlCQUFpQjtBQUNwQjtBQUNKLFlBQU0sRUFBRSxVQUFVLFVBQVUsV0FBVyxJQUFJLEVBQUUsaUJBQWlCO0FBQzlELFdBQUssU0FBUyxDQUFDLElBQUksU0FBUztBQUM1QixXQUFLLFNBQVMsQ0FBQyxJQUFJLFNBQVM7QUFDNUIsV0FBSyxTQUFTLENBQUMsSUFBSSxTQUFTO0FBQzVCLFdBQUssU0FBUyxDQUFDLElBQUksU0FBUztBQUM1QixXQUFLLFNBQVMsQ0FBQyxJQUFJLFNBQVM7QUFDNUIsV0FBSyxTQUFTLENBQUMsSUFBSSxTQUFTO0FBQzVCLFdBQUssU0FBUyxDQUFDLElBQUksU0FBUztBQUM1QixVQUFJLFlBQVk7QUFDWixjQUFNLG1CQUFtQixLQUFLLEtBQUs7QUFDbkMsaUJBQVMsSUFBSSxHQUFHLElBQUksSUFBSSxLQUFLO0FBR3pCLGNBQUksT0FBTyxTQUFTLFdBQVcsQ0FBQyxDQUFDLEdBQUc7QUFDaEMsNkJBQWlCLENBQUMsSUFBSSxXQUFXLENBQUM7QUFBQSxVQUN0QztBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQ0EsVUFBSSxZQUFZLFVBQVU7QUFDdEIsYUFBSyxPQUFPLGdCQUFnQixLQUFLO0FBQ2pDLGFBQUssT0FBTyxvQkFBb0IsS0FBSyxRQUFRO0FBQUEsTUFDakQ7QUFBQSxJQUNKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLFlBQVksT0FBTztBQUNmLGNBQVEsTUFBTSxzQkFBc0IsS0FBSztBQUN6QyxhQUFPLGNBQWMsSUFBSSxZQUFZLGlCQUFpQixFQUFFLFFBQVEsTUFBTSxDQUFDLENBQUM7QUFBQSxJQUM1RTtBQUFBLElBQ0EsYUFBYTtBQUNULGFBQU8sSUFBSSxRQUFRLENBQUMsU0FBUyxTQUFTO0FBQ2xDLFlBQUksT0FBTyxLQUFLO0FBQ1osa0JBQVE7QUFBQSxRQUNaLE9BQ0s7QUFDRCxpQkFBTyxpQkFBaUIsWUFBWSxNQUFNLFFBQVEsQ0FBQztBQUFBLFFBQ3ZEO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0o7QUFuTUksZ0JBREUsaUJBQ0ssWUFBVztBQUNsQixnQkFGRSxpQkFFSyxjQUFhO0FBQUE7QUFBQSxJQUVoQixxQkFBcUIsRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTLE1BQU07QUFBQSxFQUMzRDtBQWlNSixNQUFNLGtCQUFrQjtBQUFBLElBQ3BCLE1BQU0sV0FBWTtBQUNkLFdBQUssK0JBQStCLEtBQUssNkJBQTZCLEtBQUssSUFBSTtBQUMvRSxXQUFLLHVCQUF1QixLQUFLLHFCQUFxQixLQUFLLElBQUk7QUFDL0QsV0FBSyxjQUFjLEtBQUssWUFBWSxLQUFLLElBQUk7QUFDN0MsYUFBTyxpQkFBaUIsb0NBQW9DLEtBQUssNEJBQTRCO0FBQzdGLGFBQU8saUJBQWlCLDJCQUEyQixLQUFLLG9CQUFvQjtBQUM1RSxhQUFPLGlCQUFpQixpQkFBaUIsS0FBSyxXQUFXO0FBQUEsSUFDN0Q7QUFBQSxJQUNBLDhCQUE4QixXQUFZO0FBQ3RDLFlBQU0sVUFBVSxLQUFLLFlBQVksd0JBQXdCO0FBQ3pELGFBQU8saUJBQWlCLHVDQUF1QyxNQUFNO0FBQ2pFLGdCQUFRLE9BQU87QUFBQSxNQUNuQixDQUFDO0FBQUEsSUFDTDtBQUFBLElBQ0Esc0JBQXNCLFNBQVUsU0FBUztBQUNyQyxXQUFLLFlBQVksdUJBQXVCO0FBQUEsSUFDNUM7QUFBQSxJQUNBLGFBQWEsU0FBVSxRQUFRO0FBQzNCLFdBQUssWUFBWSxtQkFBbUI7QUFBQSxJQUN4QztBQUFBLElBQ0EsYUFBYSxTQUFVLGFBQWE7QUFDaEMsWUFBTSxVQUFVLFNBQVMsY0FBYyxLQUFLO0FBQzVDLGNBQVEsWUFBWTtBQUNwQixlQUFTLEtBQUssWUFBWSxPQUFPO0FBQ2pDLGFBQU87QUFBQSxJQUNYO0FBQUEsRUFDSjtBQUNBLE1BQU0sMkJBQTJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFtQ2pDLE1BQU0sMEJBQTBCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFtQ2hDLE1BQU0sc0JBQXNCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQzlVNUIsTUFBTSxVQUFVLElBQUksYUFBYSxDQUFDO0FBQ2xDLE1BQU0sV0FBVyxJQUFJLGFBQWEsQ0FBQztBQUM1QixXQUFTLHlCQUF5QixHQUFHLFdBQVc7QUFDbkQsVUFBTSxJQUFJLFVBQVU7QUFDcEIsYUFBUyxDQUFDLElBQUksRUFBRTtBQUNoQixhQUFTLENBQUMsSUFBSSxFQUFFO0FBQ2hCLGFBQVMsQ0FBQyxJQUFJLEVBQUU7QUFDaEIsYUFBUyxDQUFDLElBQUksRUFBRTtBQUNoQixVQUFNLElBQUksVUFBVTtBQUNwQixZQUFRLENBQUMsSUFBSSxFQUFFO0FBQ2YsWUFBUSxDQUFDLElBQUksRUFBRTtBQUNmLFlBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDZixNQUFFLHlCQUF5QjtBQUMzQixNQUFFLGVBQWUsSUFBSSxRQUFRO0FBQzdCLE1BQUUsVUFBVSxPQUFPO0FBQUEsRUFDdkI7OztBQ2ZBLE1BQUlDLGNBQTBDLFNBQVUsWUFBWSxRQUFRLEtBQUssTUFBTTtBQUNuRixRQUFJLElBQUksVUFBVSxRQUFRLElBQUksSUFBSSxJQUFJLFNBQVMsU0FBUyxPQUFPLE9BQU8sT0FBTyx5QkFBeUIsUUFBUSxHQUFHLElBQUksTUFBTTtBQUMzSCxRQUFJLE9BQU8sWUFBWSxZQUFZLE9BQU8sUUFBUSxhQUFhO0FBQVksVUFBSSxRQUFRLFNBQVMsWUFBWSxRQUFRLEtBQUssSUFBSTtBQUFBO0FBQ3hILGVBQVMsSUFBSSxXQUFXLFNBQVMsR0FBRyxLQUFLLEdBQUc7QUFBSyxZQUFJLElBQUksV0FBVyxDQUFDO0FBQUcsZUFBSyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsR0FBRyxNQUFNO0FBQ2hKLFdBQU8sSUFBSSxLQUFLLEtBQUssT0FBTyxlQUFlLFFBQVEsS0FBSyxDQUFDLEdBQUc7QUFBQSxFQUNoRTtBQUlBLE1BQUksV0FBVyxJQUFJLGFBQWEsQ0FBQztBQUNqQyxNQUFJQyxZQUFXLElBQUksYUFBYSxDQUFDO0FBVmpDO0FBeUJBLE1BQU0sVUFBTixjQUFxQixVQUFVO0FBQUEsSUFBL0I7QUFBQTtBQXFESTtBQUdBLHlCQUFNO0FBa0JOO0FBa0JBO0FBR0E7QUEzRkEscUNBQVU7QUFFVjtBQUFBLGtDQUFPO0FBRVA7QUFBQSxzQ0FBVztBQUVYO0FBQUEsc0NBQVcsSUFBSSxRQUFRO0FBRXZCO0FBQUEscUNBQVU7QUFFVjtBQUFBLDZDQUFrQixJQUFJLFFBQVE7QUFFOUI7QUFBQSw0Q0FBaUIsSUFBSSxRQUFRO0FBRTdCO0FBQUEscUNBQVU7QUFFVjtBQUFBLHlDQUFjO0FBQUE7QUFBQTtBQUFBLElBRWQsT0FBTyxnQkFBZ0I7QUFDbkIsYUFBTyxzQkFBTztBQUFBLElBQ2xCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFtQkEsT0FBTyxPQUFPLEdBQUcsUUFBUSxPQUFPLFdBQVc7QUFDdkMsWUFBTSxJQUFJLEVBQUUsYUFBYSxTQUFRLEVBQUUsR0FBRyxRQUFRLFFBQVEsTUFBTSxDQUFDO0FBQzdELFVBQUksTUFBTTtBQUNOLGVBQU87QUFDWCxRQUFFLGNBQWMsYUFBYTtBQUM3QixRQUFFLFVBQVUsU0FBUztBQUNyQixRQUFFLFNBQVMsS0FBSyxPQUFRLEVBQUUsVUFBVSxNQUFRLEVBQUUsY0FBYyxLQUFNO0FBQ2xFLFFBQUUsU0FBUztBQUNYLGFBQU8sRUFBRSxTQUFTLFFBQVE7QUFBQSxJQUM5QjtBQUFBLElBK0NBLFFBQVE7QUFDSixVQUFJLEtBQUssUUFBUSxLQUFLLE9BQU8sSUFBSTtBQUM3QixhQUFLLFVBQVU7QUFDZixZQUFJLEtBQUssT0FBTyxHQUFHLFFBQVEsNEJBQTRCLFFBQVc7QUFDOUQsa0JBQVEsS0FBSyx5RkFBeUY7QUFBQSxRQUMxRztBQUNBLGFBQUssT0FBTyxHQUFHLFFBQVEsd0JBQXdCLEtBQUssSUFBSSxFQUFFLEtBQUssc0JBQUssc0NBQWlCLEtBQUssSUFBSSxDQUFDO0FBQUEsTUFDbkcsV0FDUyxzQkFBSyx3QkFBTCxZQUFrQjtBQUN2Qiw4QkFBSyxnQ0FBTCxXQUFxQixLQUFLLHNCQUFLLDhCQUFhLEtBQUssSUFBSSxDQUFDO0FBQUEsTUFDMUQsT0FDSztBQUNELGNBQU0sSUFBSSxNQUFNLHlFQUF5RTtBQUFBLE1BQzdGO0FBQUEsSUFDSjtBQUFBLElBQ0EsU0FBUztBQUNMLFVBQUksQ0FBQyxLQUFLLFlBQVksQ0FBQyxLQUFLLE9BQU87QUFDL0I7QUFFSixZQUFNLE9BQU8sS0FBSyxPQUFPLEdBQUcsTUFBTSxRQUFRLEtBQUssU0FBUyxhQUFhLEtBQUssT0FBTyxHQUFHLHFCQUFxQjtBQUN6RyxZQUFNLFVBQVUsQ0FBQyxDQUFDO0FBQ2xCLFVBQUksV0FBVyxLQUFLLFNBQVM7QUFDekIsYUFBSyxVQUFVO0FBQ2YsU0FBQyxVQUFVLEtBQUssa0JBQWtCLEtBQUssZ0JBQWdCLE9BQU8sSUFBSTtBQUFBLE1BQ3RFO0FBQ0EsVUFBSSxNQUFNO0FBQ04saUNBQXlCLEtBQUssUUFBUSxLQUFLLFNBQVM7QUFBQSxNQUN4RDtBQUFBLElBQ0o7QUFBQSxJQUNBLFlBQVk7QUF6SmhCO0FBMEpRLG9DQUFPLGdDQUFQLFNBQXFCO0FBQUEsSUFDekI7QUFBQSxFQUNKO0FBbklBLE1BQU0sU0FBTjtBQUdXO0FBc0JBO0FBQUEsaUJBQVUsU0FBQyxRQUFRO0FBQ3RCLDBCQUFPLFVBQVMsS0FBSyxNQUFNO0FBQUEsRUFDL0I7QUFDTztBQUFBLG9CQUFhLFNBQUMsUUFBUTtBQUN6QixVQUFNLFFBQVEsc0JBQU8sVUFBUyxRQUFRLE1BQU07QUFDNUMsUUFBSSxRQUFRO0FBQ1I7QUFDSiwwQkFBTyxVQUFTLE9BQU8sT0FBTyxDQUFDO0FBQUEsRUFDbkM7QUFvQkE7QUFBQSxnQkFBUyxXQUFHO0FBQ1IsV0FBTyxLQUFLLFdBQVcsS0FBSyxPQUFPLEdBQUc7QUFBQSxFQUMxQztBQUNNO0FBQUEsb0JBQWEsaUJBQUc7QUFDbEIsUUFBSSxDQUFDLHNCQUFLLHdCQUFMLFdBQWlCLGNBQWM7QUFDaEMsWUFBTSxJQUFJLE1BQU0sMkZBQTJGO0FBQUEsSUFDL0c7QUFDQSxRQUFJLEtBQUssYUFBYTtBQUNsQixVQUFJLEtBQUssWUFBWSxpQkFBaUIsUUFBVztBQUM3QyxjQUFNLElBQUksTUFBTSxtRkFBbUY7QUFBQSxNQUN2RztBQUNBLGFBQU8sS0FBSyxZQUFZLGFBQWE7QUFBQSxJQUN6QyxPQUNLO0FBQ0QsV0FBSyxPQUFPLG9CQUFvQixRQUFRO0FBQ3hDLE1BQUFBLFVBQVMsSUFBSSxLQUFLLE9BQU8sYUFBYTtBQUN0QyxZQUFNLFdBQVdBO0FBQ2pCLFlBQU0sYUFBYSxJQUFJLGlCQUFpQixFQUFFLEdBQUcsU0FBUyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUM7QUFDOUosYUFBTyxzQkFBSyx3QkFBTCxZQUFrQixhQUFhLFlBQVksS0FBSyxPQUFPLEdBQUcscUJBQXFCO0FBQUEsSUFDMUY7QUFBQSxFQUNKO0FBQ0E7QUFBQSxtQkFBWSxTQUFDLFFBQVE7QUFDakIsUUFBSSxDQUFDO0FBQ0Q7QUFDSixRQUFJLEtBQUssU0FBUztBQUNkLFVBQUksT0FBTyw0QkFBNEIsUUFBVztBQUM5QyxlQUFPLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxTQUFTO0FBeEdoRTtBQXlHb0IsZUFBSyxPQUFPO0FBQ1osZ0NBQUssd0JBQUwsV0FBZTtBQUNmLHdDQUFPLDBCQUFQLFNBQWtCO0FBQUEsUUFDdEIsQ0FBQztBQUNEO0FBQUEsTUFDSixPQUNLO0FBQ0QsZ0JBQVEsS0FBSyx5RkFBeUY7QUFBQSxNQUMxRztBQUFBLElBQ0o7QUFDQSwwQkFBSyx3QkFBTCxXQUFlO0FBQUEsRUFDbkI7QUFDQTtBQUFBLHVCQUFnQixTQUFDLFFBQVE7QUFDckIsMEJBQUssd0JBQUwsV0FBZTtBQUFBLEVBQ25CO0FBQ0E7QUFBQSxnQkFBUyxTQUFDLFFBQVE7QUFDZCxTQUFLLFdBQVc7QUFDaEIsU0FBSyxTQUFTLE9BQU8sSUFBSTtBQUFBLEVBQzdCO0FBekVBLGVBekJFLFFBeUJLO0FBR1AsZUE1QkUsUUE0Qks7QUEzQlAsZ0JBREUsUUFDSyxZQUFXO0FBRWxCO0FBQUEsZUFIRSxRQUdLLFVBQVcsQ0FBQztBQWlJdkIsRUFBQUQsWUFBVztBQUFBLElBQ1AsU0FBUyxLQUFLLEtBQUs7QUFBQSxFQUN2QixHQUFHLE9BQU8sV0FBVyxXQUFXLE1BQU07QUFDdEMsRUFBQUEsWUFBVztBQUFBLElBQ1AsU0FBUyxPQUFPO0FBQUEsRUFDcEIsR0FBRyxPQUFPLFdBQVcsUUFBUSxNQUFNOzs7QUM5R25DLE1BQU0sZUFBTixjQUEyQixVQUFVO0FBQUE7QUFBQSxJQUlqQyxVQUFVLElBQUksUUFBUTtBQUFBO0FBQUEsSUFFdEIsWUFBWSxJQUFJLFFBQVE7QUFBQTtBQUFBLElBRXhCLFVBQVUsSUFBSSxRQUFRO0FBQUE7QUFBQSxJQUV0QixTQUFTLElBQUksUUFBUTtBQUFBO0FBQUEsSUFFckIsU0FBUyxJQUFJLFFBQVE7QUFBQTtBQUFBLElBRXJCLE9BQU8sSUFBSSxRQUFRO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFPbkIsaUJBQWlCRSxJQUFHO0FBQ2hCLFdBQUssUUFBUSxJQUFJQSxFQUFDO0FBQUEsSUFDdEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLG9CQUFvQkEsSUFBRztBQUNuQixXQUFLLFFBQVEsT0FBT0EsRUFBQztBQUFBLElBQ3pCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFPQSxtQkFBbUJBLElBQUc7QUFDbEIsV0FBSyxVQUFVLElBQUlBLEVBQUM7QUFBQSxJQUN4QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0Esc0JBQXNCQSxJQUFHO0FBQ3JCLFdBQUssVUFBVSxPQUFPQSxFQUFDO0FBQUEsSUFDM0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLGlCQUFpQkEsSUFBRztBQUNoQixXQUFLLFFBQVEsSUFBSUEsRUFBQztBQUFBLElBQ3RCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFPQSxvQkFBb0JBLElBQUc7QUFDbkIsV0FBSyxRQUFRLE9BQU9BLEVBQUM7QUFBQSxJQUN6QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsZ0JBQWdCQSxJQUFHO0FBQ2YsV0FBSyxPQUFPLElBQUlBLEVBQUM7QUFBQSxJQUNyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsbUJBQW1CQSxJQUFHO0FBQ2xCLFdBQUssT0FBTyxPQUFPQSxFQUFDO0FBQUEsSUFDeEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLGdCQUFnQkEsSUFBRztBQUNmLFdBQUssT0FBTyxJQUFJQSxFQUFDO0FBQUEsSUFDckI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLG1CQUFtQkEsSUFBRztBQUNsQixXQUFLLE9BQU8sT0FBT0EsRUFBQztBQUFBLElBQ3hCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFPQSxjQUFjQSxJQUFHO0FBQ2IsV0FBSyxLQUFLLElBQUlBLEVBQUM7QUFBQSxJQUNuQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsaUJBQWlCQSxJQUFHO0FBQ2hCLFdBQUssS0FBSyxPQUFPQSxFQUFDO0FBQUEsSUFDdEI7QUFBQSxFQUNKO0FBMUhJLGdCQURFLGNBQ0ssWUFBVztBQUNsQixnQkFGRSxjQUVLLGNBQWEsQ0FBQzs7O0FDdER6QixNQUFJQyxjQUEwQyxTQUFVLFlBQVksUUFBUSxLQUFLLE1BQU07QUFDbkYsUUFBSSxJQUFJLFVBQVUsUUFBUSxJQUFJLElBQUksSUFBSSxTQUFTLFNBQVMsT0FBTyxPQUFPLE9BQU8seUJBQXlCLFFBQVEsR0FBRyxJQUFJLE1BQU07QUFDM0gsUUFBSSxPQUFPLFlBQVksWUFBWSxPQUFPLFFBQVEsYUFBYTtBQUFZLFVBQUksUUFBUSxTQUFTLFlBQVksUUFBUSxLQUFLLElBQUk7QUFBQTtBQUN4SCxlQUFTLElBQUksV0FBVyxTQUFTLEdBQUcsS0FBSyxHQUFHO0FBQUssWUFBSSxJQUFJLFdBQVcsQ0FBQztBQUFHLGVBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLEdBQUcsTUFBTTtBQUNoSixXQUFPLElBQUksS0FBSyxLQUFLLE9BQU8sZUFBZSxRQUFRLEtBQUssQ0FBQyxHQUFHO0FBQUEsRUFDaEU7QUFZQSxNQUFNLGtCQUFOLGNBQThCLFVBQVU7QUFBQSxJQUVwQyxjQUFjLElBQUksYUFBYSxDQUFDO0FBQUEsSUFDaEMsVUFBVTtBQUFBLElBQ1Ysa0JBQWtCO0FBQUE7QUFBQSxJQUVsQixtQkFBbUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS25CLGNBQWM7QUFBQTtBQUFBLElBRWQsWUFBWSxJQUFJLFFBQVE7QUFBQTtBQUFBLElBRXhCLGFBQWEsSUFBSSxRQUFRO0FBQUEsSUFDekIseUJBQXlCO0FBQUEsSUFDekIsdUJBQXVCO0FBQUEsSUFDdkIsUUFBUTtBQUNKLFdBQUsseUJBQXlCLEtBQUssaUJBQWlCLEtBQUssSUFBSTtBQUM3RCxXQUFLLHVCQUF1QixLQUFLLGVBQWUsS0FBSyxJQUFJO0FBQ3pELFVBQUksS0FBSyxhQUFhO0FBQ2xCLGFBQUssWUFBWSxJQUFJLEtBQUssT0FBTyxZQUFZO0FBQzdDLGFBQUssT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUMzQixhQUFLLFVBQVUsSUFBSSxNQUFNO0FBQ3JCLGVBQUssWUFBWSxJQUFJLEtBQUssT0FBTyxZQUFZO0FBQzdDLGVBQUssT0FBTyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUFBLFFBQy9CLENBQUM7QUFDRCxhQUFLLFdBQVcsSUFBSSxNQUFNO0FBQ3RCLGVBQUssT0FBTyxhQUFhLElBQUksS0FBSyxXQUFXO0FBQzdDLGVBQUssT0FBTyxTQUFTO0FBQUEsUUFDekIsQ0FBQztBQUFBLE1BQ0w7QUFBQSxJQUNKO0FBQUEsSUFDQSxhQUFhO0FBQ1QsV0FBSyxPQUFPLGlCQUFpQixJQUFJLEtBQUssc0JBQXNCO0FBQzVELFdBQUssT0FBTyxlQUFlLElBQUksS0FBSyxvQkFBb0I7QUFBQSxJQUM1RDtBQUFBLElBQ0EsZUFBZTtBQUNYLFdBQUssT0FBTyxpQkFBaUIsT0FBTyxLQUFLLHNCQUFzQjtBQUMvRCxXQUFLLE9BQU8sZUFBZSxPQUFPLEtBQUssb0JBQW9CO0FBQUEsSUFDL0Q7QUFBQSxJQUNBLFNBQVM7QUFDTCxZQUFNLGFBQWEsS0FBSztBQUN4QixVQUFJLEtBQUssaUJBQWlCO0FBQ3RCLGNBQU0sUUFBUSxLQUFLLE9BQU87QUFDMUIsWUFBSSxDQUFDO0FBQ0Q7QUFDSixZQUFJLGlCQUFpQixNQUFNLGtCQUFrQixLQUFLLGVBQWU7QUFDakUsWUFBSSxlQUFlLFNBQVMsR0FBRztBQUMzQixjQUFJLE9BQU8sZUFBZSxDQUFDLEVBQUUsUUFBUSxLQUFLLE9BQU8sR0FBRyxxQkFBcUI7QUFDekUsZUFBSyxVQUFVLENBQUMsQ0FBQztBQUNqQixjQUFJLE1BQU07QUFDTixxQ0FBeUIsS0FBSyxRQUFRLEtBQUssU0FBUztBQUFBLFVBQ3hEO0FBQUEsUUFDSixPQUNLO0FBQ0QsZUFBSyxVQUFVO0FBQUEsUUFDbkI7QUFBQSxNQUNKO0FBRUEsVUFBSSxLQUFLLFdBQVcsWUFBWTtBQUM1QixTQUFDLEtBQUssVUFBVSxLQUFLLGFBQWEsS0FBSyxXQUFXLE9BQU8sSUFBSTtBQUFBLE1BQ2pFO0FBQUEsSUFDSjtBQUFBLElBQ0Esa0JBQWtCLFFBQVEsS0FBSyxPQUFPLElBQUksU0FBUyxNQUFNO0FBQ3JELFVBQUksQ0FBQztBQUNELGVBQU8sQ0FBQztBQUVaLFVBQUksQ0FBQyxLQUFLO0FBQ04sZUFBTyxDQUFDO0FBQ1osYUFBTyxNQUFNLGtCQUFrQixLQUFLLGVBQWU7QUFBQSxJQUN2RDtBQUFBLElBQ0EsaUJBQWlCLFNBQVM7QUFDdEIsVUFBSSxRQUFRLHlCQUF5QixRQUFXO0FBQzVDLGdCQUFRLE1BQU0sNEVBQTRFO0FBQzFGLGFBQUssU0FBUztBQUNkO0FBQUEsTUFDSjtBQUNBLGNBQ0sscUJBQXFCO0FBQUEsUUFDdEIsT0FBTyxLQUFLLG9CQUNSLEtBQUssT0FBTyxHQUFHLHNCQUFzQixRQUFRO0FBQUEsTUFDckQsQ0FBQyxFQUNJLEtBQUssQ0FBQyxrQkFBa0I7QUFDekIsYUFBSyxrQkFBa0I7QUFBQSxNQUMzQixDQUFDLEVBQ0ksTUFBTSxRQUFRLEtBQUs7QUFBQSxJQUM1QjtBQUFBLElBQ0EsaUJBQWlCO0FBQ2IsVUFBSSxDQUFDLEtBQUs7QUFDTjtBQUNKLFdBQUssZ0JBQWdCLE9BQU87QUFDNUIsV0FBSyxrQkFBa0I7QUFBQSxJQUMzQjtBQUFBLEVBQ0o7QUE5RkksZ0JBREUsaUJBQ0ssWUFBVztBQStGdEIsRUFBQUEsWUFBVztBQUFBLElBQ1AsU0FBUyxLQUFLLElBQUk7QUFBQSxFQUN0QixHQUFHLGdCQUFnQixXQUFXLGVBQWUsTUFBTTs7O0FDbkhuRCxNQUFJQyxlQUEwQyxTQUFVLFlBQVksUUFBUSxLQUFLLE1BQU07QUFDbkYsUUFBSSxJQUFJLFVBQVUsUUFBUSxJQUFJLElBQUksSUFBSSxTQUFTLFNBQVMsT0FBTyxPQUFPLE9BQU8seUJBQXlCLFFBQVEsR0FBRyxJQUFJLE1BQU07QUFDM0gsUUFBSSxPQUFPLFlBQVksWUFBWSxPQUFPLFFBQVEsYUFBYTtBQUFZLFVBQUksUUFBUSxTQUFTLFlBQVksUUFBUSxLQUFLLElBQUk7QUFBQTtBQUN4SCxlQUFTLElBQUksV0FBVyxTQUFTLEdBQUcsS0FBSyxHQUFHO0FBQUssWUFBSSxJQUFJLFdBQVcsQ0FBQztBQUFHLGVBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLEdBQUcsTUFBTTtBQUNoSixXQUFPLElBQUksS0FBSyxLQUFLLE9BQU8sZUFBZSxRQUFRLEtBQUssQ0FBQyxHQUFHO0FBQUEsRUFDaEU7QUFNQSxNQUFNQyxXQUFVLElBQUksYUFBYSxDQUFDO0FBRWxDLE1BQU0sdUJBQU4sTUFBMkI7QUFBQTtBQUFBLElBRXZCLFVBQVUsSUFBSSxRQUFRO0FBQUE7QUFBQSxJQUV0QixZQUFZLElBQUksUUFBUTtBQUFBO0FBQUEsSUFFeEIsVUFBVSxJQUFJLFFBQVE7QUFBQTtBQUFBLElBRXRCLFNBQVMsSUFBSSxRQUFRO0FBQUE7QUFBQSxJQUVyQixTQUFTLElBQUksUUFBUTtBQUFBO0FBQUEsSUFFckIsT0FBTyxJQUFJLFFBQVE7QUFBQSxFQUN2QjtBQW1CQSxNQUFNLFNBQU4sY0FBcUIsVUFBVTtBQUFBLElBSzNCLE9BQU8sV0FBVyxRQUFRO0FBQ3RCLGFBQU8sa0JBQWtCLGVBQWU7QUFBQSxJQUM1QztBQUFBLElBQ0EsaUJBQWlCO0FBQUEsSUFDakIseUJBQXlCLENBQUM7QUFBQSxJQUMxQixTQUFTO0FBQUEsSUFDVCxVQUFVLElBQUksYUFBYSxDQUFDO0FBQUEsSUFDNUIsa0JBQWtCLElBQUksYUFBYSxDQUFDO0FBQUEsSUFDcEMsYUFBYSxJQUFJLGFBQWEsQ0FBQztBQUFBLElBQy9CLG9CQUFvQixJQUFJLGFBQWEsRUFBRTtBQUFBLElBQ3ZDLGlCQUFpQjtBQUFBLElBQ2pCLFVBQVU7QUFBQSxJQUNWLGNBQWM7QUFBQSxJQUNkLGVBQWU7QUFBQSxJQUNmLGtCQUFrQixJQUFJLGFBQWEsQ0FBQztBQUFBLElBQ3BDLHlCQUF5QixJQUFJLGFBQWEsQ0FBQztBQUFBLElBQzNDLGtCQUFrQixJQUFJLGFBQWEsQ0FBQztBQUFBLElBQ3BDLG1CQUFtQjtBQUFBLElBQ25CLGlCQUFpQjtBQUFBLElBQ2pCLDBCQUEwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLMUIsVUFBVTtBQUFBO0FBQUEsSUFFVixjQUFjO0FBQUE7QUFBQSxJQUVkLGlCQUFpQjtBQUFBO0FBQUEsSUFFakIsdUJBQXVCO0FBQUE7QUFBQSxJQUV2QixrQkFBa0I7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUlsQixlQUFlLElBQUkscUJBQXFCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBWXhDLGdCQUFnQixJQUFJLHFCQUFxQjtBQUFBO0FBQUEsSUFFekMsWUFBWSxJQUFJLGFBQWEsQ0FBQztBQUFBO0FBQUEsSUFFOUIsaUJBQWlCO0FBQUE7QUFBQSxJQUVqQixrQkFBa0I7QUFBQTtBQUFBLElBRWxCLHVCQUF1QjtBQUFBO0FBQUEsSUFFdkIsZUFBZTtBQUFBO0FBQUEsSUFFZixhQUFhO0FBQUE7QUFBQSxJQUViLGNBQWM7QUFBQTtBQUFBLElBRWQsY0FBYztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT2Qsa0JBQWtCO0FBQUEsSUFDbEIsb0JBQW9CLE1BQU07QUFDdEIsVUFBSSxDQUFDLEtBQUs7QUFDTjtBQUdKLG1CQUFLLE9BQU8sS0FBSyxtQkFBbUIsS0FBSyxlQUFlLGdCQUFnQjtBQUFBLElBQzVFO0FBQUEsSUFDQSxRQUFRO0FBQ0osV0FBSyxpQkFBaUIsS0FBSyxLQUFLO0FBQ2hDLFVBQUksS0FBSyxjQUFjLEdBQUc7QUFDdEIsY0FBTSxZQUFZLEtBQUssT0FBTyxhQUFhLE9BQU87QUFDbEQsWUFBSSxDQUFDLFdBQVc7QUFDWixrQkFBUSxLQUFLLDhCQUE4QixLQUFLLE9BQU8sTUFBTSxzRkFDckI7QUFBQSxRQUM1QyxPQUNLO0FBQ0QsZUFBSyxhQUFhLFVBQVUsY0FBYztBQUMxQyxlQUFLLFNBQVM7QUFBQSxRQUNsQjtBQUFBLE1BQ0osT0FDSztBQUNELGFBQUssYUFBYSxDQUFDLFFBQVEsU0FBUyxNQUFNLEVBQUUsS0FBSyxhQUFhLENBQUM7QUFBQSxNQUNuRTtBQUNBLFdBQUssaUJBQWlCLEtBQUssT0FBTyxhQUFhLGFBQWE7QUFDNUQsVUFBSSxLQUFLLGlCQUFpQjtBQUN0QixhQUFLLGlCQUFpQixLQUFLLE9BQU8sTUFBTSxVQUFVLEtBQUssTUFBTTtBQUM3RCxhQUFLLG1CQUNELEtBQUssZUFBZSxhQUFhLGlCQUFpQjtBQUFBLFVBQzlDLGFBQWE7QUFBQSxRQUNqQixDQUFDLEtBQUs7QUFBQSxNQUNkO0FBQ0EsV0FBSywwQkFBMEIsS0FBSyxjQUFjLEtBQUssSUFBSTtBQUFBLElBQy9EO0FBQUEsSUFDQSxhQUFhO0FBQ1QsV0FBSyxPQUFPLGlCQUFpQixJQUFJLEtBQUssdUJBQXVCO0FBQzdELFdBQUssT0FBTyxTQUFTLElBQUksS0FBSyxpQkFBaUI7QUFDL0MsV0FBSyxxQkFBcUIsSUFBSTtBQUc5QixVQUFJLEtBQUssa0JBQWtCLE1BQU07QUFDN0IsY0FBTUMsVUFBUyxLQUFLLE9BQU87QUFDM0IsY0FBTSxVQUFVLEtBQUssUUFBUSxLQUFLLElBQUk7QUFDdEMsY0FBTSxnQkFBZ0IsS0FBSyxjQUFjLEtBQUssSUFBSTtBQUNsRCxjQUFNLGdCQUFnQixLQUFLLGNBQWMsS0FBSyxJQUFJO0FBQ2xELGNBQU0sY0FBYyxLQUFLLFlBQVksS0FBSyxJQUFJO0FBQzlDLFFBQUFBLFFBQU8saUJBQWlCLFNBQVMsT0FBTztBQUN4QyxRQUFBQSxRQUFPLGlCQUFpQixlQUFlLGFBQWE7QUFDcEQsUUFBQUEsUUFBTyxpQkFBaUIsZUFBZSxhQUFhO0FBQ3BELFFBQUFBLFFBQU8saUJBQWlCLGFBQWEsV0FBVztBQUNoRCxhQUFLLHVCQUF1QixLQUFLLE1BQU07QUFDbkMsVUFBQUEsUUFBTyxvQkFBb0IsU0FBUyxPQUFPO0FBQzNDLFVBQUFBLFFBQU8sb0JBQW9CLGVBQWUsYUFBYTtBQUN2RCxVQUFBQSxRQUFPLG9CQUFvQixlQUFlLGFBQWE7QUFDdkQsVUFBQUEsUUFBTyxvQkFBb0IsYUFBYSxXQUFXO0FBQUEsUUFDdkQsQ0FBQztBQUFBLE1BQ0w7QUFDQSxXQUFLLGtCQUFrQjtBQUFBLElBQzNCO0FBQUEsSUFDQSx1QkFBdUIsYUFBYTtBQUNoQyxVQUFJLENBQUMsS0FBSztBQUNOO0FBQ0osWUFBTUMsUUFBTyxhQUFLLEtBQUssS0FBSyxTQUFTLFdBQVc7QUFDaEQsV0FBSyxnQkFBZ0Isb0JBQW9CLENBQUMsR0FBSyxHQUFLLENBQUNBLFFBQU8sQ0FBQyxDQUFDO0FBQzlELFVBQUksS0FBSyx3QkFBd0IsR0FBRztBQUNoQyxhQUFLLGdCQUFnQixhQUFhO0FBQ2xDLGFBQUssZ0JBQWdCLEtBQUssb0JBQW9CLElBQUlBLFFBQU87QUFDekQsYUFBSyxnQkFBZ0IsTUFBTSxLQUFLLGVBQWU7QUFBQSxNQUNuRDtBQUFBLElBQ0o7QUFBQSxJQUNBLHFCQUFxQixTQUFTO0FBQzFCLFVBQUksS0FBSyxXQUFXO0FBQ2hCO0FBQ0osV0FBSyxVQUFVO0FBQ2YsVUFBSSxDQUFDLEtBQUs7QUFDTjtBQUNKLFVBQUksU0FBUztBQUNULGFBQUssYUFBYSxnQkFBZ0IsS0FBSyxlQUFlO0FBQUEsTUFDMUQsT0FDSztBQUNELGFBQUssYUFBYSxnQkFBZ0IsS0FBSyxlQUFlO0FBQ3RELGFBQUssYUFBYSxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUFBLE1BQ3JDO0FBQUEsSUFDSjtBQUFBLElBQ0EsU0FBUztBQUdMLFVBQUksS0FBSyxPQUFPLE1BQ1osS0FBSyxnQkFDTCxLQUFLLFVBQ0wsS0FBSyxPQUFPLEdBQUcsUUFBUSxhQUFhLENBQUMsRUFBRSxlQUFlLFVBQ3RELEtBQUssT0FBTyxHQUFHLFFBQVEsYUFBYSxDQUFDLEVBQUUsU0FBUztBQUVoRCxjQUFNLElBQUksS0FBSyxPQUFPLEdBQUcsUUFBUSxhQUFhLENBQUMsRUFBRSxRQUFRO0FBRXpELGFBQUssV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3hCLGFBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDekIsYUFBSyxXQUFXLENBQUMsSUFBSTtBQUNyQixhQUFLLGtDQUFrQztBQUFBLE1BQzNDLFdBQ1MsS0FBSyxPQUFPLE1BQU0sS0FBSyxVQUFVLEtBQUssT0FBTyxlQUFlO0FBRWpFLGFBQUssV0FBVyxDQUFDLElBQUk7QUFDckIsYUFBSyxXQUFXLENBQUMsSUFBSTtBQUNyQixhQUFLLFdBQVcsQ0FBQyxJQUFJO0FBQ3JCLGFBQUssMEJBQTBCO0FBQUEsTUFDbkMsV0FDUyxLQUFLLGdCQUFnQjtBQUcxQixhQUFLLGdCQUFnQjtBQUFBLE1BQ3pCO0FBQ0EsV0FBSyxRQUFRLE1BQU0sS0FBSyxPQUFPLElBQUksS0FBSztBQUN4QyxVQUFJLEtBQUssY0FBYztBQUNuQixZQUFJLEtBQUssbUJBQ0osS0FBSyxVQUFVLENBQUMsS0FBSyxLQUFLLEtBQUssVUFBVSxDQUFDLEtBQUssS0FBSyxLQUFLLFVBQVUsQ0FBQyxLQUFLLElBQUk7QUFDOUUsZUFBSyxxQkFBcUIsSUFBSTtBQUM5QixlQUFLLGFBQWEsb0JBQW9CLEtBQUssU0FBUztBQUNwRCxlQUFLLHVCQUF1QixLQUFLLFNBQVM7QUFBQSxRQUM5QyxPQUNLO0FBQ0QsZUFBSyxxQkFBcUIsS0FBSztBQUFBLFFBQ25DO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQTtBQUFBLElBRUEsT0FBTyxPQUFPLGVBQWU7QUFDekIsWUFBTSxTQUFTLEtBQUs7QUFDcEIsVUFBSSxRQUFRO0FBQ1IsY0FBTSxlQUFlLEtBQUs7QUFDMUIsWUFBSTtBQUNBLHVCQUFhLEtBQUssRUFBRSxPQUFPLFFBQVEsTUFBTSxpQkFBaUIsTUFBUztBQUN2RSxhQUFLLGFBQWEsS0FBSyxFQUFFLE9BQU8sUUFBUSxNQUFNLGlCQUFpQixNQUFTO0FBQUEsTUFDNUU7QUFBQSxJQUNKO0FBQUEsSUFDQSxlQUFlLFFBQVEsZUFBZSxTQUFTLGVBQWU7QUFFMUQsWUFBTSxNQUFNLENBQUMsS0FBSyxtQkFBbUIsT0FBTyxXQUFXLElBQUksT0FBTyxRQUFRLENBQUMsSUFBSTtBQUMvRSxVQUFJLEtBQUs7QUFDTCxZQUFJLENBQUMsS0FBSyxrQkFBa0IsQ0FBQyxLQUFLLGVBQWUsT0FBTyxHQUFHLEdBQUc7QUFFMUQsY0FBSSxLQUFLLGdCQUFnQjtBQUNyQixpQkFBSyxPQUFPLGFBQWEsYUFBYTtBQUFBLFVBQzFDO0FBRUEsZUFBSyxpQkFBaUI7QUFDdEIsZUFBSyx1QkFBdUIsS0FBSyxlQUFlLGFBQWEsWUFBWTtBQUN6RSxjQUFJLEtBQUs7QUFDTCxpQkFBSyxPQUFPLE9BQU8sTUFBTSxTQUFTO0FBQ3RDLGVBQUssT0FBTyxXQUFXLGFBQWE7QUFBQSxRQUN4QztBQUFBLE1BQ0osV0FDUyxLQUFLLGdCQUFnQjtBQUUxQixhQUFLLE9BQU8sYUFBYSxhQUFhO0FBQ3RDLGFBQUssaUJBQWlCO0FBQ3RCLGFBQUssdUJBQXVCO0FBQzVCLFlBQUksS0FBSztBQUNMLGVBQUssT0FBTyxPQUFPLE1BQU0sU0FBUztBQUFBLE1BQzFDO0FBQ0EsVUFBSSxLQUFLLGdCQUFnQjtBQUVyQixZQUFJLEtBQUssWUFBWSxLQUFLLGFBQWE7QUFDbkMsZUFBSyxPQUFPLEtBQUssVUFBVSxXQUFXLFFBQVEsYUFBYTtBQUFBLFFBQy9EO0FBRUEsWUFBSTtBQUNBLGVBQUssT0FBTyxXQUFXLGFBQWE7QUFBQSxNQUM1QyxXQUNTLEtBQUssaUJBQWlCO0FBRTNCLFlBQUksS0FBSyxZQUFZLEtBQUssYUFBYTtBQUNuQyxXQUFDLEtBQUssVUFBVSxLQUFLLGNBQWMsU0FBUyxLQUFLLGNBQWMsTUFBTSxPQUFPLGVBQWUsTUFBTSxpQkFBaUIsTUFBUztBQUFBLFFBQy9IO0FBRUEsWUFBSTtBQUNBLGVBQUssY0FBYyxRQUFRLE9BQU8sZUFBZSxNQUFNLGlCQUFpQixNQUFTO0FBQUEsTUFDekY7QUFFQSxVQUFJLEtBQUs7QUFDTCxZQUFJLEtBQUssZ0JBQWdCO0FBQ3JCLGVBQUssZUFBZSwyQkFBMkJGLFVBQVMsS0FBSyxTQUFTO0FBQUEsUUFDMUUsT0FDSztBQUNELFVBQUFBLFNBQVEsSUFBSSxLQUFLLFNBQVM7QUFBQSxRQUM5QjtBQUNBLFlBQUksQ0FBQyxhQUFLLE9BQU8sS0FBSyx3QkFBd0JBLFFBQU8sR0FBRztBQUNwRCxlQUFLLE9BQU8sVUFBVSxhQUFhO0FBQ25DLGVBQUssdUJBQXVCLElBQUlBLFFBQU87QUFBQSxRQUMzQztBQUFBLE1BQ0osV0FDUyxLQUFLLGlCQUFpQjtBQUMzQixZQUFJLENBQUMsYUFBSyxPQUFPLEtBQUssd0JBQXdCLEtBQUssU0FBUyxHQUFHO0FBQzNELGVBQUssY0FBYyxPQUFPLE9BQU8sZUFBZSxNQUFNLGlCQUFpQixNQUFTO0FBQ2hGLGVBQUssdUJBQXVCLElBQUksS0FBSyxTQUFTO0FBQUEsUUFDbEQ7QUFBQSxNQUNKLE9BQ0s7QUFDRCxhQUFLLHVCQUF1QixJQUFJLEtBQUssU0FBUztBQUFBLE1BQ2xEO0FBQ0EsV0FBSyxjQUFjLEtBQUs7QUFBQSxJQUM1QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsY0FBYyxHQUFHO0FBQ2IsVUFBSSxDQUFDO0FBQ0QsZ0JBQVEsTUFBTSw4Q0FBOEM7QUFFaEUsWUFBTSxXQUFXLEtBQUssU0FBUyxLQUFLLElBQUk7QUFDeEMsUUFBRSxpQkFBaUIsVUFBVSxRQUFRO0FBQ3JDLFlBQU0sZ0JBQWdCLEtBQUssY0FBYyxLQUFLLElBQUk7QUFDbEQsUUFBRSxpQkFBaUIsZUFBZSxhQUFhO0FBQy9DLFlBQU0sY0FBYyxLQUFLLFlBQVksS0FBSyxJQUFJO0FBQzlDLFFBQUUsaUJBQWlCLGFBQWEsV0FBVztBQUMzQyxXQUFLLHVCQUF1QixLQUFLLE1BQU07QUFDbkMsWUFBSSxDQUFDLEtBQUssT0FBTztBQUNiO0FBQ0osVUFBRSxvQkFBb0IsVUFBVSxRQUFRO0FBQ3hDLFVBQUUsb0JBQW9CLGVBQWUsYUFBYTtBQUNsRCxVQUFFLG9CQUFvQixhQUFhLFdBQVc7QUFBQSxNQUNsRCxDQUFDO0FBRUQsV0FBSyxrQkFBa0I7QUFBQSxJQUMzQjtBQUFBLElBQ0EsZUFBZTtBQUNYLFdBQUssT0FBTyxpQkFBaUIsT0FBTyxLQUFLLHVCQUF1QjtBQUNoRSxXQUFLLE9BQU8sU0FBUyxPQUFPLEtBQUssaUJBQWlCO0FBQ2xELFdBQUsscUJBQXFCLEtBQUs7QUFDL0IsVUFBSSxLQUFLO0FBQ0wsYUFBSyxPQUFPLGFBQWEsSUFBSTtBQUNqQyxVQUFJLEtBQUs7QUFDTCxhQUFLLGdCQUFnQixNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUV4QyxpQkFBV0csTUFBSyxLQUFLO0FBQ2pCLFFBQUFBLEdBQUU7QUFDTixXQUFLLHVCQUF1QixTQUFTO0FBQUEsSUFDekM7QUFBQSxJQUNBLFlBQVk7QUFDUixXQUFLLGdCQUFnQixRQUFRO0FBQUEsSUFDakM7QUFBQTtBQUFBLElBRUEsU0FBUyxHQUFHO0FBQ1IsVUFBSSxFQUFFLFlBQVksY0FBYyxLQUFLO0FBQ2pDO0FBQ0osV0FBSyxRQUFRLEdBQUcsRUFBRSxPQUFPLElBQUk7QUFBQSxJQUNqQztBQUFBO0FBQUEsSUFFQSxjQUFjLEdBQUc7QUFDYixXQUFLLGVBQWU7QUFDcEIsVUFBSSxFQUFFLFlBQVksY0FBYyxLQUFLLFlBQVk7QUFDN0MsYUFBSyxVQUFVO0FBQ2YsYUFBSyxRQUFRLEdBQUcsRUFBRSxLQUFLO0FBQUEsTUFDM0I7QUFBQSxJQUNKO0FBQUE7QUFBQSxJQUVBLFlBQVksR0FBRztBQUNYLFdBQUssZUFBZTtBQUNwQixVQUFJLEVBQUUsWUFBWSxjQUFjLEtBQUssWUFBWTtBQUM3QyxhQUFLLFVBQVU7QUFDZixhQUFLLFFBQVEsR0FBRyxFQUFFLEtBQUs7QUFBQSxNQUMzQjtBQUFBLElBQ0o7QUFBQTtBQUFBLElBRUEsY0FBYyxHQUFHO0FBRWIsVUFBSSxDQUFDLEVBQUU7QUFDSDtBQUNKLFdBQUssZUFBZSxDQUFDO0FBQ3JCLFdBQUssUUFBUSxHQUFHLElBQUk7QUFBQSxJQUN4QjtBQUFBO0FBQUEsSUFFQSxRQUFRLEdBQUc7QUFDUCxXQUFLLGVBQWUsQ0FBQztBQUNyQixXQUFLLFFBQVEsR0FBRyxNQUFNLElBQUk7QUFBQSxJQUM5QjtBQUFBO0FBQUEsSUFFQSxjQUFjLEdBQUc7QUFFYixVQUFJLENBQUMsRUFBRSxhQUFhLEVBQUUsV0FBVztBQUM3QjtBQUNKLFdBQUssZUFBZSxDQUFDO0FBQ3JCLFdBQUssVUFBVTtBQUNmLFdBQUssUUFBUSxDQUFDO0FBQUEsSUFDbEI7QUFBQTtBQUFBLElBRUEsWUFBWSxHQUFHO0FBRVgsVUFBSSxDQUFDLEVBQUUsYUFBYSxFQUFFLFdBQVc7QUFDN0I7QUFDSixXQUFLLGVBQWUsQ0FBQztBQUNyQixXQUFLLFVBQVU7QUFDZixXQUFLLFFBQVEsQ0FBQztBQUFBLElBQ2xCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLGVBQWUsR0FBRztBQUNkLFdBQUssZ0JBQWdCLENBQUMsSUFBSSxFQUFFO0FBQzVCLFdBQUssZ0JBQWdCLENBQUMsSUFBSSxFQUFFO0FBQzVCLFdBQUssZ0JBQWdCO0FBQUEsSUFDekI7QUFBQSxJQUNBLGtCQUFrQjtBQUNkLFlBQU0sU0FBUyxLQUFLLE9BQU8sT0FBTyxzQkFBc0I7QUFFeEQsWUFBTSxPQUFPLEtBQUssZ0JBQWdCLENBQUMsSUFBSSxPQUFPO0FBQzlDLFlBQU0sTUFBTSxLQUFLLGdCQUFnQixDQUFDLElBQUksT0FBTztBQUM3QyxXQUFLLFdBQVcsQ0FBQyxJQUFJLE9BQU8sSUFBSTtBQUNoQyxXQUFLLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJO0FBQ2hDLFdBQUssV0FBVyxDQUFDLElBQUk7QUFDckIsV0FBSyxrQ0FBa0M7QUFBQSxJQUMzQztBQUFBLElBQ0Esb0NBQW9DO0FBRWhDLG1CQUFLLGNBQWMsS0FBSyxZQUFZLEtBQUssWUFBWSxLQUFLLGlCQUFpQjtBQUMzRSxtQkFBSyxVQUFVLEtBQUssWUFBWSxLQUFLLFVBQVU7QUFDL0MsV0FBSywwQkFBMEI7QUFBQSxJQUNuQztBQUFBLElBQ0EsNEJBQTRCO0FBQ3hCLG1CQUFLLGNBQWMsS0FBSyxZQUFZLEtBQUssWUFBWSxLQUFLLE9BQU8sY0FBYztBQUMvRSxXQUFLLE9BQU8sb0JBQW9CLEtBQUssT0FBTztBQUFBLElBQ2hEO0FBQUEsSUFDQSxRQUFRLGVBQWUsUUFBUSxNQUFNLFVBQVUsT0FBTztBQUNsRCxZQUFNLFNBQVMsS0FBSyxlQUFlLElBQzdCLEtBQUssT0FBTyxNQUFNLFFBQVEsS0FBSyxTQUFTLEtBQUssWUFBWSxLQUFLLGNBQWMsSUFDNUUsS0FBSyxPQUFPLFFBQVEsUUFBUSxLQUFLLFNBQVMsS0FBSyxZQUFZLEtBQUssZ0JBQWdCLEtBQUssV0FBVztBQUN0RyxVQUFJLG9CQUFvQjtBQUN4QixVQUFJLGdCQUFnQjtBQUNwQixVQUFJLEtBQUssa0JBQWtCLFNBQVM7QUFDaEMsYUFBSyxlQUFlLG9CQUFvQixLQUFLLFNBQVM7QUFDdEQsNEJBQW9CLGFBQUssU0FBUyxLQUFLLE9BQU8sb0JBQW9CSCxRQUFPLEdBQUcsS0FBSyxTQUFTO0FBQzFGLHdCQUFnQixLQUFLLGtCQUFrQixrQkFBa0IsS0FBSyxFQUFFLENBQUM7QUFBQSxNQUNyRTtBQUNBLFVBQUksa0JBQWtCO0FBQ3RCLFVBQUksT0FBTyxXQUFXLEdBQUc7QUFDckIsY0FBTSxJQUFJLE9BQU8sVUFBVSxDQUFDO0FBQzVCLFlBQUkscUJBQXFCLEdBQUc7QUFFeEIsZUFBSyxVQUFVLElBQUksT0FBTyxVQUFVLENBQUMsQ0FBQztBQUFBLFFBQzFDLE9BQ0s7QUFDRCw0QkFBa0I7QUFBQSxRQUN0QjtBQUFBLE1BQ0osV0FDUyxvQkFBb0IsVUFBVTtBQUFBLE1BRXZDLE9BQ0s7QUFDRCxhQUFLLFVBQVUsS0FBSyxDQUFDO0FBQUEsTUFDekI7QUFDQSxVQUFJLG1CQUFtQixDQUFDLEtBQUssaUJBQWlCO0FBQzFDLGFBQUssY0FBYyxRQUFRLE9BQU8sZUFBZSxJQUFJO0FBQUEsTUFDekQsV0FDUyxDQUFDLG1CQUFtQixLQUFLLGlCQUFpQjtBQUMvQyxhQUFLLGNBQWMsVUFBVSxPQUFPLGVBQWUsSUFBSTtBQUFBLE1BQzNEO0FBQ0EsV0FBSyxrQkFBa0I7QUFDdkIsV0FBSyxlQUFlLFFBQVEsZUFBZSxTQUFTLGFBQWE7QUFDakUsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBdmJJLGdCQURFLFFBQ0ssWUFBVztBQUdsQjtBQUFBO0FBQUEsZ0JBSkUsUUFJSyxnQkFBZSxDQUFDLGVBQWU7QUFxYjFDLEVBQUFELGFBQVc7QUFBQSxJQUNQLFNBQVMsSUFBSSxDQUFDO0FBQUEsRUFDbEIsR0FBRyxPQUFPLFdBQVcsa0JBQWtCLE1BQU07QUFDN0MsRUFBQUEsYUFBVztBQUFBLElBQ1AsU0FBUyxPQUFPO0FBQUEsRUFDcEIsR0FBRyxPQUFPLFdBQVcsbUJBQW1CLE1BQU07QUFDOUMsRUFBQUEsYUFBVztBQUFBLElBQ1AsU0FBUyxLQUFLLENBQUMsS0FBSyxLQUFLLEtBQUssTUFBTSxHQUFHLEdBQUc7QUFBQSxFQUM5QyxHQUFHLE9BQU8sV0FBVyx3QkFBd0IsTUFBTTtBQUNuRCxFQUFBQSxhQUFXO0FBQUEsSUFDUCxTQUFTLE9BQU87QUFBQSxFQUNwQixHQUFHLE9BQU8sV0FBVyxnQkFBZ0IsTUFBTTtBQUMzQyxFQUFBQSxhQUFXO0FBQUEsSUFDUCxTQUFTLEtBQUssQ0FBQyxtQkFBbUIsUUFBUSxTQUFTLE1BQU0sR0FBRyxpQkFBaUI7QUFBQSxFQUNqRixHQUFHLE9BQU8sV0FBVyxjQUFjLE1BQU07QUFDekMsRUFBQUEsYUFBVztBQUFBLElBQ1AsU0FBUyxLQUFLLENBQUMsYUFBYSxPQUFPLEdBQUcsV0FBVztBQUFBLEVBQ3JELEdBQUcsT0FBTyxXQUFXLGVBQWUsTUFBTTtBQUMxQyxFQUFBQSxhQUFXO0FBQUEsSUFDUCxTQUFTLEtBQUssSUFBSTtBQUFBLEVBQ3RCLEdBQUcsT0FBTyxXQUFXLGVBQWUsTUFBTTtBQUMxQyxFQUFBQSxhQUFXO0FBQUEsSUFDUCxTQUFTLEtBQUssS0FBSztBQUFBLEVBQ3ZCLEdBQUcsT0FBTyxXQUFXLG1CQUFtQixNQUFNOzs7QUM3ZjlDLE1BQUlLLGVBQTBDLFNBQVUsWUFBWSxRQUFRLEtBQUssTUFBTTtBQUNuRixRQUFJLElBQUksVUFBVSxRQUFRLElBQUksSUFBSSxJQUFJLFNBQVMsU0FBUyxPQUFPLE9BQU8sT0FBTyx5QkFBeUIsUUFBUSxHQUFHLElBQUksTUFBTTtBQUMzSCxRQUFJLE9BQU8sWUFBWSxZQUFZLE9BQU8sUUFBUSxhQUFhO0FBQVksVUFBSSxRQUFRLFNBQVMsWUFBWSxRQUFRLEtBQUssSUFBSTtBQUFBO0FBQ3hILGVBQVMsSUFBSSxXQUFXLFNBQVMsR0FBRyxLQUFLLEdBQUc7QUFBSyxZQUFJLElBQUksV0FBVyxDQUFDO0FBQUcsZUFBSyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsR0FBRyxNQUFNO0FBQ2hKLFdBQU8sSUFBSSxLQUFLLEtBQUssT0FBTyxlQUFlLFFBQVEsS0FBSyxDQUFDLEdBQUc7QUFBQSxFQUNoRTtBQVlBLE1BQU0sY0FBTixjQUEwQixVQUFVO0FBQUE7QUFBQSxJQUdoQyxNQUFNO0FBQUEsSUFDTixRQUFRO0FBQ0osVUFBSSxTQUFTLElBQUksYUFBYSxDQUFDO0FBQy9CLG9CQUFNLGVBQWUsUUFBUSxLQUFLLE9BQU8sY0FBYztBQUN2RCxjQUFRLElBQUksaUJBQWlCLEtBQUssT0FBTyxJQUFJO0FBQzdDLGNBQVEsSUFBSSxpQkFBaUIsS0FBSyxLQUFLLElBQUk7QUFDM0MsY0FBUSxJQUFJLGdCQUFpQixNQUFNO0FBQ25DLGNBQVEsSUFBSSxtQkFBb0IsS0FBSyxPQUFPLGNBQWM7QUFDMUQsY0FBUSxJQUFJLG1CQUFvQixLQUFLLE9BQU8sY0FBYztBQUFBLElBQzlEO0FBQUEsRUFDSjtBQVpJLGdCQURFLGFBQ0ssWUFBVztBQWF0QixFQUFBQSxhQUFXO0FBQUEsSUFDUCxTQUFTLE9BQU87QUFBQSxFQUNwQixHQUFHLFlBQVksV0FBVyxPQUFPLE1BQU07OztBQzdCdkMsV0FBUyxpQkFBaUIsS0FBSyxHQUFHLEdBQUcsR0FBRztBQUNwQyxVQUFNLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUN6QixVQUFNLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUN6QixVQUFNLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUN6QixVQUFNLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUN6QixVQUFNLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUN6QixVQUFNLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQztBQUN6QixRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDbEMsUUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLO0FBQ2xDLFFBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSztBQUNsQyxRQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFBQSxFQUN0QztBQU9BLE1BQU0sd0JBQU4sY0FBb0MsVUFBVTtBQUFBLElBRzFDLFFBQVE7QUFDSixXQUFLLFlBQVk7QUFDakIsV0FBSyxZQUFZO0FBQ2pCLFdBQUssY0FBYztBQUNuQixXQUFLLGNBQWM7QUFBQSxJQUN2QjtBQUFBLElBQ0EsT0FBTztBQUVILFdBQUssb0JBQW9CLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNwQyxXQUFLLG9CQUFvQixPQUFPLGNBQWMsT0FBTyxhQUFhLElBQUk7QUFDdEUsV0FBSyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDdkIsYUFBTyxpQkFBaUIscUJBQXFCLFNBQVUsR0FBRztBQUN0RCxZQUFJLFFBQVEsRUFBRSxTQUFTO0FBQ3ZCLFlBQUksT0FBTyxFQUFFLFFBQVE7QUFDckIsWUFBSSxRQUFRLEVBQUUsU0FBUztBQUN2QixjQUFNLFFBQVEsS0FBSyxLQUFLO0FBQ3hCLHlCQUFpQixLQUFLLG1CQUFtQixPQUFPLE9BQU8sUUFBUSxPQUFPLENBQUMsUUFBUSxLQUFLO0FBQUEsTUFDeEYsRUFBRSxLQUFLLElBQUksQ0FBQztBQUNaLGFBQU8saUJBQWlCLHFCQUFxQixTQUFVLEdBQUc7QUFDdEQsYUFBSyxvQkFBb0IsT0FBTyxlQUFlO0FBQUEsTUFDbkQsRUFBRSxLQUFLLElBQUksR0FBRyxLQUFLO0FBQUEsSUFDdkI7QUFBQSxJQUNBLFNBQVM7QUFFTCxVQUFJLEtBQUssT0FBTztBQUNaO0FBQ0osV0FBSyxPQUFPLG9CQUFvQixLQUFLLE9BQU87QUFDNUMsV0FBSyxPQUFPLGVBQWU7QUFDM0IsVUFBSSxLQUFLLHFCQUFxQixHQUFHO0FBQzdCLGFBQUssT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEtBQUssaUJBQWlCO0FBQUEsTUFDckU7QUFDQSxXQUFLLE9BQU8sT0FBTyxDQUFDLENBQUMsS0FBSyxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQzFELFdBQUssT0FBTyxPQUFPLEtBQUssaUJBQWlCO0FBQ3pDLFdBQUssT0FBTyxVQUFVLEtBQUssT0FBTztBQUFBLElBQ3RDO0FBQUEsRUFDSjtBQXJDSSxnQkFERSx1QkFDSyxZQUFXO0FBQ2xCLGdCQUZFLHVCQUVLLGNBQWEsQ0FBQzs7O0FDZHpCLE1BQU0sZUFBTixjQUEyQixVQUFVO0FBQUEsSUFHakMsT0FBTztBQUNILFdBQUssYUFBYTtBQUFBLElBQ3RCO0FBQUEsSUFDQSxRQUFRO0FBQ0osV0FBSyxNQUFNLEtBQUssT0FBTyxhQUFhLFdBQVc7QUFBQSxJQUNuRDtBQUFBLElBQ0EsU0FBUztBQUNMLFlBQU0sV0FBVyxLQUFLLElBQUksY0FBYztBQUN4QyxVQUFJLGVBQWU7QUFDbkIsZUFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsRUFBRSxHQUFHO0FBQ3RDLGNBQU0sSUFBSSxTQUFTLENBQUMsRUFBRTtBQUN0QixjQUFNLFNBQVMsRUFBRSxhQUFhLGVBQWU7QUFDN0MsWUFBSSxRQUFRO0FBQ1IsY0FBSSxDQUFDLE9BQU8sT0FBTyxLQUFLLFVBQVUsR0FBRztBQUNqQyxtQkFBTyxRQUFRLEdBQUcsSUFBSTtBQUN0QixtQkFBTyxRQUFRLEdBQUcsSUFBSTtBQUFBLFVBQzFCO0FBQ0EseUJBQWU7QUFDZjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQ0EsVUFBSSxDQUFDLGNBQWM7QUFDZixZQUFJLEtBQUs7QUFDTCxlQUFLLFdBQVcsVUFBVSxLQUFLLFdBQVcsUUFBUSxJQUFJO0FBQzFELGFBQUssYUFBYTtBQUNsQjtBQUFBLE1BQ0osT0FDSztBQUNELGFBQUssYUFBYTtBQUFBLE1BQ3RCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFqQ0ksZ0JBREUsY0FDSyxZQUFXO0FBQ2xCLGdCQUZFLGNBRUssY0FBYSxDQUFDOzs7QUNKekIsTUFBTSxpQkFBTixjQUE2QixVQUFVO0FBQUEsSUFNbkMsUUFBUTtBQUNKLFdBQUsseUJBQXlCLEtBQUssa0JBQWtCLEtBQUssSUFBSTtBQUFBLElBQ2xFO0FBQUEsSUFDQSxhQUFhO0FBQ1QsV0FBSyxPQUFPLGlCQUFpQixJQUFJLEtBQUssc0JBQXNCO0FBQUEsSUFDaEU7QUFBQSxJQUNBLGVBQWU7QUFDWCxXQUFLLE9BQU8saUJBQWlCLE9BQU8sS0FBSyxzQkFBc0I7QUFBQSxJQUNuRTtBQUFBLElBQ0Esb0JBQW9CO0FBQ2hCLFdBQUssT0FBTyxHQUFHLFVBQVUsaUJBQWlCLEtBQUs7QUFBQSxJQUNuRDtBQUFBLEVBQ0o7QUFqQkksZ0JBREUsZ0JBQ0ssWUFBVztBQUNsQixnQkFGRSxnQkFFSyxjQUFhO0FBQUE7QUFBQSxJQUVoQixnQkFBZ0IsRUFBRSxNQUFNLEtBQUssT0FBTyxTQUFTLElBQUk7QUFBQSxFQUNyRDs7O0FDVkosTUFBTSxpQkFBaUI7QUFBQSxJQUNuQjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0o7QUFDQSxNQUFNLGlCQUFpQixJQUFJLGFBQWEsQ0FBQztBQUN6QyxNQUFNLGNBQWMsSUFBSSxhQUFhLENBQUM7QUF3QnRDLE1BQU0sZUFBTixjQUEyQixVQUFVO0FBQUEsSUFnQmpDLE9BQU87QUFDSCxXQUFLLGFBQWEsQ0FBQyxRQUFRLE9BQU8sRUFBRSxLQUFLLFVBQVU7QUFBQSxJQUN2RDtBQUFBLElBQ0EsU0FBUyxDQUFDO0FBQUEsSUFDVixVQUFVO0FBQUE7QUFBQSxJQUVWLFVBQVU7QUFBQSxJQUNWLGtCQUFrQjtBQUFBLElBQ2xCLFFBQVE7QUFDSixVQUFJLEVBQUUsWUFBWSxTQUFTO0FBQ3ZCLGdCQUFRLEtBQUssb0RBQW9EO0FBQ2pFLGFBQUssU0FBUztBQUNkO0FBQUEsTUFDSjtBQUNBLFVBQUksS0FBSyxVQUFVO0FBQ2YsWUFBSSxPQUFPLEtBQUs7QUFDaEIsWUFBSSxXQUFXLEtBQUs7QUFFcEIsYUFBSyxPQUFPLGVBQWUsQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLFdBQVcsU0FBUyxDQUFDLENBQUM7QUFHbkUsaUJBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLEVBQUUsR0FBRztBQUN0QyxjQUFJLFFBQVEsS0FBSyxPQUFPLFdBQVcsU0FBUyxDQUFDLENBQUM7QUFFOUMsZUFBSyxPQUFPLE1BQU0sSUFBSSxJQUFJO0FBQUEsUUFDOUI7QUFFQTtBQUFBLE1BQ0o7QUFFQSxZQUFNLGVBQWUsS0FBSyxPQUFPLE1BQU0sV0FBVyxlQUFlLFFBQVEsS0FBSyxPQUFPLFFBQVEsZUFBZSxNQUFNO0FBQ2xILGVBQVMsSUFBSSxHQUFHLElBQUksZUFBZSxRQUFRLEVBQUUsR0FBRztBQUM1QyxZQUFJLFFBQVEsYUFBYSxDQUFDO0FBQzFCLGNBQU0sYUFBYSxlQUFlO0FBQUEsVUFDOUIsTUFBTSxLQUFLO0FBQUEsVUFDWCxVQUFVLEtBQUs7QUFBQSxRQUNuQixDQUFDO0FBQ0QsYUFBSyxPQUFPLGVBQWUsQ0FBQyxDQUFDLElBQUk7QUFBQSxNQUNyQztBQUFBLElBQ0o7QUFBQSxJQUNBLE9BQU8sSUFBSTtBQUNQLFVBQUksQ0FBQyxLQUFLLFNBQVM7QUFDZixZQUFJLEtBQUssT0FBTztBQUNaLGVBQUssY0FBYyxLQUFLLE9BQU8sR0FBRyxPQUFPO0FBQUEsTUFDakQ7QUFDQSxVQUFJLENBQUMsS0FBSztBQUNOO0FBQ0osV0FBSyxVQUFVO0FBQ2YsVUFBSSxLQUFLLFdBQVcsS0FBSyxRQUFRLGNBQWM7QUFDM0MsaUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLGFBQWEsUUFBUSxFQUFFLEdBQUc7QUFDdkQsZ0JBQU0sY0FBYyxLQUFLLFFBQVEsYUFBYSxDQUFDO0FBQy9DLGNBQUksQ0FBQyxlQUNELENBQUMsWUFBWSxRQUNiLFlBQVksY0FBYyxLQUFLO0FBQy9CO0FBQ0osZUFBSyxVQUFVO0FBQ2YsZ0JBQU0sYUFBYSxZQUFZLEtBQUssSUFBSSxPQUFPO0FBQy9DLGNBQUksZUFBZSxNQUFNO0FBQ3JCLGtCQUFNLElBQUksS0FBSyxPQUFPLEdBQUcsTUFBTSxhQUFhLFlBQVksS0FBSyxPQUFPLEdBQUcscUJBQXFCO0FBQzVGLGdCQUFJLEdBQUc7QUFDSCx1Q0FBeUIsS0FBSyxRQUFRLEVBQUUsU0FBUztBQUFBLFlBQ3JEO0FBQUEsVUFDSjtBQUNBLGVBQUssT0FBTyxpQkFBaUIsV0FBVztBQUN4Qyx1QkFBSyxVQUFVLGFBQWEsV0FBVztBQUN2QyxlQUFLLE9BQU8sb0JBQW9CLGNBQWM7QUFDOUMsbUJBQVMsSUFBSSxHQUFHLElBQUksZUFBZSxRQUFRLEVBQUUsR0FBRztBQUM1QyxrQkFBTSxZQUFZLGVBQWUsQ0FBQztBQUNsQyxrQkFBTSxRQUFRLEtBQUssT0FBTyxTQUFTO0FBQ25DLGdCQUFJLFVBQVU7QUFDVjtBQUNKLGdCQUFJLFlBQVk7QUFDaEIsa0JBQU0sYUFBYSxZQUFZLEtBQUssSUFBSSxTQUFTO0FBQ2pELGdCQUFJLGVBQWUsTUFBTTtBQUNyQiwwQkFBWSxLQUFLLE9BQU8sR0FBRyxNQUFNLGFBQWEsWUFBWSxLQUFLLE9BQU8sR0FBRyxxQkFBcUI7QUFBQSxZQUNsRztBQUNBLGdCQUFJLGNBQWMsTUFBTTtBQUNwQixrQkFBSSxLQUFLLFVBQVU7QUFDZixzQkFBTSx5QkFBeUI7QUFDL0Isc0JBQU0sVUFBVTtBQUFBLGtCQUNaLFVBQVUsVUFBVSxTQUFTLElBQUksZUFBZSxDQUFDO0FBQUEsa0JBQ2pELFVBQVUsVUFBVSxTQUFTLElBQUksZUFBZSxDQUFDO0FBQUEsa0JBQ2pELFVBQVUsVUFBVSxTQUFTLElBQUksZUFBZSxDQUFDO0FBQUEsZ0JBQ3JELENBQUM7QUFDRCxzQkFBTSxPQUFPLFdBQVc7QUFDeEIsc0JBQU0sYUFBYTtBQUFBLGtCQUNmLFVBQVUsVUFBVSxZQUFZO0FBQUEsa0JBQ2hDLFVBQVUsVUFBVSxZQUFZO0FBQUEsa0JBQ2hDLFVBQVUsVUFBVSxZQUFZO0FBQUEsa0JBQ2hDLFVBQVUsVUFBVSxZQUFZO0FBQUEsZ0JBQ3BDLENBQUM7QUFBQSxjQUNMLE9BQ0s7QUFDRCx5Q0FBeUIsT0FBTyxVQUFVLFNBQVM7QUFFbkQsc0JBQU0sSUFBSSxVQUFVLFVBQVU7QUFDOUIsc0JBQU0sZ0JBQWdCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUFBLGNBQ25DO0FBQUEsWUFDSjtBQUFBLFVBQ0o7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUNBLFVBQUksQ0FBQyxLQUFLLFdBQVcsS0FBSyxpQkFBaUI7QUFDdkMsYUFBSyxrQkFBa0I7QUFDdkIsWUFBSSxLQUFLLCtCQUErQjtBQUNwQyxlQUFLLGtCQUFrQixLQUFLO0FBQUEsUUFDaEM7QUFDQSxZQUFJLEtBQUssd0JBQXdCO0FBQzdCLGVBQUssdUJBQXVCLFNBQVM7QUFDckMsZUFBSyxrQkFBa0IsTUFBTSxLQUFLLHNCQUFzQjtBQUFBLFFBQzVEO0FBQUEsTUFDSixXQUNTLEtBQUssV0FBVyxDQUFDLEtBQUssaUJBQWlCO0FBQzVDLGFBQUssa0JBQWtCO0FBQ3ZCLFlBQUksS0FBSywrQkFBK0I7QUFDcEMsZUFBSyxrQkFBa0IsSUFBSTtBQUFBLFFBQy9CO0FBQ0EsWUFBSSxLQUFLLHdCQUF3QjtBQUM3QixlQUFLLHVCQUF1QixTQUFTO0FBQ3JDLGVBQUssa0JBQWtCLE9BQU8sS0FBSyxzQkFBc0I7QUFBQSxRQUM3RDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsSUFDQSxrQkFBa0IsUUFBUSxRQUFRO0FBQzlCLGVBQVMsVUFBVSxLQUFLO0FBQ3hCLFlBQU0sV0FBVyxPQUFPO0FBQ3hCLGlCQUFXLEtBQUssVUFBVTtBQUN0QixVQUFFLFNBQVM7QUFDWCxhQUFLLGtCQUFrQixRQUFRLENBQUM7QUFBQSxNQUNwQztBQUFBLElBQ0o7QUFBQSxJQUNBLGFBQWE7QUFDVCxZQUFNLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUM1QixvQkFBTSxlQUFlLGFBQWEsS0FBSyxPQUFPLGtCQUFrQixFQUFFLGNBQWM7QUFDaEYsWUFBTSxjQUFjLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDNUIsb0JBQU0sZUFBZSxhQUFhLEtBQUssT0FBTyxXQUFXLEVBQUUsY0FBYztBQUN6RSxhQUFPLGFBQUssUUFBUSxhQUFhLFdBQVcsSUFBSTtBQUFBLElBQ3BEO0FBQUEsSUFDQSxjQUFjLEdBQUc7QUFDYixXQUFLLFVBQVU7QUFBQSxJQUNuQjtBQUFBLEVBQ0o7QUE1SkksZ0JBREUsY0FDSyxZQUFXO0FBQ2xCLGdCQUZFLGNBRUssY0FBYTtBQUFBO0FBQUEsSUFFaEIsWUFBWSxFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsUUFBUSxRQUFRLENBQUMsUUFBUSxPQUFPLEVBQUU7QUFBQTtBQUFBLElBRTFFLFdBQVcsRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTLEtBQUs7QUFBQTtBQUFBLElBRTVDLGVBQWUsRUFBRSxNQUFNLEtBQUssVUFBVSxTQUFTLEtBQUs7QUFBQTtBQUFBLElBRXBELFVBQVUsRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTLEtBQUs7QUFBQTtBQUFBLElBRTNDLCtCQUErQixFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsS0FBSztBQUFBO0FBQUEsSUFFaEUsd0JBQXdCLEVBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxFQUNoRDs7O0FDckVKLHNCQUFPO0FBUVAsTUFBTSxzQkFBTixjQUFrQyxVQUFVO0FBQUEsSUFNeEMsT0FBTztBQUNILFdBQUssU0FBUyxJQUFJLGFBQWEsQ0FBQztBQUNoQyxXQUFLLE1BQU0sSUFBSSxhQUFhLENBQUM7QUFDN0IsV0FBSyxLQUFLLElBQUksYUFBYSxDQUFDO0FBQUEsSUFDaEM7QUFBQSxJQUNBLFNBQVM7QUFDTCxVQUFJLENBQUMsS0FBSztBQUNOO0FBQ0osV0FBSyxPQUFPLG9CQUFvQixLQUFLLE1BQU07QUFDM0MsV0FBSyxPQUFPLFdBQVcsS0FBSyxHQUFHO0FBQy9CLFdBQUssT0FBTyxNQUFNLEtBQUssRUFBRTtBQUN6QixhQUFPLElBQUksS0FBSyxPQUFPLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLENBQUM7QUFDekQsYUFBTyxZQUFZLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQUEsSUFDaEc7QUFBQSxFQUNKO0FBbkJJLGdCQURFLHFCQUNLLFlBQVc7QUFDbEIsZ0JBRkUscUJBRUssY0FBYTtBQUFBO0FBQUEsSUFFaEIsU0FBUyxFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsS0FBSztBQUFBLEVBQzlDOzs7QUNiSixNQUFBQyxpQkFBTztBQVlQLE1BQU0sb0JBQU4sY0FBZ0MsVUFBVTtBQUFBLElBY3RDLFFBQVE7QUFDSixXQUFLLFFBQVEsSUFBSSxLQUFLO0FBQUEsUUFDbEIsS0FBSyxDQUFDLEtBQUssR0FBRztBQUFBLFFBQ2QsTUFBTSxLQUFLO0FBQUEsUUFDWCxRQUFRLEtBQUs7QUFBQSxRQUNiLFVBQVUsS0FBSztBQUFBLE1BQ25CLENBQUM7QUFDRCxXQUFLLG9CQUFvQjtBQUN6QixXQUFLLFNBQVMsSUFBSSxhQUFhLENBQUM7QUFDaEMsV0FBSyxhQUFhLElBQUksYUFBYSxDQUFDO0FBQ3BDLFVBQUksS0FBSyxXQUFXLEtBQUssVUFBVTtBQUMvQixhQUFLLGVBQWU7QUFDcEIsYUFBSyxLQUFLO0FBQUEsTUFDZDtBQUFBLElBQ0o7QUFBQSxJQUNBLFNBQVM7QUFDTCxVQUFJLENBQUMsS0FBSyxXQUFXLENBQUMsS0FBSztBQUN2QjtBQUNKLFdBQUssT0FBTyxvQkFBb0IsS0FBSyxNQUFNO0FBSzNDLFVBQUksS0FBSyxJQUFJLEtBQUssV0FBVyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxJQUFJLFFBQ2hELEtBQUssSUFBSSxLQUFLLFdBQVcsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsSUFBSSxRQUNoRCxLQUFLLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLElBQUksTUFBTztBQUN2RCxhQUFLLGVBQWU7QUFBQSxNQUN4QjtBQUFBLElBQ0o7QUFBQSxJQUNBLGlCQUFpQjtBQUNiLFdBQUssTUFBTSxJQUFJLEtBQUssT0FBTyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxHQUFHLEtBQUssaUJBQWlCO0FBQ3JGLFdBQUssV0FBVyxJQUFJLEtBQUssTUFBTTtBQUFBLElBQ25DO0FBQUEsSUFDQSxPQUFPO0FBQ0gsVUFBSSxLQUFLO0FBQ0wsYUFBSyxNQUFNLEtBQUssS0FBSyxpQkFBaUI7QUFDMUMsV0FBSyxvQkFBb0IsS0FBSyxNQUFNLEtBQUs7QUFDekMsVUFBSSxLQUFLO0FBQ0wsYUFBSyxlQUFlO0FBQUEsSUFDNUI7QUFBQSxJQUNBLE9BQU87QUFDSCxVQUFJLENBQUMsS0FBSztBQUNOO0FBQ0osV0FBSyxNQUFNLEtBQUssS0FBSyxpQkFBaUI7QUFDdEMsV0FBSyxvQkFBb0I7QUFBQSxJQUM3QjtBQUFBLElBQ0EsZUFBZTtBQUdYLFdBQUssS0FBSztBQUFBLElBQ2Q7QUFBQSxFQUNKO0FBaEVJLGdCQURFLG1CQUNLLFlBQVc7QUFDbEIsZ0JBRkUsbUJBRUssY0FBYTtBQUFBO0FBQUEsSUFFaEIsUUFBUSxFQUFFLE1BQU0sS0FBSyxPQUFPLFNBQVMsRUFBSTtBQUFBO0FBQUEsSUFFekMsU0FBUyxFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsS0FBSztBQUFBO0FBQUEsSUFFMUMsTUFBTSxFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsTUFBTTtBQUFBO0FBQUEsSUFFeEMsVUFBVSxFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsTUFBTTtBQUFBO0FBQUEsSUFFNUMsS0FBSyxFQUFFLE1BQU0sS0FBSyxRQUFRLFNBQVMsR0FBRztBQUFBLEVBQzFDOzs7QUNqQkcsV0FBUyx3QkFBd0IsS0FBSyxTQUFTLHVCQUF1QjtBQUN6RSxRQUFJLDBCQUEwQixRQUFRO0FBRWxDLFVBQUkscUJBQXFCLElBQUk7QUFDN0IsYUFBTztBQUFBLElBQ1g7QUFDQSxVQUFNLFNBQVMsSUFBSTtBQUNuQixRQUFJLFdBQVcsd0JBQXdCO0FBRW5DLFVBQUksY0FBYztBQUNsQixhQUFPO0FBQUEsSUFDWCxXQUNTLFdBQVcsMkJBQ2hCLFdBQVcsYUFDWCxXQUFXLHdCQUNYLFdBQVcscUJBQXFCO0FBRWhDLFVBQUksaUJBQWlCO0FBQ3JCLGFBQU87QUFBQSxJQUNYLFdBQ1MsV0FBVyxZQUFZO0FBRTVCLFVBQUksY0FBYztBQUNsQixhQUFPO0FBQUEsSUFDWCxXQUNTLFdBQVcsdUJBQXVCO0FBRXZDLFVBQUksZ0JBQWdCO0FBQ3BCLGFBQU87QUFBQSxJQUNYLFdBQ1MsV0FBVyxnQkFBZ0IsV0FBVyxPQUFPO0FBRWxELFVBQUksVUFBVTtBQUNkLGFBQU87QUFBQSxJQUNYLFdBQ1MsV0FBVyw0QkFBNEI7QUFFNUMsVUFBSSxnQkFBZ0I7QUFDcEIsYUFBTztBQUFBLElBQ1g7QUFDQSxXQUFPO0FBQUEsRUFDWDs7O0FDckNBLE1BQU0sZUFBTixjQUEyQixVQUFVO0FBQUEsSUFVakMsUUFBUTtBQUNKLFVBQUksQ0FBQyxLQUFLLFVBQVU7QUFDaEIsY0FBTSxNQUFNLDBDQUEwQztBQUFBLE1BQzFEO0FBQ0EsV0FBSyxPQUFPLFNBQ1AsS0FBSyxLQUFLLEtBQUssV0FBVyxFQUMxQixLQUFLLENBQUMsWUFBWTtBQUNuQixjQUFNLE1BQU0sS0FBSztBQUNqQixZQUFJLENBQUMsd0JBQXdCLEtBQUssU0FBUyxLQUFLLGVBQWUsR0FBRztBQUM5RCxrQkFBUSxNQUFNLFVBQVUsSUFBSSxRQUFRLGdDQUFnQztBQUFBLFFBQ3hFO0FBQUEsTUFDSixDQUFDLEVBQ0ksTUFBTSxRQUFRLEdBQUc7QUFBQSxJQUMxQjtBQUFBLEVBQ0o7QUF2QkksZ0JBREUsY0FDSyxZQUFXO0FBQ2xCLGdCQUZFLGNBRUssY0FBYTtBQUFBO0FBQUEsSUFFaEIsS0FBSyxTQUFTLE9BQU87QUFBQTtBQUFBLElBRXJCLFVBQVUsU0FBUyxTQUFTO0FBQUE7QUFBQSxJQUU1QixpQkFBaUIsU0FBUyxPQUFPLE1BQU07QUFBQSxFQUMzQzs7O0FDZEosTUFBTSxxQkFBTixjQUFpQyxVQUFVO0FBQUEsSUFjdkMsT0FBTztBQUNILFdBQUssbUJBQW1CO0FBQ3hCLFdBQUssbUJBQW1CO0FBQ3hCLFdBQUssU0FBUyxJQUFJLGFBQWEsQ0FBQztBQUNoQyxXQUFLLGVBQWUsSUFBSSxhQUFhLENBQUM7QUFDdEMsV0FBSyxZQUFZO0FBQ2pCLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFDQSxRQUFRO0FBQ0osZUFBUyxpQkFBaUIsYUFBYSxDQUFDLE1BQU07QUFDMUMsWUFBSSxLQUFLLFdBQVcsS0FBSyxhQUFhLENBQUMsS0FBSyxtQkFBbUI7QUFDM0QsZUFBSyxZQUFhLENBQUMsS0FBSyxZQUFZLEVBQUUsWUFBYTtBQUNuRCxlQUFLLFlBQWEsQ0FBQyxLQUFLLFlBQVksRUFBRSxZQUFhO0FBQ25ELGVBQUssb0JBQW9CLEtBQUs7QUFDOUIsZUFBSyxvQkFBb0IsS0FBSztBQUU5QixlQUFLLG1CQUFtQixLQUFLLElBQUksT0FBTyxLQUFLLGdCQUFnQjtBQUM3RCxlQUFLLG1CQUFtQixLQUFLLElBQUksUUFBUSxLQUFLLGdCQUFnQjtBQUM5RCxlQUFLLE9BQU8sb0JBQW9CLEtBQUssTUFBTTtBQUMzQyxnQkFBTSxTQUFTLEtBQUssT0FBTztBQUMzQixjQUFJLFdBQVcsTUFBTTtBQUNqQixtQkFBTyxvQkFBb0IsS0FBSyxZQUFZO0FBQzVDLHlCQUFLLElBQUksS0FBSyxRQUFRLEtBQUssUUFBUSxLQUFLLFlBQVk7QUFBQSxVQUN4RDtBQUNBLGVBQUssT0FBTyx5QkFBeUI7QUFDckMsZUFBSyxPQUFPLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0I7QUFDL0QsZUFBSyxPQUFPLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxnQkFBZ0I7QUFDL0QsZUFBSyxPQUFPLFVBQVUsS0FBSyxNQUFNO0FBQUEsUUFDckM7QUFBQSxNQUNKLENBQUM7QUFDRCxZQUFNQyxVQUFTLEtBQUssT0FBTztBQUMzQixVQUFJLEtBQUssb0JBQW9CO0FBQ3pCLFFBQUFBLFFBQU8saUJBQWlCLGFBQWEsTUFBTTtBQUN2QyxVQUFBQSxRQUFPLHFCQUNIQSxRQUFPLHNCQUNIQSxRQUFPLHlCQUNQQSxRQUFPO0FBQ2YsVUFBQUEsUUFBTyxtQkFBbUI7QUFBQSxRQUM5QixDQUFDO0FBQUEsTUFDTDtBQUNBLFVBQUksS0FBSyxrQkFBa0I7QUFDdkIsWUFBSSxLQUFLLG9CQUFvQixHQUFHO0FBQzVCLFVBQUFBLFFBQU8saUJBQWlCLGVBQWUsQ0FBQyxNQUFNO0FBQzFDLGNBQUUsZUFBZTtBQUFBLFVBQ3JCLEdBQUcsS0FBSztBQUFBLFFBQ1o7QUFDQSxRQUFBQSxRQUFPLGlCQUFpQixhQUFhLENBQUMsTUFBTTtBQUN4QyxjQUFJLEVBQUUsVUFBVSxLQUFLLGtCQUFrQjtBQUNuQyxpQkFBSyxZQUFZO0FBQ2pCLHFCQUFTLEtBQUssTUFBTSxTQUFTO0FBQzdCLGdCQUFJLEVBQUUsVUFBVSxHQUFHO0FBQ2YsZ0JBQUUsZUFBZTtBQUVqQixxQkFBTztBQUFBLFlBQ1g7QUFBQSxVQUNKO0FBQUEsUUFDSixDQUFDO0FBQ0QsUUFBQUEsUUFBTyxpQkFBaUIsV0FBVyxDQUFDLE1BQU07QUFDdEMsY0FBSSxFQUFFLFVBQVUsS0FBSyxrQkFBa0I7QUFDbkMsaUJBQUssWUFBWTtBQUNqQixxQkFBUyxLQUFLLE1BQU0sU0FBUztBQUFBLFVBQ2pDO0FBQUEsUUFDSixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBOUVJLGdCQURFLG9CQUNLLFlBQVc7QUFDbEIsZ0JBRkUsb0JBRUssY0FBYTtBQUFBO0FBQUEsSUFFaEIsV0FBVyxFQUFFLE1BQU0sS0FBSyxPQUFPLFNBQVMsS0FBSztBQUFBO0FBQUE7QUFBQSxJQUc3QyxrQkFBa0IsRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTLEtBQUs7QUFBQTtBQUFBO0FBQUEsSUFHbkQsa0JBQWtCLEVBQUUsTUFBTSxLQUFLLElBQUk7QUFBQTtBQUFBLElBRW5DLG9CQUFvQixFQUFFLE1BQU0sS0FBSyxNQUFNLFNBQVMsTUFBTTtBQUFBLEVBQzFEOzs7QUNyQkosTUFBSUMsZUFBMEMsU0FBVSxZQUFZLFFBQVEsS0FBSyxNQUFNO0FBQ25GLFFBQUksSUFBSSxVQUFVLFFBQVEsSUFBSSxJQUFJLElBQUksU0FBUyxTQUFTLE9BQU8sT0FBTyxPQUFPLHlCQUF5QixRQUFRLEdBQUcsSUFBSSxNQUFNO0FBQzNILFFBQUksT0FBTyxZQUFZLFlBQVksT0FBTyxRQUFRLGFBQWE7QUFBWSxVQUFJLFFBQVEsU0FBUyxZQUFZLFFBQVEsS0FBSyxJQUFJO0FBQUE7QUFDeEgsZUFBUyxJQUFJLFdBQVcsU0FBUyxHQUFHLEtBQUssR0FBRztBQUFLLFlBQUksSUFBSSxXQUFXLENBQUM7QUFBRyxlQUFLLElBQUksSUFBSSxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRSxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxHQUFHLE1BQU07QUFDaEosV0FBTyxJQUFJLEtBQUssS0FBSyxPQUFPLGVBQWUsUUFBUSxLQUFLLENBQUMsR0FBRztBQUFBLEVBQ2hFO0FBT0EsTUFBTSxlQUFOLGNBQTJCLFVBQVU7QUFBQSxJQUVqQyxTQUFTO0FBQUEsSUFDVDtBQUFBLElBQ0E7QUFBQSxJQUNBLFFBQVE7QUFDSixXQUFLLE9BQU8sc0JBQXNCO0FBQ2xDLFdBQUssT0FBTyxlQUFlLENBQUMsR0FBSyxLQUFLLFFBQVEsQ0FBRyxDQUFDO0FBQ2xELFdBQUsseUJBQXlCLEtBQUssaUJBQWlCLEtBQUssSUFBSTtBQUM3RCxXQUFLLHVCQUF1QixLQUFLLGVBQWUsS0FBSyxJQUFJO0FBQUEsSUFDN0Q7QUFBQSxJQUNBLGFBQWE7QUFDVCxXQUFLLE9BQU8saUJBQWlCLElBQUksS0FBSyxzQkFBc0I7QUFDNUQsV0FBSyxPQUFPLGVBQWUsSUFBSSxLQUFLLG9CQUFvQjtBQUFBLElBQzVEO0FBQUEsSUFDQSxlQUFlO0FBQ1gsV0FBSyxPQUFPLGlCQUFpQixPQUFPLEtBQUssc0JBQXNCO0FBQy9ELFdBQUssT0FBTyxlQUFlLE9BQU8sS0FBSyxvQkFBb0I7QUFBQSxJQUMvRDtBQUFBLElBQ0EsbUJBQW1CO0FBQ2YsWUFBTSxPQUFPLEtBQUssT0FBTyxJQUFJO0FBQzdCLFVBQUksU0FBUyxXQUFXLFNBQVMsVUFBVTtBQUN2QyxhQUFLLE9BQU8sc0JBQXNCO0FBQUEsTUFDdEM7QUFBQSxJQUNKO0FBQUEsSUFDQSxpQkFBaUI7QUFDYixZQUFNLE9BQU8sS0FBSyxPQUFPLElBQUk7QUFDN0IsVUFBSSxTQUFTLFdBQVcsU0FBUyxVQUFVO0FBQ3ZDLGFBQUssT0FBTyxzQkFBc0I7QUFDbEMsYUFBSyxPQUFPLGVBQWUsQ0FBQyxHQUFLLEtBQUssUUFBUSxDQUFHLENBQUM7QUFBQSxNQUN0RDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBL0JJLGdCQURFLGNBQ0ssWUFBVztBQWdDdEIsRUFBQUEsYUFBVztBQUFBLElBQ1AsU0FBUyxNQUFNLENBQUc7QUFBQSxFQUN0QixHQUFHLGFBQWEsV0FBVyxVQUFVLE1BQU07OztBQzlCM0MsTUFBTSxrQkFBTixjQUE4QixVQUFVO0FBQUEsSUFLcEMsUUFBUTtBQUNKLFdBQUsseUJBQXlCLEtBQUssbUJBQW1CLEtBQUssSUFBSTtBQUFBLElBQ25FO0FBQUEsSUFDQSxhQUFhO0FBQ1QsV0FBSyxPQUFPLGlCQUFpQixJQUFJLEtBQUssc0JBQXNCO0FBQUEsSUFDaEU7QUFBQSxJQUNBLGVBQWU7QUFDWCxXQUFLLE9BQU8saUJBQWlCLE9BQU8sS0FBSyxzQkFBc0I7QUFBQSxJQUNuRTtBQUFBLElBQ0EsbUJBQW1CLEdBQUc7QUFDbEIsVUFBSSxFQUFFLHVCQUF1QixFQUFFLHVCQUF1QjtBQUNsRCxjQUFNLElBQUksS0FBSyxPQUFPLEdBQUcsUUFBUTtBQUNqQyxVQUFFLEtBQUssQ0FBQ0MsSUFBRyxNQUFNLEtBQUssSUFBSUEsS0FBSSxLQUFLLFNBQVMsSUFBSSxLQUFLLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUM1RSxhQUFLLE9BQU8sR0FBRyxRQUFRLHNCQUFzQixFQUFFLENBQUMsQ0FBQztBQUFBLE1BQ3JEO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFwQkksZ0JBREUsaUJBQ0ssWUFBVztBQUNsQixnQkFGRSxpQkFFSyxjQUFhO0FBQUEsSUFDaEIsV0FBVyxFQUFFLE1BQU0sS0FBSyxPQUFPLFNBQVMsR0FBSztBQUFBLEVBQ2pEOzs7QUNkSixNQUFNLG9CQUFOLGNBQWdDLFVBQVU7QUFBQSxJQW9DdEMsT0FBTztBQUNILFdBQUssc0JBQXNCLElBQUksYUFBYSxDQUFDO0FBQzdDLFdBQUssV0FBVyxJQUFJLGFBQWEsQ0FBQztBQUNsQyxXQUFLLFlBQVksSUFBSSxhQUFhLENBQUM7QUFDbkMsV0FBSyw0QkFBNEI7QUFDakMsV0FBSyxRQUFRLEtBQUssT0FBTyxhQUFhLE9BQU87QUFDN0MsVUFBSSxDQUFDLEtBQUssT0FBTztBQUNiLGdCQUFRLE1BQU0sS0FBSyxPQUFPLE1BQU0sMEVBQTBFO0FBQzFHO0FBQUEsTUFDSjtBQUNBLFVBQUksQ0FBQyxLQUFLLDZCQUE2QjtBQUNuQyxnQkFBUSxNQUFNLEtBQUssT0FBTyxNQUFNLG1FQUFtRTtBQUNuRztBQUFBLE1BQ0o7QUFDQSxVQUFJLENBQUMsS0FBSyxTQUFTO0FBQ2YsZ0JBQVEsTUFBTSxLQUFLLE9BQU8sTUFBTSxnREFBZ0Q7QUFDaEY7QUFBQSxNQUNKO0FBQ0EsV0FBSyxlQUFlO0FBQ3BCLFdBQUssa0JBQWtCO0FBQ3ZCLFdBQUssVUFBVSxJQUFJLGFBQWEsQ0FBQztBQUNqQyxXQUFLLFVBQVU7QUFDZixXQUFLLGlCQUFpQjtBQUN0QixXQUFLLG9CQUFvQixJQUFJLGFBQWEsQ0FBQztBQUFBLElBQy9DO0FBQUEsSUFDQSxRQUFRO0FBQ0osVUFBSSxLQUFLLEtBQUs7QUFDVixhQUFLLG9CQUFvQjtBQUN6QixlQUFPLGlCQUFpQixhQUFhLEtBQUssWUFBWSxLQUFLLElBQUksQ0FBQztBQUNoRSxlQUFPLGlCQUFpQixXQUFXLEtBQUssVUFBVSxLQUFLLElBQUksQ0FBQztBQUFBLE1BQ2hFO0FBQ0EsVUFBSSxLQUFLLGNBQWMsR0FBRztBQUN0QixjQUFNLFlBQVksS0FBSyxPQUFPLGFBQWEsT0FBTztBQUNsRCxZQUFJLENBQUMsV0FBVztBQUNaLGtCQUFRLEtBQUssZ0NBQWdDLEtBQUssT0FBTyxNQUFNLHNGQUN2QjtBQUFBLFFBQzVDLE9BQ0s7QUFDRCxlQUFLLGFBQWEsVUFBVTtBQUM1QixlQUFLLFFBQVE7QUFBQSxRQUNqQjtBQUFBLE1BQ0osT0FDSztBQUNELGFBQUssYUFBYSxDQUFDLFFBQVEsT0FBTyxFQUFFLEtBQUssYUFBYSxDQUFDO0FBQUEsTUFDM0Q7QUFDQSxXQUFLLHlCQUF5QixLQUFLLGNBQWMsS0FBSyxJQUFJO0FBQzFELFdBQUssNEJBQTRCLFNBQVM7QUFBQSxJQUM5QztBQUFBLElBQ0EsYUFBYTtBQUNULFdBQUssT0FBTyxpQkFBaUIsSUFBSSxLQUFLLHNCQUFzQjtBQUFBLElBQ2hFO0FBQUEsSUFDQSxlQUFlO0FBQ1gsV0FBSyxPQUFPLGlCQUFpQixPQUFPLEtBQUssc0JBQXNCO0FBQUEsSUFDbkU7QUFBQTtBQUFBLElBRUEsa0JBQWtCO0FBQ2QsV0FBSyxRQUFRLFdBQVcsS0FBSyxRQUFRO0FBQ3JDLFdBQUssU0FBUyxDQUFDLElBQUk7QUFDbkIsbUJBQUssVUFBVSxLQUFLLFVBQVUsS0FBSyxRQUFRO0FBQzNDLGFBQU8sS0FBSyxNQUFNLEtBQUssU0FBUyxDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUMsQ0FBQztBQUFBLElBQ3hEO0FBQUEsSUFDQSxTQUFTO0FBQ0wsVUFBSSxjQUFjO0FBQ2xCLFVBQUksS0FBSyxXQUFXLEtBQUssUUFBUSxNQUFNO0FBQ25DLGFBQUssa0JBQWtCLENBQUMsSUFBSSxLQUFLLFFBQVEsS0FBSyxDQUFDO0FBQy9DLGFBQUssa0JBQWtCLENBQUMsSUFBSSxLQUFLLFFBQVEsS0FBSyxDQUFDO0FBQy9DLHNCQUNJLEtBQUssSUFBSSxLQUFLLGtCQUFrQixDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO0FBQUEsTUFDaEY7QUFDQSxVQUFJLENBQUMsS0FBSyxnQkFDTixLQUFLLG9CQUFvQixDQUFDLEtBQUssS0FBSyxrQ0FDcEMsS0FBSyxrQkFBa0IsQ0FBQyxJQUFJLEtBQUssZ0NBQWdDO0FBQ2pFLGFBQUssZUFBZTtBQUFBLE1BQ3hCLFdBQ1MsS0FBSyxnQkFDVixjQUFjLEtBQUssa0NBQWtDO0FBQ3JELGFBQUssZUFBZTtBQUNwQixhQUFLLDRCQUE0QixTQUFTO0FBQzFDLFlBQUksS0FBSyxTQUFTO0FBQ2QsZUFBSyxnQkFBZ0IsS0FBSyxTQUFTLEtBQUssY0FBYztBQUFBLFFBQzFEO0FBQUEsTUFDSjtBQUNBLFVBQUksS0FBSyxnQkFBZ0IsS0FBSywrQkFBK0IsS0FBSyxPQUFPO0FBQ3JFLGNBQU0sU0FBUyxLQUFLO0FBQ3BCLGFBQUssT0FBTyxpQkFBaUIsTUFBTTtBQUNuQyxjQUFNQyxhQUFZLEtBQUssT0FBTyxnQkFBZ0IsS0FBSyxRQUFRO0FBQzNELFlBQUksU0FBVSxLQUFLLFNBQ2YsS0FBSyxlQUFlLElBQ2QsS0FBSyxPQUFPLE1BQU0sUUFBUSxRQUFRQSxZQUFXLEtBQUssS0FBSyxVQUFVLElBQ2pFLEtBQUssT0FBTyxRQUFRLFFBQVEsUUFBUUEsWUFBVyxLQUFLLEtBQUssWUFBWSxLQUFLLFdBQVc7QUFDL0YsWUFBSSxPQUFPLFdBQVcsR0FBRztBQUNyQixlQUFLLGtCQUFrQjtBQUN2QixlQUFLLGlCQUNELEtBQUssS0FDRCxLQUFLLE1BQU0sS0FBSyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssa0JBQWtCLENBQUMsQ0FBQztBQUN2RSxlQUFLLDRCQUNELEtBQUssZ0JBQWdCLEtBQUssS0FBSyxpQkFBaUIsS0FBSztBQUN6RCxlQUFLLDRCQUE0QixzQkFBc0I7QUFDdkQsZUFBSyw0QkFBNEIsbUJBQW1CLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLHlCQUF5QjtBQUM3RixlQUFLLDRCQUE0QixVQUFVLE9BQU8sVUFBVSxDQUFDLENBQUM7QUFDOUQsZUFBSyw0QkFBNEIsVUFBVTtBQUFBLFlBQ3ZDO0FBQUEsWUFDQSxLQUFLO0FBQUEsWUFDTDtBQUFBLFVBQ0osQ0FBQztBQUNELGVBQUssNEJBQTRCLFNBQVM7QUFDMUMsZUFBSyxRQUFRLElBQUksT0FBTyxVQUFVLENBQUMsQ0FBQztBQUNwQyxlQUFLLFVBQVU7QUFBQSxRQUNuQixPQUNLO0FBQ0QsY0FBSSxDQUFDLEtBQUssaUJBQWlCO0FBQ3ZCLGlCQUFLLDRCQUE0QixTQUFTO0FBQzFDLGlCQUFLLGtCQUFrQjtBQUFBLFVBQzNCO0FBQ0EsZUFBSyxVQUFVO0FBQUEsUUFDbkI7QUFBQSxNQUNKLFdBQ1MsS0FBSywrQkFBK0IsS0FBSyxtQkFBbUI7QUFDakUsYUFBSyxlQUFlO0FBQUEsTUFDeEI7QUFDQSxXQUFLLG9CQUFvQixJQUFJLEtBQUssaUJBQWlCO0FBQUEsSUFDdkQ7QUFBQSxJQUNBLGNBQWMsR0FBRztBQUViLFdBQUssVUFBVTtBQUNmLFFBQUUsaUJBQWlCLE9BQU8sV0FBWTtBQUdsQyxhQUFLLFVBQVU7QUFDZixhQUFLLFVBQVU7QUFBQSxNQUNuQixFQUFFLEtBQUssSUFBSSxDQUFDO0FBQ1osVUFBSSxFQUFFLGdCQUFnQixFQUFFLGFBQWEsUUFBUTtBQUN6QyxpQkFBUyxJQUFJLEdBQUcsSUFBSSxFQUFFLGFBQWEsUUFBUSxLQUFLO0FBQzVDLGNBQUksY0FBYyxFQUFFLGFBQWEsQ0FBQztBQUNsQyxjQUFJLFlBQVksY0FBYyxLQUFLLFlBQVk7QUFDM0MsaUJBQUssVUFBVSxZQUFZO0FBQUEsVUFDL0I7QUFBQSxRQUNKO0FBQUEsTUFDSjtBQUNBLFFBQUUsaUJBQWlCLHNCQUFzQixTQUFVLEdBQUc7QUFDbEQsWUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVE7QUFDM0IsbUJBQVMsSUFBSSxHQUFHLElBQUksRUFBRSxNQUFNLFFBQVEsS0FBSztBQUNyQyxnQkFBSSxjQUFjLEVBQUUsTUFBTSxDQUFDO0FBQzNCLGdCQUFJLFlBQVksY0FBYyxLQUFLLFlBQVk7QUFDM0MsbUJBQUssVUFBVSxZQUFZO0FBQUEsWUFDL0I7QUFBQSxVQUNKO0FBQUEsUUFDSjtBQUFBLE1BQ0osRUFBRSxLQUFLLElBQUksQ0FBQztBQUFBLElBQ2hCO0FBQUEsSUFDQSxjQUFjO0FBQ1YsV0FBSyxvQkFBb0I7QUFBQSxJQUM3QjtBQUFBLElBQ0EsWUFBWTtBQUNSLFdBQUssb0JBQW9CO0FBQ3pCLFdBQUssNEJBQTRCLFNBQVM7QUFDMUMsVUFBSSxLQUFLLFNBQVM7QUFDZCxhQUFLLGdCQUFnQixLQUFLLFNBQVMsQ0FBRztBQUFBLE1BQzFDO0FBQUEsSUFDSjtBQUFBLElBQ0EsaUJBQWlCO0FBQ2IsVUFBSSxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDckIsV0FBSyxJQUFJLGlCQUFpQixNQUFNO0FBQ2hDLFlBQU1BLGFBQVksS0FBSyxJQUFJLFdBQVcsS0FBSyxRQUFRO0FBQ25ELFVBQUksU0FBVSxLQUFLLFNBQ2YsS0FBSyxlQUFlLElBQ2QsS0FBSyxPQUFPLE1BQU0sUUFBUSxRQUFRQSxZQUFXLEtBQUssS0FBSyxVQUFVLElBQ2pFLEtBQUssT0FBTyxRQUFRLFFBQVEsUUFBUUEsWUFBVyxLQUFLLEtBQUssWUFBWSxLQUFLLFdBQVc7QUFDL0YsVUFBSSxPQUFPLFdBQVcsR0FBRztBQUNyQixhQUFLLGtCQUFrQjtBQUN2QixRQUFBQSxXQUFVLENBQUMsSUFBSTtBQUNmLHFCQUFLLFVBQVVBLFlBQVdBLFVBQVM7QUFDbkMsYUFBSyw0QkFDRCxDQUFDLEtBQUssS0FBS0EsV0FBVSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUtBLFdBQVUsQ0FBQyxDQUFDLElBQUksS0FBSyxLQUFLO0FBQ25FLGFBQUssNEJBQTRCLHNCQUFzQjtBQUN2RCxhQUFLLDRCQUE0QixtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUsseUJBQXlCO0FBQzdGLGFBQUssNEJBQTRCLFVBQVUsT0FBTyxVQUFVLENBQUMsQ0FBQztBQUM5RCxhQUFLLDRCQUE0QixTQUFTO0FBQzFDLGFBQUssVUFBVSxPQUFPLFVBQVUsQ0FBQztBQUNqQyxhQUFLLFVBQVU7QUFBQSxNQUNuQixPQUNLO0FBQ0QsWUFBSSxDQUFDLEtBQUssaUJBQWlCO0FBQ3ZCLGVBQUssNEJBQTRCLFNBQVM7QUFDMUMsZUFBSyxrQkFBa0I7QUFBQSxRQUMzQjtBQUNBLGFBQUssVUFBVTtBQUFBLE1BQ25CO0FBQUEsSUFDSjtBQUFBLElBQ0EsZ0JBQWdCLGFBQWEsZUFBZTtBQUN4QyxXQUFLLFFBQVEsbUJBQW1CLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxhQUFhO0FBQ3hELFlBQU0sSUFBSSxLQUFLO0FBQ2YsWUFBTSxLQUFLLEtBQUs7QUFDaEIsVUFBSSxLQUFLLFNBQVM7QUFDZCxhQUFLLFFBQVEsaUJBQWlCLENBQUM7QUFDL0IsYUFBSyxTQUFTLGlCQUFpQixFQUFFO0FBQ2pDLHFCQUFLLElBQUksR0FBRyxHQUFHLEVBQUU7QUFDakIscUJBQUssTUFBTSxHQUFHLEdBQUcsR0FBRztBQUFBLE1BQ3hCLE9BQ0s7QUFDRCxhQUFLLElBQUksaUJBQWlCLENBQUM7QUFBQSxNQUMvQjtBQUNBLFdBQUssUUFBUSxpQkFBaUIsRUFBRTtBQUNoQyxtQkFBSyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFFBQUUsQ0FBQyxLQUFLLFlBQVksQ0FBQztBQUNyQixRQUFFLENBQUMsSUFBSSxZQUFZLENBQUM7QUFDcEIsUUFBRSxDQUFDLEtBQUssWUFBWSxDQUFDO0FBQ3JCLFdBQUssUUFBUSxpQkFBaUIsQ0FBQztBQUFBLElBQ25DO0FBQUEsRUFDSjtBQXBQSSxnQkFERSxtQkFDSyxZQUFXO0FBQ2xCLGdCQUZFLG1CQUVLLGNBQWE7QUFBQTtBQUFBLElBRWhCLDZCQUE2QixFQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUE7QUFBQSxJQUVqRCxTQUFTLEVBQUUsTUFBTSxLQUFLLE9BQU87QUFBQTtBQUFBLElBRTdCLEtBQUssRUFBRSxNQUFNLEtBQUssT0FBTztBQUFBO0FBQUEsSUFFekIsU0FBUyxFQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUE7QUFBQSxJQUU3QixVQUFVLEVBQUUsTUFBTSxLQUFLLE9BQU87QUFBQTtBQUFBLElBRTlCLFlBQVk7QUFBQSxNQUNSLE1BQU0sS0FBSztBQUFBLE1BQ1gsUUFBUSxDQUFDLG1CQUFtQixRQUFRLFNBQVMsTUFBTTtBQUFBLE1BQ25ELFNBQVM7QUFBQSxJQUNiO0FBQUE7QUFBQSxJQUVBLFlBQVksRUFBRSxNQUFNLEtBQUssS0FBSyxTQUFTLEVBQUU7QUFBQTtBQUFBLElBRXpDLGdDQUFnQyxFQUFFLE1BQU0sS0FBSyxPQUFPLFNBQVMsS0FBSztBQUFBO0FBQUEsSUFFbEUsa0NBQWtDLEVBQUUsTUFBTSxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQUE7QUFBQSxJQUVuRSxrQkFBa0IsRUFBRSxNQUFNLEtBQUssT0FBTyxTQUFTLEtBQUs7QUFBQTtBQUFBLElBRXBELGFBQWE7QUFBQSxNQUNULE1BQU0sS0FBSztBQUFBLE1BQ1gsUUFBUSxDQUFDLGFBQWEsT0FBTztBQUFBLE1BQzdCLFNBQVM7QUFBQSxJQUNiO0FBQUE7QUFBQSxJQUVBLGFBQWEsRUFBRSxNQUFNLEtBQUssT0FBTyxTQUFTLElBQU07QUFBQSxFQUNwRDs7O0FDeENKLE1BQU0sWUFBWSxhQUFLLE9BQU87QUFDOUIsTUFBTSxTQUFTLGFBQUssT0FBTztBQUMzQixNQUFNLFNBQVMsYUFBSyxPQUFPO0FBVzNCLE1BQU0sUUFBTixjQUFvQixVQUFVO0FBQUEsSUFvQjFCLE9BQU87QUFDSCxXQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssV0FBVyxDQUFDO0FBQ3pDLGVBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxPQUFPLFFBQVEsRUFBRSxHQUFHO0FBQ3pDLGFBQUssT0FBTyxDQUFDLElBQUksYUFBSyxPQUFPO0FBQUEsTUFDakM7QUFFQSxXQUFLLHFCQUFxQjtBQUMxQixXQUFLLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUNsQixXQUFLLGVBQWUsS0FBSztBQUFBLElBQzdCO0FBQUEsSUFDQSxRQUFRO0FBQ0osV0FBSyxpQkFBaUIsS0FBSyxPQUFPLE1BQU0sVUFBVTtBQUNsRCxXQUFLLFdBQVcsS0FBSyxlQUFlLGFBQWEsTUFBTTtBQUN2RCxXQUFLLFNBQVMsV0FBVyxLQUFLO0FBRTlCLFlBQU0sY0FBYyxJQUFJLEtBQUssT0FBTztBQUVwQyxXQUFLLFlBQVksSUFBSSxZQUFZLElBQUksS0FBSyxRQUFRO0FBQ2xELGVBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLGNBQWMsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHO0FBQ3hELGFBQUssVUFDQSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQUEsTUFDdkQ7QUFDQSxXQUFLLE9BQU8sSUFBSSxLQUFLLEtBQUssUUFBUTtBQUFBLFFBQzlCO0FBQUEsUUFDQSxXQUFXLEtBQUs7QUFBQSxRQUNoQixXQUFXLGNBQWM7QUFBQSxNQUM3QixDQUFDO0FBQ0QsV0FBSyxTQUFTLE9BQU8sS0FBSztBQUFBLElBQzlCO0FBQUEsSUFDQSxpQkFBaUI7QUFDYixZQUFNLFlBQVksS0FBSyxLQUFLLFVBQVUsY0FBYyxRQUFRO0FBQzVELFlBQU0sWUFBWSxLQUFLLEtBQUssVUFBVSxjQUFjLGlCQUFpQjtBQUNyRSxZQUFNLFVBQVUsS0FBSyxLQUFLLFVBQVUsY0FBYyxNQUFNO0FBQ3hELG1CQUFLLElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUMzQixlQUFTLElBQUksR0FBRyxJQUFJLEtBQUssT0FBTyxRQUFRLEVBQUUsR0FBRztBQUN6QyxjQUFNLE9BQU8sS0FBSyxRQUFRLEtBQUssb0JBQW9CLElBQUksS0FBSyxLQUFLLE9BQU8sTUFBTTtBQUM5RSxjQUFNLE9BQU8sS0FBSyxRQUFRLEtBQUssb0JBQW9CLElBQUksS0FBSyxLQUFLLE9BQU8sTUFBTTtBQUU5RSxZQUFJLE1BQU0sS0FBSyxPQUFPLFNBQVMsR0FBRztBQUM5Qix1QkFBSyxJQUFJLFdBQVcsTUFBTSxJQUFJO0FBQUEsUUFDbEM7QUFDQSxxQkFBSyxNQUFNLFFBQVEsS0FBSyxJQUFJLFNBQVM7QUFDckMscUJBQUssVUFBVSxRQUFRLE1BQU07QUFDN0IsY0FBTSxlQUFlLElBQU0sS0FBSyxlQUFlLEtBQUs7QUFDcEQsY0FBTSxZQUFZLElBQUksZ0JBQWdCLEtBQUs7QUFDM0MscUJBQUssTUFBTSxRQUFRLFNBQVUsS0FBSyxRQUFRLFdBQVcsS0FBTyxLQUFLLFFBQVMsQ0FBRztBQUM3RSxrQkFBVSxJQUFJLElBQUksR0FBRztBQUFBLFVBQ2pCLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQztBQUFBLFVBQ2xCLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQztBQUFBLFVBQ2xCLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQztBQUFBLFFBQ3RCLENBQUM7QUFDRCxrQkFBVSxJQUFJLElBQUksSUFBSSxHQUFHO0FBQUEsVUFDckIsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDO0FBQUEsVUFDbEIsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDO0FBQUEsVUFDbEIsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDO0FBQUEsUUFDdEIsQ0FBQztBQUNELFlBQUksU0FBUztBQUNULHVCQUFLLE1BQU0sUUFBUSxXQUFXLE1BQU07QUFDcEMsdUJBQUssVUFBVSxRQUFRLE1BQU07QUFDN0Isa0JBQVEsSUFBSSxJQUFJLEdBQUcsTUFBTTtBQUN6QixrQkFBUSxJQUFJLElBQUksSUFBSSxHQUFHLE1BQU07QUFBQSxRQUNqQztBQUNBLFlBQUksV0FBVztBQUNYLG9CQUFVLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDbEMsb0JBQVUsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO0FBQUEsUUFDMUM7QUFBQSxNQUNKO0FBRUEsV0FBSyxLQUFLLE9BQU87QUFBQSxJQUNyQjtBQUFBLElBQ0EsYUFBYTtBQUNULFdBQUssT0FBTyxvQkFBb0IsS0FBSyxPQUFPLENBQUMsQ0FBQztBQUM5QyxlQUFTLElBQUksR0FBRyxJQUFJLEtBQUssT0FBTyxRQUFRLEVBQUUsR0FBRztBQUN6QyxxQkFBSyxLQUFLLEtBQUssT0FBTyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsQ0FBQztBQUFBLE1BQzVDO0FBQ0EsV0FBSyxvQkFBb0I7QUFDekIsV0FBSyxlQUFlLEtBQUs7QUFBQSxJQUM3QjtBQUFBLElBQ0EsT0FBTyxJQUFJO0FBQ1AsV0FBSyxnQkFBZ0I7QUFDckIsVUFBSSxLQUFLLEtBQUssZ0JBQWdCO0FBQzFCLGFBQUssV0FBVztBQUFBLE1BQ3BCO0FBQ0EsVUFBSSxLQUFLLGVBQWUsR0FBRztBQUN2QixhQUFLLHFCQUFxQixLQUFLLG9CQUFvQixLQUFLLEtBQUssT0FBTztBQUNwRSxhQUFLLGVBQWdCLEtBQUssZUFBZSxLQUFLLFdBQVksS0FBSztBQUFBLE1BQ25FO0FBQ0EsV0FBSyxPQUFPLG9CQUFvQixLQUFLLE9BQU8sS0FBSyxpQkFBaUIsQ0FBQztBQUNuRSxXQUFLLGVBQWU7QUFBQSxJQUN4QjtBQUFBLElBQ0EsYUFBYTtBQUNULFdBQUssV0FBVztBQUFBLElBQ3BCO0FBQUEsSUFDQSxZQUFZO0FBQ1IsV0FBSyxlQUFlLFFBQVE7QUFDNUIsV0FBSyxLQUFLLFFBQVE7QUFBQSxJQUN0QjtBQUFBLEVBQ0o7QUFySEksZ0JBREUsT0FDSyxZQUFXO0FBQ2xCLGdCQUZFLE9BRUssY0FBYTtBQUFBO0FBQUEsSUFFaEIsVUFBVSxFQUFFLE1BQU0sS0FBSyxTQUFTO0FBQUE7QUFBQSxJQUVoQyxVQUFVLEVBQUUsTUFBTSxLQUFLLEtBQUssU0FBUyxHQUFHO0FBQUE7QUFBQSxJQUV4QyxVQUFVLEVBQUUsTUFBTSxLQUFLLE9BQU8sU0FBUyxJQUFJO0FBQUE7QUFBQSxJQUUzQyxPQUFPLEVBQUUsTUFBTSxLQUFLLE9BQU8sU0FBUyxFQUFJO0FBQUE7QUFBQSxJQUV4QyxPQUFPLEVBQUUsTUFBTSxLQUFLLE1BQU0sU0FBUyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTXhDLGdCQUFnQixFQUFFLE1BQU0sS0FBSyxPQUFPLFNBQVMsSUFBSTtBQUFBLEVBQ3JEOzs7QUNoQ0osV0FBU0MsT0FBTSxHQUFHLEdBQUcsR0FBRztBQUNwQixXQUFPLEtBQUssSUFBSSxHQUFHLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQztBQUFBLEVBQ3JDO0FBQ0EsTUFBTSxjQUFjLElBQUksYUFBYSxDQUFDO0FBQ3RDLE1BQU1DLFlBQVcsSUFBSSxhQUFhLENBQUM7QUFDbkMsTUFBTSxZQUFZLElBQUksYUFBYSxDQUFDO0FBQ3BDLE1BQU0sU0FBUyxJQUFJLGFBQWEsQ0FBQztBQUNqQyxNQUFNLFlBQVksSUFBSSxhQUFhLENBQUM7QUFDcEMsTUFBTSxZQUFZLElBQUksYUFBYSxDQUFDO0FBQ3BDLE1BQU0sZ0JBQWdCLElBQUksYUFBYSxDQUFDO0FBQ3hDLE1BQU0sa0JBQWtCLElBQUksYUFBYSxDQUFDO0FBQzFDLE1BQU0sZUFBZSxJQUFJLGFBQWEsQ0FBQztBQU12QyxNQUFNLGFBQWMsV0FBWTtBQUM1QixVQUFNLEtBQUssSUFBSSxhQUFhLENBQUM7QUFDN0IsVUFBTSxLQUFLLElBQUksYUFBYSxDQUFDO0FBQzdCLFVBQU0sS0FBSyxJQUFJLGFBQWEsQ0FBQztBQUM3QixVQUFNLEtBQUssSUFBSSxhQUFhLENBQUM7QUFDN0IsVUFBTSxLQUFLLElBQUksYUFBYSxDQUFDO0FBQzdCLFVBQU0sUUFBUSxJQUFJLGFBQWEsQ0FBQztBQUNoQyxVQUFNLFFBQVEsSUFBSSxhQUFhLENBQUM7QUFDaEMsVUFBTSxPQUFPLElBQUksYUFBYSxDQUFDO0FBQy9CLFdBQU8sU0FBVSxNQUFNLFFBQVEsR0FBRyxHQUFHQyxZQUFXLEtBQUssUUFBUTtBQUV6RCxTQUFHLElBQUksQ0FBQztBQUNSLFlBQU0sTUFBTSxhQUFLLE9BQU8sRUFBRTtBQUMxQixtQkFBSyxJQUFJLElBQUksR0FBRyxDQUFDO0FBQ2pCLFlBQU0sTUFBTSxhQUFLLE9BQU8sRUFBRTtBQUMxQixTQUFHLElBQUlBLFVBQVM7QUFDaEIsWUFBTSxNQUFNRixPQUFNLGFBQUssT0FBTyxFQUFFLEdBQUcsS0FBSyxNQUFNLE1BQU0sR0FBRztBQUN2RCxTQUFHLElBQUksQ0FBQztBQUNSLG1CQUFLLE1BQU0sSUFBSSxHQUFHLEVBQUU7QUFDcEIsbUJBQUssSUFBSSxJQUFJLEdBQUcsQ0FBQztBQUNqQixtQkFBSyxVQUFVLElBQUksRUFBRTtBQUNyQixtQkFBSyxVQUFVLElBQUksRUFBRTtBQUNyQixtQkFBSyxVQUFVLElBQUksRUFBRTtBQUNyQixtQkFBSyxVQUFVLElBQUksRUFBRTtBQUNyQixtQkFBSyxVQUFVLElBQUksRUFBRTtBQUVyQixZQUFNLFVBQVUsS0FBSyxLQUFLQSxPQUFNLGFBQUssSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN4RCxZQUFNLFVBQVUsS0FBSyxLQUFLQSxPQUFNLGFBQUssSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN4RCxZQUFNLFVBQVUsS0FBSyxLQUFLQSxPQUFNLGFBQUssSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUN4RCxZQUFNLFVBQVUsS0FBSyxLQUFLQSxRQUFPLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxRQUFRLEtBQUssTUFBTSxNQUFNLElBQUksQ0FBQyxDQUFDO0FBQzlGLFlBQU0sVUFBVSxLQUFLLEtBQUtBLFFBQU8sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLFFBQVEsS0FBSyxNQUFNLE1BQU0sSUFBSSxDQUFDLENBQUM7QUFDOUYsVUFBSSxRQUFRO0FBQ1IscUJBQUssSUFBSSxJQUFJLFFBQVEsQ0FBQztBQUN0QixxQkFBSyxVQUFVLElBQUksRUFBRTtBQUFBLE1BQ3pCO0FBQ0EsbUJBQUssTUFBTSxPQUFPLElBQUksRUFBRTtBQUN4QixtQkFBSyxVQUFVLE9BQU8sS0FBSztBQUMzQixtQkFBSyxNQUFNLE9BQU8sR0FBR0UsVUFBUztBQUM5QixtQkFBSyxVQUFVLE9BQU8sS0FBSztBQUMzQixhQUFPLDRCQUE0QixNQUFNLEtBQUs7QUFDOUMsV0FBSyx5QkFBeUIsT0FBTyxPQUFPO0FBQzVDLFdBQUsseUJBQXlCLE9BQU8sVUFBVSxPQUFPO0FBQ3RELGFBQU8seUJBQXlCLE9BQU8sVUFBVSxPQUFPO0FBQUEsSUFDNUQ7QUFBQSxFQUNKLEVBQUc7QUFJSCxNQUFNLG1CQUFOLGNBQStCLFVBQVU7QUFBQSxJQWdCckMsT0FBTztBQUFBLElBQ1AsUUFBUTtBQUNKLFdBQUssS0FBSyxrQkFBa0IsYUFBYTtBQUN6QyxXQUFLLE9BQU8sa0JBQWtCLGVBQWU7QUFDN0MsV0FBSyxJQUFJLGtCQUFrQixZQUFZO0FBQUEsSUFDM0M7QUFBQSxJQUNBLE9BQU8sSUFBSTtBQUNQLFdBQUssUUFBUTtBQUViLFdBQUssS0FBSyxrQkFBa0IsYUFBYTtBQUN6QyxXQUFLLE9BQU8sa0JBQWtCLGVBQWU7QUFDN0MsV0FBSyxJQUFJLGtCQUFrQixZQUFZO0FBQ3ZDLFdBQUssS0FBSyxnQkFBZ0IsV0FBVztBQUVyQyxXQUFLLE9BQU8saUJBQWlCLFNBQVM7QUFDdEMsV0FBSyxJQUFJLGlCQUFpQixNQUFNO0FBQ2hDLFdBQUssT0FBTyxvQkFBb0IsUUFBUSxNQUFNO0FBQzlDLFVBQUksS0FBSyxRQUFRO0FBRWIsYUFBSyxPQUFPLGlCQUFpQixTQUFTO0FBQ3RDLGFBQUssS0FBSywyQkFBMkIsV0FBVyxTQUFTO0FBQ3pELHFCQUFLLElBQUksV0FBVyxXQUFXLFdBQVc7QUFBQSxNQUM5QztBQUVBLFdBQUssT0FBTyxpQkFBaUIsU0FBUztBQUN0QyxXQUFLLEtBQUssMkJBQTJCLFdBQVcsU0FBUztBQUN6RCxtQkFBSyxJQUFJLFdBQVcsV0FBVyxXQUFXO0FBQzFDLGlCQUFXLEtBQUssTUFBTSxLQUFLLFFBQVEsV0FBVyxRQUFRLFdBQVcsTUFBTSxLQUFLLFNBQVMsWUFBWSxNQUFNLEtBQUssSUFBSTtBQUNoSCxVQUFJLEtBQUssb0JBQW9CO0FBQ3pCLGFBQUssSUFBSSxpQkFBaUIsS0FBSyxPQUFPLGlCQUFpQkQsU0FBUSxDQUFDO0FBQUEsTUFDcEU7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQS9DSSxnQkFERSxrQkFDSyxZQUFXO0FBQ2xCLGdCQUZFLGtCQUVLLGNBQWE7QUFBQTtBQUFBLElBRWhCLE1BQU0sU0FBUyxPQUFPO0FBQUE7QUFBQSxJQUV0QixRQUFRLFNBQVMsT0FBTztBQUFBO0FBQUEsSUFFeEIsS0FBSyxTQUFTLE9BQU87QUFBQTtBQUFBLElBRXJCLFFBQVEsU0FBUyxPQUFPO0FBQUE7QUFBQSxJQUV4QixvQkFBb0IsU0FBUyxLQUFLLElBQUk7QUFBQTtBQUFBLElBRXRDLFFBQVEsU0FBUyxPQUFPO0FBQUEsRUFDNUI7OztBQ3RESixNQUFNLGVBQU4sY0FBMkIsVUFBVTtBQUFBLElBZ0JqQyxPQUFPO0FBQ0gsVUFBSSxDQUFDLEtBQUssVUFBVTtBQUNoQixjQUFNLE1BQU0sMENBQTBDO0FBQUEsTUFDMUQ7QUFDQSxXQUFLLFNBQVM7QUFDZCxXQUFLLHVCQUF1QjtBQUFBLElBQ2hDO0FBQUEsSUFDQSxRQUFRO0FBQ0osV0FBSyxRQUFRLFNBQVMsY0FBYyxPQUFPO0FBQzNDLFdBQUssTUFBTSxNQUFNLEtBQUs7QUFDdEIsV0FBSyxNQUFNLGNBQWM7QUFDekIsV0FBSyxNQUFNLGNBQWM7QUFDekIsV0FBSyxNQUFNLE9BQU8sS0FBSztBQUN2QixXQUFLLE1BQU0sUUFBUSxLQUFLO0FBQ3hCLFdBQUssTUFBTSxpQkFBaUIsV0FBVyxNQUFNO0FBQ3pDLGFBQUssU0FBUztBQUFBLE1BQ2xCLENBQUM7QUFDRCxVQUFJLEtBQUssVUFBVTtBQUNmLGNBQU0sdUJBQXVCLE1BQU07QUFDL0IsZUFBSyxNQUFNLEtBQUs7QUFDaEIsaUJBQU8sb0JBQW9CLFNBQVMsb0JBQW9CO0FBQ3hELGlCQUFPLG9CQUFvQixjQUFjLG9CQUFvQjtBQUFBLFFBQ2pFO0FBQ0EsZUFBTyxpQkFBaUIsU0FBUyxvQkFBb0I7QUFDckQsZUFBTyxpQkFBaUIsY0FBYyxvQkFBb0I7QUFBQSxNQUM5RDtBQUFBLElBQ0o7QUFBQSxJQUNBLGVBQWU7QUFDWCxZQUFNLE1BQU0sS0FBSztBQUNqQixZQUFNLFNBQVMsSUFBSTtBQUNuQixZQUFNLFVBQVcsS0FBSyxVQUFVLElBQUksUUFBUSxLQUFLLFFBQVEsS0FBSyxLQUFLO0FBQ25FLFVBQUksQ0FBQyx3QkFBd0IsS0FBSyxTQUFTLEtBQUssZUFBZSxHQUFHO0FBQzlELGdCQUFRLE1BQU0sVUFBVSxRQUFRLGdDQUFnQztBQUFBLE1BQ3BFO0FBQ0EsVUFBSSwrQkFBK0IsS0FBSyxPQUFPO0FBQzNDLGFBQUssTUFBTSwwQkFBMEIsS0FBSyxZQUFZLEtBQUssSUFBSSxDQUFDO0FBQUEsTUFDcEUsT0FDSztBQUNELGFBQUssTUFBTSxpQkFBaUIsY0FBYyxNQUFNO0FBQzVDLGVBQUssdUJBQXVCO0FBQUEsUUFDaEMsQ0FBQztBQUFBLE1BQ0w7QUFBQSxJQUNKO0FBQUEsSUFDQSxPQUFPLElBQUk7QUFDUCxVQUFJLEtBQUssVUFBVSxLQUFLLHNCQUFzQjtBQUMxQyxZQUFJLEtBQUssU0FBUztBQUNkLGVBQUssUUFBUSxPQUFPO0FBQUEsUUFDeEIsT0FDSztBQUVELGVBQUssYUFBYTtBQUFBLFFBQ3RCO0FBQ0EsYUFBSyx1QkFBdUI7QUFBQSxNQUNoQztBQUFBLElBQ0o7QUFBQSxJQUNBLGNBQWM7QUFDVixXQUFLLHVCQUF1QjtBQUM1QixXQUFLLE1BQU0sMEJBQTBCLEtBQUssWUFBWSxLQUFLLElBQUksQ0FBQztBQUFBLElBQ3BFO0FBQUEsRUFDSjtBQTFFSSxnQkFERSxjQUNLLFlBQVc7QUFDbEIsZ0JBRkUsY0FFSyxjQUFhO0FBQUE7QUFBQSxJQUVoQixLQUFLLFNBQVMsT0FBTztBQUFBO0FBQUEsSUFFckIsVUFBVSxTQUFTLFNBQVM7QUFBQTtBQUFBLElBRTVCLE1BQU0sU0FBUyxLQUFLLElBQUk7QUFBQTtBQUFBLElBRXhCLFVBQVUsU0FBUyxLQUFLLElBQUk7QUFBQTtBQUFBLElBRTVCLE9BQU8sU0FBUyxLQUFLLElBQUk7QUFBQTtBQUFBLElBRXpCLGlCQUFpQixTQUFTLE9BQU8sTUFBTTtBQUFBLEVBQzNDOzs7QUNwQ0osTUFBTSxxQkFBTixjQUFpQyxVQUFVO0FBQUEsSUFZdkMsUUFBUTtBQUNKLFdBQUssYUFBYSxDQUFDO0FBQ25CLFdBQUssY0FBYyxLQUFLLE1BQU07QUFFOUIsV0FBSyxlQUFlO0FBQ3BCLFdBQUsseUJBQXlCLEtBQUssaUJBQWlCLEtBQUssSUFBSTtBQUM3RCxXQUFLLHVCQUF1QixLQUFLLGVBQWUsS0FBSyxJQUFJO0FBQUEsSUFDN0Q7QUFBQSxJQUNBLGFBQWE7QUFDVCxXQUFLLE9BQU8saUJBQWlCLElBQUksS0FBSyxzQkFBc0I7QUFDNUQsV0FBSyxPQUFPLGVBQWUsSUFBSSxLQUFLLG9CQUFvQjtBQUFBLElBQzVEO0FBQUEsSUFDQSxlQUFlO0FBQ1gsV0FBSyxPQUFPLGlCQUFpQixPQUFPLEtBQUssc0JBQXNCO0FBQy9ELFdBQUssT0FBTyxlQUFlLE9BQU8sS0FBSyxvQkFBb0I7QUFBQSxJQUMvRDtBQUFBLElBQ0EsY0FBYyxLQUFLO0FBQ2YsWUFBTSxRQUFRLElBQUksY0FBYyxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyx1QkFBdUI7QUFDbEYsV0FBSyxhQUFhLEtBQUssV0FBVyxPQUFPLEtBQUs7QUFDOUMsVUFBSSxLQUFLLGdCQUFnQjtBQUNyQixZQUFJLFdBQVcsSUFBSTtBQUNuQixpQkFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsRUFBRSxHQUFHO0FBQ3RDLGVBQUssY0FBYyxTQUFTLENBQUMsQ0FBQztBQUFBLFFBQ2xDO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFBQSxJQUNBLG9CQUFvQixRQUFRO0FBQ3hCLFlBQU0sUUFBUSxLQUFLO0FBQ25CLGVBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEVBQUUsR0FBRztBQUNuQyxjQUFNLENBQUMsRUFBRSxTQUFTO0FBQUEsTUFDdEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxtQkFBbUI7QUFDZixXQUFLLG9CQUFvQixLQUFLLHNCQUFzQixDQUFDO0FBQUEsSUFDekQ7QUFBQSxJQUNBLGlCQUFpQjtBQUNiLFdBQUssb0JBQW9CLEtBQUssc0JBQXNCLENBQUM7QUFBQSxJQUN6RDtBQUFBLEVBQ0o7QUFqREksZ0JBREUsb0JBQ0ssWUFBVztBQUNsQixnQkFGRSxvQkFFSyxjQUFhO0FBQUE7QUFBQSxJQUVoQixvQkFBb0I7QUFBQSxNQUNoQixNQUFNLEtBQUs7QUFBQSxNQUNYLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFBQSxNQUM3QixTQUFTO0FBQUEsSUFDYjtBQUFBO0FBQUEsSUFFQSxnQkFBZ0IsRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTLEtBQUs7QUFBQSxFQUNyRDs7O0FDUkosc0JBQW1CO0FBVm5CLE1BQUlFLGVBQTBDLFNBQVUsWUFBWSxRQUFRLEtBQUssTUFBTTtBQUNuRixRQUFJLElBQUksVUFBVSxRQUFRLElBQUksSUFBSSxJQUFJLFNBQVMsU0FBUyxPQUFPLE9BQU8sT0FBTyx5QkFBeUIsUUFBUSxHQUFHLElBQUksTUFBTTtBQUMzSCxRQUFJLE9BQU8sWUFBWSxZQUFZLE9BQU8sUUFBUSxhQUFhO0FBQVksVUFBSSxRQUFRLFNBQVMsWUFBWSxRQUFRLEtBQUssSUFBSTtBQUFBO0FBQ3hILGVBQVMsSUFBSSxXQUFXLFNBQVMsR0FBRyxLQUFLLEdBQUc7QUFBSyxZQUFJLElBQUksV0FBVyxDQUFDO0FBQUcsZUFBSyxJQUFJLElBQUksRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUUsUUFBUSxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsR0FBRyxNQUFNO0FBQ2hKLFdBQU8sSUFBSSxLQUFLLEtBQUssT0FBTyxlQUFlLFFBQVEsS0FBSyxDQUFDLEdBQUc7QUFBQSxFQUNoRTtBQU1BLE1BQU1DLFlBQVcsSUFBSSxhQUFhLENBQUM7QUFFbkMsV0FBUyxtQkFBbUIsS0FBSyxRQUFRO0FBQ3JDLFFBQUksT0FBTyxVQUFVO0FBQ2pCLGFBQU87QUFDWCxRQUFJLFVBQVUsS0FBSyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUM7QUFDbEMsUUFBSSxVQUFVLEtBQUssSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDO0FBQ2xDLGFBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxRQUFRLEVBQUUsR0FBRztBQUNwQyxnQkFBVSxLQUFLLElBQUksU0FBUyxLQUFLLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELGdCQUFVLEtBQUssSUFBSSxTQUFTLEtBQUssSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFBQSxJQUNyRDtBQUNBLFFBQUksQ0FBQyxJQUFJO0FBQ1QsUUFBSSxDQUFDLElBQUk7QUFDVCxRQUFJLENBQUMsSUFBSTtBQUFBLEVBQ2I7QUFFQSxXQUFTLE9BQU8sR0FBRyxHQUFHLEdBQUc7QUFDckIsUUFBSSxJQUFJO0FBQ0osYUFBTyxJQUFJLEtBQUssSUFBSTtBQUN4QixXQUFPLElBQUksS0FBSyxJQUFJO0FBQUEsRUFDeEI7QUFTTyxXQUFTLDZCQUE2QixHQUFHLE9BQU87QUFDbkQsVUFBTSxTQUFTLE1BQU07QUFDckIsUUFBSSxPQUFPLFNBQVM7QUFDaEIsYUFBTztBQUVYLFVBQU0sS0FBSyxFQUFFLENBQUM7QUFDZCxVQUFNLEtBQUssRUFBRSxDQUFDO0FBQ2QsUUFBSSxnQkFBZ0I7QUFDcEIsYUFBUyxJQUFJLEdBQUdDLEtBQUksT0FBTyxTQUFTLEdBQUcsSUFBSSxPQUFPLFFBQVEsRUFBRSxHQUFHO0FBQzNELFlBQU0sS0FBSyxPQUFPQSxFQUFDLEVBQUU7QUFDckIsWUFBTSxLQUFLLE9BQU9BLEVBQUMsRUFBRTtBQUNyQixZQUFNLEtBQUssT0FBTyxDQUFDLEVBQUUsSUFBSSxPQUFPLE9BQU8sQ0FBQyxFQUFFLElBQUk7QUFDOUMsWUFBTSxJQUFJLEtBQUssS0FBSyxLQUFLLE1BQU0sQ0FBQztBQUNoQyxVQUFJLEtBQUssS0FBTyxLQUFLLEtBQU8sT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDO0FBQ3RELFVBQUU7QUFDTixNQUFBQSxLQUFJO0FBQUEsSUFDUjtBQUNBLFlBQVEsZ0JBQWdCLE1BQU07QUFBQSxFQUNsQztBQVNPLFdBQVMsNkJBQTZCLFFBQVEsR0FBRyxPQUFPO0FBQzNELFFBQUksTUFBTSxRQUFRLFNBQVM7QUFDdkIsYUFBTztBQUNYLGlDQUE2QixPQUFPLDJCQUEyQkQsV0FBVSxDQUFDLEdBQUcsS0FBSztBQUFBLEVBQ3RGO0FBUUEsV0FBUyxxQkFBcUIsUUFBUSxRQUFRLGVBQWUsTUFBTTtBQUMvRCxVQUFNLGNBQWMsT0FBTztBQUMzQixVQUFNLFdBQVcsSUFBSSxhQUFhLGNBQWMsQ0FBQztBQUNqRCxhQUFTLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxhQUFhLEVBQUUsR0FBRyxLQUFLLEdBQUc7QUFDakQsZUFBUyxDQUFDLElBQUksT0FBTyxDQUFDLEVBQUU7QUFDeEIsZUFBUyxJQUFJLENBQUMsSUFBSSxPQUFPLENBQUMsRUFBRTtBQUFBLElBQ2hDO0FBQ0EsVUFBTSxnQkFBWSxjQUFBRSxTQUFPLFFBQVE7QUFDakMsVUFBTSxPQUFPLGdCQUNULElBQUksS0FBSyxRQUFRO0FBQUEsTUFDYjtBQUFBO0FBQUE7QUFBQSxNQUdBLFdBQVcsY0FBYztBQUFBLE1BQ3pCLFdBQVc7QUFBQSxJQUNmLENBQUM7QUFDTCxRQUFJLEtBQUssZ0JBQWdCLGFBQWE7QUFDbEMsY0FBUSxLQUFLLGdFQUFnRTtBQUM3RSxhQUFPO0FBQUEsSUFDWDtBQUNBLFVBQU0sWUFBWSxLQUFLLFVBQVUsY0FBYyxRQUFRO0FBQ3ZELFVBQU0sZ0JBQWdCLEtBQUssVUFBVSxjQUFjLGlCQUFpQjtBQUNwRSxVQUFNLFVBQVUsS0FBSyxVQUFVLGNBQWMsTUFBTTtBQUNuRCxJQUFBRixVQUFTLENBQUMsSUFBSTtBQUNkLGFBQVMsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLGFBQWEsRUFBRSxHQUFHLEtBQUssR0FBRztBQUNqRCxNQUFBQSxVQUFTLENBQUMsSUFBSSxTQUFTLENBQUM7QUFDeEIsTUFBQUEsVUFBUyxDQUFDLElBQUksU0FBUyxJQUFJLENBQUM7QUFDNUIsZ0JBQVUsSUFBSSxHQUFHQSxTQUFRO0FBQUEsSUFDN0I7QUFDQSxtQkFBZSxJQUFJLEdBQUcsUUFBUTtBQUM5QixRQUFJLFNBQVM7QUFDVCxNQUFBQSxVQUFTLENBQUMsSUFBSTtBQUNkLE1BQUFBLFVBQVMsQ0FBQyxJQUFJO0FBQ2QsTUFBQUEsVUFBUyxDQUFDLElBQUk7QUFDZCxlQUFTLElBQUksR0FBRyxJQUFJLGFBQWEsRUFBRSxHQUFHO0FBQ2xDLGdCQUFRLElBQUksR0FBR0EsU0FBUTtBQUFBLE1BQzNCO0FBQUEsSUFDSjtBQUNBLFFBQUk7QUFDQSxXQUFLLE9BQU87QUFDaEIsV0FBTztBQUFBLEVBQ1g7QUF4SEE7QUE0SEEsTUFBTSxpQkFBTixjQUE2QixVQUFVO0FBQUEsSUFBdkM7QUFBQTtBQStDSTtBQVFBO0FBcUJBO0FBT0E7QUE5RUE7QUFBQTtBQUFBO0FBQUEsMkNBQWdCO0FBS2hCO0FBQUE7QUFBQTtBQUFBO0FBQUEsMkNBQWdCO0FBRWhCO0FBQUEsb0NBQVMsb0JBQUksSUFBSTtBQUVqQjtBQUFBLDBDQUFlLG9CQUFJLElBQUk7QUFFdkI7QUFBQSwwQ0FBZSxJQUFJLFFBQVE7QUFFM0I7QUFBQSx5Q0FBYyxJQUFJLFFBQVE7QUFBQTtBQUFBLElBQzFCLFNBQVM7QUFDTCxVQUFJLENBQUMsS0FBSyxPQUFPLElBQUk7QUFDakI7QUFFSixVQUFJLEtBQUssT0FBTyxHQUFHLE1BQU0sbUJBQW1CLFFBQVc7QUFDbkQsZ0JBQVEsTUFBTSwrQ0FBK0M7QUFDN0QsYUFBSyxTQUFTO0FBQ2Q7QUFBQSxNQUNKO0FBRUEsWUFBTSxpQkFBaUIsS0FBSyxPQUFPLEdBQUcsTUFBTTtBQUM1QyxpQkFBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssUUFBUTtBQUNsQyxZQUFJLENBQUMsZUFBZSxJQUFJLEtBQUssR0FBRztBQUM1QixnQ0FBSywwQkFBTCxXQUFnQjtBQUFBLFFBQ3BCO0FBQUEsTUFDSjtBQUNBLHFCQUFlLFFBQVEsQ0FBQyxVQUFVO0FBQzlCLFlBQUksS0FBSyxPQUFPLElBQUksS0FBSyxHQUFHO0FBQ3hCLGNBQUksTUFBTSxrQkFBa0IsS0FBSyxPQUFPLElBQUksS0FBSyxHQUFHO0FBQ2hELGtDQUFLLDhCQUFMLFdBQWtCO0FBQUEsVUFDdEI7QUFBQSxRQUNKLE9BQ0s7QUFDRCxnQ0FBSyw0QkFBTCxXQUFpQjtBQUFBLFFBQ3JCO0FBQ0EsOEJBQUssc0NBQUwsV0FBc0I7QUFBQSxNQUMxQixDQUFDO0FBQUEsSUFDTDtBQUFBLEVBOENKO0FBN0NJO0FBQUEsaUJBQVUsU0FBQyxPQUFPO0FBQ2QsU0FBSyxPQUFPLE9BQU8sS0FBSztBQUN4QixVQUFNLElBQUksS0FBSyxhQUFhLElBQUksS0FBSztBQUNyQyxTQUFLLFlBQVksT0FBTyxPQUFPLENBQUM7QUFFaEMsUUFBSSxFQUFFLFdBQVc7QUFDYixRQUFFLFFBQVE7QUFBQSxFQUNsQjtBQUNBO0FBQUEsa0JBQVcsU0FBQyxPQUFPO0FBQ2YsU0FBSyxPQUFPLElBQUksT0FBTyxNQUFNLGVBQWU7QUFDNUMsVUFBTSxJQUFJLEtBQUssT0FBTyxNQUFNLFVBQVUsS0FBSyxNQUFNO0FBQ2pELFNBQUssYUFBYSxJQUFJLE9BQU8sQ0FBQztBQUM5QixRQUFJLEtBQUssZUFBZTtBQUNwQixRQUFFLGFBQWEsZUFBZTtBQUFBLFFBQzFCLE1BQU0scUJBQXFCLEtBQUssUUFBUSxNQUFNLE9BQU87QUFBQSxRQUNyRCxVQUFVLEtBQUs7QUFBQSxNQUNuQixDQUFDO0FBQUEsSUFDTDtBQUNBLFFBQUksS0FBSyxpQkFBaUIsR0FBRztBQUN6Qix5QkFBbUJBLFdBQVUsTUFBTSxPQUFPO0FBQzFDLE1BQUFBLFVBQVMsQ0FBQyxJQUFJO0FBQ2QsUUFBRSxhQUFhLG9CQUFvQjtBQUFBLFFBQy9CLE9BQU8sS0FBSztBQUFBLFFBQ1osVUFBVSxTQUFTO0FBQUEsUUFDbkIsU0FBU0E7QUFBQSxNQUNiLENBQUM7QUFBQSxJQUNMO0FBQ0EsU0FBSyxhQUFhLE9BQU8sT0FBTyxDQUFDO0FBQUEsRUFDckM7QUFDQTtBQUFBLG1CQUFZLFNBQUMsT0FBTztBQUNoQixTQUFLLE9BQU8sSUFBSSxPQUFPLE1BQU0sZUFBZTtBQUM1QyxVQUFNLFlBQVksS0FBSyxhQUFhLElBQUksS0FBSyxFQUFFLGFBQWEsYUFBYTtBQUN6RSxRQUFJLENBQUM7QUFDRDtBQUNKLHlCQUFxQixLQUFLLFFBQVEsTUFBTSxTQUFTLFVBQVUsSUFBSTtBQUFBLEVBQ25FO0FBQ0E7QUFBQSx1QkFBZ0IsU0FBQyxPQUFPO0FBQ3BCLFVBQU0sSUFBSSxLQUFLLGFBQWEsSUFBSSxLQUFLO0FBQ3JDLFVBQU0sT0FBTyxLQUFLLE9BQU8sR0FBRyxNQUFNLFFBQVEsTUFBTSxZQUFZLEtBQUssT0FBTyxHQUFHLHFCQUFxQjtBQUNoRyxRQUFJLENBQUMsTUFBTTtBQUNQLFFBQUUsU0FBUztBQUNYO0FBQUEsSUFDSjtBQUNBLDZCQUF5QixHQUFHLEtBQUssU0FBUztBQUFBLEVBQzlDO0FBMUZBLGdCQURFLGdCQUNLLFlBQVc7QUE0RnRCLEVBQUFELGFBQVc7QUFBQSxJQUNQLFNBQVMsU0FBUztBQUFBLEVBQ3RCLEdBQUcsZUFBZSxXQUFXLGlCQUFpQixNQUFNO0FBQ3BELEVBQUFBLGFBQVc7QUFBQSxJQUNQLFNBQVMsSUFBSTtBQUFBLEVBQ2pCLEdBQUcsZUFBZSxXQUFXLGlCQUFpQixNQUFNOzs7QUM1TnBELE1BQU0sZ0JBQWdCO0FBQUEsSUFDbEIsR0FBRyxDQUFDLEdBQUssR0FBSyxDQUFHO0FBQUEsSUFDakIsR0FBRyxDQUFDLEdBQUssR0FBSyxDQUFHO0FBQUEsSUFDakIsR0FBRyxDQUFDLEdBQUssR0FBSyxDQUFHO0FBQUEsRUFDckI7QUFDQSxNQUFNLGVBQWU7QUFBQSxJQUNqQixXQUFXLENBQUMsR0FBSyxHQUFLLENBQUc7QUFBQSxJQUN6QixXQUFXLENBQUMsSUFBTSxHQUFLLENBQUc7QUFBQSxJQUMxQixXQUFXLENBQUMsR0FBSyxHQUFLLENBQUc7QUFBQSxJQUN6QixXQUFXLENBQUMsR0FBSyxJQUFNLENBQUc7QUFBQSxJQUMxQixXQUFXLENBQUMsR0FBSyxHQUFLLENBQUc7QUFBQSxJQUN6QixXQUFXLENBQUMsR0FBSyxHQUFLLEVBQUk7QUFBQSxFQUM5QjtBQXlCQSxNQUFNLE1BQU4sY0FBa0IsVUFBVTtBQUFBO0FBQUEsSUFTeEIsT0FBTztBQUFBO0FBQUEsSUFFUCxRQUFRO0FBQUE7QUFBQSxNQUVKLE1BQU07QUFBQSxNQUNOLE9BQU87QUFBQSxNQUNQLE9BQU87QUFBQSxNQUNQLFlBQVk7QUFBQSxNQUNaLE1BQU07QUFBQTtBQUFBLE1BRU4sTUFBTTtBQUFBLE1BQ04sU0FBUztBQUFBLE1BQ1QsVUFBVTtBQUFBLE1BQ1YsS0FBSztBQUFBO0FBQUEsTUFFTCxjQUFjO0FBQUEsTUFDZCxjQUFjO0FBQUEsTUFDZCxVQUFVO0FBQUEsTUFDVixVQUFVO0FBQUEsTUFDVixlQUFlO0FBQUEsTUFDZixlQUFlO0FBQUEsTUFDZixXQUFXO0FBQUEsTUFDWCxXQUFXO0FBQUE7QUFBQSxNQUVYLGNBQWM7QUFBQSxNQUNkLGNBQWM7QUFBQSxNQUNkLGNBQWM7QUFBQSxNQUNkLFVBQVU7QUFBQSxNQUNWLGVBQWU7QUFBQSxNQUNmLGVBQWU7QUFBQSxNQUNmLGVBQWU7QUFBQSxNQUNmLFdBQVc7QUFBQTtBQUFBLE1BRVgscUJBQXFCO0FBQUEsTUFDckIsbUJBQW1CO0FBQUEsTUFDbkIsaUJBQWlCO0FBQUEsTUFDakIsbUJBQW1CO0FBQUEsTUFDbkIsdUJBQXVCO0FBQUEsTUFDdkIsaUJBQWlCO0FBQUEsTUFDakIsb0JBQW9CO0FBQUEsTUFDcEIsd0JBQXdCO0FBQUEsTUFDeEIsa0JBQWtCO0FBQUEsTUFDbEIsa0JBQWtCO0FBQUEsTUFDbEIsc0JBQXNCO0FBQUEsTUFDdEIsZ0JBQWdCO0FBQUEsTUFDaEIsb0JBQW9CO0FBQUEsTUFDcEIsd0JBQXdCO0FBQUEsTUFDeEIsa0JBQWtCO0FBQUEsTUFDbEIsc0JBQXNCO0FBQUEsTUFDdEIsb0JBQW9CO0FBQUEsTUFDcEIsa0JBQWtCO0FBQUEsTUFDbEIsb0JBQW9CO0FBQUEsTUFDcEIsd0JBQXdCO0FBQUEsTUFDeEIsa0JBQWtCO0FBQUEsTUFDbEIscUJBQXFCO0FBQUEsTUFDckIseUJBQXlCO0FBQUEsTUFDekIsbUJBQW1CO0FBQUEsTUFDbkIsbUJBQW1CO0FBQUEsTUFDbkIsdUJBQXVCO0FBQUEsTUFDdkIsaUJBQWlCO0FBQUEsTUFDakIscUJBQXFCO0FBQUEsTUFDckIseUJBQXlCO0FBQUEsTUFDekIsbUJBQW1CO0FBQUEsSUFDdkI7QUFBQTtBQUFBLElBRUEsV0FBVyxDQUFDO0FBQUE7QUFBQSxJQUVaLG1CQUFtQixDQUFDO0FBQUE7QUFBQSxJQUVwQixnQkFBZ0IsQ0FBQztBQUFBO0FBQUEsSUFFakIsbUJBQW1CLENBQUM7QUFBQTtBQUFBLElBRXBCLG9CQUFvQixDQUFDO0FBQUE7QUFBQSxJQUVyQiwwQkFBMEIsQ0FBQztBQUFBO0FBQUEsSUFFM0IsVUFBVTtBQUFBO0FBQUEsSUFFVixlQUFlO0FBQUEsSUFDZixPQUFPO0FBQ0gsV0FBSyxVQUFVLGFBQUssT0FBTztBQUMzQixXQUFLLFdBQVcsYUFBSyxPQUFPO0FBQzVCLFdBQUssV0FBVyxhQUFLLE9BQU87QUFDNUIsV0FBSyxZQUFZLGFBQUssT0FBTztBQUM3QixXQUFLLGFBQWEsYUFBSyxPQUFPO0FBQzlCLFdBQUssYUFBYSxhQUFLLE9BQU87QUFDOUIsV0FBSyxhQUFhLGFBQUssT0FBTztBQUM5QixXQUFLLGFBQWEsY0FBTSxPQUFPO0FBQy9CLFdBQUssZUFBZSxhQUFLLE9BQU87QUFDaEMsV0FBSyxjQUFjLGFBQUssT0FBTztBQUMvQixXQUFLLFdBQVcsYUFBSyxPQUFPO0FBQzVCLFdBQUssYUFBYSxhQUFLLE9BQU87QUFDOUIsV0FBSyxZQUFZLGFBQUssT0FBTztBQUM3QixXQUFLLGVBQWUsYUFBSyxJQUFJLGFBQUssT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ25ELFdBQUssWUFBWSxhQUFLLElBQUksYUFBSyxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEQsV0FBSyxpQkFBaUIsYUFBSyxJQUFJLGFBQUssT0FBTyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ3JELFdBQUssZ0JBQWdCLGFBQUssU0FBUyxhQUFLLE9BQU8sQ0FBQztBQUNoRCxXQUFLLFdBQVcsTUFBUSxLQUFLO0FBQUEsSUFDakM7QUFBQSxJQUNBLFFBQVE7QUFDSixVQUFJLENBQUMsS0FBSyxLQUFLO0FBQ1gsZ0JBQVEsTUFBTSwyQkFBMkI7QUFDekM7QUFBQSxNQUNKO0FBQ0EsV0FBSyxPQUFPLE1BQ1AsT0FBTyxLQUFLLEtBQUssRUFBRSxvQkFBb0IsS0FBSyxDQUFDLEVBQzdDLEtBQUssQ0FBQyxFQUFFLE1BQU0sV0FBVyxNQUFNO0FBQ2hDLGFBQUssU0FBUyxRQUFRLENBQUMsVUFBVyxNQUFNLFNBQVMsS0FBSyxNQUFPO0FBQzdELGFBQUssZUFBZSxVQUFVO0FBQzlCLGFBQUssUUFBUTtBQUFBLE1BQ2pCLENBQUM7QUFBQSxJQUNMO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBLGVBQWUsWUFBWTtBQUN2QixVQUFJLEtBQUssY0FBYztBQUNuQixjQUFNLE1BQU0sNENBQTRDO0FBQUEsTUFDNUQ7QUFDQSxZQUFNLFdBQVcsV0FBVyxLQUFLLFVBQVU7QUFDM0MsVUFBSSxDQUFDLFVBQVU7QUFDWCxjQUFNLE1BQU0sd0JBQXdCO0FBQUEsTUFDeEM7QUFDQSxVQUFJLFNBQVMsZ0JBQWdCLE9BQU87QUFDaEMsY0FBTSxNQUFNLG9FQUFvRSxTQUFTLGNBQWM7QUFBQSxNQUMzRztBQUNBLFdBQUssT0FBTyxTQUFTO0FBQ3JCLFdBQUssZUFBZSxTQUFTLFVBQVUsVUFBVTtBQUNqRCxVQUFJLFNBQVMsYUFBYTtBQUN0QixhQUFLLGtCQUFrQixTQUFTLGFBQWEsVUFBVTtBQUFBLE1BQzNEO0FBQ0EsVUFBSSxTQUFTLFFBQVE7QUFDakIsYUFBSyxhQUFhLFNBQVMsTUFBTTtBQUFBLE1BQ3JDO0FBQ0EsV0FBSyw2QkFBNkIsVUFBVTtBQUM1QyxZQUFNLGFBQWEsV0FBVyxLQUFLLGlCQUFpQjtBQUNwRCxVQUFJLFlBQVk7QUFDWixhQUFLLCtCQUErQixZQUFZLFVBQVU7QUFBQSxNQUM5RDtBQUNBLFdBQUssZUFBZTtBQUFBLElBQ3hCO0FBQUEsSUFDQSxlQUFlLFVBQVUsWUFBWTtBQUNqQyxpQkFBVyxZQUFZLFNBQVMsWUFBWTtBQUN4QyxZQUFJLEVBQUUsWUFBWSxLQUFLLFFBQVE7QUFDM0Isa0JBQVEsS0FBSyxzQkFBc0IsV0FBVztBQUM5QztBQUFBLFFBQ0o7QUFDQSxjQUFNLE9BQU8sU0FBUyxXQUFXLFFBQVEsRUFBRTtBQUMzQyxjQUFNLFdBQVcsV0FBVyxVQUFVLElBQUk7QUFDMUMsYUFBSyxNQUFNLFFBQVEsSUFBSSxLQUFLLE9BQU8sV0FBVyxRQUFRO0FBQ3RELGFBQUssU0FBUyxRQUFRLElBQUksYUFBSyxLQUFLLGFBQUssT0FBTyxHQUFHLEtBQUssTUFBTSxRQUFRLEVBQUUsYUFBYTtBQUFBLE1BQ3pGO0FBQUEsSUFDSjtBQUFBLElBQ0Esa0JBQWtCLGFBQWEsWUFBWTtBQUN2QyxpQkFBVyxrQkFBa0IsWUFBWSxpQkFBaUI7QUFDdEQsY0FBTSxhQUFhO0FBQUEsVUFDZixNQUFNLEtBQUssT0FBTyxXQUFXLFdBQVcsVUFBVSxlQUFlLElBQUksQ0FBQztBQUFBLFVBQ3RFLGFBQWE7QUFBQSxVQUNiLGFBQWE7QUFBQSxRQUNqQjtBQUNBLGdCQUFRLGVBQWUsTUFBTTtBQUFBLFVBQ3pCLEtBQUs7QUFDRCx1QkFBVyxjQUFjO0FBQ3pCO0FBQUEsVUFDSixLQUFLO0FBQ0QsdUJBQVcsY0FBYztBQUN6QjtBQUFBLFVBQ0osS0FBSztBQUNEO0FBQUEsVUFDSixLQUFLO0FBQ0Qsb0JBQVEsS0FBSyxnRkFBZ0Y7QUFDN0Y7QUFBQSxVQUNKO0FBQ0ksb0JBQVEsTUFBTSxpQ0FBaUMsZUFBZSxPQUFPO0FBQ3JFO0FBQUEsUUFDUjtBQUNBLGFBQUssd0JBQXdCLEtBQUssVUFBVTtBQUFBLE1BQ2hEO0FBQUEsSUFDSjtBQUFBLElBQ0EsYUFBYUksU0FBUTtBQUNqQixVQUFJQSxRQUFPLFNBQVMsUUFBUTtBQUN4QixnQkFBUSxLQUFLLDRCQUE0QkEsUUFBTyxpQ0FBaUM7QUFDakY7QUFBQSxNQUNKO0FBQ0EsWUFBTSxnQkFBZ0IsQ0FBQyxhQUFhO0FBQ2hDLGVBQU87QUFBQSxVQUNILGVBQWUsU0FBUztBQUFBLFVBQ3hCLGFBQWEsU0FBUztBQUFBLFFBQzFCO0FBQUEsTUFDSjtBQUNBLFdBQUssVUFBVTtBQUFBLFFBQ1gsb0JBQW9CQSxRQUFPLHNCQUFzQixDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDekQsaUJBQWlCLGNBQWNBLFFBQU8sdUJBQXVCO0FBQUEsUUFDN0QsaUJBQWlCLGNBQWNBLFFBQU8sdUJBQXVCO0FBQUEsUUFDN0QsY0FBYyxjQUFjQSxRQUFPLG9CQUFvQjtBQUFBLFFBQ3ZELFlBQVksY0FBY0EsUUFBTyxrQkFBa0I7QUFBQSxNQUN2RDtBQUFBLElBQ0o7QUFBQSxJQUNBLDZCQUE2QixZQUFZO0FBQ3JDLFlBQU0sV0FBVyxDQUFDLFdBQVc7QUFDekIsY0FBTSxpQkFBaUIsV0FBVyxLQUFLLE9BQU8sUUFBUTtBQUN0RCxZQUFJLGtCQUFrQiwwQkFBMEIsZ0JBQWdCO0FBQzVELGdCQUFNLDBCQUEwQixlQUFlLHNCQUFzQjtBQUNyRSxnQkFBTSxhQUFhLHdCQUF3QjtBQUMzQyxjQUFJLE1BQU07QUFDVixjQUFJLFVBQVUsWUFBWTtBQUN0QixtQkFBTztBQUNQLG1CQUFPLGNBQWMsV0FBVyxLQUFLLFFBQVE7QUFBQSxVQUNqRCxXQUNTLFNBQVMsWUFBWTtBQUMxQixtQkFBTztBQUNQLG1CQUFPLGFBQWEsV0FBVyxJQUFJLE9BQU87QUFBQSxVQUM5QyxXQUNTLGNBQWMsWUFBWTtBQUMvQixtQkFBTztBQUFBLFVBQ1g7QUFDQSxjQUFJLE1BQU07QUFDTixrQkFBTSxTQUFTLEtBQUssT0FBTyxXQUFXLFdBQVcsVUFBVSxXQUFXLElBQUksRUFBRSxNQUFNLENBQUM7QUFDbkYsaUJBQUssaUJBQWlCLEtBQUs7QUFBQSxjQUN2QjtBQUFBLGNBQ0E7QUFBQSxjQUNBLGFBQWE7QUFBQSxjQUNiO0FBQUEsY0FDQSxRQUFRLFdBQVcsSUFBSSxFQUFFO0FBQUE7QUFBQSxjQUV6Qiw4QkFBOEIsYUFBSyxLQUFLLGFBQUssT0FBTyxHQUFHLE9BQU8sYUFBYTtBQUFBLGNBQzNFLHlCQUF5QixhQUFLLEtBQUssYUFBSyxPQUFPLEdBQUcsT0FBTyxhQUFhO0FBQUEsY0FDdEUsNEJBQTRCLGFBQUssT0FBTyxhQUFLLE9BQU8sR0FBRyxPQUFPLGFBQWE7QUFBQSxZQUMvRSxDQUFDO0FBQUEsVUFDTCxPQUNLO0FBQ0Qsb0JBQVEsS0FBSywyREFBMkQ7QUFBQSxVQUM1RTtBQUFBLFFBQ0o7QUFDQSxtQkFBVyxTQUFTLE9BQU8sVUFBVTtBQUNqQyxtQkFBUyxLQUFLO0FBQUEsUUFDbEI7QUFBQSxNQUNKO0FBQ0EsZUFBUyxLQUFLLE1BQU07QUFBQSxJQUN4QjtBQUFBLElBQ0EsK0JBQStCLFlBQVksWUFBWTtBQUNuRCxZQUFNLGFBQWEsV0FBVyxhQUFhLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxNQUFNO0FBQ2hFLGNBQU0sWUFBWSxhQUFhLFNBQVMsUUFBUSxZQUFZO0FBQzVELGVBQU87QUFBQSxVQUNILElBQUk7QUFBQSxVQUNKLFFBQVEsS0FBSyxPQUFPLFdBQVcsV0FBVyxVQUFVLFNBQVMsSUFBSSxDQUFDO0FBQUEsVUFDbEUsT0FBTztBQUFBLFlBQ0gsV0FBVyxjQUFjO0FBQUEsWUFDekIsUUFBUSxTQUFTLE1BQU0sU0FBUyxFQUFFO0FBQUEsWUFDbEMsUUFBUSxTQUFTLE1BQU0sU0FBUyxFQUFFO0FBQUEsWUFDbEMsTUFBTSxTQUFTLE1BQU0sU0FBUyxFQUFFO0FBQUEsVUFDcEM7QUFBQSxVQUNBLE9BQU87QUFBQSxZQUNILE1BQU0sYUFBSyxPQUFPO0FBQUEsWUFDbEIsTUFBTSxhQUFLLE9BQU87QUFBQSxVQUN0QjtBQUFBLFFBQ0o7QUFBQSxNQUNKLENBQUM7QUFDRCxXQUFLLG1CQUFtQixVQUFVLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLFNBQVM7QUFDbEUsV0FBSyxvQkFBb0IsVUFBVSxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sU0FBUztBQUNsRSxZQUFNLGtCQUFrQixXQUFXLGtCQUFrQixDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVc7QUFBQSxRQUNyRSxNQUFNLE1BQU07QUFBQSxRQUNaLFdBQVcsTUFBTSxVQUFVLElBQUksQ0FBQyxNQUFNLFVBQVUsQ0FBQyxDQUFDO0FBQUEsTUFDdEQsRUFBRTtBQUNGLGlCQUFXLFVBQVUsV0FBVyxTQUFTO0FBQ3JDLGNBQU0sU0FBUyxDQUFDO0FBQ2hCLG1CQUFXLFNBQVMsT0FBTyxRQUFRO0FBQy9CLGdCQUFNLGNBQWM7QUFBQSxZQUNoQixXQUFXO0FBQUEsWUFDWCxXQUFXO0FBQUEsWUFDWCxjQUFjO0FBQUEsWUFDZCxZQUFZLENBQUMsR0FBSyxJQUFNLENBQUc7QUFBQSxZQUMzQixXQUFXO0FBQUEsWUFDWCxNQUFNO0FBQUEsWUFDTixPQUFPO0FBQUEsVUFDWDtBQUNBLGlCQUFPLE9BQU8sYUFBYSxLQUFLO0FBQ2hDLHNCQUFZLE9BQU8sS0FBSyxPQUFPLFdBQVcsV0FBVyxVQUFVLFlBQVksSUFBSSxDQUFDO0FBQ2hGLGlCQUFPLEtBQUssV0FBVztBQUFBLFFBQzNCO0FBQ0EsY0FBTSx3QkFBd0IsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLGVBQWUsRUFBRSxFQUFFLFNBQVM7QUFDdkcsYUFBSyxjQUFjLEtBQUs7QUFBQSxVQUNwQixNQUFNLE9BQU87QUFBQSxVQUNiLFFBQVEsT0FBTyxTQUNULEtBQUssT0FBTyxXQUFXLFdBQVcsVUFBVSxPQUFPLE1BQU0sQ0FBQyxJQUMxRDtBQUFBLFVBQ047QUFBQSxVQUNBLGlCQUFpQixxQkFBcUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sU0FBUztBQUFBLFVBQ3RFLGtCQUFrQixxQkFBcUIsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLFNBQVM7QUFBQSxRQUMxRSxDQUFDO0FBQUEsTUFDTDtBQUVBLGlCQUFXLGVBQWUsS0FBSyxlQUFlO0FBQzFDLGlCQUFTLElBQUksR0FBRyxJQUFJLFlBQVksT0FBTyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQ3BELGdCQUFNLGtCQUFrQixZQUFZLE9BQU8sQ0FBQztBQUM1QyxnQkFBTSx1QkFBdUIsWUFBWSxPQUFPLElBQUksQ0FBQztBQUNyRCxnQkFBTSxxQkFBcUIsZ0JBQWdCLEtBQUssb0JBQW9CLGFBQUssT0FBTyxDQUFDO0FBQ2pGLGdCQUFNLDBCQUEwQixxQkFBcUIsS0FBSyxvQkFBb0IsYUFBSyxPQUFPLENBQUM7QUFDM0YsZ0JBQU0sZ0JBQWdCLGFBQUssU0FBUyxLQUFLLFVBQVUsb0JBQW9CLHVCQUF1QjtBQUM5RixnQkFBTSxRQUFRO0FBQUEsWUFDVixVQUFVO0FBQUEsWUFDVixhQUFhLGFBQUssS0FBSyxhQUFLLE9BQU8sR0FBRyx1QkFBdUI7QUFBQSxZQUM3RCxzQkFBc0IsYUFBSyxLQUFLLGFBQUssT0FBTyxHQUFHLGdCQUFnQixLQUFLLGFBQWE7QUFBQSxZQUNqRiw2QkFBNkIsY0FBTSxPQUFPLGNBQU0sT0FBTyxHQUFHLGdCQUFnQixLQUFLLGNBQWM7QUFBQSxZQUM3RixVQUFVLGFBQUssVUFBVSxhQUFLLE9BQU8sR0FBRyxxQkFBcUIsS0FBSyxvQkFBb0IsS0FBSyxPQUFPLENBQUM7QUFBQTtBQUFBLFlBRW5HLFlBQVksS0FBSyxJQUFJLE1BQU0sYUFBSyxPQUFPLGFBQWEsQ0FBQztBQUFBO0FBQUEsWUFFckQsZ0JBQWdCO0FBQUEsWUFDaEIsbUJBQW1CO0FBQUEsVUFDdkI7QUFDQSxjQUFJLFlBQVksUUFBUTtBQUNwQixrQkFBTSxpQkFBaUIsWUFBWSxPQUFPLDJCQUEyQixhQUFLLE9BQU8sR0FBRyx1QkFBdUI7QUFDM0csa0JBQU0sb0JBQW9CLGFBQUssS0FBSyxhQUFLLE9BQU8sR0FBRyx1QkFBdUI7QUFBQSxVQUM5RTtBQUNBLDBCQUFnQixRQUFRO0FBQUEsUUFDNUI7QUFBQSxNQUNKO0FBQUEsSUFDSjtBQUFBLElBQ0EsT0FBTyxJQUFJO0FBQ1AsVUFBSSxDQUFDLEtBQUssY0FBYztBQUNwQjtBQUFBLE1BQ0o7QUFHQSxXQUFLLGVBQWU7QUFJcEIsV0FBSyxvQkFBb0I7QUFFekIsV0FBSyxtQkFBbUIsRUFBRTtBQUFBLElBQzlCO0FBQUEsSUFDQSxVQUFVLFVBQVUsT0FBTztBQUN2QixZQUFNLFdBQVcsU0FBUztBQUMxQixZQUFNLGNBQWMsU0FBUztBQUM3QixhQUFRLEtBQUssSUFBSSxPQUFPLFFBQVEsSUFBSSxXQUFZO0FBQUEsSUFDcEQ7QUFBQSxJQUNBLGlCQUFpQjtBQUNiLFVBQUksQ0FBQyxLQUFLLFdBQVcsQ0FBQyxLQUFLLGNBQWM7QUFDckM7QUFBQSxNQUNKO0FBQ0EsWUFBTSxlQUFlLEtBQUssTUFBTSxLQUFLLG9CQUFvQixLQUFLLFVBQVUsS0FBSyxRQUFRLGtCQUFrQjtBQUN2RyxZQUFNLGVBQWUsS0FBSyxhQUFhLG9CQUFvQixLQUFLLFFBQVE7QUFDeEUsWUFBTSxrQkFBa0IsYUFBSyxJQUFJLEtBQUssVUFBVSxjQUFjLFlBQVk7QUFDMUUsbUJBQUssVUFBVSxpQkFBaUIsZUFBZTtBQUUvQyxXQUFLLE1BQU0sS0FBSyxPQUFPLDRCQUE0QixlQUFlO0FBQ2xFLFlBQU0sSUFBSSxhQUFLLElBQUksaUJBQWlCLEtBQUssY0FBYztBQUN2RCxZQUFNLElBQUksYUFBSyxJQUFJLGlCQUFpQixLQUFLLFlBQVk7QUFDckQsWUFBTSxNQUFNLEtBQUssTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLO0FBQ3BDLFlBQU0sS0FBSyxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQztBQUNsQyxZQUFNLElBQUksYUFBSyxJQUFJLGlCQUFpQixLQUFLLFNBQVM7QUFDbEQsVUFBSSxRQUFRLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLEtBQUs7QUFFdEMsVUFBSSxRQUFRLEdBQUc7QUFDWCxnQkFBUSxLQUFLLFVBQVUsS0FBSyxRQUFRLGNBQWMsS0FBSztBQUFBLE1BQzNELE9BQ0s7QUFDRCxnQkFBUSxDQUFDLEtBQUssVUFBVSxLQUFLLFFBQVEsWUFBWSxDQUFDLEtBQUs7QUFBQSxNQUMzRDtBQUVBLFVBQUksS0FBSyxNQUFNLFNBQVM7QUFDcEIsWUFBSSxVQUFVO0FBQ2QsWUFBSSxVQUFVLEdBQUc7QUFDYixvQkFBVSxLQUFLLFVBQVUsS0FBSyxRQUFRLGlCQUFpQixPQUFPO0FBQUEsUUFDbEUsT0FDSztBQUNELG9CQUFVLENBQUMsS0FBSyxVQUFVLEtBQUssUUFBUSxpQkFBaUIsQ0FBQyxPQUFPO0FBQUEsUUFDcEU7QUFDQSxjQUFNLGNBQWMsYUFBSyxVQUFVLEtBQUssWUFBWSxPQUFPLFNBQVMsQ0FBQztBQUNyRSxhQUFLLE1BQU0sUUFBUSxnQkFBZ0IsYUFBSyxTQUFTLGFBQWEsS0FBSyxTQUFTLFNBQVMsV0FBVztBQUFBLE1BQ3BHO0FBRUEsVUFBSSxLQUFLLE1BQU0sVUFBVTtBQUNyQixZQUFJLFdBQVc7QUFDZixZQUFJLFdBQVcsR0FBRztBQUNkLHFCQUFXLEtBQUssVUFBVSxLQUFLLFFBQVEsaUJBQWlCLFFBQVE7QUFBQSxRQUNwRSxPQUNLO0FBQ0QscUJBQVcsQ0FBQyxLQUFLLFVBQVUsS0FBSyxRQUFRLGlCQUFpQixDQUFDLFFBQVE7QUFBQSxRQUN0RTtBQUNBLGNBQU0sY0FBYyxhQUFLLFVBQVUsS0FBSyxZQUFZLE9BQU8sVUFBVSxDQUFDO0FBQ3RFLGFBQUssTUFBTSxTQUFTLGdCQUFnQixhQUFLLFNBQVMsYUFBYSxLQUFLLFNBQVMsVUFBVSxXQUFXO0FBQUEsTUFDdEc7QUFBQSxJQUNKO0FBQUEsSUFDQSxzQkFBc0I7QUFDbEIsaUJBQVcsa0JBQWtCLEtBQUssa0JBQWtCO0FBQ2hELGFBQUssbUJBQW1CLGNBQWM7QUFBQSxNQUMxQztBQUFBLElBQ0o7QUFBQSxJQUNBLG1CQUFtQixnQkFBZ0I7QUFDL0IsWUFBTSxjQUFjLGVBQWU7QUFDbkMsWUFBTSxpQkFBaUIsZUFBZTtBQUN0QyxZQUFNLGFBQWEsYUFBSyxTQUFTLEtBQUssVUFBVTtBQUNoRCxjQUFRLGVBQWUsTUFBTTtBQUFBLFFBQ3pCLEtBQUs7QUFDRDtBQUNJLGtCQUFNLGVBQWUsYUFBSyxTQUFTLEtBQUssWUFBWSxnQkFBZ0IsZUFBZSxPQUFPLGFBQWE7QUFFdkcsa0JBQU0sdUJBQXVCLGFBQUssU0FBUyxLQUFLLFlBQVksZUFBZSx5QkFBeUIsWUFBWTtBQUNoSCx5QkFBSyxJQUFJLHNCQUFzQixzQkFBc0IsY0FBYztBQUVuRSxrQkFBTSxpQkFBaUIsYUFBSyxPQUFPLEtBQUssWUFBWSxXQUFXO0FBQy9ELGtCQUFNLG9CQUFvQixhQUFLLFNBQVMsS0FBSyxZQUFZLGdCQUFnQixvQkFBb0I7QUFDN0YseUJBQUssU0FBUyxtQkFBbUIsbUJBQW1CLFdBQVc7QUFDL0Qsa0JBQU0sUUFBUSxhQUFLLGNBQWMsS0FBSyxVQUFVLGVBQWUsTUFBTSxpQkFBaUI7QUFDdEYsa0JBQU0sYUFBYSxhQUFLLFdBQVcsS0FBSyxZQUFZLGVBQWUsTUFBTSxLQUFLO0FBQzlFLHlCQUFLLElBQUksWUFBWSxhQUFhLGFBQUssT0FBTyxLQUFLLFdBQVcsVUFBVSxDQUFDO0FBQ3pFLHlCQUFLLElBQUksWUFBWSxZQUFZLGlCQUFpQjtBQUFBLFVBQ3REO0FBQ0E7QUFBQSxRQUNKLEtBQUs7QUFDRDtBQUNJLGtCQUFNLHFCQUFxQixlQUFlLFlBQVksT0FBTztBQUU3RCxrQkFBTSxVQUFVLGFBQUssY0FBYyxLQUFLLFVBQVUsZUFBZSxNQUFNLFdBQVc7QUFDbEYseUJBQUssY0FBYyxTQUFTLFNBQVMsa0JBQWtCO0FBRXZELGtCQUFNLFFBQVEsZUFBZSxPQUFPLG9CQUFvQixLQUFLLFFBQVE7QUFDckUseUJBQUssSUFBSSxPQUFPLE9BQU8sZUFBZSxZQUFZLG9CQUFvQixLQUFLLE9BQU8sQ0FBQztBQUNuRix5QkFBSyxVQUFVLE9BQU8sS0FBSztBQUUzQixrQkFBTSxhQUFhLGFBQUssV0FBVyxLQUFLLFlBQVksU0FBUyxLQUFLO0FBQ2xFLHlCQUFLLElBQUksWUFBWSxhQUFLLE9BQU8sS0FBSyxXQUFXLGtCQUFrQixHQUFHLFVBQVU7QUFDaEYseUJBQUssSUFBSSxZQUFZLFlBQVksa0JBQWtCO0FBQ25ELHlCQUFLLElBQUksWUFBWSxZQUFZLFdBQVc7QUFBQSxVQUNoRDtBQUNBO0FBQUEsUUFDSixLQUFLO0FBQ0Q7QUFDSSxrQkFBTSxlQUFlLGFBQUssSUFBSSxZQUFZLGdCQUFnQixlQUFlLE9BQU8sYUFBYTtBQUM3Rix5QkFBSyxJQUFJLFlBQVksYUFBYSxZQUFZO0FBQUEsVUFDbEQ7QUFDQTtBQUFBLE1BQ1I7QUFFQSxtQkFBSyxNQUFNLFlBQVksYUFBYSxZQUFZLGVBQWUsTUFBTTtBQUNyRSxxQkFBZSxZQUFZLGdCQUFnQjtBQUFBLElBQy9DO0FBQUEsSUFDQSxtQkFBbUIsSUFBSTtBQUVuQixXQUFLLGlCQUFpQixRQUFRLENBQUMsRUFBRSxRQUFRLE9BQU8sTUFBTSxNQUFNO0FBQ3hELGNBQU1DLFVBQVMsYUFBSyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDakQsZUFBTyxxQkFBcUJBLE9BQU07QUFDbEMscUJBQUssSUFBSSxNQUFNLE1BQU0sT0FBTyxvQkFBb0IsS0FBSyxPQUFPLEdBQUdBLE9BQU07QUFBQSxNQUN6RSxDQUFDO0FBQ0QsV0FBSyxrQkFBa0IsUUFBUSxDQUFDLEVBQUUsUUFBUSxPQUFPLE1BQU0sTUFBTTtBQUN6RCxjQUFNLGNBQWMsT0FBTyxvQkFBb0IsS0FBSyxRQUFRO0FBQzVELGNBQU0sYUFBYSxhQUFLLEtBQUssTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUNyRCxlQUFPLHFCQUFxQixVQUFVO0FBQ3RDLHFCQUFLLElBQUksTUFBTSxNQUFNLGFBQWEsVUFBVTtBQUM1QyxjQUFNLGFBQWEsYUFBSyxLQUFLLE1BQU0sTUFBTSxNQUFNLElBQUk7QUFDbkQsZUFBTyxxQkFBcUIsVUFBVTtBQUN0QyxxQkFBSyxJQUFJLE1BQU0sTUFBTSxhQUFhLFVBQVU7QUFBQSxNQUNoRCxDQUFDO0FBRUQsV0FBSyxjQUFjLFFBQVEsQ0FBQyxnQkFBZ0I7QUFDeEMsaUJBQVMsSUFBSSxHQUFHLElBQUksWUFBWSxPQUFPLFNBQVMsR0FBRyxFQUFFLEdBQUc7QUFDcEQsZ0JBQU0sUUFBUSxZQUFZLE9BQU8sQ0FBQztBQUNsQyxnQkFBTSxzQkFBc0IsTUFBTSxLQUFLLFNBQ2pDLE1BQU0sS0FBSyxPQUFPLGdCQUNsQixLQUFLO0FBR1gsZ0JBQU0sVUFBVSxLQUFLO0FBQ3JCLGNBQUksWUFBWSxRQUFRO0FBQ3BCLHlCQUFLLElBQUksU0FBUyxNQUFNLE1BQU0sbUJBQW1CLE1BQU0sTUFBTSxjQUFjO0FBQzNFLHdCQUFZLE9BQU8scUJBQXFCLE9BQU87QUFBQSxVQUNuRCxPQUNLO0FBQ0QseUJBQUssSUFBSSxTQUFTLE1BQU0sTUFBTSxhQUFhLE1BQU0sTUFBTSxRQUFRO0FBQUEsVUFDbkU7QUFDQSx1QkFBSyxNQUFNLFNBQVMsU0FBUyxJQUFNLE1BQU0sU0FBUztBQUVsRCxnQkFBTSxZQUFZLGFBQUssS0FBSyxLQUFLLFlBQVksTUFBTSxNQUFNLFFBQVE7QUFDakUsdUJBQUssY0FBYyxXQUFXLFdBQVcsTUFBTSxNQUFNLG9CQUFvQjtBQUN6RSx1QkFBSyxjQUFjLFdBQVcsV0FBVyxtQkFBbUI7QUFDNUQsdUJBQUssTUFBTSxXQUFXLFdBQVcsS0FBSyxNQUFNLFNBQVM7QUFFckQsZ0JBQU0sV0FBVyxhQUFLLE1BQU0sS0FBSyxXQUFXLE1BQU0sWUFBWSxLQUFLLE1BQU0sWUFBWTtBQUVyRixnQkFBTSxXQUFXLGFBQUssS0FBSyxLQUFLLFVBQVUsTUFBTSxNQUFNLFdBQVc7QUFDakUsdUJBQUssSUFBSSxVQUFVLFVBQVUsT0FBTztBQUNwQyx1QkFBSyxJQUFJLFVBQVUsVUFBVSxTQUFTO0FBQ3RDLHVCQUFLLElBQUksVUFBVSxVQUFVLFFBQVE7QUFHckMsZ0JBQU0sZ0JBQWdCLE1BQU0sS0FBSyxvQkFBb0IsS0FBSyxRQUFRO0FBQ2xFLHVCQUFLLElBQUksVUFBVSxVQUFVLGFBQWE7QUFDMUMsdUJBQUssVUFBVSxVQUFVLFFBQVE7QUFDakMsdUJBQUssWUFBWSxVQUFVLGVBQWUsVUFBVSxNQUFNLE1BQU0sVUFBVTtBQUcxRSxxQkFBVyxFQUFFLE9BQU8sTUFBTSxLQUFLLFlBQVksaUJBQWlCO0FBQ3hELGdCQUFJLGNBQWMsS0FBSztBQUN2QixrQkFBTSxlQUFlLE1BQU07QUFDM0IsMEJBQWMsYUFBSyxJQUFJLGFBQWEsVUFBVSxZQUFZO0FBQzFELGtCQUFNLFNBQVMsTUFBTSxTQUFTLE1BQU07QUFDcEMsa0JBQU1DLFFBQU8sYUFBSyxPQUFPLFdBQVcsSUFBSTtBQUN4QyxnQkFBSUEsUUFBTyxHQUFLO0FBQ1osMkJBQUssVUFBVSxhQUFhLFdBQVc7QUFDdkMsMkJBQUssWUFBWSxVQUFVLFVBQVUsYUFBYSxDQUFDQSxLQUFJO0FBRXZELDJCQUFLLElBQUksVUFBVSxVQUFVLGFBQWE7QUFDMUMsMkJBQUssVUFBVSxVQUFVLFFBQVE7QUFDakMsMkJBQUssWUFBWSxVQUFVLGVBQWUsVUFBVSxNQUFNLE1BQU0sVUFBVTtBQUFBLFlBQzlFO0FBQUEsVUFDSjtBQUVBLHFCQUFXLEVBQUUsT0FBTyxNQUFNLEtBQUssWUFBWSxrQkFBa0I7QUFDekQsZ0JBQUksY0FBYyxLQUFLO0FBQ3ZCLGtCQUFNLE9BQU8sTUFBTTtBQUNuQixrQkFBTSxPQUFPLE1BQU07QUFFbkIsMEJBQWMsYUFBSyxJQUFJLGFBQWEsVUFBVSxJQUFJO0FBQ2xELGtCQUFNLGFBQWEsYUFBSyxJQUFJLEtBQUssYUFBYSxNQUFNLElBQUk7QUFDeEQsa0JBQU1DLE9BQU0sYUFBSyxJQUFJLFlBQVksV0FBVztBQUM1QyxnQkFBSSxhQUFLLGNBQWMsVUFBVSxLQUFLQSxNQUFLO0FBRXZDLDJCQUFLLElBQUksYUFBYSxVQUFVLElBQUk7QUFBQSxZQUN4QyxXQUNTQSxPQUFNLEdBQUs7QUFFaEIsMkJBQUssTUFBTSxZQUFZLFlBQVlBLE9BQU0sYUFBSyxjQUFjLFVBQVUsQ0FBQztBQUN2RSwyQkFBSyxJQUFJLGFBQWEsYUFBYSxVQUFVO0FBQUEsWUFDakQ7QUFDQSxrQkFBTSxTQUFTLE1BQU0sU0FBUyxNQUFNO0FBQ3BDLGtCQUFNRCxRQUFPLGFBQUssT0FBTyxXQUFXLElBQUk7QUFDeEMsZ0JBQUlBLFFBQU8sR0FBSztBQUNaLDJCQUFLLFVBQVUsYUFBYSxXQUFXO0FBQ3ZDLDJCQUFLLFlBQVksVUFBVSxVQUFVLGFBQWEsQ0FBQ0EsS0FBSTtBQUV2RCwyQkFBSyxJQUFJLFVBQVUsVUFBVSxhQUFhO0FBQzFDLDJCQUFLLFVBQVUsVUFBVSxRQUFRO0FBQ2pDLDJCQUFLLFlBQVksVUFBVSxlQUFlLFVBQVUsTUFBTSxNQUFNLFVBQVU7QUFBQSxZQUM5RTtBQUFBLFVBQ0o7QUFFQSx1QkFBSyxLQUFLLE1BQU0sTUFBTSxVQUFVLE1BQU0sTUFBTSxXQUFXO0FBQ3ZELHVCQUFLLEtBQUssTUFBTSxNQUFNLGFBQWEsUUFBUTtBQUMzQyxjQUFJLFlBQVksUUFBUTtBQUNwQix5QkFBSyxLQUFLLE1BQU0sTUFBTSxnQkFBZ0IsTUFBTSxNQUFNLGlCQUFpQjtBQUNuRSx5QkFBSyxLQUFLLE1BQU0sTUFBTSxtQkFBbUIsUUFBUTtBQUNqRCx3QkFBWSxPQUFPLDJCQUEyQixNQUFNLE1BQU0saUJBQWlCO0FBQUEsVUFDL0U7QUFFQSxnQkFBTSxLQUFLLE9BQU8sMkJBQTJCLFFBQVE7QUFDckQsZ0JBQU0sbUJBQW1CLGNBQU0sZ0JBQWdCLEtBQUssWUFBWSxRQUFRO0FBQ3hFLHdCQUFNLFNBQVMsa0JBQWtCLE1BQU0sTUFBTSw2QkFBNkIsZ0JBQWdCO0FBQzFGLHdCQUFNLGVBQWUsVUFBVSxnQkFBZ0I7QUFDL0MsdUJBQUssVUFBVSxVQUFVLFFBQVE7QUFFakMsZ0JBQU0sZ0JBQWdCLGFBQUssV0FBVyxLQUFLLFlBQVksTUFBTSxNQUFNLFVBQVUsUUFBUTtBQUNyRixnQkFBTSxLQUFLLGdCQUFnQixhQUFLLElBQUksS0FBSyxZQUFZLE1BQU0sTUFBTSxzQkFBc0IsYUFBYTtBQUFBLFFBQ3hHO0FBQUEsTUFDSixDQUFDO0FBQUEsSUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBLElBSUEsSUFBSSxZQUFZLGFBQWE7QUFDekIsV0FBSyx3QkFBd0IsUUFBUSxDQUFDLGVBQWU7QUFDakQsY0FBTSxVQUFVLGVBQWUsV0FBVyxlQUN0QyxlQUFlLFdBQVc7QUFDOUIsbUJBQVcsS0FBSyxjQUFjLE1BQU0sRUFBRSxRQUFRLENBQUMsU0FBUztBQUNwRCxlQUFLLFNBQVM7QUFBQSxRQUNsQixDQUFDO0FBQUEsTUFDTCxDQUFDO0FBQUEsSUFDTDtBQUFBLEVBQ0o7QUFwa0JJLGdCQURFLEtBQ0ssWUFBVztBQUNsQixnQkFGRSxLQUVLLGNBQWE7QUFBQTtBQUFBLElBRWhCLEtBQUssRUFBRSxNQUFNLEtBQUssT0FBTztBQUFBO0FBQUEsSUFFekIsY0FBYyxFQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsRUFDdEM7OztBQzVDSixNQUFNRSxjQUFhLElBQUksYUFBYSxDQUFDO0FBSXJDLE1BQU0sd0JBQU4sY0FBb0MsVUFBVTtBQUFBLElBVTFDLE9BQU87QUFDSCxXQUFLLEtBQUs7QUFDVixXQUFLLFFBQVE7QUFDYixXQUFLLE9BQU87QUFDWixXQUFLLE9BQU87QUFDWixhQUFPLGlCQUFpQixXQUFXLEtBQUssTUFBTSxLQUFLLElBQUksQ0FBQztBQUN4RCxhQUFPLGlCQUFpQixTQUFTLEtBQUssUUFBUSxLQUFLLElBQUksQ0FBQztBQUFBLElBQzVEO0FBQUEsSUFDQSxRQUFRO0FBQ0osV0FBSyxhQUFhLEtBQUssY0FBYyxLQUFLO0FBQUEsSUFDOUM7QUFBQSxJQUNBLFNBQVM7QUFDTCxtQkFBSyxLQUFLQSxXQUFVO0FBQ3BCLFVBQUksS0FBSztBQUNMLFFBQUFBLFlBQVcsQ0FBQyxLQUFLO0FBQ3JCLFVBQUksS0FBSztBQUNMLFFBQUFBLFlBQVcsQ0FBQyxLQUFLO0FBQ3JCLFVBQUksS0FBSztBQUNMLFFBQUFBLFlBQVcsQ0FBQyxLQUFLO0FBQ3JCLFVBQUksS0FBSztBQUNMLFFBQUFBLFlBQVcsQ0FBQyxLQUFLO0FBQ3JCLG1CQUFLLFVBQVVBLGFBQVlBLFdBQVU7QUFDckMsTUFBQUEsWUFBVyxDQUFDLEtBQUssS0FBSztBQUN0QixNQUFBQSxZQUFXLENBQUMsS0FBSyxLQUFLO0FBQ3RCLG1CQUFLLGNBQWNBLGFBQVlBLGFBQVksS0FBSyxXQUFXLGNBQWM7QUFDekUsVUFBSSxLQUFLLE9BQU87QUFDWixRQUFBQSxZQUFXLENBQUMsSUFBSTtBQUNoQixxQkFBSyxVQUFVQSxhQUFZQSxXQUFVO0FBQ3JDLHFCQUFLLE1BQU1BLGFBQVlBLGFBQVksS0FBSyxLQUFLO0FBQUEsTUFDakQ7QUFDQSxXQUFLLE9BQU8sZUFBZUEsV0FBVTtBQUFBLElBQ3pDO0FBQUEsSUFDQSxNQUFNLEdBQUc7QUFDTCxVQUFJLEVBQUUsWUFBWSxNQUNkLEVBQUUsWUFBWSxNQUNkLEVBQUUsWUFBWSxJQUFZO0FBQzFCLGFBQUssS0FBSztBQUFBLE1BQ2QsV0FDUyxFQUFFLFlBQVksTUFBa0IsRUFBRSxZQUFZLElBQVk7QUFDL0QsYUFBSyxRQUFRO0FBQUEsTUFDakIsV0FDUyxFQUFFLFlBQVksTUFBaUIsRUFBRSxZQUFZLElBQVk7QUFDOUQsYUFBSyxPQUFPO0FBQUEsTUFDaEIsV0FDUyxFQUFFLFlBQVksTUFDbkIsRUFBRSxZQUFZLE1BQ2QsRUFBRSxZQUFZLElBQVk7QUFDMUIsYUFBSyxPQUFPO0FBQUEsTUFDaEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxRQUFRLEdBQUc7QUFDUCxVQUFJLEVBQUUsWUFBWSxNQUNkLEVBQUUsWUFBWSxNQUNkLEVBQUUsWUFBWSxJQUFZO0FBQzFCLGFBQUssS0FBSztBQUFBLE1BQ2QsV0FDUyxFQUFFLFlBQVksTUFBa0IsRUFBRSxZQUFZLElBQVk7QUFDL0QsYUFBSyxRQUFRO0FBQUEsTUFDakIsV0FDUyxFQUFFLFlBQVksTUFBaUIsRUFBRSxZQUFZLElBQVk7QUFDOUQsYUFBSyxPQUFPO0FBQUEsTUFDaEIsV0FDUyxFQUFFLFlBQVksTUFDbkIsRUFBRSxZQUFZLE1BQ2QsRUFBRSxZQUFZLElBQVk7QUFDMUIsYUFBSyxPQUFPO0FBQUEsTUFDaEI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQTdFSSxnQkFERSx1QkFDSyxZQUFXO0FBQ2xCLGdCQUZFLHVCQUVLLGNBQWE7QUFBQTtBQUFBLElBRWhCLE9BQU8sRUFBRSxNQUFNLEtBQUssT0FBTyxTQUFTLElBQUk7QUFBQTtBQUFBLElBRXhDLE9BQU8sRUFBRSxNQUFNLEtBQUssTUFBTSxTQUFTLE1BQU07QUFBQTtBQUFBLElBRXpDLFlBQVksRUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLEVBQ3BDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2ZKLE1BQUFDLElBQUFDLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUFBLE9BQU8sVUFBVSxTQUFjQyxHQUFJQyxHQUFTO0FBQzFDLGFBQU8sV0FBZ0I7QUFFckIsaUJBRElDLElBQU8sSUFBSSxNQUFNLFVBQVUsTUFBTSxHQUM1QkMsSUFBSSxHQUFHQSxJQUFJRCxFQUFLLFFBQVFDO0FBQy9CRCxZQUFLQyxDQUFDLElBQUksVUFBVUEsQ0FBQztBQUV2QixlQUFPSCxFQUFHLE1BQU1DLEdBQVNDLENBQUk7TUFDL0I7SUFDRjtFQUFBLENBQUE7QUNWQSxNQUFBRSxJQUFBUCxFQUFBLENBQUFDLElBQUFDLE9BQUE7QUFBQTtBQUVBLFFBQUlNLEtBQU8sRUFBQSxHQUlQQyxJQUFXLE9BQU8sVUFBVSxVQUc1QkMsS0FBVSxTQUFTQyxHQUFPO0FBRTVCLGFBQU8sU0FBU0MsR0FBTztBQUNyQixZQUFJQyxJQUFNSixFQUFTLEtBQUtHLENBQUs7QUFDN0IsZUFBT0QsRUFBTUUsQ0FBRyxNQUFNRixFQUFNRSxDQUFHLElBQUlBLEVBQUksTUFBTSxHQUFHLEVBQUUsRUFBRSxZQUFZO01BQ2xFO0lBQ0YsRUFBRyx1QkFBTyxPQUFPLElBQUksQ0FBQztBQUV0QixhQUFTQyxFQUFXQyxHQUFNO0FBQ3hCLGFBQUFBLElBQU9BLEVBQUssWUFBWSxHQUNqQixTQUFrQkgsR0FBTztBQUM5QixlQUFPRixHQUFPRSxDQUFLLE1BQU1HO01BQzNCO0lBQ0Y7QUFRQSxhQUFTQyxHQUFRQyxHQUFLO0FBQ3BCLGFBQU8sTUFBTSxRQUFRQSxDQUFHO0lBQzFCO0FBUUEsYUFBU0MsRUFBWUQsR0FBSztBQUN4QixhQUFPLE9BQU9BLElBQVE7SUFDeEI7QUFRQSxhQUFTRSxHQUFTRixHQUFLO0FBQ3JCLGFBQU9BLE1BQVEsUUFBUSxDQUFDQyxFQUFZRCxDQUFHLEtBQUtBLEVBQUksZ0JBQWdCLFFBQVEsQ0FBQ0MsRUFBWUQsRUFBSSxXQUFXLEtBQy9GLE9BQU9BLEVBQUksWUFBWSxZQUFhLGNBQWNBLEVBQUksWUFBWSxTQUFTQSxDQUFHO0lBQ3JGO0FBU0EsUUFBSUcsS0FBZ0JOLEVBQVcsYUFBYTtBQVM1QyxhQUFTTyxHQUFrQkosR0FBSztBQUM5QixVQUFJSztBQUNKLGFBQUssT0FBTyxjQUFnQixPQUFpQixZQUFZLFNBQ3ZEQSxJQUFTLFlBQVksT0FBT0wsQ0FBRyxJQUUvQkssSUFBVUwsS0FBU0EsRUFBSSxVQUFZRyxHQUFjSCxFQUFJLE1BQU0sR0FFdERLO0lBQ1Q7QUFRQSxhQUFTQyxHQUFTTixHQUFLO0FBQ3JCLGFBQU8sT0FBT0EsS0FBUTtJQUN4QjtBQVFBLGFBQVNPLEdBQVNQLEdBQUs7QUFDckIsYUFBTyxPQUFPQSxLQUFRO0lBQ3hCO0FBUUEsYUFBU1EsR0FBU1IsR0FBSztBQUNyQixhQUFPQSxNQUFRLFFBQVEsT0FBT0EsS0FBUTtJQUN4QztBQVFBLGFBQVNTLEVBQWNULEdBQUs7QUFDMUIsVUFBSVAsR0FBT08sQ0FBRyxNQUFNO0FBQ2xCLGVBQU87QUFHVCxVQUFJVSxJQUFZLE9BQU8sZUFBZVYsQ0FBRztBQUN6QyxhQUFPVSxNQUFjLFFBQVFBLE1BQWMsT0FBTztJQUNwRDtBQVNBLFFBQUlDLEtBQVNkLEVBQVcsTUFBTSxHQVMxQmUsS0FBU2YsRUFBVyxNQUFNLEdBUzFCZ0IsS0FBU2hCLEVBQVcsTUFBTSxHQVMxQmlCLEtBQWFqQixFQUFXLFVBQVU7QUFRdEMsYUFBU2tCLEdBQVdmLEdBQUs7QUFDdkIsYUFBT1IsRUFBUyxLQUFLUSxDQUFHLE1BQU07SUFDaEM7QUFRQSxhQUFTZ0IsR0FBU2hCLEdBQUs7QUFDckIsYUFBT1EsR0FBU1IsQ0FBRyxLQUFLZSxHQUFXZixFQUFJLElBQUk7SUFDN0M7QUFRQSxhQUFTaUIsR0FBV3RCLEdBQU87QUFDekIsVUFBSXVCLElBQVU7QUFDZCxhQUFPdkIsTUFDSixPQUFPLFlBQWEsY0FBY0EsYUFBaUIsWUFDcERILEVBQVMsS0FBS0csQ0FBSyxNQUFNdUIsS0FDeEJILEdBQVdwQixFQUFNLFFBQVEsS0FBS0EsRUFBTSxTQUFTLE1BQU11QjtJQUV4RDtBQVFBLFFBQUlDLEtBQW9CdEIsRUFBVyxpQkFBaUI7QUFRcEQsYUFBU3VCLEdBQUt4QixHQUFLO0FBQ2pCLGFBQU9BLEVBQUksT0FBT0EsRUFBSSxLQUFLLElBQUlBLEVBQUksUUFBUSxjQUFjLEVBQUU7SUFDN0Q7QUFpQkEsYUFBU3lCLEtBQXVCO0FBQzlCLGFBQUksT0FBTyxZQUFjLFFBQWdCLFVBQVUsWUFBWSxpQkFDdEIsVUFBVSxZQUFZLGtCQUN0QixVQUFVLFlBQVksUUFDdEQsUUFHUCxPQUFPLFNBQVcsT0FDbEIsT0FBTyxXQUFhO0lBRXhCO0FBY0EsYUFBU0MsR0FBUUMsR0FBS3JDLEdBQUk7QUFFeEIsVUFBSSxFQUFBcUMsTUFBUSxRQUFRLE9BQU9BLElBQVE7QUFVbkMsWUFMSSxPQUFPQSxLQUFRLGFBRWpCQSxJQUFNLENBQUNBLENBQUcsSUFHUnhCLEdBQVF3QixDQUFHO0FBRWIsbUJBQVNsQyxJQUFJLEdBQUdtQyxJQUFJRCxFQUFJLFFBQVFsQyxJQUFJbUMsR0FBR25DO0FBQ3JDSCxjQUFHLEtBQUssTUFBTXFDLEVBQUlsQyxDQUFDLEdBQUdBLEdBQUdrQyxDQUFHOztBQUk5QixtQkFBU0UsS0FBT0Y7QUFDVixtQkFBTyxVQUFVLGVBQWUsS0FBS0EsR0FBS0UsQ0FBRyxLQUMvQ3ZDLEVBQUcsS0FBSyxNQUFNcUMsRUFBSUUsQ0FBRyxHQUFHQSxHQUFLRixDQUFHO0lBSXhDO0FBbUJBLGFBQVNHLElBQW1DO0FBQzFDLFVBQUlyQixJQUFTLENBQUM7QUFDZCxlQUFTc0IsRUFBWTNCLEdBQUt5QixHQUFLO0FBQ3pCaEIsVUFBY0osRUFBT29CLENBQUcsQ0FBQyxLQUFLaEIsRUFBY1QsQ0FBRyxJQUNqREssRUFBT29CLENBQUcsSUFBSUMsRUFBTXJCLEVBQU9vQixDQUFHLEdBQUd6QixDQUFHLElBQzNCUyxFQUFjVCxDQUFHLElBQzFCSyxFQUFPb0IsQ0FBRyxJQUFJQyxFQUFNLENBQUMsR0FBRzFCLENBQUcsSUFDbEJELEdBQVFDLENBQUcsSUFDcEJLLEVBQU9vQixDQUFHLElBQUl6QixFQUFJLE1BQU0sSUFFeEJLLEVBQU9vQixDQUFHLElBQUl6QjtNQUVsQjtBQUVBLGVBQVNYLElBQUksR0FBR21DLElBQUksVUFBVSxRQUFRbkMsSUFBSW1DLEdBQUduQztBQUMzQ2lDLFdBQVEsVUFBVWpDLENBQUMsR0FBR3NDLENBQVc7QUFFbkMsYUFBT3RCO0lBQ1Q7QUFVQSxhQUFTdUIsR0FBT0MsR0FBR0MsR0FBRzNDLEdBQVM7QUFDN0IsYUFBQW1DLEdBQVFRLEdBQUcsU0FBcUI5QixHQUFLeUIsR0FBSztBQUNwQ3RDLGFBQVcsT0FBT2EsS0FBUSxhQUM1QjZCLEVBQUVKLENBQUcsSUFBSWxDLEdBQUtTLEdBQUtiLENBQU8sSUFFMUIwQyxFQUFFSixDQUFHLElBQUl6QjtNQUViLENBQUMsR0FDTTZCO0lBQ1Q7QUFRQSxhQUFTRSxHQUFTQyxHQUFTO0FBQ3pCLGFBQUlBLEVBQVEsV0FBVyxDQUFDLE1BQU0sVUFDNUJBLElBQVVBLEVBQVEsTUFBTSxDQUFDLElBRXBCQTtJQUNUO0FBVUEsYUFBU0MsR0FBU0MsR0FBYUMsR0FBa0JDLEdBQU9DLEdBQWE7QUFDbkVILFFBQVksWUFBWSxPQUFPLE9BQU9DLEVBQWlCLFdBQVdFLENBQVcsR0FDN0VILEVBQVksVUFBVSxjQUFjQSxHQUNwQ0UsS0FBUyxPQUFPLE9BQU9GLEVBQVksV0FBV0UsQ0FBSztJQUNyRDtBQVVBLGFBQVNFLEdBQWFDLEdBQVdDLEdBQVNDLEdBQVE7QUFDaEQsVUFBSUwsR0FDQS9DLEdBQ0FxRCxHQUNBQyxJQUFTLENBQUM7QUFFZEgsVUFBVUEsS0FBVyxDQUFDO0FBRXRCLFNBQUc7QUFHRCxhQUZBSixJQUFRLE9BQU8sb0JBQW9CRyxDQUFTLEdBQzVDbEQsSUFBSStDLEVBQU0sUUFDSC9DLE1BQU07QUFDWHFELGNBQU9OLEVBQU0vQyxDQUFDLEdBQ1RzRCxFQUFPRCxDQUFJLE1BQ2RGLEVBQVFFLENBQUksSUFBSUgsRUFBVUcsQ0FBSSxHQUM5QkMsRUFBT0QsQ0FBSSxJQUFJO0FBR25CSCxZQUFZLE9BQU8sZUFBZUEsQ0FBUztNQUFBLFNBQ3BDQSxNQUFjLENBQUNFLEtBQVVBLEVBQU9GLEdBQVdDLENBQU8sTUFBTUQsTUFBYyxPQUFPO0FBRXRGLGFBQU9DO0lBQ1Q7QUFTQSxhQUFTSSxHQUFTaEQsR0FBS2lELEdBQWNDLEdBQVU7QUFDN0NsRCxVQUFNLE9BQU9BLENBQUcsSUFDWmtELE1BQWEsVUFBYUEsSUFBV2xELEVBQUksWUFDM0NrRCxJQUFXbEQsRUFBSSxTQUVqQmtELEtBQVlELEVBQWE7QUFDekIsVUFBSUUsSUFBWW5ELEVBQUksUUFBUWlELEdBQWNDLENBQVE7QUFDbEQsYUFBT0MsTUFBYyxNQUFNQSxNQUFjRDtJQUMzQztBQVFBLGFBQVNFLEdBQVFyRCxHQUFPO0FBQ3RCLFVBQUksQ0FBQ0E7QUFBTyxlQUFPO0FBQ25CLFVBQUlOLElBQUlNLEVBQU07QUFDZCxVQUFJTSxFQUFZWixDQUFDO0FBQUcsZUFBTztBQUUzQixlQURJNEQsSUFBTSxJQUFJLE1BQU01RCxDQUFDLEdBQ2RBLE1BQU07QUFDWDRELFVBQUk1RCxDQUFDLElBQUlNLEVBQU1OLENBQUM7QUFFbEIsYUFBTzREO0lBQ1Q7QUFHQSxRQUFJQyxLQUFnQixTQUFTQyxHQUFZO0FBRXZDLGFBQU8sU0FBU3hELEdBQU87QUFDckIsZUFBT3dELEtBQWN4RCxhQUFpQndEO01BQ3hDO0lBQ0YsRUFBRyxPQUFPLGFBQWUsT0FBZSxPQUFPLGVBQWUsVUFBVSxDQUFDO0FBRXpFbEUsT0FBTyxVQUFVLEVBQ2YsU0FBU2MsSUFDVCxlQUFlSSxJQUNmLFVBQVVELElBQ1YsWUFBWWUsSUFDWixtQkFBbUJiLElBQ25CLFVBQVVFLElBQ1YsVUFBVUMsSUFDVixVQUFVQyxJQUNWLGVBQWVDLEdBQ2YsYUFBYVIsR0FDYixRQUFRVSxJQUNSLFFBQVFDLElBQ1IsUUFBUUMsSUFDUixZQUFZRSxJQUNaLFVBQVVDLElBQ1YsbUJBQW1CRyxJQUNuQixzQkFBc0JFLElBQ3RCLFNBQVNDLElBQ1QsT0FBT0ksR0FDUCxRQUFRRSxJQUNSLE1BQU1SLElBQ04sVUFBVVcsSUFDVixVQUFVRSxJQUNWLGNBQWNLLElBQ2QsUUFBUTdDLElBQ1IsWUFBWUksR0FDWixVQUFVK0MsSUFDVixTQUFTSSxJQUNULGNBQWNFLElBQ2QsWUFBWXBDLEdBQ2Q7RUFBQSxDQUFBO0FDcmRBLE1BQUFzQyxLQUFBckUsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsSUFBUSxFQUFBO0FBRVosYUFBU0MsR0FBT3RELEdBQUs7QUFDbkIsYUFBTyxtQkFBbUJBLENBQUcsRUFDM0IsUUFBUSxTQUFTLEdBQUcsRUFDcEIsUUFBUSxRQUFRLEdBQUcsRUFDbkIsUUFBUSxTQUFTLEdBQUcsRUFDcEIsUUFBUSxRQUFRLEdBQUcsRUFDbkIsUUFBUSxTQUFTLEdBQUcsRUFDcEIsUUFBUSxTQUFTLEdBQUc7SUFDeEI7QUFTQWYsT0FBTyxVQUFVLFNBQWtCc0UsR0FBS0MsR0FBUUMsR0FBa0I7QUFFaEUsVUFBSSxDQUFDRDtBQUNILGVBQU9EO0FBR1QsVUFBSUc7QUFDSixVQUFJRDtBQUNGQyxZQUFtQkQsRUFBaUJELENBQU07ZUFDakNILEVBQU0sa0JBQWtCRyxDQUFNO0FBQ3ZDRSxZQUFtQkYsRUFBTyxTQUFTO1dBQzlCO0FBQ0wsWUFBSUcsSUFBUSxDQUFDO0FBRWJOLFVBQU0sUUFBUUcsR0FBUSxTQUFtQnhELEdBQUt5QixHQUFLO0FBQzdDekIsZ0JBQVEsUUFBUSxPQUFPQSxJQUFRLFFBSS9CcUQsRUFBTSxRQUFRckQsQ0FBRyxJQUNuQnlCLElBQU1BLElBQU0sT0FFWnpCLElBQU0sQ0FBQ0EsQ0FBRyxHQUdacUQsRUFBTSxRQUFRckQsR0FBSyxTQUFvQjRELEdBQUc7QUFDcENQLGNBQU0sT0FBT08sQ0FBQyxJQUNoQkEsSUFBSUEsRUFBRSxZQUFZLElBQ1RQLEVBQU0sU0FBU08sQ0FBQyxNQUN6QkEsSUFBSSxLQUFLLFVBQVVBLENBQUMsSUFFdEJELEVBQU0sS0FBS0wsR0FBTzdCLENBQUcsSUFBSSxNQUFNNkIsR0FBT00sQ0FBQyxDQUFDO1VBQzFDLENBQUM7UUFDSCxDQUFDLEdBRURGLElBQW1CQyxFQUFNLEtBQUssR0FBRztNQUFBO0FBR25DLFVBQUlELEdBQWtCO0FBQ3BCLFlBQUlHLElBQWdCTixFQUFJLFFBQVEsR0FBRztBQUMvQk0sY0FBa0IsT0FDcEJOLElBQU1BLEVBQUksTUFBTSxHQUFHTSxDQUFhLElBR2xDTixNQUFRQSxFQUFJLFFBQVEsR0FBRyxNQUFNLEtBQUssTUFBTSxPQUFPRztNQUFBQTtBQUdqRCxhQUFPSDtJQUNUO0VBQUEsQ0FBQTtBQ3JFQSxNQUFBTyxLQUFBL0UsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsS0FBUSxFQUFBO0FBRVosYUFBU1UsSUFBcUI7QUFDNUIsV0FBSyxXQUFXLENBQUM7SUFDbkI7QUFVQUEsTUFBbUIsVUFBVSxNQUFNLFNBQWFDLEdBQVdDLEdBQVVDLEdBQVM7QUFDNUUsYUFBQSxLQUFLLFNBQVMsS0FBSyxFQUNqQixXQUFXRixHQUNYLFVBQVVDLEdBQ1YsYUFBYUMsSUFBVUEsRUFBUSxjQUFjLE9BQzdDLFNBQVNBLElBQVVBLEVBQVEsVUFBVSxLQUN2QyxDQUFDLEdBQ00sS0FBSyxTQUFTLFNBQVM7SUFDaEM7QUFPQUgsTUFBbUIsVUFBVSxRQUFRLFNBQWVJLEdBQUk7QUFDbEQsV0FBSyxTQUFTQSxDQUFFLE1BQ2xCLEtBQUssU0FBU0EsQ0FBRSxJQUFJO0lBRXhCO0FBVUFKLE1BQW1CLFVBQVUsVUFBVSxTQUFpQjdFLEdBQUk7QUFDMURtRSxTQUFNLFFBQVEsS0FBSyxVQUFVLFNBQXdCZSxHQUFHO0FBQ2xEQSxjQUFNLFFBQ1JsRixFQUFHa0YsQ0FBQztNQUVSLENBQUM7SUFDSDtBQUVBbkYsT0FBTyxVQUFVOEU7RUFBQUEsQ0FBQUE7QUNyRGpCLE1BQUFNLEtBQUF0RixFQUFBLENBQUFDLElBQUFDLE9BQUE7QUFBQTtBQUVBLFFBQUlvRSxLQUFRLEVBQUE7QUFFWnBFLE9BQU8sVUFBVSxTQUE2QnFGLEdBQVNDLEdBQWdCO0FBQ3JFbEIsU0FBTSxRQUFRaUIsR0FBUyxTQUF1QkUsR0FBT0MsR0FBTTtBQUNyREEsY0FBU0YsS0FBa0JFLEVBQUssWUFBWSxNQUFNRixFQUFlLFlBQVksTUFDL0VELEVBQVFDLENBQWMsSUFBSUMsR0FDMUIsT0FBT0YsRUFBUUcsQ0FBSTtNQUV2QixDQUFDO0lBQ0g7RUFBQSxDQUFBO0FDWEEsTUFBQUMsSUFBQTNGLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSW9FLEtBQVEsRUFBQTtBQVlaLGFBQVNzQixFQUFXQyxHQUFTQyxHQUFNQyxHQUFRQyxHQUFTQyxHQUFVO0FBQzVELFlBQU0sS0FBSyxJQUFJLEdBQ2YsS0FBSyxVQUFVSixHQUNmLEtBQUssT0FBTyxjQUNaQyxNQUFTLEtBQUssT0FBT0EsSUFDckJDLE1BQVcsS0FBSyxTQUFTQSxJQUN6QkMsTUFBWSxLQUFLLFVBQVVBLElBQzNCQyxNQUFhLEtBQUssV0FBV0E7SUFDL0I7QUFFQTNCLE9BQU0sU0FBU3NCLEdBQVksT0FBTyxFQUNoQyxRQUFRLFdBQWtCO0FBQ3hCLGFBQU8sRUFFTCxTQUFTLEtBQUssU0FDZCxNQUFNLEtBQUssTUFFWCxhQUFhLEtBQUssYUFDbEIsUUFBUSxLQUFLLFFBRWIsVUFBVSxLQUFLLFVBQ2YsWUFBWSxLQUFLLFlBQ2pCLGNBQWMsS0FBSyxjQUNuQixPQUFPLEtBQUssT0FFWixRQUFRLEtBQUssUUFDYixNQUFNLEtBQUssTUFDWCxRQUFRLEtBQUssWUFBWSxLQUFLLFNBQVMsU0FBUyxLQUFLLFNBQVMsU0FBUyxLQUN6RTtJQUNGLEVBQ0YsQ0FBQztBQUVELFFBQUlqRSxLQUFZaUUsRUFBVyxXQUN2QnRDLEtBQWMsQ0FBQztBQUVuQixLQUNFLHdCQUNBLGtCQUNBLGdCQUNBLGFBQ0EsZUFDQSw2QkFDQSxrQkFDQSxvQkFDQSxtQkFDQSxjQUVGLEVBQUUsUUFBUSxTQUFTd0MsR0FBTTtBQUN2QnhDLFNBQVl3QyxDQUFJLElBQUksRUFBQyxPQUFPQSxFQUFJO0lBQ2xDLENBQUM7QUFFRCxXQUFPLGlCQUFpQkYsR0FBWXRDLEVBQVc7QUFDL0MsV0FBTyxlQUFlM0IsSUFBVyxnQkFBZ0IsRUFBQyxPQUFPLEtBQUksQ0FBQztBQUc5RGlFLE1BQVcsT0FBTyxTQUFTTSxHQUFPSixHQUFNQyxHQUFRQyxHQUFTQyxHQUFVRSxHQUFhO0FBQzlFLFVBQUlDLElBQWEsT0FBTyxPQUFPekUsRUFBUztBQUV4QyxhQUFBMkMsR0FBTSxhQUFhNEIsR0FBT0UsR0FBWSxTQUFnQjVELEdBQUs7QUFDekQsZUFBT0EsTUFBUSxNQUFNO01BQ3ZCLENBQUMsR0FFRG9ELEVBQVcsS0FBS1EsR0FBWUYsRUFBTSxTQUFTSixHQUFNQyxHQUFRQyxHQUFTQyxDQUFRLEdBRTFFRyxFQUFXLE9BQU9GLEVBQU0sTUFFeEJDLEtBQWUsT0FBTyxPQUFPQyxHQUFZRCxDQUFXLEdBRTdDQztJQUNUO0FBRUFsRyxPQUFPLFVBQVUwRjtFQUFBQSxDQUFBQTtBQ3JGakIsTUFBQVMsS0FBQXJHLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUFBLE9BQU8sVUFBVSxFQUNmLG1CQUFtQixNQUNuQixtQkFBbUIsTUFDbkIscUJBQXFCLE1BQ3ZCO0VBQUEsQ0FBQTtBQ05BLE1BQUFvRyxLQUFBdEcsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsSUFBUSxFQUFBO0FBU1osYUFBU2lDLEdBQVcvRCxHQUFLZ0UsR0FBVTtBQUVqQ0EsVUFBV0EsS0FBWSxJQUFJO0FBRTNCLFVBQUlDLElBQVEsQ0FBQztBQUViLGVBQVNDLEVBQWFqQixHQUFPO0FBQzNCLGVBQUlBLE1BQVUsT0FBYSxLQUV2Qm5CLEVBQU0sT0FBT21CLENBQUssSUFDYkEsRUFBTSxZQUFZLElBR3ZCbkIsRUFBTSxjQUFjbUIsQ0FBSyxLQUFLbkIsRUFBTSxhQUFhbUIsQ0FBSyxJQUNqRCxPQUFPLFFBQVMsYUFBYSxJQUFJLEtBQUssQ0FBQ0EsQ0FBSyxDQUFDLElBQUksT0FBTyxLQUFLQSxDQUFLLElBR3BFQTtNQUNUO0FBRUEsZUFBU2tCLEVBQU1DLEdBQU1DLEdBQVc7QUFDOUIsWUFBSXZDLEVBQU0sY0FBY3NDLENBQUksS0FBS3RDLEVBQU0sUUFBUXNDLENBQUksR0FBRztBQUNwRCxjQUFJSCxFQUFNLFFBQVFHLENBQUksTUFBTTtBQUMxQixrQkFBTSxNQUFNLG9DQUFvQ0MsQ0FBUztBQUczREosWUFBTSxLQUFLRyxDQUFJLEdBRWZ0QyxFQUFNLFFBQVFzQyxHQUFNLFNBQWNuQixHQUFPL0MsR0FBSztBQUM1QyxnQkFBSSxDQUFBNEIsRUFBTSxZQUFZbUIsQ0FBSyxHQUMzQjtBQUFBLGtCQUFJcUIsSUFBVUQsSUFBWUEsSUFBWSxNQUFNbkUsSUFBTUEsR0FDOUN3QjtBQUVKLGtCQUFJdUIsS0FBUyxDQUFDb0IsS0FBYSxPQUFPcEIsS0FBVSxVQUFBO0FBQzFDLG9CQUFJbkIsRUFBTSxTQUFTNUIsR0FBSyxJQUFJO0FBRTFCK0Msc0JBQVEsS0FBSyxVQUFVQSxDQUFLO3lCQUNuQm5CLEVBQU0sU0FBUzVCLEdBQUssSUFBSSxNQUFNd0IsSUFBTUksRUFBTSxRQUFRbUIsQ0FBSyxJQUFJO0FBRXBFdkIsb0JBQUksUUFBUSxTQUFTNkMsR0FBSTtBQUN2QixxQkFBQ3pDLEVBQU0sWUFBWXlDLENBQUUsS0FBS1AsRUFBUyxPQUFPTSxHQUFTSixFQUFhSyxDQUFFLENBQUM7a0JBQ3JFLENBQUM7QUFDRDtnQkFBQTtjQUFBO0FBSUpKLGdCQUFNbEIsR0FBT3FCLENBQU87WUFBQTtVQUN0QixDQUFDLEdBRURMLEVBQU0sSUFBSTtRQUFBO0FBRVZELFlBQVMsT0FBT0ssR0FBV0gsRUFBYUUsQ0FBSSxDQUFDO01BRWpEO0FBRUEsYUFBQUQsRUFBTW5FLENBQUcsR0FFRmdFO0lBQ1Q7QUFFQXRHLE9BQU8sVUFBVXFHO0VBQUFBLENBQUFBO0FDdkVqQixNQUFBUyxLQUFBaEgsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJMEYsS0FBYSxFQUFBO0FBU2pCMUYsT0FBTyxVQUFVLFNBQWdCK0csR0FBU0MsR0FBUWpCLEdBQVU7QUFDMUQsVUFBSWtCLElBQWlCbEIsRUFBUyxPQUFPO0FBQ2pDLE9BQUNBLEVBQVMsVUFBVSxDQUFDa0IsS0FBa0JBLEVBQWVsQixFQUFTLE1BQU0sSUFDdkVnQixFQUFRaEIsQ0FBUSxJQUVoQmlCLEVBQU8sSUFBSXRCLEdBQ1QscUNBQXFDSyxFQUFTLFFBQzlDLENBQUNMLEdBQVcsaUJBQWlCQSxHQUFXLGdCQUFnQixFQUFFLEtBQUssTUFBTUssRUFBUyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQy9GQSxFQUFTLFFBQ1RBLEVBQVMsU0FDVEEsQ0FDRixDQUFDO0lBRUw7RUFBQSxDQUFBO0FDeEJBLE1BQUFtQixLQUFBcEgsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsSUFBUSxFQUFBO0FBRVpwRSxPQUFPLFVBQ0xvRSxFQUFNLHFCQUFxQixJQUd4QixXQUE4QjtBQUM3QixhQUFPLEVBQ0wsT0FBTyxTQUFlb0IsR0FBTUQsR0FBTzRCLEdBQVNDLEdBQU1DLEdBQVFDLEdBQVE7QUFDaEUsWUFBSUMsSUFBUyxDQUFDO0FBQ2RBLFVBQU8sS0FBSy9CLElBQU8sTUFBTSxtQkFBbUJELENBQUssQ0FBQyxHQUU5Q25CLEVBQU0sU0FBUytDLENBQU8sS0FDeEJJLEVBQU8sS0FBSyxhQUFhLElBQUksS0FBS0osQ0FBTyxFQUFFLFlBQVksQ0FBQyxHQUd0RC9DLEVBQU0sU0FBU2dELENBQUksS0FDckJHLEVBQU8sS0FBSyxVQUFVSCxDQUFJLEdBR3hCaEQsRUFBTSxTQUFTaUQsQ0FBTSxLQUN2QkUsRUFBTyxLQUFLLFlBQVlGLENBQU0sR0FHNUJDLE1BQVcsUUFDYkMsRUFBTyxLQUFLLFFBQVEsR0FHdEIsU0FBUyxTQUFTQSxFQUFPLEtBQUssSUFBSTtNQUNwQyxHQUVBLE1BQU0sU0FBYy9CLEdBQU07QUFDeEIsWUFBSWdDLElBQVEsU0FBUyxPQUFPLE1BQU0sSUFBSSxPQUFPLGVBQWVoQyxJQUFPLFdBQVcsQ0FBQztBQUMvRSxlQUFRZ0MsSUFBUSxtQkFBbUJBLEVBQU0sQ0FBQyxDQUFDLElBQUk7TUFDakQsR0FFQSxRQUFRLFNBQWdCaEMsR0FBTTtBQUM1QixhQUFLLE1BQU1BLEdBQU0sSUFBSSxLQUFLLElBQUksSUFBSSxLQUFRO01BQzVDLEVBQ0Y7SUFDRixFQUFHLElBR0YsV0FBaUM7QUFDaEMsYUFBTyxFQUNMLE9BQU8sV0FBaUI7TUFBQyxHQUN6QixNQUFNLFdBQWdCO0FBQUUsZUFBTztNQUFNLEdBQ3JDLFFBQVEsV0FBa0I7TUFBQyxFQUM3QjtJQUNGLEVBQUc7RUFBQSxDQUFBO0FDbkRQLE1BQUFpQyxLQUFBM0gsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFRQUEsT0FBTyxVQUFVLFNBQXVCc0UsR0FBSztBQUkzQyxhQUFPLDhCQUE4QixLQUFLQSxDQUFHO0lBQy9DO0VBQUEsQ0FBQTtBQ2JBLE1BQUFvRCxLQUFBNUgsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFTQUEsT0FBTyxVQUFVLFNBQXFCMkgsR0FBU0MsR0FBYTtBQUMxRCxhQUFPQSxJQUNIRCxFQUFRLFFBQVEsUUFBUSxFQUFFLElBQUksTUFBTUMsRUFBWSxRQUFRLFFBQVEsRUFBRSxJQUNsRUQ7SUFDTjtFQUFBLENBQUE7QUNiQSxNQUFBRSxLQUFBL0gsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJOEgsS0FBZ0IsR0FBQSxHQUNoQkMsS0FBYyxHQUFBO0FBV2xCL0gsT0FBTyxVQUFVLFNBQXVCMkgsR0FBU0ssR0FBYztBQUM3RCxhQUFJTCxLQUFXLENBQUNHLEdBQWNFLENBQVksSUFDakNELEdBQVlKLEdBQVNLLENBQVksSUFFbkNBO0lBQ1Q7RUFBQSxDQUFBO0FDbkJBLE1BQUFDLEtBQUFuSSxFQUFBLENBQUFDLElBQUFDLE9BQUE7QUFBQTtBQUVBLFFBQUlvRSxLQUFRLEVBQUEsR0FJUjhELEtBQW9CLENBQ3RCLE9BQU8saUJBQWlCLGtCQUFrQixnQkFBZ0IsUUFDMUQsV0FBVyxRQUFRLFFBQVEscUJBQXFCLHVCQUNoRCxpQkFBaUIsWUFBWSxnQkFBZ0IsdUJBQzdDLFdBQVcsZUFBZSxZQUM1QjtBQWVBbEksT0FBTyxVQUFVLFNBQXNCcUYsR0FBUztBQUM5QyxVQUFJOEMsSUFBUyxDQUFDLEdBQ1YzRixHQUNBekIsR0FDQVg7QUFFSixhQUFLaUYsS0FFTGpCLEdBQU0sUUFBUWlCLEVBQVEsTUFBTTtDQUFJLEdBQUcsU0FBZ0IrQyxHQUFNO0FBS3ZELFlBSkFoSSxJQUFJZ0ksRUFBSyxRQUFRLEdBQUcsR0FDcEI1RixJQUFNNEIsR0FBTSxLQUFLZ0UsRUFBSyxPQUFPLEdBQUdoSSxDQUFDLENBQUMsRUFBRSxZQUFZLEdBQ2hEVyxJQUFNcUQsR0FBTSxLQUFLZ0UsRUFBSyxPQUFPaEksSUFBSSxDQUFDLENBQUMsR0FFL0JvQyxHQUFLO0FBQ1AsY0FBSTJGLEVBQU8zRixDQUFHLEtBQUswRixHQUFrQixRQUFRMUYsQ0FBRyxLQUFLO0FBQ25EO0FBRUVBLGdCQUFRLGVBQ1YyRixFQUFPM0YsQ0FBRyxLQUFLMkYsRUFBTzNGLENBQUcsSUFBSTJGLEVBQU8zRixDQUFHLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQ3pCLENBQUcsQ0FBQyxJQUUzRG9ILEVBQU8zRixDQUFHLElBQUkyRixFQUFPM0YsQ0FBRyxJQUFJMkYsRUFBTzNGLENBQUcsSUFBSSxPQUFPekIsSUFBTUE7UUFBQUE7TUFHN0QsQ0FBQyxHQUVNb0g7SUFDVDtFQUFBLENBQUE7QUNwREEsTUFBQUUsS0FBQXZJLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSW9FLEtBQVEsRUFBQTtBQUVacEUsT0FBTyxVQUNMb0UsR0FBTSxxQkFBcUIsSUFJeEIsV0FBOEI7QUFDN0IsVUFBSWtFLElBQU8sa0JBQWtCLEtBQUssVUFBVSxTQUFTLEdBQ2pEQyxJQUFpQixTQUFTLGNBQWMsR0FBRyxHQUMzQ0M7QUFRSixlQUFTQyxFQUFXbkUsR0FBSztBQUN2QixZQUFJb0UsSUFBT3BFO0FBRVgsZUFBSWdFLE1BRUZDLEVBQWUsYUFBYSxRQUFRRyxDQUFJLEdBQ3hDQSxJQUFPSCxFQUFlLE9BR3hCQSxFQUFlLGFBQWEsUUFBUUcsQ0FBSSxHQUdqQyxFQUNMLE1BQU1ILEVBQWUsTUFDckIsVUFBVUEsRUFBZSxXQUFXQSxFQUFlLFNBQVMsUUFBUSxNQUFNLEVBQUUsSUFBSSxJQUNoRixNQUFNQSxFQUFlLE1BQ3JCLFFBQVFBLEVBQWUsU0FBU0EsRUFBZSxPQUFPLFFBQVEsT0FBTyxFQUFFLElBQUksSUFDM0UsTUFBTUEsRUFBZSxPQUFPQSxFQUFlLEtBQUssUUFBUSxNQUFNLEVBQUUsSUFBSSxJQUNwRSxVQUFVQSxFQUFlLFVBQ3pCLE1BQU1BLEVBQWUsTUFDckIsVUFBV0EsRUFBZSxTQUFTLE9BQU8sQ0FBQyxNQUFNLE1BQy9DQSxFQUFlLFdBQ2YsTUFBTUEsRUFBZSxTQUN6QjtNQUNGO0FBRUEsYUFBQUMsSUFBWUMsRUFBVyxPQUFPLFNBQVMsSUFBSSxHQVFwQyxTQUF5QkUsR0FBWTtBQUMxQyxZQUFJUixJQUFVL0QsR0FBTSxTQUFTdUUsQ0FBVSxJQUFLRixFQUFXRSxDQUFVLElBQUlBO0FBQ3JFLGVBQVFSLEVBQU8sYUFBYUssRUFBVSxZQUNsQ0wsRUFBTyxTQUFTSyxFQUFVO01BQ2hDO0lBQ0YsRUFBRyxJQUdGLFdBQWlDO0FBQ2hDLGFBQU8sV0FBMkI7QUFDaEMsZUFBTztNQUNUO0lBQ0YsRUFBRztFQUFBLENBQUE7QUNsRVAsTUFBQUksSUFBQTlJLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSTBGLEtBQWEsRUFBQSxHQUNidEIsS0FBUSxFQUFBO0FBUVosYUFBU3lFLEdBQWNsRCxHQUFTO0FBRTlCRCxTQUFXLEtBQUssTUFBTUMsS0FBa0IsWUFBc0JELEdBQVcsWUFBWSxHQUNyRixLQUFLLE9BQU87SUFDZDtBQUVBdEIsT0FBTSxTQUFTeUUsSUFBZW5ELElBQVksRUFDeEMsWUFBWSxLQUNkLENBQUM7QUFFRDFGLE9BQU8sVUFBVTZJO0VBQUFBLENBQUFBO0FDckJqQixNQUFBQyxLQUFBaEosRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQUEsT0FBTyxVQUFVLFNBQXVCc0UsR0FBSztBQUMzQyxVQUFJa0QsSUFBUSw0QkFBNEIsS0FBS2xELENBQUc7QUFDaEQsYUFBT2tELEtBQVNBLEVBQU0sQ0FBQyxLQUFLO0lBQzlCO0VBQUEsQ0FBQTtBQ0xBLE1BQUF1QixLQUFBakosRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsSUFBUSxFQUFBLEdBQ1I0RSxLQUFTLEdBQUEsR0FDVEMsS0FBVSxHQUFBLEdBQ1ZDLEtBQVcsR0FBQSxHQUNYQyxLQUFnQixHQUFBLEdBQ2hCQyxLQUFlLEdBQUEsR0FDZkMsS0FBa0IsR0FBQSxHQUNsQkMsS0FBdUIsR0FBQSxHQUN2QjVELElBQWEsRUFBQSxHQUNibUQsS0FBZ0IsRUFBQSxHQUNoQlUsS0FBZ0IsR0FBQTtBQUVwQnZKLE9BQU8sVUFBVSxTQUFvQjZGLEdBQVE7QUFDM0MsYUFBTyxJQUFJLFFBQVEsU0FBNEJrQixHQUFTQyxHQUFRO0FBQzlELFlBQUl3QyxJQUFjM0QsRUFBTyxNQUNyQjRELElBQWlCNUQsRUFBTyxTQUN4QjZELElBQWU3RCxFQUFPLGNBQ3RCOEQ7QUFDSixpQkFBU0MsSUFBTztBQUNWL0QsWUFBTyxlQUNUQSxFQUFPLFlBQVksWUFBWThELENBQVUsR0FHdkM5RCxFQUFPLFVBQ1RBLEVBQU8sT0FBTyxvQkFBb0IsU0FBUzhELENBQVU7UUFFekQ7QUFFSXZGLFVBQU0sV0FBV29GLENBQVcsS0FBS3BGLEVBQU0scUJBQXFCLEtBQzlELE9BQU9xRixFQUFlLGNBQWM7QUFHdEMsWUFBSTNELElBQVUsSUFBSTtBQUdsQixZQUFJRCxFQUFPLE1BQU07QUFDZixjQUFJZ0UsSUFBV2hFLEVBQU8sS0FBSyxZQUFZLElBQ25DaUUsSUFBV2pFLEVBQU8sS0FBSyxXQUFXLFNBQVMsbUJBQW1CQSxFQUFPLEtBQUssUUFBUSxDQUFDLElBQUk7QUFDM0Y0RCxZQUFlLGdCQUFnQixXQUFXLEtBQUtJLElBQVcsTUFBTUMsQ0FBUTtRQUFBO0FBRzFFLFlBQUlDLElBQVdaLEdBQWN0RCxFQUFPLFNBQVNBLEVBQU8sR0FBRztBQUV2REMsVUFBUSxLQUFLRCxFQUFPLE9BQU8sWUFBWSxHQUFHcUQsR0FBU2EsR0FBVWxFLEVBQU8sUUFBUUEsRUFBTyxnQkFBZ0IsR0FBRyxJQUFJLEdBRzFHQyxFQUFRLFVBQVVELEVBQU87QUFFekIsaUJBQVNtRSxLQUFZO0FBQ25CLGNBQUtsRSxHQUlMO0FBQUEsZ0JBQUltRSxJQUFrQiwyQkFBMkJuRSxJQUFVc0QsR0FBYXRELEVBQVEsc0JBQXNCLENBQUMsSUFBSSxNQUN2R29FLElBQWUsQ0FBQ1IsS0FBZ0JBLE1BQWlCLFVBQVdBLE1BQWlCLFNBQy9FNUQsRUFBUSxlQUFlQSxFQUFRLFVBQzdCQyxJQUFXLEVBQ2IsTUFBTW1FLEdBQ04sUUFBUXBFLEVBQVEsUUFDaEIsWUFBWUEsRUFBUSxZQUNwQixTQUFTbUUsR0FDVCxRQUFRcEUsR0FDUixTQUFTQyxFQUNYO0FBRUFrRCxlQUFPLFNBQWtCekQsR0FBTztBQUM5QndCLGdCQUFReEIsQ0FBSyxHQUNicUUsRUFBSztZQUNQLEdBQUcsU0FBaUJPLEdBQUs7QUFDdkJuRCxnQkFBT21ELENBQUcsR0FDVlAsRUFBSztZQUNQLEdBQUc3RCxDQUFRLEdBR1hELElBQVU7VUFBQTtRQUNaO0FBbUVBLFlBakVJLGVBQWVBLElBRWpCQSxFQUFRLFlBQVlrRSxLQUdwQmxFLEVBQVEscUJBQXFCLFdBQXNCO0FBQzdDLFdBQUNBLEtBQVdBLEVBQVEsZUFBZSxLQVFuQ0EsRUFBUSxXQUFXLEtBQUssRUFBRUEsRUFBUSxlQUFlQSxFQUFRLFlBQVksUUFBUSxPQUFPLE1BQU0sTUFLOUYsV0FBV2tFLEVBQVM7UUFDdEIsR0FJRmxFLEVBQVEsVUFBVSxXQUF1QjtBQUNsQ0EsZ0JBSUxrQixFQUFPLElBQUl0QixFQUFXLG1CQUFtQkEsRUFBVyxjQUFjRyxHQUFRQyxDQUFPLENBQUMsR0FHbEZBLElBQVU7UUFDWixHQUdBQSxFQUFRLFVBQVUsV0FBdUI7QUFHdkNrQixZQUFPLElBQUl0QixFQUFXLGlCQUFpQkEsRUFBVyxhQUFhRyxHQUFRQyxHQUFTQSxDQUFPLENBQUMsR0FHeEZBLElBQVU7UUFDWixHQUdBQSxFQUFRLFlBQVksV0FBeUI7QUFDM0MsY0FBSXNFLElBQXNCdkUsRUFBTyxVQUFVLGdCQUFnQkEsRUFBTyxVQUFVLGdCQUFnQixvQkFDeEZ3RSxJQUFleEUsRUFBTyxnQkFBZ0J5RDtBQUN0Q3pELFlBQU8sd0JBQ1R1RSxJQUFzQnZFLEVBQU8sc0JBRS9CbUIsRUFBTyxJQUFJdEIsRUFDVDBFLEdBQ0FDLEVBQWEsc0JBQXNCM0UsRUFBVyxZQUFZQSxFQUFXLGNBQ3JFRyxHQUNBQyxDQUFPLENBQUMsR0FHVkEsSUFBVTtRQUNaLEdBS0kxQixFQUFNLHFCQUFxQixHQUFHO0FBRWhDLGNBQUlrRyxNQUFhekUsRUFBTyxtQkFBbUJ3RCxHQUFnQlUsQ0FBUSxNQUFNbEUsRUFBTyxpQkFDOUVvRCxHQUFRLEtBQUtwRCxFQUFPLGNBQWMsSUFDbEM7QUFFRXlFLGlCQUNGYixFQUFlNUQsRUFBTyxjQUFjLElBQUl5RTtRQUFBQTtBQUt4Qyw4QkFBc0J4RSxLQUN4QjFCLEVBQU0sUUFBUXFGLEdBQWdCLFNBQTBCMUksR0FBS3lCLEdBQUs7QUFDNUQsaUJBQU9nSCxJQUFnQixPQUFlaEgsRUFBSSxZQUFZLE1BQU0saUJBRTlELE9BQU9pSCxFQUFlakgsQ0FBRyxJQUd6QnNELEVBQVEsaUJBQWlCdEQsR0FBS3pCLENBQUc7UUFFckMsQ0FBQyxHQUlFcUQsRUFBTSxZQUFZeUIsRUFBTyxlQUFlLE1BQzNDQyxFQUFRLGtCQUFrQixDQUFDLENBQUNELEVBQU8sa0JBSWpDNkQsS0FBZ0JBLE1BQWlCLFdBQ25DNUQsRUFBUSxlQUFlRCxFQUFPLGVBSTVCLE9BQU9BLEVBQU8sc0JBQXVCLGNBQ3ZDQyxFQUFRLGlCQUFpQixZQUFZRCxFQUFPLGtCQUFrQixHQUk1RCxPQUFPQSxFQUFPLG9CQUFxQixjQUFjQyxFQUFRLFVBQzNEQSxFQUFRLE9BQU8saUJBQWlCLFlBQVlELEVBQU8sZ0JBQWdCLElBR2pFQSxFQUFPLGVBQWVBLEVBQU8sWUFHL0I4RCxJQUFhLFNBQVNZLEdBQVE7QUFDdkJ6RSxnQkFHTGtCLEVBQU8sQ0FBQ3VELEtBQVdBLEtBQVVBLEVBQU8sT0FBUSxJQUFJMUIsT0FBa0IwQixDQUFNLEdBQ3hFekUsRUFBUSxNQUFNLEdBQ2RBLElBQVU7UUFDWixHQUVBRCxFQUFPLGVBQWVBLEVBQU8sWUFBWSxVQUFVOEQsQ0FBVSxHQUN6RDlELEVBQU8sV0FDVEEsRUFBTyxPQUFPLFVBQVU4RCxFQUFXLElBQUk5RCxFQUFPLE9BQU8saUJBQWlCLFNBQVM4RCxDQUFVLEtBSXhGSCxNQUNIQSxJQUFjO0FBR2hCLFlBQUlnQixJQUFXakIsR0FBY1EsQ0FBUTtBQUVyQyxZQUFJUyxLQUFZLENBQUUsUUFBUSxTQUFTLE1BQU8sRUFBRSxRQUFRQSxDQUFRLE1BQU0sSUFBSTtBQUNwRXhELFlBQU8sSUFBSXRCLEVBQVcsMEJBQTBCOEUsSUFBVyxLQUFLOUUsRUFBVyxpQkFBaUJHLENBQU0sQ0FBQztBQUNuRztRQUFBO0FBS0ZDLFVBQVEsS0FBSzBELENBQVc7TUFDMUIsQ0FBQztJQUNIO0VBQUEsQ0FBQTtBQzdOQSxNQUFBaUIsS0FBQTNLLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUNBQSxPQUFPLFVBQVU7RUFBQSxDQUFBO0FDRGpCLE1BQUEwSyxJQUFBNUssRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsSUFBUSxFQUFBLEdBQ1J1RyxLQUFzQixHQUFBLEdBQ3RCakYsS0FBYSxFQUFBLEdBQ2I0RCxLQUF1QixHQUFBLEdBQ3ZCakQsS0FBYSxHQUFBLEdBRWJ1RSxLQUF1QixFQUN6QixnQkFBZ0Isb0NBQ2xCO0FBRUEsYUFBU0MsR0FBc0J4RixHQUFTRSxHQUFPO0FBQ3pDLE9BQUNuQixFQUFNLFlBQVlpQixDQUFPLEtBQUtqQixFQUFNLFlBQVlpQixFQUFRLGNBQWMsQ0FBQyxNQUMxRUEsRUFBUSxjQUFjLElBQUlFO0lBRTlCO0FBRUEsYUFBU3VGLEtBQW9CO0FBQzNCLFVBQUlDO0FBQ0osYUFBSSxPQUFPLGlCQUFtQixNQUU1QkEsSUFBVSxHQUFBLElBQ0QsT0FBTyxVQUFZLE9BQWUsT0FBTyxVQUFVLFNBQVMsS0FBSyxPQUFPLE1BQU0sdUJBRXZGQSxJQUFVLEdBQUEsSUFFTEE7SUFDVDtBQUVBLGFBQVNDLEdBQWdCQyxHQUFVQyxHQUFRQyxHQUFTO0FBQ2xELFVBQUkvRyxFQUFNLFNBQVM2RyxDQUFRO0FBQ3pCLFlBQUk7QUFDRixrQkFBQ0MsS0FBVSxLQUFLLE9BQU9ELENBQVEsR0FDeEI3RyxFQUFNLEtBQUs2RyxDQUFRO1FBQzVCLFNBQVNHLEdBQVQ7QUFDRSxjQUFJQSxFQUFFLFNBQVM7QUFDYixrQkFBTUE7UUFFVjtBQUdGLGNBQVFELEtBQVcsS0FBSyxXQUFXRixDQUFRO0lBQzdDO0FBRUEsUUFBSUksSUFBVyxFQUViLGNBQWMvQixJQUVkLFNBQVN3QixHQUFrQixHQUUzQixrQkFBa0IsQ0FBQyxTQUEwQnBFLEdBQU1yQixHQUFTO0FBSTFELFVBSEFzRixHQUFvQnRGLEdBQVMsUUFBUSxHQUNyQ3NGLEdBQW9CdEYsR0FBUyxjQUFjLEdBRXZDakIsRUFBTSxXQUFXc0MsQ0FBSSxLQUN2QnRDLEVBQU0sY0FBY3NDLENBQUksS0FDeEJ0QyxFQUFNLFNBQVNzQyxDQUFJLEtBQ25CdEMsRUFBTSxTQUFTc0MsQ0FBSSxLQUNuQnRDLEVBQU0sT0FBT3NDLENBQUksS0FDakJ0QyxFQUFNLE9BQU9zQyxDQUFJO0FBRWpCLGVBQU9BO0FBRVQsVUFBSXRDLEVBQU0sa0JBQWtCc0MsQ0FBSTtBQUM5QixlQUFPQSxFQUFLO0FBRWQsVUFBSXRDLEVBQU0sa0JBQWtCc0MsQ0FBSTtBQUM5QixlQUFBbUUsR0FBc0J4RixHQUFTLGlEQUFpRCxHQUN6RXFCLEVBQUssU0FBUztBQUd2QixVQUFJNEUsSUFBa0JsSCxFQUFNLFNBQVNzQyxDQUFJLEdBQ3JDNkUsSUFBY2xHLEtBQVdBLEVBQVEsY0FBYyxHQUUvQ3hEO0FBRUosV0FBS0EsSUFBYXVDLEVBQU0sV0FBV3NDLENBQUksTUFBTzRFLEtBQW1CQyxNQUFnQix1QkFBd0I7QUFDdkcsWUFBSUMsSUFBWSxLQUFLLE9BQU8sS0FBSyxJQUFJO0FBQ3JDLGVBQU9uRixHQUFXeEUsSUFBYSxFQUFDLFdBQVc2RSxFQUFJLElBQUlBLEdBQU04RSxLQUFhLElBQUlBLEdBQVc7TUFBQSxXQUM1RUYsS0FBbUJDLE1BQWdCO0FBQzVDLGVBQUFWLEdBQXNCeEYsR0FBUyxrQkFBa0IsR0FDMUMyRixHQUFnQnRFLENBQUk7QUFHN0IsYUFBT0E7SUFDVCxDQUFDLEdBRUQsbUJBQW1CLENBQUMsU0FBMkJBLEdBQU07QUFDbkQsVUFBSTJELElBQWUsS0FBSyxnQkFBZ0JnQixFQUFTLGNBQzdDSSxJQUFvQnBCLEtBQWdCQSxFQUFhLG1CQUNqRHFCLElBQW9CckIsS0FBZ0JBLEVBQWEsbUJBQ2pEc0IsSUFBb0IsQ0FBQ0YsS0FBcUIsS0FBSyxpQkFBaUI7QUFFcEUsVUFBSUUsS0FBc0JELEtBQXFCdEgsRUFBTSxTQUFTc0MsQ0FBSSxLQUFLQSxFQUFLO0FBQzFFLFlBQUk7QUFDRixpQkFBTyxLQUFLLE1BQU1BLENBQUk7UUFDeEIsU0FBUzBFLEdBQVQ7QUFDRSxjQUFJTztBQUNGLGtCQUFJUCxFQUFFLFNBQVMsZ0JBQ1AxRixHQUFXLEtBQUswRixHQUFHMUYsR0FBVyxrQkFBa0IsTUFBTSxNQUFNLEtBQUssUUFBUSxJQUUzRTBGO1FBRVY7QUFHRixhQUFPMUU7SUFDVCxDQUFDLEdBTUQsU0FBUyxHQUVULGdCQUFnQixjQUNoQixnQkFBZ0IsZ0JBRWhCLGtCQUFrQixJQUNsQixlQUFlLElBRWYsS0FBSyxFQUNILFVBQVUsR0FBQSxFQUNaLEdBRUEsZ0JBQWdCLFNBQXdCa0YsR0FBUTtBQUM5QyxhQUFPQSxLQUFVLE9BQU9BLElBQVM7SUFDbkMsR0FFQSxTQUFTLEVBQ1AsUUFBUSxFQUNOLFFBQVUsb0NBQ1osRUFDRixFQUNGO0FBRUF4SCxNQUFNLFFBQVEsQ0FBQyxVQUFVLE9BQU8sTUFBTSxHQUFHLFNBQTZCeUgsR0FBUTtBQUM1RVIsUUFBUyxRQUFRUSxDQUFNLElBQUksQ0FBQztJQUM5QixDQUFDO0FBRUR6SCxNQUFNLFFBQVEsQ0FBQyxRQUFRLE9BQU8sT0FBTyxHQUFHLFNBQStCeUgsR0FBUTtBQUM3RVIsUUFBUyxRQUFRUSxDQUFNLElBQUl6SCxFQUFNLE1BQU13RyxFQUFvQjtJQUM3RCxDQUFDO0FBRUQ1SyxPQUFPLFVBQVVxTDtFQUFBQSxDQUFBQTtBQ2pKakIsTUFBQVMsS0FBQWhNLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSW9FLEtBQVEsRUFBQSxHQUNSaUgsS0FBVyxFQUFBO0FBVWZyTCxPQUFPLFVBQVUsU0FBdUIwRyxHQUFNckIsR0FBUzBHLEdBQUs7QUFDMUQsVUFBSUMsSUFBVSxRQUFRWDtBQUV0QixhQUFBakgsR0FBTSxRQUFRMkgsR0FBSyxTQUFtQjlMLEdBQUk7QUFDeEN5RyxZQUFPekcsRUFBRyxLQUFLK0wsR0FBU3RGLEdBQU1yQixDQUFPO01BQ3ZDLENBQUMsR0FFTXFCO0lBQ1Q7RUFBQSxDQUFBO0FDckJBLE1BQUF1RixLQUFBbk0sRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQUEsT0FBTyxVQUFVLFNBQWtCdUYsR0FBTztBQUN4QyxhQUFPLENBQUMsRUFBRUEsS0FBU0EsRUFBTTtJQUMzQjtFQUFBLENBQUE7QUNKQSxNQUFBMkcsS0FBQXBNLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSW9FLEtBQVEsRUFBQSxHQUNSK0gsS0FBZ0IsR0FBQSxHQUNoQkMsS0FBVyxHQUFBLEdBQ1hmLEtBQVcsRUFBQSxHQUNYeEMsS0FBZ0IsRUFBQTtBQUtwQixhQUFTd0QsR0FBNkJ4RyxHQUFRO0FBSzVDLFVBSklBLEVBQU8sZUFDVEEsRUFBTyxZQUFZLGlCQUFpQixHQUdsQ0EsRUFBTyxVQUFVQSxFQUFPLE9BQU87QUFDakMsY0FBTSxJQUFJZ0Q7SUFFZDtBQVFBN0ksT0FBTyxVQUFVLFNBQXlCNkYsR0FBUTtBQUNoRHdHLFNBQTZCeEcsQ0FBTSxHQUduQ0EsRUFBTyxVQUFVQSxFQUFPLFdBQVcsQ0FBQyxHQUdwQ0EsRUFBTyxPQUFPc0csR0FBYyxLQUMxQnRHLEdBQ0FBLEVBQU8sTUFDUEEsRUFBTyxTQUNQQSxFQUFPLGdCQUNULEdBR0FBLEVBQU8sVUFBVXpCLEdBQU0sTUFDckJ5QixFQUFPLFFBQVEsVUFBVSxDQUFDLEdBQzFCQSxFQUFPLFFBQVFBLEVBQU8sTUFBTSxLQUFLLENBQUMsR0FDbENBLEVBQU8sT0FDVCxHQUVBekIsR0FBTSxRQUNKLENBQUMsVUFBVSxPQUFPLFFBQVEsUUFBUSxPQUFPLFNBQVMsUUFBUSxHQUMxRCxTQUEyQnlILEdBQVE7QUFDakMsZUFBT2hHLEVBQU8sUUFBUWdHLENBQU07TUFDOUIsQ0FDRjtBQUVBLFVBQUlkLElBQVVsRixFQUFPLFdBQVd3RixHQUFTO0FBRXpDLGFBQU9OLEVBQVFsRixDQUFNLEVBQUUsS0FBSyxTQUE2QkUsR0FBVTtBQUNqRSxlQUFBc0csR0FBNkJ4RyxDQUFNLEdBR25DRSxFQUFTLE9BQU9vRyxHQUFjLEtBQzVCdEcsR0FDQUUsRUFBUyxNQUNUQSxFQUFTLFNBQ1RGLEVBQU8saUJBQ1QsR0FFT0U7TUFDVCxHQUFHLFNBQTRCdUcsR0FBUTtBQUNyQyxlQUFLRixHQUFTRSxDQUFNLE1BQ2xCRCxHQUE2QnhHLENBQU0sR0FHL0J5RyxLQUFVQSxFQUFPLGFBQ25CQSxFQUFPLFNBQVMsT0FBT0gsR0FBYyxLQUNuQ3RHLEdBQ0F5RyxFQUFPLFNBQVMsTUFDaEJBLEVBQU8sU0FBUyxTQUNoQnpHLEVBQU8saUJBQ1QsS0FJRyxRQUFRLE9BQU95RyxDQUFNO01BQzlCLENBQUM7SUFDSDtFQUFBLENBQUE7QUN0RkEsTUFBQUMsS0FBQXpNLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSW9FLElBQVEsRUFBQTtBQVVacEUsT0FBTyxVQUFVLFNBQXFCd00sR0FBU0MsR0FBUztBQUV0REEsVUFBVUEsS0FBVyxDQUFDO0FBQ3RCLFVBQUk1RyxJQUFTLENBQUM7QUFFZCxlQUFTNkcsRUFBZUMsR0FBUUMsR0FBUTtBQUN0QyxlQUFJeEksRUFBTSxjQUFjdUksQ0FBTSxLQUFLdkksRUFBTSxjQUFjd0ksQ0FBTSxJQUNwRHhJLEVBQU0sTUFBTXVJLEdBQVFDLENBQU0sSUFDeEJ4SSxFQUFNLGNBQWN3SSxDQUFNLElBQzVCeEksRUFBTSxNQUFNLENBQUMsR0FBR3dJLENBQU0sSUFDcEJ4SSxFQUFNLFFBQVF3SSxDQUFNLElBQ3RCQSxFQUFPLE1BQU0sSUFFZkE7TUFDVDtBQUdBLGVBQVNDLEVBQW9CcEosR0FBTTtBQUNqQyxZQUFLVyxFQUFNLFlBQVlxSSxFQUFRaEosQ0FBSSxDQUFDLEdBQUE7QUFFN0IsY0FBSSxDQUFDVyxFQUFNLFlBQVlvSSxFQUFRL0ksQ0FBSSxDQUFDO0FBQ3pDLG1CQUFPaUosRUFBZSxRQUFXRixFQUFRL0ksQ0FBSSxDQUFDO1FBQUE7QUFGOUMsaUJBQU9pSixFQUFlRixFQUFRL0ksQ0FBSSxHQUFHZ0osRUFBUWhKLENBQUksQ0FBQztNQUl0RDtBQUdBLGVBQVNxSixFQUFpQnJKLEdBQU07QUFDOUIsWUFBSSxDQUFDVyxFQUFNLFlBQVlxSSxFQUFRaEosQ0FBSSxDQUFDO0FBQ2xDLGlCQUFPaUosRUFBZSxRQUFXRCxFQUFRaEosQ0FBSSxDQUFDO01BRWxEO0FBR0EsZUFBU3NKLEVBQWlCdEosR0FBTTtBQUM5QixZQUFLVyxFQUFNLFlBQVlxSSxFQUFRaEosQ0FBSSxDQUFDLEdBQUE7QUFFN0IsY0FBSSxDQUFDVyxFQUFNLFlBQVlvSSxFQUFRL0ksQ0FBSSxDQUFDO0FBQ3pDLG1CQUFPaUosRUFBZSxRQUFXRixFQUFRL0ksQ0FBSSxDQUFDO1FBQUE7QUFGOUMsaUJBQU9pSixFQUFlLFFBQVdELEVBQVFoSixDQUFJLENBQUM7TUFJbEQ7QUFHQSxlQUFTdUosRUFBZ0J2SixHQUFNO0FBQzdCLFlBQUlBLEtBQVFnSjtBQUNWLGlCQUFPQyxFQUFlRixFQUFRL0ksQ0FBSSxHQUFHZ0osRUFBUWhKLENBQUksQ0FBQztBQUM3QyxZQUFJQSxLQUFRK0k7QUFDakIsaUJBQU9FLEVBQWUsUUFBV0YsRUFBUS9JLENBQUksQ0FBQztNQUVsRDtBQUVBLFVBQUl3SixJQUFXLEVBQ2IsS0FBT0gsR0FDUCxRQUFVQSxHQUNWLE1BQVFBLEdBQ1IsU0FBV0MsR0FDWCxrQkFBb0JBLEdBQ3BCLG1CQUFxQkEsR0FDckIsa0JBQW9CQSxHQUNwQixTQUFXQSxHQUNYLGdCQUFrQkEsR0FDbEIsaUJBQW1CQSxHQUNuQixTQUFXQSxHQUNYLGNBQWdCQSxHQUNoQixnQkFBa0JBLEdBQ2xCLGdCQUFrQkEsR0FDbEIsa0JBQW9CQSxHQUNwQixvQkFBc0JBLEdBQ3RCLFlBQWNBLEdBQ2Qsa0JBQW9CQSxHQUNwQixlQUFpQkEsR0FDakIsZ0JBQWtCQSxHQUNsQixXQUFhQSxHQUNiLFdBQWFBLEdBQ2IsWUFBY0EsR0FDZCxhQUFlQSxHQUNmLFlBQWNBLEdBQ2Qsa0JBQW9CQSxHQUNwQixnQkFBa0JDLEVBQ3BCO0FBRUEsYUFBQTVJLEVBQU0sUUFBUSxPQUFPLEtBQUtvSSxDQUFPLEVBQUUsT0FBTyxPQUFPLEtBQUtDLENBQU8sQ0FBQyxHQUFHLFNBQTRCaEosR0FBTTtBQUNqRyxZQUFJaEIsSUFBUXdLLEVBQVN4SixDQUFJLEtBQUtvSixHQUMxQkssSUFBY3pLLEVBQU1nQixDQUFJO0FBQzNCVyxVQUFNLFlBQVk4SSxDQUFXLEtBQUt6SyxNQUFVdUssTUFBcUJuSCxFQUFPcEMsQ0FBSSxJQUFJeUo7TUFDbkYsQ0FBQyxHQUVNckg7SUFDVDtFQUFBLENBQUE7QUNuR0EsTUFBQXNILEtBQUFyTixFQUFBLENBQUFDLElBQUFDLE9BQUE7QUFBQUEsT0FBTyxVQUFVLEVBQ2YsU0FBVyxTQUNiO0VBQUEsQ0FBQTtBQ0ZBLE1BQUFvTixLQUFBdE4sRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJcU4sS0FBVSxHQUFBLEVBQXVCLFNBQ2pDM0gsSUFBYSxFQUFBLEdBRWI0SCxLQUFhLENBQUM7QUFHbEIsS0FBQyxVQUFVLFdBQVcsVUFBVSxZQUFZLFVBQVUsUUFBUSxFQUFFLFFBQVEsU0FBU3pNLEdBQU1ULEdBQUc7QUFDeEZrTixTQUFXek0sQ0FBSSxJQUFJLFNBQW1CSCxHQUFPO0FBQzNDLGVBQU8sT0FBT0EsTUFBVUcsS0FBUSxPQUFPVCxJQUFJLElBQUksT0FBTyxPQUFPUztNQUMvRDtJQUNGLENBQUM7QUFFRCxRQUFJME0sS0FBcUIsQ0FBQztBQVMxQkQsT0FBVyxlQUFlLFNBQXNCRSxHQUFXQyxHQUFTOUgsR0FBUztBQUMzRSxlQUFTK0gsRUFBY0MsR0FBS0MsR0FBTTtBQUNoQyxlQUFPLGFBQWFQLEtBQVUsNEJBQTZCTSxJQUFNLE1BQU9DLEtBQVFqSSxJQUFVLE9BQU9BLElBQVU7TUFDN0c7QUFHQSxhQUFPLFNBQVNKLEdBQU9vSSxHQUFLRSxHQUFNO0FBQ2hDLFlBQUlMLE1BQWM7QUFDaEIsZ0JBQU0sSUFBSTlILEVBQ1JnSSxFQUFjQyxHQUFLLHVCQUF1QkYsSUFBVSxTQUFTQSxJQUFVLEdBQUcsR0FDMUUvSCxFQUFXLGNBQ2I7QUFHRixlQUFJK0gsS0FBVyxDQUFDRixHQUFtQkksQ0FBRyxNQUNwQ0osR0FBbUJJLENBQUcsSUFBSSxNQUUxQixRQUFRLEtBQ05ELEVBQ0VDLEdBQ0EsaUNBQWlDRixJQUFVLHlDQUM3QyxDQUNGLElBR0tELElBQVlBLEVBQVVqSSxHQUFPb0ksR0FBS0UsQ0FBSSxJQUFJO01BQ25EO0lBQ0Y7QUFTQSxhQUFTQyxHQUFjN0ksR0FBUzhJLEdBQVFDLEdBQWM7QUFDcEQsVUFBSSxPQUFPL0ksS0FBWTtBQUNyQixjQUFNLElBQUlTLEVBQVcsNkJBQTZCQSxFQUFXLG9CQUFvQjtBQUluRixlQUZJdUksSUFBTyxPQUFPLEtBQUtoSixDQUFPLEdBQzFCN0UsSUFBSTZOLEVBQUssUUFDTjdOLE1BQU0sS0FBRztBQUNkLFlBQUl1TixJQUFNTSxFQUFLN04sQ0FBQyxHQUNab04sSUFBWU8sRUFBT0osQ0FBRztBQUMxQixZQUFJSCxHQUFXO0FBQ2IsY0FBSWpJLElBQVFOLEVBQVEwSSxDQUFHLEdBQ25Cdk0sSUFBU21FLE1BQVUsVUFBYWlJLEVBQVVqSSxHQUFPb0ksR0FBSzFJLENBQU87QUFDakUsY0FBSTdELE1BQVc7QUFDYixrQkFBTSxJQUFJc0UsRUFBVyxZQUFZaUksSUFBTSxjQUFjdk0sR0FBUXNFLEVBQVcsb0JBQW9CO0FBRTlGO1FBQUE7QUFFRixZQUFJc0ksTUFBaUI7QUFDbkIsZ0JBQU0sSUFBSXRJLEVBQVcsb0JBQW9CaUksR0FBS2pJLEVBQVcsY0FBYztNQUFBO0lBRzdFO0FBRUExRixPQUFPLFVBQVUsRUFDZixlQUFlOE4sSUFDZixZQUFZUixHQUNkO0VBQUEsQ0FBQTtBQ3JGQSxNQUFBWSxLQUFBcE8sRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJb0UsS0FBUSxFQUFBLEdBQ1I4RSxLQUFXLEdBQUEsR0FDWHBFLEtBQXFCLEdBQUEsR0FDckJxSixLQUFrQixHQUFBLEdBQ2xCQyxJQUFjLEdBQUEsR0FDZGpGLEtBQWdCLEdBQUEsR0FDaEJxRSxLQUFZLEdBQUEsR0FFWkYsSUFBYUUsR0FBVTtBQU0zQixhQUFTYSxFQUFNQyxHQUFnQjtBQUM3QixXQUFLLFdBQVdBLEdBQ2hCLEtBQUssZUFBZSxFQUNsQixTQUFTLElBQUl4SixNQUNiLFVBQVUsSUFBSUEsS0FDaEI7SUFDRjtBQU9BdUosTUFBTSxVQUFVLFVBQVUsU0FBaUJFLEdBQWExSSxHQUFRO0FBRzFELGFBQU8wSSxLQUFnQixZQUN6QjFJLElBQVNBLEtBQVUsQ0FBQyxHQUNwQkEsRUFBTyxNQUFNMEksS0FFYjFJLElBQVMwSSxLQUFlLENBQUMsR0FHM0IxSSxJQUFTdUksRUFBWSxLQUFLLFVBQVV2SSxDQUFNLEdBR3RDQSxFQUFPLFNBQ1RBLEVBQU8sU0FBU0EsRUFBTyxPQUFPLFlBQVksSUFDakMsS0FBSyxTQUFTLFNBQ3ZCQSxFQUFPLFNBQVMsS0FBSyxTQUFTLE9BQU8sWUFBWSxJQUVqREEsRUFBTyxTQUFTO0FBR2xCLFVBQUl3RSxJQUFleEUsRUFBTztBQUV0QndFLFlBQWlCLFVBQ25CbUQsR0FBVSxjQUFjbkQsR0FBYyxFQUNwQyxtQkFBbUJpRCxFQUFXLGFBQWFBLEVBQVcsT0FBTyxHQUM3RCxtQkFBbUJBLEVBQVcsYUFBYUEsRUFBVyxPQUFPLEdBQzdELHFCQUFxQkEsRUFBVyxhQUFhQSxFQUFXLE9BQU8sRUFDakUsR0FBRyxLQUFLO0FBSVYsVUFBSWtCLElBQTBCLENBQUMsR0FDM0JDLElBQWlDO0FBQ3JDLFdBQUssYUFBYSxRQUFRLFFBQVEsU0FBb0NDLEdBQWE7QUFDN0UsZUFBT0EsRUFBWSxXQUFZLGNBQWNBLEVBQVksUUFBUTdJLENBQU0sTUFBTSxVQUlqRjRJLElBQWlDQSxLQUFrQ0MsRUFBWSxhQUUvRUYsRUFBd0IsUUFBUUUsRUFBWSxXQUFXQSxFQUFZLFFBQVE7TUFDN0UsQ0FBQztBQUVELFVBQUlDLElBQTJCLENBQUM7QUFDaEMsV0FBSyxhQUFhLFNBQVMsUUFBUSxTQUFrQ0QsR0FBYTtBQUNoRkMsVUFBeUIsS0FBS0QsRUFBWSxXQUFXQSxFQUFZLFFBQVE7TUFDM0UsQ0FBQztBQUVELFVBQUlFO0FBRUosVUFBSSxDQUFDSCxHQUFnQztBQUNuQyxZQUFJSSxJQUFRLENBQUNWLElBQWlCLE1BQVM7QUFNdkMsYUFKQSxNQUFNLFVBQVUsUUFBUSxNQUFNVSxHQUFPTCxDQUF1QixHQUM1REssSUFBUUEsRUFBTSxPQUFPRixDQUF3QixHQUU3Q0MsSUFBVSxRQUFRLFFBQVEvSSxDQUFNLEdBQ3pCZ0osRUFBTTtBQUNYRCxjQUFVQSxFQUFRLEtBQUtDLEVBQU0sTUFBTSxHQUFHQSxFQUFNLE1BQU0sQ0FBQztBQUdyRCxlQUFPRDtNQUFBQTtBQUtULGVBRElFLElBQVlqSixHQUNUMkksRUFBd0IsVUFBUTtBQUNyQyxZQUFJTyxJQUFjUCxFQUF3QixNQUFNLEdBQzVDUSxJQUFhUixFQUF3QixNQUFNO0FBQy9DLFlBQUk7QUFDRk0sY0FBWUMsRUFBWUQsQ0FBUztRQUNuQyxTQUFTOUksR0FBVDtBQUNFZ0osWUFBV2hKLENBQUs7QUFDaEI7UUFDRjtNQUFBO0FBR0YsVUFBSTtBQUNGNEksWUFBVVQsR0FBZ0JXLENBQVM7TUFDckMsU0FBUzlJLEdBQVQ7QUFDRSxlQUFPLFFBQVEsT0FBT0EsQ0FBSztNQUM3QjtBQUVBLGFBQU8ySSxFQUF5QjtBQUM5QkMsWUFBVUEsRUFBUSxLQUFLRCxFQUF5QixNQUFNLEdBQUdBLEVBQXlCLE1BQU0sQ0FBQztBQUczRixhQUFPQztJQUNUO0FBRUFQLE1BQU0sVUFBVSxTQUFTLFNBQWdCeEksR0FBUTtBQUMvQ0EsVUFBU3VJLEVBQVksS0FBSyxVQUFVdkksQ0FBTTtBQUMxQyxVQUFJa0UsSUFBV1osR0FBY3RELEVBQU8sU0FBU0EsRUFBTyxHQUFHO0FBQ3ZELGFBQU9xRCxHQUFTYSxHQUFVbEUsRUFBTyxRQUFRQSxFQUFPLGdCQUFnQjtJQUNsRTtBQUdBekIsT0FBTSxRQUFRLENBQUMsVUFBVSxPQUFPLFFBQVEsU0FBUyxHQUFHLFNBQTZCeUgsR0FBUTtBQUV2RndDLFFBQU0sVUFBVXhDLENBQU0sSUFBSSxTQUFTdkgsR0FBS3VCLEdBQVE7QUFDOUMsZUFBTyxLQUFLLFFBQVF1SSxFQUFZdkksS0FBVSxDQUFDLEdBQUcsRUFDNUMsUUFBUWdHLEdBQ1IsS0FBS3ZILEdBQ0wsT0FBT3VCLEtBQVUsQ0FBQyxHQUFHLEtBQ3ZCLENBQUMsQ0FBQztNQUNKO0lBQ0YsQ0FBQztBQUVEekIsT0FBTSxRQUFRLENBQUMsUUFBUSxPQUFPLE9BQU8sR0FBRyxTQUErQnlILEdBQVE7QUFHN0UsZUFBU29ELEVBQW1CQyxHQUFRO0FBQ2xDLGVBQU8sU0FBb0I1SyxHQUFLb0MsR0FBTWIsR0FBUTtBQUM1QyxpQkFBTyxLQUFLLFFBQVF1SSxFQUFZdkksS0FBVSxDQUFDLEdBQUcsRUFDNUMsUUFBUWdHLEdBQ1IsU0FBU3FELElBQVMsRUFDaEIsZ0JBQWdCLHNCQUNsQixJQUFJLENBQUMsR0FDTCxLQUFLNUssR0FDTCxNQUFNb0MsRUFDUixDQUFDLENBQUM7UUFDSjtNQUNGO0FBRUEySCxRQUFNLFVBQVV4QyxDQUFNLElBQUlvRCxFQUFtQixHQUU3Q1osRUFBTSxVQUFVeEMsSUFBUyxNQUFNLElBQUlvRCxFQUFtQixJQUFJO0lBQzVELENBQUM7QUFFRGpQLE9BQU8sVUFBVXFPO0VBQUFBLENBQUFBO0FDL0pqQixNQUFBYyxLQUFBclAsRUFBQSxDQUFBQyxJQUFBQyxPQUFBO0FBQUE7QUFFQSxRQUFJNkksS0FBZ0IsRUFBQTtBQVFwQixhQUFTdUcsRUFBWUMsR0FBVTtBQUM3QixVQUFJLE9BQU9BLEtBQWE7QUFDdEIsY0FBTSxJQUFJLFVBQVUsOEJBQThCO0FBR3BELFVBQUlDO0FBRUosV0FBSyxVQUFVLElBQUksUUFBUSxTQUF5QnZJLEdBQVM7QUFDM0R1SSxZQUFpQnZJO01BQ25CLENBQUM7QUFFRCxVQUFJd0ksSUFBUTtBQUdaLFdBQUssUUFBUSxLQUFLLFNBQVNoRixHQUFRO0FBQ2pDLFlBQUtnRixFQUFNLFlBRVg7QUFBQSxjQUFJblAsR0FDQW1DLElBQUlnTixFQUFNLFdBQVc7QUFFekIsZUFBS25QLElBQUksR0FBR0EsSUFBSW1DLEdBQUduQztBQUNqQm1QLGNBQU0sV0FBV25QLENBQUMsRUFBRW1LLENBQU07QUFFNUJnRixZQUFNLGFBQWE7UUFBQTtNQUNyQixDQUFDLEdBR0QsS0FBSyxRQUFRLE9BQU8sU0FBU0MsR0FBYTtBQUN4QyxZQUFJQyxHQUVBYixJQUFVLElBQUksUUFBUSxTQUFTN0gsR0FBUztBQUMxQ3dJLFlBQU0sVUFBVXhJLENBQU8sR0FDdkIwSSxJQUFXMUk7UUFDYixDQUFDLEVBQUUsS0FBS3lJLENBQVc7QUFFbkIsZUFBQVosRUFBUSxTQUFTLFdBQWtCO0FBQ2pDVyxZQUFNLFlBQVlFLENBQVE7UUFDNUIsR0FFT2I7TUFDVCxHQUVBUyxFQUFTLFNBQWdCMUosR0FBUztBQUM1QjRKLFVBQU0sV0FLVkEsRUFBTSxTQUFTLElBQUkxRyxHQUFjbEQsQ0FBTyxHQUN4QzJKLEVBQWVDLEVBQU0sTUFBTTtNQUM3QixDQUFDO0lBQ0g7QUFLQUgsTUFBWSxVQUFVLG1CQUFtQixXQUE0QjtBQUNuRSxVQUFJLEtBQUs7QUFDUCxjQUFNLEtBQUs7SUFFZjtBQU1BQSxNQUFZLFVBQVUsWUFBWSxTQUFtQk0sR0FBVTtBQUM3RCxVQUFJLEtBQUssUUFBUTtBQUNmQSxVQUFTLEtBQUssTUFBTTtBQUNwQjtNQUFBO0FBR0UsV0FBSyxhQUNQLEtBQUssV0FBVyxLQUFLQSxDQUFRLElBRTdCLEtBQUssYUFBYSxDQUFDQSxDQUFRO0lBRS9CO0FBTUFOLE1BQVksVUFBVSxjQUFjLFNBQXFCTSxHQUFVO0FBQ2pFLFVBQUssS0FBSyxZQUdWO0FBQUEsWUFBSUMsSUFBUSxLQUFLLFdBQVcsUUFBUUQsQ0FBUTtBQUN4Q0MsY0FBVSxNQUNaLEtBQUssV0FBVyxPQUFPQSxHQUFPLENBQUM7TUFBQTtJQUVuQztBQU1BUCxNQUFZLFNBQVMsV0FBa0I7QUFDckMsVUFBSTdFLEdBQ0FnRixJQUFRLElBQUlILEVBQVksU0FBa0JRLEdBQUc7QUFDL0NyRixZQUFTcUY7TUFDWCxDQUFDO0FBQ0QsYUFBTyxFQUNMLE9BQU9MLEdBQ1AsUUFBUWhGLEVBQ1Y7SUFDRjtBQUVBdkssT0FBTyxVQUFVb1A7RUFBQUEsQ0FBQUE7QUN0SGpCLE1BQUFTLEtBQUEvUCxFQUFBLENBQUFDLElBQUFDLE9BQUE7QUFBQTtBQXNCQUEsT0FBTyxVQUFVLFNBQWdCOFAsR0FBVTtBQUN6QyxhQUFPLFNBQWM5TCxHQUFLO0FBQ3hCLGVBQU84TCxFQUFTLE1BQU0sTUFBTTlMLENBQUc7TUFDakM7SUFDRjtFQUFBLENBQUE7QUMxQkEsTUFBQStMLEtBQUFqUSxFQUFBLENBQUFDLElBQUFDLE9BQUE7QUFBQTtBQUVBLFFBQUlvRSxLQUFRLEVBQUE7QUFRWnBFLE9BQU8sVUFBVSxTQUFzQmdRLEdBQVM7QUFDOUMsYUFBTzVMLEdBQU0sU0FBUzRMLENBQU8sS0FBTUEsRUFBUSxpQkFBaUI7SUFDOUQ7RUFBQSxDQUFBO0FDWkEsTUFBQUMsS0FBQW5RLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBO0FBRUEsUUFBSW9FLEtBQVEsRUFBQSxHQUNSOUQsS0FBTyxFQUFBLEdBQ1ArTixJQUFRLEdBQUEsR0FDUkQsS0FBYyxHQUFBLEdBQ2QvQyxLQUFXLEVBQUE7QUFRZixhQUFTNkUsR0FBZUMsR0FBZTtBQUNyQyxVQUFJbkUsSUFBVSxJQUFJcUMsRUFBTThCLENBQWEsR0FDakNDLElBQVc5UCxHQUFLK04sRUFBTSxVQUFVLFNBQVNyQyxDQUFPO0FBR3BELGFBQUE1SCxHQUFNLE9BQU9nTSxHQUFVL0IsRUFBTSxXQUFXckMsQ0FBTyxHQUcvQzVILEdBQU0sT0FBT2dNLEdBQVVwRSxDQUFPLEdBRzlCb0UsRUFBUyxTQUFTLFNBQWdCOUIsR0FBZ0I7QUFDaEQsZUFBTzRCLEdBQWU5QixHQUFZK0IsR0FBZTdCLENBQWMsQ0FBQztNQUNsRSxHQUVPOEI7SUFDVDtBQUdBLFFBQUlDLElBQVFILEdBQWU3RSxFQUFRO0FBR25DZ0YsTUFBTSxRQUFRaEM7QUFHZGdDLE1BQU0sZ0JBQWdCLEVBQUE7QUFDdEJBLE1BQU0sY0FBYyxHQUFBO0FBQ3BCQSxNQUFNLFdBQVcsR0FBQTtBQUNqQkEsTUFBTSxVQUFVLEdBQUEsRUFBc0I7QUFDdENBLE1BQU0sYUFBYSxHQUFBO0FBR25CQSxNQUFNLGFBQWEsRUFBQTtBQUduQkEsTUFBTSxTQUFTQSxFQUFNO0FBR3JCQSxNQUFNLE1BQU0sU0FBYUMsR0FBVTtBQUNqQyxhQUFPLFFBQVEsSUFBSUEsQ0FBUTtJQUM3QjtBQUNBRCxNQUFNLFNBQVMsR0FBQTtBQUdmQSxNQUFNLGVBQWUsR0FBQTtBQUVyQnJRLE9BQU8sVUFBVXFRO0FBR2pCclEsT0FBTyxRQUFRLFVBQVVxUTtFQUFBQSxDQUFBQTtBQy9EekIsTUFBQUosS0FBQW5RLEVBQUEsQ0FBQUMsSUFBQUMsT0FBQTtBQUFBQSxPQUFPLFVBQVUsR0FBQTtFQUFBLENBQUE7QUNBakIsTUFBQXVRLElBQWtCLEdBQUEsR0FBQSxHQUFBLENBQUE7QUNBbEIsTUFBTUMsSUFBWTtBQUFsQixNQUVNQyxJQUFVLEVBQ1osTUFBUSxFQUNKLE9BQU8sTUFDUCxRQUFRLEdBQ1IsT0FBTyxFQUNILFVBQVksR0FBR0QsMkJBQ2YsU0FBVyxHQUFHQSxtQ0FDZCxhQUFlLEdBQUdBLHNDQUN0QixFQUNKLEdBQ0EsTUFBUSxFQUNKLE9BQU8sR0FDUCxRQUFRLEdBQ1IsT0FBTyxFQUNILFVBQVksR0FBR0EsMkJBQ2YsU0FBVyxHQUFHQSxtQ0FDZCxhQUFlLEdBQUdBLHNDQUN0QixFQUNKLEdBQ0EsUUFBVSxFQUNOLE9BQU8sR0FDUCxRQUFRLEdBQ1IsT0FBTyxFQUNILFVBQVksR0FBR0EsNkJBQ2YsU0FBVyxHQUFHQSxxQ0FDZCxhQUFlLEdBQUdBLHdDQUN0QixFQUNKLEVBQ0o7QUM5QkEsTUFBQUQsS0FBa0IsR0FBQSxHQUFBLEdBQUEsQ0FBQTtBQWtFbEIsTUFBTUcsS0FBcUIsTUFBTTtBQUUvQixRQUFNQyxJQUFpQixPQUFPLFVBQVUsUUFBUSxPQUFPLGtCQUFrQixNQUNuRUMsSUFBVSxVQUFVLFVBQVUsU0FBUyxlQUFlLEdBQ3REQyxJQUFhRixLQUFpQkMsSUFBVSxTQUMzQkQsS0FBaUJDLElBQVUsWUFDM0I7QUFDbkIsV0FBTyxFQUFFLE9BQU9DLE1BQWUsUUFBUSxZQUFZQSxFQUFXO0VBQ2hFO0FBUkEsTUFjTUMsS0FBcUIsTUFBTTtBQUcvQixRQUFNSCxJQUFpQixPQUFPLG1CQUFtQixRQUFRLE9BQU8sbUJBQW1CLE1BQzdFQyxJQUFVLFVBQVUsVUFBVSxTQUFTLFdBQVcsS0FBSyxDQUFDLFVBQVUsVUFBVSxTQUFTLGVBQWUsR0FDcEdDLElBQWFGLEtBQWlCQyxJQUFVLFNBQzNCRCxLQUFpQkMsSUFBVSxZQUMzQjtBQUNuQixXQUFPLEVBQUUsT0FBT0MsTUFBZSxRQUFRLFlBQVlBLEVBQVc7RUFDaEU7QUF2QkEsTUE2Qk9FLEtBQW1CLFlBQVk7QUFHcEMsUUFBTUosSUFBZ0IsVUFBVSxNQUM3QixNQUFNLFVBQVUsR0FBRyxtQkFBbUIsY0FBYyxLQUFLLE1BQU0sVUFBVSxHQUFHLG1CQUFtQixjQUFjLEdBQzFHQyxJQUFVLFVBQVUsVUFBVSxTQUFTLGlCQUFpQixHQUN4REMsSUFBYUYsS0FBaUJDLElBQVUsU0FDM0JELEtBQWlCQyxJQUFVLFlBQzNCO0FBQ25CLFdBQU8sRUFBRSxPQUFPQyxNQUFlLFFBQVEsWUFBWUEsRUFBVztFQUNoRTtBQXZDQSxNQTZDT0csS0FBc0IsTUFBTTtBQUVqQyxRQUFNTCxJQUFpQixVQUFVLG1CQUFtQixLQUFLLFVBQVUscUJBQXFCLEdBQ2xGQyxJQUFVLENBQUMsVUFBVSxVQUFVLFNBQVMsU0FBUyxLQUFLLENBQUMsVUFBVSxVQUFVLFNBQVMsUUFBUSxHQUM1RkMsSUFBYUYsS0FBaUJDLElBQVUsU0FDM0JELEtBQWlCQyxJQUFVLFlBQzNCO0FBQ25CLFdBQU8sRUFBRSxPQUFPQyxNQUFlLFFBQVEsWUFBWUEsRUFBVztFQUNoRTtBQXJEQSxNQXVETUksS0FBb0IsWUFBWTtBQUNwQyxRQUFJQyxJQUFlLEVBQ2pCLFVBQVUsSUFDVixZQUFZLEdBQ2Q7QUFFQSxXQUFJUixHQUFtQixFQUFFLFFBQ3ZCUSxJQUFlLEVBQUUsVUFBVSxVQUFVLFlBQVlSLEdBQW1CLEVBQUUsV0FBVyxJQUN4RUksR0FBbUIsRUFBRSxRQUM5QkksSUFBZSxFQUFFLFVBQVUsVUFBVSxZQUFZSixHQUFtQixFQUFFLFdBQVcsSUFDeEUsTUFBTUMsR0FBaUIsRUFBRSxRQUNsQ0csSUFBZSxFQUFFLFVBQVUsUUFBUSxZQUFZLE1BQU1ILEdBQWlCLEVBQUUsV0FBVyxJQUMxRUMsR0FBb0IsRUFBRSxRQUMvQkUsSUFBZSxFQUFFLFVBQVUsV0FBVyxZQUFZRixHQUFvQixFQUFFLFdBQVcsSUFHbkZFLElBQWUsRUFBRSxVQUFVLFdBQVcsWUFBWSxPQUFPLEdBR3BEQTtFQUNUO0FBM0VBLE1BNkVNQyxLQUFVN00sT0FBTztBQUNyQixRQUFLQSxHQUlMO0FBQUEsVUFBSW9NLEdBQW1CLEVBQUUsT0FBQTtBQUN2QixZQUFJcE0sRUFBSSxTQUFTLDJDQUEyQyxHQUFHO0FBQzNELHFCQUFXLE1BQU07QUFDZixtQkFBTyxLQUFLQSxHQUFLLFFBQVE7VUFDM0IsR0FBRyxHQUFJO0FBQ1A7UUFBQTtNQUFBLFdBRUt3TSxHQUFtQixFQUFFLE9BQU87QUFNckMsWUFBTU0sSUFBUSxTQUFTLGNBQWMsS0FBSyxHQUNwQ3JPLElBQVUsU0FBUyxjQUFjLEtBQUssR0FDdEM0QyxJQUFVLFNBQVMsY0FBYyxHQUFHLEdBQ3BDMEwsSUFBTSxTQUFTLGNBQWMsUUFBUSxHQUNyQ0MsSUFBSyxTQUFTLGNBQWMsUUFBUTtBQUUxQ0YsVUFBTSxNQUFNLGtCQUFrQixzQkFDOUJBLEVBQU0sTUFBTSxRQUFRLFNBQ3BCQSxFQUFNLE1BQU0sWUFBWSxVQUN4QkEsRUFBTSxNQUFNLFdBQVcsU0FDdkJBLEVBQU0sTUFBTSxNQUFNLE9BQ2xCQSxFQUFNLE1BQU0sT0FBTyxPQUNuQkEsRUFBTSxNQUFNLFVBQVUsTUFDdEJBLEVBQU0sTUFBTSxlQUFlLE1BQzNCQSxFQUFNLE1BQU0sWUFBWSx5QkFFeEJ6TCxFQUFRLFlBQVksOEJBQThCckIsb0JBRWxEK00sRUFBSSxZQUFZLGlDQUNoQkEsRUFBSSxNQUFNLFFBQVEsU0FDbEJBLEVBQUksTUFBTSxTQUFTLFNBQ25CQSxFQUFJLGVBQWUsTUFBTTtBQUN2QkEsWUFBSSxNQUFNLFFBQVEsUUFDbEJBLEVBQUksTUFBTSxTQUFTLFFBQ25CQSxFQUFJLFlBQVk7UUFDbEIsR0FDQUEsRUFBSSxVQUFVLE1BQU07QUFDbEIsaUJBQU8sS0FBSy9NLEdBQUssUUFBUSxHQUN6QjhNLEVBQU0sT0FBTztRQUNmLEdBRUFFLEVBQUcsWUFBWSxNQUNmQSxFQUFHLFVBQVUsTUFBTTtBQUNqQkYsWUFBTSxPQUFPO1FBQ2YsR0FFQUEsRUFBTSxPQUFPck8sQ0FBTyxHQUNwQkEsRUFBUSxPQUFPNEMsQ0FBTyxHQUN0QjVDLEVBQVEsT0FBT3NPLENBQUcsR0FDbEJ0TyxFQUFRLE9BQU91TyxDQUFFLEdBQ2pCLFNBQVMsS0FBSyxPQUFPRixDQUFLO0FBQzFCO01BQUE7QUFFRixhQUFPLEtBQUs5TSxHQUFLLFFBQVE7SUFBQTtFQUMzQjtBRnhNQSxNQUFNaU4sS0FBa0I7QUFBeEIsTUFDTUMsS0FBcUI7QUFEM0IsTUFHTUMsS0FBYztBQU1wQixNQUFNQyxLQUFrQixPQUFPQyxHQUFVQyxJQUFTLFFBQVFDLElBQVEsZUFBZTtBQUMvRSxRQUFJO0FBQ0YsVUFBTXZOLElBQU0sVUFBVSxPQUFPLElBQUksU0FBUyxJQUFJLEVBQUUsUUFBUSxPQUFPLEVBQUU7QUFFakUsY0FEWSxNQUFNLEVBQUErTCxRQUFNLElBQUksR0FBR29CLG9CQUE2QkUsU0FBZ0JyTixHQUFLLEdBQ3RFO0lBQ2IsUUFBQTtBQUNFLGFBQUEsUUFBUSxLQUFLLHdFQUF3RSxHQUM5RSxFQUFFLEtBQUssQ0FBQyxFQUFFLFdBQVdtTSxFQUFRbUIsQ0FBTSxFQUFFLE1BQU1DLENBQUssR0FBRyxTQUFTLDJCQUEyQixDQUFDLEdBQUcsWUFBWSxlQUFjO0lBQzlIO0VBQ0Y7QUFUQSxNQWdCTUMsS0FBbUIsT0FBT0MsR0FBU0MsSUFBYSxTQUFTO0FBQzdELFFBQU0sRUFBRSxVQUFBQyxHQUFVLFlBQUFwQixFQUFXLElBQUksTUFBTUksR0FBa0I7QUFFekQsUUFBSTtBQUNGLFVBQU1pQixJQUF1QlgsS0FBa0IsaUJBQWlCUTtBQUNoRSxZQUFNLEVBQUExQixRQUFNLElBQUk2QixDQUFvQixHQUVwQyxNQUFNLEVBQUE3QixRQUFNLEtBQ1ZtQixJQUNBLEVBQUUsT0FBTyxxREFBc0RPLG9CQUE0QkMseUJBQW1DQyxrQkFBeUJwQixxQkFBOEIsR0FDckwsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLG1CQUFtQixFQUFDLENBQ25EO0lBQ0YsU0FBU3pGLEdBQVQ7QUFDRSxjQUFRLElBQUksK0JBQStCQSxFQUFFLE9BQU87SUFDdEQ7RUFDRjtBQS9CQSxNQWlDTStHLEtBQW9CLE9BQU9KLEdBQVNDLElBQWEsU0FBUztBQUM5RCxRQUFNLEVBQUUsVUFBQUMsR0FBVSxZQUFBcEIsRUFBVyxJQUFJLE1BQU1JLEdBQWtCO0FBRXpELFFBQUk7QUFDRixVQUFNbUIsSUFBcUJiLEtBQWtCLHVCQUF1QlE7QUFDcEUsWUFBTSxFQUFBMUIsUUFBTSxJQUFJK0IsQ0FBa0IsR0FFbEMsTUFBTSxFQUFBL0IsUUFBTSxLQUNWbUIsSUFDQSxFQUFFLE9BQU8scURBQXNETyxvQkFBNEJDLHlCQUFtQ0Msa0JBQXlCcEIscUJBQThCLEdBQ3JMLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixtQkFBbUIsRUFBQyxDQUNuRDtJQUNGLFNBQVN6RixHQUFUO0FBQ0UsY0FBUSxJQUFJLGdDQUFnQ0EsRUFBRSxPQUFPO0lBQ3ZEO0VBQ0Y7QUc1REUsTUFBQXFDLEtBQVc7QUNhYixVQUFRLElBQUksdUJBQXVCQSxFQUFPO0FBRTFDLE1BQU00RSxLQUFjO0FBQXBCLE1BQ01DLEtBQWlCO0FBRHZCLE1BV2FDLElBQU4sY0FBMEJDLFVBQVU7SUF3QnpDLE9BQU8sV0FBV0MsR0FBUTtBQUN4QkEsUUFBTyxrQkFBa0JDLFlBQVk7SUFDdkM7SUFFQSxPQUFPO0FBQ0wsV0FBSyxVQUFVLE9BQU8sT0FBT2pDLENBQU8sR0FDcEMsS0FBSyxhQUFhLE9BQU8sS0FBS0EsQ0FBTyxHQUNyQyxLQUFLLFlBQVksQ0FBQyxZQUFZLFdBQVcsYUFBYTtJQUN4RDtJQUVBLFFBQVE7QUFFTixVQURBLEtBQUssT0FBTyxLQUFLLE9BQU8sYUFBYWtDLGFBQWEsR0FDOUMsQ0FBQyxLQUFLO0FBQ1IsY0FBTSxJQUFJLE1BQU0sd0NBQXdDO0FBZ0IxRCxVQWJJLEtBQUssNkJBQ1AsS0FBSyxZQUNILEtBQUssT0FBTyxhQUFhQyxrQkFBa0IsS0FDM0MsS0FBSyxPQUFPLGFBQWFBLG9CQUFvQixFQUMzQyxVQUFVQyxTQUFTLEtBQ25CLE9BQU8sRUFDVCxDQUFDLEdBRUgsS0FBSyxlQUNILEtBQUssT0FBTyxhQUFhSCxZQUFZLEtBQUssS0FBSyxPQUFPLGFBQWFBLFlBQVksR0FDL0UsS0FBSyxhQUFhLFFBQVEsSUFBSSxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUMsSUFHckQsS0FBSyxnQkFBZ0I7QUFDdkIsWUFBSUksSUFBZ0IsU0FBUyxjQUFjLFFBQVE7QUFFbkRBLFVBQWMsU0FBUyxNQUFNO0FBQzNCLGVBQUssa0JBQWtCLGFBQWE7UUFDdEMsR0FDQUEsRUFBYyxhQUFhLE9BQU9ULEVBQVcsR0FDN0NTLEVBQWMsYUFBYSxlQUFlLFdBQVcsR0FDckQsU0FBUyxLQUFLLFlBQVlBLENBQWE7TUFBQTtBQUdyQyxXQUFLLG9CQUNQLE9BQU9SLElBQ0osS0FBSy9NLE9BQVM7QUFDYixhQUFLLGtCQUFrQixPQUFPLE9BQU8sQ0FBQyxHQUFHQSxDQUFLLEdBQzlDLEtBQUssYUFBYTtNQUNwQixDQUFDLEVBQ0EsTUFBTSxNQUFNO0FBQ1gsZ0JBQVEsTUFBTSxrRkFBa0YsR0FDaEcsS0FBSyxvQkFBb0IsT0FDekIsS0FBSyxhQUFhO01BQ3BCLENBQUMsSUFFSCxLQUFLLGFBQWE7SUFFdEI7SUFFQSxlQUFlO0FBQ2IsV0FBSyxXQUNILEtBQUssUUFDTCxLQUFLLFdBQVcsS0FBSyxNQUFNLEdBQzNCLEtBQUssVUFBVSxLQUFLLEtBQUssQ0FDM0IsRUFBRSxLQUFLd04sT0FBVTtBQUNmLGFBQUssU0FBU0EsR0FDVixLQUFLLGlCQUVQLEtBQUssU0FBUyxLQUFLLE9BQU8sYUFBYSxDQUFDLEdBQ3hDLEtBQUssT0FBTyxhQUFhLEdBQ3JCLEtBQUssNkJBQ1AsS0FBSyxVQUFVLFVBQVUsQ0FDdkIsS0FBSyxRQUFRLEtBQUssTUFBTSxFQUFFLFFBQVEsS0FBSyxRQUN2QyxLQUFLLFFBQ0wsR0FDRixJQUVGLEtBQUssT0FBTyxNQUFNLENBQUMsS0FBSyxRQUFRLEtBQUssTUFBTSxFQUFFLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxDQUFHLENBQUM7QUFFckYsWUFBTUMsSUFBSSxLQUFLLEtBQUssU0FBUyxNQUFNO0FBQ25DLFlBQUksS0FBSyxvQkFBb0IsUUFBUTtBQUNuQyxjQUFNQyxJQUFXRCxFQUFFO0FBQ25CLGNBQUlDLE1BQWE7QUFDZkQsY0FBRSxpQkFBaUJELEVBQU8sU0FDMUJDLEVBQUUscUJBQXFCO21CQUNkQyxNQUFhO0FBQ3RCRCxjQUFFLGNBQWNELEVBQU8sU0FDdkJDLEVBQUUscUJBQXFCOztBQUV2QixrQkFBTSxNQUNKLHlFQUF5RUMsQ0FDM0U7QUFFRixlQUFLLEtBQUssV0FBV0QsR0FDckIsS0FBSyxLQUFLLFNBQVMsbUJBQW1CRCxFQUFPO1FBQUE7QUFFN0MsZUFBSyxLQUFLLFNBQVMsS0FBSyxlQUFlLElBQUlBLEVBQU8sU0FDbEQsS0FBSyxLQUFLLFNBQVMsbUJBQW1CQSxFQUFPO0FBRTNDLGFBQUssV0FDUCxLQUFLLG9CQUNILEtBQUssZ0JBQWdCLGlCQUFpQixLQUFLLFFBQVEsS0FBSyxPQUFPLFVBQVUsSUFDekVqQixHQUFpQixLQUFLLFFBQVEsS0FBSyxPQUFPLFVBQVU7TUFFMUQsQ0FBQztJQUNIO0lBRUEsVUFBVTtBQUNKLFdBQUssUUFBUSxRQUNYLEtBQUssT0FBTyxLQUNkLEtBQUssT0FBTyxHQUFHLFFBQVEsSUFBSSxFQUFFLEtBQUssS0FBSyxhQUFhLEtBQUssSUFBSSxDQUFDLElBQ3JELEtBQUssT0FBTyxZQUNyQixLQUFLLE9BQU8sVUFBVSxJQUFJLEVBQUUsS0FBSyxLQUFLLGFBQWEsS0FBSyxJQUFJLENBQUMsSUFFN0QsS0FBSyxhQUFhO0lBR3hCO0lBRUEsZUFBZTtBQUNiWCxTQUFRLEtBQUssT0FBTyxHQUFHLEdBQ25CLEtBQUssV0FDUCxLQUFLLG9CQUNILEtBQUssZ0JBQWdCLGtCQUFrQixLQUFLLFFBQVEsS0FBSyxPQUFPLFVBQVUsSUFDMUVnQixHQUFrQixLQUFLLFFBQVEsS0FBSyxPQUFPLFVBQVU7SUFFM0Q7SUFFQSxNQUFNLFdBQVdlLEdBQVF0QixHQUFRQyxHQUFPO0FBQ3RDLFVBQU1zQixJQUFpQixLQUFLLG9CQUMxQixNQUFNLEtBQUssZ0JBQWdCLGdCQUFnQkQsR0FBUXRCLEdBQVFDLENBQUssSUFDaEUsTUFBTUgsR0FBZ0J3QixHQUFRdEIsR0FBUUMsQ0FBSyxHQUV2QyxFQUFFLFdBQVd1QixHQUFPLFNBQVM5TyxFQUFJLElBQUk2TyxFQUFlLElBQUksQ0FBQztBQUMvRCxhQUFBLEtBQUssYUFBYUEsRUFBZSxZQUUxQixLQUFLLE9BQU8sU0FBUyxLQUFLQyxHQUFPLEVBQUUsRUFBRSxLQUFLQyxRQUN4QyxFQUFFLFNBQUFBLEdBQVMsVUFBVUQsR0FBTyxLQUFBOU8sR0FBSyxZQUFZNk8sRUFBZSxXQUFXLEVBQy9FO0lBQ0g7RUFDRjtBQWhLRUcsSUFEV2YsR0FDSixZQUFXLGNBQUEsR0FDbEJlLEVBRldmLEdBRUosY0FBYSxFQUVsQixRQUFRZ0IsU0FBUyxPQUFPLEVBQUUsR0FFMUIsUUFBUUEsU0FBUyxLQUFLLENBQUMsUUFBUSxRQUFRLFFBQVEsR0FBRyxRQUFRLEdBRTFELE9BQU9BLFNBQVMsS0FBSyxDQUFDLFlBQVksV0FBVyxhQUFhLEdBQUcsYUFBYSxHQUUxRSxjQUFjQSxTQUFTLEtBQUssSUFBSSxHQUdoQyxpQkFBaUJBLFNBQVMsT0FBTyxNQUFNLEdBRXZDLHdCQUF3QkEsU0FBUyxLQUFLLElBQUksR0FDMUMsUUFBUUEsU0FBUyxLQUFLLElBQUksR0FFMUIsZ0JBQWdCQSxTQUFTLEtBQUssSUFBSSxHQUVsQywwQkFBMEJBLFNBQVMsS0FBSyxJQUFJLEdBRTVDLG1CQUFtQkEsU0FBUyxLQUFLLEtBQUssRUFDeEMsQ0FBQTs7O0FDbkRGO0FBQUE7QUFBQTtBQUFBO0FBWU8sTUFBTSxjQUFOLGNBQTBCLFVBQVU7QUFBQSxJQU96QyxZQUE0QjtBQUFBLElBTTVCLGNBQW9CO0FBQUEsSUFNcEIsY0FBcUI7QUFBQSxJQUVyQixRQUFRO0FBQ04sVUFBSSxRQUFRLFFBQVEsVUFBVSxLQUFLLFFBQVEsaUJBQWlCO0FBQzVELFVBQUksQ0FBQyxPQUFPO0FBQ1YsZ0JBQVEsS0FBSyxrRUFBa0U7QUFDL0U7QUFBQSxNQUNGO0FBQ0EsWUFBTSxTQUFTLE1BQU0sYUFBYSxZQUFZO0FBQzlDLFVBQUksQ0FBQyxRQUFRO0FBQ1gsZ0JBQVEsS0FBSywrREFBK0Q7QUFDNUU7QUFBQSxNQUNGO0FBRUEsYUFBTyxRQUFRLElBQUksTUFBTTtBQUN2QjtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0g7QUFBQSxFQUNGO0FBcENFLGdCQURXLGFBQ0osWUFBVztBQU1sQjtBQUFBLElBREMsU0FBUyxPQUFPLEdBQUc7QUFBQSxLQU5ULFlBT1g7QUFNQTtBQUFBLElBREMsU0FBUyxJQUFJLENBQUM7QUFBQSxLQVpKLFlBYVg7QUFNQTtBQUFBLElBREMsU0FBUyxJQUFJLENBQUM7QUFBQSxLQWxCSixZQW1CWDs7O0FDL0JGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLTyxNQUFNLGFBQU4sY0FBeUIsVUFBVTtBQUFBLElBQW5DO0FBQUE7QUFRSCx3Q0FBb0I7QUFPcEIsd0NBQXFCO0FBTXJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBWUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUEscUNBQWE7QUFDYixxQ0FBYTtBQUNiLHNDQUFjO0FBQ2QsdUNBQWU7QUFBQTtBQUFBLElBZmYsT0FBTztBQUNILFdBQUssa0JBQWtCLElBQUksUUFBUTtBQUNuQyxXQUFLLG1CQUFtQixJQUFJLFFBQVE7QUFBQSxJQUN4QztBQUFBLElBY0EsUUFBUTtBQUNKLFlBQU0sS0FBSyxLQUFLLE9BQU8sYUFBYSxhQUFhO0FBQ2pELFVBQUcsQ0FBQztBQUFJLGNBQU0sSUFBSSxNQUFNLG1DQUFtQztBQUMzRCxXQUFLLE9BQU87QUFDWixXQUFLLEtBQUssU0FBUztBQUFBLElBQ3ZCO0FBQUEsSUFFQSxTQUFTO0FBQ0wsV0FBSyxLQUFLLFNBQVM7QUFDbkIseUJBQUssYUFBYTtBQUNsQix5QkFBSyxZQUFhO0FBQUEsSUFDdEI7QUFBQSxJQUNBLFVBQVU7QUFDTixXQUFLLEtBQUssU0FBUztBQUNuQix5QkFBSyxjQUFlO0FBQ3BCLHlCQUFLLFlBQWE7QUFBQSxJQUN0QjtBQUFBLElBRUEsT0FBTyxPQUFjO0FBQ2pCLFVBQUksbUJBQUssYUFBWTtBQUNqQixZQUFJLFFBQWE7QUFDakIsWUFBRyxtQkFBSyxjQUFZO0FBQ2hCLDZCQUFLLFlBQUwsbUJBQUssY0FBYyxRQUFRLEtBQUs7QUFDaEMsa0JBQVEsTUFBTUMsTUFBSyxHQUFHLEdBQUcsbUJBQUssYUFBWSxPQUFPLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNsRTtBQUNBLFlBQUcsbUJBQUssZUFBYTtBQUNqQiw2QkFBSyxZQUFMLG1CQUFLLGNBQWMsUUFBUSxLQUFLO0FBQ2hDLGtCQUFRLE1BQU1BLE1BQUssR0FBRyxHQUFHLG1CQUFLLGFBQVksT0FBTyxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDbkU7QUFJQSxZQUFHLG1CQUFLLGVBQWMsS0FBSyxtQkFBSyxlQUFjLEdBQUU7QUFDNUMsNkJBQUssWUFBYTtBQUNsQiw2QkFBSyxhQUFjO0FBQ25CLDZCQUFLLGNBQWU7QUFDcEIsY0FBRyxtQkFBSyxlQUFjLEdBQUU7QUFDcEIsK0JBQUssWUFBYTtBQUNsQixpQkFBSyxpQkFBaUIsT0FBTztBQUM3QixnQkFBRyxLQUFLLFlBQVc7QUFDZixtQkFBSyxPQUFPO0FBQUEsWUFDaEI7QUFBQSxVQUNKLE9BQUs7QUFFRCxrQkFBTUMsZ0JBQWUsS0FBSyxLQUFLO0FBQy9CLGdCQUFJQSxlQUNKO0FBQ0ksY0FBQUEsY0FBYSxRQUFRLENBQUMsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFlBQ2pDO0FBR0EsK0JBQUssWUFBYTtBQUNsQixpQkFBSyxnQkFBZ0IsT0FBTztBQUFBLFVBQ2hDO0FBQUEsUUFDSjtBQUNBLGNBQU0sZUFBZSxLQUFLLEtBQUs7QUFDL0IsWUFBSSxjQUNKO0FBQ0ksdUJBQWEsUUFBUSxDQUFDLEdBQUUsR0FBRSxHQUFHLEtBQUs7QUFBQSxRQUN0QztBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsRUFFSjtBQXBFSTtBQUNBO0FBQ0E7QUFDQTtBQTNDQSxnQkFEUyxZQUNGLFlBQVc7QUFPbEI7QUFBQSxJQURDLFNBQVMsTUFBTSxDQUFDO0FBQUEsS0FQUixXQVFUO0FBT0E7QUFBQSxJQURDLFNBQVMsS0FBSyxJQUFJO0FBQUEsS0FkVixXQWVUOzs7QUNwQko7QUFBQTtBQUFBO0FBQUE7OztBQ2NBLE1BQUlDO0FBQ0osR0FBQyxTQUFVQSxVQUFTO0FBR2hCLEtBQUMsU0FBVSxTQUFTO0FBQ2hCLFVBQUksT0FBTyxPQUFPLFdBQVcsV0FBVyxTQUNwQyxPQUFPLFNBQVMsV0FBVyxPQUN2QixPQUFPLFNBQVMsV0FBVyxPQUN2QixTQUFTLGNBQWMsRUFBRTtBQUNyQyxVQUFJLFdBQVcsYUFBYUEsUUFBTztBQUNuQyxVQUFJLE9BQU8sS0FBSyxZQUFZLGFBQWE7QUFDckMsYUFBSyxVQUFVQTtBQUFBLE1BQ25CLE9BQ0s7QUFDRCxtQkFBVyxhQUFhLEtBQUssU0FBUyxRQUFRO0FBQUEsTUFDbEQ7QUFDQSxjQUFRLFFBQVE7QUFDaEIsZUFBUyxhQUFhLFFBQVEsVUFBVTtBQUNwQyxlQUFPLFNBQVUsS0FBSyxPQUFPO0FBQ3pCLGNBQUksT0FBTyxPQUFPLEdBQUcsTUFBTSxZQUFZO0FBQ25DLG1CQUFPLGVBQWUsUUFBUSxLQUFLLEVBQUUsY0FBYyxNQUFNLFVBQVUsTUFBTSxNQUFhLENBQUM7QUFBQSxVQUMzRjtBQUNBLGNBQUk7QUFDQSxxQkFBUyxLQUFLLEtBQUs7QUFBQSxRQUMzQjtBQUFBLE1BQ0o7QUFBQSxJQUNKLEdBQUcsU0FBVSxVQUFVO0FBQ25CLFVBQUksU0FBUyxPQUFPLFVBQVU7QUFFOUIsVUFBSSxpQkFBaUIsT0FBTyxXQUFXO0FBQ3ZDLFVBQUksb0JBQW9CLGtCQUFrQixPQUFPLE9BQU8sZ0JBQWdCLGNBQWMsT0FBTyxjQUFjO0FBQzNHLFVBQUksaUJBQWlCLGtCQUFrQixPQUFPLE9BQU8sYUFBYSxjQUFjLE9BQU8sV0FBVztBQUNsRyxVQUFJLGlCQUFpQixPQUFPLE9BQU8sV0FBVztBQUM5QyxVQUFJLGdCQUFnQixFQUFFLFdBQVcsQ0FBQyxFQUFFLGFBQWE7QUFDakQsVUFBSSxZQUFZLENBQUMsa0JBQWtCLENBQUM7QUFDcEMsVUFBSSxVQUFVO0FBQUE7QUFBQSxRQUVWLFFBQVEsaUJBQ0YsV0FBWTtBQUFFLGlCQUFPLGVBQWUsdUJBQU8sT0FBTyxJQUFJLENBQUM7QUFBQSxRQUFHLElBQzFELGdCQUNJLFdBQVk7QUFBRSxpQkFBTyxlQUFlLEVBQUUsV0FBVyxLQUFLLENBQUM7QUFBQSxRQUFHLElBQzFELFdBQVk7QUFBRSxpQkFBTyxlQUFlLENBQUMsQ0FBQztBQUFBLFFBQUc7QUFBQSxRQUNuRCxLQUFLLFlBQ0MsU0FBVSxLQUFLLEtBQUs7QUFBRSxpQkFBTyxPQUFPLEtBQUssS0FBSyxHQUFHO0FBQUEsUUFBRyxJQUNwRCxTQUFVLEtBQUssS0FBSztBQUFFLGlCQUFPLE9BQU87QUFBQSxRQUFLO0FBQUEsUUFDL0MsS0FBSyxZQUNDLFNBQVUsS0FBSyxLQUFLO0FBQUUsaUJBQU8sT0FBTyxLQUFLLEtBQUssR0FBRyxJQUFJLElBQUksR0FBRyxJQUFJO0FBQUEsUUFBVyxJQUMzRSxTQUFVLEtBQUssS0FBSztBQUFFLGlCQUFPLElBQUksR0FBRztBQUFBLFFBQUc7QUFBQSxNQUNqRDtBQUVBLFVBQUksb0JBQW9CLE9BQU8sZUFBZSxRQUFRO0FBQ3RELFVBQUksY0FBYyxPQUFPLFlBQVksWUFBWSxRQUFRLE9BQU8sUUFBUSxJQUFJLG1DQUFtQyxNQUFNO0FBQ3JILFVBQUksT0FBTyxDQUFDLGVBQWUsT0FBTyxRQUFRLGNBQWMsT0FBTyxJQUFJLFVBQVUsWUFBWSxhQUFhLE1BQU0sa0JBQWtCO0FBQzlILFVBQUksT0FBTyxDQUFDLGVBQWUsT0FBTyxRQUFRLGNBQWMsT0FBTyxJQUFJLFVBQVUsWUFBWSxhQUFhLE1BQU0sa0JBQWtCO0FBQzlILFVBQUksV0FBVyxDQUFDLGVBQWUsT0FBTyxZQUFZLGFBQWEsVUFBVSxzQkFBc0I7QUFHL0YsVUFBSSxXQUFXLElBQUksU0FBUztBQXdDNUIsZUFBUyxTQUFTLFlBQVksUUFBUSxhQUFhLFlBQVk7QUFDM0QsWUFBSSxDQUFDLFlBQVksV0FBVyxHQUFHO0FBQzNCLGNBQUksQ0FBQyxRQUFRLFVBQVU7QUFDbkIsa0JBQU0sSUFBSSxVQUFVO0FBQ3hCLGNBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIsa0JBQU0sSUFBSSxVQUFVO0FBQ3hCLGNBQUksQ0FBQyxTQUFTLFVBQVUsS0FBSyxDQUFDLFlBQVksVUFBVSxLQUFLLENBQUMsT0FBTyxVQUFVO0FBQ3ZFLGtCQUFNLElBQUksVUFBVTtBQUN4QixjQUFJLE9BQU8sVUFBVTtBQUNqQix5QkFBYTtBQUNqQix3QkFBYyxjQUFjLFdBQVc7QUFDdkMsaUJBQU8saUJBQWlCLFlBQVksUUFBUSxhQUFhLFVBQVU7QUFBQSxRQUN2RSxPQUNLO0FBQ0QsY0FBSSxDQUFDLFFBQVEsVUFBVTtBQUNuQixrQkFBTSxJQUFJLFVBQVU7QUFDeEIsY0FBSSxDQUFDLGNBQWMsTUFBTTtBQUNyQixrQkFBTSxJQUFJLFVBQVU7QUFDeEIsaUJBQU8sb0JBQW9CLFlBQVksTUFBTTtBQUFBLFFBQ2pEO0FBQUEsTUFDSjtBQUNBLGVBQVMsWUFBWSxRQUFRO0FBMkM3QixlQUFTLFNBQVMsYUFBYSxlQUFlO0FBQzFDLGlCQUFTLFVBQVUsUUFBUSxhQUFhO0FBQ3BDLGNBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIsa0JBQU0sSUFBSSxVQUFVO0FBQ3hCLGNBQUksQ0FBQyxZQUFZLFdBQVcsS0FBSyxDQUFDLGNBQWMsV0FBVztBQUN2RCxrQkFBTSxJQUFJLFVBQVU7QUFDeEIsb0NBQTBCLGFBQWEsZUFBZSxRQUFRLFdBQVc7QUFBQSxRQUM3RTtBQUNBLGVBQU87QUFBQSxNQUNYO0FBQ0EsZUFBUyxZQUFZLFFBQVE7QUF3QzdCLGVBQVMsZUFBZSxhQUFhLGVBQWUsUUFBUSxhQUFhO0FBQ3JFLFlBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIsZ0JBQU0sSUFBSSxVQUFVO0FBQ3hCLFlBQUksQ0FBQyxZQUFZLFdBQVc7QUFDeEIsd0JBQWMsY0FBYyxXQUFXO0FBQzNDLGVBQU8sMEJBQTBCLGFBQWEsZUFBZSxRQUFRLFdBQVc7QUFBQSxNQUNwRjtBQUNBLGVBQVMsa0JBQWtCLGNBQWM7QUFtQ3pDLGVBQVMsWUFBWSxhQUFhLFFBQVEsYUFBYTtBQUNuRCxZQUFJLENBQUMsU0FBUyxNQUFNO0FBQ2hCLGdCQUFNLElBQUksVUFBVTtBQUN4QixZQUFJLENBQUMsWUFBWSxXQUFXO0FBQ3hCLHdCQUFjLGNBQWMsV0FBVztBQUMzQyxlQUFPLG9CQUFvQixhQUFhLFFBQVEsV0FBVztBQUFBLE1BQy9EO0FBQ0EsZUFBUyxlQUFlLFdBQVc7QUFtQ25DLGVBQVMsZUFBZSxhQUFhLFFBQVEsYUFBYTtBQUN0RCxZQUFJLENBQUMsU0FBUyxNQUFNO0FBQ2hCLGdCQUFNLElBQUksVUFBVTtBQUN4QixZQUFJLENBQUMsWUFBWSxXQUFXO0FBQ3hCLHdCQUFjLGNBQWMsV0FBVztBQUMzQyxlQUFPLHVCQUF1QixhQUFhLFFBQVEsV0FBVztBQUFBLE1BQ2xFO0FBQ0EsZUFBUyxrQkFBa0IsY0FBYztBQW1DekMsZUFBUyxZQUFZLGFBQWEsUUFBUSxhQUFhO0FBQ25ELFlBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIsZ0JBQU0sSUFBSSxVQUFVO0FBQ3hCLFlBQUksQ0FBQyxZQUFZLFdBQVc7QUFDeEIsd0JBQWMsY0FBYyxXQUFXO0FBQzNDLGVBQU8sb0JBQW9CLGFBQWEsUUFBUSxXQUFXO0FBQUEsTUFDL0Q7QUFDQSxlQUFTLGVBQWUsV0FBVztBQW1DbkMsZUFBUyxlQUFlLGFBQWEsUUFBUSxhQUFhO0FBQ3RELFlBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIsZ0JBQU0sSUFBSSxVQUFVO0FBQ3hCLFlBQUksQ0FBQyxZQUFZLFdBQVc7QUFDeEIsd0JBQWMsY0FBYyxXQUFXO0FBQzNDLGVBQU8sdUJBQXVCLGFBQWEsUUFBUSxXQUFXO0FBQUEsTUFDbEU7QUFDQSxlQUFTLGtCQUFrQixjQUFjO0FBa0N6QyxlQUFTLGdCQUFnQixRQUFRLGFBQWE7QUFDMUMsWUFBSSxDQUFDLFNBQVMsTUFBTTtBQUNoQixnQkFBTSxJQUFJLFVBQVU7QUFDeEIsWUFBSSxDQUFDLFlBQVksV0FBVztBQUN4Qix3QkFBYyxjQUFjLFdBQVc7QUFDM0MsZUFBTyxxQkFBcUIsUUFBUSxXQUFXO0FBQUEsTUFDbkQ7QUFDQSxlQUFTLG1CQUFtQixlQUFlO0FBa0MzQyxlQUFTLG1CQUFtQixRQUFRLGFBQWE7QUFDN0MsWUFBSSxDQUFDLFNBQVMsTUFBTTtBQUNoQixnQkFBTSxJQUFJLFVBQVU7QUFDeEIsWUFBSSxDQUFDLFlBQVksV0FBVztBQUN4Qix3QkFBYyxjQUFjLFdBQVc7QUFDM0MsZUFBTyx3QkFBd0IsUUFBUSxXQUFXO0FBQUEsTUFDdEQ7QUFDQSxlQUFTLHNCQUFzQixrQkFBa0I7QUFtQ2pELGVBQVMsZUFBZSxhQUFhLFFBQVEsYUFBYTtBQUN0RCxZQUFJLENBQUMsU0FBUyxNQUFNO0FBQ2hCLGdCQUFNLElBQUksVUFBVTtBQUN4QixZQUFJLENBQUMsWUFBWSxXQUFXO0FBQ3hCLHdCQUFjLGNBQWMsV0FBVztBQUMzQyxZQUFJLGNBQWM7QUFBQSxVQUF1QjtBQUFBLFVBQVE7QUFBQTtBQUFBLFVBQXdCO0FBQUEsUUFBSztBQUM5RSxZQUFJLFlBQVksV0FBVztBQUN2QixpQkFBTztBQUNYLFlBQUksQ0FBQyxZQUFZLE9BQU8sV0FBVztBQUMvQixpQkFBTztBQUNYLFlBQUksWUFBWSxPQUFPO0FBQ25CLGlCQUFPO0FBQ1gsWUFBSSxpQkFBaUIsU0FBUyxJQUFJLE1BQU07QUFDeEMsdUJBQWUsT0FBTyxXQUFXO0FBQ2pDLFlBQUksZUFBZSxPQUFPO0FBQ3RCLGlCQUFPO0FBQ1gsaUJBQVMsT0FBTyxNQUFNO0FBQ3RCLGVBQU87QUFBQSxNQUNYO0FBQ0EsZUFBUyxrQkFBa0IsY0FBYztBQUN6QyxlQUFTLG9CQUFvQixZQUFZLFFBQVE7QUFDN0MsaUJBQVMsSUFBSSxXQUFXLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHO0FBQzdDLGNBQUksWUFBWSxXQUFXLENBQUM7QUFDNUIsY0FBSSxZQUFZLFVBQVUsTUFBTTtBQUNoQyxjQUFJLENBQUMsWUFBWSxTQUFTLEtBQUssQ0FBQyxPQUFPLFNBQVMsR0FBRztBQUMvQyxnQkFBSSxDQUFDLGNBQWMsU0FBUztBQUN4QixvQkFBTSxJQUFJLFVBQVU7QUFDeEIscUJBQVM7QUFBQSxVQUNiO0FBQUEsUUFDSjtBQUNBLGVBQU87QUFBQSxNQUNYO0FBQ0EsZUFBUyxpQkFBaUIsWUFBWSxRQUFRLGFBQWEsWUFBWTtBQUNuRSxpQkFBUyxJQUFJLFdBQVcsU0FBUyxHQUFHLEtBQUssR0FBRyxFQUFFLEdBQUc7QUFDN0MsY0FBSSxZQUFZLFdBQVcsQ0FBQztBQUM1QixjQUFJLFlBQVksVUFBVSxRQUFRLGFBQWEsVUFBVTtBQUN6RCxjQUFJLENBQUMsWUFBWSxTQUFTLEtBQUssQ0FBQyxPQUFPLFNBQVMsR0FBRztBQUMvQyxnQkFBSSxDQUFDLFNBQVMsU0FBUztBQUNuQixvQkFBTSxJQUFJLFVBQVU7QUFDeEIseUJBQWE7QUFBQSxVQUNqQjtBQUFBLFFBQ0o7QUFDQSxlQUFPO0FBQUEsTUFDWDtBQUNBLGVBQVMsdUJBQXVCLEdBQUcsR0FBRyxRQUFRO0FBQzFDLFlBQUksaUJBQWlCLFNBQVMsSUFBSSxDQUFDO0FBQ25DLFlBQUksWUFBWSxjQUFjLEdBQUc7QUFDN0IsY0FBSSxDQUFDO0FBQ0QsbUJBQU87QUFDWCwyQkFBaUIsSUFBSSxLQUFLO0FBQzFCLG1CQUFTLElBQUksR0FBRyxjQUFjO0FBQUEsUUFDbEM7QUFDQSxZQUFJLGNBQWMsZUFBZSxJQUFJLENBQUM7QUFDdEMsWUFBSSxZQUFZLFdBQVcsR0FBRztBQUMxQixjQUFJLENBQUM7QUFDRCxtQkFBTztBQUNYLHdCQUFjLElBQUksS0FBSztBQUN2Qix5QkFBZSxJQUFJLEdBQUcsV0FBVztBQUFBLFFBQ3JDO0FBQ0EsZUFBTztBQUFBLE1BQ1g7QUFHQSxlQUFTLG9CQUFvQixhQUFhLEdBQUcsR0FBRztBQUM1QyxZQUFJQyxVQUFTLHVCQUF1QixhQUFhLEdBQUcsQ0FBQztBQUNyRCxZQUFJQTtBQUNBLGlCQUFPO0FBQ1gsWUFBSSxTQUFTLHVCQUF1QixDQUFDO0FBQ3JDLFlBQUksQ0FBQyxPQUFPLE1BQU07QUFDZCxpQkFBTyxvQkFBb0IsYUFBYSxRQUFRLENBQUM7QUFDckQsZUFBTztBQUFBLE1BQ1g7QUFHQSxlQUFTLHVCQUF1QixhQUFhLEdBQUcsR0FBRztBQUMvQyxZQUFJLGNBQWM7QUFBQSxVQUF1QjtBQUFBLFVBQUc7QUFBQTtBQUFBLFVBQWM7QUFBQSxRQUFLO0FBQy9ELFlBQUksWUFBWSxXQUFXO0FBQ3ZCLGlCQUFPO0FBQ1gsZUFBTyxVQUFVLFlBQVksSUFBSSxXQUFXLENBQUM7QUFBQSxNQUNqRDtBQUdBLGVBQVMsb0JBQW9CLGFBQWEsR0FBRyxHQUFHO0FBQzVDLFlBQUlBLFVBQVMsdUJBQXVCLGFBQWEsR0FBRyxDQUFDO0FBQ3JELFlBQUlBO0FBQ0EsaUJBQU8sdUJBQXVCLGFBQWEsR0FBRyxDQUFDO0FBQ25ELFlBQUksU0FBUyx1QkFBdUIsQ0FBQztBQUNyQyxZQUFJLENBQUMsT0FBTyxNQUFNO0FBQ2QsaUJBQU8sb0JBQW9CLGFBQWEsUUFBUSxDQUFDO0FBQ3JELGVBQU87QUFBQSxNQUNYO0FBR0EsZUFBUyx1QkFBdUIsYUFBYSxHQUFHLEdBQUc7QUFDL0MsWUFBSSxjQUFjO0FBQUEsVUFBdUI7QUFBQSxVQUFHO0FBQUE7QUFBQSxVQUFjO0FBQUEsUUFBSztBQUMvRCxZQUFJLFlBQVksV0FBVztBQUN2QixpQkFBTztBQUNYLGVBQU8sWUFBWSxJQUFJLFdBQVc7QUFBQSxNQUN0QztBQUdBLGVBQVMsMEJBQTBCLGFBQWEsZUFBZSxHQUFHLEdBQUc7QUFDakUsWUFBSSxjQUFjO0FBQUEsVUFBdUI7QUFBQSxVQUFHO0FBQUE7QUFBQSxVQUFjO0FBQUEsUUFBSTtBQUM5RCxvQkFBWSxJQUFJLGFBQWEsYUFBYTtBQUFBLE1BQzlDO0FBR0EsZUFBUyxxQkFBcUIsR0FBRyxHQUFHO0FBQ2hDLFlBQUksVUFBVSx3QkFBd0IsR0FBRyxDQUFDO0FBQzFDLFlBQUksU0FBUyx1QkFBdUIsQ0FBQztBQUNyQyxZQUFJLFdBQVc7QUFDWCxpQkFBTztBQUNYLFlBQUksYUFBYSxxQkFBcUIsUUFBUSxDQUFDO0FBQy9DLFlBQUksV0FBVyxVQUFVO0FBQ3JCLGlCQUFPO0FBQ1gsWUFBSSxRQUFRLFVBQVU7QUFDbEIsaUJBQU87QUFDWCxZQUFJQyxPQUFNLElBQUksS0FBSztBQUNuQixZQUFJLE9BQU8sQ0FBQztBQUNaLGlCQUFTLEtBQUssR0FBRyxZQUFZLFNBQVMsS0FBSyxVQUFVLFFBQVEsTUFBTTtBQUMvRCxjQUFJLE1BQU0sVUFBVSxFQUFFO0FBQ3RCLGNBQUksU0FBU0EsS0FBSSxJQUFJLEdBQUc7QUFDeEIsY0FBSSxDQUFDLFFBQVE7QUFDVCxZQUFBQSxLQUFJLElBQUksR0FBRztBQUNYLGlCQUFLLEtBQUssR0FBRztBQUFBLFVBQ2pCO0FBQUEsUUFDSjtBQUNBLGlCQUFTLEtBQUssR0FBRyxlQUFlLFlBQVksS0FBSyxhQUFhLFFBQVEsTUFBTTtBQUN4RSxjQUFJLE1BQU0sYUFBYSxFQUFFO0FBQ3pCLGNBQUksU0FBU0EsS0FBSSxJQUFJLEdBQUc7QUFDeEIsY0FBSSxDQUFDLFFBQVE7QUFDVCxZQUFBQSxLQUFJLElBQUksR0FBRztBQUNYLGlCQUFLLEtBQUssR0FBRztBQUFBLFVBQ2pCO0FBQUEsUUFDSjtBQUNBLGVBQU87QUFBQSxNQUNYO0FBR0EsZUFBUyx3QkFBd0IsR0FBRyxHQUFHO0FBQ25DLFlBQUksT0FBTyxDQUFDO0FBQ1osWUFBSSxjQUFjO0FBQUEsVUFBdUI7QUFBQSxVQUFHO0FBQUE7QUFBQSxVQUFjO0FBQUEsUUFBSztBQUMvRCxZQUFJLFlBQVksV0FBVztBQUN2QixpQkFBTztBQUNYLFlBQUksVUFBVSxZQUFZLEtBQUs7QUFDL0IsWUFBSSxXQUFXLFlBQVksT0FBTztBQUNsQyxZQUFJLElBQUk7QUFDUixlQUFPLE1BQU07QUFDVCxjQUFJLE9BQU8sYUFBYSxRQUFRO0FBQ2hDLGNBQUksQ0FBQyxNQUFNO0FBQ1AsaUJBQUssU0FBUztBQUNkLG1CQUFPO0FBQUEsVUFDWDtBQUNBLGNBQUksWUFBWSxjQUFjLElBQUk7QUFDbEMsY0FBSTtBQUNBLGlCQUFLLENBQUMsSUFBSTtBQUFBLFVBQ2QsU0FDTyxHQUFQO0FBQ0ksZ0JBQUk7QUFDQSw0QkFBYyxRQUFRO0FBQUEsWUFDMUIsVUFDQTtBQUNJLG9CQUFNO0FBQUEsWUFDVjtBQUFBLFVBQ0o7QUFDQTtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBR0EsZUFBU0MsTUFBSyxHQUFHO0FBQ2IsWUFBSSxNQUFNO0FBQ04saUJBQU87QUFDWCxnQkFBUSxPQUFPLEdBQUc7QUFBQSxVQUNkLEtBQUs7QUFBYSxtQkFBTztBQUFBLFVBQ3pCLEtBQUs7QUFBVyxtQkFBTztBQUFBLFVBQ3ZCLEtBQUs7QUFBVSxtQkFBTztBQUFBLFVBQ3RCLEtBQUs7QUFBVSxtQkFBTztBQUFBLFVBQ3RCLEtBQUs7QUFBVSxtQkFBTztBQUFBLFVBQ3RCLEtBQUs7QUFBVSxtQkFBTyxNQUFNLE9BQU8sSUFBZTtBQUFBLFVBQ2xEO0FBQVMsbUJBQU87QUFBQSxRQUNwQjtBQUFBLE1BQ0o7QUFHQSxlQUFTLFlBQVksR0FBRztBQUNwQixlQUFPLE1BQU07QUFBQSxNQUNqQjtBQUdBLGVBQVMsT0FBTyxHQUFHO0FBQ2YsZUFBTyxNQUFNO0FBQUEsTUFDakI7QUFHQSxlQUFTLFNBQVMsR0FBRztBQUNqQixlQUFPLE9BQU8sTUFBTTtBQUFBLE1BQ3hCO0FBR0EsZUFBUyxTQUFTLEdBQUc7QUFDakIsZUFBTyxPQUFPLE1BQU0sV0FBVyxNQUFNLE9BQU8sT0FBTyxNQUFNO0FBQUEsTUFDN0Q7QUFLQSxlQUFTLFlBQVksT0FBTyxlQUFlO0FBQ3ZDLGdCQUFRQSxNQUFLLEtBQUssR0FBRztBQUFBLFVBQ2pCLEtBQUs7QUFBbUIsbUJBQU87QUFBQSxVQUMvQixLQUFLO0FBQWMsbUJBQU87QUFBQSxVQUMxQixLQUFLO0FBQWlCLG1CQUFPO0FBQUEsVUFDN0IsS0FBSztBQUFnQixtQkFBTztBQUFBLFVBQzVCLEtBQUs7QUFBZ0IsbUJBQU87QUFBQSxVQUM1QixLQUFLO0FBQWdCLG1CQUFPO0FBQUEsUUFDaEM7QUFDQSxZQUFJLE9BQU8sa0JBQWtCLElBQWlCLFdBQVcsa0JBQWtCLElBQWlCLFdBQVc7QUFDdkcsWUFBSSxlQUFlLFVBQVUsT0FBTyxpQkFBaUI7QUFDckQsWUFBSSxpQkFBaUIsUUFBVztBQUM1QixjQUFJLFNBQVMsYUFBYSxLQUFLLE9BQU8sSUFBSTtBQUMxQyxjQUFJLFNBQVMsTUFBTTtBQUNmLGtCQUFNLElBQUksVUFBVTtBQUN4QixpQkFBTztBQUFBLFFBQ1g7QUFDQSxlQUFPLG9CQUFvQixPQUFPLFNBQVMsWUFBWSxXQUFXLElBQUk7QUFBQSxNQUMxRTtBQUdBLGVBQVMsb0JBQW9CLEdBQUcsTUFBTTtBQUNsQyxZQUFJLFNBQVMsVUFBVTtBQUNuQixjQUFJLGFBQWEsRUFBRTtBQUNuQixjQUFJLFdBQVcsVUFBVSxHQUFHO0FBQ3hCLGdCQUFJLFNBQVMsV0FBVyxLQUFLLENBQUM7QUFDOUIsZ0JBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIscUJBQU87QUFBQSxVQUNmO0FBQ0EsY0FBSSxVQUFVLEVBQUU7QUFDaEIsY0FBSSxXQUFXLE9BQU8sR0FBRztBQUNyQixnQkFBSSxTQUFTLFFBQVEsS0FBSyxDQUFDO0FBQzNCLGdCQUFJLENBQUMsU0FBUyxNQUFNO0FBQ2hCLHFCQUFPO0FBQUEsVUFDZjtBQUFBLFFBQ0osT0FDSztBQUNELGNBQUksVUFBVSxFQUFFO0FBQ2hCLGNBQUksV0FBVyxPQUFPLEdBQUc7QUFDckIsZ0JBQUksU0FBUyxRQUFRLEtBQUssQ0FBQztBQUMzQixnQkFBSSxDQUFDLFNBQVMsTUFBTTtBQUNoQixxQkFBTztBQUFBLFVBQ2Y7QUFDQSxjQUFJLGFBQWEsRUFBRTtBQUNuQixjQUFJLFdBQVcsVUFBVSxHQUFHO0FBQ3hCLGdCQUFJLFNBQVMsV0FBVyxLQUFLLENBQUM7QUFDOUIsZ0JBQUksQ0FBQyxTQUFTLE1BQU07QUFDaEIscUJBQU87QUFBQSxVQUNmO0FBQUEsUUFDSjtBQUNBLGNBQU0sSUFBSSxVQUFVO0FBQUEsTUFDeEI7QUFHQSxlQUFTLFVBQVUsVUFBVTtBQUN6QixlQUFPLENBQUMsQ0FBQztBQUFBLE1BQ2I7QUFHQSxlQUFTLFNBQVMsVUFBVTtBQUN4QixlQUFPLEtBQUs7QUFBQSxNQUNoQjtBQUdBLGVBQVMsY0FBYyxVQUFVO0FBQzdCLFlBQUksTUFBTTtBQUFBLFVBQVk7QUFBQSxVQUFVO0FBQUE7QUFBQSxRQUFjO0FBQzlDLFlBQUksU0FBUyxHQUFHO0FBQ1osaUJBQU87QUFDWCxlQUFPLFNBQVMsR0FBRztBQUFBLE1BQ3ZCO0FBS0EsZUFBUyxRQUFRLFVBQVU7QUFDdkIsZUFBTyxNQUFNLFVBQ1AsTUFBTSxRQUFRLFFBQVEsSUFDdEIsb0JBQW9CLFNBQ2hCLG9CQUFvQixRQUNwQixPQUFPLFVBQVUsU0FBUyxLQUFLLFFBQVEsTUFBTTtBQUFBLE1BQzNEO0FBR0EsZUFBUyxXQUFXLFVBQVU7QUFFMUIsZUFBTyxPQUFPLGFBQWE7QUFBQSxNQUMvQjtBQUdBLGVBQVMsY0FBYyxVQUFVO0FBRTdCLGVBQU8sT0FBTyxhQUFhO0FBQUEsTUFDL0I7QUFHQSxlQUFTLGNBQWMsVUFBVTtBQUM3QixnQkFBUUEsTUFBSyxRQUFRLEdBQUc7QUFBQSxVQUNwQixLQUFLO0FBQWdCLG1CQUFPO0FBQUEsVUFDNUIsS0FBSztBQUFnQixtQkFBTztBQUFBLFVBQzVCO0FBQVMsbUJBQU87QUFBQSxRQUNwQjtBQUFBLE1BQ0o7QUFLQSxlQUFTLFVBQVUsR0FBRyxHQUFHO0FBQ3JCLFlBQUksT0FBTyxFQUFFLENBQUM7QUFDZCxZQUFJLFNBQVMsVUFBYSxTQUFTO0FBQy9CLGlCQUFPO0FBQ1gsWUFBSSxDQUFDLFdBQVcsSUFBSTtBQUNoQixnQkFBTSxJQUFJLFVBQVU7QUFDeEIsZUFBTztBQUFBLE1BQ1g7QUFHQSxlQUFTLFlBQVksS0FBSztBQUN0QixZQUFJLFNBQVMsVUFBVSxLQUFLLGNBQWM7QUFDMUMsWUFBSSxDQUFDLFdBQVcsTUFBTTtBQUNsQixnQkFBTSxJQUFJLFVBQVU7QUFDeEIsWUFBSSxXQUFXLE9BQU8sS0FBSyxHQUFHO0FBQzlCLFlBQUksQ0FBQyxTQUFTLFFBQVE7QUFDbEIsZ0JBQU0sSUFBSSxVQUFVO0FBQ3hCLGVBQU87QUFBQSxNQUNYO0FBR0EsZUFBUyxjQUFjLFlBQVk7QUFDL0IsZUFBTyxXQUFXO0FBQUEsTUFDdEI7QUFHQSxlQUFTLGFBQWEsVUFBVTtBQUM1QixZQUFJLFNBQVMsU0FBUyxLQUFLO0FBQzNCLGVBQU8sT0FBTyxPQUFPLFFBQVE7QUFBQSxNQUNqQztBQUdBLGVBQVMsY0FBYyxVQUFVO0FBQzdCLFlBQUlDLEtBQUksU0FBUyxRQUFRO0FBQ3pCLFlBQUlBO0FBQ0EsVUFBQUEsR0FBRSxLQUFLLFFBQVE7QUFBQSxNQUN2QjtBQUtBLGVBQVMsdUJBQXVCLEdBQUc7QUFDL0IsWUFBSSxRQUFRLE9BQU8sZUFBZSxDQUFDO0FBQ25DLFlBQUksT0FBTyxNQUFNLGNBQWMsTUFBTTtBQUNqQyxpQkFBTztBQVFYLFlBQUksVUFBVTtBQUNWLGlCQUFPO0FBRVgsWUFBSSxZQUFZLEVBQUU7QUFDbEIsWUFBSSxpQkFBaUIsYUFBYSxPQUFPLGVBQWUsU0FBUztBQUNqRSxZQUFJLGtCQUFrQixRQUFRLG1CQUFtQixPQUFPO0FBQ3BELGlCQUFPO0FBRVgsWUFBSSxjQUFjLGVBQWU7QUFDakMsWUFBSSxPQUFPLGdCQUFnQjtBQUN2QixpQkFBTztBQUVYLFlBQUksZ0JBQWdCO0FBQ2hCLGlCQUFPO0FBRVgsZUFBTztBQUFBLE1BQ1g7QUFFQSxlQUFTLG9CQUFvQjtBQUN6QixZQUFJLGdCQUFnQixDQUFDO0FBQ3JCLFlBQUksZ0JBQWdCLENBQUM7QUFDckIsWUFBSTtBQUFBO0FBQUEsVUFBNkIsV0FBWTtBQUN6QyxxQkFBU0MsYUFBWSxNQUFNLFFBQVEsVUFBVTtBQUN6QyxtQkFBSyxTQUFTO0FBQ2QsbUJBQUssUUFBUTtBQUNiLG1CQUFLLFVBQVU7QUFDZixtQkFBSyxZQUFZO0FBQUEsWUFDckI7QUFDQSxZQUFBQSxhQUFZLFVBQVUsWUFBWSxJQUFJLFdBQVk7QUFBRSxxQkFBTztBQUFBLFlBQU07QUFDakUsWUFBQUEsYUFBWSxVQUFVLGNBQWMsSUFBSSxXQUFZO0FBQUUscUJBQU87QUFBQSxZQUFNO0FBQ25FLFlBQUFBLGFBQVksVUFBVSxPQUFPLFdBQVk7QUFDckMsa0JBQUksUUFBUSxLQUFLO0FBQ2pCLGtCQUFJLFNBQVMsS0FBSyxRQUFRLEtBQUssTUFBTSxRQUFRO0FBQ3pDLG9CQUFJLFNBQVMsS0FBSyxVQUFVLEtBQUssTUFBTSxLQUFLLEdBQUcsS0FBSyxRQUFRLEtBQUssQ0FBQztBQUNsRSxvQkFBSSxRQUFRLEtBQUssS0FBSyxNQUFNLFFBQVE7QUFDaEMsdUJBQUssU0FBUztBQUNkLHVCQUFLLFFBQVE7QUFDYix1QkFBSyxVQUFVO0FBQUEsZ0JBQ25CLE9BQ0s7QUFDRCx1QkFBSztBQUFBLGdCQUNUO0FBQ0EsdUJBQU8sRUFBRSxPQUFPLFFBQVEsTUFBTSxNQUFNO0FBQUEsY0FDeEM7QUFDQSxxQkFBTyxFQUFFLE9BQU8sUUFBVyxNQUFNLEtBQUs7QUFBQSxZQUMxQztBQUNBLFlBQUFBLGFBQVksVUFBVSxRQUFRLFNBQVUsT0FBTztBQUMzQyxrQkFBSSxLQUFLLFVBQVUsR0FBRztBQUNsQixxQkFBSyxTQUFTO0FBQ2QscUJBQUssUUFBUTtBQUNiLHFCQUFLLFVBQVU7QUFBQSxjQUNuQjtBQUNBLG9CQUFNO0FBQUEsWUFDVjtBQUNBLFlBQUFBLGFBQVksVUFBVSxTQUFTLFNBQVUsT0FBTztBQUM1QyxrQkFBSSxLQUFLLFVBQVUsR0FBRztBQUNsQixxQkFBSyxTQUFTO0FBQ2QscUJBQUssUUFBUTtBQUNiLHFCQUFLLFVBQVU7QUFBQSxjQUNuQjtBQUNBLHFCQUFPLEVBQUUsT0FBYyxNQUFNLEtBQUs7QUFBQSxZQUN0QztBQUNBLG1CQUFPQTtBQUFBLFVBQ1gsRUFBRTtBQUFBO0FBQ0Y7QUFBQTtBQUFBLFVBQXNCLFdBQVk7QUFDOUIscUJBQVNDLE9BQU07QUFDWCxtQkFBSyxRQUFRLENBQUM7QUFDZCxtQkFBSyxVQUFVLENBQUM7QUFDaEIsbUJBQUssWUFBWTtBQUNqQixtQkFBSyxjQUFjO0FBQUEsWUFDdkI7QUFDQSxtQkFBTyxlQUFlQSxLQUFJLFdBQVcsUUFBUTtBQUFBLGNBQ3pDLEtBQUssV0FBWTtBQUFFLHVCQUFPLEtBQUssTUFBTTtBQUFBLGNBQVE7QUFBQSxjQUM3QyxZQUFZO0FBQUEsY0FDWixjQUFjO0FBQUEsWUFDbEIsQ0FBQztBQUNELFlBQUFBLEtBQUksVUFBVSxNQUFNLFNBQVUsS0FBSztBQUFFLHFCQUFPLEtBQUs7QUFBQSxnQkFBTTtBQUFBO0FBQUEsZ0JBQWdCO0FBQUEsY0FBSyxLQUFLO0FBQUEsWUFBRztBQUNwRixZQUFBQSxLQUFJLFVBQVUsTUFBTSxTQUFVLEtBQUs7QUFDL0Isa0JBQUksUUFBUSxLQUFLO0FBQUEsZ0JBQU07QUFBQTtBQUFBLGdCQUFnQjtBQUFBLGNBQUs7QUFDNUMscUJBQU8sU0FBUyxJQUFJLEtBQUssUUFBUSxLQUFLLElBQUk7QUFBQSxZQUM5QztBQUNBLFlBQUFBLEtBQUksVUFBVSxNQUFNLFNBQVUsS0FBSyxPQUFPO0FBQ3RDLGtCQUFJLFFBQVEsS0FBSztBQUFBLGdCQUFNO0FBQUE7QUFBQSxnQkFBZ0I7QUFBQSxjQUFJO0FBQzNDLG1CQUFLLFFBQVEsS0FBSyxJQUFJO0FBQ3RCLHFCQUFPO0FBQUEsWUFDWDtBQUNBLFlBQUFBLEtBQUksVUFBVSxTQUFTLFNBQVUsS0FBSztBQUNsQyxrQkFBSSxRQUFRLEtBQUs7QUFBQSxnQkFBTTtBQUFBO0FBQUEsZ0JBQWdCO0FBQUEsY0FBSztBQUM1QyxrQkFBSSxTQUFTLEdBQUc7QUFDWixvQkFBSUMsUUFBTyxLQUFLLE1BQU07QUFDdEIseUJBQVMsSUFBSSxRQUFRLEdBQUcsSUFBSUEsT0FBTSxLQUFLO0FBQ25DLHVCQUFLLE1BQU0sSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUM7QUFDaEMsdUJBQUssUUFBUSxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQztBQUFBLGdCQUN4QztBQUNBLHFCQUFLLE1BQU07QUFDWCxxQkFBSyxRQUFRO0FBQ2Isb0JBQUksUUFBUSxLQUFLLFdBQVc7QUFDeEIsdUJBQUssWUFBWTtBQUNqQix1QkFBSyxjQUFjO0FBQUEsZ0JBQ3ZCO0FBQ0EsdUJBQU87QUFBQSxjQUNYO0FBQ0EscUJBQU87QUFBQSxZQUNYO0FBQ0EsWUFBQUQsS0FBSSxVQUFVLFFBQVEsV0FBWTtBQUM5QixtQkFBSyxNQUFNLFNBQVM7QUFDcEIsbUJBQUssUUFBUSxTQUFTO0FBQ3RCLG1CQUFLLFlBQVk7QUFDakIsbUJBQUssY0FBYztBQUFBLFlBQ3ZCO0FBQ0EsWUFBQUEsS0FBSSxVQUFVLE9BQU8sV0FBWTtBQUFFLHFCQUFPLElBQUksWUFBWSxLQUFLLE9BQU8sS0FBSyxTQUFTLE1BQU07QUFBQSxZQUFHO0FBQzdGLFlBQUFBLEtBQUksVUFBVSxTQUFTLFdBQVk7QUFBRSxxQkFBTyxJQUFJLFlBQVksS0FBSyxPQUFPLEtBQUssU0FBUyxRQUFRO0FBQUEsWUFBRztBQUNqRyxZQUFBQSxLQUFJLFVBQVUsVUFBVSxXQUFZO0FBQUUscUJBQU8sSUFBSSxZQUFZLEtBQUssT0FBTyxLQUFLLFNBQVMsUUFBUTtBQUFBLFlBQUc7QUFDbEcsWUFBQUEsS0FBSSxVQUFVLFlBQVksSUFBSSxXQUFZO0FBQUUscUJBQU8sS0FBSyxRQUFRO0FBQUEsWUFBRztBQUNuRSxZQUFBQSxLQUFJLFVBQVUsY0FBYyxJQUFJLFdBQVk7QUFBRSxxQkFBTyxLQUFLLFFBQVE7QUFBQSxZQUFHO0FBQ3JFLFlBQUFBLEtBQUksVUFBVSxRQUFRLFNBQVUsS0FBSyxRQUFRO0FBQ3pDLGtCQUFJLEtBQUssY0FBYyxLQUFLO0FBQ3hCLHFCQUFLLGNBQWMsS0FBSyxNQUFNLFFBQVEsS0FBSyxZQUFZLEdBQUc7QUFBQSxjQUM5RDtBQUNBLGtCQUFJLEtBQUssY0FBYyxLQUFLLFFBQVE7QUFDaEMscUJBQUssY0FBYyxLQUFLLE1BQU07QUFDOUIscUJBQUssTUFBTSxLQUFLLEdBQUc7QUFDbkIscUJBQUssUUFBUSxLQUFLLE1BQVM7QUFBQSxjQUMvQjtBQUNBLHFCQUFPLEtBQUs7QUFBQSxZQUNoQjtBQUNBLG1CQUFPQTtBQUFBLFVBQ1gsRUFBRTtBQUFBO0FBQ0YsaUJBQVMsT0FBTyxLQUFLLEdBQUc7QUFDcEIsaUJBQU87QUFBQSxRQUNYO0FBQ0EsaUJBQVMsU0FBUyxHQUFHLE9BQU87QUFDeEIsaUJBQU87QUFBQSxRQUNYO0FBQ0EsaUJBQVMsU0FBUyxLQUFLLE9BQU87QUFDMUIsaUJBQU8sQ0FBQyxLQUFLLEtBQUs7QUFBQSxRQUN0QjtBQUFBLE1BQ0o7QUFFQSxlQUFTLG9CQUFvQjtBQUN6QjtBQUFBO0FBQUEsVUFBc0IsV0FBWTtBQUM5QixxQkFBU0UsT0FBTTtBQUNYLG1CQUFLLE9BQU8sSUFBSSxLQUFLO0FBQUEsWUFDekI7QUFDQSxtQkFBTyxlQUFlQSxLQUFJLFdBQVcsUUFBUTtBQUFBLGNBQ3pDLEtBQUssV0FBWTtBQUFFLHVCQUFPLEtBQUssS0FBSztBQUFBLGNBQU07QUFBQSxjQUMxQyxZQUFZO0FBQUEsY0FDWixjQUFjO0FBQUEsWUFDbEIsQ0FBQztBQUNELFlBQUFBLEtBQUksVUFBVSxNQUFNLFNBQVUsT0FBTztBQUFFLHFCQUFPLEtBQUssS0FBSyxJQUFJLEtBQUs7QUFBQSxZQUFHO0FBQ3BFLFlBQUFBLEtBQUksVUFBVSxNQUFNLFNBQVUsT0FBTztBQUFFLHFCQUFPLEtBQUssS0FBSyxJQUFJLE9BQU8sS0FBSyxHQUFHO0FBQUEsWUFBTTtBQUNqRixZQUFBQSxLQUFJLFVBQVUsU0FBUyxTQUFVLE9BQU87QUFBRSxxQkFBTyxLQUFLLEtBQUssT0FBTyxLQUFLO0FBQUEsWUFBRztBQUMxRSxZQUFBQSxLQUFJLFVBQVUsUUFBUSxXQUFZO0FBQUUsbUJBQUssS0FBSyxNQUFNO0FBQUEsWUFBRztBQUN2RCxZQUFBQSxLQUFJLFVBQVUsT0FBTyxXQUFZO0FBQUUscUJBQU8sS0FBSyxLQUFLLEtBQUs7QUFBQSxZQUFHO0FBQzVELFlBQUFBLEtBQUksVUFBVSxTQUFTLFdBQVk7QUFBRSxxQkFBTyxLQUFLLEtBQUssT0FBTztBQUFBLFlBQUc7QUFDaEUsWUFBQUEsS0FBSSxVQUFVLFVBQVUsV0FBWTtBQUFFLHFCQUFPLEtBQUssS0FBSyxRQUFRO0FBQUEsWUFBRztBQUNsRSxZQUFBQSxLQUFJLFVBQVUsWUFBWSxJQUFJLFdBQVk7QUFBRSxxQkFBTyxLQUFLLEtBQUs7QUFBQSxZQUFHO0FBQ2hFLFlBQUFBLEtBQUksVUFBVSxjQUFjLElBQUksV0FBWTtBQUFFLHFCQUFPLEtBQUssS0FBSztBQUFBLFlBQUc7QUFDbEUsbUJBQU9BO0FBQUEsVUFDWCxFQUFFO0FBQUE7QUFBQSxNQUNOO0FBRUEsZUFBUyx3QkFBd0I7QUFDN0IsWUFBSSxZQUFZO0FBQ2hCLFlBQUksT0FBTyxRQUFRLE9BQU87QUFDMUIsWUFBSSxVQUFVLGdCQUFnQjtBQUM5QjtBQUFBO0FBQUEsVUFBc0IsV0FBWTtBQUM5QixxQkFBU0MsV0FBVTtBQUNmLG1CQUFLLE9BQU8sZ0JBQWdCO0FBQUEsWUFDaEM7QUFDQSxZQUFBQSxTQUFRLFVBQVUsTUFBTSxTQUFVLFFBQVE7QUFDdEMsa0JBQUksUUFBUTtBQUFBLGdCQUF3QjtBQUFBO0FBQUEsZ0JBQW1CO0FBQUEsY0FBSztBQUM1RCxxQkFBTyxVQUFVLFNBQVksUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJLElBQUk7QUFBQSxZQUNqRTtBQUNBLFlBQUFBLFNBQVEsVUFBVSxNQUFNLFNBQVUsUUFBUTtBQUN0QyxrQkFBSSxRQUFRO0FBQUEsZ0JBQXdCO0FBQUE7QUFBQSxnQkFBbUI7QUFBQSxjQUFLO0FBQzVELHFCQUFPLFVBQVUsU0FBWSxRQUFRLElBQUksT0FBTyxLQUFLLElBQUksSUFBSTtBQUFBLFlBQ2pFO0FBQ0EsWUFBQUEsU0FBUSxVQUFVLE1BQU0sU0FBVSxRQUFRLE9BQU87QUFDN0Msa0JBQUksUUFBUTtBQUFBLGdCQUF3QjtBQUFBO0FBQUEsZ0JBQW1CO0FBQUEsY0FBSTtBQUMzRCxvQkFBTSxLQUFLLElBQUksSUFBSTtBQUNuQixxQkFBTztBQUFBLFlBQ1g7QUFDQSxZQUFBQSxTQUFRLFVBQVUsU0FBUyxTQUFVLFFBQVE7QUFDekMsa0JBQUksUUFBUTtBQUFBLGdCQUF3QjtBQUFBO0FBQUEsZ0JBQW1CO0FBQUEsY0FBSztBQUM1RCxxQkFBTyxVQUFVLFNBQVksT0FBTyxNQUFNLEtBQUssSUFBSSxJQUFJO0FBQUEsWUFDM0Q7QUFDQSxZQUFBQSxTQUFRLFVBQVUsUUFBUSxXQUFZO0FBRWxDLG1CQUFLLE9BQU8sZ0JBQWdCO0FBQUEsWUFDaEM7QUFDQSxtQkFBT0E7QUFBQSxVQUNYLEVBQUU7QUFBQTtBQUNGLGlCQUFTLGtCQUFrQjtBQUN2QixjQUFJO0FBQ0o7QUFDSSxrQkFBTSxnQkFBZ0IsV0FBVztBQUFBLGlCQUM5QixRQUFRLElBQUksTUFBTSxHQUFHO0FBQzVCLGVBQUssR0FBRyxJQUFJO0FBQ1osaUJBQU87QUFBQSxRQUNYO0FBQ0EsaUJBQVMsd0JBQXdCLFFBQVFDLFNBQVE7QUFDN0MsY0FBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLE9BQU8sR0FBRztBQUMvQixnQkFBSSxDQUFDQTtBQUNELHFCQUFPO0FBQ1gsbUJBQU8sZUFBZSxRQUFRLFNBQVMsRUFBRSxPQUFPLFFBQVEsT0FBTyxFQUFFLENBQUM7QUFBQSxVQUN0RTtBQUNBLGlCQUFPLE9BQU8sT0FBTztBQUFBLFFBQ3pCO0FBQ0EsaUJBQVMsZ0JBQWdCLFFBQVFILE9BQU07QUFDbkMsbUJBQVMsSUFBSSxHQUFHLElBQUlBLE9BQU0sRUFBRTtBQUN4QixtQkFBTyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksTUFBTztBQUN2QyxpQkFBTztBQUFBLFFBQ1g7QUFDQSxpQkFBUyxlQUFlQSxPQUFNO0FBQzFCLGNBQUksT0FBTyxlQUFlLFlBQVk7QUFDbEMsZ0JBQUksT0FBTyxXQUFXO0FBQ2xCLHFCQUFPLE9BQU8sZ0JBQWdCLElBQUksV0FBV0EsS0FBSSxDQUFDO0FBQ3RELGdCQUFJLE9BQU8sYUFBYTtBQUNwQixxQkFBTyxTQUFTLGdCQUFnQixJQUFJLFdBQVdBLEtBQUksQ0FBQztBQUN4RCxtQkFBTyxnQkFBZ0IsSUFBSSxXQUFXQSxLQUFJLEdBQUdBLEtBQUk7QUFBQSxVQUNyRDtBQUNBLGlCQUFPLGdCQUFnQixJQUFJLE1BQU1BLEtBQUksR0FBR0EsS0FBSTtBQUFBLFFBQ2hEO0FBQ0EsaUJBQVMsYUFBYTtBQUNsQixjQUFJLE9BQU8sZUFBZSxTQUFTO0FBRW5DLGVBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQU87QUFDM0IsZUFBSyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksTUFBTztBQUMzQixjQUFJLFNBQVM7QUFDYixtQkFBU0ksVUFBUyxHQUFHQSxVQUFTLFdBQVcsRUFBRUEsU0FBUTtBQUMvQyxnQkFBSSxPQUFPLEtBQUtBLE9BQU07QUFDdEIsZ0JBQUlBLFlBQVcsS0FBS0EsWUFBVyxLQUFLQSxZQUFXO0FBQzNDLHdCQUFVO0FBQ2QsZ0JBQUksT0FBTztBQUNQLHdCQUFVO0FBQ2Qsc0JBQVUsS0FBSyxTQUFTLEVBQUUsRUFBRSxZQUFZO0FBQUEsVUFDNUM7QUFDQSxpQkFBTztBQUFBLFFBQ1g7QUFBQSxNQUNKO0FBRUEsZUFBUyxlQUFlLEtBQUs7QUFDekIsWUFBSSxLQUFLO0FBQ1QsZUFBTyxJQUFJO0FBQ1gsZUFBTztBQUFBLE1BQ1g7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMLEdBQUdYLGFBQVlBLFdBQVUsQ0FBQyxFQUFFOzs7QUMxbUM1QjtBQUFBO0FBQUE7QUFBQTs7O0FDQUEsTUFBSTtBQUNKLEdBQUMsU0FBVVksWUFBVztBQUNsQixJQUFBQSxXQUFVQSxXQUFVLFdBQVcsSUFBSSxDQUFDLElBQUk7QUFDeEMsSUFBQUEsV0FBVUEsV0FBVSxXQUFXLElBQUksQ0FBQyxJQUFJO0FBQ3hDLElBQUFBLFdBQVVBLFdBQVUsa0JBQWtCLElBQUksQ0FBQyxJQUFJO0FBQy9DLElBQUFBLFdBQVVBLFdBQVUsaUJBQWlCLElBQUksQ0FBQyxJQUFJO0FBQUEsRUFDbEQsR0FBRyxjQUFjLFlBQVksQ0FBQyxFQUFFO0FBQ2hDLE1BQU8sb0JBQVE7OztBQ1NmLE1BQUksZ0JBQWdCLFNBQVMsR0FBRyxHQUFHO0FBQy9CLG9CQUFnQixPQUFPLGtCQUNsQixFQUFFLFdBQVcsQ0FBQyxFQUFFLGFBQWEsU0FBUyxTQUFVQyxJQUFHQyxJQUFHO0FBQUUsTUFBQUQsR0FBRSxZQUFZQztBQUFBLElBQUcsS0FDMUUsU0FBVUQsSUFBR0MsSUFBRztBQUFFLGVBQVMsS0FBS0E7QUFBRyxZQUFJQSxHQUFFLGVBQWUsQ0FBQztBQUFHLFVBQUFELEdBQUUsQ0FBQyxJQUFJQyxHQUFFLENBQUM7QUFBQSxJQUFHO0FBQzdFLFdBQU8sY0FBYyxHQUFHLENBQUM7QUFBQSxFQUM3QjtBQUVPLFdBQVMsVUFBVSxHQUFHLEdBQUc7QUFDNUIsa0JBQWMsR0FBRyxDQUFDO0FBQ2xCLGFBQVMsS0FBSztBQUFFLFdBQUssY0FBYztBQUFBLElBQUc7QUFDdEMsTUFBRSxZQUFZLE1BQU0sT0FBTyxPQUFPLE9BQU8sQ0FBQyxLQUFLLEdBQUcsWUFBWSxFQUFFLFdBQVcsSUFBSSxHQUFHO0FBQUEsRUFDdEY7QUF3Q08sV0FBUyxVQUFVLFNBQVMsWUFBWSxHQUFHLFdBQVc7QUFDekQsYUFBUyxNQUFNLE9BQU87QUFBRSxhQUFPLGlCQUFpQixJQUFJLFFBQVEsSUFBSSxFQUFFLFNBQVUsU0FBUztBQUFFLGdCQUFRLEtBQUs7QUFBQSxNQUFHLENBQUM7QUFBQSxJQUFHO0FBQzNHLFdBQU8sS0FBSyxNQUFNLElBQUksVUFBVSxTQUFVLFNBQVMsUUFBUTtBQUN2RCxlQUFTLFVBQVUsT0FBTztBQUFFLFlBQUk7QUFBRSxlQUFLLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFBQSxRQUFHLFNBQVMsR0FBUDtBQUFZLGlCQUFPLENBQUM7QUFBQSxRQUFHO0FBQUEsTUFBRTtBQUMxRixlQUFTLFNBQVMsT0FBTztBQUFFLFlBQUk7QUFBRSxlQUFLLFVBQVUsT0FBTyxFQUFFLEtBQUssQ0FBQztBQUFBLFFBQUcsU0FBUyxHQUFQO0FBQVksaUJBQU8sQ0FBQztBQUFBLFFBQUc7QUFBQSxNQUFFO0FBQzdGLGVBQVMsS0FBSyxRQUFRO0FBQUUsZUFBTyxPQUFPLFFBQVEsT0FBTyxLQUFLLElBQUksTUFBTSxPQUFPLEtBQUssRUFBRSxLQUFLLFdBQVcsUUFBUTtBQUFBLE1BQUc7QUFDN0csWUFBTSxZQUFZLFVBQVUsTUFBTSxTQUFTLGNBQWMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQUEsSUFDeEUsQ0FBQztBQUFBLEVBQ0w7QUFFTyxXQUFTLFlBQVksU0FBUyxNQUFNO0FBQ3ZDLFFBQUksSUFBSSxFQUFFLE9BQU8sR0FBRyxNQUFNLFdBQVc7QUFBRSxVQUFJLEVBQUUsQ0FBQyxJQUFJO0FBQUcsY0FBTSxFQUFFLENBQUM7QUFBRyxhQUFPLEVBQUUsQ0FBQztBQUFBLElBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHQyxJQUFHLEdBQUcsR0FBRztBQUMvRyxXQUFPLElBQUksRUFBRSxNQUFNLEtBQUssQ0FBQyxHQUFHLFNBQVMsS0FBSyxDQUFDLEdBQUcsVUFBVSxLQUFLLENBQUMsRUFBRSxHQUFHLE9BQU8sV0FBVyxlQUFlLEVBQUUsT0FBTyxRQUFRLElBQUksV0FBVztBQUFFLGFBQU87QUFBQSxJQUFNLElBQUk7QUFDdkosYUFBUyxLQUFLLEdBQUc7QUFBRSxhQUFPLFNBQVUsR0FBRztBQUFFLGVBQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQUEsTUFBRztBQUFBLElBQUc7QUFDakUsYUFBUyxLQUFLLElBQUk7QUFDZCxVQUFJQTtBQUFHLGNBQU0sSUFBSSxVQUFVLGlDQUFpQztBQUM1RCxhQUFPO0FBQUcsWUFBSTtBQUNWLGNBQUlBLEtBQUksR0FBRyxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLFFBQVEsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sT0FBTyxJQUFJLEVBQUUsUUFBUSxNQUFNLEVBQUUsS0FBSyxDQUFDLEdBQUcsS0FBSyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUc7QUFBTSxtQkFBTztBQUMzSixjQUFJLElBQUksR0FBRztBQUFHLGlCQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEtBQUs7QUFDdEMsa0JBQVEsR0FBRyxDQUFDLEdBQUc7QUFBQSxZQUNYLEtBQUs7QUFBQSxZQUFHLEtBQUs7QUFBRyxrQkFBSTtBQUFJO0FBQUEsWUFDeEIsS0FBSztBQUFHLGdCQUFFO0FBQVMscUJBQU8sRUFBRSxPQUFPLEdBQUcsQ0FBQyxHQUFHLE1BQU0sTUFBTTtBQUFBLFlBQ3RELEtBQUs7QUFBRyxnQkFBRTtBQUFTLGtCQUFJLEdBQUcsQ0FBQztBQUFHLG1CQUFLLENBQUMsQ0FBQztBQUFHO0FBQUEsWUFDeEMsS0FBSztBQUFHLG1CQUFLLEVBQUUsSUFBSSxJQUFJO0FBQUcsZ0JBQUUsS0FBSyxJQUFJO0FBQUc7QUFBQSxZQUN4QztBQUNJLGtCQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sSUFBSSxFQUFFLFNBQVMsS0FBSyxFQUFFLEVBQUUsU0FBUyxDQUFDLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxJQUFJO0FBQUUsb0JBQUk7QUFBRztBQUFBLGNBQVU7QUFDM0csa0JBQUksR0FBRyxDQUFDLE1BQU0sTUFBTSxDQUFDLEtBQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUs7QUFBRSxrQkFBRSxRQUFRLEdBQUcsQ0FBQztBQUFHO0FBQUEsY0FBTztBQUNyRixrQkFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsR0FBRztBQUFFLGtCQUFFLFFBQVEsRUFBRSxDQUFDO0FBQUcsb0JBQUk7QUFBSTtBQUFBLGNBQU87QUFDcEUsa0JBQUksS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEdBQUc7QUFBRSxrQkFBRSxRQUFRLEVBQUUsQ0FBQztBQUFHLGtCQUFFLElBQUksS0FBSyxFQUFFO0FBQUc7QUFBQSxjQUFPO0FBQ2xFLGtCQUFJLEVBQUUsQ0FBQztBQUFHLGtCQUFFLElBQUksSUFBSTtBQUNwQixnQkFBRSxLQUFLLElBQUk7QUFBRztBQUFBLFVBQ3RCO0FBQ0EsZUFBSyxLQUFLLEtBQUssU0FBUyxDQUFDO0FBQUEsUUFDN0IsU0FBUyxHQUFQO0FBQVksZUFBSyxDQUFDLEdBQUcsQ0FBQztBQUFHLGNBQUk7QUFBQSxRQUFHLFVBQUU7QUFBVSxVQUFBQSxLQUFJLElBQUk7QUFBQSxRQUFHO0FBQ3pELFVBQUksR0FBRyxDQUFDLElBQUk7QUFBRyxjQUFNLEdBQUcsQ0FBQztBQUFHLGFBQU8sRUFBRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLFFBQVEsTUFBTSxLQUFLO0FBQUEsSUFDbkY7QUFBQSxFQUNKO0FBV08sV0FBUyxTQUFTLEdBQUc7QUFDeEIsUUFBSSxJQUFJLE9BQU8sV0FBVyxjQUFjLE9BQU8sVUFBVSxJQUFJLEtBQUssRUFBRSxDQUFDLEdBQUcsSUFBSTtBQUM1RSxRQUFJO0FBQUcsYUFBTyxFQUFFLEtBQUssQ0FBQztBQUN0QixRQUFJLEtBQUssT0FBTyxFQUFFLFdBQVc7QUFBVSxhQUFPO0FBQUEsUUFDMUMsTUFBTSxXQUFZO0FBQ2QsY0FBSSxLQUFLLEtBQUssRUFBRTtBQUFRLGdCQUFJO0FBQzVCLGlCQUFPLEVBQUUsT0FBTyxLQUFLLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFO0FBQUEsUUFDMUM7QUFBQSxNQUNKO0FBQ0EsVUFBTSxJQUFJLFVBQVUsSUFBSSw0QkFBNEIsaUNBQWlDO0FBQUEsRUFDekY7QUFFTyxXQUFTLE9BQU8sR0FBRyxHQUFHO0FBQ3pCLFFBQUksSUFBSSxPQUFPLFdBQVcsY0FBYyxFQUFFLE9BQU8sUUFBUTtBQUN6RCxRQUFJLENBQUM7QUFBRyxhQUFPO0FBQ2YsUUFBSSxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRztBQUMvQixRQUFJO0FBQ0EsY0FBUSxNQUFNLFVBQVUsTUFBTSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssR0FBRztBQUFNLFdBQUcsS0FBSyxFQUFFLEtBQUs7QUFBQSxJQUM3RSxTQUNPLE9BQVA7QUFBZ0IsVUFBSSxFQUFFLE1BQWE7QUFBQSxJQUFHLFVBQ3RDO0FBQ0ksVUFBSTtBQUNBLFlBQUksS0FBSyxDQUFDLEVBQUUsU0FBUyxJQUFJLEVBQUUsUUFBUTtBQUFJLFlBQUUsS0FBSyxDQUFDO0FBQUEsTUFDbkQsVUFDQTtBQUFVLFlBQUk7QUFBRyxnQkFBTSxFQUFFO0FBQUEsTUFBTztBQUFBLElBQ3BDO0FBQ0EsV0FBTztBQUFBLEVBQ1g7QUFFTyxXQUFTLFdBQVc7QUFDdkIsYUFBUyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVE7QUFDM0MsV0FBSyxHQUFHLE9BQU8sT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLFdBQU87QUFBQSxFQUNYOzs7QUNuSk8sTUFBSSwrQkFBK0I7QUFDbkMsV0FBUyxhQUFhLFFBQVE7QUFDakMsUUFBSSxTQUFTLFFBQVEsWUFBWSxxQkFBcUIsTUFBTSxLQUFLLENBQUM7QUFDbEUsUUFBSSxrQkFBa0IsUUFBUSxlQUFlLDhCQUE4QixNQUFNLEtBQUssQ0FBQztBQUN2RixXQUFPLEtBQUssZUFBZSxFQUFFLFFBQVEsU0FBVSxLQUFLO0FBQ2hELGFBQU8sQ0FBQyxHQUFHLElBQUksZ0JBQWdCLEdBQUc7QUFBQSxJQUN0QyxDQUFDO0FBQ0QsV0FBTztBQUFBLEVBQ1g7QUFDTyxXQUFTLDZCQUE2QixNQUFNLFdBQVc7QUFDMUQsV0FBTyxTQUFVLFFBQVEsY0FBYyxnQkFBZ0I7QUFDbkQsVUFBSSxjQUFjLFFBQVEsZUFBZSw4QkFBOEIsTUFBTSxLQUFLLENBQUM7QUFDbkYsa0JBQVksY0FBYyxJQUFJLFlBQ3hCO0FBQUEsUUFDRSxPQUFPO0FBQUEsUUFDUCxXQUFXLFVBQVU7QUFBQSxRQUNyQixlQUFlLFVBQVUsUUFBUSxDQUFDO0FBQUEsTUFDdEMsSUFDRTtBQUNOLGNBQVEsZUFBZSw4QkFBOEIsYUFBYSxNQUFNO0FBQUEsSUFDNUU7QUFBQSxFQUNKOzs7QUNyQk8sV0FBUyxnQkFBZ0IsVUFBVTtBQUN0QyxXQUFPLENBQUMsQ0FBQyxTQUFTO0FBQUEsRUFDdEI7OztBQ0ZPLFdBQVMsa0JBQWtCLFVBQVU7QUFDeEMsV0FBTyxDQUFDLENBQUMsU0FBUztBQUFBLEVBQ3RCOzs7QUNEQSxNQUFJLHFCQUFzQixXQUFZO0FBQ2xDLGFBQVNDLG9CQUFtQixNQUFNO0FBQzlCLFdBQUssT0FBTztBQUNaLFdBQUssaUJBQWlCO0FBQUEsUUFDbEI7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFDSjtBQUFBLElBQ0o7QUFDQSxJQUFBQSxvQkFBbUIsVUFBVSxjQUFjLFNBQVUsY0FBYztBQUMvRCxVQUFJLFFBQVE7QUFDWixVQUFJLFNBQVMsQ0FBQztBQUNkLFVBQUksT0FBTztBQUNYLFVBQUk7QUFDSixVQUFJLGdCQUFnQixXQUFZO0FBQzVCLFlBQUksQ0FBQyxNQUFNO0FBQ1Asa0JBQVEsYUFBYSxNQUFNLEtBQUssQ0FBQztBQUNqQyxpQkFBTztBQUFBLFFBQ1g7QUFDQSxlQUFPO0FBQUEsTUFDWDtBQUNBLGFBQU8sSUFBSSxNQUFNLFFBQVEsS0FBSyxjQUFjLGFBQWEsQ0FBQztBQUFBLElBQzlEO0FBQ0EsSUFBQUEsb0JBQW1CLFVBQVUsZ0JBQWdCLFNBQVUsZUFBZTtBQUNsRSxVQUFJLFVBQVUsQ0FBQztBQUNmLFVBQUksVUFBVSxTQUFVLE1BQU07QUFDMUIsZ0JBQVEsSUFBSSxJQUFJLFdBQVk7QUFDeEIsY0FBSSxPQUFPLENBQUM7QUFDWixtQkFBUyxLQUFLLEdBQUcsS0FBSyxVQUFVLFFBQVEsTUFBTTtBQUMxQyxpQkFBSyxFQUFFLElBQUksVUFBVSxFQUFFO0FBQUEsVUFDM0I7QUFDQSxlQUFLLENBQUMsSUFBSSxjQUFjO0FBQ3hCLGNBQUksU0FBUyxRQUFRLElBQUk7QUFDekIsaUJBQU8sT0FBTyxNQUFNLFFBQVEsU0FBUyxJQUFJLENBQUM7QUFBQSxRQUM5QztBQUFBLE1BQ0o7QUFDQSxXQUFLLGVBQWUsUUFBUSxPQUFPO0FBQ25DLGFBQU87QUFBQSxJQUNYO0FBQ0EsV0FBT0E7QUFBQSxFQUNYLEVBQUU7OztBQ2hESyxXQUFTLGNBQWMsT0FBTztBQUNqQyxXQUFPLE9BQU8sVUFBVSxZQUFZLE9BQU8sVUFBVTtBQUFBLEVBQ3pEO0FBQ08sV0FBUyxrQkFBa0IsWUFBWTtBQUMxQyxXQUFRLE9BQU8sZUFBZSxZQUMxQixXQUFXLGNBQ1gsY0FBYztBQUFBLEVBQ3RCO0FBQ08sV0FBUyxzQkFBc0IsWUFBWTtBQUM5QyxXQUFRLE9BQU8sZUFBZSxZQUMxQixXQUFXLGNBQ1gsZUFBZTtBQUFBLEVBQ3ZCO0FBQ08sV0FBUyxtQkFBbUIsT0FBTztBQUN0QyxXQUFPLE9BQU8sVUFBVSxjQUFjLGlCQUFpQjtBQUFBLEVBQzNEOzs7QUNoQk8sV0FBUyxnQkFBZ0IsVUFBVTtBQUN0QyxXQUFPLENBQUMsQ0FBQyxTQUFTO0FBQUEsRUFDdEI7OztBQ0ZPLFdBQVMsZ0JBQWdCLFVBQVU7QUFDdEMsV0FBTyxTQUFTLFlBQVk7QUFBQSxFQUNoQzs7O0FDRU8sV0FBUyxXQUFXLFVBQVU7QUFDakMsV0FBUSxnQkFBZ0IsUUFBUSxLQUM1QixnQkFBZ0IsUUFBUSxLQUN4QixnQkFBZ0IsUUFBUSxLQUN4QixrQkFBa0IsUUFBUTtBQUFBLEVBQ2xDOzs7QUNUQSxNQUFJLGVBQWdCLFdBQVk7QUFDNUIsYUFBU0MsZ0JBQWU7QUFDcEIsV0FBSyxlQUFlLG9CQUFJLElBQUk7QUFBQSxJQUNoQztBQUNBLElBQUFBLGNBQWEsVUFBVSxVQUFVLFdBQVk7QUFDekMsYUFBTyxLQUFLLGFBQWEsUUFBUTtBQUFBLElBQ3JDO0FBQ0EsSUFBQUEsY0FBYSxVQUFVLFNBQVMsU0FBVSxLQUFLO0FBQzNDLFdBQUssT0FBTyxHQUFHO0FBQ2YsYUFBTyxLQUFLLGFBQWEsSUFBSSxHQUFHO0FBQUEsSUFDcEM7QUFDQSxJQUFBQSxjQUFhLFVBQVUsTUFBTSxTQUFVLEtBQUs7QUFDeEMsV0FBSyxPQUFPLEdBQUc7QUFDZixVQUFJLFFBQVEsS0FBSyxhQUFhLElBQUksR0FBRztBQUNyQyxhQUFPLE1BQU0sTUFBTSxTQUFTLENBQUMsS0FBSztBQUFBLElBQ3RDO0FBQ0EsSUFBQUEsY0FBYSxVQUFVLE1BQU0sU0FBVSxLQUFLLE9BQU87QUFDL0MsV0FBSyxPQUFPLEdBQUc7QUFDZixXQUFLLGFBQWEsSUFBSSxHQUFHLEVBQUUsS0FBSyxLQUFLO0FBQUEsSUFDekM7QUFDQSxJQUFBQSxjQUFhLFVBQVUsU0FBUyxTQUFVLEtBQUssT0FBTztBQUNsRCxXQUFLLGFBQWEsSUFBSSxLQUFLLEtBQUs7QUFBQSxJQUNwQztBQUNBLElBQUFBLGNBQWEsVUFBVSxNQUFNLFNBQVUsS0FBSztBQUN4QyxXQUFLLE9BQU8sR0FBRztBQUNmLGFBQU8sS0FBSyxhQUFhLElBQUksR0FBRyxFQUFFLFNBQVM7QUFBQSxJQUMvQztBQUNBLElBQUFBLGNBQWEsVUFBVSxRQUFRLFdBQVk7QUFDdkMsV0FBSyxhQUFhLE1BQU07QUFBQSxJQUM1QjtBQUNBLElBQUFBLGNBQWEsVUFBVSxTQUFTLFNBQVUsS0FBSztBQUMzQyxVQUFJLENBQUMsS0FBSyxhQUFhLElBQUksR0FBRyxHQUFHO0FBQzdCLGFBQUssYUFBYSxJQUFJLEtBQUssQ0FBQyxDQUFDO0FBQUEsTUFDakM7QUFBQSxJQUNKO0FBQ0EsV0FBT0E7QUFBQSxFQUNYLEVBQUU7QUFDRixNQUFPLHdCQUFROzs7QUNuQ2YsTUFBSSxXQUFZLFNBQVUsUUFBUTtBQUM5QixjQUFVQyxXQUFVLE1BQU07QUFDMUIsYUFBU0EsWUFBVztBQUNoQixhQUFPLFdBQVcsUUFBUSxPQUFPLE1BQU0sTUFBTSxTQUFTLEtBQUs7QUFBQSxJQUMvRDtBQUNBLFdBQU9BO0FBQUEsRUFDWCxFQUFFLHFCQUFZO0FBQ2QsTUFBTyxtQkFBUTs7O0FDVGYsTUFBSSxvQkFBcUIsV0FBWTtBQUNqQyxhQUFTQyxxQkFBb0I7QUFDekIsV0FBSyxvQkFBb0Isb0JBQUksSUFBSTtBQUFBLElBQ3JDO0FBQ0EsV0FBT0E7QUFBQSxFQUNYLEVBQUU7QUFDRixNQUFPLDZCQUFROzs7QUNMZixXQUFTLGlCQUFpQixRQUFRLEtBQUs7QUFDbkMsUUFBSSxXQUFXLE1BQU07QUFDakIsYUFBTyxrQkFBa0I7QUFBQSxJQUM3QjtBQUNBLFFBQUksVUFBVSxPQUFPLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLO0FBQzFDLFdBQU8sTUFBTyxVQUFVLG9CQUFxQjtBQUFBLEVBQ2pEO0FBQ0EsV0FBUyxvQkFBb0IsS0FBSyxHQUFHLFFBQVE7QUFDekMsUUFBSSxXQUFXLFFBQVE7QUFBRSxlQUFTO0FBQUEsSUFBUTtBQUMxQyxXQUFPLFNBQVMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxRQUFRLE1BQU0sSUFBSSxFQUFFLElBQUksU0FBVUMsSUFBRztBQUFFLGFBQU8sU0FBU0E7QUFBQSxJQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSTtBQUFBLEVBQ3BHO0FBQ08sV0FBUyxnQkFBZ0IsTUFBTSxVQUFVLE9BQU87QUFDbkQsUUFBSSxLQUFLLE9BQU8sS0FBSyxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsU0FBUyxPQUFPLFNBQVMsT0FBTztBQUN6SCxRQUFJLE1BQU0saUJBQWlCLFFBQVEsUUFBUTtBQUMzQyxXQUFPLG9CQUFvQixrQ0FBa0MsTUFBTSxVQUFXLEtBQUssT0FBTywwQkFBMkIsS0FBSztBQUFBLEVBQzlIOzs7QUNoQk8sV0FBUyxhQUFhLE9BQU87QUFDaEMsUUFBSSxPQUFPLE1BQU0sWUFBWTtBQUN6QixhQUFPO0FBQ1gsUUFBSSxhQUFhLE1BQU07QUFDdkIsUUFBSSxXQUFXLFNBQVMsR0FBRztBQUN2QixhQUFPO0FBQUEsSUFDWDtBQUNBLFdBQU87QUFBQSxFQUNYOzs7QUNOQSxNQUFJLDRCQUE2QixTQUFVLFFBQVE7QUFDL0MsY0FBVUMsNEJBQTJCLE1BQU07QUFDM0MsYUFBU0EsNkJBQTRCO0FBQ2pDLGFBQU8sV0FBVyxRQUFRLE9BQU8sTUFBTSxNQUFNLFNBQVMsS0FBSztBQUFBLElBQy9EO0FBQ0EsV0FBT0E7QUFBQSxFQUNYLEVBQUUscUJBQVk7QUFFZCxNQUFJLDZCQUE4QixTQUFVLFFBQVE7QUFDaEQsY0FBVUMsNkJBQTRCLE1BQU07QUFDNUMsYUFBU0EsOEJBQTZCO0FBQ2xDLGFBQU8sV0FBVyxRQUFRLE9BQU8sTUFBTSxNQUFNLFNBQVMsS0FBSztBQUFBLElBQy9EO0FBQ0EsV0FBT0E7QUFBQSxFQUNYLEVBQUUscUJBQVk7QUFFZCxNQUFJLGVBQWdCLFdBQVk7QUFDNUIsYUFBU0MsZ0JBQWU7QUFDcEIsV0FBSyxnQkFBZ0IsSUFBSSwwQkFBMEI7QUFDbkQsV0FBSyxpQkFBaUIsSUFBSSwyQkFBMkI7QUFBQSxJQUN6RDtBQUNBLFdBQU9BO0FBQUEsRUFDWCxFQUFFO0FBQ0YsTUFBTyx1QkFBUTs7O0FDZFIsTUFBSSxXQUFXLG9CQUFJLElBQUk7QUFDOUIsTUFBSSw4QkFBK0IsV0FBWTtBQUMzQyxhQUFTQyw2QkFBNEIsUUFBUTtBQUN6QyxXQUFLLFNBQVM7QUFDZCxXQUFLLFlBQVksSUFBSSxpQkFBUztBQUM5QixXQUFLLGVBQWUsSUFBSSxxQkFBYTtBQUNyQyxXQUFLLFdBQVc7QUFDaEIsV0FBSyxjQUFjLG9CQUFJLElBQUk7QUFBQSxJQUMvQjtBQUNBLElBQUFBLDZCQUE0QixVQUFVLFdBQVcsU0FBVSxPQUFPLHVCQUF1QixTQUFTO0FBQzlGLFVBQUksWUFBWSxRQUFRO0FBQUUsa0JBQVUsRUFBRSxXQUFXLGtCQUFVLFVBQVU7QUFBQSxNQUFHO0FBQ3hFLFdBQUssa0JBQWtCO0FBQ3ZCLFVBQUk7QUFDSixVQUFJLENBQUMsV0FBVyxxQkFBcUIsR0FBRztBQUNwQyxtQkFBVyxFQUFFLFVBQVUsc0JBQXNCO0FBQUEsTUFDakQsT0FDSztBQUNELG1CQUFXO0FBQUEsTUFDZjtBQUNBLFVBQUksZ0JBQWdCLFFBQVEsR0FBRztBQUMzQixZQUFJLE9BQU8sQ0FBQyxLQUFLO0FBQ2pCLFlBQUksZ0JBQWdCO0FBQ3BCLGVBQU8saUJBQWlCLE1BQU07QUFDMUIsY0FBSSxlQUFlLGNBQWM7QUFDakMsY0FBSSxLQUFLLFNBQVMsWUFBWSxHQUFHO0FBQzdCLGtCQUFNLElBQUksTUFBTSx3Q0FBd0MsU0FBUyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUM7QUFBQSxVQUN2RztBQUNBLGVBQUssS0FBSyxZQUFZO0FBQ3RCLGNBQUksZUFBZSxLQUFLLFVBQVUsSUFBSSxZQUFZO0FBQ2xELGNBQUksZ0JBQWdCLGdCQUFnQixhQUFhLFFBQVEsR0FBRztBQUN4RCw0QkFBZ0IsYUFBYTtBQUFBLFVBQ2pDLE9BQ0s7QUFDRCw0QkFBZ0I7QUFBQSxVQUNwQjtBQUFBLFFBQ0o7QUFBQSxNQUNKO0FBQ0EsVUFBSSxRQUFRLGNBQWMsa0JBQVUsYUFDaEMsUUFBUSxhQUFhLGtCQUFVLG1CQUMvQixRQUFRLGFBQWEsa0JBQVUsa0JBQWtCO0FBQ2pELFlBQUksZ0JBQWdCLFFBQVEsS0FBSyxrQkFBa0IsUUFBUSxHQUFHO0FBQzFELGdCQUFNLElBQUksTUFBTSwyQkFBNEIsa0JBQVUsUUFBUSxTQUFTLElBQUksMkNBQTRDO0FBQUEsUUFDM0g7QUFBQSxNQUNKO0FBQ0EsV0FBSyxVQUFVLElBQUksT0FBTyxFQUFFLFVBQW9CLFFBQWlCLENBQUM7QUFDbEUsYUFBTztBQUFBLElBQ1g7QUFDQSxJQUFBQSw2QkFBNEIsVUFBVSxlQUFlLFNBQVUsTUFBTSxJQUFJO0FBQ3JFLFdBQUssa0JBQWtCO0FBQ3ZCLFVBQUksY0FBYyxFQUFFLEdBQUc7QUFDbkIsZUFBTyxLQUFLLFNBQVMsTUFBTTtBQUFBLFVBQ3ZCLFVBQVU7QUFBQSxRQUNkLENBQUM7QUFBQSxNQUNMO0FBQ0EsYUFBTyxLQUFLLFNBQVMsTUFBTTtBQUFBLFFBQ3ZCLFVBQVU7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNMO0FBQ0EsSUFBQUEsNkJBQTRCLFVBQVUsbUJBQW1CLFNBQVUsT0FBT0MsV0FBVTtBQUNoRixXQUFLLGtCQUFrQjtBQUN2QixhQUFPLEtBQUssU0FBUyxPQUFPO0FBQUEsUUFDeEIsVUFBVUE7QUFBQSxNQUNkLENBQUM7QUFBQSxJQUNMO0FBQ0EsSUFBQUQsNkJBQTRCLFVBQVUsb0JBQW9CLFNBQVUsTUFBTSxJQUFJO0FBQzFFLFdBQUssa0JBQWtCO0FBQ3ZCLFVBQUksY0FBYyxJQUFJLEdBQUc7QUFDckIsWUFBSSxjQUFjLEVBQUUsR0FBRztBQUNuQixpQkFBTyxLQUFLLFNBQVMsTUFBTTtBQUFBLFlBQ3ZCLFVBQVU7QUFBQSxVQUNkLEdBQUcsRUFBRSxXQUFXLGtCQUFVLFVBQVUsQ0FBQztBQUFBLFFBQ3pDLFdBQ1MsSUFBSTtBQUNULGlCQUFPLEtBQUssU0FBUyxNQUFNO0FBQUEsWUFDdkIsVUFBVTtBQUFBLFVBQ2QsR0FBRyxFQUFFLFdBQVcsa0JBQVUsVUFBVSxDQUFDO0FBQUEsUUFDekM7QUFDQSxjQUFNLElBQUksTUFBTSxpRUFBaUU7QUFBQSxNQUNyRjtBQUNBLFVBQUksV0FBVztBQUNmLFVBQUksTUFBTSxDQUFDLGNBQWMsRUFBRSxHQUFHO0FBQzFCLG1CQUFXO0FBQUEsTUFDZjtBQUNBLGFBQU8sS0FBSyxTQUFTLE1BQU07QUFBQSxRQUN2QjtBQUFBLE1BQ0osR0FBRyxFQUFFLFdBQVcsa0JBQVUsVUFBVSxDQUFDO0FBQUEsSUFDekM7QUFDQSxJQUFBQSw2QkFBNEIsVUFBVSxVQUFVLFNBQVUsT0FBT0UsVUFBUztBQUN0RSxVQUFJQSxhQUFZLFFBQVE7QUFBRSxRQUFBQSxXQUFVLElBQUksMkJBQWtCO0FBQUEsTUFBRztBQUM3RCxXQUFLLGtCQUFrQjtBQUN2QixVQUFJLGVBQWUsS0FBSyxnQkFBZ0IsS0FBSztBQUM3QyxVQUFJLENBQUMsZ0JBQWdCLGNBQWMsS0FBSyxHQUFHO0FBQ3ZDLGNBQU0sSUFBSSxNQUFNLDBEQUEyRCxNQUFNLFNBQVMsSUFBSSxHQUFJO0FBQUEsTUFDdEc7QUFDQSxXQUFLLGdDQUFnQyxPQUFPLFFBQVE7QUFDcEQsVUFBSSxjQUFjO0FBQ2QsWUFBSSxTQUFTLEtBQUssb0JBQW9CLGNBQWNBLFFBQU87QUFDM0QsYUFBSyxpQ0FBaUMsT0FBTyxRQUFRLFFBQVE7QUFDN0QsZUFBTztBQUFBLE1BQ1g7QUFDQSxVQUFJLG1CQUFtQixLQUFLLEdBQUc7QUFDM0IsWUFBSSxTQUFTLEtBQUssVUFBVSxPQUFPQSxRQUFPO0FBQzFDLGFBQUssaUNBQWlDLE9BQU8sUUFBUSxRQUFRO0FBQzdELGVBQU87QUFBQSxNQUNYO0FBQ0EsWUFBTSxJQUFJLE1BQU0sd0hBQXdIO0FBQUEsSUFDNUk7QUFDQSxJQUFBRiw2QkFBNEIsVUFBVSxrQ0FBa0MsU0FBVSxPQUFPLGdCQUFnQjtBQUNyRyxVQUFJLEtBQUs7QUFDVCxVQUFJLEtBQUssYUFBYSxjQUFjLElBQUksS0FBSyxHQUFHO0FBQzVDLFlBQUksd0JBQXdCLENBQUM7QUFDN0IsWUFBSTtBQUNBLG1CQUFTLEtBQUssU0FBUyxLQUFLLGFBQWEsY0FBYyxPQUFPLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsQ0FBQyxHQUFHLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBRztBQUM3RyxnQkFBSSxjQUFjLEdBQUc7QUFDckIsZ0JBQUksWUFBWSxRQUFRLGFBQWEsUUFBUTtBQUN6QyxvQ0FBc0IsS0FBSyxXQUFXO0FBQUEsWUFDMUM7QUFDQSx3QkFBWSxTQUFTLE9BQU8sY0FBYztBQUFBLFVBQzlDO0FBQUEsUUFDSixTQUNPLE9BQVA7QUFBZ0IsZ0JBQU0sRUFBRSxPQUFPLE1BQU07QUFBQSxRQUFHLFVBQ3hDO0FBQ0ksY0FBSTtBQUNBLGdCQUFJLE1BQU0sQ0FBQyxHQUFHLFNBQVMsS0FBSyxHQUFHO0FBQVMsaUJBQUcsS0FBSyxFQUFFO0FBQUEsVUFDdEQsVUFDQTtBQUFVLGdCQUFJO0FBQUssb0JBQU0sSUFBSTtBQUFBLFVBQU87QUFBQSxRQUN4QztBQUNBLGFBQUssYUFBYSxjQUFjLE9BQU8sT0FBTyxxQkFBcUI7QUFBQSxNQUN2RTtBQUFBLElBQ0o7QUFDQSxJQUFBQSw2QkFBNEIsVUFBVSxtQ0FBbUMsU0FBVSxPQUFPLFFBQVEsZ0JBQWdCO0FBQzlHLFVBQUksS0FBSztBQUNULFVBQUksS0FBSyxhQUFhLGVBQWUsSUFBSSxLQUFLLEdBQUc7QUFDN0MsWUFBSSx3QkFBd0IsQ0FBQztBQUM3QixZQUFJO0FBQ0EsbUJBQVMsS0FBSyxTQUFTLEtBQUssYUFBYSxlQUFlLE9BQU8sS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHO0FBQzlHLGdCQUFJLGNBQWMsR0FBRztBQUNyQixnQkFBSSxZQUFZLFFBQVEsYUFBYSxRQUFRO0FBQ3pDLG9DQUFzQixLQUFLLFdBQVc7QUFBQSxZQUMxQztBQUNBLHdCQUFZLFNBQVMsT0FBTyxRQUFRLGNBQWM7QUFBQSxVQUN0RDtBQUFBLFFBQ0osU0FDTyxPQUFQO0FBQWdCLGdCQUFNLEVBQUUsT0FBTyxNQUFNO0FBQUEsUUFBRyxVQUN4QztBQUNJLGNBQUk7QUFDQSxnQkFBSSxNQUFNLENBQUMsR0FBRyxTQUFTLEtBQUssR0FBRztBQUFTLGlCQUFHLEtBQUssRUFBRTtBQUFBLFVBQ3RELFVBQ0E7QUFBVSxnQkFBSTtBQUFLLG9CQUFNLElBQUk7QUFBQSxVQUFPO0FBQUEsUUFDeEM7QUFDQSxhQUFLLGFBQWEsZUFBZSxPQUFPLE9BQU8scUJBQXFCO0FBQUEsTUFDeEU7QUFBQSxJQUNKO0FBQ0EsSUFBQUEsNkJBQTRCLFVBQVUsc0JBQXNCLFNBQVUsY0FBY0UsVUFBUztBQUN6RixXQUFLLGtCQUFrQjtBQUN2QixVQUFJLGFBQWEsUUFBUSxjQUFjLGtCQUFVLG9CQUM3Q0EsU0FBUSxrQkFBa0IsSUFBSSxZQUFZLEdBQUc7QUFDN0MsZUFBT0EsU0FBUSxrQkFBa0IsSUFBSSxZQUFZO0FBQUEsTUFDckQ7QUFDQSxVQUFJLGNBQWMsYUFBYSxRQUFRLGNBQWMsa0JBQVU7QUFDL0QsVUFBSSxvQkFBb0IsYUFBYSxRQUFRLGNBQWMsa0JBQVU7QUFDckUsVUFBSSxpQkFBaUIsZUFBZTtBQUNwQyxVQUFJO0FBQ0osVUFBSSxnQkFBZ0IsYUFBYSxRQUFRLEdBQUc7QUFDeEMsbUJBQVcsYUFBYSxTQUFTO0FBQUEsTUFDckMsV0FDUyxnQkFBZ0IsYUFBYSxRQUFRLEdBQUc7QUFDN0MsbUJBQVcsaUJBQ0wsYUFBYSxhQUNWLGFBQWEsV0FBVyxLQUFLLFFBQVEsYUFBYSxTQUFTLFVBQVVBLFFBQU8sS0FDL0UsS0FBSyxRQUFRLGFBQWEsU0FBUyxVQUFVQSxRQUFPO0FBQUEsTUFDOUQsV0FDUyxnQkFBZ0IsYUFBYSxRQUFRLEdBQUc7QUFDN0MsbUJBQVcsaUJBQ0wsYUFBYSxhQUNWLGFBQWEsV0FBVyxLQUFLLFVBQVUsYUFBYSxTQUFTLFVBQVVBLFFBQU8sS0FDakYsS0FBSyxVQUFVLGFBQWEsU0FBUyxVQUFVQSxRQUFPO0FBQUEsTUFDaEUsV0FDUyxrQkFBa0IsYUFBYSxRQUFRLEdBQUc7QUFDL0MsbUJBQVcsYUFBYSxTQUFTLFdBQVcsSUFBSTtBQUFBLE1BQ3BELE9BQ0s7QUFDRCxtQkFBVyxLQUFLLFVBQVUsYUFBYSxVQUFVQSxRQUFPO0FBQUEsTUFDNUQ7QUFDQSxVQUFJLGFBQWEsUUFBUSxjQUFjLGtCQUFVLGtCQUFrQjtBQUMvRCxRQUFBQSxTQUFRLGtCQUFrQixJQUFJLGNBQWMsUUFBUTtBQUFBLE1BQ3hEO0FBQ0EsYUFBTztBQUFBLElBQ1g7QUFDQSxJQUFBRiw2QkFBNEIsVUFBVSxhQUFhLFNBQVUsT0FBT0UsVUFBUztBQUN6RSxVQUFJLFFBQVE7QUFDWixVQUFJQSxhQUFZLFFBQVE7QUFBRSxRQUFBQSxXQUFVLElBQUksMkJBQWtCO0FBQUEsTUFBRztBQUM3RCxXQUFLLGtCQUFrQjtBQUN2QixVQUFJLGdCQUFnQixLQUFLLG9CQUFvQixLQUFLO0FBQ2xELFVBQUksQ0FBQyxpQkFBaUIsY0FBYyxLQUFLLEdBQUc7QUFDeEMsY0FBTSxJQUFJLE1BQU0sMERBQTJELE1BQU0sU0FBUyxJQUFJLEdBQUk7QUFBQSxNQUN0RztBQUNBLFdBQUssZ0NBQWdDLE9BQU8sS0FBSztBQUNqRCxVQUFJLGVBQWU7QUFDZixZQUFJLFdBQVcsY0FBYyxJQUFJLFNBQVUsTUFBTTtBQUM3QyxpQkFBTyxNQUFNLG9CQUFvQixNQUFNQSxRQUFPO0FBQUEsUUFDbEQsQ0FBQztBQUNELGFBQUssaUNBQWlDLE9BQU8sVUFBVSxLQUFLO0FBQzVELGVBQU87QUFBQSxNQUNYO0FBQ0EsVUFBSSxTQUFTLENBQUMsS0FBSyxVQUFVLE9BQU9BLFFBQU8sQ0FBQztBQUM1QyxXQUFLLGlDQUFpQyxPQUFPLFFBQVEsS0FBSztBQUMxRCxhQUFPO0FBQUEsSUFDWDtBQUNBLElBQUFGLDZCQUE0QixVQUFVLGVBQWUsU0FBVSxPQUFPLFdBQVc7QUFDN0UsVUFBSSxjQUFjLFFBQVE7QUFBRSxvQkFBWTtBQUFBLE1BQU87QUFDL0MsV0FBSyxrQkFBa0I7QUFDdkIsYUFBUSxLQUFLLFVBQVUsSUFBSSxLQUFLLEtBQzNCLGNBQ0ksS0FBSyxVQUFVLFVBQ2hCLEtBQUssT0FBTyxhQUFhLE9BQU8sSUFBSTtBQUFBLElBQ2hEO0FBQ0EsSUFBQUEsNkJBQTRCLFVBQVUsUUFBUSxXQUFZO0FBQ3RELFdBQUssa0JBQWtCO0FBQ3ZCLFdBQUssVUFBVSxNQUFNO0FBQ3JCLFdBQUssYUFBYSxjQUFjLE1BQU07QUFDdEMsV0FBSyxhQUFhLGVBQWUsTUFBTTtBQUFBLElBQzNDO0FBQ0EsSUFBQUEsNkJBQTRCLFVBQVUsaUJBQWlCLFdBQVk7QUFDL0QsVUFBSSxLQUFLO0FBQ1QsV0FBSyxrQkFBa0I7QUFDdkIsVUFBSTtBQUNBLGlCQUFTLEtBQUssU0FBUyxLQUFLLFVBQVUsUUFBUSxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxDQUFDLEdBQUcsTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHO0FBQ3hGLGNBQUksS0FBSyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxnQkFBZ0IsR0FBRyxDQUFDO0FBQ2pFLGVBQUssVUFBVSxPQUFPLE9BQU8sY0FDeEIsT0FBTyxTQUFVLGNBQWM7QUFBRSxtQkFBTyxDQUFDLGdCQUFnQixhQUFhLFFBQVE7QUFBQSxVQUFHLENBQUMsRUFDbEYsSUFBSSxTQUFVLGNBQWM7QUFDN0IseUJBQWEsV0FBVztBQUN4QixtQkFBTztBQUFBLFVBQ1gsQ0FBQyxDQUFDO0FBQUEsUUFDTjtBQUFBLE1BQ0osU0FDTyxPQUFQO0FBQWdCLGNBQU0sRUFBRSxPQUFPLE1BQU07QUFBQSxNQUFHLFVBQ3hDO0FBQ0ksWUFBSTtBQUNBLGNBQUksTUFBTSxDQUFDLEdBQUcsU0FBUyxLQUFLLEdBQUc7QUFBUyxlQUFHLEtBQUssRUFBRTtBQUFBLFFBQ3RELFVBQ0E7QUFBVSxjQUFJO0FBQUssa0JBQU0sSUFBSTtBQUFBLFFBQU87QUFBQSxNQUN4QztBQUFBLElBQ0o7QUFDQSxJQUFBQSw2QkFBNEIsVUFBVSx1QkFBdUIsV0FBWTtBQUNyRSxVQUFJLEtBQUs7QUFDVCxXQUFLLGtCQUFrQjtBQUN2QixVQUFJLGlCQUFpQixJQUFJQSw2QkFBNEIsSUFBSTtBQUN6RCxVQUFJO0FBQ0EsaUJBQVMsS0FBSyxTQUFTLEtBQUssVUFBVSxRQUFRLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxNQUFNLEtBQUssR0FBRyxLQUFLLEdBQUc7QUFDeEYsY0FBSSxLQUFLLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixHQUFHLENBQUM7QUFDakUsY0FBSSxjQUFjLEtBQUssU0FBVUcsS0FBSTtBQUNqQyxnQkFBSSxVQUFVQSxJQUFHO0FBQ2pCLG1CQUFPLFFBQVEsY0FBYyxrQkFBVTtBQUFBLFVBQzNDLENBQUMsR0FBRztBQUNBLDJCQUFlLFVBQVUsT0FBTyxPQUFPLGNBQWMsSUFBSSxTQUFVLGNBQWM7QUFDN0Usa0JBQUksYUFBYSxRQUFRLGNBQWMsa0JBQVUsaUJBQWlCO0FBQzlELHVCQUFPO0FBQUEsa0JBQ0gsVUFBVSxhQUFhO0FBQUEsa0JBQ3ZCLFNBQVMsYUFBYTtBQUFBLGdCQUMxQjtBQUFBLGNBQ0o7QUFDQSxxQkFBTztBQUFBLFlBQ1gsQ0FBQyxDQUFDO0FBQUEsVUFDTjtBQUFBLFFBQ0o7QUFBQSxNQUNKLFNBQ08sT0FBUDtBQUFnQixjQUFNLEVBQUUsT0FBTyxNQUFNO0FBQUEsTUFBRyxVQUN4QztBQUNJLFlBQUk7QUFDQSxjQUFJLE1BQU0sQ0FBQyxHQUFHLFNBQVMsS0FBSyxHQUFHO0FBQVMsZUFBRyxLQUFLLEVBQUU7QUFBQSxRQUN0RCxVQUNBO0FBQVUsY0FBSTtBQUFLLGtCQUFNLElBQUk7QUFBQSxRQUFPO0FBQUEsTUFDeEM7QUFDQSxhQUFPO0FBQUEsSUFDWDtBQUNBLElBQUFILDZCQUE0QixVQUFVLG1CQUFtQixTQUFVLE9BQU8sVUFBVSxTQUFTO0FBQ3pGLFVBQUksWUFBWSxRQUFRO0FBQUUsa0JBQVUsRUFBRSxXQUFXLFNBQVM7QUFBQSxNQUFHO0FBQzdELFdBQUssYUFBYSxjQUFjLElBQUksT0FBTztBQUFBLFFBQ3ZDO0FBQUEsUUFDQTtBQUFBLE1BQ0osQ0FBQztBQUFBLElBQ0w7QUFDQSxJQUFBQSw2QkFBNEIsVUFBVSxrQkFBa0IsU0FBVSxPQUFPLFVBQVUsU0FBUztBQUN4RixVQUFJLFlBQVksUUFBUTtBQUFFLGtCQUFVLEVBQUUsV0FBVyxTQUFTO0FBQUEsTUFBRztBQUM3RCxXQUFLLGFBQWEsZUFBZSxJQUFJLE9BQU87QUFBQSxRQUN4QztBQUFBLFFBQ0E7QUFBQSxNQUNKLENBQUM7QUFBQSxJQUNMO0FBQ0EsSUFBQUEsNkJBQTRCLFVBQVUsVUFBVSxXQUFZO0FBQ3hELGFBQU8sVUFBVSxNQUFNLFFBQVEsUUFBUSxXQUFZO0FBQy9DLFlBQUk7QUFDSixlQUFPLFlBQVksTUFBTSxTQUFVLElBQUk7QUFDbkMsa0JBQVEsR0FBRyxPQUFPO0FBQUEsWUFDZCxLQUFLO0FBQ0QsbUJBQUssV0FBVztBQUNoQix5QkFBVyxDQUFDO0FBQ1osbUJBQUssWUFBWSxRQUFRLFNBQVUsWUFBWTtBQUMzQyxvQkFBSSxlQUFlLFdBQVcsUUFBUTtBQUN0QyxvQkFBSSxjQUFjO0FBQ2QsMkJBQVMsS0FBSyxZQUFZO0FBQUEsZ0JBQzlCO0FBQUEsY0FDSixDQUFDO0FBQ0QscUJBQU8sQ0FBQyxHQUFHLFFBQVEsSUFBSSxRQUFRLENBQUM7QUFBQSxZQUNwQyxLQUFLO0FBQ0QsaUJBQUcsS0FBSztBQUNSLHFCQUFPLENBQUMsQ0FBQztBQUFBLFVBQ2pCO0FBQUEsUUFDSixDQUFDO0FBQUEsTUFDTCxDQUFDO0FBQUEsSUFDTDtBQUNBLElBQUFBLDZCQUE0QixVQUFVLGtCQUFrQixTQUFVLE9BQU87QUFDckUsVUFBSSxLQUFLLGFBQWEsS0FBSyxHQUFHO0FBQzFCLGVBQU8sS0FBSyxVQUFVLElBQUksS0FBSztBQUFBLE1BQ25DO0FBQ0EsVUFBSSxLQUFLLFFBQVE7QUFDYixlQUFPLEtBQUssT0FBTyxnQkFBZ0IsS0FBSztBQUFBLE1BQzVDO0FBQ0EsYUFBTztBQUFBLElBQ1g7QUFDQSxJQUFBQSw2QkFBNEIsVUFBVSxzQkFBc0IsU0FBVSxPQUFPO0FBQ3pFLFVBQUksS0FBSyxhQUFhLEtBQUssR0FBRztBQUMxQixlQUFPLEtBQUssVUFBVSxPQUFPLEtBQUs7QUFBQSxNQUN0QztBQUNBLFVBQUksS0FBSyxRQUFRO0FBQ2IsZUFBTyxLQUFLLE9BQU8sb0JBQW9CLEtBQUs7QUFBQSxNQUNoRDtBQUNBLGFBQU87QUFBQSxJQUNYO0FBQ0EsSUFBQUEsNkJBQTRCLFVBQVUsWUFBWSxTQUFVLE1BQU1FLFVBQVM7QUFDdkUsVUFBSSxRQUFRO0FBQ1osVUFBSSxnQkFBZ0Isb0JBQW9CO0FBQ3BDLGVBQU8sS0FBSyxZQUFZLFNBQVUsUUFBUTtBQUN0QyxpQkFBTyxNQUFNLFFBQVEsUUFBUUEsUUFBTztBQUFBLFFBQ3hDLENBQUM7QUFBQSxNQUNMO0FBQ0EsVUFBSUQsWUFBWSxXQUFZO0FBQ3hCLFlBQUksWUFBWSxTQUFTLElBQUksSUFBSTtBQUNqQyxZQUFJLENBQUMsYUFBYSxVQUFVLFdBQVcsR0FBRztBQUN0QyxjQUFJLEtBQUssV0FBVyxHQUFHO0FBQ25CLG1CQUFPLElBQUksS0FBSztBQUFBLFVBQ3BCLE9BQ0s7QUFDRCxrQkFBTSxJQUFJLE1BQU0sNkJBQThCLEtBQUssT0FBTyxHQUFJO0FBQUEsVUFDbEU7QUFBQSxRQUNKO0FBQ0EsWUFBSSxTQUFTLFVBQVUsSUFBSSxNQUFNLGNBQWNDLFVBQVMsSUFBSSxDQUFDO0FBQzdELGVBQU8sS0FBSyxLQUFLLEtBQUssTUFBTSxNQUFNLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUc7QUFBQSxNQUNuRSxFQUFHO0FBQ0gsVUFBSSxhQUFhRCxTQUFRLEdBQUc7QUFDeEIsYUFBSyxZQUFZLElBQUlBLFNBQVE7QUFBQSxNQUNqQztBQUNBLGFBQU9BO0FBQUEsSUFDWDtBQUNBLElBQUFELDZCQUE0QixVQUFVLGdCQUFnQixTQUFVRSxVQUFTLE1BQU07QUFDM0UsVUFBSSxRQUFRO0FBQ1osYUFBTyxTQUFVLE9BQU8sS0FBSztBQUN6QixZQUFJLElBQUksSUFBSTtBQUNaLFlBQUk7QUFDQSxjQUFJLGtCQUFrQixLQUFLLEdBQUc7QUFDMUIsZ0JBQUksc0JBQXNCLEtBQUssR0FBRztBQUM5QixxQkFBTyxNQUFNLFlBQ04sS0FBSyxNQUFNLFFBQVEsTUFBTSxTQUFTLEdBQUcsVUFBVSxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sV0FBVyxNQUFNLEtBQUssQ0FBQyxHQUFHLE1BQU0sYUFBYSxDQUFDLEtBQUssS0FBSyxNQUFNLFFBQVEsTUFBTSxTQUFTLEdBQUcsVUFBVSxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU0sUUFBUSxNQUFNLE9BQU9BLFFBQU8sQ0FBQyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBQUEsWUFDcFEsT0FDSztBQUNELHFCQUFPLE1BQU0sV0FDUCxNQUFNLFdBQVcsTUFBTSxLQUFLLElBQzVCLE1BQU0sUUFBUSxNQUFNLE9BQU9BLFFBQU87QUFBQSxZQUM1QztBQUFBLFVBQ0osV0FDUyxzQkFBc0IsS0FBSyxHQUFHO0FBQ25DLG9CQUFRLEtBQUssTUFBTSxRQUFRLE1BQU0sV0FBV0EsUUFBTyxHQUFHLFVBQVUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNLFFBQVEsTUFBTSxPQUFPQSxRQUFPLENBQUMsR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUFBLFVBQ2xKO0FBQ0EsaUJBQU8sTUFBTSxRQUFRLE9BQU9BLFFBQU87QUFBQSxRQUN2QyxTQUNPLEdBQVA7QUFDSSxnQkFBTSxJQUFJLE1BQU0sZ0JBQWdCLE1BQU0sS0FBSyxDQUFDLENBQUM7QUFBQSxRQUNqRDtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQ0EsSUFBQUYsNkJBQTRCLFVBQVUsb0JBQW9CLFdBQVk7QUFDbEUsVUFBSSxLQUFLLFVBQVU7QUFDZixjQUFNLElBQUksTUFBTSxpRkFBaUY7QUFBQSxNQUNyRztBQUFBLElBQ0o7QUFDQSxXQUFPQTtBQUFBLEVBQ1gsRUFBRTtBQUNLLE1BQUksV0FBVyxJQUFJLDRCQUE0Qjs7O0FDL1l0RCxXQUFTLE9BQU8sT0FBTztBQUNuQixXQUFPLDZCQUE2QixLQUFLO0FBQUEsRUFDN0M7QUFDQSxNQUFPLGlCQUFROzs7QUNGZixXQUFTLGFBQWE7QUFDbEIsV0FBTyxTQUFVLFFBQVE7QUFDckIsZUFBUyxJQUFJLFFBQVEsYUFBYSxNQUFNLENBQUM7QUFBQSxJQUM3QztBQUFBLEVBQ0o7QUFDQSxNQUFPLHFCQUFROzs7QUNMZixXQUFTLFlBQVk7QUFDakIsV0FBTyxTQUFVLFFBQVE7QUFDckIseUJBQVcsRUFBRSxNQUFNO0FBQ25CLGVBQWdCLGtCQUFrQixNQUFNO0FBQUEsSUFDNUM7QUFBQSxFQUNKO0FBQ0EsTUFBTyxvQkFBUTs7O0FDUmYsTUFBSSxPQUFPLFlBQVksZUFBZSxDQUFDLFFBQVEsYUFBYTtBQUN4RCxVQUFNLElBQUksTUFBTSw4R0FBZ0g7QUFBQSxFQUNwSTs7O0FDRkE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBO0FBQUE7QUFBQTtBQUFBOzs7QUNNTyxXQUFTLHNCQUFzQixNQUFnQixZQUFzRDtBQUMxRyxhQUFTLElBQUksR0FBRyxJQUFJLEtBQUssUUFBUSxLQUFLO0FBQ3BDLGVBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsUUFBUSxLQUFLO0FBQ3ZDLFlBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLFlBQVk7QUFDN0IsaUJBQU8sRUFBRSxHQUFNLEVBQUs7QUFBQSxRQUN0QjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0EsV0FBTztBQUFBLEVBQ1Q7QUFLTyxXQUFTLDJCQUEyQixNQUFnQixHQUFXLEdBQTBCO0FBQzlGLFFBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxRQUFRO0FBQzdCLGFBQU87QUFBQSxJQUNUO0FBQ0EsUUFBRyxJQUFJLEtBQUssS0FBSyxLQUFLLENBQUMsRUFBRSxRQUFRO0FBQy9CLGFBQU87QUFBQSxJQUNUO0FBRUEsV0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDO0FBQUEsRUFDbEI7OztBQy9CQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPTyxNQUFNLFlBQXNDO0FBQUEsSUFDakQsVUFBVTtBQUFBLElBQ1YsTUFBTTtBQUFBLElBQ04sVUFBVTtBQUFBLElBQ1YsUUFBUTtBQUFBLEVBQ1Y7QUFpRU8sTUFBTSxnQkFBZ0M7QUFBQSxJQUMzQztBQUFBLE1BQ0UsTUFBTTtBQUFBLE1BQ04sTUFBTSxVQUFVO0FBQUEsTUFDaEIsZUFBZSxDQUFDLENBQUM7QUFBQSxNQUNqQixjQUFjO0FBQUEsTUFDZCxTQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsTUFDQSxZQUFZO0FBQUEsUUFDVjtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsTUFDQSxPQUFNO0FBQUEsUUFDSixFQUFDLE1BQUssU0FBUTtBQUFBLFFBQ2QsRUFBQyxNQUFLLGdCQUFnQixRQUFPLElBQUc7QUFBQSxRQUNoQyxFQUFDLE1BQUssU0FBUSxVQUFTLE1BQU0sUUFBTyxJQUFHO0FBQUEsUUFDdkMsRUFBQyxNQUFLLFVBQVMsVUFBUyxNQUFNLFFBQU8sS0FBSyxtQkFBa0IsS0FBSTtBQUFBLE1BQ2xFO0FBQUEsTUFDQSxRQUFPO0FBQUEsUUFDTCxFQUFDLFVBQVMsUUFBUSxNQUFLLFNBQVMsVUFBUyxJQUFHO0FBQUEsTUFDOUM7QUFBQSxJQUNGO0FBQUEsSUFDQTtBQUFBLE1BQ0UsTUFBTTtBQUFBLE1BQ04sTUFBTSxVQUFVO0FBQUEsTUFDaEIsZUFBZSxDQUFDLEdBQUcsQ0FBQztBQUFBLE1BQ3BCLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxRQUNMO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUFTO0FBQUEsSUFDZjtBQUFBLElBQ0E7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLE1BQU0sVUFBVTtBQUFBLE1BQ2hCLGVBQWUsQ0FBQyxHQUFHLENBQUM7QUFBQSxNQUNwQixjQUFjO0FBQUEsTUFDZCxTQUFTO0FBQUEsUUFDTDtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUFTO0FBQUEsSUFFZjtBQUFBLElBQ0E7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLE1BQU0sVUFBVTtBQUFBLE1BQ2hCLGVBQWUsQ0FBQyxDQUFDO0FBQUEsTUFDakIsY0FBYztBQUFBLE1BQ2QsU0FBUztBQUFBLFFBQ0w7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFBWTtBQUFBLE1BQ2hCLE9BQU07QUFBQSxRQUNKLEVBQUMsTUFBSyxTQUFRO0FBQUEsTUFDaEI7QUFBQSxJQUNGO0FBQUEsSUFDQTtBQUFBLE1BQ0UsTUFBTTtBQUFBLE1BQ04sTUFBTSxVQUFVO0FBQUEsTUFDaEIsZUFBZSxDQUFDLEdBQUcsQ0FBQztBQUFBLE1BQ3BCLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFDQTtBQUFBLE1BQ0UsTUFBTTtBQUFBLE1BQ04sTUFBTSxVQUFVO0FBQUEsTUFDaEIsZUFBZSxDQUFDLEdBQUcsQ0FBQztBQUFBLE1BQ3BCLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFBRTtBQUFBLE1BQ0EsTUFBTTtBQUFBLE1BQ04sTUFBTSxVQUFVO0FBQUEsTUFDaEIsZUFBZSxDQUFDLENBQUM7QUFBQSxNQUNqQixjQUFjO0FBQUEsTUFDZCxTQUFTO0FBQUEsUUFDUDtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxJQUFFO0FBQUEsTUFDQSxNQUFNO0FBQUEsTUFDTixNQUFNLFVBQVU7QUFBQSxNQUNoQixlQUFlLENBQUMsQ0FBQztBQUFBLE1BQ2pCLGNBQWM7QUFBQSxNQUNkLFNBQVM7QUFBQSxRQUNQO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFPTyxNQUFNLGlDQUFxRTtBQUFBLElBQ2hGLEdBQUc7QUFBQSxNQUNELG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBLE1BQ3BCLFVBQVU7QUFBQTtBQUFBLElBRVo7QUFBQSxJQUNBLEdBQUc7QUFBQSxNQUNELG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBLE1BQ3BCLFVBQVU7QUFBQTtBQUFBLElBRVo7QUFBQSxJQUNBLEdBQUc7QUFBQSxNQUNELG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBLE1BQ3BCLFVBQVU7QUFBQTtBQUFBLElBRVo7QUFBQSxJQUNBLEdBQUc7QUFBQSxNQUNELG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBLE1BQ3BCLFVBQVU7QUFBQTtBQUFBLElBRVo7QUFBQSxJQUNBLEdBQUc7QUFBQSxNQUNELG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBO0FBQUEsSUFFdEI7QUFBQSxJQUNBLEtBQUs7QUFBQTtBQUFBLE1BRUgsbUJBQWtCO0FBQUEsTUFDbEIscUJBQW9CO0FBQUEsSUFDdEI7QUFBQSxJQUNBLEtBQUs7QUFBQSxNQUNILG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBO0FBQUEsSUFFdEI7QUFBQSxJQUNBLEtBQUs7QUFBQSxNQUNILG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBO0FBQUEsSUFFdEI7QUFBQSxJQUNBLEdBQUc7QUFBQTtBQUFBLE1BRUQsbUJBQWtCO0FBQUEsTUFDbEIscUJBQW9CO0FBQUEsSUFDdEI7QUFBQSxJQUNBLEtBQUs7QUFBQTtBQUFBLE1BRUgsbUJBQWtCO0FBQUEsTUFDbEIscUJBQW9CO0FBQUEsTUFDcEIsVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBLEdBQUc7QUFBQTtBQUFBLE1BRUQsbUJBQWtCO0FBQUEsTUFDbEIscUJBQW9CO0FBQUEsSUFDdEI7QUFBQSxJQUNBLEdBQUc7QUFBQTtBQUFBLE1BRUQsbUJBQWtCO0FBQUEsTUFDbEIscUJBQW9CO0FBQUEsTUFDcEIsVUFBUztBQUFBLElBQ1g7QUFBQSxJQUNBLEdBQUc7QUFBQSxNQUNELG1CQUFrQjtBQUFBLE1BQ2xCLHFCQUFvQjtBQUFBO0FBQUEsSUFFdEI7QUFBQSxFQUNGOzs7QUY3Uk8sTUFBTSxPQUFOLE1BQVc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTWhCO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQSxnQkFBcUM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtyQztBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0E7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVFBLGdCQUF5QjtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS3pCO0FBQUEsSUFFQTtBQUFBLElBQ0E7QUFBQSxJQUVBLGNBQWM7QUFDWixXQUFLLFFBQVEsRUFBRSxPQUFPLE9BQU8sTUFBTSxPQUFPLE9BQU8sT0FBTyxNQUFNLE1BQU07QUFDcEUsV0FBSyxjQUFjLEVBQUUsT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE1BQU0sTUFBTSxLQUFLO0FBQ3RFLFdBQUssU0FBUztBQUNkLFdBQUssYUFBYTtBQUNsQixXQUFLLGFBQWE7QUFDbEIsV0FBSyxPQUFPO0FBQ1osV0FBSyx1QkFBdUI7QUFBQSxJQUM5QjtBQUFBLElBRUEsUUFBUTtBQUNOLFVBQUksTUFBTTtBQUNWLFVBQUksS0FBSyxNQUFNO0FBQU8sZUFBTztBQUM3QixVQUFJLEtBQUssTUFBTTtBQUFNLGVBQU87QUFDNUIsVUFBSSxLQUFLLE1BQU07QUFBTyxlQUFPO0FBQzdCLFVBQUksS0FBSyxNQUFNO0FBQU0sZUFBTztBQUM1QixhQUFPO0FBQUEsSUFDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLGNBQWNJLFlBQW9FO0FBQ2hGLGNBQVFBLFlBQVc7QUFBQSxRQUNqQixLQUFLO0FBQ0gsaUJBQU8sS0FBSyxZQUFZO0FBQUEsUUFDMUIsS0FBSztBQUNILGlCQUFPLEtBQUssWUFBWTtBQUFBLFFBQzFCLEtBQUs7QUFDSCxpQkFBTyxLQUFLLFlBQVk7QUFBQSxRQUMxQixLQUFLO0FBQ0gsaUJBQU8sS0FBSyxZQUFZO0FBQUEsTUFDNUI7QUFBQSxJQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BLGNBQWM7QUFDWixVQUFJLEtBQUssWUFBWTtBQUNuQixlQUFPLFVBQVU7QUFBQSxNQUNuQjtBQUNBLFVBQUksS0FBSyxRQUFRO0FBQ2YsZUFBTyxVQUFVO0FBQUEsTUFDbkI7QUFDQSxVQUFJLEtBQUssWUFBWTtBQUNuQixlQUFPLFVBQVU7QUFBQSxNQUNuQjtBQUNBLGFBQU8sVUFBVTtBQUFBLElBQ25CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BLGdCQUFnQixjQUE0QjtBQUMxQyxVQUFJLEtBQUssa0JBQWtCLE1BQU07QUFDL0IsYUFBSyxnQkFBZ0I7QUFBQSxNQUN2QixPQUFPO0FBQ0wsZ0JBQVEsS0FBSywwQkFBMEI7QUFBQSxNQUN6QztBQUFBLElBQ0Y7QUFBQSxJQUVBLGtCQUFrQjtBQUNoQixhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsUUFBUUEsWUFBc0U7QUFFNUUsVUFBSSxLQUFLLGtCQUFrQixNQUFNO0FBQy9CLFlBQUksU0FBUyxzQkFBc0IsS0FBSyxjQUFjLFNBQVNBLFVBQVM7QUFDeEUsZUFBTztBQUFBLE1BQ1Q7QUFDQSxhQUFPO0FBQUEsSUFDVDtBQUFBLElBRUEsV0FBVyxVQUF3QjtBQUNqQyxVQUFJLEtBQUssZUFBZTtBQUV0QjtBQUFBLE1BQ0Y7QUFDQSxXQUFLLGdCQUFnQixRQUFRO0FBQzdCLFdBQUssZ0JBQWdCO0FBQUEsSUFDdkI7QUFBQSxJQUVBLG1CQUFtQixVQUFpRDtBQUNsRSxVQUFHLENBQUMsS0FBSyxlQUFjO0FBQ3JCLGdCQUFRLEtBQUssOEVBQThFO0FBQzNGO0FBQUEsTUFDRjtBQUVBLFVBQUksUUFBUSxLQUFLLE9BQU8sT0FBTyxDQUFDLFNBQVM7QUFDdkMsZUFBTyxLQUFLLFNBQVMsTUFBTSxTQUFTLEtBQUssS0FBSyxTQUFTLE1BQU0sU0FBUztBQUFBLE1BQ3hFLENBQUM7QUFFRCxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7OztBRHZLTyxNQUFNLGdCQUFOLE1BQW9CO0FBQUEsSUFDekI7QUFBQSxJQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BLE9BQWlCLENBQUMsQ0FBQyxDQUFDO0FBQUEsSUFFcEI7QUFBQSxJQUVBO0FBQUEsSUFDQTtBQUFBLElBRUEsWUFDRSxPQUNBLE9BQ0EsVUFBVSxNQUNWLG9CQUFvQixDQUFDLEdBQ3JCLGlDQUFpQyxNQUNqQztBQUNBLFdBQUssWUFBWTtBQUNqQixXQUFLLGFBQWE7QUFFbEIsV0FBSyxXQUFXO0FBQ2hCLFdBQUssY0FBYztBQUNuQixXQUFLLFlBQVk7QUFFakIsV0FBSyxlQUFlLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxVQUFVLEVBQUU7QUFBQSxJQUNoRDtBQUFBLElBRUEsY0FBYztBQUNaLFdBQUssT0FBTyxJQUFJLE1BQU0sS0FBSyxTQUFTO0FBRXBDLGVBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxXQUFXLEtBQUs7QUFDdkMsYUFBSyxLQUFLLENBQUMsSUFBSSxJQUFJLE1BQU0sS0FBSyxVQUFVO0FBQ3hDLGlCQUFTLElBQUksR0FBRyxJQUFJLEtBQUssWUFBWSxLQUFLO0FBQ3hDLGVBQUssS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksS0FBSztBQUFBLFFBQzdCO0FBQUEsTUFDRjtBQUNBLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVFBLFFBQVEsR0FBVyxHQUFpQjtBQUNsQyxhQUFPLEtBQUssS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUFBLElBQ3ZCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsV0FBVyxPQUFxQjtBQUM5QixhQUFPLEtBQUssU0FBUyxLQUFLO0FBQUEsSUFDNUI7QUFBQSxJQUVBLFlBQVksSUFBWSxJQUFZLElBQVksSUFBWUMsWUFBbUI7QUFDN0UsY0FBUUEsWUFBVztBQUFBLFFBQ2pCLEtBQUs7QUFDSCxlQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQVE7QUFDaEMsZUFBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxRQUFRLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRztBQUNyRCxlQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLFFBQVE7QUFDaEMsZUFBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxRQUFRLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRztBQUNyRDtBQUFBLFFBQ0YsS0FBSztBQUNILGVBQUssS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sT0FBTztBQUMvQixlQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxZQUFZLE9BQU8sRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHO0FBQ3BELGVBQUssS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sT0FBTztBQUMvQixlQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxZQUFZLE9BQU8sRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHO0FBQ3BEO0FBQUEsUUFDRixLQUFLO0FBQ0gsZUFBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxRQUFRO0FBQ2hDLGVBQUssS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLFlBQVksUUFBUSxFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUc7QUFDckQsZUFBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsTUFBTSxRQUFRO0FBQ2hDLGVBQUssS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFLFlBQVksUUFBUSxFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUc7QUFDckQ7QUFBQSxRQUNGLEtBQUs7QUFDSCxlQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLE9BQU87QUFDL0IsZUFBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxPQUFPLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRztBQUNwRCxlQUFLLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLE9BQU87QUFDL0IsZUFBSyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQUUsWUFBWSxPQUFPLEVBQUUsR0FBRyxJQUFJLEdBQUcsR0FBRztBQUNwRDtBQUFBLE1BQ0o7QUFBQSxJQUNGO0FBQUEsSUFFQSxtQkFBbUIsR0FBVyxHQUFXO0FBQ3ZDLGFBQU8sS0FBSyxLQUFLLElBQUksS0FBSyxhQUFhLEtBQUssS0FBSyxJQUFJLEtBQUs7QUFBQSxJQUM1RDtBQUFBLElBRUEsV0FBVztBQUNULFdBQUsseUJBQXlCLEdBQUcsQ0FBQztBQUNsQyxXQUFLLFFBQVEsS0FBSyxhQUFhLEdBQUcsS0FBSyxhQUFhLENBQUMsRUFBRSxTQUFTO0FBQ2hFLFdBQUssUUFBUSxHQUFHLENBQUMsRUFBRSxhQUFhO0FBQ2hDLGNBQVEsSUFBSSxZQUFZLEtBQUssYUFBYSxVQUFVO0FBQUEsSUFDdEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLHlCQUF5QixHQUFXLEdBQVcsY0FBd0IsQ0FBQyxHQUFHQyxZQUFXLEdBQUc7QUFDdkYsVUFBSSxDQUFDLGFBQWE7QUFDaEIsc0JBQWMsQ0FBQztBQUFBLE1BQ2pCO0FBQ0Esa0JBQVksS0FBSyxHQUFHLEtBQUssR0FBRztBQUU1QixZQUFNLGFBQWE7QUFBQSxRQUNqQixFQUFFLElBQUksSUFBSSxJQUFJLEdBQUcsV0FBVyxRQUFRO0FBQUEsUUFDcEMsRUFBRSxJQUFJLEdBQUcsSUFBSSxHQUFHLFdBQVcsUUFBUTtBQUFBLFFBQ25DLEVBQUUsSUFBSSxHQUFHLElBQUksSUFBSSxXQUFXLE9BQU87QUFBQSxRQUNuQyxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsV0FBVyxPQUFPO0FBQUEsTUFDcEM7QUFFQSxtQkFBYSxVQUFnQjtBQUU3QixZQUFNLGNBQWMsS0FBSyxRQUFRLEdBQUcsQ0FBQztBQUNyQyxrQkFBWSx1QkFBdUJBO0FBRW5DLFVBQUlBLFlBQVcsTUFBTSxHQUFHO0FBQ3RCLG9CQUFZLGFBQWE7QUFBQSxNQUMzQjtBQUVBLGlCQUFXLE9BQU8sWUFBWTtBQUM1QixZQUFJLENBQUM7QUFBSztBQUNWLGNBQU0sT0FBTyxJQUFJLElBQUk7QUFDckIsY0FBTSxPQUFPLElBQUksSUFBSTtBQUVyQixZQUFJLEtBQUssbUJBQW1CLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxTQUFTLEdBQUcsUUFBUSxNQUFNLEdBQUc7QUFDbkYsZUFBSyxZQUFZLEdBQUcsR0FBRyxNQUFNLE1BQU0sSUFBSSxTQUFTO0FBRWhELGNBQUlBLFlBQVcsS0FBSyxhQUFhLFVBQVU7QUFDekMsaUJBQUssYUFBYSxJQUFJO0FBQ3RCLGlCQUFLLGFBQWEsSUFBSTtBQUN0QixpQkFBSyxhQUFhLFdBQVdBO0FBQUEsVUFDL0I7QUFFQSxlQUFLLHlCQUF5QixNQUFNLE1BQU0sYUFBYUEsWUFBVyxDQUFDO0FBQUEsUUFDckU7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7OztBSWpLQTtBQUFBO0FBQUE7QUFBQTs7O0FDQUE7QUFBQTtBQUFBO0FBQUE7QUFLTyxNQUFNLE9BQU4sTUFBVztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNaEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTUE7QUFBQSxJQUVBLFlBQVksTUFBYyxRQUE4QixPQUFlO0FBRXJFLFVBQUcsQ0FBQyxRQUFPO0FBQ1QsY0FBTSxJQUFJLE1BQU0scUJBQXFCO0FBQUEsTUFDdkM7QUFFQSxVQUFHLENBQUMsUUFBUSxLQUFLLFVBQVUsR0FBRTtBQUMzQixjQUFNLElBQUksTUFBTSwwQkFBMEI7QUFBQSxNQUM1QztBQUVBLFdBQUssT0FBTztBQUNaLFdBQUssU0FBUztBQUNkLFdBQUssUUFBUTtBQUFBLElBQ2Y7QUFBQSxFQUVGOzs7QURsQ08sTUFBTSxVQUFOLE1BQWM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT25CO0FBQUEsSUFFQTtBQUFBLElBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBTUEsWUFBWSxhQUF5QixjQUEwQixrQkFBOEI7QUFFM0YsV0FBSyxnQkFBZ0I7QUFDckIsV0FBSyxvQkFBb0I7QUFFekIsV0FBSyxTQUFTLG9CQUFJLElBQUk7QUFFdEIsZUFBUSxJQUFJLEdBQUcsSUFBSSxZQUFZLFFBQVEsS0FBSztBQUMxQyxhQUFLLE9BQU87QUFBQSxVQUNWLElBQUksS0FBSyxZQUFZLENBQUMsRUFBRSxNQUFNLFlBQVksQ0FBQyxHQUFHLEtBQUssT0FBTyxJQUFJO0FBQUEsUUFDaEU7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLFFBQVEsT0FBcUI7QUFDM0IsYUFBTyxDQUFDLEdBQUcsS0FBSyxNQUFNLEVBQUUsS0FBSztBQUFBLElBQy9CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBT0EsY0FBYyxNQUFnQztBQUM1QyxhQUFPLENBQUMsR0FBRyxLQUFLLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsSUFBSTtBQUFBLElBQ3BEO0FBQUEsSUFFQSxhQUFhLGVBQXVCO0FBQ2xDLGFBQU8sS0FBSyxrQkFBa0IsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLGFBQWE7QUFBQSxJQUNwRTtBQUFBLElBRUEscUJBQXFCO0FBQ25CLGVBQVEsSUFBSSxHQUFHLElBQUksS0FBSyxrQkFBa0IsUUFBUSxLQUFLO0FBQ3JELGFBQUssa0JBQWtCLENBQUMsRUFBRSxzQkFBc0I7QUFBQSxNQUNsRDtBQUFBLElBQ0Y7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVFBLFlBQVksU0FBcUIsTUFBb0M7QUFDbkUsYUFBTyxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUUsU0FBUyxJQUFJO0FBQUEsSUFDNUM7QUFBQSxFQUdGOzs7QUUzRUE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDTyxXQUFTLGNBQWMsU0FBa0IsYUFBcUI7QUFDbkUsUUFBSSxpQkFBdUIsQ0FBQztBQUM1QixhQUFTLElBQUksR0FBRyxJQUFJLGFBQWEsS0FBSztBQUNwQyxxQkFBZSxLQUFLLENBQUMsQ0FBQztBQUN0QixlQUFTLElBQUksY0FBYyxHQUFHLEtBQUssR0FBRyxLQUFLO0FBQ3pDLHVCQUFlLENBQUMsRUFBRSxLQUFLLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUFBLE1BQ3RDO0FBQUEsSUFDRjtBQUNBLFdBQU87QUFBQSxFQUNUO0FBRU8sV0FBUyxrQkFBa0IsT0FBdUIsYUFBcUI7QUFDNUUsVUFBTSxRQUFRLE1BQU0sQ0FBQyxFQUFFO0FBQ3ZCLFVBQU0sU0FBUyxNQUFNO0FBRXJCLFFBQUksV0FBVyxvQkFBSSxJQUFJO0FBRXZCLGFBQVMsSUFBSSxHQUFHLEtBQUssU0FBUyxhQUFhLEtBQUs7QUFDOUMsZUFBUyxJQUFJLEdBQUcsS0FBSyxRQUFRLGFBQWEsS0FBSztBQUM3QyxZQUFJLGNBQWMsQ0FBQztBQUVuQixpQkFBUyxJQUFJLEdBQUcsSUFBSSxhQUFhLEtBQUs7QUFDcEMsY0FBSSxNQUFNLENBQUM7QUFDWCxtQkFBUyxJQUFJLEdBQUcsSUFBSSxhQUFhLEtBQUs7QUFDcEMsZ0JBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQUEsVUFDOUI7QUFDQSxzQkFBWSxLQUFLLEdBQUc7QUFBQSxRQUN0QjtBQUVBLFlBQUksaUJBQWdCO0FBU3BCLFlBQUksTUFBTSxLQUFLLFVBQVUsY0FBYztBQUVyQyxZQUFJLENBQUMsU0FBUyxJQUFJLEdBQUcsR0FBRztBQUN0QixtQkFBUyxJQUFJLEtBQUssRUFBRSxTQUFTLGdCQUFnQixRQUFRLEVBQUUsQ0FBQztBQUFBLFFBQzFELE9BQU87QUFDTCxjQUFJLFFBQVEsU0FBUyxJQUFJLEdBQUc7QUFDNUIsZ0JBQU0sVUFBVTtBQUNoQixtQkFBUyxJQUFJLEtBQUssS0FBSztBQUFBLFFBQ3pCO0FBQUEsTUFFSjtBQUFBLElBQ0Y7QUFFQSxXQUFPLE1BQU0sS0FBSyxTQUFTLE9BQU8sQ0FBQztBQUFBLEVBQ3JDO0FBRU8sV0FBUyxvQkFBb0IsT0FBdUIsYUFBcUI7QUFDOUUsVUFBTSxRQUFRLE1BQU0sQ0FBQyxFQUFFO0FBQ3ZCLFVBQU0sU0FBUyxNQUFNO0FBRXJCLFFBQUksV0FBVyxvQkFBSSxJQUFJO0FBRXZCLGFBQVMsSUFBSSxHQUFHLElBQUksUUFBUyxLQUFLO0FBQ2hDLGVBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxLQUFLO0FBQzlCLFlBQUksY0FBYyxDQUFDO0FBRW5CLGlCQUFTLElBQUksR0FBRyxJQUFJLGFBQWEsS0FBSztBQUNwQyxjQUFJLE1BQU0sQ0FBQztBQUNYLG1CQUFTLElBQUksR0FBRyxJQUFJLGFBQWEsS0FBSztBQUNwQyxnQkFBSSxLQUFLLE9BQU8sSUFBSSxLQUFJLE1BQU0sR0FBRyxJQUFJLEtBQUcsS0FBSyxDQUFDO0FBQUEsVUFDaEQ7QUFDQSxzQkFBWSxLQUFLLEdBQUc7QUFBQSxRQUN0QjtBQUVBLFlBQUksaUJBQWdCO0FBU2xCLFlBQUksTUFBTSxLQUFLLFVBQVUsY0FBYztBQUV2QyxZQUFJLENBQUMsU0FBUyxJQUFJLEdBQUcsR0FBRztBQUN0QixtQkFBUyxJQUFJLEtBQUssRUFBRSxTQUFTLGdCQUFnQixRQUFRLEVBQUUsQ0FBQztBQUFBLFFBQzFELE9BQU87QUFDTCxjQUFJLFFBQVEsU0FBUyxJQUFJLEdBQUc7QUFDNUIsZ0JBQU0sVUFBVTtBQUNoQixtQkFBUyxJQUFJLEtBQUssS0FBSztBQUFBLFFBQ3pCO0FBQUEsTUFFSjtBQUFBLElBQ0Y7QUFFQSxXQUFPLE1BQU0sS0FBSyxTQUFTLE9BQU8sQ0FBQztBQUFBLEVBQ3JDO0FBRU8sV0FBUyxrQkFBa0IsT0FBdUIsYUFBcUI7QUFDNUUsVUFBTSxRQUFRLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUMxQixVQUFNLFNBQVMsTUFBTSxDQUFDLEVBQUU7QUFDeEIsVUFBTSxRQUFRLE1BQU07QUFFcEIsUUFBSSxXQUFXLG9CQUFJLElBQUk7QUFFdkIsYUFBUyxJQUFJLEdBQUcsS0FBSyxRQUFRLGFBQWEsS0FBSztBQUM3QyxlQUFTLElBQUksR0FBRyxLQUFLLFNBQVMsYUFBYSxLQUFLO0FBQzlDLGlCQUFTLElBQUksR0FBRyxLQUFLLFFBQVEsYUFBYSxLQUFLO0FBQzdDLGNBQUksVUFBVSxDQUFDO0FBRWYsbUJBQVMsSUFBSSxHQUFHLElBQUksYUFBYSxLQUFLO0FBQ3BDLGdCQUFJLFFBQVEsQ0FBQztBQUNiLHFCQUFTLElBQUksR0FBRyxJQUFJLGFBQWEsS0FBSztBQUNwQyxrQkFBSSxNQUFNLENBQUM7QUFDWCx1QkFBUyxJQUFJLEdBQUcsSUFBSSxhQUFhLEtBQUs7QUFDcEMsb0JBQUksS0FBSyxNQUFNLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQUEsY0FDckM7QUFDQSxvQkFBTSxLQUFLLEdBQUc7QUFBQSxZQUNoQjtBQUNBLG9CQUFRLEtBQUssS0FBSztBQUFBLFVBQ3BCO0FBRUEsY0FBSSxNQUFNLEtBQUssVUFBVSxPQUFPO0FBRWhDLGNBQUksQ0FBQyxTQUFTLElBQUksR0FBRyxHQUFHO0FBQ3RCLHFCQUFTLElBQUksS0FBSyxFQUFFLFNBQWtCLE9BQU8sRUFBRSxDQUFDO0FBQUEsVUFDbEQsT0FBTztBQUNMLGdCQUFJLFFBQVEsU0FBUyxJQUFJLEdBQUc7QUFDNUIsa0JBQU0sU0FBUztBQUNmLHFCQUFTLElBQUksS0FBSyxLQUFLO0FBQUEsVUFDekI7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRU8sV0FBUyxpQkFBaUIsVUFBMEIsVUFBbUI7QUFDNUUsVUFBTUMsUUFBTyxTQUFTO0FBR3RCLFFBQUksV0FBVztBQUNmLGFBQVMsSUFBSSxHQUFHLElBQUlBLE9BQU0sS0FBSztBQUU3QixVQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxTQUFTLENBQUMsRUFBRUEsUUFBTyxDQUFDLEdBQUc7QUFDNUMsbUJBQVc7QUFDWDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0EsUUFBSSxjQUFjO0FBQ2xCLGFBQVMsSUFBSSxHQUFHLElBQUlBLE9BQU0sS0FBSztBQUM3QixVQUFJLFNBQVMsQ0FBQyxFQUFFQSxRQUFPLENBQUMsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUc7QUFDNUMsc0JBQWM7QUFDZDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0EsUUFBSSxZQUFZO0FBQ2hCLGFBQVMsSUFBSSxHQUFHLElBQUlBLE9BQU0sS0FBSztBQUM3QixVQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxTQUFTQSxRQUFPLENBQUMsRUFBRSxDQUFDLEdBQUc7QUFDNUMsb0JBQVk7QUFDWjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBR0EsUUFBSSxhQUFhO0FBQ2pCLGFBQVMsSUFBSSxHQUFHLElBQUlBLE9BQU0sS0FBSztBQUM3QixVQUFJLFNBQVNBLFFBQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFDLEdBQUc7QUFDNUMscUJBQWE7QUFDYjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBRUEsV0FBTyxFQUFFLE9BQU8sVUFBVSxPQUFPLGFBQWEsTUFBTSxXQUFXLE1BQU0sV0FBVztBQUFBLEVBQ2xGOzs7QUQvS08sTUFBTSxhQUFOLE1BQWlCO0FBQUEsSUFDdEIsWUFBWSxvQkFBSSxJQUFJO0FBQUEsSUFFcEIsY0FBYztBQUNaLFdBQUssVUFBVSxJQUFJLEtBQUs7QUFBQSxRQUN0QixDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUNoQixDQUFDO0FBQ0QsV0FBSyxVQUFVLElBQUksS0FBSyxjQUFjLEtBQUssVUFBVSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDakUsV0FBSyxVQUFVLElBQUksS0FBSyxjQUFjLEtBQUssVUFBVSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDakUsV0FBSyxVQUFVLElBQUksS0FBSyxjQUFjLEtBQUssVUFBVSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFFakUsV0FBSyxVQUFVLElBQUksTUFBTTtBQUFBLFFBQ3ZCLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQ2hCLENBQUM7QUFDRCxXQUFLLFVBQVUsSUFBSSxNQUFNLGNBQWMsS0FBSyxVQUFVLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNuRSxXQUFLLFVBQVUsSUFBSSxNQUFNLGNBQWMsS0FBSyxVQUFVLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNuRSxXQUFLLFVBQVUsSUFBSSxNQUFNLGNBQWMsS0FBSyxVQUFVLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztBQUVuRSxXQUFLLFVBQVUsSUFBSSxNQUFNO0FBQUEsUUFDdkIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsTUFDaEIsQ0FBQztBQUNELFdBQUssVUFBVSxJQUFJLE1BQU0sY0FBYyxLQUFLLFVBQVUsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBRW5FLFdBQUssVUFBVSxJQUFJLE9BQU87QUFBQSxRQUN4QixDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxNQUNoQixDQUFDO0FBQ0QsV0FBSyxVQUFVLElBQUksT0FBTyxjQUFjLEtBQUssVUFBVSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDckUsV0FBSyxVQUFVLElBQUksT0FBTyxjQUFjLEtBQUssVUFBVSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDckUsV0FBSyxVQUFVLElBQUksT0FBTyxjQUFjLEtBQUssVUFBVSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFFckUsV0FBSyxVQUFVLElBQUksUUFBUTtBQUFBLFFBQ3pCLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLFFBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQSxRQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQUEsUUFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQ2hCLENBQUM7QUFBQSxJQUNIO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBUUEsSUFBSSxLQUF5QjtBQUMzQixVQUFJLEtBQUssVUFBVSxJQUFJLEdBQUcsR0FBRztBQUMzQixlQUFPLEtBQUssVUFBVSxJQUFJLEdBQUc7QUFBQSxNQUMvQixPQUFLO0FBQ0QsY0FBTSxJQUFJLE1BQU0sa0NBQWtDLEtBQUs7QUFBQSxNQUMzRDtBQUFBLElBQ0Y7QUFBQSxFQUNGOzs7QUV0RUE7QUFBQTtBQUFBO0FBQUE7OztBQ0FBO0FBQUE7QUFBQTtBQUFBOzs7QUNBQTtBQUFBO0FBQUE7QUFBQTs7O0FDYU8sTUFBZSxlQUFmLE1BQTRCO0FBQUEsSUFHekIsb0JBQStFLENBQUM7QUFBQSxJQUNoRixhQUE0QixDQUFDO0FBQUEsSUFFckMsbUJBQW1CLGFBQXFCLFNBQXdDO0FBQzlFLFVBQUksQ0FBQyxLQUFLLGtCQUFrQixXQUFXLEdBQUc7QUFDeEMsYUFBSyxrQkFBa0IsV0FBVyxJQUFJLENBQUM7QUFBQSxNQUN6QztBQUVBLFdBQUssa0JBQWtCLFdBQVcsRUFBRSxLQUFLLE9BQU87QUFBQSxJQUNsRDtBQUFBLElBRUEsZ0JBQWdCLGFBQXFCLFFBQWEsTUFBa0I7QUFDbEUsVUFBSSxLQUFLLHFCQUFxQixLQUFLLGtCQUFrQixXQUFXLEdBQUc7QUFDakUsYUFBSyxrQkFBa0IsV0FBVyxFQUFFLFFBQVEsQ0FBQyxZQUFZO0FBQ3ZELGlCQUFPLENBQUMsS0FBSyxHQUFHLElBQUk7QUFDcEIsZ0JBQU0sUUFBUSxNQUFNLE1BQU0sSUFBSTtBQUFBLFFBQ2hDLENBQUM7QUFBQSxNQUNIO0FBQ0EsYUFBTztBQUFBLElBQ1Q7QUFBQSxJQUVBLGFBQWEsYUFBMkI7QUFDdEMsVUFBSSxDQUFDLEtBQUsscUJBQXFCLENBQUMsS0FBSyxrQkFBa0IsV0FBVyxHQUFHO0FBQ25FLGNBQU0sbUJBQW1CLEtBQUssV0FBVztBQUd6QyxhQUFLLFdBQVcsSUFBSSxJQUFJLFNBQWdCO0FBQ3RDLGdCQUFNLE1BQU0saUJBQWlCLE1BQU0sTUFBTSxJQUFJO0FBQzdDLGlCQUFPLEtBQUssZ0JBQWdCLGFBQWEsS0FBSyxHQUFHLElBQUk7QUFBQSxRQUN2RDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsSUFFQSxZQUFZLFVBQWtDO0FBQzVDLFlBQU0sZ0JBQWdCLEVBQUUsR0FBRyxTQUFTO0FBRXBDLFlBQU0sT0FBTyxjQUFjO0FBRTNCLGFBQU8sY0FBYztBQUVyQixvQkFBYyxXQUFZLE1BQU0sSUFBSTtBQUVwQyxhQUFPLGNBQWM7QUFFckIsYUFBTyxLQUFLLGFBQWEsRUFBRSxRQUFRLENBQUMsUUFBUTtBQUMxQyxhQUFLLGFBQWEsR0FBRztBQUNyQixhQUFLLG1CQUFtQixLQUFLLGNBQWMsR0FBRyxDQUFDO0FBQUEsTUFDakQsQ0FBQztBQUVELFdBQUssV0FBVyxLQUFLLElBQUs7QUFFMUIsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGOzs7QUM3RE8sTUFBZSxjQUFmLGNBQW1DLGFBQTZCO0FBQUEsSUFFckU7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0EsV0FBc0IsRUFBQyxHQUFFLEdBQUcsR0FBRSxFQUFDO0FBQUEsSUFFL0IsWUFBWSxTQUFjLFVBQVUsV0FBb0IsRUFBQyxHQUFFLEdBQUcsR0FBRSxFQUFDLEdBQUc7QUFDbEUsWUFBTTtBQUNOLFdBQUssS0FBSyxDQUFDLG9CQUFJLEtBQUs7QUFDcEIsV0FBSyxTQUFTO0FBQ2QsV0FBSyxPQUFPO0FBQ1osV0FBSyxPQUFPO0FBQ1osV0FBSyxjQUFjO0FBQ25CLFdBQUssU0FBUztBQUNkLFdBQUssV0FBVztBQUFBLElBQ2xCO0FBQUEsSUFFQSxTQUFnQjtBQUFFLGFBQU87QUFBQSxJQUFFO0FBQUEsSUFFM0IsYUFBb0I7QUFBRSxhQUFPO0FBQUEsSUFBRTtBQUFBLElBRS9CLFFBQWU7QUFBQyxhQUFPO0FBQUEsSUFBRTtBQUFBLElBRXpCLFNBQVMsS0FBYyxHQUFVLEdBQVUsR0FBVTtBQUFBLElBQUM7QUFBQSxJQUV0RCxTQUFRO0FBQUEsSUFBQztBQUFBLElBRVQsT0FBTztBQUFBLElBQUM7QUFBQSxJQUVSLFFBQVE7QUFBQSxJQUFDO0FBQUEsSUFFVCxVQUFVO0FBQUEsSUFBQztBQUFBLElBRVgsVUFBVTtBQUFBLElBQUM7QUFBQSxJQUVYLE9BQWU7QUFDYixhQUFPO0FBQUEsSUFDVDtBQUFBLElBRUEsV0FBWTtBQUNWLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjs7O0FDdENBLE1BQUlDLGlCQUFnQixTQUFTLEdBQUcsR0FBRztBQUNqQyxJQUFBQSxpQkFBZ0IsT0FBTyxrQkFDbEIsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLFNBQVMsU0FBVUMsSUFBR0MsSUFBRztBQUFFLE1BQUFELEdBQUUsWUFBWUM7QUFBQSxJQUFHLEtBQzFFLFNBQVVELElBQUdDLElBQUc7QUFBRSxlQUFTLEtBQUtBO0FBQUcsWUFBSSxPQUFPLFVBQVUsZUFBZSxLQUFLQSxJQUFHLENBQUM7QUFBRyxVQUFBRCxHQUFFLENBQUMsSUFBSUMsR0FBRSxDQUFDO0FBQUEsSUFBRztBQUNwRyxXQUFPRixlQUFjLEdBQUcsQ0FBQztBQUFBLEVBQzNCO0FBRU8sV0FBU0csV0FBVSxHQUFHLEdBQUc7QUFDOUIsUUFBSSxPQUFPLE1BQU0sY0FBYyxNQUFNO0FBQ2pDLFlBQU0sSUFBSSxVQUFVLHlCQUF5QixPQUFPLENBQUMsSUFBSSwrQkFBK0I7QUFDNUYsSUFBQUgsZUFBYyxHQUFHLENBQUM7QUFDbEIsYUFBUyxLQUFLO0FBQUUsV0FBSyxjQUFjO0FBQUEsSUFBRztBQUN0QyxNQUFFLFlBQVksTUFBTSxPQUFPLE9BQU8sT0FBTyxDQUFDLEtBQUssR0FBRyxZQUFZLEVBQUUsV0FBVyxJQUFJLEdBQUc7QUFBQSxFQUNwRjtBQTJJTyxXQUFTSSxVQUFTLEdBQUc7QUFDMUIsUUFBSSxJQUFJLE9BQU8sV0FBVyxjQUFjLE9BQU8sVUFBVSxJQUFJLEtBQUssRUFBRSxDQUFDLEdBQUcsSUFBSTtBQUM1RSxRQUFJO0FBQUcsYUFBTyxFQUFFLEtBQUssQ0FBQztBQUN0QixRQUFJLEtBQUssT0FBTyxFQUFFLFdBQVc7QUFBVSxhQUFPO0FBQUEsUUFDMUMsTUFBTSxXQUFZO0FBQ2QsY0FBSSxLQUFLLEtBQUssRUFBRTtBQUFRLGdCQUFJO0FBQzVCLGlCQUFPLEVBQUUsT0FBTyxLQUFLLEVBQUUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFO0FBQUEsUUFDMUM7QUFBQSxNQUNKO0FBQ0EsVUFBTSxJQUFJLFVBQVUsSUFBSSw0QkFBNEIsaUNBQWlDO0FBQUEsRUFDdkY7QUFFTyxXQUFTQyxRQUFPLEdBQUcsR0FBRztBQUMzQixRQUFJLElBQUksT0FBTyxXQUFXLGNBQWMsRUFBRSxPQUFPLFFBQVE7QUFDekQsUUFBSSxDQUFDO0FBQUcsYUFBTztBQUNmLFFBQUksSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUc7QUFDL0IsUUFBSTtBQUNBLGNBQVEsTUFBTSxVQUFVLE1BQU0sTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEdBQUc7QUFBTSxXQUFHLEtBQUssRUFBRSxLQUFLO0FBQUEsSUFDN0UsU0FDTyxPQUFQO0FBQWdCLFVBQUksRUFBRSxNQUFhO0FBQUEsSUFBRyxVQUN0QztBQUNJLFVBQUk7QUFDQSxZQUFJLEtBQUssQ0FBQyxFQUFFLFNBQVMsSUFBSSxFQUFFLFFBQVE7QUFBSSxZQUFFLEtBQUssQ0FBQztBQUFBLE1BQ25ELFVBQ0E7QUFBVSxZQUFJO0FBQUcsZ0JBQU0sRUFBRTtBQUFBLE1BQU87QUFBQSxJQUNwQztBQUNBLFdBQU87QUFBQSxFQUNUO0FBa0JPLFdBQVMsY0FBYyxJQUFJLE1BQU0sTUFBTTtBQUM1QyxRQUFJLFFBQVEsVUFBVSxXQUFXO0FBQUcsZUFBUyxJQUFJLEdBQUdDLEtBQUksS0FBSyxRQUFRLElBQUksSUFBSUEsSUFBRyxLQUFLO0FBQ2pGLFlBQUksTUFBTSxFQUFFLEtBQUssT0FBTztBQUNwQixjQUFJLENBQUM7QUFBSSxpQkFBSyxNQUFNLFVBQVUsTUFBTSxLQUFLLE1BQU0sR0FBRyxDQUFDO0FBQ25ELGFBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQztBQUFBLFFBQ2xCO0FBQUEsTUFDSjtBQUNBLFdBQU8sR0FBRyxPQUFPLE1BQU0sTUFBTSxVQUFVLE1BQU0sS0FBSyxJQUFJLENBQUM7QUFBQSxFQUN6RDs7O0FDek5NLFdBQVUsV0FBVyxPQUFVO0FBQ25DLFdBQU8sT0FBTyxVQUFVO0VBQzFCOzs7QUNHTSxXQUFVLGlCQUFvQixZQUFnQztBQUNsRSxRQUFNLFNBQVMsU0FBQ0MsV0FBYTtBQUMzQixZQUFNLEtBQUtBLFNBQVE7QUFDbkIsTUFBQUEsVUFBUyxRQUFRLElBQUksTUFBSyxFQUFHO0lBQy9CO0FBRUEsUUFBTSxXQUFXLFdBQVcsTUFBTTtBQUNsQyxhQUFTLFlBQVksT0FBTyxPQUFPLE1BQU0sU0FBUztBQUNsRCxhQUFTLFVBQVUsY0FBYztBQUNqQyxXQUFPO0VBQ1Q7OztBQ0RPLE1BQU0sc0JBQStDLGlCQUMxRCxTQUFDLFFBQU07QUFDTCxXQUFBLFNBQVMsd0JBQW1DLFFBQTBCO0FBQ3BFLGFBQU8sSUFBSTtBQUNYLFdBQUssVUFBVSxTQUNSLE9BQU8sU0FBTSw4Q0FDeEIsT0FBTyxJQUFJLFNBQUMsS0FBSyxHQUFDO0FBQUssZUFBRyxJQUFJLElBQUMsT0FBSyxJQUFJLFNBQVE7TUFBekIsQ0FBNkIsRUFBRSxLQUFLLE1BQU0sSUFDekQ7QUFDSixXQUFLLE9BQU87QUFDWixXQUFLLFNBQVM7SUFDaEI7RUFSQSxDQVFDOzs7QUN2QkMsV0FBVSxVQUFhLEtBQTZCLE1BQU87QUFDL0QsUUFBSSxLQUFLO0FBQ1AsVUFBTSxRQUFRLElBQUksUUFBUSxJQUFJO0FBQzlCLFdBQUssU0FBUyxJQUFJLE9BQU8sT0FBTyxDQUFDOztFQUVyQzs7O0FDT0EsTUFBQSxlQUFBLFdBQUE7QUF5QkUsYUFBQUMsY0FBb0IsaUJBQTRCO0FBQTVCLFdBQUEsa0JBQUE7QUFkYixXQUFBLFNBQVM7QUFFUixXQUFBLGFBQW1EO0FBTW5ELFdBQUEsY0FBcUQ7SUFNVjtBQVFuRCxJQUFBQSxjQUFBLFVBQUEsY0FBQSxXQUFBOztBQUNFLFVBQUk7QUFFSixVQUFJLENBQUMsS0FBSyxRQUFRO0FBQ2hCLGFBQUssU0FBUztBQUdOLFlBQUEsYUFBZSxLQUFJO0FBQzNCLFlBQUksWUFBWTtBQUNkLGVBQUssYUFBYTtBQUNsQixjQUFJLE1BQU0sUUFBUSxVQUFVLEdBQUc7O0FBQzdCLHVCQUFxQixlQUFBQyxVQUFBLFVBQVUsR0FBQSxpQkFBQSxhQUFBLEtBQUEsR0FBQSxDQUFBLGVBQUEsTUFBQSxpQkFBQSxhQUFBLEtBQUEsR0FBRTtBQUE1QixvQkFBTSxXQUFNLGVBQUE7QUFDZix5QkFBTyxPQUFPLElBQUk7Ozs7Ozs7Ozs7Ozs7aUJBRWY7QUFDTCx1QkFBVyxPQUFPLElBQUk7OztBQUlsQixZQUFpQixtQkFBcUIsS0FBSTtBQUNsRCxZQUFJLFdBQVcsZ0JBQWdCLEdBQUc7QUFDaEMsY0FBSTtBQUNGLDZCQUFnQjttQkFDVCxHQUFQO0FBQ0EscUJBQVMsYUFBYSxzQkFBc0IsRUFBRSxTQUFTLENBQUMsQ0FBQzs7O0FBSXJELFlBQUEsY0FBZ0IsS0FBSTtBQUM1QixZQUFJLGFBQWE7QUFDZixlQUFLLGNBQWM7O0FBQ25CLHFCQUF3QixnQkFBQUEsVUFBQSxXQUFXLEdBQUEsa0JBQUEsY0FBQSxLQUFBLEdBQUEsQ0FBQSxnQkFBQSxNQUFBLGtCQUFBLGNBQUEsS0FBQSxHQUFFO0FBQWhDLGtCQUFNLFlBQVMsZ0JBQUE7QUFDbEIsa0JBQUk7QUFDRiw4QkFBYyxTQUFTO3VCQUNoQixLQUFQO0FBQ0EseUJBQVMsV0FBTSxRQUFOLFdBQU0sU0FBTixTQUFVLENBQUE7QUFDbkIsb0JBQUksZUFBZSxxQkFBcUI7QUFDdEMsMkJBQU0sY0FBQSxjQUFBLENBQUEsR0FBQUMsUUFBTyxNQUFNLENBQUEsR0FBQUEsUUFBSyxJQUFJLE1BQU0sQ0FBQTt1QkFDN0I7QUFDTCx5QkFBTyxLQUFLLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7QUFNdkIsWUFBSSxRQUFRO0FBQ1YsZ0JBQU0sSUFBSSxvQkFBb0IsTUFBTTs7O0lBRzFDO0FBb0JBLElBQUFGLGNBQUEsVUFBQSxNQUFBLFNBQUksVUFBdUI7O0FBR3pCLFVBQUksWUFBWSxhQUFhLE1BQU07QUFDakMsWUFBSSxLQUFLLFFBQVE7QUFHZix3QkFBYyxRQUFRO2VBQ2pCO0FBQ0wsY0FBSSxvQkFBb0JBLGVBQWM7QUFHcEMsZ0JBQUksU0FBUyxVQUFVLFNBQVMsV0FBVyxJQUFJLEdBQUc7QUFDaEQ7O0FBRUYscUJBQVMsV0FBVyxJQUFJOztBQUUxQixXQUFDLEtBQUssZUFBYyxLQUFBLEtBQUssaUJBQVcsUUFBQSxPQUFBLFNBQUEsS0FBSSxDQUFBLEdBQUksS0FBSyxRQUFROzs7SUFHL0Q7QUFPUSxJQUFBQSxjQUFBLFVBQUEsYUFBUixTQUFtQixRQUFvQjtBQUM3QixVQUFBLGFBQWUsS0FBSTtBQUMzQixhQUFPLGVBQWUsVUFBVyxNQUFNLFFBQVEsVUFBVSxLQUFLLFdBQVcsU0FBUyxNQUFNO0lBQzFGO0FBU1EsSUFBQUEsY0FBQSxVQUFBLGFBQVIsU0FBbUIsUUFBb0I7QUFDN0IsVUFBQSxhQUFlLEtBQUk7QUFDM0IsV0FBSyxhQUFhLE1BQU0sUUFBUSxVQUFVLEtBQUssV0FBVyxLQUFLLE1BQU0sR0FBRyxjQUFjLGFBQWEsQ0FBQyxZQUFZLE1BQU0sSUFBSTtJQUM1SDtBQU1RLElBQUFBLGNBQUEsVUFBQSxnQkFBUixTQUFzQixRQUFvQjtBQUNoQyxVQUFBLGFBQWUsS0FBSTtBQUMzQixVQUFJLGVBQWUsUUFBUTtBQUN6QixhQUFLLGFBQWE7aUJBQ1QsTUFBTSxRQUFRLFVBQVUsR0FBRztBQUNwQyxrQkFBVSxZQUFZLE1BQU07O0lBRWhDO0FBZ0JBLElBQUFBLGNBQUEsVUFBQSxTQUFBLFNBQU8sVUFBc0M7QUFDbkMsVUFBQSxjQUFnQixLQUFJO0FBQzVCLHFCQUFlLFVBQVUsYUFBYSxRQUFRO0FBRTlDLFVBQUksb0JBQW9CQSxlQUFjO0FBQ3BDLGlCQUFTLGNBQWMsSUFBSTs7SUFFL0I7QUFsTGMsSUFBQUEsY0FBQSxRQUFTLFdBQUE7QUFDckIsVUFBTSxRQUFRLElBQUlBLGNBQVk7QUFDOUIsWUFBTSxTQUFTO0FBQ2YsYUFBTztJQUNULEVBQUU7QUErS0osV0FBQUE7SUFyTEE7QUF1TE8sTUFBTSxxQkFBcUIsYUFBYTtBQUV6QyxXQUFVLGVBQWUsT0FBVTtBQUN2QyxXQUNFLGlCQUFpQixnQkFDaEIsU0FBUyxZQUFZLFNBQVMsV0FBVyxNQUFNLE1BQU0sS0FBSyxXQUFXLE1BQU0sR0FBRyxLQUFLLFdBQVcsTUFBTSxXQUFXO0VBRXBIO0FBRUEsV0FBUyxjQUFjLFdBQXdDO0FBQzdELFFBQUksV0FBVyxTQUFTLEdBQUc7QUFDekIsZ0JBQVM7V0FDSjtBQUNMLGdCQUFVLFlBQVc7O0VBRXpCOzs7QUNoTk8sTUFBTSxTQUF1QjtJQUNsQyxrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLFNBQVM7SUFDVCx1Q0FBdUM7SUFDdkMsMEJBQTBCOzs7O0FDR3JCLE1BQU0sa0JBQW1DO0lBRzlDLFlBQUEsU0FBVyxTQUFxQixTQUFnQjtBQUFFLFVBQUEsT0FBQSxDQUFBO2VBQUEsS0FBQSxHQUFBLEtBQUEsVUFBQSxRQUFBLE1BQU87QUFBUCxhQUFBLEtBQUEsQ0FBQSxJQUFBLFVBQUEsRUFBQTs7QUFDeEMsVUFBQSxXQUFhLGdCQUFlO0FBQ3BDLFVBQUksYUFBUSxRQUFSLGFBQVEsU0FBQSxTQUFSLFNBQVUsWUFBWTtBQUN4QixlQUFPLFNBQVMsV0FBVSxNQUFuQixVQUFRLGNBQUEsQ0FBWSxTQUFTLE9BQU8sR0FBQUcsUUFBSyxJQUFJLENBQUEsQ0FBQTs7QUFFdEQsYUFBTyxXQUFVLE1BQUEsUUFBQSxjQUFBLENBQUMsU0FBUyxPQUFPLEdBQUFBLFFBQUssSUFBSSxDQUFBLENBQUE7SUFDN0M7SUFDQSxjQUFBLFNBQWEsUUFBTTtBQUNULFVBQUEsV0FBYSxnQkFBZTtBQUNwQyxlQUFRLGFBQVEsUUFBUixhQUFRLFNBQUEsU0FBUixTQUFVLGlCQUFnQixjQUFjLE1BQWE7SUFDL0Q7SUFDQSxVQUFVOzs7O0FDakJOLFdBQVUscUJBQXFCLEtBQVE7QUFDM0Msb0JBQWdCLFdBQVcsV0FBQTtBQUNqQixVQUFBLG1CQUFxQixPQUFNO0FBQ25DLFVBQUksa0JBQWtCO0FBRXBCLHlCQUFpQixHQUFHO2FBQ2Y7QUFFTCxjQUFNOztJQUVWLENBQUM7RUFDSDs7O0FDdEJNLFdBQVUsT0FBSTtFQUFLOzs7QUNNbEIsTUFBTSx3QkFBeUIsV0FBQTtBQUFNLFdBQUEsbUJBQW1CLEtBQUssUUFBVyxNQUFTO0VBQTVDLEVBQXNFO0FBTzVHLFdBQVUsa0JBQWtCLE9BQVU7QUFDMUMsV0FBTyxtQkFBbUIsS0FBSyxRQUFXLEtBQUs7RUFDakQ7QUFPTSxXQUFVLGlCQUFvQixPQUFRO0FBQzFDLFdBQU8sbUJBQW1CLEtBQUssT0FBTyxNQUFTO0VBQ2pEO0FBUU0sV0FBVSxtQkFBbUIsTUFBdUIsT0FBWSxPQUFVO0FBQzlFLFdBQU87TUFDTDtNQUNBO01BQ0E7O0VBRUo7OztBQ3JDQSxNQUFJLFVBQXVEO0FBU3JELFdBQVUsYUFBYSxJQUFjO0FBQ3pDLFFBQUksT0FBTyx1Q0FBdUM7QUFDaEQsVUFBTSxTQUFTLENBQUM7QUFDaEIsVUFBSSxRQUFRO0FBQ1Ysa0JBQVUsRUFBRSxhQUFhLE9BQU8sT0FBTyxLQUFJOztBQUU3QyxTQUFFO0FBQ0YsVUFBSSxRQUFRO0FBQ0osWUFBQSxLQUF5QixTQUF2QixjQUFXLEdBQUEsYUFBRSxRQUFLLEdBQUE7QUFDMUIsa0JBQVU7QUFDVixZQUFJLGFBQWE7QUFDZixnQkFBTTs7O1dBR0w7QUFHTCxTQUFFOztFQUVOO0FBTU0sV0FBVSxhQUFhLEtBQVE7QUFDbkMsUUFBSSxPQUFPLHlDQUF5QyxTQUFTO0FBQzNELGNBQVEsY0FBYztBQUN0QixjQUFRLFFBQVE7O0VBRXBCOzs7QUNyQkEsTUFBQSxhQUFBLFNBQUEsUUFBQTtBQUFtQyxJQUFBQyxXQUFBQyxhQUFBLE1BQUE7QUE2QmpDLGFBQUFBLFlBQVksYUFBNkM7QUFBekQsVUFBQSxRQUNFLE9BQUEsS0FBQSxJQUFBLEtBQU87QUFUQyxZQUFBLFlBQXFCO0FBVTdCLFVBQUksYUFBYTtBQUNmLGNBQUssY0FBYztBQUduQixZQUFJLGVBQWUsV0FBVyxHQUFHO0FBQy9CLHNCQUFZLElBQUksS0FBSTs7YUFFakI7QUFDTCxjQUFLLGNBQWM7OztJQUV2QjtBQXpCTyxJQUFBQSxZQUFBLFNBQVAsU0FBaUIsTUFBd0IsT0FBMkIsVUFBcUI7QUFDdkYsYUFBTyxJQUFJLGVBQWUsTUFBTSxPQUFPLFFBQVE7SUFDakQ7QUFnQ0EsSUFBQUEsWUFBQSxVQUFBLE9BQUEsU0FBSyxPQUFTO0FBQ1osVUFBSSxLQUFLLFdBQVc7QUFDbEIsa0NBQTBCLGlCQUFpQixLQUFLLEdBQUcsSUFBSTthQUNsRDtBQUNMLGFBQUssTUFBTSxLQUFNOztJQUVyQjtBQVNBLElBQUFBLFlBQUEsVUFBQSxRQUFBLFNBQU0sS0FBUztBQUNiLFVBQUksS0FBSyxXQUFXO0FBQ2xCLGtDQUEwQixrQkFBa0IsR0FBRyxHQUFHLElBQUk7YUFDakQ7QUFDTCxhQUFLLFlBQVk7QUFDakIsYUFBSyxPQUFPLEdBQUc7O0lBRW5CO0FBUUEsSUFBQUEsWUFBQSxVQUFBLFdBQUEsV0FBQTtBQUNFLFVBQUksS0FBSyxXQUFXO0FBQ2xCLGtDQUEwQix1QkFBdUIsSUFBSTthQUNoRDtBQUNMLGFBQUssWUFBWTtBQUNqQixhQUFLLFVBQVM7O0lBRWxCO0FBRUEsSUFBQUEsWUFBQSxVQUFBLGNBQUEsV0FBQTtBQUNFLFVBQUksQ0FBQyxLQUFLLFFBQVE7QUFDaEIsYUFBSyxZQUFZO0FBQ2pCLGVBQUEsVUFBTSxZQUFXLEtBQUEsSUFBQTtBQUNqQixhQUFLLGNBQWM7O0lBRXZCO0FBRVUsSUFBQUEsWUFBQSxVQUFBLFFBQVYsU0FBZ0IsT0FBUTtBQUN0QixXQUFLLFlBQVksS0FBSyxLQUFLO0lBQzdCO0FBRVUsSUFBQUEsWUFBQSxVQUFBLFNBQVYsU0FBaUIsS0FBUTtBQUN2QixVQUFJO0FBQ0YsYUFBSyxZQUFZLE1BQU0sR0FBRzs7QUFFMUIsYUFBSyxZQUFXOztJQUVwQjtBQUVVLElBQUFBLFlBQUEsVUFBQSxZQUFWLFdBQUE7QUFDRSxVQUFJO0FBQ0YsYUFBSyxZQUFZLFNBQVE7O0FBRXpCLGFBQUssWUFBVzs7SUFFcEI7QUFDRixXQUFBQTtFQUFBLEVBcEhtQyxZQUFZO0FBMkgvQyxNQUFNLFFBQVEsU0FBUyxVQUFVO0FBRWpDLFdBQVMsS0FBeUMsSUFBUSxTQUFZO0FBQ3BFLFdBQU8sTUFBTSxLQUFLLElBQUksT0FBTztFQUMvQjtBQU1BLE1BQUEsbUJBQUEsV0FBQTtBQUNFLGFBQUFDLGtCQUFvQixpQkFBcUM7QUFBckMsV0FBQSxrQkFBQTtJQUF3QztBQUU1RCxJQUFBQSxrQkFBQSxVQUFBLE9BQUEsU0FBSyxPQUFRO0FBQ0gsVUFBQSxrQkFBb0IsS0FBSTtBQUNoQyxVQUFJLGdCQUFnQixNQUFNO0FBQ3hCLFlBQUk7QUFDRiwwQkFBZ0IsS0FBSyxLQUFLO2lCQUNuQixPQUFQO0FBQ0EsK0JBQXFCLEtBQUs7OztJQUdoQztBQUVBLElBQUFBLGtCQUFBLFVBQUEsUUFBQSxTQUFNLEtBQVE7QUFDSixVQUFBLGtCQUFvQixLQUFJO0FBQ2hDLFVBQUksZ0JBQWdCLE9BQU87QUFDekIsWUFBSTtBQUNGLDBCQUFnQixNQUFNLEdBQUc7aUJBQ2xCLE9BQVA7QUFDQSwrQkFBcUIsS0FBSzs7YUFFdkI7QUFDTCw2QkFBcUIsR0FBRzs7SUFFNUI7QUFFQSxJQUFBQSxrQkFBQSxVQUFBLFdBQUEsV0FBQTtBQUNVLFVBQUEsa0JBQW9CLEtBQUk7QUFDaEMsVUFBSSxnQkFBZ0IsVUFBVTtBQUM1QixZQUFJO0FBQ0YsMEJBQWdCLFNBQVE7aUJBQ2pCLE9BQVA7QUFDQSwrQkFBcUIsS0FBSzs7O0lBR2hDO0FBQ0YsV0FBQUE7RUFBQSxFQXJDQTtBQXVDQSxNQUFBLGlCQUFBLFNBQUEsUUFBQTtBQUF1QyxJQUFBQyxXQUFBQyxpQkFBQSxNQUFBO0FBQ3JDLGFBQUFBLGdCQUNFLGdCQUNBLE9BQ0EsVUFBOEI7QUFIaEMsVUFBQSxRQUtFLE9BQUEsS0FBQSxJQUFBLEtBQU87QUFFUCxVQUFJO0FBQ0osVUFBSSxXQUFXLGNBQWMsS0FBSyxDQUFDLGdCQUFnQjtBQUdqRCwwQkFBa0I7VUFDaEIsTUFBTyxtQkFBYyxRQUFkLG1CQUFjLFNBQWQsaUJBQWtCO1VBQ3pCLE9BQU8sVUFBSyxRQUFMLFVBQUssU0FBTCxRQUFTO1VBQ2hCLFVBQVUsYUFBUSxRQUFSLGFBQVEsU0FBUixXQUFZOzthQUVuQjtBQUVMLFlBQUk7QUFDSixZQUFJLFNBQVEsT0FBTywwQkFBMEI7QUFJM0Msc0JBQVUsT0FBTyxPQUFPLGNBQWM7QUFDdEMsb0JBQVEsY0FBYyxXQUFBO0FBQU0sbUJBQUEsTUFBSyxZQUFXO1VBQWhCO0FBQzVCLDRCQUFrQjtZQUNoQixNQUFNLGVBQWUsUUFBUSxLQUFLLGVBQWUsTUFBTSxTQUFPO1lBQzlELE9BQU8sZUFBZSxTQUFTLEtBQUssZUFBZSxPQUFPLFNBQU87WUFDakUsVUFBVSxlQUFlLFlBQVksS0FBSyxlQUFlLFVBQVUsU0FBTzs7ZUFFdkU7QUFFTCw0QkFBa0I7OztBQU10QixZQUFLLGNBQWMsSUFBSSxpQkFBaUIsZUFBZTs7SUFDekQ7QUFDRixXQUFBQTtFQUFBLEVBekN1QyxVQUFVO0FBMkNqRCxXQUFTLHFCQUFxQixPQUFVO0FBQ3RDLFFBQUksT0FBTyx1Q0FBdUM7QUFDaEQsbUJBQWEsS0FBSztXQUNiO0FBR0wsMkJBQXFCLEtBQUs7O0VBRTlCO0FBUUEsV0FBUyxvQkFBb0IsS0FBUTtBQUNuQyxVQUFNO0VBQ1I7QUFPQSxXQUFTLDBCQUEwQixjQUEyQyxZQUEyQjtBQUMvRixRQUFBLHdCQUEwQixPQUFNO0FBQ3hDLDZCQUF5QixnQkFBZ0IsV0FBVyxXQUFBO0FBQU0sYUFBQSxzQkFBc0IsY0FBYyxVQUFVO0lBQTlDLENBQStDO0VBQzNHO0FBT08sTUFBTSxpQkFBNkQ7SUFDeEUsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTs7OztBQzVRTCxNQUFNLGFBQStCLFdBQUE7QUFBTSxXQUFDLE9BQU8sV0FBVyxjQUFjLE9BQU8sY0FBZTtFQUF2RCxFQUFzRTs7O0FDb0NsSCxXQUFVQyxVQUFZLEdBQUk7QUFDOUIsV0FBTztFQUNUOzs7QUNzQ00sV0FBVSxjQUFvQixLQUErQjtBQUNqRSxRQUFJLElBQUksV0FBVyxHQUFHO0FBQ3BCLGFBQU9DOztBQUdULFFBQUksSUFBSSxXQUFXLEdBQUc7QUFDcEIsYUFBTyxJQUFJLENBQUM7O0FBR2QsV0FBTyxTQUFTLE1BQU0sT0FBUTtBQUM1QixhQUFPLElBQUksT0FBTyxTQUFDLE1BQVcsSUFBdUI7QUFBSyxlQUFBLEdBQUcsSUFBSTtNQUFQLEdBQVUsS0FBWTtJQUNsRjtFQUNGOzs7QUM5RUEsTUFBQSxhQUFBLFdBQUE7QUFrQkUsYUFBQUMsWUFBWSxXQUE2RTtBQUN2RixVQUFJLFdBQVc7QUFDYixhQUFLLGFBQWE7O0lBRXRCO0FBNEJBLElBQUFBLFlBQUEsVUFBQSxPQUFBLFNBQVEsVUFBeUI7QUFDL0IsVUFBTUMsY0FBYSxJQUFJRCxZQUFVO0FBQ2pDLE1BQUFDLFlBQVcsU0FBUztBQUNwQixNQUFBQSxZQUFXLFdBQVc7QUFDdEIsYUFBT0E7SUFDVDtBQTZJQSxJQUFBRCxZQUFBLFVBQUEsWUFBQSxTQUNFLGdCQUNBLE9BQ0EsVUFBOEI7QUFIaEMsVUFBQSxRQUFBO0FBS0UsVUFBTSxhQUFhLGFBQWEsY0FBYyxJQUFJLGlCQUFpQixJQUFJLGVBQWUsZ0JBQWdCLE9BQU8sUUFBUTtBQUVySCxtQkFBYSxXQUFBO0FBQ0wsWUFBQSxLQUF1QixPQUFyQixXQUFRLEdBQUEsVUFBRSxTQUFNLEdBQUE7QUFDeEIsbUJBQVcsSUFDVCxXQUdJLFNBQVMsS0FBSyxZQUFZLE1BQU0sSUFDaEMsU0FJQSxNQUFLLFdBQVcsVUFBVSxJQUcxQixNQUFLLGNBQWMsVUFBVSxDQUFDO01BRXRDLENBQUM7QUFFRCxhQUFPO0lBQ1Q7QUFHVSxJQUFBQSxZQUFBLFVBQUEsZ0JBQVYsU0FBd0IsTUFBbUI7QUFDekMsVUFBSTtBQUNGLGVBQU8sS0FBSyxXQUFXLElBQUk7ZUFDcEIsS0FBUDtBQUlBLGFBQUssTUFBTSxHQUFHOztJQUVsQjtBQTZEQSxJQUFBQSxZQUFBLFVBQUEsVUFBQSxTQUFRLE1BQTBCLGFBQW9DO0FBQXRFLFVBQUEsUUFBQTtBQUNFLG9CQUFjLGVBQWUsV0FBVztBQUV4QyxhQUFPLElBQUksWUFBa0IsU0FBQyxTQUFTLFFBQU07QUFDM0MsWUFBTSxhQUFhLElBQUksZUFBa0I7VUFDdkMsTUFBTSxTQUFDLE9BQUs7QUFDVixnQkFBSTtBQUNGLG1CQUFLLEtBQUs7cUJBQ0gsS0FBUDtBQUNBLHFCQUFPLEdBQUc7QUFDVix5QkFBVyxZQUFXOztVQUUxQjtVQUNBLE9BQU87VUFDUCxVQUFVO1NBQ1g7QUFDRCxjQUFLLFVBQVUsVUFBVTtNQUMzQixDQUFDO0lBQ0g7QUFHVSxJQUFBQSxZQUFBLFVBQUEsYUFBVixTQUFxQixZQUEyQjs7QUFDOUMsY0FBTyxLQUFBLEtBQUssWUFBTSxRQUFBLE9BQUEsU0FBQSxTQUFBLEdBQUUsVUFBVSxVQUFVO0lBQzFDO0FBT0EsSUFBQUEsWUFBQSxVQUFDLFVBQWlCLElBQWxCLFdBQUE7QUFDRSxhQUFPO0lBQ1Q7QUE0RkEsSUFBQUEsWUFBQSxVQUFBLE9BQUEsV0FBQTtBQUFLLFVBQUEsYUFBQSxDQUFBO2VBQUEsS0FBQSxHQUFBLEtBQUEsVUFBQSxRQUFBLE1BQTJDO0FBQTNDLG1CQUFBLEVBQUEsSUFBQSxVQUFBLEVBQUE7O0FBQ0gsYUFBTyxjQUFjLFVBQVUsRUFBRSxJQUFJO0lBQ3ZDO0FBNkJBLElBQUFBLFlBQUEsVUFBQSxZQUFBLFNBQVUsYUFBb0M7QUFBOUMsVUFBQSxRQUFBO0FBQ0Usb0JBQWMsZUFBZSxXQUFXO0FBRXhDLGFBQU8sSUFBSSxZQUFZLFNBQUMsU0FBUyxRQUFNO0FBQ3JDLFlBQUk7QUFDSixjQUFLLFVBQ0gsU0FBQyxHQUFJO0FBQUssaUJBQUMsUUFBUTtRQUFULEdBQ1YsU0FBQyxLQUFRO0FBQUssaUJBQUEsT0FBTyxHQUFHO1FBQVYsR0FDZCxXQUFBO0FBQU0saUJBQUEsUUFBUSxLQUFLO1FBQWIsQ0FBYztNQUV4QixDQUFDO0lBQ0g7QUExYU8sSUFBQUEsWUFBQSxTQUFrQyxTQUFJLFdBQXdEO0FBQ25HLGFBQU8sSUFBSUEsWUFBYyxTQUFTO0lBQ3BDO0FBeWFGLFdBQUFBO0lBOWNBO0FBdWRBLFdBQVMsZUFBZSxhQUErQzs7QUFDckUsWUFBTyxLQUFBLGdCQUFXLFFBQVgsZ0JBQVcsU0FBWCxjQUFlLE9BQU8sYUFBTyxRQUFBLE9BQUEsU0FBQSxLQUFJO0VBQzFDO0FBRUEsV0FBUyxXQUFjLE9BQVU7QUFDL0IsV0FBTyxTQUFTLFdBQVcsTUFBTSxJQUFJLEtBQUssV0FBVyxNQUFNLEtBQUssS0FBSyxXQUFXLE1BQU0sUUFBUTtFQUNoRztBQUVBLFdBQVMsYUFBZ0IsT0FBVTtBQUNqQyxXQUFRLFNBQVMsaUJBQWlCLGNBQWdCLFdBQVcsS0FBSyxLQUFLLGVBQWUsS0FBSztFQUM3Rjs7O0FDNWRPLE1BQU0sMEJBQXVELGlCQUNsRSxTQUFDLFFBQU07QUFDTCxXQUFBLFNBQVMsOEJBQTJCO0FBQ2xDLGFBQU8sSUFBSTtBQUNYLFdBQUssT0FBTztBQUNaLFdBQUssVUFBVTtJQUNqQjtFQUpBLENBSUM7OztBQ1hMLE1BQUEsVUFBQSxTQUFBLFFBQUE7QUFBZ0MsSUFBQUUsV0FBQUMsVUFBQSxNQUFBO0FBd0I5QixhQUFBQSxXQUFBO0FBQUEsVUFBQSxRQUVFLE9BQUEsS0FBQSxJQUFBLEtBQU87QUF6QlQsWUFBQSxTQUFTO0FBRUQsWUFBQSxtQkFBeUM7QUFHakQsWUFBQSxZQUEyQixDQUFBO0FBRTNCLFlBQUEsWUFBWTtBQUVaLFlBQUEsV0FBVztBQUVYLFlBQUEsY0FBbUI7O0lBZW5CO0FBR0EsSUFBQUEsU0FBQSxVQUFBLE9BQUEsU0FBUSxVQUF3QjtBQUM5QixVQUFNLFVBQVUsSUFBSSxpQkFBaUIsTUFBTSxJQUFJO0FBQy9DLGNBQVEsV0FBVztBQUNuQixhQUFPO0lBQ1Q7QUFHVSxJQUFBQSxTQUFBLFVBQUEsaUJBQVYsV0FBQTtBQUNFLFVBQUksS0FBSyxRQUFRO0FBQ2YsY0FBTSxJQUFJLHdCQUF1Qjs7SUFFckM7QUFFQSxJQUFBQSxTQUFBLFVBQUEsT0FBQSxTQUFLLE9BQVE7QUFBYixVQUFBLFFBQUE7QUFDRSxtQkFBYSxXQUFBOztBQUNYLGNBQUssZUFBYztBQUNuQixZQUFJLENBQUMsTUFBSyxXQUFXO0FBQ25CLGNBQUksQ0FBQyxNQUFLLGtCQUFrQjtBQUMxQixrQkFBSyxtQkFBbUIsTUFBTSxLQUFLLE1BQUssU0FBUzs7O0FBRW5ELHFCQUF1QixLQUFBQyxVQUFBLE1BQUssZ0JBQWdCLEdBQUEsS0FBQSxHQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsTUFBQSxLQUFBLEdBQUEsS0FBQSxHQUFFO0FBQXpDLGtCQUFNLFdBQVEsR0FBQTtBQUNqQix1QkFBUyxLQUFLLEtBQUs7Ozs7Ozs7Ozs7Ozs7O01BR3pCLENBQUM7SUFDSDtBQUVBLElBQUFELFNBQUEsVUFBQSxRQUFBLFNBQU0sS0FBUTtBQUFkLFVBQUEsUUFBQTtBQUNFLG1CQUFhLFdBQUE7QUFDWCxjQUFLLGVBQWM7QUFDbkIsWUFBSSxDQUFDLE1BQUssV0FBVztBQUNuQixnQkFBSyxXQUFXLE1BQUssWUFBWTtBQUNqQyxnQkFBSyxjQUFjO0FBQ1gsY0FBQSxZQUFjLE1BQUk7QUFDMUIsaUJBQU8sVUFBVSxRQUFRO0FBQ3ZCLHNCQUFVLE1BQUssRUFBSSxNQUFNLEdBQUc7OztNQUdsQyxDQUFDO0lBQ0g7QUFFQSxJQUFBQSxTQUFBLFVBQUEsV0FBQSxXQUFBO0FBQUEsVUFBQSxRQUFBO0FBQ0UsbUJBQWEsV0FBQTtBQUNYLGNBQUssZUFBYztBQUNuQixZQUFJLENBQUMsTUFBSyxXQUFXO0FBQ25CLGdCQUFLLFlBQVk7QUFDVCxjQUFBLFlBQWMsTUFBSTtBQUMxQixpQkFBTyxVQUFVLFFBQVE7QUFDdkIsc0JBQVUsTUFBSyxFQUFJLFNBQVE7OztNQUdqQyxDQUFDO0lBQ0g7QUFFQSxJQUFBQSxTQUFBLFVBQUEsY0FBQSxXQUFBO0FBQ0UsV0FBSyxZQUFZLEtBQUssU0FBUztBQUMvQixXQUFLLFlBQVksS0FBSyxtQkFBbUI7SUFDM0M7QUFFQSxXQUFBLGVBQUlBLFNBQUEsV0FBQSxZQUFRO1dBQVosV0FBQTs7QUFDRSxpQkFBTyxLQUFBLEtBQUssZUFBUyxRQUFBLE9BQUEsU0FBQSxTQUFBLEdBQUUsVUFBUztNQUNsQzs7OztBQUdVLElBQUFBLFNBQUEsVUFBQSxnQkFBVixTQUF3QixZQUF5QjtBQUMvQyxXQUFLLGVBQWM7QUFDbkIsYUFBTyxPQUFBLFVBQU0sY0FBYSxLQUFBLE1BQUMsVUFBVTtJQUN2QztBQUdVLElBQUFBLFNBQUEsVUFBQSxhQUFWLFNBQXFCLFlBQXlCO0FBQzVDLFdBQUssZUFBYztBQUNuQixXQUFLLHdCQUF3QixVQUFVO0FBQ3ZDLGFBQU8sS0FBSyxnQkFBZ0IsVUFBVTtJQUN4QztBQUdVLElBQUFBLFNBQUEsVUFBQSxrQkFBVixTQUEwQixZQUEyQjtBQUFyRCxVQUFBLFFBQUE7QUFDUSxVQUFBLEtBQXFDLE1BQW5DLFdBQVEsR0FBQSxVQUFFLFlBQVMsR0FBQSxXQUFFLFlBQVMsR0FBQTtBQUN0QyxVQUFJLFlBQVksV0FBVztBQUN6QixlQUFPOztBQUVULFdBQUssbUJBQW1CO0FBQ3hCLGdCQUFVLEtBQUssVUFBVTtBQUN6QixhQUFPLElBQUksYUFBYSxXQUFBO0FBQ3RCLGNBQUssbUJBQW1CO0FBQ3hCLGtCQUFVLFdBQVcsVUFBVTtNQUNqQyxDQUFDO0lBQ0g7QUFHVSxJQUFBQSxTQUFBLFVBQUEsMEJBQVYsU0FBa0MsWUFBMkI7QUFDckQsVUFBQSxLQUF1QyxNQUFyQyxXQUFRLEdBQUEsVUFBRSxjQUFXLEdBQUEsYUFBRSxZQUFTLEdBQUE7QUFDeEMsVUFBSSxVQUFVO0FBQ1osbUJBQVcsTUFBTSxXQUFXO2lCQUNuQixXQUFXO0FBQ3BCLG1CQUFXLFNBQVE7O0lBRXZCO0FBUUEsSUFBQUEsU0FBQSxVQUFBLGVBQUEsV0FBQTtBQUNFLFVBQU1FLGNBQWtCLElBQUksV0FBVTtBQUN0QyxNQUFBQSxZQUFXLFNBQVM7QUFDcEIsYUFBT0E7SUFDVDtBQXhITyxJQUFBRixTQUFBLFNBQWtDLFNBQUksYUFBMEIsUUFBcUI7QUFDMUYsYUFBTyxJQUFJLGlCQUFvQixhQUFhLE1BQU07SUFDcEQ7QUF1SEYsV0FBQUE7SUE3SWdDLFVBQVU7QUFrSjFDLE1BQUEsbUJBQUEsU0FBQSxRQUFBO0FBQXlDLElBQUFHLFdBQUFDLG1CQUFBLE1BQUE7QUFDdkMsYUFBQUEsa0JBRVMsYUFDUCxRQUFzQjtBQUh4QixVQUFBLFFBS0UsT0FBQSxLQUFBLElBQUEsS0FBTztBQUhBLFlBQUEsY0FBQTtBQUlQLFlBQUssU0FBUzs7SUFDaEI7QUFFQSxJQUFBQSxrQkFBQSxVQUFBLE9BQUEsU0FBSyxPQUFROztBQUNYLE9BQUEsTUFBQSxLQUFBLEtBQUssaUJBQVcsUUFBQSxPQUFBLFNBQUEsU0FBQSxHQUFFLFVBQUksUUFBQSxPQUFBLFNBQUEsU0FBQSxHQUFBLEtBQUEsSUFBRyxLQUFLO0lBQ2hDO0FBRUEsSUFBQUEsa0JBQUEsVUFBQSxRQUFBLFNBQU0sS0FBUTs7QUFDWixPQUFBLE1BQUEsS0FBQSxLQUFLLGlCQUFXLFFBQUEsT0FBQSxTQUFBLFNBQUEsR0FBRSxXQUFLLFFBQUEsT0FBQSxTQUFBLFNBQUEsR0FBQSxLQUFBLElBQUcsR0FBRztJQUMvQjtBQUVBLElBQUFBLGtCQUFBLFVBQUEsV0FBQSxXQUFBOztBQUNFLE9BQUEsTUFBQSxLQUFBLEtBQUssaUJBQVcsUUFBQSxPQUFBLFNBQUEsU0FBQSxHQUFFLGNBQVEsUUFBQSxPQUFBLFNBQUEsU0FBQSxHQUFBLEtBQUEsRUFBQTtJQUM1QjtBQUdVLElBQUFBLGtCQUFBLFVBQUEsYUFBVixTQUFxQixZQUF5Qjs7QUFDNUMsY0FBTyxNQUFBLEtBQUEsS0FBSyxZQUFNLFFBQUEsT0FBQSxTQUFBLFNBQUEsR0FBRSxVQUFVLFVBQVUsT0FBQyxRQUFBLE9BQUEsU0FBQSxLQUFJO0lBQy9DO0FBQ0YsV0FBQUE7RUFBQSxFQTFCeUMsT0FBTzs7O0FDaEt6QyxNQUFNLGFBQU4sTUFBaUI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQWN4Qjs7O0FDSE8sTUFBTSxRQUFRO0FBQUEsSUFDbkIsTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBLElBQ1AsT0FBTztBQUFBLElBQ1AsU0FBUztBQUFBLElBQ1QsS0FBSztBQUFBLElBQ0wsVUFBVTtBQUFBLEVBQ1o7QUFPTyxNQUFNLFlBQU4sTUFBeUM7QUFBQSxJQUU5QyxPQUFvQjtBQUFBLElBRXBCLGNBQWM7QUFDWixXQUFLLHdCQUF3QixJQUFJLFFBQVE7QUFDekMsV0FBSyx3QkFBd0IsSUFBSSxRQUFRO0FBQ3pDLFdBQUssZ0JBQWdCLElBQUksUUFBUTtBQUNqQyxXQUFLLGVBQWUsSUFBSSxRQUFRO0FBQ2hDLFdBQUssMEJBQTBCLElBQUksUUFBUTtBQUUzQyxXQUFLLGFBQWEsSUFBSSxXQUFXO0FBRWpDLFdBQUsscUJBQXFCLElBQUksUUFBUTtBQUV0QyxXQUFLLG1CQUFtQixVQUFVLENBQUMsU0FBUztBQUMxQyxnQkFBUSxJQUFJLHNCQUFzQixJQUFJO0FBQUEsTUFDeEMsQ0FBQztBQUVELFdBQUssZUFBZSxJQUFJLFFBQVE7QUFDaEMsY0FBUSxJQUFJLHdCQUF3QjtBQUFBLElBQ3RDO0FBQUEsSUFFQTtBQUFBLElBRUE7QUFBQSxJQUNBLFNBQVMsTUFBTTtBQUFBLElBQ2YsSUFBSSxNQUFNLE9BQU87QUFDZixXQUFLLFNBQVM7QUFDZCxXQUFLLGFBQWEsS0FBSyxLQUFLO0FBQUEsSUFDOUI7QUFBQSxJQUNBLElBQUksUUFBUTtBQUNWLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBO0FBQUEsSUFDQSxvQkFBb0I7QUFBQSxJQUNwQixJQUFJLGlCQUFpQixPQUFPO0FBQzFCLFdBQUssb0JBQW9CO0FBQ3pCLFdBQUssd0JBQXdCLEtBQUssS0FBSztBQUFBLElBQ3pDO0FBQUEsSUFDQSxJQUFJLG1CQUFtQjtBQUNyQixhQUFPLEtBQUs7QUFBQSxJQUNkO0FBQUEsSUFFQTtBQUFBLElBQ0EsU0FBUztBQUFBLElBQ1QsSUFBSSxNQUFNLE9BQU87QUFDZixXQUFLLFNBQVM7QUFDZCxXQUFLLGFBQWEsS0FBSyxLQUFLO0FBQUEsSUFDOUI7QUFBQSxJQUNBLElBQUksUUFBUTtBQUNWLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBO0FBQUEsSUFDQSxrQkFBa0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLElBQzFCLElBQUksZUFBZSxPQUFPO0FBQ3hCLFdBQUssMEJBQTBCLEtBQUs7QUFDcEMsV0FBSyxrQkFBa0I7QUFDdkIsV0FBSyxzQkFBc0IsS0FBSyxLQUFLO0FBQUEsSUFDdkM7QUFBQSxJQUNBLElBQUksaUJBQWlCO0FBQ25CLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUNBLDBCQUEwQixDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQUEsSUFDbEMsSUFBSSx5QkFBeUI7QUFDM0IsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUFBLElBRUE7QUFBQSxJQUNBLGtCQUFrQjtBQUFBLElBQ2xCLElBQUksZUFBZSxPQUFPO0FBQ3hCLFdBQUssMEJBQTBCLEtBQUs7QUFDcEMsV0FBSyxrQkFBa0I7QUFDdkIsV0FBSyxzQkFBc0IsS0FBSyxLQUFLO0FBQUEsSUFDdkM7QUFBQSxJQUNBLElBQUksaUJBQWlCO0FBQ25CLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBLDBCQUEwQjtBQUFBLElBQzFCLElBQUkseUJBQXlCO0FBQzNCLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBO0FBQUEsSUFDQSxVQUFVO0FBQUEsSUFDVixJQUFJLE9BQU8sT0FBTztBQUNoQixXQUFLLFVBQVU7QUFDZixXQUFLLGNBQWMsS0FBSyxLQUFLO0FBQUEsSUFDL0I7QUFBQSxJQUNBLElBQUksU0FBUztBQUNYLGFBQU8sS0FBSztBQUFBLElBQ2Q7QUFBQSxJQUVBO0FBQUEsSUFDQSxlQUFlLENBQUMsR0FBRSxDQUFDO0FBQUEsSUFDbkIsSUFBSSxZQUFZLE9BQU87QUFDckIsV0FBSyxlQUFlO0FBQ3BCLFdBQUssbUJBQW1CLEtBQUssS0FBSztBQUFBLElBQ3BDO0FBQUEsSUFDQSxJQUFJLGNBQWM7QUFDaEIsYUFBTyxLQUFLO0FBQUEsSUFDZDtBQUFBLElBRUEsWUFBWTtBQUFBLElBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtiLGFBQWE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUtiLDRCQUFvRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBUXBELGVBQWUsT0FBZSxPQUFlQyxhQUFvQyxNQUFNO0FBQ3JGLFVBQUksS0FBSyxZQUFZO0FBQ25CO0FBQUEsTUFDRjtBQUNBLFdBQUssYUFBYTtBQUVsQixVQUFJQSxZQUFXO0FBQ2IsYUFBSyw0QkFBNEJBO0FBQUEsTUFDbkMsT0FBTztBQUNMLGFBQUssaUJBQWlCLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDOUIsYUFBSyxpQkFBaUI7QUFBQSxNQUN4QjtBQUVBLFdBQUssY0FBYyxDQUFDLE9BQU8sS0FBSztBQUloQyxXQUFLLGFBQWE7QUFBQSxJQUNwQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFTQSxRQUFRLEdBQVcsR0FBVyxHQUFXO0FBQ3ZDLFVBQUksQ0FBQyxLQUFLLE1BQU07QUFDZCxlQUFPO0FBQUEsTUFDVDtBQUVBLFlBQU0sV0FBVyxLQUFLLEtBQUssZ0JBQWdCO0FBQzNDLFVBQUksQ0FBQyxVQUFVO0FBQ2IsZ0JBQVEsTUFBTSx5REFBeUQ7QUFDdkUsZUFBTztBQUFBLE1BQ1Q7QUFFQSxZQUFNLE9BQU8sMkJBQTJCLFNBQVMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxHQUFHLEtBQUssTUFBTSxDQUFDLENBQUM7QUFDdEYsVUFBRyxDQUFDLE1BQUs7QUFFUCxnQkFBUSxLQUFLLDZCQUE2QixLQUFLLGlCQUFpQixTQUFTLE1BQU07QUFDL0UsZUFBTztBQUFBLE1BQ1Q7QUFDQSxZQUFNLGFBQWEsK0JBQStCLElBQUk7QUFFdEQsVUFBRyxXQUFXLGFBQWEsUUFBTztBQUNoQyxlQUFRLFNBQVMsT0FBTyxLQUFLLEtBQUssTUFBTSxTQUN2QyxTQUFTLE9BQU8sS0FBSyxLQUFLLE1BQU0sUUFDaEMsU0FBUyxPQUFPLEtBQUssS0FBSyxNQUFNLFNBQ2hDLFNBQVMsT0FBTyxLQUFLLEtBQUssTUFBTTtBQUFBLE1BQ25DLE9BQUs7QUFDSCxlQUFPLFdBQVcscUJBQXFCLFdBQVc7QUFBQSxNQUNwRDtBQUFBLElBQ0Y7QUFBQSxJQUVBLEtBQUssS0FBYyxHQUFXLEdBQVcsR0FBVztBQUNsRCxVQUFJLENBQUMsS0FBSyxNQUFNO0FBQ2QsZUFBTztBQUFBLE1BQ1Q7QUFFQSxZQUFNLFdBQVcsS0FBSyxLQUFLLGdCQUFnQjtBQUMzQyxVQUFJLENBQUMsVUFBVTtBQUNiLGdCQUFRLE1BQU0seURBQXlEO0FBQ3ZFLGVBQU87QUFBQSxNQUNUO0FBRUEsWUFBTSxPQUFPLDJCQUEyQixTQUFTLFNBQVMsS0FBSyxNQUFNLENBQUMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0FBQ3RGLFVBQUcsQ0FBQyxNQUFLO0FBRVAsZ0JBQVEsS0FBSyw2QkFBNkIsS0FBSyxpQkFBaUIsU0FBUyxNQUFNO0FBQy9FO0FBQUEsTUFDRjtBQUdBLFlBQU0sUUFBUSxLQUFLLEtBQUssbUJBQW1CLEVBQUMsR0FBRSxLQUFLLE1BQU0sQ0FBQyxHQUFHLEdBQUUsS0FBSyxNQUFNLENBQUMsRUFBQyxDQUFDO0FBRTdFLFVBQUcsQ0FBQyxTQUFTLE1BQU0sV0FBVyxHQUFFO0FBQzlCLFlBQUcsK0JBQStCLElBQUksRUFBRSxtQkFBa0I7QUFDeEQsZUFBSyxrQkFBa0IsR0FBRSxDQUFDO0FBQUEsUUFDNUI7QUFBQztBQUNEO0FBQUEsTUFDRjtBQUVBLGVBQVEsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUk7QUFDbkMsY0FBTSxPQUFPLE1BQU0sQ0FBQztBQUNwQixhQUFLLFNBQVMsS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUFBLE1BQzVCO0FBc0JBO0FBQUEsSUFvQkY7QUFBQSxJQUVBLGVBQWUsYUFBbUI7QUFDaEMsV0FBSyxPQUFPO0FBQUEsSUFDZDtBQUFBLElBRUEsa0JBQWtCLEdBQVcsR0FBVztBQUN0QyxXQUFLLGlCQUFpQixDQUFDLEdBQUcsS0FBSyxlQUFlLENBQUMsR0FBRyxDQUFDO0FBQUEsSUFDdkQ7QUFBQSxFQUNBO0FBdFFhLGNBQU47QUFBQSxJQUROLGtCQUFVO0FBQUEsS0FDRTs7O0FDcEJOLE1BQU0sT0FBTixjQUFtQixZQUFXO0FBQUEsSUFFakM7QUFBQSxJQUNBO0FBQUEsSUFFQSxZQUNJQyxZQUNBLFlBQ0EsaUJBQTJCO0FBQzNCLFlBQU07QUFDTixZQUFNLE9BQU87QUFDYixZQUFNLE9BQU87QUFDYixXQUFLLFlBQVlBO0FBQ2pCLFdBQUssYUFBYTtBQUNsQixXQUFLLFdBQVc7QUFBQSxJQUNwQjtBQUFBLElBRVMsU0FBUyxLQUFjLEdBQVUsR0FBVSxHQUFTO0FBQ3pELFlBQU0sWUFBWSxTQUFVLFFBQVEsU0FBUztBQUM3QyxnQkFBVSxlQUFlLEtBQUssV0FBVyxHQUFHLEtBQUssV0FBVyxHQUFHLEtBQUssU0FBUztBQUFBLElBQ2pGO0FBQUEsRUFFSjs7O0FDN0JBO0FBQUE7QUFBQTtBQUFBOzs7QUNFTyxNQUFNLFNBQU4sY0FBcUIsWUFBVztBQUFBLElBRW5DLGNBQWE7QUFDVCxZQUFNO0FBQ04sWUFBTSxPQUFPO0FBQ2IsWUFBTSxPQUFPO0FBQUEsSUFDakI7QUFBQSxFQUNKOzs7QUNQTyxNQUFNLFFBQU4sY0FBb0IsWUFBVztBQUFBLElBRWxDLGNBQWE7QUFDVCxZQUFNO0FBQ04sWUFBTSxPQUFPO0FBQ2IsWUFBTSxPQUFPO0FBQUEsSUFDakI7QUFBQSxJQUVTLFNBQWdCO0FBQ3JCLGFBQU87QUFBQSxJQUNYO0FBQUEsSUFFUyxTQUFnQjtBQUNyQixhQUFPLE1BQU0sT0FBTztBQUFBLElBQ3hCO0FBQUEsRUFFSjs7O0FDRk8sTUFBTSxZQUFOLE1BQXlDO0FBQUEsSUFFOUM7QUFBQSxJQUVBLGNBQWE7QUFFWCxXQUFLLGNBQWMsb0JBQUksSUFBSTtBQUFBLFFBQ3pCLENBQUMsU0FBUztBQUFBO0FBQUEsVUFFUixFQUFFLE1BQU0sSUFBSSxPQUFPLEdBQUcsUUFBUSxFQUFFO0FBQUEsUUFDbEMsQ0FBQztBQUFBLFFBQ0QsQ0FBQyxRQUFRO0FBQUEsVUFDUCxFQUFFLE1BQU0sSUFBSSxNQUFNLEdBQUcsUUFBUSxFQUFFO0FBQUEsVUFDL0IsRUFBRSxNQUFNLElBQUksTUFBTSxHQUFHLFFBQVEsRUFBRTtBQUFBLFFBQ2pDLENBQUM7QUFBQSxNQUNILENBQUM7QUFBQSxJQUNIO0FBQUEsSUFFQSxTQUFTLE1BQXdCO0FBQy9CLGFBQU8sS0FBSyxZQUFZLElBQUksSUFBSSxFQUFHLElBQUksT0FBRyxFQUFFLElBQUk7QUFBQSxJQUNsRDtBQUFBLEVBQ0Y7QUFyQmEsY0FBTjtBQUFBLElBRE4sbUJBQVc7QUFBQSxLQUNDOzs7QUNLTixNQUFNLFFBQU4sY0FBb0IsWUFBNEI7QUFBQSxJQUNuRDtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUVBLFlBQVksV0FBbUIsWUFBb0IsVUFBa0IsV0FBd0I7QUFDekYsWUFBTTtBQUNOLFdBQUssWUFBWTtBQUNqQixXQUFLLGFBQWE7QUFDbEIsV0FBSyxXQUFXO0FBQ2hCLFdBQUssWUFBWTtBQUNqQixXQUFLLGdCQUFnQjtBQUFBLElBQ3pCO0FBQUEsSUFFUyxTQUFTLEtBQWUsR0FBVyxHQUFXLEdBQVc7QUFDN0QsVUFBRyxDQUFDLEtBQUssaUJBQWlCLEtBQUssU0FBUyxNQUFLO0FBQzFDLGFBQUssZ0JBQWdCO0FBQ3JCLGFBQUssZ0JBQWdCO0FBQUEsTUFDekI7QUFDQSxXQUFLLFFBQVEsS0FBSyxVQUFVLFNBQVMsT0FBTztBQUM1QyxjQUFRLElBQUksS0FBSyxLQUFLO0FBQUEsSUFHMUI7QUFBQSxJQUVRLGtCQUFpQjtBQUFBLElBRXpCO0FBQUEsRUFDSjs7O0FKMUNPLE1BQU0sZUFBTixNQUFtQjtBQUFBLElBRXRCLFlBQXVDLFdBQXNCO0FBQXRCO0FBQUEsSUFDdkM7QUFBQSxJQUVBLFlBQVksVUFBc0JDLGtCQUErQztBQUM3RSxZQUFNLFlBQVksSUFBSSxNQUFNLFNBQVMsVUFBVSxHQUFHLEtBQUssU0FBUztBQUNoRSxnQkFBVSxXQUFXO0FBQ3JCLGdCQUFVLE9BQU87QUFFakIsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBWmEsaUJBQU47QUFBQSxJQUROLGtCQUFVO0FBQUEsSUFHTSxrQ0FBTyxTQUFTO0FBQUEsS0FGcEI7OztBS1RiO0FBQUE7QUFBQTtBQUFBOzs7QUNBQTtBQUFBO0FBQUE7QUFBQTtBQUtPLE1BQU0sb0JBQU4sTUFBdUI7QUFBQSxJQUMxQjtBQUFBLElBRUEsa0JBQWtCLFdBQW9CO0FBQ2xDLFdBQUssWUFBWTtBQUFBLElBQ3JCO0FBQUEsSUFFQSxLQUFLLE1BQWEsVUFDbEI7QUFDSSxVQUFHLEtBQUssV0FBVTtBQUNkLGFBQUssVUFBVSxLQUFLLE1BQU0sUUFBUTtBQUFBLE1BQ3RDO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFiYSxzQkFBTjtBQUFBLElBRE4sbUJBQVc7QUFBQSxLQUNDOzs7QURETixNQUFNLGdCQUFnQjtBQUFBLElBQ3pCLE1BQU07QUFBQSxJQUVOLFlBQVksV0FBWTtBQUFBLElBRXhCO0FBQUEsSUFFQSxVQUFTLFNBQVMsS0FBUyxLQUFjLEdBQVUsR0FBVSxHQUFTO0FBQ2xFLFlBQU0sb0JBQW9CLFNBQVUsUUFBUSxpQkFBaUI7QUFDN0Qsd0JBQWtCLEtBQUssYUFBYSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFBQSxJQUNqRDtBQUFBLEVBQ0Y7OztBOUJISyxNQUFNLGtCQUFOLE1BQXNCO0FBQUEsSUFFekIsWUFBMEMsY0FBMkI7QUFBM0I7QUFBQSxJQUMxQztBQUFBLElBRUEsWUFBWSxVQUF1QixNQUF3QjtBQUN2RCxVQUFJLFFBQXNCLENBQUM7QUFDM0IsWUFBTSxhQUFhLElBQUksTUFBTSxFQUFFLFFBQVEsS0FBSyxJQUFJO0FBQ2hELGVBQVMsSUFBSSxHQUFHLElBQUksU0FBUyxRQUFRLFFBQVEsS0FBSztBQUM5QyxpQkFBUyxJQUFJLEdBQUcsSUFBSSxTQUFTLFFBQVEsQ0FBQyxFQUFFLFFBQVEsS0FBSztBQUNuRCxjQUFJLCtCQUErQixTQUFTLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLFVBQVU7QUFDcEUsb0JBQVEsU0FBUyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUc7QUFBQSxjQUM5QixLQUFLO0FBQUEsY0FDTCxLQUFLO0FBQUEsY0FDTCxLQUFLO0FBQUEsY0FDTCxLQUFLO0FBQ0gsb0JBQUlDLGFBQVksU0FBUyxRQUFRLENBQUMsRUFBRSxDQUFDO0FBQ3JDLG9CQUFJLFNBQVMsS0FBSyxjQUFjQSxVQUFTO0FBQ3pDLG9CQUFJLFFBQU87QUFDVCx3QkFBTSxXQUFXLElBQUksS0FBS0EsWUFBVyxRQUFRLEVBQUUsR0FBTSxFQUFLLENBQUM7QUFDM0Qsd0JBQU0sS0FBSyxRQUFRO0FBQUEsZ0JBQ3JCO0FBQ0E7QUFBQSxjQUNGLEtBQUs7QUFDSCxvQkFBRyxDQUFDLFNBQVMsUUFBTztBQUNoQiwwQkFBUSxNQUFNLG1GQUFtRjtBQUNqRztBQUFBLGdCQUNKO0FBQ0Esb0JBQUksUUFBUSxXQUFXLFFBQVEsU0FBUyxNQUFNO0FBQzlDLG9CQUFJLFlBQVksS0FBSyxhQUFhLFlBQVksRUFBRSxHQUFNLEVBQUssR0FBRyxLQUFLO0FBRW5FLDBCQUFVLFlBQVksYUFBYTtBQUNuQyxzQkFBTSxLQUFLLFNBQVM7QUFDcEI7QUFBQSxZQUNKO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQ0YsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBeENhLG9CQUFOO0FBQUEsSUFETixrQkFBVTtBQUFBLElBR00sa0NBQU8sWUFBWTtBQUFBLEtBRnZCOzs7QUROTixNQUFNLGNBQU4sTUFBaUI7QUFBQSxJQUVwQixZQUE2QyxpQkFBaUM7QUFBakM7QUFBQSxJQUU3QztBQUFBLElBRUEsVUFBVSxNQUFXLFVBQThCO0FBQy9DLFdBQUssV0FBVyxRQUFRO0FBQ3hCLFdBQUssUUFBUSxLQUFLLGdCQUFnQixZQUFZLFVBQVMsSUFBSTtBQUMzRCxhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFYYSxnQkFBTjtBQUFBLElBRE4sa0JBQVU7QUFBQSxJQUdNLGtDQUFPLGVBQWU7QUFBQSxLQUYxQjs7O0FEZU4sTUFBTSxlQUFOLE1BQW1CO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQUt4QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BO0FBQUEsSUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVVBLFlBQ0UsUUFDQSxRQUNBLFNBQ0EsUUFDQSxZQUNBO0FBQ0EsV0FBSyxjQUFjLFNBQVUsUUFBUSxXQUFXLEdBQ2hELEtBQUssVUFBVTtBQUNmLFdBQUssVUFBVTtBQUNmLFdBQUssV0FBVztBQUNoQixXQUFLLFVBQVU7QUFDZixXQUFLLGNBQWM7QUFBQSxJQUNyQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFNQSxPQUFPLE1BQVk7QUFHakIsVUFBRyxDQUFDLEtBQUssZUFBYztBQUVyQixjQUFNLG9CQUFvQixjQUFjLE9BQU8sQ0FBQyxNQUFNLEVBQUUsUUFBUSxLQUFLLFlBQVksQ0FBQztBQUNsRixZQUFJLGNBQWMsSUFBSSxRQUFRLGlCQUFpQjtBQUMvQyxZQUFJLENBQUMsYUFBYTtBQUNoQixnQkFBTSxJQUFJLE1BQU0sbUNBQW1DLEtBQUssWUFBWSxHQUFHO0FBQUEsUUFDekU7QUFFQSxhQUFLLFlBQVksVUFBVSxNQUFNLFdBQVc7QUFFNUMsYUFBSyxXQUFXLFdBQVc7QUFBQSxNQUM3QjtBQUVBLFVBQUksV0FBVyxLQUFLLGdCQUFnQjtBQUVwQyxVQUFJLGFBQWEsQ0FBQztBQUVsQixVQUFJLENBQUMsVUFBVTtBQUNiLGNBQU0sSUFBSSxNQUFNLG1DQUFtQyxLQUFLLFlBQVksR0FBRztBQUFBLE1BQ3pFO0FBRUEsWUFBTSxhQUFhLFNBQVM7QUFDNUIsVUFBSSxDQUFDLFlBQVk7QUFDZixjQUFNLElBQUksTUFBTSxzQ0FBc0MsS0FBSyxZQUFZLEdBQUc7QUFBQSxNQUM1RTtBQUVBLGVBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDMUMsaUJBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsUUFBUSxLQUFLO0FBQzdDLG1CQUFTLElBQUksR0FBRyxJQUFJLFNBQVMsY0FBYyxDQUFDLEdBQUcsS0FBSztBQUNsRCxnQkFBSTtBQUNKLG9CQUFRLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRztBQUFBLGNBQ3hCLEtBQUs7QUFDSCx1QkFBTyxLQUFLLFNBQVMsY0FBYyxRQUFRO0FBQzNDO0FBQUEsY0FDRixLQUFLO0FBQ0gsb0JBQUksS0FBSyxHQUFHO0FBRVYsNkJBQVcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFBQSxnQkFDM0I7QUFBQSxjQUNGLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFBQSxjQUNMLEtBQUs7QUFDSCxvQkFBSSxLQUFLLEdBQUc7QUFDVix5QkFBTyxLQUFLLFNBQVMsY0FBYyxTQUFTO0FBQUEsZ0JBQzlDLFdBQVcsS0FBSyxTQUFTLGNBQWMsQ0FBQyxJQUFJLEdBQUc7QUFDN0MseUJBQU8sS0FBSyxTQUFTLGNBQWMsV0FBVztBQUFBLGdCQUNoRCxPQUFPO0FBQ0w7QUFBQSxnQkFDRjtBQUNBO0FBQUEsY0FDRixLQUFLO0FBQ0gsdUJBQU8sS0FBSyxtQkFBbUIsR0FBRyxLQUFLLE1BQU0sS0FBSztBQUNsRDtBQUFBLGNBQ0YsS0FBSztBQUNILHVCQUFPLEtBQUssbUJBQW1CLEdBQUcsS0FBSyxNQUFNLElBQUk7QUFDakQ7QUFBQSxjQUNGLEtBQUs7QUFDSCx1QkFBTyxLQUFLLG1CQUFtQixHQUFHLEtBQUssTUFBTSxLQUFLO0FBQ2xEO0FBQUEsY0FDRixLQUFLO0FBQ0gsdUJBQU8sS0FBSyxtQkFBbUIsR0FBRyxLQUFLLE1BQU0sSUFBSTtBQUNqRDtBQUFBLGNBQ0Y7QUFDRTtBQUFBLFlBQ0o7QUFDQSxnQkFBSSxNQUFNO0FBRVIsa0JBQUksU0FBUyxLQUFLLFdBQVcsR0FBRyxHQUFHLEdBQUcsS0FBSyxNQUFNO0FBQ2pELGtCQUFJLENBQUMsUUFBUTtBQUNYLHdCQUFRLEtBQUssNEJBQTRCLEtBQUssTUFBTTtBQUNwRDtBQUFBLGNBQ0Y7QUFBQSxZQUNGO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBRUEsV0FBSyxVQUFVLE1BQU0sVUFBVTtBQUMvQixXQUFLLGFBQWEsWUFBWSxJQUFJO0FBQ2xDLFdBQUssZ0JBQWdCLE1BQU0sVUFBVTtBQUNyQyxXQUFLLGVBQWUsTUFBTSxVQUFVO0FBQUEsSUFDdEM7QUFBQSxJQUVBLFVBQVUsTUFBWSxZQUFzQjtBQUMxQyxVQUFJLEtBQUssTUFBTSxPQUFPO0FBQ3BCLFlBQUksT0FBTyxzQkFBc0IsWUFBWSxHQUFHO0FBQ2hELFlBQUksT0FBTyxLQUFLLFNBQVMsY0FBYyxNQUFNO0FBQzdDLFlBQUksU0FBUyxLQUFLLFdBQVcsS0FBSyxHQUFHLEdBQUcsS0FBSyxHQUFHLEtBQUssTUFBTTtBQUMzRCxlQUFPLHlCQUF5QixDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztBQUM5QyxhQUFLLFVBQVUsUUFBUSxLQUFLLGNBQWMsR0FBRyxHQUFHLEdBQUc7QUFBQSxNQUNyRDtBQUVBLFVBQUksS0FBSyxNQUFNLE9BQU87QUFDcEIsWUFBSSxPQUFPLHNCQUFzQixZQUFZLEdBQUc7QUFDaEQsWUFBSSxPQUFPLEtBQUssU0FBUyxjQUFjLE1BQU07QUFDN0MsWUFBSSxTQUFTLEtBQUssV0FBVyxLQUFLLEdBQUcsR0FBRyxLQUFLLEdBQUcsS0FBSyxNQUFNO0FBQzNELGFBQUssVUFBVSxRQUFRLEtBQUssY0FBYyxHQUFHLEdBQUcsR0FBRztBQUFBLE1BQ3JEO0FBRUEsVUFBSSxLQUFLLE1BQU0sTUFBTTtBQUNuQixZQUFJLE9BQU8sc0JBQXNCLFlBQVksR0FBRztBQUNoRCxZQUFJLE9BQU8sS0FBSyxTQUFTLGNBQWMsTUFBTTtBQUM3QyxZQUFJLFNBQVMsS0FBSyxXQUFXLEtBQUssR0FBRyxHQUFHLEtBQUssR0FBRyxLQUFLLE1BQU07QUFDM0QsZUFBTyx5QkFBeUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDN0MsYUFBSyxVQUFVLFFBQVEsS0FBSyxjQUFjLEdBQUcsR0FBRyxHQUFHO0FBQUEsTUFDckQ7QUFFQSxVQUFJLEtBQUssTUFBTSxNQUFNO0FBQ25CLFlBQUksT0FBTyxzQkFBc0IsWUFBWSxHQUFHO0FBQ2hELFlBQUksT0FBTyxLQUFLLFNBQVMsY0FBYyxNQUFNO0FBQzdDLFlBQUksU0FBUyxLQUFLLFdBQVcsS0FBSyxHQUFHLEdBQUcsS0FBSyxHQUFHLEtBQUssTUFBTTtBQUMzRCxlQUFPLHlCQUF5QixDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztBQUM5QyxhQUFLLFVBQVUsUUFBUSxLQUFLLGNBQWMsR0FBRyxHQUFHLEdBQUc7QUFBQSxNQUNyRDtBQUFBLElBQ0Y7QUFBQSxJQUVBLGVBQWUsTUFBWSxZQUFzQjtBQUMvQyxXQUFLLFNBQVMsbUJBQW1CO0FBRWpDLFlBQU0sZUFBZSxLQUFLLGdCQUFnQjtBQUUxQyxVQUFJLENBQUMsY0FBYztBQUNqQixnQkFBUSxLQUFLLDBDQUEwQztBQUN2RDtBQUFBLE1BQ0Y7QUFFQSxVQUFJLENBQUMsYUFBYSxjQUFjLGFBQWEsV0FBVyxVQUFVLEdBQUc7QUFDbkU7QUFBQSxNQUNGO0FBRUEsVUFBSSxnQkFBZ0Isc0JBQXNCLFlBQVksR0FBRztBQUN6RCxVQUFJLGVBQWU7QUFDakIsY0FBTSxnQkFBZ0IsYUFBYSxXQUFZLENBQUM7QUFDaEQsY0FBTSxZQUFZLEtBQUssU0FBUyxhQUFhLGFBQWE7QUFDMUQsbUJBQVcsaUJBQWlCLENBQUMsY0FBYyxHQUFHLEtBQUssY0FBYyxDQUFDLENBQUM7QUFBQSxNQUNyRTtBQUVBLFVBQUksZ0JBQWdCLHNCQUFzQixZQUFZLEdBQUc7QUFDekQsVUFBSSxlQUFlO0FBQ2pCLGNBQU0sZ0JBQWdCLGFBQWEsV0FBWSxDQUFDO0FBQ2hELGNBQU0sWUFBWSxLQUFLLFNBQVMsYUFBYSxhQUFhO0FBQzFELG1CQUFXLGlCQUFpQixDQUFDLGNBQWMsR0FBRyxLQUFLLGNBQWMsQ0FBQyxDQUFDO0FBQUEsTUFDckU7QUFFQSxVQUFJLGdCQUFnQixzQkFBc0IsWUFBWSxHQUFHO0FBQ3pELFVBQUksZUFBZTtBQUNqQixjQUFNLGdCQUFnQixhQUFhLFdBQVksQ0FBQztBQUNoRCxjQUFNLFlBQVksS0FBSyxTQUFTLGFBQWEsYUFBYTtBQUMxRCxtQkFBVyxpQkFBaUIsQ0FBQyxjQUFjLEdBQUcsS0FBSyxjQUFjLENBQUMsQ0FBQztBQUFBLE1BQ3JFO0FBQUEsSUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBUUEsVUFBVSxRQUFrQixNQUFXQyxZQUE0QjtBQUNqRSxVQUFJLFVBQVUsT0FBTyxhQUFhLFdBQVc7QUFDN0MsVUFBSSxTQUFTO0FBQ1gsZ0JBQVEsWUFBWUE7QUFDcEIsZ0JBQVEsY0FBYyxLQUFLO0FBQzNCLGdCQUFRLGNBQWMsS0FBSztBQUMzQixnQkFBUSxTQUFTO0FBQUEsTUFDbkI7QUFDRSxlQUFPLGFBQWEsYUFBYTtBQUFBLFVBQy9CLFdBQVdBO0FBQUEsVUFDWCxhQUFhLEtBQUs7QUFBQSxVQUNsQixhQUFhLEtBQUs7QUFBQSxRQUNwQixDQUFDO0FBQUEsSUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBUUEsbUJBQW1CLEdBQVcsU0FBb0M7QUFDaEUsVUFBSSxNQUFNLEdBQUc7QUFDWCxZQUFJLFNBQVM7QUFDWCxnQkFBTSxZQUFZLEtBQUssU0FBUyxjQUFjLFNBQVM7QUFDdkQsY0FBSSxDQUFDLFdBQVc7QUFDZCxrQkFBTSxJQUFJLE1BQU0scUJBQXFCO0FBQUEsVUFDdkM7QUFDQSxpQkFBTztBQUFBLFFBQ1QsT0FBTztBQUNMLGdCQUFNLFdBQVcsS0FBSyxTQUFTLGNBQWMsUUFBUTtBQUNyRCxjQUFJLENBQUMsVUFBVTtBQUNiLGtCQUFNLElBQUksTUFBTSxvQkFBb0I7QUFBQSxVQUN0QztBQUNBLGlCQUFPO0FBQUEsUUFDVDtBQUFBLE1BQ0YsV0FBVyxNQUFNLEdBQUc7QUFDbEIsWUFBSSxDQUFDLFNBQVM7QUFDWixnQkFBTSxXQUFXLEtBQUssU0FBUyxjQUFjLFFBQVE7QUFDckQsY0FBSSxDQUFDLFVBQVU7QUFDYixrQkFBTSxJQUFJLE1BQU0sb0JBQW9CO0FBQUEsVUFDdEM7QUFDQSxpQkFBTztBQUFBLFFBQ1QsT0FBTztBQUNMO0FBQUEsUUFDRjtBQUFBLE1BQ0YsT0FBTztBQUNMLGNBQU0sV0FBVyxLQUFLLFNBQVMsY0FBYyxRQUFRO0FBQ3JELFlBQUksQ0FBQyxVQUFVO0FBQ2IsZ0JBQU0sSUFBSSxNQUFNLG9CQUFvQjtBQUFBLFFBQ3RDO0FBQ0EsZUFBTztBQUFBLE1BQ1Q7QUFBQSxJQUNGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBUUEsYUFBYSxZQUF3QixNQUFXO0FBQzlDLGVBQVMsUUFBUSxHQUFHLFFBQVEsS0FBSyxRQUFRLFFBQVEsU0FBUztBQUN4RCxjQUFNLFFBQVEsS0FBSyxRQUFRLEtBQUs7QUFDaEMsY0FBTSxzQkFBc0I7QUFDNUIsWUFBSSxXQUFXLEtBQUssR0FBRztBQUNyQixnQkFBTSxhQUFhLGNBQWMsRUFBRyxTQUFTO0FBQzdDLGdCQUFNLGlCQUFpQixDQUFDLFdBQVcsS0FBSyxFQUFFLENBQUMsR0FBRyxHQUFHLFdBQVcsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQUEsUUFDeEUsT0FBTztBQUNMLGdCQUFNLGFBQWEsY0FBYyxFQUFHLFNBQVM7QUFBQSxRQUMvQztBQUFBLE1BQ0Y7QUFDQSxXQUFLO0FBQUEsSUFDUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLGdCQUFnQixNQUFZLFlBQWlCO0FBQzNDLFlBQU0sVUFBVSxJQUFJLE1BQU0sRUFBRSxRQUFRLENBQUM7QUFFckMsVUFBSSxhQUFhO0FBRWpCLGVBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDMUMsaUJBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsUUFBUSxLQUFLO0FBQzdDLGNBQUk7QUFDSixjQUFJLFdBQVc7QUFDZixrQkFBUSxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUc7QUFBQSxZQUN4QixLQUFLO0FBRUgsb0JBQU0sUUFBUSxLQUFLLGdCQUFnQixFQUFHO0FBQ3RDLGtCQUFJLENBQUMsT0FBTztBQUNWO0FBQUEsY0FDRjtBQUNBLG9CQUFNLGNBQWMsTUFBTSxPQUFPLENBQUMsS0FBNkIsTUFBTTtBQUNuRSxvQkFBSSxFQUFFLElBQUksSUFBSSxFQUFFLFVBQVU7QUFDMUIsdUJBQU87QUFBQSxjQUNULEdBQUcsQ0FBQyxDQUFDO0FBQ0wsa0JBQUksV0FBVyxRQUFRLGlCQUFpQixXQUFXO0FBQ25ELG9CQUFNLE9BQU8sTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsUUFBUTtBQUNsRCxxQkFBTyxLQUFLLFNBQVMsY0FBYyxLQUFLLElBQUk7QUFFNUMsa0JBQUksS0FBSyxtQkFBbUI7QUFDMUIsb0JBQ0UsV0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sT0FDekIsV0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sT0FDekIsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sT0FDekIsV0FBVyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sS0FDekI7QUFDQTtBQUFBLGdCQUNGO0FBQUEsY0FDRjtBQUVBLGtCQUFJLEtBQUssVUFBVTtBQUNqQixzQkFBTSxhQUFhO0FBQUEsa0JBQ2pCLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxVQUFVLElBQUk7QUFBQSxrQkFDN0IsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLFVBQVUsR0FBRztBQUFBLGtCQUMzQixFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUcsVUFBVSxJQUFJO0FBQUEsa0JBQzdCLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxVQUFVLEVBQUU7QUFBQSxnQkFDNUI7QUFDQSxvQkFBSSxvQkFBb0IsQ0FBQztBQUN6QiwyQkFBVyxPQUFPLFlBQVk7QUFDNUIsc0JBQUksV0FBVyxJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSztBQUM1QyxzQ0FBa0IsS0FBSyxHQUFHO0FBQUEsa0JBQzVCO0FBQUEsZ0JBQ0Y7QUFDQSxvQkFBSSxrQkFBa0IsU0FBUyxHQUFHO0FBQ2hDLDZCQUFXLFFBQVEsUUFBUSxpQkFBaUIsRUFBRTtBQUFBLGdCQUNoRDtBQUFBLGNBQ0Y7QUFDQTtBQUFBLFlBQ0YsS0FBSztBQUNILGtCQUFJLENBQUMsWUFBWTtBQUNmLHVCQUFPLEtBQUssU0FBUyxjQUFjLFNBQVM7QUFDNUMsNkJBQWE7QUFBQSxjQUNmO0FBQ0E7QUFBQSxZQUNGLEtBQUs7QUFDSCxvQkFBTSxTQUFTLEtBQUssZ0JBQWdCLEVBQUc7QUFDdkMsa0JBQUksQ0FBQyxRQUFRO0FBQ1gsd0JBQVEsS0FBSyxxRUFBcUU7QUFDbEY7QUFBQSxjQUNGO0FBQ0Esb0JBQU0sZUFBZSxPQUFPLE9BQU8sQ0FBQyxLQUE2QixNQUFNO0FBQ3JFLG9CQUFJLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSxJQUFJLEVBQUUsVUFBVTtBQUNuRCx1QkFBTztBQUFBLGNBQ1QsR0FBRyxDQUFDLENBQUM7QUFDTCxrQkFBSSxZQUFZLFFBQVEsaUJBQWlCLFlBQVk7QUFFckQsb0JBQU0sUUFBUSxPQUFPO0FBQUEsZ0JBQ25CLENBQUMsTUFBTSxFQUFFLGFBQWEsVUFBVyxNQUFNLEdBQUcsRUFBRSxDQUFDLEtBQUssRUFBRSxTQUFTLFVBQVcsTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUFBLGNBQ3RGO0FBSUEscUJBQU8sS0FBSyxTQUFTLGNBQWMsU0FBVTtBQUM3Qyx5QkFBVyxNQUFNO0FBQ2pCO0FBQUEsWUFDRjtBQUNFO0FBQUEsVUFDSjtBQUNBLGNBQUksTUFBTTtBQUVSLGdCQUFJLFNBQVMsS0FBSyxXQUFXLEdBQUcsR0FBRyxHQUFHLEtBQUssTUFBTTtBQUNqRCxtQkFBTyx5QkFBeUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLFFBQVE7QUFBQSxVQUNyRDtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQVVBLFdBQVcsR0FBVyxHQUFXLEdBQVcsTUFBZ0I7QUFDMUQsVUFBSSxXQUFXO0FBQ2YsVUFBSSxNQUFNLFlBQVksS0FBSyxTQUFTLFVBQVUsS0FBSyxXQUFXO0FBQzlELFVBQUksQ0FBQyxLQUFLO0FBQ1IsY0FBTSxJQUFJLE1BQU0sdUJBQXVCO0FBQUEsTUFDekM7QUFDQSxVQUFJLHNCQUFzQjtBQUMxQixVQUFJLGlCQUFpQixDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDOUIsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGOzs7QWtDcmJBO0FBQUE7QUFBQTtBQUFBO0FBT08sV0FBUyxxQkFBcUJDLFlBQTBDO0FBQzNFLFlBQU9BLFlBQVU7QUFBQSxNQUNiLEtBQUs7QUFBSyxlQUFPO0FBQUEsTUFDakIsS0FBSztBQUFLLGVBQU87QUFBQSxNQUNqQixLQUFLO0FBQUssZUFBTztBQUFBLE1BQ2pCLEtBQUs7QUFBSyxlQUFPO0FBQUEsSUFDckI7QUFBQSxFQUNKOzs7QWhFQ0EsTUFBTSxPQUFPO0FBR04sTUFBTSxpQkFBTixjQUE2QixVQUFVO0FBQUEsSUFPNUM7QUFBQSxJQU1BO0FBQUEsSUFNQTtBQUFBLElBR0E7QUFBQSxJQUdBO0FBQUEsSUFHQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0E7QUFBQSxJQUVBO0FBQUEsSUFFQTtBQUFBLElBRUE7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBS0EsT0FBTztBQUNMLFdBQUssWUFBWSxTQUFVLFFBQVEsU0FBUztBQUU1QyxXQUFLLFlBQVksSUFBSSxjQUFjLE1BQU0sSUFBSTtBQUFBLElBQy9DO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQSxRQUFRO0FBQ04sWUFBTSxNQUFNLEtBQUssaUJBQWlCLGFBQWEsVUFBVTtBQUN6RCxVQUFJLENBQUMsS0FBSztBQUNSLGNBQU0sSUFBSSxNQUFNLG1EQUFtRDtBQUFBLE1BQ3JFO0FBQ0EsV0FBSyxzQkFBc0I7QUFBQSxJQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU9BLFNBQVMsUUFBZ0IsR0FBRyxTQUEwQixNQUFXO0FBQy9ELFdBQUssY0FBYyxVQUFVLEtBQUs7QUFFbEMsV0FBSyxVQUFVLElBQUk7QUFBQSxRQUNqQixLQUFLLFlBQVk7QUFBQSxRQUNqQixLQUFLLFFBQVE7QUFBQSxRQUNiLEtBQUssV0FBVztBQUFBLE1BQVE7QUFDMUIsV0FBSyxhQUFhLElBQUksV0FBVztBQUVqQyxXQUFLLFVBQVUsU0FBUztBQUV4QixXQUFLLFlBQVksU0FBUyxTQUFTO0FBQ25DLFVBQUksQ0FBQyxLQUFLLG1CQUFtQjtBQUMzQixhQUFLLG9CQUFxQixJQUFJO0FBQUEsVUFDNUIsS0FBSztBQUFBLFVBQ0w7QUFBQSxVQUNBO0FBQUEsVUFDQSxLQUFLO0FBQUEsVUFDTDtBQUFBLFFBQ0Y7QUFBQSxNQUNGLE9BQU87QUFDTCxhQUFLLGtCQUFrQixNQUFNO0FBQUEsTUFDL0I7QUFFQSxXQUFLLGVBQWUsSUFBSTtBQUFBLFFBQ3RCLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUs7QUFBQSxRQUNMLEtBQUssT0FBTztBQUFBLFFBQ1osS0FBSztBQUFBLE1BQ1A7QUFDQSxXQUFLLGFBQWEsS0FBSztBQUV2QixXQUFLLFVBQVUsbUJBQW1CLFVBQVUsQ0FBQyxNQUFNO0FBQ2pELGNBQU0sY0FBYyxLQUFLLFVBQVUsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztBQUNyRCxhQUFLLG9CQUFvQixpQkFBaUIsS0FBSyxNQUFNO0FBQ25ELGVBQUssV0FBVyxNQUFNO0FBQ3RCLGVBQUssYUFBYSxPQUFPLFdBQVc7QUFDcEMsY0FBSSxLQUFLLFVBQVUsMkJBQTJCO0FBQzVDLGdCQUFJLGlCQUFpQjtBQUFBLGNBQ25CLEtBQUssVUFBVTtBQUFBLFlBQ2pCO0FBQ0EsZ0JBQUksT0FBTyxZQUFZLFFBQVEsY0FBYztBQUM3QyxnQkFBSSxNQUFNO0FBQ1Isa0JBQUksV0FBVztBQUNmLHNCQUFRLGdCQUFnQjtBQUFBLGdCQUN0QixLQUFLO0FBQ0gsdUJBQUssS0FBSztBQUNWLDZCQUFXO0FBQ1g7QUFBQSxnQkFDRixLQUFLO0FBQ0gsdUJBQUssS0FBSztBQUNWLDZCQUFXO0FBQ1g7QUFBQSxnQkFDRixLQUFLO0FBQ0gsdUJBQUssS0FBSztBQUNWLDZCQUFXO0FBQ1g7QUFBQSxnQkFDRixLQUFLO0FBQ0gsdUJBQUssS0FBSztBQUNWLDZCQUFXO0FBQ1g7QUFBQSxjQUNKO0FBQ0EsbUJBQUssVUFBVSxpQkFBaUIsQ0FBQyxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDbEQsbUJBQUssVUFBVSxpQkFBaUI7QUFBQSxZQUNsQztBQUFBLFVBQ0Y7QUFBQSxRQUNGLENBQUM7QUFFRCxhQUFLLG9CQUFvQixRQUFRO0FBQ2pDLGFBQUssVUFBVSxlQUFlLFdBQVc7QUFBQSxNQUMzQyxDQUFDO0FBRUQsV0FBSyxZQUFZLEtBQUssU0FBUztBQUFBLElBQ2pDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxJQU1BLFlBQVksV0FBMEI7QUFDcEMsWUFBTUMsVUFBUyxTQUFTLGNBQWMsUUFBUTtBQUU5QyxNQUFBQSxRQUFPLE1BQU0sV0FBVztBQUN4QixNQUFBQSxRQUFPLE1BQU0sTUFBTTtBQUNuQixNQUFBQSxRQUFPLE1BQU0sT0FBTztBQUNwQixNQUFBQSxRQUFPLE1BQU0sU0FBUztBQUV0QixNQUFBQSxRQUFPLE1BQU0sUUFBUTtBQUNyQixNQUFBQSxRQUFPLE1BQU0saUJBQWlCO0FBRTlCLE1BQUFBLFFBQU8sUUFBUTtBQUNmLE1BQUFBLFFBQU8sU0FBUztBQUNoQixZQUFNLE1BQU1BLFFBQU8sV0FBVyxJQUFJO0FBQ2xDLFVBQUksWUFBWTtBQUNoQixVQUFJLFNBQVMsR0FBRyxHQUFHQSxRQUFPLE9BQU9BLFFBQU8sTUFBTTtBQUU5QyxlQUFTLE1BQU0sR0FBRyxNQUFNLE1BQU0sT0FBTztBQUNuQyxpQkFBUyxNQUFNLEdBQUcsTUFBTSxNQUFNLE9BQU87QUFFbkMsZ0JBQU0sY0FBYyxVQUFVLFFBQVEsS0FBSyxHQUFHO0FBRTlDLGNBQUksS0FBSztBQUVULGdCQUFNLFVBQVUsS0FBSyxXQUFXLElBQUksWUFBWSxNQUFNLENBQUM7QUFFdkQsbUJBQVMsVUFBVSxHQUFHLFVBQVUsSUFBSSxXQUFXO0FBRTdDLHFCQUFTLGFBQWEsR0FBRyxhQUFhLElBQUksY0FBYztBQUd0RCxvQkFBTSxZQUFZLE1BQU0sS0FBSyxVQUFXLE9BQU8sS0FBTTtBQUNyRCxvQkFBTSxZQUFZLE1BQU0sS0FBSyxhQUFjLE9BQU8sS0FBTTtBQUV4RCxrQkFBSSxZQUFZLFFBQVEsT0FBTyxFQUFFLFVBQVU7QUFDM0Msa0JBQUksWUFBWSxZQUFZO0FBQzFCLDRCQUFZO0FBQUEsY0FDZDtBQUNBLGtCQUFJLFlBQVksUUFBUTtBQUN0Qiw0QkFBWTtBQUFBLGNBQ2Q7QUFDQSxrQkFBSSxZQUFZLGNBQWMsYUFBYSxHQUFHO0FBQzVDLDRCQUFZO0FBQUEsY0FDZDtBQUNBLGtCQUFJLE9BQU8sS0FBSyxRQUFRLFFBQVEsU0FBUztBQUl6QyxzQkFBUSxXQUFXO0FBQUEsZ0JBQ2pCLEtBQUs7QUFDSCxzQkFBSSxZQUFZO0FBQ2hCO0FBQUEsZ0JBQ0YsS0FBSztBQUNILHNCQUFJLFlBQVk7QUFDaEI7QUFBQSxnQkFDRixLQUFLO0FBQ0gsc0JBQUksWUFBWTtBQUNoQjtBQUFBLGdCQUNGLEtBQUs7QUFDSCxzQkFBSSxZQUFZO0FBQ2hCO0FBQUEsZ0JBQ0Y7QUFDRSxzQkFBSSxZQUFZO0FBQ2hCO0FBQUEsY0FDSjtBQUNBLGtCQUFJLGFBQWE7QUFDZixvQkFBSTtBQUFBLG1CQUNELFlBQWEsT0FBTyxLQUFNLEtBQUs7QUFBQSxtQkFDL0IsWUFBYSxPQUFPLEtBQU0sS0FBSztBQUFBLGtCQUNoQztBQUFBLGtCQUNBO0FBQUEsZ0JBQ0Y7QUFBQSxZQUNKO0FBQUEsVUFDRjtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQ0EsZUFBUyxLQUFLLFlBQVlBLE9BQU07QUFBQSxJQUNsQztBQUFBLElBR0EsV0FBVyxHQUFVLEdBQVUsR0FBVSxNQUFlO0FBQ3RELFVBQUksV0FBVztBQUNmLFVBQUksTUFBTSxZQUFZLEtBQUssUUFBUSxVQUFVLEtBQUssVUFBVTtBQUM1RCxVQUFHLENBQUMsS0FBSTtBQUNOLGNBQU0sSUFBSSxNQUFNLDZCQUE2QixTQUFTLElBQUk7QUFBQSxNQUM1RDtBQUNBLFVBQUksc0JBQXNCO0FBQzFCLFVBQUksaUJBQWlCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUFBLElBQ2hDO0FBQUEsRUFDRjtBQS9PRSxnQkFEVyxnQkFDSixZQUFXO0FBTWxCO0FBQUEsSUFEQyxTQUFTLE9BQU87QUFBQSxLQU5OLGVBT1g7QUFNQTtBQUFBLElBREMsU0FBUyxPQUFPO0FBQUEsS0FaTixlQWFYO0FBTUE7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBbEJOLGVBbUJYO0FBR0E7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBckJOLGVBc0JYO0FBR0E7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBeEJOLGVBeUJYO0FBR0E7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBM0JOLGVBNEJYOzs7QWlFOUNGLE1BQU0sT0FBTztBQUFBLElBQ1QsTUFBTTtBQUFBLElBRU4sWUFBWSxXQUFZO0FBQ3BCLFdBQUssT0FBTyxRQUFRLEtBQUs7QUFBQSxJQUM3QjtBQUFBLElBRUEsT0FBTyxNQUFNLEdBQUc7QUFDWixVQUFJLE1BQU0sR0FBRztBQUNULGVBQU87QUFBQSxNQUNYO0FBQ0EsYUFBTztBQUFBLElBQ1g7QUFBQSxJQUVBLFdBQVcsTUFBTSxHQUFHO0FBQ2hCLFVBQUksTUFBTSxHQUFHO0FBQ1QsZUFBTztBQUFBLE1BQ1g7QUFDQSxhQUFPO0FBQUEsSUFDWDtBQUFBLEVBQ0o7QUFFQSxNQUFPLGVBQVE7OztBbkV0QmY7QUFTTyxNQUFNLE9BQU4sY0FBbUIsVUFBVTtBQUFBLElBQTdCO0FBQUE7QUFRTDtBQUdBO0FBRUE7QUFDQTtBQUFBO0FBQUEsSUFFQSxPQUFPO0FBQ0wsV0FBSyxZQUFZLFNBQVUsUUFBUSxTQUFTO0FBRTVDLFlBQU0sS0FBSyxLQUFLLGVBQWUsYUFBYSxjQUFjO0FBQzFELFVBQUcsQ0FBQyxJQUFHO0FBQ0wsY0FBTSxJQUFJLE1BQU0sNENBQTRDO0FBQUEsTUFDOUQ7QUFDQSx5QkFBSyxXQUFZO0FBRWpCLFdBQUssT0FBTyxpQkFBaUIsSUFBSSxNQUFPLEtBQUssVUFBVSxTQUFTLElBQUs7QUFDckUsV0FBSyxPQUFPLGVBQWUsSUFBSSxNQUFPLEtBQUssVUFBVSxTQUFTLEtBQU07QUFFcEUsV0FBSyxPQUFPLGlCQUFpQixJQUFJLE1BQU07QUFBQSxNQUFDLENBQUM7QUFFekMsV0FBSyxVQUFVLFFBQVEsTUFBTTtBQUFBLElBQy9CO0FBQUEsSUFFQSxRQUFRO0FBQ04sV0FBSyxVQUFVLGFBQWE7QUFBQSxRQUFVLENBQUMsVUFBVTtBQUMvQyxjQUFJLFNBQVMsbUJBQUssV0FBVSxTQUFTLEtBQUs7QUFDMUMsZUFBSyxVQUFVLGVBQWUsR0FBRyxDQUFDO0FBQUEsUUFFcEM7QUFBQSxNQUNBO0FBQ0EsWUFBTSxZQUFZLElBQUksTUFBTTtBQUM1QixnQkFBVSxZQUFZLFlBQUk7QUFDMUIsY0FBUSxJQUFJLEdBQUcsVUFBVSxRQUFRLFVBQVUsT0FBTyxHQUFHO0FBRXJELGlCQUFXLE1BQU07QUFDZixhQUFLLFVBQVUsUUFBUTtBQUFBLE1BQ3pCLEdBQUcsR0FBSTtBQUVQLGFBQU8saUJBQWlCLFNBQVMsQ0FBQyxNQUFNO0FBQ3RDLFlBQUksSUFBSSxLQUFLLFVBQVU7QUFDdkIsWUFBSSxFQUFFLFFBQVEsVUFBVTtBQUN0QixZQUFFLENBQUMsS0FBSztBQUNSLGVBQUssVUFBVSw0QkFBNEI7QUFDM0MsZUFBSyxVQUFVLGNBQWM7QUFBQSxRQUMvQjtBQUNBLFlBQUksRUFBRSxRQUFRLFVBQVU7QUFDdEIsWUFBRSxDQUFDLEtBQUs7QUFDUixlQUFLLFVBQVUsNEJBQTRCO0FBQzNDLGVBQUssVUFBVSxjQUFjO0FBQUEsUUFDL0I7QUFDQSxZQUFJLEVBQUUsUUFBUSxVQUFVO0FBQ3RCLFlBQUUsQ0FBQyxLQUFLO0FBQ1IsZUFBSyxVQUFVLDRCQUE0QjtBQUMzQyxlQUFLLFVBQVUsY0FBYztBQUFBLFFBQy9CO0FBQ0EsWUFBSSxFQUFFLFFBQVEsVUFBVTtBQUN0QixZQUFFLENBQUMsS0FBSztBQUNSLGVBQUssVUFBVSw0QkFBNEI7QUFDM0MsZUFBSyxVQUFVLGNBQWM7QUFBQSxRQUMvQjtBQUVBLFlBQUksRUFBRSxRQUFRLFVBQVU7QUFDdEIsZUFBSyxVQUFVLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsT0FBTyxHQUFHLFNBQVMsS0FBSyxjQUFhLEdBQUUsR0FBRSxDQUFDO0FBQUEsUUFDOUY7QUFBQztBQUFBLE1BQ0gsQ0FBQztBQUFBLElBQ0g7QUFBQSxJQUVTLE9BQU8sT0FBcUI7QUFBQSxJQUVyQztBQUFBLEVBQ0Y7QUFuRUU7QUFaQSxnQkFEVyxNQUNKLFlBQVc7QUFDbEIsZ0JBRlcsTUFFSixjQUFhO0FBQUEsSUFDbEIsZ0JBQWdCLFNBQVMsT0FBTztBQUFBLElBQ2hDLGNBQWMsU0FBUyxPQUFPO0FBQUEsRUFDaEM7QUFHQTtBQUFBLElBREMsU0FBUyxPQUFPO0FBQUEsS0FQTixLQVFYO0FBR0E7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBVk4sS0FXWDs7O0FvRXBCRjtBQUFBO0FBQUE7QUFBQTtBQUdPLE1BQU0sU0FBTixjQUFxQixVQUFVO0FBQUEsSUFPbEM7QUFBQSxJQUVBLE9BQU8sSUFBWTtBQUNkLFVBQUksS0FBSyxRQUFRO0FBQ2QsWUFBSSxNQUFNLEtBQUssT0FBTyxpQkFBaUI7QUFDdkMsYUFBSyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRSxHQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDcEMsYUFBSyxPQUFPLHlCQUF5QixDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRztBQUFBLE1BQ3REO0FBQUEsSUFDTDtBQUFBLEVBRUo7QUFoQkksZ0JBRFMsUUFDRixZQUFXO0FBTWxCO0FBQUEsSUFEQyxTQUFTLE9BQU87QUFBQSxLQU5SLE9BT1Q7OztBQ1ZKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFVTyxNQUFNLGFBQU4sY0FBeUIsVUFBVTtBQUFBLElBQW5DO0FBQUE7QUFnREw7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQXVCQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBaUdBO0FBQUE7QUFBQTtBQUFBO0FBYUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQTFMQTtBQU1BO0FBTUEsd0NBQXFCLEtBQUc7QUFNeEI7QUFNQTtBQUNBLDJDQUF5QjtBQUN6QjtBQUNBLHlDQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQThEQSw2Q0FBa0I7QUFBQTtBQUFBLElBNURsQixPQUFhO0FBQ1gsV0FBSyxZQUFZLFNBQVUsUUFBUSxTQUFTO0FBQUEsSUFDOUM7QUFBQSxJQThDQSxRQUFRO0FBQ04sV0FBSyxnQkFBZ0I7QUFFckIsV0FBSyxRQUFRLEtBQUssT0FBTyxhQUFhLE9BQU87QUFDN0MsVUFBRyxDQUFDLEtBQUssT0FBTztBQUNkLGdCQUFRLE1BQU0sK0RBQStEO0FBQUEsTUFDL0U7QUFFQSw0QkFBSyxvQ0FBTDtBQUNBLFdBQUssY0FBYztBQUFBLElBQ3JCO0FBQUEsSUFJQSxPQUFPLElBQVc7QUFFaEIsVUFBSSxnQkFBZ0IsS0FBSyxNQUFNO0FBQy9CLFVBQUksQ0FBQyxLQUFLLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLFdBQ3hELENBQUMsY0FBYyxRQUFRLFNBQVM7QUFDaEM7QUFBQSxNQUNGO0FBQ0EsWUFBTSxnQkFBZ0IsY0FBYyxRQUFRLFFBQVEsQ0FBQyxFQUFFO0FBQ3ZELFVBQUksaUJBQWlCLEtBQUssa0JBQWtCLFNBQVMsc0JBQUssNEJBQUwsWUFBb0I7QUFDdkUsYUFBSyxnQkFBZ0I7QUFBQSxNQUN2QjtBQUVBLFVBQUksQ0FBQyxpQkFBaUIsS0FBSyxrQkFBa0IsTUFBTTtBQUNqRCxhQUFLLGdCQUFnQjtBQUNyQixZQUFJLEtBQUssU0FBUztBQUNoQixnQkFBTSxTQUFTLEtBQUssVUFBVSxpQkFBaUI7QUFDL0MsZ0JBQU0sSUFBSSxPQUFPLENBQUM7QUFDbEIsZ0JBQU0sSUFBSSxPQUFPLENBQUM7QUFDbEIsY0FBSSxzQkFBSyxvQ0FBTCxXQUFxQixLQUFLLFdBQVcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxLQUFLLGlCQUFpQjtBQUMxRSxrQ0FBSyxvQkFBTCxXQUFhLEtBQUssV0FBVyxHQUFHLEdBQUc7QUFBQSxVQUNyQztBQUVBLGNBQUksQ0FBQyxLQUFLLGlCQUFpQjtBQUN6QixrQ0FBSyxvQ0FBTDtBQUFBLFVBRUY7QUFDQSxlQUFLLFVBQVU7QUFBQSxRQUNqQjtBQUFBLE1BQ0Y7QUFFQSxVQUFJLEtBQUssZUFBZTtBQUN0QixjQUFNLGlCQUFpQixLQUFLLE9BQU8saUJBQWlCO0FBQ3BELGNBQU0saUJBQWlCLEtBQUssT0FBTyxpQkFBaUI7QUFFcEQsWUFBSSxTQUFTLGFBQUssTUFBTSxjQUFjO0FBRXRDLFlBQUksaUJBQWlCLGFBQUssV0FBVyxHQUFHLEdBQUcsRUFBRTtBQUM3QyxZQUFJLG1CQUFtQixhQUFLLE9BQU87QUFDbkMscUJBQUssY0FBYyxrQkFBa0IsZ0JBQWdCLGNBQWM7QUFFbkUsWUFBSSxTQUFTLEtBQUssT0FBTyxNQUFNO0FBQUEsVUFDN0I7QUFBQSxVQUNBO0FBQUEsVUFDQSxLQUFLLEtBQUs7QUFBQSxRQUNaO0FBRUEsWUFBSSxPQUFPLFdBQVcsR0FBRztBQUN2QixjQUFJLEtBQUssaUJBQWlCO0FBQ3hCLGlCQUFLLGtCQUFrQjtBQUFBLFVBQ3pCO0FBQ0EsZUFBSyxVQUFVLE9BQU8sVUFBVSxDQUFDO0FBQ2pDLGVBQUssWUFBWSxPQUFPLFFBQVEsQ0FBQztBQUNqQyxnQkFBTSxTQUFTLEtBQUssVUFBVSxpQkFBaUI7QUFDL0MsZ0JBQU0sSUFBSSxPQUFPLENBQUM7QUFDbEIsZ0JBQU0sSUFBSSxPQUFPLENBQUM7QUFDbEIsY0FBSSxNQUFNLEtBQUssT0FBTyxpQkFBaUI7QUFDdkMsY0FBSSxPQUFPLGFBQUssV0FBVyxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztBQUVqRSxjQUFHLGFBQUssU0FBUyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLO0FBQ25DLGlCQUFLLGtCQUFrQjtBQUFBLFVBQ3pCLE9BQUs7QUFDSCxpQkFBSyxrQkFBa0I7QUFBQSxVQUN6QjtBQUVELGdDQUFLLGtDQUFMLFdBQW9CLEtBQUssV0FBVyxHQUFHLEdBQUcsR0FBRyxLQUFLO0FBQUEsUUFDcEQsT0FBTztBQUNMLGNBQUksQ0FBQyxLQUFLLGlCQUFpQjtBQUN6QixrQ0FBSyxvQ0FBTDtBQUFBLFVBQ0Y7QUFDQSxlQUFLLFVBQVU7QUFDZixlQUFLLFlBQVk7QUFBQSxRQUNuQjtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUEsRUFxREY7QUFwTEU7QUFBQSxrQkFBVyxXQUFZO0FBQ3JCLFdBQU87QUFBQSxFQUNUO0FBVUE7QUFBQSxzQkFBZSxTQUFDLEtBQWUsR0FBVyxHQUFXLEdBQW9CO0FBQ3ZFLFFBQUksT0FBTyxJQUFJLGFBQWEsSUFBSTtBQUNoQyxRQUFJLENBQUMsTUFBTTtBQUNULGFBQU87QUFBQSxJQUNUO0FBQ0EsUUFBSSxLQUFLLFVBQVUsVUFBVSxNQUFNLFNBQVM7QUFDMUMsVUFBSSxLQUFLLE9BQU8sUUFBUSxHQUFHO0FBQ3pCLGVBQU87QUFBQSxNQUNUO0FBQ0EsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPLEtBQUssVUFBVSxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQUEsRUFFdkM7QUFTQTtBQUFBLGNBQU8sU0FBQyxLQUFlLEdBQVcsR0FBVyxHQUFXO0FBQ3RELFdBQU8sS0FBSyxVQUFVLEtBQUssS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBRXpDO0FBOEZBO0FBQUEsc0JBQWUsV0FBRztBQUNoQixTQUFLLHdCQUF3QixpQkFBaUIsQ0FBQyxLQUFNLE1BQU8sR0FBSSxDQUFDO0FBQ2pFLFNBQUssMkJBQTJCLGlCQUFpQixDQUFDLEtBQU0sTUFBTyxHQUFJLENBQUM7QUFDcEUsU0FBSyxrQkFBa0I7QUFBQSxFQUN6QjtBQVNBO0FBQUEscUJBQWMsU0FBQyxLQUFlLEdBQVcsR0FBVyxHQUFXLGtCQUEyQixPQUFPO0FBRS9GLFFBQUcsaUJBQWdCO0FBQ2pCLFdBQUssd0JBQXdCLGlCQUFpQixDQUFDLEtBQU0sTUFBTyxHQUFJLENBQUM7QUFDakUsV0FBSywyQkFBMkIsc0JBQXNCO0FBQ3RELFdBQUssMkJBQTJCLGlCQUFpQixDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDN0Q7QUFBQSxJQUNGO0FBRUEsUUFBSSxPQUFPLElBQUksYUFBYSxJQUFJO0FBQ2hDLFFBQUksQ0FBQztBQUFNO0FBQ1gsWUFBUSxNQUFNO0FBQUEsTUFDWixLQUFLLEtBQUssT0FBTyxPQUFPO0FBQ3RCLFlBQUksc0JBQUssb0NBQUwsV0FBcUIsS0FBSyxHQUFHLEdBQUcsSUFBSTtBQUN0QyxlQUFLLDJCQUEyQixpQkFBaUI7QUFBQSxZQUMvQztBQUFBLFlBQU07QUFBQSxZQUFPO0FBQUEsVUFDZixDQUFDO0FBQ0QsZUFBSyx3QkFBd0Isc0JBQXNCO0FBQ25ELGVBQUssd0JBQXdCLGlCQUFpQixDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFBQSxRQUM1RCxPQUFPO0FBQ0wsZUFBSyx3QkFBd0IsaUJBQWlCLENBQUMsS0FBTSxNQUFPLEdBQUksQ0FBQztBQUNqRSxlQUFLLDJCQUEyQixzQkFBc0I7QUFDdEQsZUFBSywyQkFBMkIsaUJBQWlCLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQztBQUFBLFFBQy9EO0FBQ0E7QUFBQSxNQUNGLEtBQUssS0FBSyxPQUFPLFFBQVE7QUFLdkI7QUFBQSxNQUNGLEtBQUssS0FBSyxPQUFPLE1BQU07QUFDckI7QUFBQSxJQUNKO0FBQUEsRUFDRjtBQWxPQSxnQkFEVyxZQUNKLFlBQVc7QUFNbEI7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBTk4sV0FPWDtBQU1BO0FBQUEsSUFEQyxTQUFTLE9BQU87QUFBQSxLQVpOLFdBYVg7QUFNQTtBQUFBLElBREMsU0FBUyxJQUFJLEtBQUcsQ0FBQztBQUFBLEtBbEJQLFdBbUJYO0FBTUE7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBeEJOLFdBeUJYO0FBTUE7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBOUJOLFdBK0JYOzs7QUN6Q0Y7QUFBQTtBQUFBO0FBQUE7QUFPTyxNQUFNLGdCQUFOLGNBQTRCLFVBQVU7QUFBQSxJQUl6QyxTQUFpQjtBQUFBLElBRWpCO0FBQUEsSUFDQTtBQUFBLElBRUEsUUFBUTtBQUNKLFdBQUssT0FBTyxzQkFBc0I7QUFDbEMsV0FBSyxPQUFPLGVBQWUsQ0FBQyxHQUFLLEtBQUssUUFBUSxDQUFHLENBQUM7QUFFbEQsV0FBSyx5QkFBeUIsS0FBSyxpQkFBaUIsS0FBSyxJQUFJO0FBQzdELFdBQUssdUJBQXVCLEtBQUssZUFBZSxLQUFLLElBQUk7QUFBQSxJQUM3RDtBQUFBLElBRUEsYUFBYTtBQUNULFdBQUssT0FBTyxpQkFBaUIsSUFBSSxLQUFLLHNCQUFzQjtBQUM1RCxXQUFLLE9BQU8sZUFBZSxJQUFJLEtBQUssb0JBQW9CO0FBQUEsSUFDNUQ7QUFBQSxJQUVBLGVBQWU7QUFDWCxXQUFLLE9BQU8saUJBQWlCLE9BQU8sS0FBSyxzQkFBc0I7QUFDL0QsV0FBSyxPQUFPLGVBQWUsT0FBTyxLQUFLLG9CQUFvQjtBQUFBLElBQy9EO0FBQUEsSUFFQSxtQkFBbUI7QUFDZixVQUFJLENBQUMsQ0FBQyxTQUFTLFFBQVEsRUFBRSxTQUFTLEtBQUssT0FBTyxJQUFJLHlCQUEwQixHQUFHO0FBQzNFLGFBQUssT0FBTyxzQkFBc0I7QUFBQSxNQUN0QztBQUFBLElBQ0o7QUFBQSxJQUVBLGlCQUFpQjtBQUNiLFVBQUksQ0FBQyxDQUFDLFNBQVMsUUFBUSxFQUFFLFNBQVMsS0FBSyxPQUFPLElBQUkseUJBQTBCLEdBQUc7QUFDM0UsYUFBSyxPQUFPLHNCQUFzQjtBQUNsQyxhQUFLLE9BQU8sZUFBZSxDQUFDLEdBQUssS0FBSyxRQUFRLENBQUcsQ0FBQztBQUFBLE1BQ3REO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUF0Q0ksZ0JBRFMsZUFDRixZQUFXO0FBR2xCO0FBQUEsSUFEQyxTQUFTLE1BQU07QUFBQSxLQUhQLGNBSVQ7OztBQ1hKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFTTyxNQUFNLG1CQUFOLGNBQStCLFVBQVU7QUFBQSxJQUF6QztBQUFBO0FBb0RMO0FBc0JBO0FBeERBO0FBTUE7QUFNQTtBQU1BO0FBRUEsMEJBQVEsWUFBd0IsSUFBSSxhQUFhLENBQUM7QUFDbEQsMEJBQVEsYUFBeUIsSUFBSSxhQUFhLENBQUM7QUFDbkQ7QUFBQTtBQUFBLElBRUEsT0FBTztBQUNMLFdBQUssWUFBWSxTQUFVLFFBQVEsU0FBUztBQUM1QyxXQUFLLFVBQVUsc0JBQXNCLFVBQVUsQ0FBQyxRQUFRO0FBQ3RELDhCQUFLLG9DQUFMLFdBQXFCO0FBQUEsTUFDdkIsQ0FBQztBQUNELFdBQUssVUFBVSxzQkFBc0IsVUFBVSxDQUFDLGFBQWE7QUFDM0QsOEJBQUssZ0NBQUwsV0FBbUI7QUFBQSxNQUNyQixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBNEJGO0FBMUJFO0FBQUEsc0JBQWUsU0FBQyxhQUF1QjtBQUNyQyxVQUFNLElBQUksS0FBSztBQUNmLFVBQU0sS0FBSyxLQUFLO0FBRWhCLFFBQUksS0FBSyxVQUFVLFFBQVE7QUFDekIsV0FBSyxRQUFRLGlCQUFpQixDQUFDO0FBQy9CLFdBQUssU0FBUyxpQkFBaUIsRUFBRTtBQUVqQyxtQkFBSyxJQUFJLEdBQUcsR0FBRyxFQUFFO0FBQ2pCLG1CQUFLLE1BQU0sR0FBRyxHQUFHLEdBQUc7QUFBQSxJQUN0QixPQUFPO0FBQ0wsV0FBSyxJQUFJLGlCQUFpQixDQUFDO0FBQUEsSUFDN0I7QUFFQSxTQUFLLFFBQVEsaUJBQWlCLEVBQUU7QUFDaEMsaUJBQUssSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFFLENBQUMsS0FBSyxZQUFZLENBQUM7QUFDckIsTUFBRSxDQUFDLElBQUksWUFBWSxDQUFDO0FBQ3BCLE1BQUUsQ0FBQyxLQUFLLFlBQVksQ0FBQztBQUNyQixTQUFLLFFBQVEsaUJBQWlCLENBQUM7QUFBQSxFQUNqQztBQUVBO0FBQUEsb0JBQWEsU0FBQyxlQUF1QjtBQUNuQyxTQUFLLFFBQVEsY0FBYztBQUMzQixTQUFLLFFBQVEseUJBQXlCLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxhQUFhO0FBQUEsRUFDaEU7QUE1RUEsZ0JBRFcsa0JBQ0osWUFBVztBQUNsQixnQkFGVyxrQkFFSixjQUFhO0FBQUE7QUFBQSxJQUVsQixTQUFTLFNBQVMsT0FBTztBQUFBO0FBQUEsSUFFekIsS0FBSyxTQUFTLE9BQU87QUFBQTtBQUFBLElBRXJCLFNBQVMsU0FBUyxPQUFPO0FBQUE7QUFBQSxJQUV6QixVQUFVLFNBQVMsT0FBTztBQUFBLEVBQzVCO0FBT0E7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBakJOLGlCQWtCWDtBQU1BO0FBQUEsSUFEQyxTQUFTLE9BQU87QUFBQSxLQXZCTixpQkF3Qlg7QUFNQTtBQUFBLElBREMsU0FBUyxPQUFPO0FBQUEsS0E3Qk4saUJBOEJYO0FBTUE7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBbkNOLGlCQW9DWDs7O0FDN0NGO0FBQUE7QUFBQTtBQUFBO0FBTU8sTUFBTSxjQUFOLGNBQTBCLFVBQVU7QUFBQSxJQUl2QyxlQUF1QjtBQUFBLElBR3ZCLGVBQXVCO0FBQUE7QUFBQSxJQUVmLG9CQUE0QjtBQUFBLElBQzVCLGFBQXFCO0FBQUEsSUFDckIsbUJBQTRCO0FBQUEsSUFDNUIsY0FBc0I7QUFBQSxJQUVyQixPQUFPLElBQVk7QUFDeEIsVUFBSSxDQUFDLEtBQUssa0JBQWtCO0FBQ3hCLGFBQUssbUJBQW1CO0FBQ3hCLGFBQUssYUFBYTtBQUNsQixhQUFLLG9CQUFvQjtBQUN6QixhQUFLO0FBQ0wsYUFBSyxRQUFRO0FBQUEsTUFDakI7QUFFQSxVQUFJLEtBQUssa0JBQWtCO0FBQ3ZCLGFBQUsscUJBQXFCO0FBRTFCLGNBQU0sZUFBZSxLQUFLLGVBQWUsS0FBSztBQUU5QyxlQUFPLEtBQUsscUJBQXFCLGdCQUFnQixLQUFLLGFBQWEsS0FBSyxjQUFjO0FBQ2xGLGVBQUssYUFBYTtBQUNsQixlQUFLO0FBQ0wsZUFBSyxxQkFBcUI7QUFBQSxRQUM5QjtBQUVBLFlBQUksS0FBSyxjQUFjLEtBQUssY0FBYztBQUV0QyxlQUFLLG1CQUFtQjtBQUN4QixlQUFLLFFBQVE7QUFBQSxRQUNqQjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsSUFFQSxlQUFlO0FBQUEsSUFFZjtBQUFBLElBRUEsVUFBUztBQUFBLElBRVQ7QUFBQSxJQUVBLFVBQVM7QUFBQSxJQUVUO0FBQUEsRUFDSjtBQXBESSxnQkFEUyxhQUNGLFlBQVc7QUFHbEI7QUFBQSxJQURDLFNBQVMsTUFBTSxDQUFHO0FBQUEsS0FIVixZQUlUO0FBR0E7QUFBQSxJQURDLFNBQVMsSUFBSSxDQUFDO0FBQUEsS0FOTixZQU9UOzs7QUNiSjtBQUFBO0FBQUE7QUFBQTs7O0FDTU8sTUFBTSxjQUFOLE1BQTZDO0FBQUEsSUFFbEQsY0FBYztBQUFBLElBQ2Q7QUFBQSxJQUVBLFdBQVcsVUFBdUIsWUFBbUMsTUFBWTtBQUMvRSxZQUFNLE9BQU87QUFDYixVQUFJLGFBQWEsUUFBUSxVQUFVLFNBQVMsR0FBRztBQUM3QyxtQkFBVyxZQUFZLFdBQVc7QUFDaEMsZUFBSyxZQUFZLFFBQVE7QUFBQSxRQUMzQjtBQUFBLE1BQ0Y7QUFDQSxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFkYSxnQkFBTjtBQUFBLElBRE4sa0JBQVU7QUFBQSxLQUNFOzs7QURJTixNQUFNLHNCQUFOLE1BQTBCO0FBQUEsSUFDL0IsT0FBYyx1QkFBNkI7QUFDekMsZUFBVSxrQkFBa0IsV0FBVyxTQUFTO0FBQ2hELGVBQVUsa0JBQWtCLGNBQWMsWUFBWTtBQUN0RCxlQUFVLGtCQUFrQixXQUFXLFNBQVM7QUFDaEQsZUFBVSxrQkFBa0IsaUJBQWlCLGVBQWU7QUFDNUQsZUFBVSxrQkFBa0IsYUFBYSxXQUFXO0FBQ3BELGVBQVUsa0JBQWtCLGFBQWEsV0FBVztBQUVwRCxlQUFVLGtCQUFrQixtQkFBbUIsaUJBQWlCO0FBQUEsSUFDbEU7QUFBQSxFQUNGOzs7QUVyQkE7QUFBQTtBQUFBO0FBQUE7QUFFTyxNQUFNLGlCQUFOLGNBQTZCLFVBQVU7QUFBQSxJQU8xQyxPQUFPO0FBQUEsSUFDUDtBQUFBLElBRUEsUUFBUTtBQUFBLElBQ1I7QUFBQSxJQUVBLE9BQU8sSUFBVztBQUFBLElBQ2xCO0FBQUEsRUFFSjtBQWZJLGdCQURTLGdCQUNGLFlBQVc7QUFDbEIsZ0JBRlMsZ0JBRUYsY0FBYTtBQUFBLElBQ2hCLFdBQVcsRUFBQyxNQUFNLEtBQUssTUFBTSxTQUFTLEtBQUk7QUFBQSxJQUMxQyxXQUFXLEVBQUMsTUFBTSxLQUFLLE1BQU0sU0FBUyxLQUFJO0FBQUEsRUFDOUM7OztBQ1BKO0FBQUE7QUFBQTtBQUFBOzs7QUNRTyxNQUFNLGdCQUFOLE1BQW1CO0FBQUEsSUFDdEI7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBRUEsY0FBYztBQUNWLFdBQUssY0FBYztBQUNuQixXQUFLLGtCQUFpQjtBQUN0QixXQUFLLFlBQVksQ0FBQztBQUNsQixXQUFLLGNBQWMsQ0FBQztBQUFBLElBQ3hCO0FBQUEsSUFFQSxZQUFZO0FBQ1IsVUFBSSxLQUFLO0FBQWM7QUFDdkIsV0FBSyxjQUFjO0FBQ25CLFdBQUssU0FBUTtBQUFBLFFBQ1QsSUFBSSxNQUFNLGVBQWU7QUFBQSxRQUN6QixJQUFJLE1BQU0saUJBQWlCO0FBQUEsUUFDM0IsSUFBSSxNQUFNLGtCQUFrQjtBQUFBLFFBQzVCLElBQUksTUFBTSxpQkFBaUI7QUFBQSxNQUMvQjtBQUVBLFdBQUssZUFBZSxJQUFJLGFBQWE7QUFDckMsV0FBSyxhQUFhLFNBQVMsSUFBSSxRQUFRO0FBQ3ZDLFVBQUksT0FBTyxLQUFLLGFBQWEsV0FBVztBQUN4QyxXQUFLLFFBQVEsS0FBSyxhQUFhLFdBQVc7QUFFMUMsZUFBUyxJQUFJLEdBQUcsSUFBSSxJQUFJLEtBQUs7QUFDekIsY0FBTSxRQUFRLElBQUksTUFBTTtBQUN4QixhQUFLLFVBQVUsS0FBSyxLQUFLO0FBQ3pCLGNBQU0sVUFBVSxLQUFLLGFBQWEseUJBQXlCLEtBQUs7QUFFaEUsY0FBTSxLQUFLLElBQUksV0FBVyxLQUFLLGNBQWM7QUFBQSxVQUN6QyxjQUFjO0FBQUEsVUFDZCxlQUFlO0FBQUEsUUFDbkIsQ0FBQztBQUVELGdCQUFRLFFBQVEsRUFBRTtBQUNsQixXQUFHLFFBQVEsSUFBSTtBQUNmLGFBQUssWUFBWSxLQUFLLEVBQUU7QUFBQSxNQUM1QjtBQUFBLElBQ0o7QUFBQSxJQUVBLFVBQVUsWUFBbUIsS0FBZTtBQUN4QyxVQUFHLENBQUMsS0FBSztBQUFjO0FBQ3ZCLFVBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssTUFBTSxJQUFJLENBQUMsQ0FBQyxHQUFFO0FBQ2hDLGNBQUksQ0FBQyxHQUFFLEdBQUUsQ0FBQztBQUFBLE1BQ2Q7QUFFQSxXQUFLLFlBQVksS0FBSyxlQUFlLEVBQUUsVUFBVSxRQUFRLElBQUksQ0FBQztBQUM5RCxXQUFLLFlBQVksS0FBSyxlQUFlLEVBQUUsVUFBVSxRQUFRLElBQUksQ0FBQztBQUM5RCxXQUFLLFlBQVksS0FBSyxlQUFlLEVBQUUsVUFBVSxRQUFRLElBQUksQ0FBQztBQUU5RCxXQUFLLFVBQVUsS0FBSyxlQUFlLEVBQUUsTUFBTSxLQUFLLE9BQU8sVUFBVSxFQUFFO0FBQ25FLFdBQUssVUFBVSxLQUFLLGVBQWUsRUFBRSxLQUFLO0FBQzFDLFdBQUssbUJBQW1CLEtBQUssa0JBQWtCLEtBQUs7QUFBQSxJQUN4RDtBQUFBLEVBQ0o7OztBRDdEQSxNQUFNLGNBQU4sTUFBa0I7QUFBQTtBQUFBLElBSWhCO0FBQUE7QUFBQTtBQUFBLElBR0E7QUFBQSxJQUVBLGNBQWM7QUFFWixXQUFLLGdCQUFnQixJQUFJLGNBQWM7QUFHdkMsV0FBSyxvQkFBb0I7QUFBQSxJQUMzQjtBQUFBLElBRUEsV0FBVyxXQUF3QjtBQUNqQyxVQUFJLFlBQVksY0FBYyxNQUFNO0FBQ2xDLG9CQUFZLFlBQVksSUFBSSxZQUFZO0FBQUEsTUFDMUM7QUFDQSxhQUFPLFlBQVk7QUFBQSxJQUNyQjtBQUFBLEVBQ0Y7QUF0QkUsZ0JBREksYUFDVyxhQUFnQztBQUQzQyxnQkFBTjtBQUFBLElBREMsa0JBQVU7QUFBQSxLQUNMO0FBeUJOLE1BQU8sa0JBQVEsWUFBWTs7O0FFaEMzQjtBQUFBO0FBQUE7QUFBQTs7O0FDQUE7QUFBQTtBQUFBO0FBQUE7QUFPTyxNQUFNLFdBQU4sY0FBdUIsVUFBVTtBQUFBLElBSXBDO0FBQUEsSUFHQTtBQUFBLElBR0E7QUFBQSxJQUVBO0FBQUEsSUFFQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBRUEsT0FBYTtBQUNULFdBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxJQUMvQjtBQUFBLElBRUEsUUFBUTtBQUNKLFlBQU0sSUFBSSxLQUFLLGlCQUFpQixhQUFhLGFBQWE7QUFDMUQsVUFBRyxDQUFDLEdBQUc7QUFDSCxjQUFNLElBQUksTUFBTSwrQ0FBK0M7QUFBQSxNQUNuRTtBQUNBLFdBQUssT0FBTztBQUVaLFlBQU0sV0FBVyxLQUFLLEtBQUs7QUFDM0IsVUFBRyxDQUFDLFVBQVM7QUFDVCxjQUFNLElBQUksTUFBTSx5Q0FBeUM7QUFBQSxNQUM3RDtBQUNBLFdBQUssa0JBQWtCO0FBRXZCLFdBQUssaUJBQWlCLGlCQUFpQixLQUFLLFNBQVM7QUFFckQsWUFBTSxTQUFTLEtBQUssbUJBQW1CLGFBQWEsWUFBWTtBQUNoRSxVQUFHLENBQUMsUUFBUTtBQUNSLGNBQU0sSUFBSSxNQUFNLHdEQUF3RDtBQUFBLE1BQzVFO0FBRUEsV0FBSyxTQUFTO0FBRWQsV0FBSyxZQUFZLEtBQUssaUJBQWlCLGlCQUFpQjtBQUFBLElBQzVEO0FBQUEsSUFFQSxhQUFhO0FBQ1QsV0FBSyxPQUFPLFFBQVEsSUFBSSxLQUFLLFFBQVEsS0FBSyxJQUFJLENBQUM7QUFDL0MsV0FBSyxPQUFPLFVBQVUsSUFBSSxLQUFLLFVBQVUsS0FBSyxJQUFJLENBQUM7QUFDbkQsV0FBSyxPQUFPLE9BQU8sSUFBSSxLQUFLLE9BQU8sS0FBSyxJQUFJLENBQUM7QUFDN0MsV0FBSyxPQUFPLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLENBQUM7QUFBQSxJQUM3QztBQUFBLElBRUEsZUFBZTtBQUNYLFdBQUssT0FBTyxRQUFRLE9BQU8sS0FBSyxPQUFPO0FBQ3ZDLFdBQUssT0FBTyxVQUFVLE9BQU8sS0FBSyxTQUFTO0FBQzNDLFdBQUssT0FBTyxPQUFPLE9BQU8sS0FBSyxNQUFNO0FBQ3JDLFdBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxJQUFJO0FBQUEsSUFDckM7QUFBQSxJQUVBLE9BQU8sSUFBWTtBQUFBLElBRW5CO0FBQUEsSUFFQSxRQUFRLFFBQWlCLFFBQWUsWUFBZ0M7QUFDcEUsV0FBSyxLQUFLLFdBQVcsS0FBSztBQUFBLElBRTlCO0FBQUEsSUFFQSxVQUFVLFFBQWlCLFFBQWUsWUFBZ0M7QUFDdEUsV0FBSyxLQUFLLFdBQVcsS0FBSztBQUFBLElBRTlCO0FBQUEsSUFFQSxPQUFPLFFBQWlCLFFBQWUsWUFBZ0M7QUFFbkUsV0FBSyxpQkFBaUIsZUFBZSxDQUFDLEdBQUssTUFBTSxDQUFHLENBQUM7QUFBQSxJQUV6RDtBQUFBLElBQ0EsS0FBSyxRQUFpQixRQUFlLFlBQWdDO0FBRWpFLFdBQUssaUJBQWlCLGlCQUFpQixLQUFLLFNBQVM7QUFDckQsV0FBSyxRQUFRLE9BQU87QUFBQSxJQUV4QjtBQUFBLEVBQ0o7QUF0RkksZ0JBRFMsVUFDRixZQUFXO0FBR2xCO0FBQUEsSUFEQyxTQUFTLFNBQVM7QUFBQSxLQUhWLFNBSVQ7QUFHQTtBQUFBLElBREMsU0FBUyxPQUFPO0FBQUEsS0FOUixTQU9UO0FBR0E7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBVFIsU0FVVDs7O0FDakJKO0FBQUE7QUFBQTtBQUFBO0FBUU8sTUFBTSxZQUFOLGNBQXdCLFVBQVU7QUFBQSxJQUlyQztBQUFBLElBRVEsYUFBeUIsQ0FBQztBQUFBLElBQ2xDO0FBQUEsSUFFQSxRQUFjO0FBQ1YsVUFBRyxDQUFDLEtBQUssY0FBYztBQUNuQixjQUFNLElBQUksTUFBTSxzQkFBc0I7QUFBQSxNQUMxQztBQUVBLGlCQUFXLFNBQVMsS0FBSyxhQUFhLFVBQVU7QUFDNUMsY0FBTSxpQkFBaUIsQ0FBQyxHQUFHLE1BQVEsQ0FBQyxDQUFDO0FBQ3JDLGFBQUssV0FBVyxLQUFLLEtBQUs7QUFBQSxNQUM5QjtBQUVBLFlBQU0sb0JBQW9CLFNBQVUsUUFBUSxpQkFBaUI7QUFDN0Qsd0JBQWtCLGtCQUFrQixJQUFJO0FBQUEsSUFDNUM7QUFBQSxJQUVBLEtBQUssTUFBYSxVQUNsQjtBQUNJLFlBQU0sVUFBVSxLQUFLLFdBQVcsS0FBSyxDQUFDQyxhQUFZQSxTQUFRLFNBQVMsSUFBSTtBQUN2RSxVQUFHLENBQUMsU0FBUztBQUNULGNBQU0sSUFBSSxNQUFNLGlDQUFpQyxNQUFNO0FBQUEsTUFDM0Q7QUFDQSxVQUFHLEtBQUsscUJBQXFCLE1BQU07QUFDL0IsYUFBSyxTQUFTO0FBQUEsTUFDbEIsT0FDSTtBQUNBLGFBQUssbUJBQW1CO0FBQ3hCLGdCQUFRLGlCQUFpQixRQUFRO0FBQUEsTUFDckM7QUFBQSxJQUNKO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFLQSxXQUFXO0FBQ1AsaUJBQVcsZ0JBQWdCLEtBQUssWUFBWTtBQUN0QyxxQkFBYSxpQkFBaUIsQ0FBQyxHQUFHLE1BQVEsQ0FBQyxDQUFDO0FBQUEsTUFDbEQ7QUFDQSxXQUFLLG1CQUFtQjtBQUFBLElBQzVCO0FBQUEsRUFDSjtBQTlDSSxnQkFEUyxXQUNGLFlBQVc7QUFHbEI7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBSFIsVUFJVDs7O0FGSkcsTUFBTSxnQkFBTixjQUE0QixVQUFVO0FBQUEsSUFJM0M7QUFBQSxJQUdBO0FBQUEsSUFHQTtBQUFBLElBRVE7QUFBQSxJQUNBO0FBQUEsSUFFUixRQUFjO0FBQ1osWUFBTSxNQUFNLEtBQUssZUFBZSxhQUFhLFFBQVE7QUFDckQsVUFBSSxDQUFDLEtBQUs7QUFDUixjQUFNLElBQUksTUFBTSxpREFBaUQ7QUFBQSxNQUNuRTtBQUNBLFdBQUssV0FBVztBQUVoQixZQUFNLFFBQVEsS0FBSyxnQkFBZ0IsYUFBYSxTQUFTO0FBQ3pELFVBQUksQ0FBQyxPQUFPO0FBQ1IsY0FBTSxJQUFJLE1BQU0sb0RBQW9EO0FBQUEsTUFDeEU7QUFDQSxXQUFLLFlBQVk7QUFFakIsVUFBRyxDQUFDLEtBQUssY0FBYztBQUNuQixjQUFNLElBQUksTUFBTSx1QkFBdUI7QUFBQSxNQUMzQztBQUVBLFdBQUssU0FBUyxRQUFRLElBQUksTUFBTTtBQUM1QixhQUFLLFVBQVUsU0FBUztBQUFBLE1BQzVCLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjtBQW5DRSxnQkFEVyxlQUNKLFlBQVc7QUFHbEI7QUFBQSxJQURDLFNBQVMsT0FBTztBQUFBLEtBSE4sY0FJWDtBQUdBO0FBQUEsSUFEQyxTQUFTLE9BQU87QUFBQSxLQU5OLGNBT1g7QUFHQTtBQUFBLElBREMsU0FBUyxPQUFPO0FBQUEsS0FUTixjQVVYOzs7QUdsQkY7QUFBQTtBQUFBO0FBQUE7QUFFTyxNQUFNLGNBQU4sY0FBMEIsVUFBVTtBQUFBLEVBRzNDO0FBRkksZ0JBRFMsYUFDRixZQUFXOzs7QUNIdEI7QUFBQTtBQUFBO0FBQUE7QUFPTyxNQUFNLFVBQU4sY0FBc0IsVUFBVTtBQUFBLEVBR3ZDO0FBRkksZ0JBRFMsU0FDRixZQUFXOzs7QUNQdEIsa0JBQWdCLFlBQWdDO0FBRWhELGtCQUFnQkMsYUFBNkI7QUFFN0Msa0JBQWdCLDRCQUE0QjtBQUU1QyxrQkFBZ0Isb0JBQW9EO0FBRXBFLGtCQUFnQixrQkFBa0Q7QUFFbEUsa0JBQWdCLFlBQTRDO0FBRTVELGtCQUFnQix1QkFBdUQ7QUFFdkUsa0JBQWdCLGVBQStDO0FBRS9ELGtCQUFnQixtQkFBbUQ7QUFFbkUsa0JBQWdCLHNCQUFzRDtBQUV0RSxrQkFBZ0IsZ0JBQWdEO0FBRWhFLGtCQUFnQixtQkFBbUQ7QUFFbkUsa0JBQWdCLDJCQUFnRTtBQUVoRixrQkFBZ0Isb0JBQW9EO0FBRXBFLGtCQUFnQixxQkFBcUQ7QUFFckUsa0JBQWdCLGtCQUFrRDtBQUVsRSxrQkFBZ0IsbUJBQW1EO0FBRW5FLGtCQUFnQixvQkFBb0Q7QUFFcEUsa0JBQWdCLHFCQUFnRTtBQUVoRixrQkFBZ0IscUJBQXVFO0FBRXZGLGtCQUFnQixZQUE0QztBQUU1RCxrQkFBZ0IsdUJBQXVEO0FBRXZFLGtCQUFnQixxQkFBcUQ7QUFFckUsa0JBQWdCLFlBQTRDO0FBRTVELGtCQUFnQixlQUErQztBQUUvRCxrQkFBZ0Isd0JBQThEO0FBRTlFLGtCQUFnQixpQkFBdUQ7QUFFdkUsa0JBQWdCLGVBQW9DO0FBRXBELGtCQUFnQix5QkFBeUQ7QUFFekUsa0JBQWdCLHVCQUEwRDtBQUUxRSxrQkFBZ0IsaUJBQW9EO0FBRXBFLGtCQUFnQixvQkFBdUQ7QUFFdkUsa0JBQWdCLGtCQUFxRDtBQUVyRSxrQkFBZ0IsZ0JBQW1EOyIsCiAgIm5hbWVzIjogWyJIb3dsZXJHbG9iYWwiLCAic2VsZiIsICJIb3dsZXIiLCAiZSIsICJpIiwgIkhvd2wiLCAic3RyIiwgIlNvdW5kIiwgImxlbiIsICJlYXJjdXQiLCAiZXF1YWxzIiwgImxlbiIsICJxIiwgImxlcnAiLCAiVHlwZSIsICJDb2xsaWRlciIsICJBbGlnbm1lbnQiLCAiSnVzdGlmaWNhdGlvbiIsICJUZXh0RWZmZWN0IiwgIklucHV0VHlwZSIsICJMaWdodFR5cGUiLCAiQW5pbWF0aW9uU3RhdGUiLCAiRm9yY2VNb2RlIiwgIkNvbGxpc2lvbkV2ZW50VHlwZSIsICJTaGFwZSIsICJNZXNoQXR0cmlidXRlIiwgIk1hdGVyaWFsUGFyYW1UeXBlIiwgImFuZ2xlIiwgInNpemUiLCAiTG9ja0F4aXMiLCAiZiIsICJNZXNoSW5kZXhUeXBlIiwgIk1lc2hTa2lubmluZ1R5cGUiLCAiY2FudmFzIiwgImFuaW1JZCIsICJfX2RlY29yYXRlIiwgImNhbnZhcyIsICJjb250ZXh0IiwgImNvcHkiLCAiX19kZWNvcmF0ZSIsICJfX2RlY29yYXRlIiwgImNyZWF0ZSIsICJjcmVhdGUiLCAibGVuIiwgInEiLCAiZiIsICJzY2FsZSIsICJhZGQiLCAiY2xvbmUiLCAiY29weSIsICJjcmVhdGUiLCAiZG90IiwgImVxdWFscyIsICJleGFjdEVxdWFscyIsICJmcm9tVmFsdWVzIiwgImlkZW50aXR5IiwgImludmVydCIsICJsZW4iLCAibGVuZ3RoIiwgImxlcnAiLCAibXVsIiwgIm11bHRpcGx5IiwgIm5vcm1hbGl6ZSIsICJyYW5kb20iLCAicm90YXRlWCIsICJyb3RhdGVZIiwgInJvdGF0ZVoiLCAic2NhbGUiLCAic2V0IiwgInNxckxlbiIsICJzcXVhcmVkTGVuZ3RoIiwgInN0ciIsICJhZGQiLCAiY2xvbmUiLCAiY29weSIsICJjcmVhdGUiLCAiZXF1YWxzIiwgImV4YWN0RXF1YWxzIiwgImZyb21WYWx1ZXMiLCAibXVsIiwgIm11bHRpcGx5IiwgInJvdGF0ZVgiLCAicm90YXRlWSIsICJyb3RhdGVaIiwgInNjYWxlIiwgInNldCIsICJzdHIiLCAic3ViIiwgInN1YnRyYWN0IiwgImNyZWF0ZSIsICJjbG9uZSIsICJmcm9tVmFsdWVzIiwgImNvcHkiLCAic2V0IiwgImFkZCIsICJzdWJ0cmFjdCIsICJtdWx0aXBseSIsICJzY2FsZSIsICJsZW4iLCAicSIsICJyb3RhdGVYIiwgInJvdGF0ZVkiLCAicm90YXRlWiIsICJzdHIiLCAiZXhhY3RFcXVhbHMiLCAiZXF1YWxzIiwgInN1YiIsICJtdWwiLCAib2Zmc2V0IiwgImwiLCAiY3JlYXRlIiwgImNsb25lIiwgImZyb21WYWx1ZXMiLCAiY29weSIsICJzZXQiLCAiYWRkIiwgInNjYWxlIiwgImxlbmd0aCIsICJzcXVhcmVkTGVuZ3RoIiwgIm5vcm1hbGl6ZSIsICJsZW4iLCAiZG90IiwgImxlcnAiLCAiZXhhY3RFcXVhbHMiLCAiZXF1YWxzIiwgImZvckVhY2giLCAiY3JlYXRlIiwgIm9mZnNldCIsICJsIiwgImNyZWF0ZSIsICJpZGVudGl0eSIsICJxIiwgImRvdCIsICJtdWx0aXBseSIsICJyb3RhdGVYIiwgInJvdGF0ZVkiLCAicm90YXRlWiIsICJzY2FsZSIsICJyYW5kb20iLCAiaW52ZXJ0IiwgInN0ciIsICJjbG9uZSIsICJmcm9tVmFsdWVzIiwgImNvcHkiLCAic2V0IiwgImFkZCIsICJtdWwiLCAibGVycCIsICJsZW5ndGgiLCAibGVuIiwgInNxdWFyZWRMZW5ndGgiLCAic3FyTGVuIiwgIm5vcm1hbGl6ZSIsICJleGFjdEVxdWFscyIsICJlcXVhbHMiLCAiYWRkIiwgImNsb25lIiwgImNvbmp1Z2F0ZSIsICJjb3B5IiwgImNyZWF0ZSIsICJkb3QiLCAiZXF1YWxzIiwgImV4YWN0RXF1YWxzIiwgImZyb21Sb3RhdGlvbiIsICJmcm9tUm90YXRpb25UcmFuc2xhdGlvbiIsICJmcm9tVHJhbnNsYXRpb24iLCAiZnJvbVZhbHVlcyIsICJnZXRUcmFuc2xhdGlvbiIsICJpZGVudGl0eSIsICJpbnZlcnQiLCAibGVuIiwgImxlbmd0aCIsICJsZXJwIiwgIm11bCIsICJtdWx0aXBseSIsICJub3JtYWxpemUiLCAicm90YXRlWCIsICJyb3RhdGVZIiwgInJvdGF0ZVoiLCAic2NhbGUiLCAic2V0IiwgInNxckxlbiIsICJzcXVhcmVkTGVuZ3RoIiwgInN0ciIsICJ0cmFuc2xhdGUiLCAiY3JlYXRlIiwgImNsb25lIiwgImZyb21WYWx1ZXMiLCAiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24iLCAicSIsICJmcm9tVHJhbnNsYXRpb24iLCAiZnJvbVJvdGF0aW9uIiwgImNvcHkiLCAiaWRlbnRpdHkiLCAic2V0IiwgImdldFRyYW5zbGF0aW9uIiwgInRyYW5zbGF0ZSIsICJyb3RhdGVYIiwgInJvdGF0ZVkiLCAicm90YXRlWiIsICJhZGQiLCAibXVsdGlwbHkiLCAibXVsIiwgInNjYWxlIiwgImRvdCIsICJsZXJwIiwgIm10IiwgImludmVydCIsICJzcXVhcmVkTGVuZ3RoIiwgImNvbmp1Z2F0ZSIsICJsZW5ndGgiLCAibGVuIiwgInNxckxlbiIsICJub3JtYWxpemUiLCAic3RyIiwgImV4YWN0RXF1YWxzIiwgImVxdWFscyIsICJhZGQiLCAiYW5nbGUiLCAiY2VpbCIsICJjbG9uZSIsICJjb3B5IiwgImNyZWF0ZSIsICJjcm9zcyIsICJkaXN0IiwgImRpc3RhbmNlIiwgImRpdiIsICJkaXZpZGUiLCAiZG90IiwgImVxdWFscyIsICJleGFjdEVxdWFscyIsICJmbG9vciIsICJmb3JFYWNoIiwgImZyb21WYWx1ZXMiLCAiaW52ZXJzZSIsICJsZW4iLCAibGVuZ3RoIiwgImxlcnAiLCAibWF4IiwgIm1pbiIsICJtdWwiLCAibXVsdGlwbHkiLCAibmVnYXRlIiwgIm5vcm1hbGl6ZSIsICJyYW5kb20iLCAicm90YXRlIiwgInJvdW5kIiwgInNjYWxlIiwgInNjYWxlQW5kQWRkIiwgInNldCIsICJzcXJEaXN0IiwgInNxckxlbiIsICJzcXVhcmVkRGlzdGFuY2UiLCAic3F1YXJlZExlbmd0aCIsICJzdHIiLCAic3ViIiwgInN1YnRyYWN0IiwgInRyYW5zZm9ybU1hdDMiLCAidHJhbnNmb3JtTWF0NCIsICJ6ZXJvIiwgImNyZWF0ZSIsICJjbG9uZSIsICJmcm9tVmFsdWVzIiwgImNvcHkiLCAic2V0IiwgImFkZCIsICJzdWJ0cmFjdCIsICJtdWx0aXBseSIsICJkaXZpZGUiLCAiY2VpbCIsICJmbG9vciIsICJtaW4iLCAibWF4IiwgInJvdW5kIiwgInNjYWxlIiwgInNjYWxlQW5kQWRkIiwgImRpc3RhbmNlIiwgInNxdWFyZWREaXN0YW5jZSIsICJsZW5ndGgiLCAic3F1YXJlZExlbmd0aCIsICJuZWdhdGUiLCAiaW52ZXJzZSIsICJub3JtYWxpemUiLCAibGVuIiwgImRvdCIsICJjcm9zcyIsICJsZXJwIiwgInJhbmRvbSIsICJ0cmFuc2Zvcm1NYXQzIiwgInRyYW5zZm9ybU1hdDQiLCAicm90YXRlIiwgImFuZ2xlIiwgInplcm8iLCAic3RyIiwgImV4YWN0RXF1YWxzIiwgImVxdWFscyIsICJzdWIiLCAibXVsIiwgImRpdiIsICJkaXN0IiwgInNxckRpc3QiLCAic3FyTGVuIiwgImZvckVhY2giLCAib2Zmc2V0IiwgImwiLCAiX19kZWNvcmF0ZSIsICJfX2RlY29yYXRlIiwgImRpc3RhbmNlIiwgIl9fZGVjb3JhdGUiLCAibWF4IiwgIm1pbiIsICJjbG9uZSIsICJpZCIsICJyYW5kb20iLCAiYyIsICJzY2FsZSIsICJsZXJwIiwgIm1pbiIsICJtYXgiLCAiZGlzdF9leHBvcnRzIiwgImNvbmZpZyIsICJfX2RlY29yYXRlIiwgInRlbXBRdWF0IiwgImYiLCAiX19kZWNvcmF0ZSIsICJfX2RlY29yYXRlIiwgInRlbXBWZWMiLCAiY2FudmFzIiwgImRpc3QiLCAiZiIsICJfX2RlY29yYXRlIiwgImltcG9ydF9ob3dsZXIiLCAiY2FudmFzIiwgIl9fZGVjb3JhdGUiLCAiYSIsICJkaXJlY3Rpb24iLCAiY2xhbXAiLCAidGVtcFF1YXQiLCAidGFyZ2V0UG9zIiwgIl9fZGVjb3JhdGUiLCAidGVtcFZlYzMiLCAibCIsICJlYXJjdXQiLCAibG9va0F0IiwgIm9mZnNldCIsICJkaXN0IiwgImRvdCIsICJfZGlyZWN0aW9uIiwgInJlcXVpcmVfYmluZCIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImZuIiwgInRoaXNBcmciLCAiYXJncyIsICJpIiwgInJlcXVpcmVfdXRpbHMiLCAiYmluZCIsICJ0b1N0cmluZyIsICJraW5kT2YiLCAiY2FjaGUiLCAidGhpbmciLCAic3RyIiwgImtpbmRPZlRlc3QiLCAidHlwZSIsICJpc0FycmF5IiwgInZhbCIsICJpc1VuZGVmaW5lZCIsICJpc0J1ZmZlciIsICJpc0FycmF5QnVmZmVyIiwgImlzQXJyYXlCdWZmZXJWaWV3IiwgInJlc3VsdCIsICJpc1N0cmluZyIsICJpc051bWJlciIsICJpc09iamVjdCIsICJpc1BsYWluT2JqZWN0IiwgInByb3RvdHlwZSIsICJpc0RhdGUiLCAiaXNGaWxlIiwgImlzQmxvYiIsICJpc0ZpbGVMaXN0IiwgImlzRnVuY3Rpb24iLCAiaXNTdHJlYW0iLCAiaXNGb3JtRGF0YSIsICJwYXR0ZXJuIiwgImlzVVJMU2VhcmNoUGFyYW1zIiwgInRyaW0iLCAiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCAiZm9yRWFjaCIsICJvYmoiLCAibCIsICJrZXkiLCAibWVyZ2UiLCAiYXNzaWduVmFsdWUiLCAiZXh0ZW5kIiwgImEiLCAiYiIsICJzdHJpcEJPTSIsICJjb250ZW50IiwgImluaGVyaXRzIiwgImNvbnN0cnVjdG9yIiwgInN1cGVyQ29uc3RydWN0b3IiLCAicHJvcHMiLCAiZGVzY3JpcHRvcnMiLCAidG9GbGF0T2JqZWN0IiwgInNvdXJjZU9iaiIsICJkZXN0T2JqIiwgImZpbHRlciIsICJwcm9wIiwgIm1lcmdlZCIsICJlbmRzV2l0aCIsICJzZWFyY2hTdHJpbmciLCAicG9zaXRpb24iLCAibGFzdEluZGV4IiwgInRvQXJyYXkiLCAiYXJyIiwgImlzVHlwZWRBcnJheSIsICJUeXBlZEFycmF5IiwgInJlcXVpcmVfYnVpbGRVUkwiLCAidXRpbHMiLCAiZW5jb2RlIiwgInVybCIsICJwYXJhbXMiLCAicGFyYW1zU2VyaWFsaXplciIsICJzZXJpYWxpemVkUGFyYW1zIiwgInBhcnRzIiwgInYiLCAiaGFzaG1hcmtJbmRleCIsICJyZXF1aXJlX0ludGVyY2VwdG9yTWFuYWdlciIsICJJbnRlcmNlcHRvck1hbmFnZXIiLCAiZnVsZmlsbGVkIiwgInJlamVjdGVkIiwgIm9wdGlvbnMiLCAiaWQiLCAiaCIsICJyZXF1aXJlX25vcm1hbGl6ZUhlYWRlck5hbWUiLCAiaGVhZGVycyIsICJub3JtYWxpemVkTmFtZSIsICJ2YWx1ZSIsICJuYW1lIiwgInJlcXVpcmVfQXhpb3NFcnJvciIsICJBeGlvc0Vycm9yIiwgIm1lc3NhZ2UiLCAiY29kZSIsICJjb25maWciLCAicmVxdWVzdCIsICJyZXNwb25zZSIsICJlcnJvciIsICJjdXN0b21Qcm9wcyIsICJheGlvc0Vycm9yIiwgInJlcXVpcmVfdHJhbnNpdGlvbmFsIiwgInJlcXVpcmVfdG9Gb3JtRGF0YSIsICJ0b0Zvcm1EYXRhIiwgImZvcm1EYXRhIiwgInN0YWNrIiwgImNvbnZlcnRWYWx1ZSIsICJidWlsZCIsICJkYXRhIiwgInBhcmVudEtleSIsICJmdWxsS2V5IiwgImVsIiwgInJlcXVpcmVfc2V0dGxlIiwgInJlc29sdmUiLCAicmVqZWN0IiwgInZhbGlkYXRlU3RhdHVzIiwgInJlcXVpcmVfY29va2llcyIsICJleHBpcmVzIiwgInBhdGgiLCAiZG9tYWluIiwgInNlY3VyZSIsICJjb29raWUiLCAibWF0Y2giLCAicmVxdWlyZV9pc0Fic29sdXRlVVJMIiwgInJlcXVpcmVfY29tYmluZVVSTHMiLCAiYmFzZVVSTCIsICJyZWxhdGl2ZVVSTCIsICJyZXF1aXJlX2J1aWxkRnVsbFBhdGgiLCAiaXNBYnNvbHV0ZVVSTCIsICJjb21iaW5lVVJMcyIsICJyZXF1ZXN0ZWRVUkwiLCAicmVxdWlyZV9wYXJzZUhlYWRlcnMiLCAiaWdub3JlRHVwbGljYXRlT2YiLCAicGFyc2VkIiwgImxpbmUiLCAicmVxdWlyZV9pc1VSTFNhbWVPcmlnaW4iLCAibXNpZSIsICJ1cmxQYXJzaW5nTm9kZSIsICJvcmlnaW5VUkwiLCAicmVzb2x2ZVVSTCIsICJocmVmIiwgInJlcXVlc3RVUkwiLCAicmVxdWlyZV9DYW5jZWxlZEVycm9yIiwgIkNhbmNlbGVkRXJyb3IiLCAicmVxdWlyZV9wYXJzZVByb3RvY29sIiwgInJlcXVpcmVfeGhyIiwgInNldHRsZSIsICJjb29raWVzIiwgImJ1aWxkVVJMIiwgImJ1aWxkRnVsbFBhdGgiLCAicGFyc2VIZWFkZXJzIiwgImlzVVJMU2FtZU9yaWdpbiIsICJ0cmFuc2l0aW9uYWxEZWZhdWx0cyIsICJwYXJzZVByb3RvY29sIiwgInJlcXVlc3REYXRhIiwgInJlcXVlc3RIZWFkZXJzIiwgInJlc3BvbnNlVHlwZSIsICJvbkNhbmNlbGVkIiwgImRvbmUiLCAidXNlcm5hbWUiLCAicGFzc3dvcmQiLCAiZnVsbFBhdGgiLCAib25sb2FkZW5kIiwgInJlc3BvbnNlSGVhZGVycyIsICJyZXNwb25zZURhdGEiLCAiZXJyIiwgInRpbWVvdXRFcnJvck1lc3NhZ2UiLCAidHJhbnNpdGlvbmFsIiwgInhzcmZWYWx1ZSIsICJjYW5jZWwiLCAicHJvdG9jb2wiLCAicmVxdWlyZV9udWxsIiwgInJlcXVpcmVfZGVmYXVsdHMiLCAibm9ybWFsaXplSGVhZGVyTmFtZSIsICJERUZBVUxUX0NPTlRFTlRfVFlQRSIsICJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCAiZ2V0RGVmYXVsdEFkYXB0ZXIiLCAiYWRhcHRlciIsICJzdHJpbmdpZnlTYWZlbHkiLCAicmF3VmFsdWUiLCAicGFyc2VyIiwgImVuY29kZXIiLCAiZSIsICJkZWZhdWx0cyIsICJpc09iamVjdFBheWxvYWQiLCAiY29udGVudFR5cGUiLCAiX0Zvcm1EYXRhIiwgInNpbGVudEpTT05QYXJzaW5nIiwgImZvcmNlZEpTT05QYXJzaW5nIiwgInN0cmljdEpTT05QYXJzaW5nIiwgInN0YXR1cyIsICJtZXRob2QiLCAicmVxdWlyZV90cmFuc2Zvcm1EYXRhIiwgImZucyIsICJjb250ZXh0IiwgInJlcXVpcmVfaXNDYW5jZWwiLCAicmVxdWlyZV9kaXNwYXRjaFJlcXVlc3QiLCAidHJhbnNmb3JtRGF0YSIsICJpc0NhbmNlbCIsICJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwgInJlYXNvbiIsICJyZXF1aXJlX21lcmdlQ29uZmlnIiwgImNvbmZpZzEiLCAiY29uZmlnMiIsICJnZXRNZXJnZWRWYWx1ZSIsICJ0YXJnZXQiLCAic291cmNlIiwgIm1lcmdlRGVlcFByb3BlcnRpZXMiLCAidmFsdWVGcm9tQ29uZmlnMiIsICJkZWZhdWx0VG9Db25maWcyIiwgIm1lcmdlRGlyZWN0S2V5cyIsICJtZXJnZU1hcCIsICJjb25maWdWYWx1ZSIsICJyZXF1aXJlX2RhdGEiLCAicmVxdWlyZV92YWxpZGF0b3IiLCAiVkVSU0lPTiIsICJ2YWxpZGF0b3JzIiwgImRlcHJlY2F0ZWRXYXJuaW5ncyIsICJ2YWxpZGF0b3IiLCAidmVyc2lvbiIsICJmb3JtYXRNZXNzYWdlIiwgIm9wdCIsICJkZXNjIiwgIm9wdHMiLCAiYXNzZXJ0T3B0aW9ucyIsICJzY2hlbWEiLCAiYWxsb3dVbmtub3duIiwgImtleXMiLCAicmVxdWlyZV9BeGlvcyIsICJkaXNwYXRjaFJlcXVlc3QiLCAibWVyZ2VDb25maWciLCAiQXhpb3MiLCAiaW5zdGFuY2VDb25maWciLCAiY29uZmlnT3JVcmwiLCAicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCAic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwgImludGVyY2VwdG9yIiwgInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsICJwcm9taXNlIiwgImNoYWluIiwgIm5ld0NvbmZpZyIsICJvbkZ1bGZpbGxlZCIsICJvblJlamVjdGVkIiwgImdlbmVyYXRlSFRUUE1ldGhvZCIsICJpc0Zvcm0iLCAicmVxdWlyZV9DYW5jZWxUb2tlbiIsICJDYW5jZWxUb2tlbiIsICJleGVjdXRvciIsICJyZXNvbHZlUHJvbWlzZSIsICJ0b2tlbiIsICJvbmZ1bGZpbGxlZCIsICJfcmVzb2x2ZSIsICJsaXN0ZW5lciIsICJpbmRleCIsICJjIiwgInJlcXVpcmVfc3ByZWFkIiwgImNhbGxiYWNrIiwgInJlcXVpcmVfaXNBeGlvc0Vycm9yIiwgInBheWxvYWQiLCAicmVxdWlyZV9heGlvcyIsICJjcmVhdGVJbnN0YW5jZSIsICJkZWZhdWx0Q29uZmlnIiwgImluc3RhbmNlIiwgImF4aW9zIiwgInByb21pc2VzIiwgImltcG9ydF9heGlvcyIsICJhc3NldHNVUkwiLCAiZm9ybWF0cyIsICJjaGVja09jdWx1c0Jyb3dzZXIiLCAiZmVhdHVyZURldGVjdCIsICJ1YUNoZWNrIiwgImNvbmZpZGVuY2UiLCAiY2hlY2tXb2x2aWNCcm93c2VyIiwgImNoZWNrUGljb0Jyb3dzZXIiLCAiY2hlY2tEZXNrdG9wQnJvd3NlciIsICJjaGVja1VzZXJQbGF0Zm9ybSIsICJjdXJyZW50TWF0Y2giLCAib3BlblVSTCIsICJtb2RhbCIsICJ5ZXMiLCAibm8iLCAiQkVBQ09OX0FQSV9CQVNFIiwgIkJFQUNPTl9HUkFQSFFMX1VSSSIsICJEQl9FTkRQT0lOVCIsICJmZXRjaENhbXBhaWduQWQiLCAiYWRVbml0SWQiLCAiZm9ybWF0IiwgInN0eWxlIiwgInNlbmRPbkxvYWRNZXRyaWMiLCAic3BhY2VJZCIsICJjYW1wYWlnbklkIiwgInBsYXRmb3JtIiwgInNwYWNlQ291bnRlckVuZHBvaW50IiwgInNlbmRPbkNsaWNrTWV0cmljIiwgInNwYWNlQ2xpY2tFbmRwb2ludCIsICJmb3JtYXRzTGluayIsICJuZXR3b3JraW5nTGluayIsICJaZXN0eUJhbm5lciIsICJDb21wb25lbnQiLCAiZW5naW5lIiwgIkN1cnNvclRhcmdldCIsICJNZXNoQ29tcG9uZW50IiwgIkNvbGxpc2lvbkNvbXBvbmVudCIsICJDb2xsaWRlciIsICJmb3JtYXRzU2NyaXB0IiwgImJhbm5lciIsICJtIiwgInBpcGVsaW5lIiwgImFkVW5pdCIsICJhY3RpdmVDYW1wYWlnbiIsICJpbWFnZSIsICJ0ZXh0dXJlIiwgIl9fcHVibGljRmllbGQiLCAiUHJvcGVydHkiLCAibGVycCIsICJmbGF0TWF0ZXJpYWwiLCAiUmVmbGVjdCIsICJoYXNPd24iLCAic2V0IiwgIlR5cGUiLCAiZiIsICJNYXBJdGVyYXRvciIsICJNYXAiLCAic2l6ZSIsICJTZXQiLCAiV2Vha01hcCIsICJjcmVhdGUiLCAib2Zmc2V0IiwgIkxpZmVjeWNsZSIsICJkIiwgImIiLCAiZiIsICJEZWxheWVkQ29uc3RydWN0b3IiLCAiUmVnaXN0cnlCYXNlIiwgIlJlZ2lzdHJ5IiwgIlJlc29sdXRpb25Db250ZXh0IiwgImwiLCAiUHJlUmVzb2x1dGlvbkludGVyY2VwdG9ycyIsICJQb3N0UmVzb2x1dGlvbkludGVyY2VwdG9ycyIsICJJbnRlcmNlcHRvcnMiLCAiSW50ZXJuYWxEZXBlbmRlbmN5Q29udGFpbmVyIiwgImluc3RhbmNlIiwgImNvbnRleHQiLCAiX2EiLCAiZGlyZWN0aW9uIiwgImRpcmVjdGlvbiIsICJkaXN0YW5jZSIsICJzaXplIiwgImV4dGVuZFN0YXRpY3MiLCAiZCIsICJiIiwgIl9fZXh0ZW5kcyIsICJfX3ZhbHVlcyIsICJfX3JlYWQiLCAibCIsICJpbnN0YW5jZSIsICJTdWJzY3JpcHRpb24iLCAiX192YWx1ZXMiLCAiX19yZWFkIiwgIl9fcmVhZCIsICJfX2V4dGVuZHMiLCAiU3Vic2NyaWJlciIsICJDb25zdW1lck9ic2VydmVyIiwgIl9fZXh0ZW5kcyIsICJTYWZlU3Vic2NyaWJlciIsICJpZGVudGl0eSIsICJpZGVudGl0eSIsICJPYnNlcnZhYmxlIiwgIm9ic2VydmFibGUiLCAiX19leHRlbmRzIiwgIlN1YmplY3QiLCAiX192YWx1ZXMiLCAib2JzZXJ2YWJsZSIsICJfX2V4dGVuZHMiLCAiQW5vbnltb3VzU3ViamVjdCIsICJkaXJlY3Rpb24iLCAiZGlyZWN0aW9uIiwgImNoZXN0RGVmaW5pdGlvbiIsICJkaXJlY3Rpb24iLCAiZGlyZWN0aW9uIiwgImRpcmVjdGlvbiIsICJjYW52YXMiLCAiZWxlbWVudCIsICJkaXN0X2V4cG9ydHMiXQp9Cg==
